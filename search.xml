<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于博客</title>
    <url>/2025/06/22/RDM/</url>
    <content><![CDATA[<h3><span id="碎碎念">碎碎念</span></h3><p>终于把博客搞好啦！大概以后会经常拿这个网站来发东西了。评论功能和联系功能都已经上线。学习笔记已经全部公开了，一些随笔会在筛选后公开一部分。</p>
<h3><span id="致歉">致歉</span></h3><p>另外需要声明的是，因为公开的往往是我直接在课上记录的笔记，因此可能会出现老师讲什么我抄什么，导致我的某篇笔记可能与某篇文章的思路雷同。由于文章太多难以对其中搬运的部分一一溯源，只好在这里提前致歉。如若您的确发现我博客中某一块内容来源于您，请联系博客，我会尽快作出修改。</p>
<h3><span id="致谢">致谢</span></h3><p>感谢ycmgg帮助构建了博客的最初架构。</p>
<p>感谢djzgg帮忙支持了博客的xypic渲染。</p>
]]></content>
  </entry>
  <entry>
    <title>海的女儿</title>
    <url>/2025/06/22/%E4%B9%A0%E4%BD%9C-%E6%B5%B7%E7%9A%84%E5%A5%B3%E5%84%BF/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>你知道的，我是海的女儿，我是不应该离开大海的。</p>
<p>海底的确没有光，但我本就不依靠我这双眼睛。我依靠我的感觉在海底游逛，依靠我的歌声取悦自己。你一定没有听过我在海底唱过的歌。当我唱起歌来的时候，会有一群群游动的小鱼围绕着我旋转、旋转。我看不清她们的样子，也不知道她们的名字。但我仍然爱着她们，即使几分钟后就会有一条鲨鱼被鱼群吸引而来，然后周围就会散开一阵阵的血腥味。我闭上眼睛（虽然我本来也什么都看不见），闻着海水里的苦涩和血腥交织的味道，我有点想哭。可我为什么要哭呢，鲨鱼不会伤害我，我是海的女儿。</p>
<p>海底会有老人鱼给大家讲海面上的故事，她们会讲她们的祖先与陆地上的人相爱的传说。很多年轻的小人鱼都对这些故事心驰神往，可我对它们不以为然。她们有一次问我：</p>
<p>“你就从没幻想过一位王子会带你离开这里吗？”</p>
<p>“可如果那位王子不会唱歌的话，那我也一定不会跟他离开。”</p>
<p>我并不明白海面上有什么值得我向往的，我在海底拥有着我希望拥有的一切：我的歌声、我的小鱼们……除了光。</p>
<p>海底为数不多的亮光是鮟鱇发出来的，我小的时候还会被这种小而轻灵的光芒吸引，偏执地游向每一点星光。可是靠近后唯一能看见的只有鮟鱇满嘴獠牙的狞笑。最后一次的时候，那只鮟鱇朝我张开了嘴，散出一片暗红色的血雾，夹杂着破碎的鱼鳞和鱼骨。</p>
<p>我吓得转身逃走，连回头看都不敢，一味地向上游动，游动，游动。可周围的鮟鱇好像全都闻到了这边的血腥味，我看着一点又一点光逐渐变亮，逐步聚拢。我吓坏了，闭上双眼继续想前游。我在心里安慰自己：</p>
<p>“它们不会伤害我的，我是海的女儿。”</p>
<p>我就这么游了好久好久，直到我终于听不见鮟鱇獠牙错动的声音，我停下来，双手捂住自己的胸口。我睁开双眼，却发现周围几乎全是闪动的光点。我尖叫起来，拼命挥舞着双手，可什么也没有打到。这时我才发现那些光好像是凭空游在水里的，没有什么鮟鱇。那些光将整个海洋照的幽蓝，我发现自己能看清自己的双手，也能看清周围游动的小鱼。我抬头向上望去，上面是浮动的大块的光斑。</p>
<p>这是我第一次来到海面上，当我游出水面上的时候，阳光随着水花破碎在我眼前。我不知道该如何形容天空，那好像是另一片我永远无法触及的海洋；我也不知道该如何形容太阳。</p>
<p>正当我望着远处的日光出神的时候，却听见远处有人的呼喊。我转头看过去，一个男人正在船上挥舞着双手，大喊道：</p>
<p>“姑娘，你是溺水了吗？我们这就来救你！”</p>
<p>我想回他的话，我想告诉他我没事。可我张开嘴才发现我喊不出声音。离开了海洋，我发不出一点声音。</p>
<hr>
<p>我去找了海底的巫师，我恳求她教我如何到岸上去，她也教给我了方法。</p>
<p>那天我再次向上游去，只不过这次我睁着双眼。深海里往哪里游都是一片黑暗，但我选择向我感觉中的方向游去。这次我亲眼看着我身边的黑暗一点点褪去，大海本身的颜色从永夜中显现出来，眼前逐渐出现了海面上的破碎的光斑。我放平身子，任由海水将我一点点向上托出水面，任由阳光铺满了我全身的鳞片。然后我将刀刺进了我的身体，用刀刃一点点划开我的身体，将原本还紧紧相连血肉分开，鲜血从我的身体中涌出、散开在周围，在光下我第一次看到鲜红被光刺穿后的那么飘渺的色彩，我像是套上了一件血色的轻纱舞裙。</p>
<p>我继续将刀往下划去，一点一点。我有一次被游动的鱼鳍划伤过，那是一阵瞬间的疼痛，沿着伤口像水流一样蔓延。但此时的疼痛却如此漫长，已经被划开的身体浸在海水中，仿佛海水在拼了命侵占我的身躯；而正抵在刀刃上的血肉则咬住刀刃，黏住刀刃不让它继续往下割去，可刀片一点一点撕开血管，撕开肌肉，撕开所有不愿分开的部分。那是一种很奇怪的手感，会让你回想起你之前咀嚼鱼肉的记忆，我记得我用牙齿轻轻一压就将里面的鱼肉压断，但外面的鱼皮却还连接着，这时我会轻轻磨动牙齿，第一次下牙向前磨动的时候鱼皮几乎被卷了起来，第二次上牙往前磨动的时候卷起的鱼皮缓缓舒展而从中间断裂。但这和刀割还是有区别，刀割的时候我的鳞片外皮和里面的血肉几乎连成一起，你必须用刀上下不断磨动，一点一点划开里面的纤维。直到刀刃将我的整条鱼尾完全割开，我终于精疲力尽，昏死过去。</p>
<hr>
<p>等我醒来的时候，发现自己躺在海滩上，下半身已经完全变成了人的双腿，而且真的穿上了一件轻纱红裙。一位男子——这正是当时在船上呼喊过我的那位——正蹲在我身旁察看我的情况。看到我醒过来他很是高兴，正打算叫人过来，我却一下子抱住他。我原本想要哭，可我张开嘴，却发不出一点声音。</p>
<p>他背着我，把我带到了海边的小渔村里。原来他并不是什么王子，而只是海边的一个普通的渔夫。但这都无所谓了，只要能每天都见到阳光，只要能每天都见到他，这都是无所谓的对吧。想到这里，我趴在他的背上将他抱得更紧，将脸几乎埋在他的脖颈里。我听着路过的人对此议论纷纷，但我毫不在乎。</p>
<p>他就这么背着我一路到了他家里，然后他把我放下来，扶我躺到床上。然后转头向里屋喊了一声。一个女人走了出来，他们紧紧拥抱在一起。我听着他向他的妻子讲我的情况，我看着他的妻子的脸上露出同情的神色，我发现我全身穿着的根本不是什么红裙，我其实赤身裸体，全身都是血迹、伤口和淤青，皮肤上沾了薄薄一层沙子，左腿上插了一块贝壳碎片，现在还在流着血。我看着他打开了家里的灯，我看着那刺眼的白光射进我的双眼，我用尽全力将头别了过去，拼命捂住我的头，我想大声呼喊，可我什么声音也发不出来。我想掀起床单盖住自己，可我又发现自己已经弄脏了整张原本洁白的床，上面现在全是我的血和沙子，涂抹成诡异的图像。我转头看向他，他的渔夫装上也全都是血。这时门开了，我看着他们的女儿穿着一身白裙子蹦跳着走进了房间，转头看到了我，吓得尖叫着哭着抱紧了她的妈妈。</p>
<p>我跑下了床，在穿过门的时候被门槛绊了一下，整个人向下摔去，一头磕在了门口的石板上。他从背后跑过来把我扶起来，我看着那片石板上全是我的血。</p>
<p>我挥手用力地把他甩开，然后向街上跑去。</p>
<p>街边聚集了一群群的人，他们交头接耳，指指点点。我不知道哪个方向是海的方向，我跟着我的感觉的方向跑去。全身的伤口立刻痛起来，每一次我脚落在地上，整个小腿就是一阵痉挛。有几次我几乎因此跪在地上，但我还是拼了命跑，往海的方向跑。我是海的女儿。</p>
<p>我的感觉没有错，我跑到了海边，当我把双脚伸入海水的那一刹那，我感受到了从未有过的无比的温暖。一层又一层的波浪扑上来治愈我的伤口，我忽然感到全身都轻松起来，我想发笑，可我还是什么声音也发不出来。</p>
<p>我转头，回头看着村子。我想看看他在哪里。</p>
<p>一群又一群人开始聚集在海滩上，有的像是刚在酒馆里一起把酒言欢的朋友，有的则是十指相握的夫妻。他们有人在劝我回去，所以我拔下了左腿上的那片碎贝壳，把它抵在我的喉咙上，然后指着人群想命令他们安静。可我什么也说不出来，但他们仍然安静下来了。</p>
<p>渔村里的窗户开始探出一个又一个的头，他们全都看着我。这像是一场盛大的审判一样。我忽然发现我认出了其中的几个人，我不明白，我是海的女儿，为什么我会认出他们。</p>
<p>他终于来到了海滩，我看着他拨开人群站到最前面。我们就这么对视了好久好久好久好久好久，我咧开嘴冲他笑了笑，他却怎么低下头去了。</p>
<p>“他不愿意看到我了。”我想着，转头奔向海洋。</p>
<p>海浪一次又一次打在我身上，但我知道她们是想清洗我身上的淤血，我知道她们在赐予我新生，我知道我的双腿正在愈合在一起，我将重新拥有一条闪动着鳞片的鱼尾，我是海的女儿。</p>
<p>我忽然想起来他一定不知道这些，他可能以为我在跳海自杀，但其实不是这样的，我是海的女儿。我想回头告诉他这些，我不会死，我只是在重新回到我从前的生活罢了，但我忽然又好奇他会不会为我而哭，所以我决定不告诉他这些，继续往大海深处一步一步走去。</p>
<p>先是我的双腿，然后是我的双手，最后当我的脖子也被海水淹没的时候，我终于忍不住回头看了一眼。人群小的像是沙滩上的一个个光点，我确信其中的某一个就是他，虽然我其实根本看不清他们的脸。我转回头来，在海里张开双臂，向前拥抱海洋。当我终于全身都被海水淹没的时候，我张开了嘴，却被海水呛了一下。这不应该，一定只是我上岸后太久没歌唱了的原因。我抑制住自己的恶心和反胃，拼力再次张开了嘴，现在我终于可以歌唱了。我是海的女儿。</p>
<hr>
<p>没人知道那个哑女为什么要跳海自杀。她在很小的时候就被从外地卖到村里的妓院去了。人们总猜测是因为那些嫖客对她太过粗暴，但也有人说她当时跳海的时候脸上满是幸福的表情。总之，大家只好把这件事归结为大海的感召。</p>
]]></content>
      <categories>
        <category>习作</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>英美戏剧与电影大作业</title>
    <url>/2025/06/22/%E4%BD%9C%E4%B8%9A-%E8%8B%B1%E7%BE%8E%E6%88%8F%E5%89%A7%E4%B8%8E%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="the-bright-morning-stara-sequel-to-a-streetcar-named-desire">The Bright Morning Star(A Sequel to <em>A Streetcar Named Desire</em>)</span></h3><p>MATRON: This is her room. [<em>She knocks on the door.</em>] Miss DuBois,</p>
<p>here is someone who wants to visit you.</p>
<p>MITCH [<em>overwrought</em>]: Thank you. Has anyone visited her before? And</p>
<p>has she recovered?</p>
<p>MATRON: No, no. Although she has recovered a lot, sometimes she’ll</p>
<p>crouch over and tremble in corners as if someone will hurt her, and</p>
<p>she’ll try to hit anyone who wants to touch her when she’s insane.</p>
<p>[*She pushes the door open and lets Mitch in. The room where Blanche</p>
<p>lives now is a pure white space without windows, and a naked bulb</p>
<p>brightens the whole room as if it were daylight. There is a collapsible</p>
<p>bed in the corner of the room and a Bible on the table. Blanche sits on</p>
<p>a chair in a blue dress and stares at Mitch, which makes Mitch feel a</p>
<p>little guilty. Then the Matron goes out and leaves Mitch in the room.*]</p>
<p>MITCH [<em>keeping his head lower, staring at his hands</em>]: Hello, Miss</p>
<p>… DuBois.</p>
<p>BLANCHE [<em>happily</em>]: Hello, Mitch. I’m glad that you could visit me.</p>
<p>You know, I haven’t spoken to anybody for a long time. I … I didn’t</p>
<p>mean that the Doctor and the Matron treated me badly, and I also didn’t</p>
<p>mean that you are just a … talkative partner in my heart. [*Her voice</p>
<p>dies out nervously.*] You know that, you know that … did you bring</p>
<p>some whiskey or lemon coke for me?</p>
<p>MITCH: No, the Matron said that you can’t have any liquor.</p>
<p>BLANCHE: That’s a pity. Did you bring some unwashed grapes for me?</p>
<p>MITCH: What?</p>
<p>BLANCHE [<em>smiled</em>]: That’s just a joke.</p>
<p>MITCH [<em>relieved</em>]: It’s a relief to see you more delighted and</p>
<p>energetic now. [<em>There is a pause.</em>] The room is so … white, like a</p>
<p>… marble palace.</p>
<p>BLANCHE [<em>delightedly</em>]: Yes. Yes, I know that you mean to say “Ivory</p>
<p>tower”. The room is neat and … it is better than Elysian Fields,</p>
<p>right? I feel like a new human being with the white walls, the light,</p>
<p>and the Bible here. And Shep Huntleigh called me a few seconds ago. Soon</p>
<p>I’ll leave here and go to the real palace, being old and full of days.</p>
<p>The Lord will bless the latter end of mine more than my beginning.</p>
<p>[*The music of the polka rises, faint in the distance. She gets</p>
<p>crazy<em>] No, no, I don’t want to hear it again! [</em>Mitch gets</p>
<p>shocked.*] I’m sorry for that. I … I don’t know why sometimes I</p>
<p>behave like … like … Oh, how is your mother?</p>
<p>MITCH [<em>sadly</em>]: She has passed on.</p>
<p>BLANCHE: I’m sorry to hear that. [<em>There is a pause.</em>] Oh, don’t let</p>
<p>silence ruin our meeting. We haven’t met for …</p>
<p>MITCH: Seven months.</p>
<p>BLANCHE: Yes, seven months … It’s difficult for me to count the days</p>
<p>because there’s no calendar, nor sun … How about Stella’s baby? When I</p>
<p>feel lonely at night, I will miss the lovely baby. I haven’t seen him</p>
<p>… or her? Oh, it is not important, you know, Stella is my precious</p>
<p>little sister, and her baby is my precious little nephew … although</p>
<p>the baby’s father is … Stanley.</p>
<p>MITCH [<em>avoiding Blanche’s eyes</em>]: That’s why I came here, Blanche, I</p>
<p>have known the brutal thing that Stanley had done. I feel angry and …</p>
<p>sorry for it. I want to confess my behavior to you and … beseech your</p>
<p>forgiveness. [<em>His voice dies out.</em>]</p>
<p>BLANCHE: What thing? I must forget something. Pardon me, let me remember</p>
<p>for a moment … [*She starts shaking all over and panting for</p>
<p>breath.<em>] No, no, no! [</em>She screams*] That’s enough.</p>
<p>MITCH [<em>bravely</em>]: You know, Blanche. I … I’m sorry for what Stanley</p>
<p>… and I have done.</p>
<p>BLANCHE: I forgive you! You are the man that is without sin.</p>
<p>MITCH [<em>shocked</em>]: No, no, I’m not …</p>
<p>BLANCHE [<em>raising her voice</em>]: You are the one! It is you who lighten</p>
<p>my life … although just for a while. But that is not your fault. I</p>
<p>don’t deserve the light for my sinful self. It must be God’s punishment</p>
<p>…</p>
<p>MITCH [<em>restlessly</em>]: No, Blanche, you are …</p>
<p>BLANCHE: A courtesan, I’ve known it.</p>
<p>MITCH [<em>embarrassedly</em>]: No, Blanche, I didn’t mean that.</p>
<p>BLANCHE [<em>with a bitter smile</em>]: So why do you come here? To remind me</p>
<p>of the past which I try to forget, to sneer at my fate that I have been</p>
<p>trapped in this prison, or just because you want to have a sweet rest</p>
<p>without guilt?</p>
<p>MITCH [<em>embarrassedly</em>]: No, no, Blanche, I come here with kindness. I</p>
<p>know the memory of Stanley is so harsh for you and I … I have no</p>
<p>hostility to mention it. And … and, you see, the room is not so bad as</p>
<p>a prison. It is safe. No one will hurt you here.</p>
<p>BLANCHE [<em>coldly</em>]: And no one will love me here.</p>
<p>[<em>They keep silent for a while.</em>]</p>
<p>MITCH [<em>nervously</em>]: Maybe we can turn the light off. The room is too</p>
<p>bright.</p>
<p>BLANCHE [<em>with a bitter smile</em>]: Don’t touch the button. From the</p>
<p>first day I came here, the merciful Doctor and the Matron kept the bulb</p>
<p>on because they thought I’d be cured when there was no night. It works!</p>
<p>Now I love the light, it makes the room like a … white coffin. Yes, a</p>
<p>white coffin made of white woods.</p>
<p>MITCH: Don’t talk about death. You said you were afraid of it.</p>
<p>BLANCHE [<em>faintly</em>]: That was the past. In the past, I always wanted</p>
<p>to get away from death. Before I met you, I escaped to desire; after I</p>
<p>met you, I was lost in hope. In the past, I clutched at anything that</p>
<p>would tell me that I’m alive, and when there was no solid thing in</p>
<p>reality, I tried to clutch at myself … although I’m not solid enough.</p>
<p>The seven months I have spent here helped me understand death. Maybe</p>
<p>death isn’t just about crying and darkness but salvation and light. I</p>
<p>thought I dreamt about Jesus a few days ago and he said, “Today shalt</p>
<p>thou be with me in paradise.” I wanted to ask him what paradise is like</p>
<p>but … I could speak no word, and then I woke up ... But, but I could</p>
<p>imagine it! You see, the room is … is as stainless as heaven. You see</p>
<p>I’m more delighted and energetic here! It is doubtless that I’ll keep</p>
<p>delighted and energetic in heaven after I pass on … if I can go to</p>
<p>heaven by entering in at the strait gate … Do you think I can?</p>
<p>MITCH: Yes, of course.</p>
<p>BLANCHE [<em>laughed</em>]: God love you for a liar! But let me tell you the</p>
<p>truth: I’ve chosen a wide way that leadeth to destruction … it’s real</p>
<p>… but why I talk about the truth …</p>
<p>MITCH: I’m serious. I have made up my mind to come here … and I want</p>
<p>to take you away.</p>
<p>BLANCHE: I am not clean enough.</p>
<p>MITCH: Everyone is not clean enough. Everyone has … a sinful past. The</p>
<p>world is broken, Blanche …</p>
<p>BLANCHE: No, Mitch. I\’m too delicate and painful, but you … are</p>
<p>realistic and natural. How can we live together … just because we long</p>
<p>for a partner? Sick people have such deep, sincere attachments. But the</p>
<p>truth is that I’m sick and you’re not. How can you forbear me when I’m</p>
<p>on the edge of lunacy and want magic?</p>
<p>MITCH: If we … get married, I swear that you won’t be on the edge of</p>
<p>lunacy.</p>
<p>BLANCHE [<em>sobbing</em>]: I will. I’m too vulnerable and the world is …</p>
<p>always too harsh. [<em>There is a pause.</em>] It’s getting late. Maybe the</p>
<p>bright morning star has risen.</p>
<p>MITCH: But …</p>
<p>BLANCHE [<em>cutting him off, keeping sobbing</em>]: Will you attend my</p>
<p>funeral in the future? I have no idea when it will be held. But I know</p>
<p>it will come soon.</p>
<p>MITCH: Don’t say that.</p>
<p>BLANCHE: It’s a pity I can’t attend my own funeral. But I could imagine</p>
<p>it. It will be quiet and stainless, with pretty flowers … right?</p>
<p>MITCH [<em>hesitantly</em>]: Yes.</p>
<p>BLANCHE: Will I be buried at sea at noon in the summer?</p>
<p>MITCH [<em>sobbing</em>]: Yes.</p>
<p>BLANCHE: I wonder if you will cry for me that day. But don’t … don’t</p>
<p>answer me. Let it be a mystery, a fantastic mystery, just like the end</p>
<p>of a fairy tale. I had read so many fairy tales when I was young and I</p>
<p>always imagined that I’m a princess living in a palace, in a magic</p>
<p>palace, waiting for my prince and then having a happy ending. Everyone</p>
<p>believes that the protagonists of stories will have a happy ending, and</p>
<p>I’ll also believe it. Do you know the French story <em>La Porte étroite</em>?</p>
<p>MITCH: You know, I read few books.</p>
<p>BLANCHE: It’s my mother’s favorite novel. Do you believe that at the end</p>
<p>of the story, the hero and the heroine get married and have a happy</p>
<p>ending?</p>
<p>MITCH [<em>sobbing</em>]: I believe it.</p>
<p>BLANCHE [<em>smiled palely</em>]: Why are you so sad? Oh, don’t cry. Tears</p>
<p>are so precious that you should save them for more precious people.</p>
<p>[*Mitch covers his face with his hands. Blanche wants to wipe away his</p>
<p>tears at first, but then she hesitates and turns back.*]</p>
<p>BLANCHE: God shall wipe away all tears from our eyes, for the former</p>
<p>things are passed away.</p>
<p>MITCH [<em>raising his head with eyes full of tears, hesitantly</em>]: Do you</p>
<p>… do you still remember the inscription?</p>
<p>BLANCHE: What inscription? I have forgotten about it.</p>
<p>MITCH: Alright … alright, I’ll go. Good night, Miss DuBois.</p>
<p>BLANCHE: I shall say “Good night” till it be morrow.</p>
<p>[<em>MITCH leaves.</em>]</p>
<p>BLANCHE: And if God choose, I shall but love thee better after death.</p>
<p>[<em>The lights fade away.</em>]</p>
<p><strong>END</strong></p>
<h3><span id="summary">SUMMARY</span></h3><p>At the end of <em>A Streetcar Named Desire,</em> Blanche says she has forgotten</p>
<p>something. In this sequel, Mitch visits the asylum where Blanche is</p>
<p>living to express his wish to take Blanche away. Blanche refuses him</p>
<p>despite her love for Mitch. While living in the asylum, Blanche has</p>
<p>understood more about death and love. She knows she is not clean enough</p>
<p>and wants to go to heaven and love Mitch after death.</p>
<p>Or is this sequel just Blanche’s another dream before death? In the</p>
<p>Bible, there is no night nor sun in heaven, just like the room.</p>
<h3><span id="theme">THEME</span></h3><p>It’s an attempt to explain Blanche’s change after Stanley’s rape. Before</p>
<p>that, she was afraid of death and tried to avoid harsh light. But after</p>
<p>that, she claimed that she’d be buried at noon. I tend to link it to her</p>
<p>chase for a fancy world like heaven.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>OI中的线性代数</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-OI%E4%B8%AD%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><a href="#oi中的线性代数">OI中的线性代数</a><ul>
<li><a href="#线性基">线性基</a><ul>
<li><a href="#example1">Example1</a></li>
<li><a href="#example2cf1100fivan-and-burgers">Example2([CF1100F]Ivan and Burgers)</a></li>
<li><a href="#example3luogup8337-ynoi2004-rsxc">Example3(luoguP8337 [Ynoi2004] rsxc)</a></li>
<li><a href="#example4uoj703赵云八卦阵">Example4([uoj703]赵云八卦阵)</a></li>
</ul>
</li>
<li><a href="#杂题">杂题</a><ul>
<li><a href="#example1cf1270ixor-on-figures">Example1([CF1270I]Xor on Figures)</a></li>
<li><a href="#example2petrozavodsk-winter-2014-moscow-su-tapir-contestopenstrain-contest-1435-fpassing-finals">Example2([Petrozavodsk Winter-2014. Moscow SU Tapir Contest(openstrain contest 1435) F]Passing Finals)</a></li>
</ul>
</li>
<li><a href="#逆矩阵求解线性方程组">逆矩阵求解线性方程组</a><ul>
<li><a href="#example1codeforces-cf1266h-red-blue-graph">Example1(codeforces CF1266H Red-Blue Graph)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<span id="more"></span>
<h3><span id="oi中的线性代数">OI中的线性代数</span></h3><h4><span id="线性基">线性基</span></h4><h5><span id="example1">Example1</span></h5><p>给定$n $个非平方因子数$a _i $,求有多少种选取一个子集的方式满足每个质因子都在子集中恰好出现偶数次.$n \leq 2 \times 10 ^5 , a _i \leq 10 ^6 $.</p>
<p>考虑将每个数的质因子压成一个二进制数,那所求也就是问有多少种选取子集的方式使得子集内二进制数异或和为$0 $.自然想到线性基.$2 $的自由变量的数量次幂即答案.</p>
<p>但是直接做线性基不太对,因为质数级别是$10 ^6 $.我们冷静一下,把一个数中大于$1000 $的质因子拿出来,显然只会有一个.把所有数字根据这个质因子分类,那么显然一个组内必能插入一个数(作为这个质因子的主元),而其他数也必要异或上这个数,而异或后就只有小于等于$1000 $的质因子了,这种质因子只有不到$200 $个,可以拿bitset优化一下.</p>
<p>复杂度$O ( \cfrac { \pi ( \sqrt { a  } ) ^2 n  } { w  } ) $.</p>
<h5><span id="example2cf1100fivan-and-burgers">Example2([CF1100F]Ivan and Burgers)</span></h5><p>考虑扫描线,这样我们需要解决如何询问一段后缀$[ l , n ] $的答案,以及如何根据上一个位置的后缀推出这一个位置的后缀.</p>
<p>考虑有一个暴力是直接把每个后缀的线性基建出来:注意在此过程中,能放到高位的数字一定出现地尽可能靠后,因为它一早就被放进来了.而只要满足这个条件,也就是能放高位的一定尽量放高位,并且高位出现时间要尽可能晚,那我们自然就得到了此时的线性基,删去那些出现太靠前的数字就行.</p>
<p>但有没有什么直接一点的理解方式呢?一个直觉是,我们现在要把出现时间太早的给删了,那肯定想要让高位出现时间尽可能晚.但是这样会有两个问题:</p>
<ol>
<li><p>可能$l $较小但是没那么小,高位即使不顶替,也会被选上,但是顶替了高位就无法顶替一个将被删除的低位.</p>
</li>
<li><p>由于线性基并非最简线性基,我们最后的答案有可能不会将某一位异或进答案,那此时尽量最优化它是不优秀的.</p>
</li>
<li><p>线性基中的元素不能受到非线性基中的元素的影响,我们删除一位的时候,这一位有可能在之前影响了比它低的一些位置.</p>
</li>
</ol>
<p>来一个一个解决.</p>
<p>(3)是最好解决的.对于因为出现时间太早而导致的删除来说,因为如果一个位置被高位影响了,根据我们的构造过程,这个位置出现时间必然不会晚于那个高位,高位都被删了,那这个位置也会被删.</p>
<p>对于因为被其他人而取代导致的删除来说,因为它被删了,因此它一定可以表示为其它线性基底的异或,因此有影响也无所谓.</p>
<p>再来看(1),考虑我们当前插入的数字是$v $,如果$v $本来就会被加入线性基,那它扔到高位,然后替换下来的那个数字也不可能被删除,一定会延续到低位.如果$v $本来不会被加入,必然因为有一些基底的异或值是$v $,那么把$v $加入后,一路到最后,被删除的那个基底必然是出现时间最早的那个菜逼,删了就是了.</p>
<p>接下来是(2),考虑上面这个过程完全不耽误你把它变成最简线性基,最简线性基就没这个问题了.</p>
<p>当然这题还可以分治,注意到用线段树直接合并区间的线性基的复杂度达到了$\log ^3 $,但是如果我们用猫树的结构但是不必要在线,复杂度降到了$\log ^2 $.</p>
<h5><span id="example3luogup8337-ynoi2004-rsxc">Example3(luoguP8337 [Ynoi2004] rsxc)</span></h5><p>注意到区间数字种类个数一定是二的整数次幂,假设为$2 ^k $,先枚举$k $.</p>
<p>首先根据CF1100F,我们可以离线找出区间的线性基,这意味着区间不同整数个数是否是$2 ^k $.</p>
<p>做完这两步之后呢?我们接下来需要求和.这里注意到随着扫描线的进行,左端点可能合法的区间左右端点均单调不降,我们对着二维坐标系做一个差分(就是把一条直线延伸到$y = x $这条直线上),于是可以$O ( 1 ) $求和.</p>
<p>这里详细解释一下上面的那个套路:当我们插入一个数字的时候,每当遇到了一个此位置是$1 $的出现次数早于该数字的数字,我们就交换它们.为啥这样是对的呢?首先如果插入的这个数字并不能被其他数字所表示,那无论怎么交换都不会有影响.而如果可以,那一定会与所有参与表示的数字都交换一次.注意到每次交换等价于找到两者中出现较早的那个,所以最后一定会删去出现最早的数字.</p>
<h5><span id="example4uoj703赵云八卦阵">Example4([uoj703]赵云八卦阵)</span></h5><p>用一下构造能力不难发现,每个点的取值是它前面的数能表示出的所有数(也就是线性基)异或上他自己.</p>
<p>我们考虑从左往右加线性基(并保存旧的版本),每次如果一个数并不能更新线性基,说明这个数字能取的取值范围就是到它的线性基中的所有数字.进一步地,你注意到它的取值范围一定包括了它前面的所有数字,这个同样可以通过线性基的性质来得到.</p>
<p>注意到难点在于那些加入后更新线性基的点,称它们为关键点,这样的关键点最多$\log V $个.所以我们可以暴力讨论它们的存在.而那些普通的点显然分成了若干个段,每段的取值是相等的.我们可以按照线性基的顺序走.如果我们必须要在关键点和其它的点中挑一个删了,显然我们要删关键点,因为其他的点能很完美地接上,但是关键点可不一定能接上.</p>
<p>也就是说对于一个非关键点,能选则一定要选.因此我们直接从后往前dp,如果遇到关键点的话讨论一下它选不选,遇到非关键点一定要选,如果选不了就更新答案.</p>
<p>我们不妨设计一个dp,设$f _{ i , j  } $表示从$n $走到第$i $个数字,中间取了$j $个关键点,$a _i $的最大值是多少.这样问题转化为:</p>
<ol>
<li><p>对于一个数字$X $,找到线性基中最大的小于它的数字.</p>
</li>
<li><p>对于一个数字$X $,将它与线性基中若干基底异或得到$X ‘ $,使得$X ‘ &lt; Y $并且$X ‘ $尽可能大.</p>
</li>
</ol>
<p>不难发现第一个问题就是第二个问题中的$X = 0 , Y = X $的情况.用最简线性基算排名可以轻松解决上面的问题.</p>
<h4><span id="杂题">杂题</span></h4><h5><span id="example1cf1270ixor-on-figures">Example1([CF1270I]Xor on Figures)</span></h5><p>首先我们发现,它的平移操作和矩阵很相似,我们考虑将操作写成矩阵形式.</p>
<p>具体地,我们定义新的矩阵乘法为:$A \times B = C $,其中$C _{ x , y  } = \bigoplus _{ i = 0  } ^{ 2 ^k - 1  } \bigoplus _{ j = 0  } ^{ 2 ^k - 1  } A _{ i , j  } \times B _{ ( x - i ) \mod 2 ^k , ( y - j ) \mod 2 ^k  } $.</p>
<p>定义矩阵$F $:$F _{ x _i , y _i  } = 1 , 1 \leq i \leq t $,其他位置均为$0 $.不难发现每次操作无非是将$F $乘上一个只有$( X , Y ) $位置是$w $,其余位置都是$0 $的矩阵然后异或到$A $上.我们发现这些操作也可以压缩成一个矩阵.这样问题就转化为:我们已知$F $,求$0 $的位置尽可能多的矩阵$C $,满足$F \times C = A $.</p>
<p>我们看到这个形式,发现它很优美,这个时候自然有一个猜想:$F $在这种形式下是否存在逆矩阵呢?</p>
<p>注意到$F $的值是异或运算下,和取膜有一定关系,我们再大胆猜测:$\exists m , F ^m = I $,其中$I _{ 0 , 0  } = 1 $,其他位置都是$0 $.此时$F ^{ - 1  } = F ^{ m - 1  } $.打表可以发现$m = 2 ^k $.</p>
<p>接下来我们只需要证明这个结论就行.其实也好证:注意到进行一次运算后,$F _{ x _i , y _i  } \times F _{ x _j , y _j  } $和$F _{ x _j , y _j  } \times F _{ x _i , y _i  } $都会更新到$F ^2 _{ x _i + x _j , y _i + y _j  } $,因此他们俩互相抵消.这意味着$F ^2 $中,只有$F ^2 _{ 2 x _i , 2 y _i  } $有可能非零.</p>
<p>进行$2 ^k $后,由于下标对$2 ^k $取膜,容易发现这个时候只有$( 0 , 0 ) $有可能非零.而由于一共有奇数个$1 $,所以这里一定是$1 $.得证.有$C = F ^{ 2 ^k - 1  } A $.</p>
<p>根据上面的证明过程不难发现,$F $的$2 $的整次幂很好求,所以我们拆开幂,有$C = \prod _{ i = 0  } ^{ k - 1  } F ^{ 2 ^i  } A $.注意到$F $很稀疏,最多只有$t $个地方非零,所以做一次的复杂度是$O ( ( 2 ^k ) ^2 t ) $,总复杂度$O ( kt 4 ^k ) $.</p>
<h5><span id="example2petrozavodsk-winter-2014-moscow-su-tapir-contestopenstrain-contest-1435-fpassing-finals">Example2([Petrozavodsk Winter-2014. Moscow SU Tapir Contest(openstrain contest 1435) F]Passing Finals)</span></h5><p>给定一个$n \times n $的矩阵,其中有$m $个位置($m \leq 5 $)的数字缺失了.给定质数$P $,现在要在这$m $个位置上填上$[ 0 , p - 1 ] $的数字,使得最后矩阵的行列式在$\bmod p $意义下等于给定数字$C $,求任意一组方案,$1 \leq n \leq 100 $,$2 \leq P \leq 10 ^9 $.</p>
<p>如果$m = 1 $,做代数余子式展开,显然如果这个位置对应的代数余子式为$0 $,那它填什么无所谓,随便填一个然后验证.不然,我们一定可以用逆元算出一个答案,使得满足条件.</p>
<p>同理,如果$m &gt; 1 $,我们考虑随机$m - 1 $个位置并随机它们的值,然后验证.如果我们能找到一组随机满足剩下的那个位置对应的代数余子式非零就做完了.如果我们随机了若干次,还是没有找到,宣告无解.</p>
<h4><span id="逆矩阵求解线性方程组">逆矩阵求解线性方程组</span></h4><p>如果我们已知线性方程组的系数矩阵,但是多次询问,每次会给出不同的常数项,我们可以使用下文中提到的逆矩阵来求解.</p>
<h5><span id="example1codeforces-cf1266h-red-blue-graph">Example1(codeforces CF1266H Red-Blue Graph)</span></h5><p>如果我们设$x _i $表示每个点被经历过多少次.注意到一共有$n - 1 $个方程以及$n - 1 $个未知数,我们实际上是要根据$s $和$v $求出一组$x $然后判定合法,我们先写方程:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x _i - [ i & = 1 ] \\
& = \sum _{ e : j \rightarrow i \ is \ blue  } \frac { x _j - [ s _e = red ] - [ j = v ]  } { 2  } \\
+ \sum _{ e : j \rightarrow i \ is \ red  } \frac { x _j + [ s _e = red ] - [ j = v ]  } { 2  } 
\end{aligned}</script><p>化简一下:</p>
<script type="math/tex; mode=display">
2 x _i - \sum _{ j \rightarrow i  } x _j = - \sum _{ e : j \rightarrow i \ is \ blue  } [ s _e = red ] + \sum _{ e : j \rightarrow i \ is \ red  } [ s _e = red ] - \sum _{ j \rightarrow i  } [ j = v ] + 2 [ i = 1 ]</script><p>注意到这是一个系数恒定且常数项不确定的矩阵,可以先矩阵求逆再做.</p>
<p>另外有一个问题是,怎么证明这个系数矩阵一定存在逆矩阵,不难注意到这是个基尔霍夫矩阵,显然$\det $为$0 $.</p>
<p>这也就是说,我们一定可以求出唯一一组解.我们要做的只是判定它是否合法.</p>
<p>先通过数学归纳等方法证明一组满足流量平衡以及以下条件的$x , s , v $一定合法:</p>
<p>对于任意一个点,都存在一条只经过激活边的路径到达最终点.</p>
<p>首先充分性,如果满足这个条件,我们只要不断地退流就可以得到一组一定合法的答案.</p>
<p>然后必要性,如果存在一个点没有这条路径,那这个点也必然不可能被回溯到,自然不可能出现一组解.</p>
<p>这题关键在于发现流量平衡这个等价条件,然后知道我们可以求出一组状态,并只需要判定状态是否合法,找判定条件.</p>
<p>然后写分数的人被卡常了,泪目.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>青蛙王子</title>
    <url>/2025/06/22/%E4%B9%A0%E4%BD%9C-%E9%9D%92%E8%9B%99%E7%8E%8B%E5%AD%90/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>我急匆匆进了酒吧，抬手看了看表上的时间，庆幸自己来得还早。</p>
<p>酒吧里只有稀稀拉拉几个人。我找了个没人的地方坐下，又拿手中的书占住旁边的一个位置。</p>
<p>我的左手紧握，攥着什么东西。我能感受到手心沁出的汗珠，黏糊糊的，以至于我不得不找服务员要了点纸。</p>
<p>“现在我该做些什么呢？”我想，离约定的时间还有半个小时。</p>
<p>这时，一个老乞丐凑了过来，一把移开我放在那里占位置的书，然后坐了下来。我正要发怒，那老乞丐却比了个噤声的手势，然后又忽然大笑起来。</p>
<p>“呦，这不是我们的大作家么，来这里等人么？”</p>
<p>我瞪了他一眼，站起身，拿起被他扔到一边的书，准备换个位置坐。但他竟一把按住我的肩让我坐下，然后笑嘻嘻地看着我。随后又把脸凑过来，漏出一口碎牙，“请我一杯酒，我可以为您讲个故事。”</p>
<p>我几乎快要为他的无礼而发疯了。我抡起书狠狠地将他打翻在地，但他仍旧笑嘻嘻地站起身来，“哎哟，早就听说您才华大脾气也大，写的故事怪而人也怪，今天算是见到了。但我敢打赌，您从来没有听过我讲的故事，那些吹捧你的俗人也从来没有听过我这个童话，它足以将您的所有作品都比下去呢。”</p>
<p>我对此嗤之以鼻，看了看表，时间尚且还早。于是我请了他一杯最便宜的啤酒，他看到酒端过来后笑嘻嘻地搓着手说，“哎呀，大作家出手就是阔绰。”然后他猛喝一大口，放下杯子来就开始讲。</p>
<p>“您一定听过青蛙王子的故事，一个女巫爱上了王子，因爱生恨而将他变成了一只青蛙。后来这个王子得到了一位公主的吻，爱的力量解除了诅咒，让他变回了俊俏的小王子。</p>
<p>“但这显然是个杜撰的故事，没有人见过青蛙变成王子。”</p>
<p>他露出一抹不屑的笑。</p>
<p>“但王子变成青蛙倒是可能的，这便是我接下来要讲的故事。</p>
<p>“其实真正的故事是，王子爱上了女巫，但女巫憎恶王子的骄傲和清高，于是施展魔法将他变成了一只青蛙。但女巫告诉王子，只要得到三样东西，他便可以重新变回王子的模样。</p>
<p>“于是王子问她是哪三样东西，女巫告诉王子，他需要拿到黄金的王冠，纯银的戒指，和一位公主的吻。</p>
<p>“黄金的王冠戴在巨人之王的手上，而巨人只会在一年一次的极夜陷入休眠，只有这个时候，青蛙王子才有机会从巨人的脚上一路向上爬，直到摘下那顶黄金的王冠。</p>
<p>“于是青蛙王子来到巨人国躲藏了一年，这一年它几乎时时胆战心惊，四处躲藏。终于等到了极夜，它一路紧紧攀着巨人发臭且粗糙的皮肤向上爬，直到摘下了那顶黄金的王冠。”</p>
<p>说到这里，他不禁又失声笑了起来。</p>
<p>“您知道嘛，那青蛙得了王冠，竟然真的觉得自己已经恢复了王子之身了。</p>
<p>“接下来是那枚纯银的戒指，它戴在蛇王的头上。青蛙这次没什么投机取巧的办法了，它唯有一条路可走，那就是苦练武艺，直到亲手杀死蛇王。</p>
<p>“这对于你我来说当然不是难事，但它是一只青蛙。它在一堆枯树枝中寻觅了良久才找到那根趁手的兵器，随后日夜勤加练习。直到那一天，它终于拿起树枝和蛇王苦战，最终遍身血肉模糊的它斩下了蛇王的头颅。”</p>
<p>我已然听入了迷，“那么公主的吻呢？”我问到。</p>
<p>那老乞丐笑着将杯中的酒一饮而尽。</p>
<p>“青蛙王子将黄金的王冠戴在头上，将纯银的戒指藏在舌头下，它此时真的像是一位王子了——但还少了一样东西，一样最重要的东西。‘一位王子，就要有和他相配的公主’他想。</p>
<p>“他日夜思索那位公主的模样，那位公主一定有着一头乌黑的长发，穿着淡蓝色的裙子，举手投足间尽显优雅。一定饱读诗书，一定多愁善感，会因为书中英雄的落幕而垂泪，会因为书中少女的迟暮而感伤。</p>
<p>“‘哦！’他想，‘只要我见到了这位公主——我一定一眼就能认出她来——我就为她献上我的纯银的戒指，她会给我一个吻，然后我就彻底摆脱了诅咒，从此像所有童话书的结尾一样，过上幸福的生活。’</p>
<p>“‘哦！’他想，‘那位公主会在什么时候出现呢？也许就在下个路口的转角，等我走到那里，一辆镶金的带着异香的马车就会缓缓驶过，我一跃跳到那马车上，将银戒指轻轻吐到那位公主面前，抬头向她展示我头上的金冠，然后为她高歌一曲，赞颂她的美丽与优雅，讲述我的苦难与不幸。然后她便会为我的魅力所折服，为我献上一吻，我从此就可以变回王子的模样了！’</p>
<p>“青蛙王子如此幻想着，他当然有资格幻想。在青蛙中，他可是前无古人后无来者的。试问哪一只青蛙可以取得巨人手指上的金冠，拿到毒蛇头顶的银戒呢？他当然是有资格这么想的。我想他当时还自称自己是青蛙中的凤凰。</p>
<p>“他就如此跳跃着跳跃着，满怀对着未来的憧憬，去寻找他的公主。”</p>
<p>“那后来呢？”我问。</p>
<p>“有一天青蛙王子越过田间的时候，却突然被一只手给抓住了。他扭头一看，是一位美丽的姑娘。青蛙王子一眼就爱上了这位姑娘，尽管她有着一头棕色的短发，身上穿着亚麻色的衣裳。</p>
<p>“‘啊，一只戴着金冠的青蛙！’那位姑娘惊呼道。青蛙王子立刻为自己头上的金冠，以及还未吐出的银戒而自豪了。说真的，从他历经磨难取下这两样事物的时候，他就有资格为它们而自豪。它们中的任何一件都是世间少有的珍宝。</p>
<p>“‘但这不是一位公主，’青蛙王子想着，‘我需要一位公主的吻才可以解除诅咒。’所以青蛙王子纵身一跃跳出了姑娘的手心。他往前跳了几步，却又不禁回头望向那位姑娘。望了两眼，又想到自己要破除诅咒的决心，扭头往前再跳几步，却最终又忍不住回头看。</p>
<p>“终于青蛙王子下定了决心，他连跳几步跳到姑娘面前，那位姑娘蹲下身来看着他，他们俩就这么四目相对。青蛙王子伸出舌头，将银戒放到姑娘的面前。然后开始大声唱起自己的赞美诗。</p>
<p>“但你猜怎么着，哈哈哈，在姑娘耳中，她根本听不懂青蛙在唱些什么，只听见青蛙‘呱呱’地大叫，大叫，大叫，哈哈哈哈哈哈……</p>
<p>“‘真是一只奇怪的青蛙’姑娘嘟囔着，站起身来准备去继续做自己的事了。青蛙王子看到这几乎不敢相信，所以他又大声唱起来，有几句还是他现场为姑娘写的词。</p>
<p>“但具体是什么词又有什么所谓呢，在姑娘耳中，这一切都只不过是聒噪的叫声。他以为自己是受了诅咒的王子，但在她眼中它只是只戴着金冠的青蛙。”</p>
<p>老乞丐讲完了故事，笑眯眯地站起身来。“我的故事讲完了，大作家，你应该还给我一个故事了。”</p>
<p>我愣住了，“我没有什么可还给你的。”</p>
<p>老乞丐放声大笑，笑过之后，他又露出了一口碎牙。</p>
<p>“那把你左手的银戒还给我吧，大作家。”</p>
]]></content>
      <categories>
        <category>习作</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>卖火柴的小女孩</title>
    <url>/2025/06/22/%E4%B9%A0%E4%BD%9C-%E5%8D%96%E7%81%AB%E6%9F%B4%E7%9A%84%E5%B0%8F%E5%A5%B3%E5%AD%A9/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>“地上好冷。”这是莉娃丽尔冻死在街头前最后闪出的念头。</p>
<p>路人熙熙攘攘从她旁边走过，但没有人会为她停留的。今晚正是平安夜，明天就是圣诞节。</p>
<p>她不记得去年的平安夜她是怎么过的了，但她记得在前年的平安夜，当她卖掉了第十三盒火柴后，她看着空空的篮子，又抬头看了看刚买了火柴的绅士，忽然开口说：</p>
<p>“先生，请问您能送我一根火柴么？”</p>
<p>那位西装革履的绅士愣了一下，然后和善地笑着抽出一根火柴送给了她。</p>
<p>她将那根火柴用原本盖在篮子上的布包好，小心翼翼地放在篮子里，然后一路小跑着回了家。在家门口她看见了泽基华尔兹先生，他面前是一棵刚刚运来的圣诞树，他正抱起一包礼物准备放在树下。莉娃丽尔欢快地向他打招呼：</p>
<p>“泽基华尔兹先生，您好！圣诞节快乐！”</p>
<p>然后她转头进了自己住的地下室。从自己的枕头底下摸出一根蜡烛，那是她两天前卖剩下的蜡烛，她本应将其还给雇佣她的商店老板。但那天她突然决定将这根蜡烛拿回家去。她回到家翻找自己的存钱盒——那原本是一个火柴盒，后来莉娃丽尔偷偷拿泽基华尔兹先生的笔在上面画了朵小花——从里面拿出了一根蜡烛的钱（那本是她下个月应交的租金），然后混在她卖蜡烛得到的钱里，跟商店老板谎称自己已经把蜡烛卖完了。</p>
<p>莉娃丽尔将蜡烛小心翼翼地放在桌子上。她在街上卖火柴的时候经常透过窗户看到市民们这么做，他们往往在桌子上摆上一排蜡烛，让几个孩子依次点燃它们。</p>
<p>莉娃丽尔又拿出了她篮子里的包裹，轻轻地打开，从里面拿出那根绅士施舍的火柴。她没有火柴盒，但她知道该怎么点燃它，她见过一个躺在街边要死的流浪汉是如何向她奢求一根火柴，在她给他后又是如何擦着自己的手背将它擦着，然后小心翼翼地点燃路边捡来的烟头抽了起来。</p>
<p>所以莉娃丽尔也拿起那根火柴。她一开始怕把火柴折断，只敢轻轻地擦过她的手背。但除了她自己手上被擦出几根红印子以外，什么也没发生。莉娃丽尔有点着急，因为她听见了外面钟楼的报时：还有十分钟平安夜就要过去了。她深呼一口气，将火柴在手上用力一划——火柴就这么折断在她的手背上。</p>
<p>她看着那半根火柴，忽然哭了出来。但她又想起了自己的存钱盒，所以她连忙将那个小盒子找了出来，小心地捏着半根火柴，然后猛地在盒子的侧面一蹭。但她手一抖，刚刚点燃的火柴和盒子一起掉在了地上。她连忙拿手去扑，但立刻被烫得缩回了手。此时她站起来扫视她的小地下室，想找些什么东西来扑灭这堆小火——她跑到床前捧起自己的被子，然后转身，来不及了。她的小存钱盒被烧成了一堆灰，她的那半根火柴棍倒是还剩下一些木头，但是火柴头已经被烧没了，留下黑色的一小块昂着头，好像也在看着莉娃丽尔。</p>
<p>莉娃丽尔站在那里，两手还捧着她的小被子，不知道该做些什么。忽然她意识到自己好像应该哭，但她试了试发现她哭不出来。</p>
<p>她想到自己可以去找泽基华尔兹先生借一根火柴。</p>
<p>泽基华尔兹先生是她的房东，也算是她父母的朋友。莉娃丽尔的父母长年在外地打工，莉娃丽尔就这么被他们托付给泽基华尔兹先生照顾。但泽基华尔兹在她的父母走后第二天就将莉娃丽尔叫过去，命令她每个月初都要缴纳五戈比的房租。他带着他那顶黑色羊毛帽，将手插到兜里，然后望着面前的莉娃丽尔说：“小姑娘，你要知道，我是你父母的朋友。正是因此我才会只要你如此少的租金。当然了，您一个小姑娘，况且才刚刚十一岁，靠自己当然是没有办法找到工作的。您知道的，我是您父母的朋友，所以我和商店老板商量好了，您可以帮他在街上卖报纸、蜡烛这类东西，等到了冬天还可以卖些火柴。您知道的，市民们总是很需要火柴的。等您十四岁后，我当然就可以为您提供一些新的工作。”</p>
<p>莉娃丽尔又欢快起来了，她知道泽基华尔兹先生一定会帮她的，他是她父母的朋友。</p>
<p>她飞奔出地下室，刚好碰见正欣赏自己杰作的泽基华尔兹先生。他看到莉娃丽尔，忽然咧出笑容：</p>
<p>“莉娃丽尔，过了这个平安夜，你就要十四岁了对吧。”</p>
<p>莉娃丽尔点点头，然后张口问泽基华尔兹先生能否借给她一根火柴。</p>
<p>泽基华尔兹笑得更开心了：“当然可以，莉娃丽尔。我还答应过等您十四岁的时候要为您介绍工作。您知道的，我是您父母的朋友，我绝不会食言的，这您是知道的。这份工作当然要远比您上街卖火柴要舒服得多。您甚至可以在冬天用上属于自己的火炉，我亲爱的莉娃丽尔。您知道的，亚特太太就住在不远处，我将在她那里为您找一份新的工作。”</p>
<p>莉娃丽尔于是跟着泽基华尔兹先生一路去找亚特太太。然后泽基华尔兹先生领她到了一个房间并让她待在房间里。不久后她听到了泽基华尔兹先生和亚特太太的争吵。</p>
<p>“什么！一百卢布？亚特太太，我想您应该重新想想。这么漂亮的一个小女孩，而且才刚刚十四岁，接一次客就能收十个卢布！三年前我到您这来，您告诉我警察会因为您这里有十一岁的女孩而找您的麻烦，并承诺我三年后可以给我两百卢布，现在您倒是全不记得了！一百卢布，开什么玩笑！”</p>
<p>莉娃丽尔忽然觉得好害怕，她从来没见过泽基华尔兹先生这么发过火。此时她才意识到她没能把她的那支小蜡烛一块带来，所以她立刻跑出了房间。她听见泽基华尔兹先生在后面怒吼，但她不敢停留，一路狂奔回了她的小地下室。然后拿上那支小蜡烛，准备去街上。她忽然记起她父母跟她说过他们就在不远处的一个小城里打工，她立刻决定去找她的父母。但当她走到地下室门前的时候，她发现泽基华尔兹先生站在门口。他面色凶恶地看着莉娃丽尔，莉娃丽尔从来没见他这么生气过。</p>
<p>“把衣服脱掉！”他朝着莉娃丽尔大吼，然后转身带上了门，并上了锁。</p>
<hr>
<p>莉娃丽尔自那天之后就一直被关在地下室里。她开始出现幻觉，她有的时候会忽然觉得自己的父母就在房间里，有的时候又会忽然在地下室里叫起来：</p>
<p>“卖火柴啊，卖火柴啊。绅士们，买一盒火柴吧！”</p>
<p>后来莉娃丽尔忽然又有一天看着墙壁，想要在上面画些什么。所以她拿着那根小蜡烛在墙上画出一朵小花，正像她之前在火柴盒上画的一模一样。但泽基华尔兹先生为此十分生气，他那天晚上拿着小刀狠狠地划着墙壁，把莉娃丽尔的小花划得七零八落，然后狠狠地揍了她一顿。所以后来莉娃丽尔再也没用蜡烛画过画，她把蜡烛扔到角落里，然后开始用手蘸着唾沫抹在墙上，这样在墙上的唾沫干之前，她还是有一朵小花。</p>
<p>后来她画着画着，直到有一天她发现一块砖头松动了。她试图去挪动那块砖头，却一不小心将它整个从墙上拿了下来。她看着在手上的砖头尖叫起来，她知道泽基华尔兹先生一定会为此再揍她一顿的。但泽基华尔兹先生却恰好在这个时候走了进来。他看了看墙上的窟窿，怒不可遏地向莉娃丽尔冲过去，但他却在这个时候被地上的蜡烛绊倒了。他趴在地上，正准备起来——但莉娃丽尔将砖头狠狠地拍向了他的头上。</p>
<p>莉娃丽尔跑到街上才发现今天恰好是平安夜。她觉得离上一个平安夜过了好长时间，所以她认定这是两年后的平安夜。莉娃丽尔走在街上，她想去找她的父母，但她不知道该去哪里找他们了。她就这么走在路上，直到迎面撞上一位绅士。她抬头看，然后认出了他——那是两年前送给她一根火柴的那位绅士。</p>
<p>但绅士没有认出莉娃丽尔，他只是看着莉娃丽尔身上褴褛的衣服和脸上的淤青，在胸前画了个十字。“上帝保佑您，小姐。”</p>
<p>莉娃丽尔扑到绅士身上，紧紧抱住他放声大哭起来。她觉得绅士一定可以带她去找她的父母，他是多么好的一位人啊，比莉娃丽尔见过的所有人都要好。她想跟绅士讲她过去经历的故事，她忽然想给绅士画一画那朵小花，所以她松开了手，然后把手伸进嘴里想蘸上点唾沫，但手指拿出来的时候却沾满了血，但莉娃丽尔小姐反而更加兴奋，她知道红色的小花要更加漂亮。她举起手指，在绅士眼前晃了晃，开心地笑了。</p>
<p>然后她看见了绅士的妻子带着他们的女儿走到了绅士旁边，她盯着那个女孩，她正穿着一件白色的大衣，脸颊被冻得有点发红。她听见绅士跟她们解释自己遇到了一位“可怜的女孩”，并看见他将手伸进口袋里，拿出一枚五十戈比的硬币。她突然明白自己的出现意味着什么，是她打扰了他们一家的平安夜。她低头看了看自己满是伤痕的身体，看了看自己已经破烂发臭的衣服，她终于明白了自己出现在这里对这位绅士来说是一辈子遇到的最令人作呕的事情。</p>
<p>她转头向街上跑去。</p>
<p>绅士没有叫住她。</p>
]]></content>
      <categories>
        <category>习作</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>OI中的常见套路</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-OI%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="本质相同">本质相同</span></h3><h5><span id="example1">Example1</span></h5><p>对于所有满足以下条件的长度为$n $的序列$\{ a \} $,我们称它是好的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _1 & = 1 \\
\forall 2 & \leq i & \leq n , a _i & \leq \max \{ a _1 , \cdots , a _{ i - 1  } \} + 1 
\end{aligned}</script><p>对于每一个数$1 \leq x \leq n $,求它在每个好的序列中出现的次数的平方和.其中$1 \leq n \leq 3000 $,任意模数.</p>
<p>首先注意到可以枚举每个数$x $出现的次数,这样就转化为对满足某些位置是$x $的好的序列计数.</p>
<p>对于一个没有限制的好的序列,设$f _{ i , j  } $表示$[ 1 , i ] $中填了$[ 1 , j ] $(其中$j $必填)的方案数,不难发现这就是第二类斯特林数.</p>
<p>这样,对于一个$x $,我们可以枚举它第一次出现的位置以及出现的次数,以及它第一次出现的位置后面的大于等于它的数的数量,合并即可.复杂度$O ( n ^4 ) $.</p>
<p>再思考一下,似乎我们不用枚举它出现的次数,而是可以直接用$g _{ i , j , 0 / 1 / 2  } $表示在$[ 1 , i ] $中填$[ 1 , j ] $,$1 $出现次数的平方和.同样枚举后面有多少大于等于它的位置,然后就可以把这些位置抽出来作为一个子序列,这个子序列就可以认为$x $就是$1 $.复杂度$O ( n ^3 ) $.</p>
<p>如果写出上面的式子的话,会发现最难处理的是一个形如$x ^k $的项,表示$x $第一次出现的位置后面仍然选比它小的数字的位置的方案数.这个怎么办呢?自然的想法是想在dp中顺便把它算了.</p>
<p>再进一步想,我们之所以合并麻烦,是因为取了两段上升区间.如果我们能求出一个上升区间和一个下降区间,在交点处合并呢?</p>
<p>但是这样怎么统计平方和呢?我们发现如果在$[ 1 , k ] $中选了$[ 1 , i ] $,那么$[ 1 , i ] $在$[ k + 1 , n ] $中是本质完全相同的,因此还是可以用上面的dp求.</p>
<h3><span id="排列转环">排列转环</span></h3><h5><span id="example1p8416">Example1(P8416)</span></h5><p>这题牛逼.</p>
<p>首先考虑一维的情况,一维情况下最劣应该是$2 , 3 , . . . , n , 1 $这样的.</p>
<p>为啥捏?因为注意到操作数$= n - $排列环数,这样的排列环数为$1 $,显然是最小的.加上列也差不多,所以$k _0 = 2 n ( n - 1 ) = 2 n ^2 - 2 n $.</p>
<p>而我们显然可以通过两次操作把一个位置归位,最后剩一行再随便做做,这样的答案就是$2 n ^2 - n + 1 $,如果我们想赢,那就需要在上面的$n - 1 $行每行省出一步操作.</p>
<p>这咋做呢?类似上面的做法,也考虑找环然后省一步,对于一行,我们找到所有应该放在这里的值以及它们所在的列,把它们应该在的列和实际在的列连边,一定能找到至少一个环(自环也算),删环就可以省一步操作.</p>
<h5><span id="example2">Example2</span></h5><p>给序列$a $和排列$b $,有若干次操作:</p>
<ol>
<li><p>修改操作:给定$x , y $,将$a _x $改为$y $.</p>
</li>
<li><p>查询操作:给定$l , r , x $,查区间$[ l , r ] $内最长的子区间$[ l ‘ , r ‘ ] $,使得对$\forall l ‘ \leq i &lt; r ‘ $,有$a _{ i + 1  } = b _{ a _i  } $,且存在$l ‘ \leq i \leq r ‘ $使得$a _i = x $.需要输出满足条件的子区间的长度最大值.</p>
</li>
</ol>
<p>一步一步来,首先处理出所有的极长的满足条件的段,不难发现修改一个点只会断掉一个段或者连接两个段,影响是$O ( 1 ) $的.</p>
<p>难点在于,我们如何处理要求其中存在一个$x $这种东西.</p>
<p>注意到$b $是排列,上置换,不难发现$b $其实就是一个置换,也就是说每一个极长的段一定是一个置换环内部的元素,我们可以快速定位到$x $所在的置换环.但这样还是不能做.</p>
<p>考虑由于是单点查询$x $,我们可以直接将数组也做置换,这样一个置换环就在一个区间内部,意味着一个极长的段一定是一个区间或者两个区间(原区间的一段前缀和一段后缀).</p>
<p>现在对于区间查询,我们考虑特殊处理和端点相交的段,这个是平凡的.这样我们只需要处理出完全被区间包含的那些段该怎么做.把右端点缩一缩,就等价于左端点完全被区间包含的那些点.也就是以$a $为横坐标,$l $为纵坐标,这样这些就相当于对一条横线取$\max $,然后查询一段竖着的线段的最大值.注意到一行不可能有两个横线,因此可以线段树分治+线段树维护,复杂度$O ( n \log ^2 n ) $.</p>
<h3><span id="规定转移顺序">规定转移顺序</span></h3><h5><span id="example1">Example1</span></h5><p>给定一张$n $个点的图,每个点有一个$[ 1 , k ] $的颜色,求这张图有多少个子图是一棵树并且在这棵树中每种颜色恰好出现了一次.</p>
<p>首先无根树转有根树计数,设$dp _{ i , S  } $表示以$i $为根,已经选了$S $集合中的颜色的方案数.转移的时候枚举出边(注意可能会算重,只要是会算重的都考虑钦定某种颜色在其中一个块里),复杂度$O ( m 3 ^k ) $.</p>
<p>冷静一下,想到斯坦纳树,于是再设一个$g _{ x , S  } $表示以$x $为根且$x $只有一个儿子,$S $的定义类似的方案数.这样我们就可以用斯坦纳树的换根技巧计数.很厉害.</p>
<p>这个故事告诉我们:对于图论计数问题(尤其是和树有关),$m $大概率可以转化为$n $,但是需要一些小技巧(例如斯坦纳树)</p>
<h5><span id="example2p7142">Example2(P7142)</span></h5><p>类似宝藏那个题,我们考虑设$f _{ d , S _1 , S _2  } $表示$S _1 $中的点到$1 $的距离$&lt; d $,$S _2 $中的点到$1 $的距离$= d $.然后枚举到$1 $的距离$= d + 1 $的点集,这一部分复杂度是$O ( n 3 ^n ) $,预处理一下不同情况的答案即可.</p>
<h3><span id="复杂度均摊">复杂度均摊</span></h3><p>大概是如果多组询问那复杂度是错误的,但是如果我全局求,那我$\sum $起来的总复杂度大概是对的.经典问题是树上背包.</p>
<h5><span id="example1">Example1</span></h5><p>给定一颗二叉树,求对于每一个$x $,满足$x , y , z $互不相同的三元组$( x , y , z ) $的价值(定义为两两距离之和对$L $取膜)的最大值是多少.$n \leq 3000 $.</p>
<p>乍一看,二叉树,想到换根后做dsu on tree+set.但是$O ( n ^2 \log ^2 n ) $实在是跑不过去.冷静一下,除去三点共线的情况,考虑三个点在二叉树上的两两LCA一定只有两个点,枚举其中深度较浅的那个点并枚举其子树中的两个点和子树外的一个点.假设其子树内有$x $个点对,子树外有$y $个点,注意到$\sum x = n ^2 \land \sum y \leq n ^2 $,于是总复杂度$O ( n ^2 \log n ) $.</p>
<h3><span id="字典序相关">字典序相关</span></h3><p>题目中询问满足条件的字典序第$k $小之类的问题,通常采用转化为计数问题.</p>
<h5><span id="example12022noip十连测day88ady">Example1([2022noip十连测day8]8ady)</span></h5><p>首先,我们肯定想如果知道$a $,我们怎么求出$b $.</p>
<p>首先不难发现,我们可以这么还原:先开一个堆,然后先将前$m - 1 $个位置扔进堆里,从第$m $个位置开始,假设现在到了第$i $个位置$( m \leq i \leq n ) $,每次将$a _i $扔进堆里,并从堆中取最小元素扔到$i - m + 1 $位置,最后把堆清空到剩下的位置即可.</p>
<p>大量实验证明:这种反向构造思路,你用个堆通常是做不动的.</p>
<p>我们考虑有没有别的做法.</p>
<p>一个一个数地考虑,$b _1 $在$a $中的位置应该在哪?显然是应该在$[ 1 , m ] $中,而且根据上面的堆的做法,显然它应该是$[ 1 , m ] $中最小的数字,换句话说,我们需要满足:$[ 1 , m ] $中除它以外的数字都比它大.</p>
<p>我们继续考虑$b _2 $,显然它在$a $中应该在$[ 1 , m + 1 ] $中,并且需要满足$[ 1 , m + 1 ] $中的所有数字除了$b _1 $,都比它大.</p>
<p>以此类推.不难注意到对于一个数$b _i $,其中$1 \leq i \leq n - m + 1 $,它能填回的原序列的位置一定最大最大是$[ 1 , m + i - 1 ] $,并且如果它能填到区间$[ l , r ] $中,这个区间中除去在它之前填进来的数字以外,均比它大.</p>
<p>但是,这显然是个上界.这个区间能不能缩小一下呢?</p>
<p>对于一个$i $,我们找到最大的$j $满足$1 \leq j &lt; i $并且$b _j &gt; b _i $(有可能找不到).</p>
<p>冷静一下,显然,$b _i $不能填到$[ 1 , j + m - 1 ] $.(因为如果它扔在这里,那它就:在$j $出堆前入堆,在$j $出堆后出堆,显然不合法)</p>
<p>也就是说,我们将每个数能填的区间缩小为了$[ j + m , i + m - 1 ] $.</p>
<p>那是不是说每个数只要填在这个区间中,就一定合法呢?</p>
<p>我们考虑一个数$i $以及所有比它小且在它后面的数字$j $,当$j = i + 1 $时,显然$j $只有一种选择,直接填上;当$j = i + 2 $时,若$i + 1 $已经选择好了,那$j $显然也只有一种选择,填上.这样,对于所有$i $,如果它前面有一个大于它的数字,那它一定只有一个位置可以填.</p>
<p>这样我们就可以简化为:给定$b $数组单调递增的问题.不难发现该条件下$i $可以选择的区间是$[ 1 , i + m - 1 ] $,且满足条件一定有解.</p>
<p>冷静一下,这个时候假设新序列长度为$len $,那显然一共有$m ^{ len  } $个满足条件的$a $序列.注意到这个级别是指数级别.</p>
<p>所以前面一定是按顺序填,直到后面才会打乱顺序.而后面的长度大概也就是个$\log _m k $,枚举枚举就行.</p>
<h3><span id="前缀和与差分">前缀和与差分</span></h3><h5><span id="example1loj3266">Example1(loj3266)</span></h5><p>把点都扔到坐标系上,显然到一个点曼哈顿距离相等的数一定在一个正方形(对角线平行于坐标轴)上.</p>
<p>我们考虑如果已知两个点,怎么找第三个点的坐标,显然是两个正方形的边界的交点,那也就是说,曼哈顿距离下,一个等边三角形必定有两个点所在直线与坐标轴成$45 \degree $角,那这两个点必然和另一个点组成了一个等腰直角三角形(欧几里得意义下),我们枚举等腰直角三角形的直角顶点和直角边长就可以确认这两个点的坐标,而另一个点一定在一条与坐标轴成$45 \degree $的斜线上,可以使用前缀和做.</p>
<p>注意到有的点对可能会被算两遍,要特判.</p>
<h5><span id="example2">Example2</span></h5><p>小孔在玩卡牌游戏.众所周知,在卡牌游戏里,过牌是很关键的,所以目前小孔的牌库中,只可能有数字牌$0 , 1 , 2 , 3 , 4 $.</p>
<p>数字牌$x $的含义是当你打出它的时候,会从牌库的顶端抽$x $张牌到自己手里,若牌库中不足$x $张牌,则将牌库抽空为止.打出的数字牌$x $会放入弃牌堆中.在题目中你可以认为这张牌不会再被用到了.</p>
<p>目前,牌库里有$n $张牌,从牌堆顶到牌堆底数第$i $张牌为数字牌$a _i $.在开始回合时,发牌员会进行一次切牌,切牌的结果是从牌堆顶到牌堆底的牌的顺序变为了$a _s , a _{ s + 1  } , . . . , a _n , a _1 , . . . , a _{ s − 1  } $.</p>
<p>接着,小孔会抽$k $张牌堆顶的牌到自己手上.每次小孔可以打出一张牌,但这一回合中小孔至多打出$p $张牌.小孔可以在任意时刻结束回合.</p>
<p>请问,这一回合中若小孔使用最优策略,那么牌库里最少还剩多少牌.进一步地,有$q $次这样的询问,每次询问给定三个整数$s , k , p $,你需要输出牌库里最少还剩多少牌.$( n , q \leq 3 \times 10 ^5 ) $.</p>
<p>每次询问是独立的,也就是说每次询问并不会以任何方式影响到之后的询问.</p>
<p>首先我们想一下我们需要知道什么:我们需要知道其在这一回合中打出的各种牌的数量是多少.而只要知道这一点,我们自然得到了答案是多少.注意到每次一定优先打出手头上最大的牌.</p>
<p>我们设$sum _{ t , i  } $表示从开始到抽完第$i $张牌<strong>之前</strong>,在只用大于$t $的牌的前提下,还能往下抽多少张牌.显然$sum _{ t , 0  } = 0 $并且$sum _{ t , i  } = sum _{ t , i - 1  } + a _{ i - 1  } [ a _{ i - 1  } &gt; t ] - 1 $.注意到$sum _{ t , i  } = 0 $就抽不了第$i $张牌了.不考虑还能抽负数张牌的情况,注意到$sum $数组具有可差分性!</p>
<p>那我们一开始抽了$k $张牌,也就是令$sum _{ s + 1  } \leftarrow sum _{ s + 1  } + k $,那第一个不能继续抽牌的地方显然也就是第一个满足$sum _{ i  } - sum _{ s  } \leq 0 $的地方,用原本的$sum $数组表示也就是$sum _{ i  } + k \leq sum _{ s  } $.那第二个地方呢?由于后面的$sum $都加上$k $了,第二个地方也就是满足$sum _j \leq sum _{ i  } - t $的地方(不过注意到后面要倍增,所以直接写$sum _j &lt; sum _i $也可以,这样方便用单调栈维护这个东西).以此类推,注意到这个东西和询问无关,可以使用倍增预处理,处理的过程中判断一下还有没有大小为$t $的牌以及用牌总数是否小于等于$p $即可.都是可以用前缀和之类的东西预处理的.最后从小的牌开始选,选完之后的牌就可以当成$0 $牌了.另外要注意:我们要保证目前一定有大小为$t $的牌选,所以需要在做之前判断一下最后一次选择大小为$t $的牌的位置是在哪里.</p>
<p>等一下,注意到我们好像没啥办法判断还有没有大小为$t $的牌.有一个方法是:我们直接令所有$\leq t - 1 $的牌变成$t $,并处理出不用$\leq t - 1 $的牌能跑到的最右点,然后取个$\min $.</p>
<p>想出$sum $数组并发现可差分性后,这个题突然就变可做了.问题来了:咋想到的$sum $数组,又是怎么发现的可差分性?</p>
<p>首先,由于切牌这个环节会变化起点.所以有两种可能:要么是像倍增那样起点不定,要么是像差分一样其它起点的答案可以由原本的起点答案得到.那想到差分后呢?又注意到一定会先选较大的牌,所以大概率可以分层考虑:这样就先把问题转化为只有$0 / 1 $或者是只有$0 / 1 / 2 $的情况再继续考虑.由于要多组询问,所以答案一定是可以通过某种方式迅速算出来的,考虑到只要得到每种牌选的次数就可以快速算答案.又有一定是比它大的牌都选完了才选它,于是考虑第一次选不了其它牌只能选它的地方.注意到这个地方可以使用前缀和在变换起点的情况下求.于是由前缀和判断差分性质.</p>
<h3><span id="二分答案">二分答案</span></h3><h5><span id="example12022qbxt国庆day6kth">Example1([2022qbxt国庆Day6]kth)</span></h5><p>考虑$f $的取值不会很多,我们可以枚举$f $的取值,并把相同取值的归类.也就是,对于$f = i $的类别里也就是后$i $位为$0 $,第$i $位为$1 $的那些数.</p>
<p>注意到每个类别内部是很有序的,也就是说我们可以采取类似初赛归并排序的方法二分,找到前$k $大的和.</p>
<p>调了一年,这个故事告诉我们,如果一个东西暴力调整能过/复杂度均摊,就不要写一些很丑的很难写的即使更快的东西去做.</p>
<h5><span id="example2">Example2</span></h5><p>给你一棵$n $个点的树,每条边是一个字符(字符集是小写字母),一个点的所有相邻边边权不同.</p>
<p>有$m $次操作:每次询问给出点$x $和字符串$S $,$S $中不包含相同字符,$| S | = 26 $,每次修改会修改一条边边权.</p>
<p>从$x $点开始,每次对与$x $点相邻的边,对这些边找出其边权在$S $中出现的位置,找出边权出现位置最靠前的边,然后走过去.</p>
<p>每次询问走过的边直接从树上删除,一条边正反方向算同一条边,也就是说没法$x \rightarrow y \rightarrow x $.</p>
<p>这个过程会停机,你需要输出在哪个点停下来,询问之间独立.</p>
<p>这题最重要的思想在于:我们首先需要将这个问题改成一个判定性问题:判定性问题显然弱于找到答案.</p>
<p>怎么判定呢?对于一条路径,如果我们要沿着它走,那么我们就可以确定每个点的最小边(或者次小边),这等价于给出若干个边之间的大小关系,可以使用bitset维护一下,最后判定即可.我们发现判定数组是可以合并的,于是这玩意可以扔到线段树上维护.</p>
<p>会了判定这题就做完了,做树链剖分,然后开始从下往上跳重链,能跳到顶端就跳,不然二分跳到哪里,下去是同理的,只不过下去的二分需要多个$\log n $.</p>
<h3><span id="整体二分">整体二分</span></h3><p>通常解决在二分的情况下,单次check的复杂度比较高的问题.思想是把所有询问共同的check一起做.</p>
<p>整体二分的具体复杂度往往需要现场分析.</p>
<p>最常用的整体二分的写法是分治.但是有的问题(例如不能撤销)可能不太好写分治.</p>
<p>还有一种方式是,我们把所有询问一字排开,然后求出每个询问当前二分的$mid $,然后顺序处理或者别的什么处理方式做这些$mid $.</p>
<h5><span id="example1agc002dstamp-rally">Example1([AGC002D]Stamp Rally)</span></h5><p>直接整体二分,注意需要做可撤销并查集之类的东西.</p>
<h3><span id="分治">分治</span></h3><h5><span id="example1平面最近点对">Example1(平面最近点对)</span></h5><p>按照$x $轴排序,递归做两边的子问题,假设两边问题的最小值为$d $,对着$d $做中间的问题.</p>
<h5><span id="example2cf1764g3-doremys-perfect-ds-class-hard-version">Example2([CF1764G3] Doremy’s Perfect DS Class (Hard Version))</span></h5><p>有一个$[ 1 , n ] $的排列$p $,每次可以询问$l , r , k $,交互库会返回$\lfloor \frac { p _l  } { k  } \rfloor , \lfloor \frac { p _{ l + 1  }  } { k  } \rfloor , \cdots , \lfloor \frac { p _r  } { k  } \rfloor $中不同数字的个数,你需要在$20 $次询问内找到$p $中$1 $的位置.</p>
<p>第一反应就是令$k = 2 $,然后如果$n $是奇数,不难发现此时只有$1 $自己一个人一组.一个自然的想法是,我们可以对于每个位置$i $,查询$[ 1 , i - 1 ] $和$[ 1 , i ] $的答案,如果答案一样,那这个位置肯定不是$1 $.如果不一样,我们再查一下$[ i , n ] $和$[ i + 1 , n ] $.由于$1 $不会和左右任意一个人配对,不难发现如果这两种情况都不一样,那这里一定是$1 $,这样我们就做到了$2 n - 2 $次查询.</p>
<p>那么如何优化呢?我们冷静一下,如果我们查询一个区间$[ l , r ] $,那么得到的答案自然是$len - $配对数字都在区间内的对数,因此我们自然也能得到这个区间的未配对数.这个时候发现,对于位置$i $,如果我们查询$[ 1 , i ] $和$[ i + 1 , n ] $,由于这两个区间内没配对的数字要么是$1 $,要么会和另一个区间中的数字配对,因此这两个区间中,未配对数多的那个一定包含$1 $.这样就可以通过$k $不断向下二分,最后只需要$20 $步操作就可以解决$n $是奇数的情况.</p>
<p>那么$n $是偶数怎么办呢?这个时候$1 $和$n $都没人配对.我们需要找到$n $并将它杀掉.注意到$k $可以取别的数,我们如果只是让$k = 2 $未免有些弱,而且看上去也区分不了$1 $和$n $,而不难发现,令$k = n $就可以找到$n $在哪里,于是可以先找$n $再找$1 $,需要$40 $步.</p>
<p>那怎么继续优化呢?我们还是令$k = 2 $,查询$[ 1 , i ] $和$[ i + 1 , n ] $,我们发现此时会有两种情况:</p>
<ol>
<li><p>左右两边未配对数量相差$2 $,这个时候$1 $和$n $一定都在较大的那边,直接递归.</p>
</li>
<li><p>左右两边未配对数量相等,这个时候一定$1 $在一边,$n $在另一边,我们可以通过一次查询$k = n $判断哪边是$n $.</p>
</li>
</ol>
<p>于是只需要$21 $次.</p>
<p>但是还是不够,我们从哪里抠出那一次呢?发现最后处理区间$[ i , i + 1 ] $还需要两步操作,我们看看能不能省掉一步.</p>
<ol>
<li><p>$1 $和$n $都在$[ i , i + 1 ] $中,我们显然只需要查询一步就可以知道哪边是$n $.</p>
</li>
<li><p>只有$1 $在$[ i , i + 1 ] $中,我们考虑利用一下前面的信息.注意到我们一定已经知道$[ 1 , i - 1 ] , [ i , n ] , [ 1 , i + 1 ] , [ i + 2 , n ] $的答案(如果区间为空或者区间为$[ 1 , n ] $显然我们也知道答案),假设这个区间中的两个数是$1 $和$x $,$x \in ( 1 , n ) $,那么$x $一定有一个和它配对的数字,我们考虑通过$[ 1 , i - 1 ] $和$[ 1 , i + 1 ] $就可以知道和$x $配对的数字在$[ 1 , i - 1 ] $还是在$[ i + 2 , n ] $.接下来只需要一步判断就可以找到$1 $了.</p>
</li>
</ol>
<h5><span id="example3xvii-open-cup-named-after-ev-pankratiev-grand-prix-of-japanopentraisn-contest-1489d-nice-set-of-points">Example3(XVII Open Cup named after E.V. Pankratiev. Grand Prix of Japan(opentraisn contest 1489)D  Nice Set of Points)</span></h5><p>给定一个点集$S = \{ ( x , y ) \} $,$( x _1 , y _1 ) $和$( x _2 , y _2 ) $可达当且仅当$x _1 = x _2 \lor y _1 = y _2 $.称一个点集是好的当且仅当这个点集中任意两个点的最短距离是它们的曼哈顿距离.给出一个点集,大小为$N $,$1 \leq N \leq 1000 $,加入不多于$10000 - N $个点使得这个点集变成好的.</p>
<p>找一条分界线$x = d $,我们将这条线左右两边的点全都作出在这条线上的投影点,将这些投影点全都加入,不难发现左右两边之间的路径就合法了,继续递归就行.</p>
<h5><span id="example4cf1442dsum">Example4([CF1442D]Sum)</span></h5><p>一个自然的想法是由于越靠后的可能越优秀,所以应该是要不断往后挖的.具体地,我们发现只可能有一个数组被选了一部分,剩下的数组要么不选,要么全选.</p>
<p>为什么呢?假设有两个数组各选了一部分,不妨假设它们最后选的数分别是$a $和$b $,下一个未选的数分别是$c $和$d $,有$c \geq a , d \geq b $,假设$a \geq b $,那么自然有$c \geq b $,于是我们把$b $删掉换成$c $一定更优秀.</p>
<p>有了这个性质后,我们可以枚举是哪个数组只选了一部分,然后求出剩下部分的背包,背包部分可以求前缀和后缀最后合并起来,我们的复杂度就是$O ( nk ^2 ) $.</p>
<p>但这个复杂度还是不太够,如何优化呢?</p>
<p>注意到这里的背包是支持撤销操作的,我们考虑一个分治做法:每次做到$[ l , r ] $的时候,假设此时$[ 1 , l - 1 ] $和$[ r + 1 , n ] $都加入答案了,我们把$[ mid + 1 , r ] $也加入背包,然后递归求解$[ l , mid ] $,然后再撤销,同样的方法求解右边的答案.复杂度$O ( nk \log n ) $.</p>
<h5><span id="example5agc044d">Example5(AGC044D)</span></h5><p>这题在于分治后归并,考虑我们是可以快速判断一个串是否是原串的子序列的,就是判断它们的编辑距离是否恰好等于长度之差.而我们也可以快速判断每个字母在原串中出现了多少次,只需要询问$L $个这个字母然后看编辑距离就是替换的次数.这样我们考虑对字母分治,$[ l , r ] $表示只用到$[ l , r ] $中的字母,得到的极长的原串的子序列是什么.边界情况$[ l , l ] $是好处理的,对于$[ l , r ] $,我们考虑归并,合并$[ l , mid ] $和$[ mid + 1 , r ] $的时候不断判断当前串是否是子序列就行.</p>
<h3><span id="倍增">倍增</span></h3><p>顺便一提,倍增比二分方便的一点在于:倍增能迅速确定答案的规模,这在复杂度与答案规模有关的时候至关重要.</p>
<h5><span id="example1scoi2015国旗计划">Example1([SCOI2015]国旗计划)</span></h5><p>先破环成链,然后设$f _{ i , j  } $表示从$i $这个人,途径$2 ^j $个人后能到达的最远的人是谁,然后就可以直接通过倍增处理.</p>
<h5><span id="example2pkusc2018星际穿越">Example2([PKUSC2018]星际穿越)</span></h5><h5><span id="example3cf1523h-hopping-around-the-array">Example3(CF1523H Hopping Around the Array)</span></h5><p>类似国旗计划,只不过需要用背包合并一维.</p>
<p>不过吧,这题有个问题在于最后的询问,我们要每次判断当前越界的点的代价是否小于等于dp数组的代价,如果小就回撤dp数组(因为无论如何都必不可能在这里选择).</p>
<h5><span id="example4loj3665">Example4(loj3665)</span></h5><p>思考一下发现,走相同的步数能到的点一定是一段区间,于是考虑使用倍增算法,设$f _{ x , i  } $表示从$x $走$2 ^i $步能到的区间,转移是简单的RMQ问题.</p>
<p>但是初值怎么求呢?先考虑右端点怎么求.对于每个路线$j $,它会把$[ A _j , A _j + k - 1 ] $能到达的右端点与$B _j $取$\max $,由于查询在修改之后,所以这个东西很好做.</p>
<h5><span id="example5cf1707e">Example5(CF1707E)</span></h5><p>引理1:如果$[ l , r ] \subseteq [ L , R ] $,则$f ( ( l , r ) ) \subseteq f ( ( L , R ) ) $.</p>
<p>引理2:如果$[ L , R ] = [ l _1 , r _1 ] \cup [ l _2 , r _2 ] $,则$f ( ( L , R ) ) = f ( ( l _1 , r _1 ) ) \cup f ( ( l _2 , r _2 ) ) $.</p>
<p>引理1显然,引理2是因为$[ L , R ] $中的最大值和最小值一定都被后面的两个部分取到.</p>
<p>于是,考虑$[ l , r ] = \cup _{ i = l  } ^{ r - 1  } [ i , i + 1 ] $,就可以倍增了.</p>
<p>考虑求出每个单点的倍增数组,那么总区间的倍增数组也就是这些数组的最小值和最大值.</p>
<p>大概做一下.</p>
<h5><span id="example622zr提高组十连测day6百分号">Example6([22zr提高组十连测day6]百分号)</span></h5><p>首先看上去多组询问给定起点终点看上去就很像倍增.</p>
<p>一个很自然的设计是$L _{ x , i  } $表示从$x $这个点跳$2 ^i $所能到达的最左端的点,$R _{ x , i  } $同理.但是能跳到最远的点不一定能跳到一个较近的点,那咋办呢?</p>
<p>冷静一下,注意到我们好像还没有用到括号序列的性质:两个跳跃要么包含要么不交,不可能出现第三种情况.</p>
<p>所以,如果目前能跳到的最远的点为$l , r $,那么再跳一步能到达的最远的点一定是从$l $或$r $跳过去的.考虑反证这个结论,设能从$( l , r ) $中的一个点$k $跳到更远的点,那么由于之前没跳到过$k $就跳到$l $了,所以一定存在一个$i &gt; k $,$i \rightarrow l $,而如果存在$j &lt; l $,$k \rightarrow j $,显然不满足性质.</p>
<p>同理,我们最后处理询问答案的时候,考虑从$x $和$y $都跳.先从$x $跳到再跳一步就会跳过$y $的位置,然后把$y $跳到再跳一步就会跳过$x $的位置,那么现在的$x $和$y $一定相邻,不然分别跳一步就会出现包含的情况,于是一定是最优解.</p>
<h3><span id="对称建立双射">对称/建立双射</span></h3><h5><span id="example1cf1627f">Example1(CF1627F)</span></h5><p>冷静一下考虑,分界线一定是一个中心对称图形,分成的两部分一定中心对称.那这条分界线一定过中心点.</p>
<p>我们考虑这么一点:如果所有点对都在矩阵一边,我们就可以直接求中心点到矩阵一边的最短路然后对称一下就好了.</p>
<p>而矩阵上遍布点对怎么办呢?我们在和每个点对对称的位置把这个点对复制一遍,然后从中心点找到一条到边界的最短路,把它对称一下即可.</p>
<h5><span id="example2ah2017hnoi2017抛硬币">Example2([AH2017/HNOI2017]抛硬币)</span></h5><p>设$A $的正面朝上为$S _A $,$B $的为$S _B $.设$p _1 = \sum [ S _A &gt; S _B ] , p _2 = \sum [ S _A = S _B ] , p _3 = \sum [ S _A &lt; S _B ] $.</p>
<p>当$a = b $,翻转所有硬币,自然有$p _1 = p _3 $,又设$P = p _1 + p _2 + p _3 = 2 ^{ a + b  } $,于是求得$p _2 $即可得到答案.而$p _2 = \sum _{ i = 0  } ^a \binom { a  } { i  } \binom { b  } { i  } $,用范德蒙德卷积的变式,有$p _2 = \binom { a + b  } { a  } $.</p>
<p>同样,当$a &gt; b $时.我们设$p _4 = \sum [ a - S _A &gt; b - S _B ] , p _5 = \sum [ a - S _A = b - S _B ] , p _6 = \sum [ a - S _A &lt; b - S _B ] $.同样是翻转硬币的套路,自然有$p _4 = p _1 , p _5 = p _2 , p _6 = p _3 $.注意到:$S _A \leq S _B \Rightarrow a - S _A &gt; b - S _B $,但逆命题不成立.不妨设$p _7 = \sum [ S _A &gt; S _B \land a - S _A &gt; b - S _B ] $.自然有:</p>
<script type="math/tex; mode=display">
p _1 = p _4 = p _7 + p _2 + p _3 = p _7 + P - p _1</script><p>于是只要求出$p _7 $就可以求得$p _1 $.</p>
<p>考虑$p _7 $如何求,注意到$[ S _A &gt; S _B \land a - S _A &gt; b - S _B ] = [ 0 &lt; S _A - S _B &lt; a - b ] $,我们可以枚举$S _A - S _B $,然后继续用范德蒙德卷积的变式.</p>
<h5><span id="example32022qbxt国庆day4c">Example3([2022qbxt国庆Day4]C)</span></h5><p>直接考虑对于每一对位置$( i , j ) , i &lt; j $,计算它们可能产生的逆序对贡献.注意到每一对对答案的贡献会大概接近$0 . 5 $,我们考虑构造一个双射,判断双射左右是否都会贡献.</p>
<p>设$d _i $为$i $个数的错排数量,根据错排公式有$d _n = ( n - 1 ) ( d _{ n - 1  } + d _{ n - 2  } ) $.接下来讨论一下这两个位置的取值:</p>
<ol>
<li><p>如果$a _i = j , a _j = i $,那么一定贡献了逆序对,这里总共贡献为$d _{ n - 2  } \cfrac { n ( n - 1 )  } { 2  } $,一半的贡献也就是$\cfrac { d _{ n - 2  } n ( n - 1 )  } { 4  } $.</p>
</li>
<li><p>如果$a _i = j , a _j = k , k \ne i \lor a _i = k , a _j = i , k \ne j $,考虑前后两者形成双射.如果$k $在$i $和$j $之间,那么无论前者还是后者,都一定贡献逆序对;不然,则两种情况一定只有一种会贡献逆序对.前者多出的贡献应该是$\cfrac { n ( n - 1 ) ( n - 2 )  } { 6  } ( d _{ n - 2  } + d _{ n - 3  } ) $,也就是先选出$i &lt; k &lt; j $,如果$a _k = i $,那么剩余的可能性就是$d _{ n - 3  } $;不然,也就是说$a _k \ne i $,类似于错排公式,剩余的可能性为$d _{ n - 2  } $.另外,由于$d _{ n - 2  } + d _{ n - 3  } = \cfrac { d _{ n - 1  }  } { n - 2  } $,所以上面的贡献也就是$\cfrac { n ( n - 1 )  } { 6  } d _{ n - 1  } $.</p>
</li>
<li><p>如果$i , j , a _i , a _j $互不相同,那我们交换$a _i $和$a _j $一定可以构造出另一组答案,并且这两组答案中一定只有一组贡献了逆序对,于是二者形成双射.</p>
</li>
</ol>
<p>除去上面的部分的贡献是$\cfrac { d _n n ( n - 1 )  } { 4  } $.于是总贡献为:$n ( n - 1 ) ( \cfrac { d _{ n - 1  }  } { 6  } + \cfrac { d _n + d _{ n - 2  }  } { 4  } ) $.</p>
<h5><span id="example4arc115d">Example4(ARC115D)</span></h5><p>第一反应感觉完全不可做.</p>
<p>思考一下,如果我们随便选边肯定完蛋了:我们又不知道选出了几个奇度点,这不完蛋了?</p>
<p>先考虑要求全是偶度点怎么办?</p>
<p>由于点只有奇度点和偶度点两种,如果我能先随便选个边集,再把它删到全是偶度点好像就赢了.但是一方面我咋删啊,一方面这样删有可能删出重复的.又注意到删一条边就一定可以让两个点的奇偶性改变.</p>
<p>我们考虑求出原图的一棵生成树,然后剩下的边随便选.之后从生成树深度较大的点开始考虑:如果这个点是奇度点,我们就把它的父边删掉.容易发现这样是双射.而如果有奇度点的话可以先组合数选出来然后同样做上面的操作,容易发现是一样的.</p>
<p>不同的连通块可以分别做最后卷起来.</p>
<h5><span id="example5hihocoder1230">Example5(Hihocoder1230)</span></h5><p>这题最重要的一点在于观察到一组$a $如果有解,那么一定是唯一解.为啥呢?我们考虑如何构造一个解:从小位到高位枚举,如果当前位所有数异或起来是$1 $,那么$x $这一位也必然是$1 $,然后加上后进位.这是由于序列长度是奇数.然后就每次对于$a \in [ x , m + x ] $计数,做FWT就行.</p>
<h5><span id="example623省选10连测-day5b">Example6(23省选10连测 day5B)</span></h5><p>首先我们要知道,一轮冒泡排序的过程等价于:从前往后考虑每一个点,如果它前面存在一个比它大的点,就将它和前面的点交换.</p>
<p>于是我们考虑令$b _i = \sum _{ j = 1  } ^{ i - 1  } [ a _j &gt; a _i ] $.也就是每次冒泡排序,这个$b _i $都会变成$\max \{ b _i - 1 , 0 \} $.显然$b _i $需要满足的条件是$b _i \in [ 0 , n - i ] $,接下来我们证明:只要满足这个条件,$b $和$a $就是双射关系.根据$a $还原$b $是简单的,那么如何根据$b $还原$a $呢?我们只需要从大向小考虑元素,就可以判断元素插入哪里.</p>
<p>有了这个条件后,我们不妨设原序列是$a ‘ $,其对应$b ‘ $,那么显然$b _i = \max \{ 0 , b _i ‘ - m \} \leq \max \{ 0 , n - i - m \} $.也就是说,如果$b _i = 0 $,那么$b _i ‘ \in [ 0 , m ] $,反之$b _i ‘ = b _i + m $.但问题在于:我们如何保证$b _i ‘ \in [ 0 , n - i ] $呢?不难发现,冒泡排序每次会把前面最大的数扔到后面,也就是说整个序列最后的$m $个数一定有序,那我们分开考虑:对于最后的$m $个数,它一开始在序列中的相对顺序是无所谓的:无论如何都会扔到最后.而对于其它的数,如果$b _i = 0 $,$b _i ‘ \in [ 0 , m ] $,由于最后都已经凑出$m $个数了,从大向小将数字插入,一定可以使这一部分满足条件.而如果$b _i &gt; 0 $,由于有判定条件$b _i \leq \max \{ 0 , n - i - m \} $,显然满足.于是我们设一共有$k $个$b _i = 0 $的位置(也就是前缀最大值位置),于是自然有$f ( a , m ) = ( m + 1 ) ^k m ! $.注意这个式子的前提在于判定每个$b _i \leq \max \{ 0 , n - i - m \} $以及$a $的最后$m $个位置是$n - m + 1 , \cdots , n - 1 , n $.到这里不难发现只要满足后者前者必定满足.现在只需要统计前缀最大值的个数就可以解决这个问题了.这个设计个$dp _{ i , j  } $表示前$i $个数的最大值是$j $就行.</p>
<h3><span id="拆多项式">拆多项式</span></h3><p>通常适用于数据范围中有一项的范围不大的情况,然后拆成多项式后可以带入另一项较大的值.</p>
<h5><span id="example122zr提高组十连测day5可">Example1([22zr提高组十连测day5]可)</span></h5><p>首先考虑数位dp,每次枚举当前的$k $个数中还有$x $个数被limit,这次又有$y $个数不用被limit,再枚举一下当前各位之和,然后可以写一个转移,复杂度$O ( k ^4 \lg x ) $</p>
<p>然后想了好久发现这个东西好像优化不动了.</p>
<p>冷静一下,注意到问题在于枚举,我们不妨把枚举换成容斥试试.设$g ( x ) $为$\sum a $为$x $的方案数,那么可以通过容斥得知:</p>
<script type="math/tex; mode=display">
g ( n ) = \sum _{ i = 0  } ^k ( - 1 ) ^i \binom { k  } { i  } \binom { n - i ( x + 1 ) + k - 1  } { k - 1  }</script><p>我们最后要求的答案也就是$\sum f ( n ) g ( n ) $,继续推式子:</p>
<script type="math/tex; mode=display">
ans = \sum _{ n = 0  } ^{ kx  } f ( n ) g ( n ) = \sum _{ n = 0  } ^{ kx  } f ( n ) \sum _{ i = 0  } ^k ( - 1 ) ^i \binom { k  } { i  } \binom { n - i ( x + 1 ) + k - 1  } { k - 1  }</script><script type="math/tex; mode=display">
= \sum _{ i = 0  } ^k ( - 1 ) ^i \binom { k  } { i  } \sum _{ n = 0  } ^{ kx  } f ( n ) \binom { n - i ( x + 1 ) + k - 1  } { k - 1  }</script><p>看上去好像推不动了.</p>
<p>冷静一下,会发现$n $的取值远远大于$i , k $的取值.于是我们选择把组合数拆成一个$k - 1 $次多项式,这样只需要处理出这个多项式的每一项的系数,然后就可以预处理后面的东西.</p>
<p>拆二项式系数的时候要注意特判上指标小于下指标的情况.</p>
<script type="math/tex; mode=display">
ans = \sum _{ i = 0  } ^k ( - 1 ) ^i \binom { k  } { i  } \sum _{ j = 0  } ^{ k - 1  } c _{ i , j  } \sum _{ n = i ( x + 1 )  } ^{ kx  } f ( n ) n ^j</script><p>其中$c _{ i , j  } = [ n ^j ] \binom { n - i ( x + 1 ) + k - 1  } { k - 1  } $.</p>
<p>这样我们就成功地分离出了一项$\sum _{ n = i ( x + 1 )  } ^{ kx  } f ( n ) n ^j $,接下来考虑怎么处理这一项.</p>
<p>考虑枚举$i $,然后设$dp _{ j , limit  } = \sum _{ n = 0  } ^{ limit  } f ( n ) n ^j $,考虑拿数位dp做这个东西,枚举当前位置$cnt $的取值$w $,根据二项式定理,$dp _{ a + b , limit  } \leftarrow \binom { a + b  } { b  } dp _{ b , limit  } f ( w ) ( w 10 ^{ cnt  } ) ^a $,那么$\sum _{ n = i ( x + 1 )  } ^{ kx  } f ( n ) n ^j = dp _{ j , kx  } - dp _{ j , i ( x + 1 ) - 1  } $.</p>
<p>这样我们需要枚举$i , a , b , cnt $得到一组答案,然后还需要把这些答案合并起来,复杂度$O ( k ^3 \lg x ) $.</p>
<h3><span id="抽屉原理">抽屉原理</span></h3><h5><span id="example1unr-6小火车">Example1([UNR #6]小火车)</span></h5><p>首先考虑证明一定有解:</p>
<p>注意到我们可以先选择出两个不完全相同的集合,如果这两个集合的和相等,那么我们把只在第一个集合的$b $设为$- 1 $,只在第二个集合的$b $设为$1 $,都在或都不在的设为$0 $,那么这显然就是一组解.</p>
<p>而由于$p &lt; 2 ^n $,根据抽屉原理,显然存在这么两个集合.</p>
<p>考虑对于一个权值区间$[ l , r ] $,如果有超过$r - l + 1 $个集合的和在这个区间内,那一定有两个集合可以组成一个解.</p>
<p>假设现在已知权值区间$[ l , r ] $一定有解,我们判断$[ l , mid ] $中是否有超过$mid - l + 1 $个集合,使用折半搜索再合并可以快速求出权值和为某个定值的集合有多少个.然后可以使用双指针判断,继续递归下去判断即可.复杂度$O ( 2 ^{ \frac { n  } { 2  }  } n ) $.</p>
<h5><span id="example2noi2021量子通信">Example2([NOI2021]量子通信)</span></h5><p>考虑$k \leq 15 $,所以如果我们把两个零一串每$16 $个分一块,那么两个零一串相差少于$k $处,则一定有一块完全相等.由于数据随机,这个概率为$\cfrac { 1  } { 2 ^{ 16  }  } $.</p>
<p>考虑把在一块中是某个数的零一串全都集合到一起,然后暴力判断,复杂度约为$O ( \cfrac { n ^2 q  } { 2 ^{ 16  } w  } ) $.</p>
<h3><span id="拆贡献">拆贡献</span></h3><h5><span id="example12022qbxt国庆day7fenwick">Example1([2022qbxt国庆Day7]fenwick)</span></h5><p>注意到要变换多次,考虑每个值的贡献.</p>
<p>一个点要往后更新,不难通过平行求和法则一个值$v $对它向后跳$w $步的贡献为$\binom { w + k  } { w  } $.但是有修改很难办,怎么办?注意到如果我们暴力跳,查询的时候复杂度是$O ( 1 ) $的,我们没必要让它这么低.我们把所有值对$p $这个点的更新存到一个数组里,显然只有$\log n $种步数.最后每次查询的时候用组合数一起更新即可.</p>
<h5><span id="example2qoj5097-小-p-爱学习">Example2([QOJ5097] 小 P 爱学习)</span></h5><p>这个题的厉害之处在于完全将贡献拆开.</p>
<p>我们不妨设最后将所有的数分成了$k $组,那么显然我们只要算出两个东西就可以得到此时的答案的和:</p>
<ol>
<li><p>$\sum _{ x _{ 1 , . . . , k  }  } \prod _{ i = 1  } ^k a _{ x _i  } \ $.</p>
</li>
<li><p>$\sum _{ 1 \leq x _1 , . . . , x _k \leq n , \sum x = n  } \frac { ( nm - k ) !  } { \prod _{ i = 1  } ^k ( x _i m - 1 ) !  } \ $.</p>
</li>
</ol>
<p>第一个显然就是个背包,问题在于第二个的分子部分,我们用生成函数,设$F = \sum _{ i = 1  } ^{ n  } \frac { 1  } { ( im - 1 ) !  } x ^i $,我们要求的就是$[ x ^n ] F ^k , \forall 1 \leq k \leq n $.</p>
<p>这个东西可以做BSGS,也就是光速幂.这样就可以用$O ( n ^2 \sqrt { n  } ) $预处理,用$O ( n ) $查询单个$k $.</p>
<h5><span id="example3luogu4211-lnoi2014lca">Example3(Luogu4211 [LNOI2014]LCA)</span></h5><p>将$dep $拆成到根节点的路径上的点的数量,差分一下$[ l , r ] $,这样就只需要求$z $和一个前缀点的LCA的$dep $.将这个操作离线下来,我们对于每一个点把它到根节点的路径上的点全部$+ 1 $,查询每个点到根节点上的权值和就行.</p>
<p>CF757G是一样的,只不过好像需要卡卡空间?</p>
<h3><span id="二进制拆位">二进制拆位</span></h3><h5><span id="example1luogu5354-ynoi2017由乃的oj">Example1(Luogu5354 [Ynoi2017]由乃的OJ)</span></h5><p>对每一位分开处理,对于线段树上每个区间,设$f _{ 0  } $表示一开始$v $的这一位是$0 $,最后的答案是$1 $还是$0 $,显然可以合并,拿bitset优化一下.</p>
<h3><span id="bitset优化暴力">bitset优化暴力</span></h3><h5><span id="example12022qbxt国庆day4d">Example1([2022qbxt国庆Day4]D)</span></h5><p>先想一个很明显的优化:我们记录一下每个字符出现的位置,当我们判断当前字符串是否出现过的时候,我们直接从这个字符串开头的字符存在的位置进行判断.</p>
<p>如果我们记录下每个字符在母串中的某个位置是否存在,我们就可以基本脱离母串进行判断.注意到只需要用bitset优化这个过程就可以做到$O ( \sum tlen + \cfrac { nq  } { w  } ) $.</p>
<h5><span id="example2noi2020-制作菜品">Example2([NOI2020] 制作菜品)</span></h5><p>这题首先要根据数据范围,注意到$m \geq n - 1 $的时候存在贪心解法.</p>
<p>具体怎么做呢?我们将原料按照质量排序,每次选最小的那个,不够的话就选最大的那个的一部分,重新排序后递归处理.</p>
<p>为啥这个是对的呢?根据鸽笼原理,最大的那个的质量一定大于等于$\frac { mk  } { n  } $,而最小的那个数和最大的那个数之和一定大于等于$0 + \frac { mk  } { n - 1  } \geq k $,因此一定有解.</p>
<p>接下来我们就只需要做$m = n - 2 $的情况.</p>
<p>那么这个怎么做呢?我们发现每道菜和两个原材料有关,于是不妨抽象成图论模型:将这两个原材料所代表的点用一条边连起来:我们发现有$n - 2 $条边和$n $个点,这个图必不联通.也就是说如果有解,必然可以分成两个集合,这两个集合互不相关.如果我们分成了两个集合,一个集合有$a $个原材料,另一个集合有$n - a $个原材料,我们就可以第一个集合做$a - 1 $道菜,第二个集合做$n - a - 1 $道菜,自然解决了问题.</p>
<p>接下来的问题在于01背包,用bitset优化一下.</p>
<h3><span id="简化能更新答案的集合">简化能更新答案的集合</span></h3><p>简单来说就是当你注意到一个答案只有可能由某些地方贡献,我们就只判断这些地方的贡献.有的时候不仅需要减小集合,还需要使这个集合尽可能好维护,这个时候可能会向集合里放一些不合法但不可能更新答案的选项.</p>
<h5><span id="example1cf1149d-abandoning-roads">Example1(CF1149D Abandoning Roads)</span></h5><p>首先一个把只有$a $边的连通块缩起来,那$1 $到$i $的最短路显然是通过几个$b $连接若干个连通块来到$i $.</p>
<p>由于防止用$b $边链接连通块的时候连出环,我们需要用一个$dp _{ S , x  } $表示从$1 $经过$S $集合的连通块到$x $的最短路.</p>
<p>但是集合数量可能很多,怎么办?</p>
<p>注意到,如果这个集合只有一个点,那显然不可能重复经过;如果这个集合只有两个点,那重复经过意味着想用一条长度为$2 b $的边代替一条长度为$a $的边,显然也不优秀;同理集合只有三个点也不优秀.</p>
<p>于是只有点数$\geq 4 $的集合是有用的,复杂度$O ( 2 ^{ \frac { n  } { 4  }  } m \log n ) $.</p>
<h5><span id="example2">Example2</span></h5><p>给定$n $个正整数,要求将$n $个正整数分到$k $个集合中,每个集合恰好$\cfrac { n  } { k  } $个数(保证$k | n $)且每个集合中不能有相同的数.设一个方案的代价是每个集合的极差之和,求最小代价,$n \leq 70 $.</p>
<p>首先$O ( 3 ^n ) $很好设计不说了.</p>
<p>注意到这题看上去就不太能多项式复杂度,我们考虑简化一下状态数.考虑做$O ( 3 ^n ) $的时候,我们是将$\cfrac { n  } { k  } $个数打包成一个集合再塞进去,这样看上去就不太优秀,我们考虑能不能一个数一个数塞进去.</p>
<p>我们现在有$k $个集合,要塞进去一个数到一个集合中.注意到最后的代价实际上和很多数是没啥关系的.考虑先把数字从小到大排序,然后挨个插入集合.如果插入一个数之前,这个集合是空的,那这个数对答案有负的贡献;如果插入一个数之后,这个集合是满的,那这个数对答案有正的贡献;反之无贡献.</p>
<p>于是我们可以枚举目前集合填成啥样了,这样状态数变成了$( \cfrac { n  } { k  } + 1 ) ^k $.</p>
<p>这样还是过不去,我们再冷静一下,显然我们只关心每个集合填了多少个数而不关心具体是哪个集合,于是我们把每个集合的大小排序后再压成状态,这样状态数就是$\sum _{ i = 0  } ^{ k  } { \binom { i + \frac { n  } { k  }  } { \frac { n  } { k  }  }  } \ $,根据目前填到第几个数分一分类就会发现这部分上限是$O ( n \binom { 2 \sqrt { n  }  } { \sqrt { n  }  } ) $.</p>
<p>不过我们还需要保证一个集合里不能有相同的元素.这里我们考虑将相同的元素一起放并规定放的顺序.因为放进去的集合在放这种元素前是有大小顺序的,我们每次放进最大的集合中.换句话说,我们设$f _{ i , j , S  } $表示目前放到$i $,状态是$S $,并且$a _i $放进去的那个集合目前大小是$j + 1 $(放前是$j $).</p>
<p>算一下复杂度是$O ( n ^2 \binom { 2 \sqrt { n  }  } { \sqrt { n  }  } ) $的,实际上远远跑不满,甚至写了个map来做双射也跑过去了.</p>
<h5><span id="example3">Example3</span></h5><p>给定一张有向图,多组询问,每次询问三个数$p , x , y $,求是否能从$p $出发只经过$[ x , y ] $中的边且经过的边的编号单调递减到达$1 $号节点.</p>
<p>冷静一下,先加边,注意到如果加$u \rightarrow v $这条边的时候,不存在一条从$v $到$1 $的路径,那这条边显然没有用.</p>
<p>做完这一步后,我们注意到可以在加边的过程中对于每个$u $维护从$u $到$1 $的所有合法路径经过的最小编号的边的最大值$maxn _u $,这样就可以对于每个点维护若干个二元组$( l , r ) $,只要对于$p $,存在一个二元组$[ l , r ] \in [ x , y ] $就合法.</p>
<h5><span id="example4petrozavodsk-winter-2014-moscow-su-tapir-contestopenstrain-contest-1435-ccombinations-strike-back">Example4([Petrozavodsk Winter-2014. Moscow SU Tapir Contest(openstrain contest 1435) C]Combinations Strike Back)</span></h5><p>给定一个大小为$n $的可重集,多次询问,每次询问查询插入一个数$x $后,这个集合大小为$k $的可重子集共有多少个,每次询问互相独立.$n , q \leq 1 . 2 \times 10 ^5 $,答案对$1051721729 = 1003 \times 2 ^{ 20  } + 1 $取膜.</p>
<p>自然的想法是上生成函数.</p>
<p>假设数字$i $在原集合中共有$b _i $个,那么原集合大小为$k $的可重子集数量显然为$[ z ^k ] \prod _{ i = 1  } ^n \frac { z ^{ b _i + 1  } - 1  } { z - 1  } $.</p>
<p>插入一个数字$x $,自然就是乘上一个$\frac { z ^{ b _x + 2  } - 1  } { z ^{ b _x + 1  } - 1  } $.但如果每次都乘的话复杂度显然不行.怎么办?</p>
<p>注意到答案与插入的数字本身无关,只和这个数字在原集合中出现了多少次有关.而原集合最多有$\sqrt { n  } $(自然根号)个出现次数不同的数字,预处理一下就行.</p>
<h5><span id="example5cf1621gweighted-increasing-subsequences">Example5([CF1621G]Weighted Increasing Subsequences)</span></h5><p>一个自然的想法是拆出每个点$x $的贡献,再枚举终点$y $,这样问题就转化为了以$y $结尾并且包含$x $的LIS计数,这样做到$O ( n ^2 ) $的复杂度.</p>
<p>那么怎么继续优化呢?我们还是想拆出每个点的贡献,但是如何不枚举终点$y $呢?我们考虑枚举一下和它做贡献的点$z $满足$a _z &gt; a _x $并且终点$y $满足$y &lt; z $,但是这样的$z $有很多个,不难发现取最后一个就行.如果我们对整个序列取后缀$\max $,就可以得到所有可能被当作$z $的点,而且更强的性质是,只要这些点不在LIS中,LIS的终点$y $必然有$y &lt; z $,这是显然的.做一下补集转化,就变成了计数包含$x $和$z $的LIS数量.</p>
<p>注意到$z $的数量不多,且所有数字按照权值排序后被这些$z $分成了若干个区间.所以颠倒值域和下标重新做LIS就行.</p>
<h5><span id="example6cf919f-a-game-with-numbers">Example6(CF919F A Game With Numbers)</span></h5><p>最小表示法表示每个人的手牌.</p>
<p>不过要注意有可能成环.我们考虑用刷表法更新,最后刷不出来的点就是和.</p>
<h5><span id="example7ioi2014holiday">Example7([IOI2014]holiday)</span></h5><p>首先发现走的一定是一个区间,然后发现这个区间$[ l , r ] $的$l $随$r $的增大具有决策单调性,然后做完了,上主席树就行.</p>
<h5><span id="example8cf1446d2">Example8(CF1446D2)</span></h5><p>我们假设目前得到的答案区间是$[ l , r ] $,也就是说$[ l , r ] $无论如何不可能扩展成更大的区间了.那这需要满足什么条件呢?注意到全局众数一定是答案,如果它不是答案,我们就可以往两边拓展,直到满足区间众数是答案且区间合法.显然可以实现.然后做根号分治.</p>
<p>这个是怎么想到的呢?我们考虑一个区间如何拓展成更大的区间:如果每个数出现次数不降,显然是一个更大的区间.这同样是在说:如果我们能找到一段区间,使得加上这段区间后,原本不是区间众数的数成为了区间众数,并且区间仍然合法,那就一定更为优秀.再注意到如果一个数在全局出现次数多于区间众数,这一定可以实现,进而推出全局众数的结论.</p>
<p>你以为结束了?没有,我们下面给出一个$O ( n \log n ) $的做法:</p>
<p>首先,我们假设全局众数是$x $,枚举和它一起成为区间众数的数字$y $,剩下的数先不管,那么区间大概长这个样:xyxyyxyxxxxxx.</p>
<p>我们发现这一段x一定是没有意义的:xyxyyxyxx[xxxx].</p>
<p>我们对于每一个$y $出现的位置,找到其左右两边离他最近的没有被标记的$x $标记一下,没有被标记的$x $一定没有意义.这样对于一组解$( x , y ) $,合法的端点数量只有$O ( y 出 现 的 次 数 ) $次.每次判断每个端点是否可以做右端点,拿$set $维护一下后缀和就可以实现$O ( n \log n ) $.</p>
<p>当然,这里得到的区间不一定是合法的(有可能$x , y $出现的次数都不是最多的,但没关系,这种一定不优秀).</p>
<p>【luoguP4062 [Code+#1]Yazid 的新生舞会】也是这个标记的思路,标记的话用一下链表之类的大概能做.</p>
<h4><span id="支配对问题">支配对问题</span></h4><p>lxl起的名字.</p>
<p>这里的思路其实大概就是:我们将一些很废物的二元组杀了,然后将剩下的二元组进行贡献答案.我们称这种一个二元组严格强于另一个二元组的限制称作支配关系.</p>
<h5><span id="第一类支配对">第一类支配对</span></h5><p>虽然总数很多,但是本质不同的很少.</p>
<h6><span id="example1luogup7880-ynoi2006-rldcot">Example1(luoguP7880 [Ynoi2006] rldcot)</span></h6><p>我们这么考虑:如果现在有三个点$a , b , c , a &lt; b &lt; c $,它们两两LCA都是$d $,那么显然$( a , c ) $这一对是没有用的,有用的是$( a , b ) $和$( b , c ) $.进一步你发现这等价于什么呢:我们从下往上合并子树,每次做启发式合并,假设当前要把子树$A $合并到子树$B $上,考虑所有的点对$( a , b ) , a \in A , b \in B $的贡献,显然,能贡献到$a $的$b $只有$a $的前驱和后继,这样我们就只找到了$O ( n \log n ) $个点对,它们等价于$O ( n \log n ) $个矩形,最后把$dep $相等的合并一下,随便做做.</p>
<h6><span id="example2luogup8528-ynoi2003-铃原露露">Example2(luoguP8528 [Ynoi2003] 铃原露露)</span></h6><p>和Example1基本差不多.</p>
<h5><span id="第二类支配对">第二类支配对</span></h5><p>虽然总数很多,但是有用的很少.</p>
<h6><span id="example1cf765f">Example1(CF765F)</span></h6><p>典.</p>
<h6><span id="example2codechef-minxorseg">Example2(CodeChef MINXORSEG)</span></h6><p>这个题比较厉害,仍然考虑$a &lt; b &lt; c $,我们看如果$a \oplus c &gt; \max \{ a \oplus b , b \oplus c \} $的充要条件是什么.</p>
<p>简单分类讨论一下,不难发现这意味着$LCP ( a , c ) &gt; LCP ( a , b ) $.于是有用的贡献对只有$O ( n \log v ) $个.</p>
<h6><span id="example3luogu9058-ynoi2004-rpmtdq">Example3(Luogu9058 [Ynoi2004] rpmtdq)</span></h6><p>这题更为逆天.</p>
<p>首先,这题有两个维度:树和序列,我们要先处理掉其中一维.lxl:树这一维度更加困难,因此我们应该是选择困难的那一维分治掉.</p>
<p>考虑边分治,然后就只需要处理两棵子树间的贡献.但是对于一棵子树内的点,我们要找到在另一棵子树中有可能和它产生贡献的点对,这个咋做呢?</p>
<p>牛逼的一步来了,我们考虑对于每个点,算出它到分治中心的距离$r $,然后找另一棵子树中到分治中心距离$\leq r $的点$x $与它贡献,但是这还是有很多点,其实只需要找这些点中的$x $的前驱后继就可以了.因为如果$x &lt; b &lt; c $,$b $和$c $在同一边,那么$( b , c ) $一定比$( a , c ) $更加优秀.</p>
<h6><span id="example4cf1635f-closest-pair">Example4(CF1635F Closest Pair)</span></h6><p>首先,由于匹配无序,我们考虑对于一对数$( i , j ) $,只在$w $较大的那个位置来更新答案.</p>
<p>不妨假设较大的为$i $,我们考虑$i $有可能和谁来更新答案.</p>
<p>如果现在有两个数$k &lt; j , w _k \leq w _i \land w _j \leq w _i $,如果$w _k \geq w _j $,那肯定选$( j , i ) $更优秀;不然,如果选$( k , i ) $比选$( j , i ) $更优秀,那么我们会发现$( k , j ) $比$( k , i ) $更要优秀,因此答案一定会由$( k , j ) $更新而不是由$( k , i ) $更新.通过这里的分析我们发现,每个数只有可能和它左右两边的第一个$w $小于等于它的数更新.</p>
<p>于是我们可以找到$O ( n ) $个可能更新答案的点对,设点对为$( x , y ) $,我们每次查找一个区间$[ l , r ] $,即要找到所有在$[ l , r ] $内的点对并将它们的答案取min.</p>
<p>这一步可以将$( x , y ) $当作二维平面的点,查询当作一个左下角为$( l , l ) $,右上角为$( r , r ) $的矩阵,就是一个经典的矩阵取min的操作.</p>
<h6><span id="example5icpc2017-wfmoney-for-nothing">Example5([ICPC2017 WF]Money for nothing)</span></h6><p>注意到抽象问题后等价于有若干个A点$( x _1 , y _1 ) $和若干个B点$( x _2 , y _2 ) $,我们想要找到一个A点和一个B点使得$( x _1 - x _2 ) ( y _1 - y _2 ) $最大.也就是它们作为右上和左下顶点的矩形面积最大.</p>
<p>怎么做这个问题呢?首先我们必须要发现的一点是:对于A点来说,如果有两个点$( a _1 , b _1 ) $和$( a _2 , b _2 ) $满足$a _1 \leq a _2 $,$b _1 \leq b _2 $,那么前者一定更优秀.把那些废点删掉后,就会得到一个横坐标递增,纵坐标递减的点的序列.对于B点是同理的.</p>
<p>这个序列看上去就很亲切了,接下来简单证明一下是满足决策单调性的就可以判断答案了.</p>
<h3><span id="奇偶染色">奇偶染色</span></h3><h5><span id="example1">Example1</span></h5><p>一个$9 \times 9 $的网格,一开始上面有$65 $个蚂蚁,每个蚂蚁每分钟会四联通移动一格,每个蚂蚁每三分钟所在的格子不能在一条直线上,求证:一定会有一个时间,两只蚂蚁在同一个格子里.</p>
<p>sol1:</p>
<p>注意到如果条件不成立,则一定存在若干条路径,蚂蚁在路径上转圈,也就是找到长度和尽可能大的路径不交地覆盖矩阵,注意到一定是使用$2 \times 2 $的矩阵路径,于是最多有$64 $只蚂蚁.(感性理解)</p>
<p>sol2:</p>
<p>考虑对奇偶染色,设$( i , j ) = \begin{cases}white &amp; 2 \nmid ( i + j ) \ blue &amp; 2 \mid i \land 2 \mid j \ yellow &amp; \text { otherwise  } \end{cases} $.</p>
<p>我们把黄格子和蓝格子称为彩格子,注意到如果一开始一只蚂蚁在白格子,一分钟后必定在彩格子.一开始一只蚂蚁在蓝格子,两分钟后必定在黄格子.</p>
<p>因为最多有$16 $个蓝格子,所以一开始黄格子和蓝格子上分别最多有$16 $只蚂蚁,从而白格子上最多有$32 $只蚂蚁,总共最多$64 $只,得证.</p>
<h5><span id="example2cf1521e">Example2(CF1521E)</span></h5><p>首先考虑我们显然可以一行空一行放,也就是说如果最大的$a _i &gt; n \times \lceil \frac { n  } { 2  } \rceil $的话显然不可以,如果能放的位置少于$\sum a $显然也不可以.</p>
<p>类似lyz那个题,我们考虑删去行列编号均为偶数的点,这样就满足了一个子矩阵不能全放的限制.</p>
<p>然后呢?我们考虑将所有能放的位置排序.先把所有的位置分成三类:$( \mathrm { even  } , \mathrm { odd  } ) , ( \mathrm { odd  } , \mathrm { odd  } ) , ( \mathrm { odd  } , \mathrm { even  } ) $,不同类位置按照这个顺序排,不然按照相对位置排.然后直接从头开始放.如果不合法,一定是同种颜色放到了$( \mathrm { even  } , \mathrm { odd  } ) $和$( \mathrm { odd  } , \mathrm { even  } ) $,并且相同类别是按照相对位置排序的,于是一定不满足最大的$a _i \leq n \times \lceil \frac { n  } { 2  } \rceil $的限制条件.所以这么做一定是对的.</p>
<p>好!冷静一下,咋想到的啊.</p>
<p>首先这种题肯定要找到一些看上去就很显然的边界,当你发现找不到的时候,大概率就一定有解了(大概率).</p>
<p>然后呢?注意到不合法一定是同种颜色放到了$( \mathrm { even  } , \mathrm { odd  } ) $和$( \mathrm { odd  } , \mathrm { even  } ) $,又观察到每种位置的数量和一个边界限制条件很像,于是就可以构造出来了.</p>
<p>所以大概是说,这种构造题要先想判断边界的条件,然后对着做.</p>
<h5><span id="example3cf1615f">Example3(CF1615F)</span></h5><p>太牛逼了这个题.</p>
<p>首先,找边界条件:啥时候$s $不能变成$t $呢?一个自然的想法是数$1 $的个数的奇偶性,但这样显然不对($01 $和$10 $不能互相转移),我们需要一个更强的条件.</p>
<p>然后:注意到每次操作是相邻的两个数,于是我们有:奇数位置的和-偶数位置的和是定值.但是:注意到这个操作是有限制的!它只能对相邻相同的位置做.</p>
<p>然后我也不知道咋想到的,可能是因为找到限制条件后只要不改变限制条件就可以随便转化?反正我们先把偶数位置全部取反,这样操作就变成了交换相邻数字(如果相邻数字不相同,取反后相同,交换无用).</p>
<p>就可以dp了.</p>
<h5><span id="example4cf1517g">Example4(CF1517G)</span></h5><p>按照横纵坐标的奇偶性,分四种情况染色.注意到四边形接下来的路径一定会形如$1 \rightarrow 2 \rightarrow 3 \rightarrow 4 $,建立分层图跑最小割.</p>
<h3><span id="捆绑更新答案">捆绑更新答案</span></h3><h5><span id="example12022qbxt国庆day6binary">Example1([2022qbxt国庆Day6]binary)</span></h5><p>首先因为有$- 1 $,我们先考虑一个朴素的暴力,从$L $到$R $枚举现在被匹配的数$i $,我们假设之前匹配到$p - 1 $,那我们接下来一定是要找到一个最小的$x \geq p $能把$i $给匹配掉,仔细思考这个过程,由于是二进制考虑最高位,不难发现我们只需要找到$( p \land i ) \oplus i $的最高位$1 $,然后把$p $的这一位改成$1 $,然后后面的位置全部设成$0 $,如果$i \subseteq p $那么就不用改.</p>
<p>冷静一下,二进制大概率是没啥通项公式的,还是要一点一点做.但是我们枚举每一个数实在是太慢了,我们考虑一个地方:$i \subseteq p $就不用改,下一步$i + = 1 , p + = 1 $,如果没有发生进位还是不用改,这个过程看上去就很可以优化.</p>
<p>所以我们考虑:当遇到$i \subseteq p $的时候,我们就捆绑更新.如果不满足就暴力更新.重复这个过程,每次不断暴力更新$\rightarrow $捆绑更新$\rightarrow $暴力更新$\rightarrow . . . $.每次捆绑更新至少会更新一个$lowbit $,而暴力更新的情况下,每次$p $至少会多包含一位$i $.就算后面进位把这一位消掉了,由于这里进位了,那下一步一定可以直接包含掉,于是复杂度也是$\log n $的,反复做一下就做完了,这里能分析复杂度$O ( T \log ^2 R ) $.我们冷静一下,发现二者复杂度算重了,捆绑更新会帮助暴力更新多匹配$1 $,于是复杂度$O ( T \log R ) $.但是肯定跑不满,考场甚至写了个上界$O ( T \log ^2 R ) $的仍然跑的飞快.</p>
<h5><span id="example2">Example2</span></h5><p>给定一棵树和一个值域为$n $序列$a $,每次询问给出$l , r , x $.</p>
<p>设$f ( x , y ) $为点$x $朝着$y $的方向走一步后得到的点,求$x $在经过$a [ l \cdots r ] $操作后得到的答案.</p>
<p>这么考虑:这题看上去就需要把任何一个数字$x $,通过若干个点变成了一个$f ( x ) $,我们要做的就是把$f ( x ) $求出来,这玩意很难求,考虑分块,单点用长剖做$O ( 1 ) $求$k $级祖先,然后对于每个整块预处理出它的$f $就可以了.</p>
<p>接下来的问题在于如何快速处理一个块的答案,考虑把所有的$x $扔到树上,然后一起维护它们的$f ( x ) $.这玩意看上去好像有点不太能做.</p>
<p>牛逼的一步来了:考虑对于每个块内的$\sqrt { n  } $个点,建立这些点的虚树,对于不在虚树上的点,它们一定会往虚树的方向跑(其实也就是向上跑),然后处理出时间扫描线转化成在虚树上的点的问题.对于在虚树上的点,考虑虚树一共有$O ( \sqrt { n  } ) $条边(也就是原树上的路径),我们用一个双端队列维护每条边上的点,显然每次每条边只会有$O ( 1 ) $的入队和出队,这样就实现了$O ( n ) $的预处理单个块.</p>
<h3><span id="单独更新答案">单独更新答案</span></h3><h5><span id="example1">Example1</span></h5><p>一个数轴上有$n $个小球,第$i $个小球在$x _i $坐标处.数轴上还有$m $个洞.第$i $个洞在$y _i $坐标处.你每秒可以以相同矢量速度移动所有小球.当一个小球和一个洞重合时,小球就会进洞.求一共可能出现多少种最终情况.(我们认为,两种”最终情况”不同,当且仅当存在一个球在两种情况中进入了不同的魔法洞中)</p>
<p>考场的想法:按照洞分类,把被同样两个洞夹起来的球一起处理,显然会有一段区间往左走一段区间往右走,按照这种区间的长度排序,然后硬dp,复杂度$O ( n ^3 ) $.</p>
<p>实际的做法:我们抛弃区间,单独考虑每个球.对于每个球而言,有用的信息只有它到左端点的距离和它到右端点的距离.我们把这两个距离缩为$( x _i , y _i ) $.接下来我们要给每个点$0 / 1 $染色,如果是$0 $代表它要到左边的洞里,如果是$1 $代表要到右边的洞里.那什么染色条件是无解的呢?</p>
<p>如果存在两个点$a $和$b $,$col _a = 0 $,$col _b = 1 $,那显然当$x _a \geq x _b \land y _a \leq y _b $时无解.换句话说,如果$col _b = 1 \land x _a \geq x _b \land y _a \leq y _b $,那么$col _a = 1 $.我们不妨按照$x $降序排序,$x $相同的按照$y $升序排列.那就会先决定$b $再决定$a $.注意到:如果$a $能确定$c $的状态,那$b $一定也能确定$c $的状态.因此我们采取这个策略:如果$x _a \geq x _b \land y _a \leq y _b \land col _b = 1 $,那我们直接不管$a $;反之,则考虑一下$a $的两种取值即可.具体一点,我们设$f _{ i , 0 / 1  } $表示以$i $结尾,$col _i = 0 / 1 $的方案数,然后顺着做就好.注意到:我们其实不关心$col _x $具体是啥,我们只关心最后的方案数.所以其实可以直接删去第二维.</p>
<p>zhq对这题的理解:</p>
<p>这可以等价成求一个上升子序列.上升子序列说的是如果$x _i &lt; x _j , y _i &gt; y _j $,$i $”选了”,$j $就必须”不选”.但是钦定必须选和必须不选,这两个限制是一样的.就是说,$j $没有选择的权力了.</p>
<p>这个说法很有意思,但是要注意:类似说法成立当且仅当我们认为$j $选了和认为$j $没选对后面不会产生影响.</p>
<h5><span id="example2petrozavodsk-summer-2015-moscow-ipt-contestopenstrain-contest-1464-jtwo-airlines">Example2([Petrozavodsk Summer-2015. Moscow IPT Contest(openstrain contest 1464) J]Two Airlines)</span></h5><p>这是一道交互题.给定一张$n $个点的完全图,每两个点之间是红色的边或是蓝色的边.可以询问$2 n $次某两个点之间的边的颜色,求一条哈密顿回路使得这条路上的颜色段最多有两个.</p>
<p>考虑将点逐个加入.假设现在的哈密顿回路的两种颜色分别是$r _s \rightarrow r _t $和$b _s \rightarrow b _t $,当前要加入$x $,我们每次询问$x $和$r _t $和$b _t $之间的颜色,如果可以加入链就加入.如果不能加入,必然意味着$x $和$r _t $之间是蓝边,和$b _t $之间是红边,我们查一下$r _t $和$b _t $之间是什么边,然后将其中一个点与$x $一起扔到对面就行.</p>
<p>不过这样用了$3 n $次询问,考虑先询问$r _t $和$b _t $之间的颜色,这样就能省掉一种.</p>
<h3><span id="寻找不变量">寻找不变量</span></h3><h5><span id="example1noip2021-方差">Example1([NOIP2021] 方差)</span></h5><p>首先我们注意到:设$b _i = a _i - a _{ i - 1  } $这个操作相当于交换$b _{ i - 1  } $和$b _i $.</p>
<p>接下来推一下式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ^2 S ^2 & = n \sum _{ i = 1  } ^n a _i ^2 - ( \sum _{ i = 1  } ^n a _i ) ^2 \\
& = n \sum _{ i = 1  } ^n ( \sum _{ j = 1  } ^i b _j ) ^2 - ( \sum _{ i = 1  } ^n ( n - i + 1 ) b _i ) ^2 \\
& = n \sum _{ i = 1  } ^n \sum _{ j = 1  } ^i b _j \sum _{ k = 1  } ^i b _k - \sum _{ j = 1  } ^n ( n - j + 1 ) b _j \sum _{ k = 1  } ^n ( n - k + 1 ) b _k \\
& = n \sum _{ j = 1  } ^n b _j \sum _{ k = 1  } ^n b _k \times ( n - \max \{ j , k \} + 1 ) - \sum _{ j = 1  } ^n ( n - j + 1 ) b _j \sum _{ k = 1  } ^n ( n - k + 1 ) b _k \\
& = n \sum _{ j = 1  } ^n b _{ n - j + 1  } \sum _{ k = 1  } ^n b _{ n - k + 1  } \times \min \{ j , k \} - \sum _{ j = 1  } ^n jb _{ n - j + 1  } \sum _{ k = 1  } ^n kb _{ n - k + 1  } 
\end{aligned}</script><p>令$c $为$b $的倒置数组,则原式</p>
<script type="math/tex; mode=display">
\begin{aligned}
& = n \sum _{ j = 1  } ^n c _{ j  } \sum _{ k = 1  } ^n c _{ k  } \times \min \{ j , k \} - \sum _{ j = 1  } ^n jc _{ j  } \sum _{ k = 1  } ^n kc _{ k  } \\
& = 2 \sum _{ j = 1  } ^n nc _j \sum _{ k = 1  } ^j c _k k - 2 \sum _{ j = 1  } ^n jc _{ j  } \sum _{ k = 1  } ^j kc _{ k  } + \sum _{ i = 1  } ^n c _i ^2 i ( i - 1 ) \\
& = 2 \sum _{ j = 1  } ^n ( n - j ) c _j \sum _{ k = 1  } ^j c _k k + \sum _{ i = 1  } ^n c _i ^2 i ( i - 1 ) \\
& = \sum _{ j = 1  } ^n ( n - j ) c _j \sum _{ k = 1  } ^n c _k k + \sum _{ i = 1  } ^n ( n - 1 ) ic _i ^2 
\end{aligned}</script><p><del>推到这一步发现好像没啥用但是推了好久懒得删了</del></p>
<p>冷静一下,由于一开始的数列是单调递增的,所以改变后的数列一定也是单调递增的(差分数组均$\geq 0 $).感性上理解,我们肯定是想让尽可能多的数接近绝对值,于是让重新排列后的差分数组呈现单最小值的峰看上去就很优秀.</p>
<p>这样我们设计$dp _{ i , S  } $表示现在填到第$i $小的$b $,$\sum a = S $的情况下最小的$\sum a ^2 $,复杂度$O ( n ^2 a ) $.</p>
<p>注意到$a $很小的时候大部分$b $都是$0 $,于是可以优化为$O ( na ^2 ) $.</p>
<h5><span id="example2agc030e-less-than-3">Example2([AGC030E] Less than 3)</span></h5><p>注意到:当我们把一个位置取反的时候,这个位置相邻的左右两个位置一定有一个$0 $和一个$1 $,所以我们的操作等价于移动$0 $和$1 $的分界线.</p>
<p>然后枚举一下从边界多产生了多少个分界线就行.</p>
<h3><span id="组合意义">组合意义</span></h3><h5><span id="example1arc110d">Example1(ARC110D)</span></h5><p>注意到这相当于先把一个长度等于$m $的序列划分成$n + 1 $段,再从第$i $段选出$a _i $,其中$a _{ n + 1  } = 0 $.</p>
<p>于是自然是$\binom { n + m  } { \sum a + n  } $.</p>
<h5><span id="example2abc231g">Example2(ABC231G)</span></h5><p>乍一看,感觉完全不可做.因为一开始给定$a $了,感觉上好像也不太能组合意义.</p>
<p>如果没有$a _i $怎么做?我们设$f _n $表示将$k $个小球分到$n $个盒子后的答案.那乘法相当于:分完后,在每个盒子中取出一个小球的方案数.于是$f _n = \binom { k  } { n  } n ! n ^{ k - n  } $.</p>
<p>那给定$a $咋做呢?我们注意到上面的式子好像可以对于任意$n $快速求.于是将原式子拆为:$\prod ( a _i + b _i ) $,那答案就是选出$n - x $个$a $和选出$x $个$b $的答案.前者可以背包,后者也就是$f _x = \binom { k  } { x  } x ! n ^{ k - x  } $.</p>
<h5><span id="example3agc060d">Example3(AGC060D)</span></h5><p>不妨设$C _p = \{ i | p _i &gt; p _{ i + 1  } , 1 \leq i &lt; n \} $.</p>
<p>用一下组合意义,注意到答案等于:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ p  } [ S = C _p ] ) ^2</script><p>中间那个地方看上去是经典的计数容斥,我们对着它做容斥:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ p  } [ S = C _p ] ) ^2 = \sum _{ S  } ( \sum _{ S \subseteq T  } \sum _{ p  } ( - 1 ) ^{ | T | - | S |  } [ T \subseteq C _p ] ) ^2</script><p>这个咋做呢?我们考虑用组合意义展开:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S  } ( \sum _{ S \subseteq T  } \sum _{ p  } ( - 1 ) ^{ | T | - | S |  } [ T \subseteq C _p ] ) ^2 \\
& = \sum _{ S  } \sum _{ S \subseteq T _1 , T _2  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) 
\end{aligned}</script><p>注意到$S $屁用没有,直接交换枚举顺序.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S  } \sum _{ S \subseteq T _1 , T _2  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = \sum _{ T _1 , T _2  } 2 ^{ | T _1 \cap T _2 |  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) 
\end{aligned}</script><p>考虑$( \sum _{ p  } [ T _1 \subseteq C _p ] ) $怎么求,注意到这等价于所有$T _1 $中的位置全都被钦定为$&gt; $,而其他位置任意,如果我们设所有以大于号连接的部分的长度为$l _1 , l _2 , . . . , l _k $,那么这里的答案就是$n ! \prod _{ i = 1  } ^k \frac { 1  } { l _i !  } $.</p>
<p>但我们很快发现了难点:$2 ^{ | T _1 \cap T _2 |  } $这个东西是难求的,怎么办呢?</p>
<p>我们考虑一下这个东西的意义:其实也就是在$T _1 $和$T _2 $中都是$&gt; $的位置,这个好像不太好求,因为$&gt; $是很平常的,但如果取补集就不一样了,取补集后意味着都是任意的位置的数量,而我们上面已经发现了:如果有一个位置对前后两个数字的约束是独立的,那我们可以把前后两个位置拆开.于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ T _1 , T _2  } 2 ^{ | T _1 \cap T _2 |  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = \sum _{ T _1 , T _2  } 2 ^{ ( ( n - 1 ) - | T _1 \cup T _2 | ) - ( n - 1 )  } ( - 2 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = 2 ^{ 1 - n  } ( n ! ) ^2 \sum _{ T _1  } ( ( - 2 ) ^{ | T _1 |  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( ( - 2 ) ^{ | T _2 |  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ n - 1 - | T _1 \cup T _2 |  } 
\end{aligned}</script><p>其中$n - 1 - | T _1 \cup T _2 | $意味着均不在$T _1 $和$T _2 $中的位置的数量.为了给每一段连续的$&gt; $都分配权值,我们进行一个细小的修改:</p>
<script type="math/tex; mode=display">
2 ^{ - 1 - n  } ( n ! ) ^2 \sum _{ T _1  } ( ( - 2 ) ^{ | T _1 | + 1  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( ( - 2 ) ^{ | T _2 | + 1  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ n - 1 - | T _1 \cup T _2 |  }</script><p>写到这里应该就能发现,接下来必然要对$n - 1 - | T _1 \cup T _2 | $做整体操作.那我们再这么搞可能就很难受,我们采取这样的方式:对$T _1 $和$T _2 $求补集,这样它们的含义就变成了除了集合中的元素,剩下的全部被钦定为了$&gt; $,我们自然有:</p>
<script type="math/tex; mode=display">
\begin{gathered}
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ | T _1 \cap T _2 |  } \\

\end{gathered}</script><p>这里已经很显然了,我们大概要做一个不断加段的做法,那此时$| T _1 \cap T _2 | $这个限制就显得尤其强,如果只是$S \subseteq T _1 , T _2 $就会好做很多:我们可以钦定$S $作为分界线,然后把两边的东西卷起来.因此我们暴力拆开后面的式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ | T _1 \cap T _2 |  } \\
& = 2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ S  } \sum _{ S \subseteq T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ S \subseteq T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) \\

\end{aligned}</script><p>令$f ( T ) = \sum _{ S \subseteq T  } ( \frac { 1  } { ( - 2 ) ^{ | T | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) \ $,则原式即:</p>
<script type="math/tex; mode=display">
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ S  } ( \sum _{ S \subseteq T  } f ( T ) ) ^2</script><p>考虑下面这个东西怎么求:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ S \subseteq T  } f ( T ) ) ^2</script><p>注意到,如果我们把每一段($[ T _i , T _{ i + 1  } ) $)的贡献求和,那么$f ( T ) $相当于这些和乘起来,那么$( \sum _{ S \subseteq T  } f ( T ) ) ^2 $就是这些和的平方乘起来.换句话说,我们自然有$ans _n = \sum _{ m  } ans _{ n - m  } g ^2 _{ m  } $,其中$g _m $表示长度为$m $的一段的贡献之和.而$g _{ n  } = \sum _m g _{ n - m  } \frac { 1  } { - 2 m !  } $.二者都可以使用分治FFT或多项式求逆解决.更进一步地,$h _i = \frac { 1  } { - 2 i !  } , G = \frac { 1  } { 1 - H  } , F = \frac { 1  } { 1 - G  } $.</p>
<p>这题还有一个做法:tyy的变魔术做法.</p>
<p>还是容斥,考虑将$( &gt; , &gt; ) $容斥掉,这样我们有若干种对:$2 ( &lt; , &lt; ) , 1 ( e , e ) , - ( e , &lt; ) , - ( &lt; , e ) $,然后我们发现两个序列联系得太紧了,我们考虑分配系数:$&lt; \rightarrow \sqrt { 2  } $,$e \rightarrow - \frac { 1  } { \sqrt { 2  }  } $,但是这样发现$( e , e ) $算错了,你把剩下的补上就行.你会发现这个式子和上面我们推的是等价的,但是变魔术.</p>
<h3><span id="复杂度抵消">复杂度抵消</span></h3><h5><span id="example1cf1439b">Example1(CF1439B)</span></h5><p>首先注意到度数小于$k - 1 $的点一定没用,于是可以不断删点.删点后的图度数全部$\geq k - 1 $.</p>
<p>首先如果剩下的点度数全都$\geq k $那就直接找到答案,不然,我们看一下度数为$k - 1 $的点:它要么在团里,要么没用.不妨直接暴力判断是否在团里,复杂度$O ( k ^2 ) $.</p>
<p>欸等一下,这总复杂度$O ( mk ^2 ) $了啊,这咋办?</p>
<p>首先,删完点后的度数全都$\geq k - 1 $,注意到此时的点数是$O ( \frac { m  } { k  } ) $的.所以复杂度$O ( mk ) $.</p>
<p>好像还是过不去,这咋办?</p>
<p>冷静一下,如果$k \geq \sqrt { m  } $,显然不可能存在团.于是复杂度$O ( m \sqrt { m  } ) $.</p>
<h3><span id="寻找关系式">寻找关系式</span></h3><h5><span id="example1">Example1</span></h5><p>一张有向图,边有两种颜色,从$s $开始随机游走,维护一个权值.经过第一种颜色的边,权值$+ 1 $.经过第二种颜色的边,权值归$0 $.保证$t $没有出边,所有点均能到$t $.询问到$t $时权值的期望和方差.$n \leq 100 $.</p>
<p>(注意方差为平方的期望减去期望的平方.)</p>
<p>注意到难点在于权值归$0 $.所以一个点到$t $的期望权值一定和到达它时的权值有关系.</p>
<p>然后就来到了降维打击的时间:我们可以使用数学归纳法证明,如果到一个点$u $的权值是$x $,那它到达$t $的权值一定形如$a _u x + b _u $.</p>
<p>如果要严谨一点的话,我们发现第一种颜色的边会影响常数项,第二种颜色的边会影响一次项,因此最后的答案一定是一次函数.</p>
<p>最后可以使用高斯消元直接求出每个点权值的$a _u $和$b _u $,就可以求出期望.</p>
<p>至于方差是同理的,你注意到平方的期望一定是一个二次函数.</p>
<h3><span id="特判边界">特判边界</span></h3><h5><span id="example12022icpc杭州e">Example1(2022ICPC杭州E)</span></h5><p>第一反应肯定是一点一点调整成$\{ 1 , 2 , . . . , n \} $的形式,写个暴力验证一下发现当$n \geq 4 $的时候的确都可以调整成功.</p>
<p>假设目前形如:$[ 1 , k ] , A , k + 1 , B $.我们考虑如何调整:</p>
<ol>
<li>$| B | \ne 0 $.</li>
</ol>
<p>我们有:</p>
<script type="math/tex; mode=display">
\{ [ 1 , k ] , A , k + 1 , B \} \rightarrow \{ B , A , k + 1 , [ 1 , k ] \} \rightarrow \{ [ 1 , k + 1 ] , B , A \}</script><ol>
<li>$| B | = 0 , | A | = 0 $.</li>
</ol>
<p>直接合并就行.</p>
<ol>
<li>$| B | = 0 , | A | \geq 2 $.</li>
</ol>
<p>假设$A = A _1 A _2 $,我们有:</p>
<script type="math/tex; mode=display">
\{ [ 1 , k ] , A _1 , A _2 , k + 1 \} \rightarrow \{ A _2 , k + 1 , A _1 , [ 1 , k ] \} \rightarrow \{ [ 1 , k + 1 ] , A _1 , A _2 \}</script><ol>
<li>$| B | = 0 , | A | = 1 $.</li>
</ol>
<p>此时一定有$k \geq 2 $,发现有点难构造,但是我们猜测是可以构造出来的.不难证明这个问题等价于将$\{ 1 , 2 , 4 , 3 \} $调整为$\{ 1 , 2 , 3 , 4 \} $,写个暴力跑一下就行.</p>
<h3><span id="摩尔投票">摩尔投票</span></h3><h5><span id="example1cf643gchoosing-ads">Example1([CF643G]Choosing Ads)</span></h5><p>将摩尔投票扩展一下.我们现在想求其中出现次数大于等于$\lfloor \frac { n  } { p  } \rfloor $的数字,令$k = \lfloor \frac { 100  } { p  } \rfloor $,我们考虑每次取出$k + 1 $个两两不同的数字并且全部杀掉,那么做完这一步操作后,该满足条件的仍然满足条件(讨论一下),于是拿线段树维护当前的五个数的出现数量,每次对着杀就行.</p>
<h3><span id="寻找周期性">寻找周期性</span></h3><h5><span id="example1cf1463fmax-correct-set">Example1([CF1463F]Max Correct Set)</span></h5><p>自然的想法是$O ( n 2 ^{ \max ( x , y )  } ) $作dp.</p>
<p>接下来比较牛逼的是,注意到如果$S _1 $满足条件,令$m = x + y $那么$S _1 \cup ( S _1 + m ) $也满足条件.</p>
<p>我们考虑$S _1 $中满足条件意味着什么,意味着$\forall a , b \in S _1 , a &lt; b $,$b - a \ne x \land b - a \ne y $,这意味着$m + b - a \ne x \land m + b - a \ne y $,这同样意味着$m + a - b = x + y + a - b \ne x + y - x \land m + a - b \ne x + y - y $.</p>
<p>因此,只要我们找到了一个长度为$m $的可行解,我们一定可以将其不断扩展到全部集合.</p>
<p>进一步地,我们一定能证明:原集合中的最优解是以一个长度为$m $的可行解作为周期的.</p>
<p>这个是为啥呢?我们设$n = km + c $,那么我们直接求出一个长度为$m $的解,满足前$c $位对答案的贡献的权值是$k + 1 $,后$m - c $位贡献的权值为$k $,然后直接求答案.注意到如果最大答案另有其人,我们一定可以拿其中的某一段不断循环得到更大的答案,这就不符合我们的假设了.</p>
<h3><span id="补集转化">补集转化</span></h3><h5><span id="example1">Example1</span></h5><p>给定一个$n $个点$m $条边的无向图,求给每一条边定向使得$1 $和$2 $能到达同一个点(可以是$1 $或$2 $)的方案数.$n \leq 15 , m \leq \frac { n ( n - 1 )  } { 2  } $.</p>
<p>考虑正难则反,算不存在的概率(事实上也确实很好理解,因为存在性问题通常都要取补集),这时候我们发现:此时$1 $能到达一个集合$S $,$2 $能到达一个集合$T $,$S $和$T $无交,并且两个集合之间不可能存在边,因此我们只需要算$f ( S ) $表示$1 $能到达$S $中的点的方案数即可,$2 $同理.</p>
<p>那么这个怎么算呢?我们仍然考虑正难则反,如果$1 $不能到达$S $中的所有点,那么$1 $一定只能到达$S $中的一部分点,枚举这一部分,假设是$T $,就可以用$f ( T ) $算$f ( S ) $的答案.</p>
<h3><span id="二进制分组">二进制分组</span></h3><h5><span id="example1loj3273">Example1(loj3273)</span></h5><p>先考虑没有插入怎么做,注意到所有的线会扫出一个空白区域:这个空白区域由一条折线围成,而所有的点都在折线外或在折线上,更进一步地,在折线外的点没有动,就是初始位置.</p>
<p>这启发我们分开维护,每次扫线的时候更新折线,把该扔进来的扔进来,由于折线上的点$( x , y ) $,随着$x $的增大$y $不增,因此是简单维护的,用一下平衡树就行.</p>
<p>问题在于如何维护插入点.我们使用二进制分组,将所有点分为大小为$0 , 1 , 2 , 4 , \cdots , 2 ^k $大小的组,当然有些组可能没被分出来.然后如果有两个大小都是$2 ^k $的组,我们暴力合并二者,得到一个还没被折线扫过的新的大小为$2 ^{ k + 1  } $的组.</p>
<h5><span id="example2luogu7447-ynoi2007-rgxsxrs">Example2(Luogu7447 [Ynoi2007] rgxsxrs)</span></h5><p>一眼看上去和CF702F很像,但是区间操作感觉很艰难,怎么做呢?</p>
<p>我们对值域分块:分成$[ 0 , 1 ) , [ 1 , 2 ) , [ 2 , 4 ) , [ 4 , 8 ) , \cdots $,这样只会分成$\log V $段,每段内部维护平衡树来处理下标.那么对于一个$x $,它会把后面的段全部打上一个$tag $,有些位置要掉落到下面的段上,这个维护每个段的最小值就可以处理(最多只会掉落$\log n $段),问题是和$x $在同一块内的没有办法打tag,但这一部分一定会掉落到下面的段,一块处理.</p>
<p>好,下面开始思想总结:</p>
<p>首先,我们发现这个区间和值域都很难处理,但是感觉值域更加重要,应该是对值域做均摊(也就是类似CF702F的打tag操作和暴力修改操作分开),于是考虑到对值域分块然后内部平衡树,然后发现可以做了吧.不太清楚,也有可能只是值域分块的套路.</p>
<p>Luogu9069是同款思路,判一下负数.</p>
<h5><span id="example3cf1515i-phoenix-and-diamonds">Example3(CF1515I Phoenix and Diamonds)</span></h5><p>俗称带修T-shirt.</p>
<p>做法大概是这样的:我们考虑对于每次给出的$c $,不妨假设它在$[ 2 ^k , 2 ^{ k + 1  } ) $这个块上,那么如果它减去了任何一个还在这个块里的数字,那就一定会掉落到下一个块中.这样就又有均摊了.</p>
<p>但是我们不一定能减去一个还在这个块里的数字,我们怎么做呢?</p>
<p>我们考虑最后的操作一定是减去若干个小于这个块的,最后有可能再减去一个这个块的,然后$c $就掉到了下一个块,考虑先按照价值排序,然后维护$f _i $表示排名在$i $前面且代价在更小的块中的代价和,我们要找到最靠左的小于$c - 2 ^k $的$f $,这个可以做线段树二分维护.</p>
<p>[IOI2021]地牢游戏 类似,但是因为是在图上做,所以把二分要改成倍增.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能基础</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="常用激活函数">常用激活函数</span></h3><h4><span id="sigmoid函数">Sigmoid函数</span></h4><p>$f ( x ) = \frac { 1  } { 1 + e ^{ - x  }  } : ( - \infty , + \infty ) \to ( 0 , 1 ) $.</p>
<p>$f ‘ ( x ) = f ( x ) ( 1 - f ( x ) ) $.</p>
<h4><span id="tanh函数">tanh函数</span></h4><p>$f ( x ) = \frac { e ^x - e ^{ - x  }  } { e ^x + e ^{ - x  }  } : ( - \infty , + \infty ) \to ( - 1 , 1 ) $.</p>
<p>$f ‘ ( x ) = 1 - f ^2 ( x ) $.</p>
<h4><span id="relu函数">ReLU函数</span></h4><p>$f ( x ) = \max ( 0 , x ) : ( - \infty , + \infty ) \to ( 0 , + \infty ) $.</p>
<h4><span id="leaky-relu函数">Leaky ReLU函数</span></h4><p>$f ( x ) = \max ( \alpha x , x ) , 0 &lt; \alpha &lt; 1 : ( - \infty , + \infty ) \to ( - \infty , + \infty ) $.</p>
<h4><span id="softmax函数">Softmax函数</span></h4><p>$f ( x _i ) = \frac { e ^{ x _i  }  } { \sum _j e ^{ x _j  }  } $.</p>
<h3><span id="损失函数">损失函数</span></h3><h4><span id="least-square">Least Square</span></h4><p>即$\arg \min \sum _{ i = 1  } ^n ( f ( x _i ) - y _i ) ^2 = \arg \min ( A \beta - Y \mid A \beta - Y ) $.用最小二乘法取$\hat \beta = ( A ^T A ) ^{ - 1  } A ^T Y $.</p>
<h4><span id="cross-entropy">Cross Entropy</span></h4><p>用错误的分布$q $来表示真实分布$p $的样本,则平均编码长度应该是:</p>
<script type="math/tex; mode=display">
H ( p , q ) = \sum _i p ( i ) \log ( \frac { 1  } { q ( i )  } ) = - \sum _i p ( i ) \log { q ( i )  }</script><p>此为交叉熵.</p>
<p>特别地,当最终样本只有两个的时候,例如Logistical Regression问题,可以写成:</p>
<script type="math/tex; mode=display">
\begin{aligned}
H & = - ( y \log a + ( 1 - y ) \log ( 1 - a ) ) \\
\frac { \partial H  } { \partial a  } & = - ( \frac { y  } { a  } - \frac { 1 - y  } { 1 - a  } ) 
\end{aligned}</script><p>那如果有多个呢?考虑直接对归一化条件作偏导,先有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
H ( p , q ) & = - \sum _i p _i ( \log { q _i  } - \log ( \sum _j q _j ) ) \\
\frac { \partial H ( p , q )  } { \partial q _k  } & = - \frac { p _k  } { q _k  } + \frac { \sum p _k  } { \sum _j q _j  } \\
& = - \frac { p _k  } { q _k  } + 1 
\end{aligned}</script><p>再乘以softmax那里的$q _k $,得到$- p _k + q _k = - y _k + f ( x _k ) $.</p>
<h3><span id="神经网络实现">神经网络实现</span></h3><p>通过若干隐藏层,假设最后的输出层为第$L $层,则:</p>
<ol>
<li><p>对于第$l $层,取$\vec { z  } _l = ( W _l ) ^t \vec { a  } _{ l - 1  } + \vec { b  } _l $.这里对$W _l $作转置的目的是写代码的时候需要用行向量.</p>
</li>
<li><p>对于第$l $层,取$\vec { a  } _l = f ( \vec { z  } _l ) $,这里意味着将每一个分量对$f $操作.</p>
</li>
<li><p>对于最终答案,取误差$\mathcal { L  } = \frac { 1  } { m  } ( \vec { y  } - \vec { a  } _L \mid \vec { y  } - \vec { a  } _L ) $.</p>
</li>
</ol>
<h4><span id="梯度下降法">梯度下降法</span></h4><p>换言之就是让$w : = w - \alpha \frac { \partial \mathcal { L  }  } { \partial w  } $,其中$\alpha $是一个选定的小常数,也可以采用类似模拟退火的方式动态决定.事实上可以把各个位置分开,写作$w _j : = w _j - \alpha \frac { \partial \mathcal { L  }  } { \partial w _j  } $.</p>
<p>另外,虽然是这么写,应当见到去掉下标$k $的记号仍然合理,无非是逐分量做此操作,因此下面如无特殊说明,运算均采用逐分量运算.例如可以定义$\vec { a  } \circ \vec { b  } $为两个向量逐分量相乘后得到的新向量,为表区分用$\times $表示正常的矩阵乘法.甚至采取$( \vec { a  } - \vec { y  } ) ^2 $表示其自点积.坦白而言,笔者对此符号相当无奈,可也想不出什么更好的写法了.但总之这种写法总是强于部分参考资料上所将下标放上面的写作$a ^L $的做法.笔者所能维持的精神数院人的唯一做法也只能是在下面加上向量符号,藉此泄愤.</p>
<p>顺便一提,应当见到$\times $和$\circ $这两种运算比较随意,用线性映射来理解,你这个$W \times $任意作用在一个向量上就行.</p>
<h4><span id="误差反向传播">误差反向传播</span></h4><p>既然要用梯度下降法,就应该把每一层的偏导都求出来.然而$\mathcal { L  } $是最后一层的结果,因此应该用链式法则一路求出前面的偏导.</p>
<p>更具体地,不妨设误差函数选的是$( \vec { a  } - \vec { y  } ) ^2 $,激活函数选的是cross entropy有:</p>
<ol>
<li><p>$\frac { \partial { \mathcal { L  }  }  } { \partial \vec { a  } _{ L  }  } = ( \vec { a  } _{ L  } - \vec { y  } ) $.(如若选择不同的误差函数,这里作适当变化)</p>
</li>
<li><p>$\frac { \partial \vec { a  } _{ l  }  } { \partial \vec { z  } _{ l  }  } = f ‘ ( \vec { z  } _{ l  } ) = \vec { a  } _{ l  } \circ ( 1 - \vec { a  } _{ l  } ) $.(如若选取不同的激活函数,这里作适当变化)</p>
</li>
<li><p>$\frac { \partial \vec { z  } _{ l + 1  }  } { \partial \vec { z  } _{ l  }  } = \frac { \partial \vec { z  } _{ l + 1  }  } { \partial \vec { a  } _{ l  }  } \frac { \partial \vec { a  } _{ l  }  } { \partial \vec { z  } _{ l  }  } = ( W _{ l + 1  } ) ^t \times ( \vec { a  } _l \circ ( 1 - \vec { a  } _l ) ) $.</p>
</li>
<li><p>$\frac { \partial \vec { z  } _{ l  }  } { \partial W _{ l  }  } = ( \vec { a  } _{ l - 1  } ) $.结果理应是一个矩阵,其实就是这个列向量不断复制若干遍,或者写成$( \vec { a  } _{ l - 1  } ) ^t M ( 1 ) $,其中$M ( 1 ) $是全$1 $矩阵.</p>
</li>
<li><p>$\frac { \partial \vec { z  } _{ l  }  } { \partial \vec { b  } _{ l  }  } = 1 $.</p>
</li>
</ol>
<p>我们应当见到:</p>
<p>不妨设$\delta _l = \frac { \partial { \mathcal { L  }  }  } { \partial \vec { z  } _l  } $.见到:</p>
<ol>
<li><p>$\delta _L = \frac { \partial \mathcal { L  }  } { \partial \vec { z  } _L  } = \frac { \partial \mathcal { L  }  } { \partial \vec { a  } _L  } \frac { \partial \vec { a  } _L  } { \partial \vec { z  } _L  } = ( \vec { a  } _{ L  } - \vec { y  } ) \circ \vec { a  } _{ L  } \circ ( 1 - \vec { a  } _{ L  } ) $.前者会因为误差函数的选取而改变,后者会因为激活函数的选取而改变.</p>
</li>
<li><p>$\delta _l = \frac { \partial { \mathcal { L  }  }  } { \partial \vec { z  } _l  } = \delta _{ l + 1  } \frac { \partial \vec { z  } _{ l + 1  }  } { \partial \vec { z  } _l  } = \delta _{ l + 1  } \circ ( W _{ l + 1  } ) ^t \times ( \vec { a  } _{ l  } \circ ( 1 - \vec { a  } _{ l  } ) ) $.</p>
</li>
<li><p>$\frac { \partial \mathcal { L  }  } { \partial W _{ l  }  } = \frac { \partial \mathcal { L  }  } { \partial \vec { z  } _{ l  }  } \frac { \partial \vec { z  } _l  } { \partial W _{ l  }  } = \delta _l \times a _{ l - 1  } ^t $.</p>
</li>
<li><p>$\frac { \partial \mathcal { L  }  } { \partial \vec { b  } _l  } = \delta _l $.</p>
</li>
</ol>
<p>如此以上更新即可.</p>
<h3><span id="卷积神经网络cnn">卷积神经网络(CNN)</span></h3><p>神经网络受矩阵乘法的限制,导致对于真实的尺寸巨大的图像难以快速识别,因此产生了卷积神经网络的概念,大概有以下特征:</p>
<ol>
<li><p>空间上权值共享:不同位置使用同一个卷积核(滤波器)</p>
</li>
<li><p>稀疏链接:每一层只链接前一层的感受野.</p>
</li>
<li><p>等变表示:卷积神经网络有某种平移不变性.</p>
</li>
</ol>
<p>对于2D卷积,其公式如下:</p>
<script type="math/tex; mode=display">
S _{ r , c  } = ( X * W ) _{ r , c  } = \sum _i \sum _j X _{ r + i , c + j  } \times w _{ i , j  }</script><p>其中$W $是卷积核,$X $是输入图像,$S $是输出的结果.如果一个图像有多个通道(比如色彩层之类的),每个通道上都需要应用一个卷积核.</p>
<p>下面引入一些名词:</p>
<ol>
<li><p>input size:输入图像的尺寸.</p>
</li>
<li><p>padding:填充的像素数.</p>
</li>
<li><p>filter size:卷积核的尺寸.有时也写作两个变量:filter height和filter width.3D卷积还会有一个filter depth的变量.</p>
</li>
<li><p>stride:步长.</p>
</li>
<li><p>output size:卷积后输出的尺寸.有时也写作feature size.</p>
</li>
<li><p>input channels:输入图像的通道数.</p>
</li>
<li><p>n filters:卷积核的数量.</p>
</li>
<li><p>dilation rate:膨胀率,用于空洞卷积.膨胀率为$d $的时候,卷积核中间会插入$d - 1 $个$0 $间隔.</p>
</li>
</ol>
<h4><span id="感受野计算">感受野计算</span></h4><p>先看output size的计算,容易见到,其各个维度方面计算是独立的.只要对于单个维度算出卷积核在上面移动的次数,最后将不同维度相乘即可.</p>
<p>对于单个维度,这个维度的移动次数应该是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\text { output \_ size  } & = \lceil \frac { \text { input \_ size  } + 2 \times \text { padding  } - \text { filter \_ size  } + 1  } { \text { stride  }  } \rceil \\
& = \lfloor \frac { \text { input \_ size  } + 2 \times \text { padding  } - \text { filter \_ size  }  } { \text { stride  }  } \rfloor + 1 \\

\end{aligned}</script><p>这个公式相当容易理解,原因是$\text { stride  } = 1 $的时候,上面恰好是移动的次数,而$\text { stride  } $变化的时候,当然要拿到一个上取整.</p>
<p>至于所谓的空洞卷积,只需在上面的基础上改$\text { filter _ size  } $就好.</p>
<p>至于乘法操作,每得到一个$\text { output  } $当然都会需要$\text { filter _ size  } $次乘法操作.</p>
<p>再看感受野的计算,不妨设$S _i $为前$i $次卷积的$\text { stride  } $的乘积,设$k _{ i + 1  } $表示第$i + 1 $层的$\text { kernel _ size  } $,则:</p>
<script type="math/tex; mode=display">
RF _{ i + 1  } = RF _i + ( k _{ i + 1  } - 1 ) \times S _i</script><p>这个公式的含义大概是每次先看对应了多大的原数据上的范围,再把原本的边界$RF _i $给补上.</p>
<h4><span id="池化pooling">池化(Pooling)</span></h4><p>池化操作它没有一个可学习的参数,只是对输入数据进行固定的操作.简单来说就是降低输入的规模,以实现更好的鲁棒性以及提高效率.</p>
<p>常见的池化操作包括:</p>
<ol>
<li><p>MaxPooling:取区域内的最大值.</p>
</li>
<li><p>MeanPooling:取区域内的平均值.</p>
</li>
<li><p>PyramidPooling:多次进行尺度不同的池化.</p>
</li>
</ol>
<h4><span id="常见卷积架构">常见卷积架构</span></h4><h5><span id="alexnet">AlexNet</span></h5><p>首次引入ReLU激活函数,Dropout 技术,以及数据增强,提高了模型的训练效率和泛化能力.</p>
<p>采用了$8 $层深的网络结构,证明了深度网络的潜力.</p>
<h5><span id="vgg">VGG</span></h5><p>开始堆叠小尺寸的卷积核,获得与大卷积核相似的感受野的同时可以增加网络深度.</p>
<h5><span id="resnet">ResNet</span></h5><p>引入残差的概念,直接将输入数据累加(跳跃连接)到最后的输出中,这样网络学习的实际上是输入和输出之间的残差,从而提高了网络学习能力.</p>
<h5><span id="squeezenet">SqueezeNet</span></h5><p>SqueezeNet的基本构建单元是Fire模块.Fire模块由一个squeeze层和一个expand层组成.squeeze层使用$1 \times 1 $卷积核减少通道数,而expand层则使用$1 \times 1 $和$3 \times 3 $卷积核增加通道数.这种设计有效地减少了参数数量和计算量.</p>
<h5><span id="mobilenet">MobileNet</span></h5><ol>
<li><p>深度卷积:在这个操作中,每个输入通道独立地进行卷积,这意味着在进行卷积时,不同通道之间没有交互.这样可以减少计算量和参数数量.</p>
</li>
<li><p>逐点卷积:逐点卷积使用$1 \times 1 $的卷积核,它作用在深度卷积的输出上,将不同通道的信息整合在一起.逐点卷积可以减少参数数量,同时保持较高的性能.</p>
</li>
</ol>
<h5><span id="shufflenet">ShuffleNet</span></h5><ol>
<li><p>组卷积(Group Convolution):将通道分成几个组,并使用不同的卷积神经网络层执行标准卷积.</p>
</li>
<li><p>打乱层(Shuffle layer):通过对通道进行洗牌,将不同组的信息合并.</p>
</li>
</ol>
<h5><span id="反卷积">反卷积</span></h5><p>也就是将较小的数据特征图扩大到较大的尺寸.有的时候也把这个操作说成上采样.</p>
<ol>
<li><p>插值步骤(Interpolation Step):首先,在输入特征图的元素之间插入零,增加特征图的尺寸.</p>
</li>
<li><p>卷积步骤(Convolution Step):接下来,对扩大后的特征图应用一个标准的卷积操作.此步骤相当于在扩大的特征图上滑动卷积核,计算卷积输出.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划相关</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="动态规划的设计">动态规划的设计</span></h2><h3><span id="分析状态">分析状态</span></h3><h5><span id="example1">Example1</span></h5><p>给定一个序列,初始为空,进行多次操作,每次在序列末尾等概率加入一个$[ 1 , m ] $中的数字,然后进行以下判断:</p>
<ol>
<li><p>如果当前序列末尾两个数字相同且小于$t $,假设都是$x $,那就将它们都删去,加入一个$x + 1 $.</p>
</li>
<li><p>如果当前序列没有可以删的数字,并且序列长度为$n $,终止操作.</p>
</li>
</ol>
<p>给定$n , m , t $,求最终序列的元素和的期望.</p>
<p>$n , m \leq 10 ^3 , t \leq 10 ^9 $.</p>
<p>首先$t \leq 10 ^9 $显然是没用的,因为它最多也就能这么凑:$m + n - 2 , m + n - 3 , \cdots , m , m $,合成一个$m + n - 1 $,因此我们令$t = \min \{ t , m + n - 1 \} $即可.</p>
<p>然后我们发现一个事实:如果这个序列某一个位置$i $,有$a _i &lt; a _{ i + 1  } $,那么无论后面怎么做,这里的$a _i $都必不可能被删除.以此,我们不妨设$f _{ i , j  } $表示序列长度为$i $,序列开头元素为$j $的期望.然后发现中间的枚举巨大麻烦,完全不可以转移.</p>
<p>题解的思维顺序感觉很乱,于是我来<del>马后炮一下</del>重整一下顺序.</p>
<p>首先,我们的限制一共有两种:一个是数的大小不能超过$t $,另一个是序列的长度不能超过$n $.我们不妨设$ans _{ n , t  } $表示在上述两种限制下的答案.接下来我们要做的,无非是开始分析转移$ans $需要求出哪些量,这些量又可以如何转移即可.</p>
<p>分析一下$ans _{ n , t  } $,考虑枚举一下开头元素是什么,那么第二个位置就不能是这个元素,然后后面再计算贡献,因此我们自然有$ans _{ n , t  } = \sum _{ x = 1  } ^t E ( n 个 位 置 , 第 一 个 位 置 是 x 并 且 没 有 被 删 去 ) $.</p>
<p>然后你就会发现这个问题真正难做的地方:我们这么顺着做,每次把第一个元素抠出去,但是这个元素是会影响后面的操作的!举个栗子:</p>
<p>如果插入的数是:$3 , 3 , 3 $,最终的答案应该是$4 , 3 $.</p>
<p>但如果我们一开始把第一个位置扣出去,就变成了$3 , [ 3 , 3 ] $,最终的答案就变成了$3 , 4 $.也就是说,这里的动态规划问题在转移子问题的时候,需要前面的那个位置作为信息.不妨设$g _{ i , j  } $表示当前后面还有$i - 1 $个位置,当前前面已经放好了一个$j $,这个$j $不能被删掉的期望,显然有$ans _{ n , t  } = \sum _{ x  } ^t g _{ n , x  } P ( 最 终 序 列 中 , 这 里 是 k ) $,问题只在于如何求$g $.这个$g _{ n , k  } $是钦定了这个位置放$k $的期望,后面我们需要将它乘上这个位置放$k $的概率才能得到真实的答案.这很合理,因为我们通常的一切概率与期望的递推通常都是有一个隐含的条件概率乘法的.</p>
<p>可能第一反应是,这个$g _{ n , k  } = ( k + \sum _{ j \ne k  } g _{ n - 1 , j  } ) $.但是实际上这个是不对的.这里的$k $不能删掉不意味着后面的$j $不能删掉,事实上后面的$j $爱怎么删怎么删,只要不搞出一个$k $来就可以.因此我们需要设$f _{ i , j  } $表示当前后面还有$i $个位置,第一个位置不能是$j $,也不能曾经是$j $(因为这里只要是$j $都应该与前面合并),剩下的乱选的方案数.这个东西看上去它就不好转移,因为它限制太强了.我们正难则反!设$f _{ i , j  } $表示后面还有$i $个位置,第一个位置现在或曾经是过$j $的期望.那么全集是什么呢?全集是$ans _i $.</p>
<p>还没完啊,我们还需要求一下这里是$k $的概率,由于还有一个类似的$f $,我们还要求一下这里曾经是$k $的概率.设前者为$q _{ i , k  } $,后者为$p _{ i , k  } $.我们来强调一下这里设计的原则:这里的$p $其实还蛮奇怪的,因为它设计的是:只要我当前在队首拿到了$k $,我立刻停止后面的操作.这很好理解,因为后面无论怎么玩,这里都曾出现过$k $了.但是这个理解方式可以帮助我们写出下面的转移方程.</p>
<p>对于前者,我们发现这里是$k $等价于这里是$k $并且后面没有出现过$k $,也就是$q _{ i , k  } = p _{ i , k  } ( 1 - p _{ i - 1 , k  } \times [ k &lt; t ] ) $.这里加一个限制是因为有不能超过$t $的限制.</p>
<p>对于后者,这里的$k $有很多种可能出现过,一种是直接加入,一种是合并而来,于是$p _{ i , k  } = \frac { 1  } { m  } [ k \leq m ] + p _{ i , k - 1  } p _{ i - 1 , k - 1  } $.</p>
<p>因此我们几经辗转,终于得到了$g $的转移式子:</p>
<script type="math/tex; mode=display">
q _{ i , k  } g _{ n , k  } = p _{ i , k  } ( k + ans _{ i - 1  } - f _{ i - 1 , k  } p _{ i - 1 , k  } )</script><p>就差$f $了.$f $有两种可能:要么最后仍然是$k $,要么这个$k $已经被杀掉了.于是:</p>
<script type="math/tex; mode=display">
p _{ i , k  } f _{ i , k  } = q _{ i , k  } g _{ i , k  } + ( p _{ i , k  } - q _{ i , k  } ) f _{ i , k + 1  }</script><h5><span id="example2cf1007e">Example2(CF1007E)</span></h5><p>首先我们需要发现一个很强的性质:作用到了第$i $个站台就会清空前面所有站台.清空后就和$a _i $无关了,而如果还没涉及到一定和$a _i $有关,那么涉及到了一半怎么办呢?我们考虑这里涉及到了一半,那么前面一定被清空了,我们根据前面的清空情况现场计算这里的答案.</p>
<p>这启发我们:我们可以对这个做文章,我们设$f _{ i , j  } $表示只考虑前$i $个站台,要撑$j $个单位时间需要的最少火车数量.$g _{ i , j  } $表示只考虑前$i $个站台,要撑$j $个单位时间,并且$[ 1 , i - 1 ] $全部清空需要的最少火车数.另外,这两个dp数组都要求不能有火车漏到后面,也就是火车不能坐上后面的人,不然设为$+ \infty $表示无法满足(对于全局,我们在$n + 1 $处放一个$a = + \infty , b = 0 , c = + \infty $来保证一定会满载).为什么需要$g $作为辅助dp数组呢?我们先对着$f $分析.</p>
<p>考虑$f _{ i , j  } $的转移,根据上面的分析,我们有两种可能:</p>
<p>第一种,前$j $轮中根本没接走站台$i $的人.此时需要满足$f _{ i - 1 , j  } \ne + \infty \land a _i + j \times b _i \leq c _i $.那么这里怎么更新$g $呢?设$L = sa _{ i - 1  } + sb _{ i - 1  } \times j $,显然$g _{ i , j  } = \lceil \frac { L  } { K  } \rceil $,并且需要保证此时没有用到$i $以后的站台,因此需要保证$\lceil \frac { L  } { K  } \rceil K \leq sa _{ i  } + sb _i \times j $.注意到由于这里保证了$f _{ i - 1 , j  } $是可以取到的,因此我们可以撑到第$j $秒,剩下的火车在$j + \varepsilon $秒全选.</p>
<p>第二种,前$j $轮中有火车接走站台$i $的人.设最后一次是在$r $时间接走的站台$i $,那么此时必然清空了$[ 1 , i - 1 ] $,这里用了$g _{ i , r  } $.然后为了防止这里在$[ r + 1 , j ] $这段时间中爆掉,因此还需要$w = \lceil \frac { \max \{ 0 , rem + ( j - r ) b _i - c _i \}  } { K  } \rceil $,其中$rem $是$r $时刻$i $剩下的人数.这些火车都要在$r $时刻之前解决(因为我们设了最后一次在$r $时间接走),不难发现我们其实不在乎前面具体怎么解决的,而只要在$r $这里保证没出问题就行.另外还要保证这个过程没有走到后面,也就有$wK \leq rem $.但是,接下来在$[ r + 1 , j ] $时刻就只需要对前面做操作,不过和一开始不一样的是,此时被清空了,因此我们设$f _{ i , j , 0  } $表示只考虑前$i $个站台,要撑$j $个单位时间需要的最少火车数量,但是$[ 1 , i ] $都被清空为$0 $过.</p>
<p>每一步看上去都很合理,但是如何想到可以这么dp的呢?说到底,dp是解决一个最优子问题的,我们发现我们知道时间,以及前面是否清空,就可以得知目前的状态.另外,由于我们是枚举目前的状态,因此中间的转移过程是易知的.</p>
<p>这个题的启发性大概有以下几点:</p>
<ol>
<li><p>设计状态的时候,只考虑记录经过的时间/前面的初始值/目前考虑到第几位,由上面三点可以还原出所有状态.</p>
</li>
<li><p>由于我们确定了当前考虑到了第几位,我们就可以进行递推:原因很简单,只要我们考虑到某一位,就一定会影响前面所有的位置(全部清空以至于到达这里).一开始我犯了一个错是将$g _{ 1 , t , 0 / 1  } $全部设为$0 $,因为我觉得无论如何$0 $位置都是清空的,但实际上这是错误的!因为在$t $时刻的$1 $位置不一定合法.这就是这个设计巧妙的地方:它时刻保证了前$i $个的合法性,并且如果我们想要让$i $位置合法,一定要求让$[ 1 , i - 1 ] $合法.</p>
</li>
<li><p>转移的时候,由于钦定了某一时刻是否选,因此我们可以直接算出从$r \rightarrow t $这个过程中会积累的量,这些量必然要在$r $时刻清理掉.由于钦定导致限制加强,因此这里就容易处理了.</p>
</li>
</ol>
<h3><span id="可删除dp">可删除dp</span></h3><h5><span id="example1">Example1</span></h5><p>定义一个有根树为大菊花,当且仅当这棵树的根的度数$\leq m \land \nexists x \ne root , \deg ( x ) &gt; 2 $.对于每一条边,求将这条边连接的两个点合并后,以新点为根的大菊花数量.$( n \leq 5 \times 10 ^5 , m \leq 50 ) $</p>
<p>注意到以一个点为根的大菊花数量是一个关于树的大小的背包合并.这样通过前缀后缀做到$O ( nm ^2 ) $.</p>
<p>注意到这个背包是可删除的,所以就能做到$O ( nm ) $.</p>
<h3><span id="dp分界点">dp分界点</span></h3><h4><span id="example12022zrtg十连测day7-permutation">Example1(2022zrtg十连测day7 Permutation)</span></h4><p>首先注意到$[ 3 , n ] $一定会被分成两段递减的序列,分别跟在$1 $和$2 $的后面,假设$1 $在$2 $前面,这样算出答案后乘以$n $即可.</p>
<p>注意到$i + 1 $一定可以放到$i $的前面,设$f _i $表示在$i $和$i + 1 $之间有分界点,这两个点后面分界合法的方案数.每次可以枚举下一个合法的分界点,不难发现这个分界点也即$i $的倍数$\pm 1 $之类的,于是可以实现,复杂度$O ( n \ln n ) $.</p>
<h3><span id="基于贪心的dp">基于贪心的dp</span></h3><h4><span id="example1cf1666e">Example1(CF1666E)</span></h4><p>先想一下别的东西怎么求.</p>
<p>如果我们要求最大值最小或者最小值最大怎么办?我们可以二分后贪心,而显然它们的差就是一个答案的下界,问题在于这个下界是否可以取到.</p>
<p>我们冷静一下,发现在可能的方案中,第$i $条线段的右端点的位置一定是一段连续的区间.</p>
<p>设$f _i $表示第$i $个分界点可能的最小值,$g _i $表示第$i $个分界点可能的最大值.假设我们目前二分的最大值要小于等于$mx $,最小值要大于等于$mn $,那么我们有转移:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i + 1  } & = \max \{ a _{ i + 1  } , f _i + mn \} \\
g _{ i + 1  } & = \min \{ a _{ i + 2  } , g _i + mx \} \\

\end{aligned}</script><p>注意到$f $与$g $的转移是无关的,而显然对于第$i $个分界点,它可以取$[ f _i , g _i ] $中一个数,一定存在一个取法使得答案能取到下界.</p>
<p>为啥呢?只需让$ans _{ i  } $表示第$i $条分界线是啥,那么我们$ans _i $是可以取$[ ans _{ i + 1  } - mx , ans _{ i + 1  } - mn ] $中的任何一个数字的,我们将其和上面求出的$[ f _i , g _i ] $求一下交集.如果交集为空,说明要么$ans _{ i + 1  } - mn &lt; f _i , f _{ i + 1  } &lt; ans _{ i + 1  } &lt; f _i + mn $,这是不可能的.另一种情况同理不可能,这就保证了一定可以取到答案.一定能使极差$\leq mx - mn $.</p>
<h3><span id="数位dp">数位dp</span></h3><h4><span id="example12022qbxt国庆day3string">Example1([2022qbxt国庆Day3]string)</span></h4><p>首先设$f _{ i , j  } $表示长度为$i $的,以$S [ n - j + 1 . . . n ] $为子序列的字符串个数.</p>
<p>考虑按位处理,每次将$T $的一个后缀设为极大,然后不断地向前扩展这个后缀的长度,直到所到的位置再改为极大就会超出$k $.这个时候我们停止更改,并且继续倒着修改,仍然修改每位,直到最后所积累的总数恰好为$k $.</p>
<p>当然,做的时候一定要时刻铭记后面的部分设为的是极大字符串还是极小字符串,这里设为极大是简单的,因为可以直接继承上一位的枚举.</p>
<p>考虑这个过程,我们每将一个位置的值设为更大,相当于松弛了后面的所有序列,因此也就是一个数位dp.</p>
<h4><span id="example2cf1194g">Example2([CF1194G])</span></h4><p>第一反应就是枚举$x ‘ $和$y ‘ $,然后用数位dp枚举$d $使得$x = dx ‘ , y = dy ‘ $.</p>
<p>但是有一个问题在于如果$\gcd ( x ‘ , y ‘ ) \ne 1 $怎么办,这样有可能会算重.我们发现我们只判断$\gcd ( x ‘ , y ‘ ) = 1 $的情况就行,然后写一个$2 ^8 $判断$x ‘ , 2 x ‘ , 3 x ‘ , 4 x ‘ $以及对应的$y ‘ $出现了没有.复杂度$( 9 ^4 \times 2 ^8 \times \log _{ 10  } n ) $,有点难过.</p>
<p>但是我们发现这个$2 ^8 $可能大了点,注意到只要出现一个我们就不用再记了,因此唯一需要记的是一对都没出现过的情况,这里只有$3 ^4 \times 2 $的状态量,就可以快一点.</p>
<h3><span id="树形dp">树形dp</span></h3><h4><span id="example1jloi2016侦察守卫">Example1([JLoi2016]侦察守卫)</span></h4><p>首先第一反应是记录子树内到子树根节点的最远的未被覆盖的点和最近的监测站,但是这样是$O ( nd ^2 ) $的复杂度.冷静一下,发现这两个一定只会有一个值有意义,这样就是$O ( nd ) $的了.</p>
<p>写的时候犯了个很蠢的错:树形dp由于需要合并,所以如果有多步转移,一定要先把所有dp值都会进行的dp转移写成赋值转移,把其它的写成取$\min $转移.</p>
<h3><span id="轮廓线dp插头dp">轮廓线dp(插头dp)</span></h3><h4><span id="example1">Example1</span></h4><p>现在有一个$[ 1 , n ] $的排列,现在要从中选出一个集合$S $,满足$\forall x \in S , 2 x \notin S , 3 x \notin S $,求方案数.</p>
<p>首先考虑将每个数分解为$a \times 2 ^b \times 3 ^c $的形式,显然$a $不相同的数之间互不干扰.</p>
<p>对于$a $相同的一群数,我们考虑将$( b , c ) $作为它在矩阵上的位置,不难发现上面的要求其实也就是选一个数就不能选它右边的数和下边的数,可以使用轮廓线dp转移.</p>
<h3><span id="高斯消元处理后效性">高斯消元处理后效性</span></h3><h4><span id="example1">Example1</span></h4><p>$n $个点的树,一开始位于一号点,每个点有一个颜色($0 $或$1 $),每次随机选择一个点$v $,从当前所在点移动到$v $并将$v $的颜色取反(不是将这条路径上的颜色取反),当整棵树颜色相同时停止,求期望移动距离(每条边的长度为$1 $,当然不为$1 $也能做).</p>
<p>$n \leq 100000 $.</p>
<p>首先我们发现这个树形结构很难搞,怎么办呢?</p>
<p>我会弱化问题!先考虑期望进行多少轮.</p>
<p>不难发现这个问题下,这个树没有任何意义,我们只需要看当前选中的点是$1 $还是$0 $就可以.不妨设$f _{ i  } $表示当前有$i $个点是$1 $,最后全$1 $或者全$0 $所需要的期望步数,显然$f _0 = f _n = 0 $,$f _{ i  } = \frac { 1  } { 2  } ( f _{ i + 1  } + f _{ i - 1  } ) + 1 $.欸,这不luoguP7099嘛.看来这个思路很对啊!</p>
<p>但是其实寄了,这个东西怎么想都很难拓展.一开始还想过计算每条边对期望的贡献,但也很难搞.</p>
<p>正确的做法是什么呢?正确的做法是我们统计每个点的贡献!你可能会很好奇这个点能有什么贡献,事实上,假设我们当前在$u $,只要当前没有结束,我们还要选点$v $,对答案的期望的贡献就是$u $到这棵树上所有点的距离之和除以$n $,而这是一个定值.也就是说,只要我们统计一下到了每个点$u $多少次(要求不是最后一次),我们就可以全部加一加乘一乘得到答案.我们脱离了树的结构!</p>
<p>我们设$f _{ i , j , 0 / 1  } $表示当前场面上有$i $个$1 $,$j $号点这里是$0 $还是$1 $,它在结束前能被期望选多少次,注意$f _{ n / 0 , j , 0 / 1  } = 0 $.但是这个转移显然有点垃圾,我们再冷静一下:似乎我们不在乎每个点具体编号,只在乎它当前的颜色,于是我们可以设$f _{ i , 0 / 1  } $表示当前有$i $个$1 $,$0 / 1 $染色的点在接下来的操作中期望选择多少次.</p>
<p>我们可以写出以下转移:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ 0 / n , 0 / 1  } & = 0 \\
f _{ i , 0  } & = \frac { i  } { n  } f _{ i - 1 , 0  } + \frac { n - i - 1  } { n  } f _{ i + 1 , 0  } + \frac { 1  } { n  } ( f _{ i + 1 , 1  } + [ i + 1 \ne n ] ) \\
f _{ i , 1  } & = \frac { i - 1  } { n  } f _{ i - 1 , 1  } + \frac { n - i  } { n  } f _{ i + 1 , 1  } + \frac { 1  } { n  } ( f _{ i - 1 , 0  } + [ i - 1 \ne 0 ] ) 
\end{aligned}</script><p>为啥最后加上了$[ i + 1 \ne n ] $呢?因为我们统计的是在没结束的情况下的答案.</p>
<p>乍一看这个转移成环并且极其复杂,可能需要高斯消元,但实际上不用,我们冷静观察一下:</p>
<p>我们假设我们已经求出了$f _{ i , 0 / 1  } $和$f _{ i - 1 , 0 / 1  } $,我们发现我们可以用这两个方程求出$f _{ i + 1 , 0 / 1  } $,然后就比较典了:我们将所有的函数表示成$af _{ 1 , 0  } + bf _{ 1 , 1  } + c $的形式(之所以这么表示,是因为我们架设了$f _{ 1 , 0 / 1  } $已经求出来了,虽然实际上没求出来),而由于我们有右边界,我们可以用它表示出$f _{ n , 0 / 1  } $,而$f _{ n , 0 / 1  } $我们已知,这样就可以解一个二元一次方程组.</p>
<h3><span id="最短路处理后效性">最短路处理后效性</span></h3><h4><span id="example12022qbxt国庆day2operation">Example1([2022qbxt国庆Day2]operation)</span></h4><p>首先注意到,$a _i = 1 $的时候和$a _i \ne 1 $的时候其实没有太大区别,我们在操作完后也需要用各种方式抵消影响.我们设$f _i $为$a _i = 1 $,而其他$a $全都为$0 $时的答案,不难发现最后的答案也就是$\sum { a _i f _i  } $.</p>
<p>而上面的转移自然是:$f _i = \min \{ b _i , w + \sum _{ j = l  } ^r f _j \} $.</p>
<p>但是,这个转移是有后效性的,不能直接进行dp,不过我们考虑用类似最短路的操作来处理.</p>
<p>换句话说,由于每次$f _i $最小的点不可能再被更新到,我们就把它设为已更新的点.当一个区间中的所有点都被标记为已更新后,我们就拿这个区间去更新别的点.</p>
<p>我们把每个线段挂到线段树上的节点,当我们把一个点标记为已更新,也就是检查这个点对应的线段树上叶子节点到根的路径上所有的线段树节点对应的区间是否全更新.均摊下来,一个区间只会被检查$\log n $次,这样就做完了.</p>
<h3><span id="组合意义">组合意义</span></h3><h5><span id="example1noi2009-管道取珠">Example1([NOI2009] 管道取珠)</span></h5><p>考虑组合意义,$\sum a _i ^2 $的意义也即满足操作序列$u $和操作序列$v $的最终结果相同的二元组$( u , v ) $的数量.</p>
<p>不妨设$dp _{ i , j , k  } $为第一个装置上方已经动了$i $个珠子,下放动了$j $个珠子,第二个装置上方动了$k $个珠子,下方动了$i + j - k $个珠子,并且两个装置截至目前的操作序列完全一样的方案数.显然$dp _{ n , m , n  } $即答案.</p>
<h5><span id="example2">Example2</span></h5><p>求长度为$n $的排列的$( \sum _{ i = 2  } ^{ n - 1  } [ a _i &lt; a _{ i - 1  } \And a _i &lt; a _{ i + 1  } ] ) ^k $的期望$( n \leq 10 ^9 , k \leq 500 ) $.</p>
<p>$O ( n ^2 k ^2 ) $是显然的,枚举最小值在哪就行.</p>
<p>注意到我们要求的是$\sum ans ^k $,而加入$1 $的时候,对于每个长度为$n - 1 $的排列,有$( n - 2 - 2 ans ) $个位置加入后会使答案加一,那我们要求的也就是:</p>
<script type="math/tex; mode=display">
\sum ( n - 1 - 2 ans ) ( ans + 1 ) ^k + \sum ( 2 ans + 2 ) ans ^k</script><p>推一推式子就可以做到$O ( nk ^2 ) $,然后上拉格朗日插值就做完了.</p>
<p>等一下,这是noip模拟赛啊,哪来的拉格朗日插值?</p>
<p>注意到我们可以考虑组合意义,$ans ^k $等价于从所有的地方中可重复地选出$k $个位置,如果随便选肯定可以钦定,问题在于可能会选出两个间隔为$1 $的位置,这就比较麻烦了.所以我们不妨直接把所有被选中的位置求出来,能合并成一段波动序列的合并.这样,我们设$f _{ i , j  } $表示已经选了$i $段波动序列,其中有$j $个谷的方案数.最后这些谷每个至少被选中一次,做一个辅助数组维护波动序列的数量即可,复杂度$O ( k ^3 ) $.</p>
<h3><span id="二项式定理展开">二项式定理展开</span></h3><h4><span id="example1">Example1</span></h4><p>求$\sum _{ i = 1  } ^n \sum _{ j = 1  } ^n ( a _i \oplus a _j ) ^2 $,$n \leq 10 ^5 $,$a _i \leq 10 ^9 $.</p>
<p>考虑设$f _i $表示只考虑前$i $低的位置,高位全部默认为$0 $的方案数.如果我们设$cnt _i $表示$a $中第$i $位为$1 $的数个数,那根据$( a + b ) ^2 = a ^2 + 2 ab + b ^2 $,我们只需要求出$g _{ i  } $表示只考虑前$i $低的位置,第$i + 1 $位是$1 $的数和第$i + 1 $位是$0 $的数两两异或之和,显然有$f _i = f _{ i - 1  } + 2 cnt _i \times 2 ^i \times g _{ i - 1  } + cnt _i 2 ^{ i + 1  } $.</p>
<p>$g $可以用$O ( n \log a ) $的复杂度求,这样总复杂度$O ( n \log ^2 a ) $.</p>
<h3><span id="线头dp">线头dp</span></h3><h5><span id="example120zr普及组五连测day1区间">Example1([20zr普及组五连测day1]区间)</span></h5><p>令$dp _{ i , j , k  } $表示目前倒到第$i $个水杯,前面还有$j $个延续过来的未结束的线头,目前已经选定了$k $个人,转移的话需要枚举当前有几个人在此开始以及有多少人在此结束,这样是$O ( n ^5 ) $的复杂度,不太能接受.但不妨考虑先将有几个人在此开始以及前面的继承处理到目前的数组中,然后再选择若干个人结束,这样分开了两个过程,于是实现了$O ( n ^4 ) $的复杂度.</p>
<h5><span id="example22022qbxt国庆day6rps">Example2([2022qbxt国庆Day6]rps)</span></h5><p>首先三次询问的做法没区别,我们只考虑r的情况.</p>
<p>注意到我们肯定是想拿s去把p杀掉,不然p就会把r杀掉.考虑一个线头dp,设$dp _{ i , 0 / 1 / 2  } $表示前$i $个数,0:无接头;1:有接头无线头;2:有线头的情况.这样一个线头每延申就会使答案减少,而如果我们把一个?改为s也会使答案减少,大概做一做.</p>
<h5><span id="example3coci2020-20212-svjetlo">Example3([COCI2020-2021#2] Svjetlo)</span></h5><p>首先发现,我们得到的序列不可能首尾相同,不然我们可以同时去掉开头和结尾.</p>
<p>然后发现,如果一棵子树内的点全部被点亮,这棵子树可以直接删去.这一步是必须做的,不然会多一步讨论.</p>
<p>我们设$dp _{ u , 0 / 1 , 1 / 2  } $为$u $的状态为$0 / 1 $,以$u $为根的子树内有$1 / 2 $个线头的方案数.注意如果子树内有$0 / 2 $个线头,那么会在$u $处存在两个接头;不然则会只存在一个接头.</p>
<p>通过不断将下方的点合并到当前子树的根节点上,我们可以完成整个过程.</p>
<p>注意到两个接头如果在相邻的两个节点就可以自动接起来,因此$dp _{ u , s , 2  } $的两个接头实际上一个位于$u $,另一个位于$u $的随便一个儿子.</p>
<p>换句话说,做线头dp的时候一定要注意,线头的相接是自然的过程(即两个线头相邻就会相接)还是需要手动接起来的过程.</p>
<h5><span id="example4cf626f">Example4(CF626F)</span></h5><p>先按照权值排序,一个人可以选择新建一个组,加入一个组,加入一个组并删除这个组</p>
<p>设$dp _{ i , j , k  } $表示目前走到$i $,前面分成$j $组,总贡献不超过$k $的方案数.做的过程中是一个线头dp,每次每组的贡献都要加上当前位置和前面位置的差值.</p>
<h5><span id="example5xvii-open-cup-named-after-ev-pankratiev-grand-prix-of-japanopenstrain-contest-1489-jtravel-in-sugar-country">Example5([XVII Open Cup named after E.V. Pankratiev. Grand Prix of Japan(openstrain contest 1489) J]Travel in Sugar Country)</span></h5><p>一条线段上有$n ( \leq 100 ) $个商店,要从中选出$k ( \leq 10 ) $个不同的商店$s _1 , s _2 , \cdots , s _k $,使得按顺序遍历这$k $个商店的路径长度是$m ( \leq 30 ) $的倍数,求方案数.</p>
<p>这种来回走的也是一种线头dp的形式.</p>
<p>我们设$dp _{ i , j , w , l  } $表示目前在判断了$i $个商店,选了$j $个,并且目前整个图有$w $条”路径”(连续走动),走过的路在$\bmod m $一意义下为$l $的方案数.最后的答案就是$dp _{ n , k , 1 , 0  } $.</p>
<p>首先,我们对每个点求出$D ( 1 , x ) $,然后$D ( x , y ) = | D ( 1 , y ) - D ( 1 , x ) | $,不难发现$x $越大$D ( 1 , x ) $越大(不考虑取膜的问题),因此如果我们按照从左到右的顺序逐渐往里加入,那么我们就需要讨论这个新加入的点它的左右点的$D $和它的大小关系,也就是它左右点的加入时间,这显然可以使用线头dp实现.</p>
<p>我们先枚举一下起点和终点并将它们扔到图上,这样初始图上有一条路径($s _1 \rightarrow s _1 $),接下来,我们每插入一个点$x $,我们考虑它的贡献:</p>
<ol>
<li><p>新建一条路径,此时这个点的左右端点必然都是在他后面加入,它对总长度的贡献是$- 2 D ( 1 , x ) $,对方案数的贡献为$1 $.</p>
</li>
<li><p>插入到原来一条路径的开头/结尾.此时这个点有一个端点是比它早的,有一个会比它晚,对总长度的贡献为$0 $.</p>
</li>
<li><p>作为中心点合并两条路径,此时对总长度的贡献为$2 D ( 1 , x ) $.</p>
</li>
</ol>
<p>这样我们就做到了$O ( n ^4 km ) $的复杂度.如果我们加两维$0 / 1 $表示目前起点和终点是否加入,就可以把复杂度优化到$O ( n ^2 km ) $.</p>
<h3><span id="相对顺序不变">相对顺序不变</span></h3><p>如果遇到一些会不断改变当前状态的题目,有时可以考虑改变前后的一些元素的相对顺序是否改变.以及如果有两个物体相遇后交换位置的题目,如果物体本质相同,同样可以考虑直接穿过而不是交换.</p>
<h4><span id="example1bzoj4621tc605">Example1([bzoj4621]Tc605)</span></h4><p>注意到最终的序列一定是由若干个数字段组成,而数字段的顺序也即原本序列的顺序,于是此题显然.</p>
<h3><span id="拆分区间">拆分区间</span></h3><p>有的时候,注意到一个区间可以通过某些方式拆分成两个区间(断点可能是需要枚举的,也可能是固定的),从而可以递归处理/区间dp.</p>
<h4><span id="example122zr提高组十连测day4零二">Example1([22zr提高组十连测day4]零二)</span></h4><p>先考虑数字两两不同的时候怎么做,我们先找到$A $中的全局最大值所在位置和$B $中的全局最大值所在的位置.由于从堆中取出全局最大值后,堆一定成为了空堆.因此我们注意到此时$A $取出的数量和$B $的长度一定是相等的.</p>
<p>进一步考虑,这意味着一个全局最大值将把$B $序列分成两部分,这两部分将由$A $中相等的两部分分别生成.不妨假设这个全局最大值的位置是$x $,那么对于$[ 1 , x ] $这一段的$A $生成的$B $数组,它的最大值一定在末尾位置,而前面任意,显然它的数量等价于直接删掉最大值后的$A $能生成的$B $的数量.对于$[ 1 , x + 1 ] $则任意.</p>
<p>那么我们所需要做的就是求出$A $的某一段删掉若干次最大值后的序列所能生成的$B $的数量.不妨设$dp _{ l , r , i  } $表示$[ l , r ] $中所有$\leq i $的数字组成的序列所能生成的数量.</p>
<p>如果$[ l , r ] $这段区间中没有数字$i $,那显然$dp _{ l , r , i  } = dp _{ l , r , i - 1  } $,不然,我们可以枚举两端分开的位置,那这个位置一定在数字$i $的后面.于是可以转移.</p>
<p>至于可能出现相同数字的情况,我们只需要把每个数字的下标作为第二关键字即可,容易发现这样做之后转化为了两两不同的情况.</p>
<h4><span id="example2sdoi2010地精部落">Example2([SDOI2010]地精部落)</span></h4><p>注意到第$n $个元素一定是山峰.所以我们考虑用第$n $个元素分割整个区间为两部分.</p>
<p>设$f _n $为$n $个元素且开头为山谷的答案.枚举第$n $个元素在位置$k $($k - 1 $是奇数),则$f _k f _{ n - 1 - k  } \binom { n - 1  } { k  } \rightarrow f _n $.</p>
<h4><span id="example3">Example3</span></h4><p>给定数组$a $,每次可以选择一个数删掉并把两边的数接起来,要求操作过程中不能出现相邻的数相同,求方案数.$n \leq 500 $.</p>
<p>考虑枚举最后选的点,那么这个点左右一定互不相干.我们假设$f _{ l , r  } $为将$[ l , r ] $删干净后再去删$a _{ l - 1  } , a _{ r + 1  } $的方案数,然后枚举$[ l , r ] $中最后删哪个点即可做区间dp.</p>
<h4><span id="example4agc039e-pairing-points">Example4([AGC039E] Pairing Points)</span></h4><p>注意到这么一个事实:如果场上已经有了一个叉,那么接下来的边不能再穿过这个叉了.</p>
<p>首先需要破环为链,考虑从$1 $号点这里断开,枚举$1 $号点连接哪个点,然后就可以让$( 2 , 2 n ) $这些点断开了.我们设计$f _{ i , j , k  } $或$[ i , j ] ( k ) $表示区间$[ i , j ] $中的$k $向外连了一条边.答案是枚举$1 $号点连了哪个点,也就是$\sum _{ i = 3  } ^{ 2 n - 1  } f _{ 2 , 2 n , i  } $.</p>
<p>于是我们现在的问题在于如何求$f _{ i , j , k  } $.由于边要联通,所以与$k $相连的这条边必然被$[ i , j ] $中的某两个点所连接的边穿过.我们考虑枚举最靠外的那条边,假设为$x \leftrightarrow y $.这样整个区间被分为了两个部分:$[ i , k ] ( x ) , [ k , j ] ( y ) $.但是问题并没有得到解决.因为$[ i , x ] $和$[ y , j ] $之间的确不可能出现连边了,但$[ x , k ] $和$[ k , y ] $之间仍然可能出现连边.但我们发现:在$[ i , k ] $中一定存在一个分界线,使得分界线两侧是连到不同的两边的.</p>
<p>我们不妨再枚举一下这两个分界线,分别设为$p , q $.现在整个区间被分为了三个部分:$[ i , p ] ( x ) , [ p , q ] ( k ) , [ q , j ] ( y ) $,三个部分之间并没有连边,于是成功将区间拆分.</p>
<p>这个故事告诉我们:拆分区间的很重要的条件是:将一个区间拆分为若干相互无联系的区间,而我们的重点就是找到一种方式使得区间间相互无联系.</p>
<h4><span id="example5agc035d-add-and-remove">Example5([AGC035D] Add and Remove)</span></h4><p>首先自然想到区间dp.但是难以处理的是如果一个区间$[ l , r ] $中间删掉一个点$p $之后,$[ l , p - 1 ] $和$[ p + 1 , r ] $会拼起来,仍然会相互影响.</p>
<p>换一种方式,我们找到$[ l + 1 , r - 1 ] $中最后删除的点$p $,这样区间$[ l , r ] $的答案就是最终三个数的答案.这么枚举的好处是,我们发现删除$[ l + 1 , p - 1 ] $的时候,对$p $产生的贡献和删除$[ p + 1 , r - 1 ] $的时候对$p $的贡献是完全独立的,他俩可以分开.</p>
<p>再看每个位置的贡献,我们考虑计算出这个位置会对答案贡献多少倍,不妨假设$a _l $贡献了$x $倍,$a _r $贡献了$y $倍,那么由于$a _p $会两边都贡献到,所以$a _p $会对答案贡献$x + y $倍.</p>
<p>于是设计一个dp是:$f _{ l , r , x , y  } $表示删除$[ l + 1 , r - 1 ] $后,$xa _l + ya _r $最小是多少.自然有$f _{ l , r , x , y  } = \min \{ f _{ l , p , x , x + y  } + f _{ p , r , x + y , y  } + ( x + y ) a _p \} $.</p>
<p>至于复杂度,前两维肯定是$n ^2 $的空间复杂度,而后两维则意味着每次向下会由两个转移而来,最多转移$n $层,因此是$2 ^n $的空间,于是时间复杂度不会超过$O ( n ^3 2 ^n ) $,其实经过一些奇怪计算应该是不会超过$O ( 2 ^n ) $的.</p>
<h4><span id="example6cf607bzuma">Example6([CF607B]Zuma)</span></h4><p>这个题的关键在于拆分区间,因此一定要判断哪个点是最后删除的.</p>
<p>我们不妨设$f _{ l , r  } $表示删除$[ l , r ] $区间的代价.接下来我们无非要枚举$k $,使得$k $是最后删的.但发现这很难处理.</p>
<p>所以我们怎么办呢?我们考虑判断边界是如何删掉的.比如$l $,它要么是自己被删,要么一定是找到一个和它一样的点,这两个点一起删.我们注意到如果$a _l = a _k $,那么这等价于$f _{ l + 1 , k - 1  } + [ l = k - 1 ] + f _{ k + 1 , r  } $.因此可以做区间dp了.</p>
<h4><span id="example7loj-3215">Example7(LOJ 3215)</span></h4><p>首先考虑一下$m = 2 ^k - 1 $的情况,首先我们要判断有几个数最高位是$1 $,然后接下来判断第二位哪些数字是$1 $.</p>
<p>我们发现这类似一个拆分区间的过程,因为当我们决定了最高位之后,最高位是$1 $的就一定大于最高位是$0 $的了,这两个区间就没有影响了.因此可以设$f _{ l , r , k  } $表示$[ l , r ] $这个区间,前面已经有了$k $个$1 $的最大贡献.</p>
<p>那么对于$m \ne 2 ^k - 1 $的情况我们怎么办呢?我们只需要类似数位dp那样在状态里加一个lim防止超过$m $就行了.</p>
<h3><span id="相互独立">相互独立</span></h3><h5><span id="example12019zrtg十连测day1-origami">Example1(2019zrtg十连测day1 origami)</span></h5><p>看上去很不好做,先考虑宽为$1 $怎么做.</p>
<p>这个时候放在最下面的显然是一段区间,不难发现有一个暴力做法是,我们枚举这段区间$[ l , r ] $,然后看$[ 1 , l - 1 ] $和$[ r + 1 , m ] $能不能折进来.也就是判断以$r $和$r + 1 $为中心的回文串最大长度以及在这个范围内有没有已经折进来的区间.想到这一步,不难发现左右是独立的.</p>
<p>于是我们设$f _i $表示能不能折成以$[ 1 , i ] $为最下层,$g _i $表示能不能折成$[ i , n ] $为最下层,那$[ l , r ] $能折出来当且仅当$f _r = g _l = 1 $,做个前缀和就可以知道有多少个区间能折出来.</p>
<p>通过上面的启示,我们不难发现横着折和竖着折也是相互独立的,于是分别算出答案后乘起来就好.</p>
<h5><span id="example2cf1616g-just-add-an-edge">Example2(CF1616G Just Add an Edge)</span></h5><p>我们来一点一点捋这个题:</p>
<p>首先,任意一条路径一定形如$1 \rightarrow x \cup y \rightarrow n $,并且$1 \rightarrow x $和$y \rightarrow n $不交,然后添加边$x \rightarrow y $.</p>
<p>那么什么时候$1 \rightarrow x $和$y \rightarrow n $没有交并且他们的并是$[ 1 , n ] $呢?考虑将$1 \rightarrow x $这条路径上的点染色为$0 $,$y \rightarrow n $上的点染色为$1 $,由于边只有从前往后的,因此$[ 1 , y - 1 ] $必然为$0 $,$[ x + 1 , n ] $必然为$1 $.至于中间部分一定是一段一段地跳跃.</p>
<p>我们用dp做中间的跳跃过程,具体地,假设我们已经确定了$y $,现在想要找到$x $,我们现在假设染色的末尾是$( i , i + 1 ) $,也就是$i $染色和$i + 1 $的染色不一样,然后不断向后接上就行.</p>
<p>那么怎么优化这个dp呢?我们找到任意一个$p $,满足$p \nrightarrow p + 1 $,那么$p $和$p + 1 $永远不可能染同种颜色,我们直接以它为断点,自然发现$p $的左右两部分独立.</p>
<p>然后就是这题的细节部分,首先是计数的时候有可能算上了$p \rightarrow p + 1 $这条边,要特判.另外的问题是会发现首尾的位置很特殊,这里的做法是建立$0 $和$n + 1 $两个虚点,向所有点连边.</p>
<p>总之$O ( nm ) $的dp是自然的,而且会发现这个是一个类似连续性的东西,因此想到了在中间找断点中间合并,进一步发现左右两部分无关.</p>
<h3><span id="费用提前延后计算">费用提前/延后计算</span></h3><p>有的时候,我们注意到一个费用是很难及时算到dp数组里的,但是这个费用可能可以早在之前题前算上或之后再补上.</p>
<h5><span id="example122zr提高组十连测day3多">Example1([22zr提高组十连测day3]多)</span></h5><p>首先考虑已知一个序列,如何快速求它最后有几个位置不是$0 $.考虑从后往前枚举,每次判断当前数是否在以前已经枚举到过,如果枚举过就将其$- 1 $并重复判断操作,直到为$0 $或得到一个没有出现过的数.</p>
<p>考虑设计dp状态,判断一个位置是否能是$0 $相当于判断后面的已知序列的$mex $,这个要记入状态中,于是考虑设$dp _{ i , j  } $表示当前到了第$i $个位置,后面的数的$mex - 1 $是$j $的方案数.</p>
<p>但是如果直接这么设会发现,当前$i $的加入有可能会改变$mex $的值,而这个改变是很难处理的,因为如果$i $位置选择了$j + 1 $这个数字,那么$mex $要向上伸展到某一个值,而如果不选择$j + 1 $,也有可能选择一个更大的值后不断落到$j + 1 $,这意味着我们转移时需要枚举补上$j + 1 $这个数字后的$mex $并用刷表法转移.</p>
<p>不妨设这个数字是$k $.如果我们插入一个数字后直接更新当前的答案,可以发现这个$k $是没有办法处理的.所以考虑延后计算费用,即当我们插入的数字并没有引起$mex $的改变的时候,忽略此时带来的组合数贡献(因为这个数字可以任选,可以理解为将其暂时存下来后来需要它的时候再把它乘入答案);当我们引起改变的时候,我们从之前存下来的那些数字中取出一些补全$[ j + 2 , k ] $这些数字.</p>
<p>另外,注意到计算组合数的时候每个数字有两个,没有办法判断当前还剩下哪些数字,不妨直接认为两个相等的数字本质不同,算完答案后再整体除以$2 ^{ n  } $.</p>
<h5><span id="example2022zrnoip十连测day9-消失vanish">Example(2022zrnoip十连测day9-消失(vanish))</span></h5><p>$O ( n ^3 ) $的暴力是显然的:设$f _{ i , j , k  } $表示目前考虑到第$i $个位置,前面还有$j $个A,已经选了$k $个B的方案数,对A也类似做一做,最后枚举中点合并即可.</p>
<p>问题在于如何优化到$n ^2 $.</p>
<p>第一反应是删掉一维,但是这三维好像哪一位都不能删:第二维要累积答案,第三维要最后做合并.但是,注意到第二维和第三维可以合并!换句话说,我们做一个费用提前计算,每次加入A的时候,枚举它接下来要杀掉几个B,那我们接下来就额外多需要一些B.于是我们设$f _{ i , j  } $表示目前考虑到$i $,还需要$j $个B才能凑齐$c _B $个B的答案,就可以实现了.</p>
<p>咋说呢,大概是发现答案和后两维有关,而且注意到后两维之和是不大的,于是考虑把它俩合并起来做费用提前计算.</p>
<h3><span id="建立双射">建立双射</span></h3><h5><span id="example1sdoi2010地精部落">Example1([SDOI2010]地精部落)</span></h5><p>设$f _{ i , j  } $表示长度为$i $,开头为山峰且高度为$j $的方案数;$g _{ i , j  } $表示长度为$i $,开头为山谷且高度为$j $的方案数.注意到这俩显然是一个双射,也就是$f _{ i , j  } = g _{ i , i - j + 1  } $.</p>
<p>首先我们可以插入一个数,假如插入的数是山峰,那原本的所有大于等于$j $的数都向上平移一格,于是自然有:$f _{ i , j  } = \sum _{ k = 1  } ^{ j - 1  } g _{ i - 1 , k  } = \sum _{ k = 1  } ^{ j - 1  } f _{ i - 1 , i - k  } $.</p>
<p>另外,这个式子可以稍微转化为:$f _{ i , j  } = f _{ i - 1 , i - j + 1  } + f _{ i , j - 1  } = g _{ i - 1 , j - 1  } + f _{ i , j - 1  } $.</p>
<p>上式可以这么理解:我们讨论一下$j $和$j - 1 $是否相邻,如果相邻必然是$j $是山峰,$j - 1 $是山谷,不然则交换它俩后也仍然是合法的序列.</p>
<h5><span id="example22019zrtg十连测day1-group">Example2(2019zrtg十连测day1 group)</span></h5><p>首先注意到$2 k \leq n \land nk \leq 10 ^5 $,不难发现$k \leq 500 $.</p>
<p>冷静一下,发现如果我们把所有组长列出来按照经验排序,再把所有组员列出来按照经验排序,然后按照顺序匹对一定是最优的.</p>
<p>再冷静一下,类似卡特兰数,这等价于先把所有人按照经验从小到大排序,然后任意前缀选择的组长数量大于等于组员,枚举这个差量和前面选的组长的总量就可以做到$O ( nk ^2 ) $.当然其实只要控制组长的数量大于等于组员的数量即可.</p>
<p>注意经验相同的话要让想当组长的到前面.</p>
<p>另外当时还推了个性质:都可以的人群中一定存在一个分界点$w $,使得成为组长的经验$\geq w $,成为组员的经验$\leq w $,但是没用上这个性质.</p>
<h5><span id="example3agc056b">Example3(AGC056B)</span></h5><p>双序列计数,考虑把$x $双射到某个东西上.</p>
<p>考虑最后的图一定是个$DAG $,但同层之间没有啥限制,我们不妨假设同层的最左侧是最大值,这样就完成了映射.</p>
<p>设$dp _{ l , r , mx  } $表示只考虑$[ l , r ] $这一段的线段,然后最大值所在位置需要$\geq mx $的答案.转移的话枚举一手最大值扔哪,然后大概能做?</p>
<h3><span id="分维处理">分维处理</span></h3><p>简单来说就是如果问题有两维,我们找到简单的那一维处理.</p>
<h5><span id="example1cf1621gweighted-increasing-subsequences">Example1([CF1621G]Weighted Increasing Subsequences)</span></h5><h2><span id="动态规划的优化">动态规划的优化</span></h2><h3><span id="递进转移">递进转移</span></h3><p>瞎起的名,主要用于大量字符串算法.比如SA中的求height.</p>
<h5><span id="example1">Example1</span></h5><p>有$m $种礼物,每种礼物有无数个(有有限个也能做),$n $个朋友,第$i $个朋友喜欢第$j $个礼物的概率是$p _{ i , j  } $,$\forall i , \sum p _{ i , j  } = 1 $.</p>
<p>现在你可以选$n $件礼物.购买完成后你会按照朋友的编号逐个进行以下操作:如果自己手上的礼物有他喜欢的那一个,就将那个给他.求一种策略,最大化拿到喜爱的礼物的朋友个数的期望值.</p>
<p>$n \leq 3000 , m \leq 300 $.</p>
<p>首先一个显然的想法是:不同礼物对期望的贡献是独立的,也就是和的期望等于期望的和,我们只需要算出每个礼物的贡献即可.进一步地,我们需要求出$g _{ i , j  } $表示第$i $种礼物一共选了$j $个,被拿走的期望个数.然后我们只需要对其做背包就可以了.</p>
<p>那么$g $怎么求呢?这个是简单的,我们设$f _{ i , j  } $表示喜欢第$i $种礼物的人有$j $个的概率,不难发现$g _{ i , j  } = \sum _{ k = 0  } ^n \min \{ j , k \} f _{ i , k  } $.递推式就有$g _{ i , j  } = g _{ i , j - 1  } + \sum _{ k = j  } ^n f _{ i , k  } $.$f $同样是做一个背包.</p>
<p>但是,这两个背包的复杂度都是$O ( n ^2 m ) $的.我们需要对它们进行优化.</p>
<p>先看最后求答案的背包:自然的想法是,不难发现$g _{ i , j  } $满足四边形不等式,而其转移是经典的$k $点最短路,因此可以用决策单调性优化.</p>
<p>但实际上有点多此一举,事实上我们这么考虑:由于$g _i $是上凸函数,它的斜率逐渐减少,那么我们就必然是能选小的就选小的.我们可以设计一个贪心来解决这个问题:记录下来当前每种礼物选了几个,设为$c _i $,每次选当前$g _{ i , c _i + 1  } - g _{ i , c _i  } $最大的那个即可,这可以用堆实现.为啥这个是对的呢?因为$c _i $越大,能有的贡献就越小,不可能出现为了后面的贡献而让前面吃亏的情况,这就可以贪心了.于是第一个背包得到了解决.这里复杂度$O ( n ^2 \log n ) $,不太确定有没有$O ( n ^2 ) $的做法.</p>
<p>但是第二个背包,也就是$f $怎么求呢?我们发现我们没有必要把$g $全都求出来,只需要求目前需要的一部分就可以了,由于$\sum f = 1 $,因此后缀和可以改为前缀和,考虑到每往后推一位是$O ( n ) $的,但是只会往后推总共$O ( n ) $位,因此这里复杂度$O ( n ^2 ) $.</p>
<h5><span id="example2">Example2</span></h5><p>给一个字符串,求一个最大长度$L \leq \frac { n  } { 2  } $,使得前$L $个字符与后$L $个字符循环同构.</p>
<p>不难发现循环同构一定长这样:</p>
<script type="math/tex; mode=display">
ABSBA</script><p>我们枚举$A $的长度,然后就只需要求$B $,设$f _{ i  } $表示字符串去掉开头和结尾的$i $个字符后的border,有$f _{ i - 1  } \leq f _i + 1 $.然后就做完了.</p>
<h3><span id="反向操作">反向操作</span></h3><p>其实本质上是因为,DAG把边反向后仍然是一个DAG,这意味着我们大部分dp都可以进行反向操作.</p>
<h4><span id="example1cf1810g">Example1(CF1810G)</span></h4><p>其实这题有一个很自然的容斥做法,但我们先略过.</p>
<p>一般而言先考虑对于每个$k $暴力做.那怎么维护最大前缀和这个东西呢?如果我们从左往右扫,其实是很难维护的.因为我们无法接受加一维以维护它.更进一步为什么无法维护呢?因为你新加一个元素,它是不会影响前面的前缀和的,只会影响一个.这导致你的取$\max $操作很艰难.但如果!我把这个dp反过来,我设$f _{ i , j  } $表示<strong>从后往前</strong>dp到$i $,当前的最大前缀和是$j $的概率是多少,这个dp的转移极其简单:</p>
<script type="math/tex; mode=display">
P \times f _{ i , j  } \rightarrow f _{ i - 1 , \max \{ 0 , j + a _{ i - 1  } \}  }</script><p>最后在$f _{ 1 , j  } $处乘上$h _j $.</p>
<p>但是这样是$O ( n ^3 ) $的,怎么办呢?</p>
<p>考虑把这个dp反过来!我们设$g _{ i , j  } $表示如果初始只有$f _{ i , j  } = 1 $,dp到最后的答案是多少.于是只需要:</p>
<script type="math/tex; mode=display">
\begin{gathered}
P \times g _{ i - 1 , \max \{ 0 , j + a _{ i - 1  } \}  } \rightarrow g _{ i , j  } \\

\end{gathered}</script><p>我认真考虑过这个$P $应该乘在哪边.实际上确实应该在左边.原因比较简单,因为答案是一串乘法,你不能把这些$P $变成除法.但还有一个问题是,为什么反向的时候没有把这些反向呢?</p>
<p>原因是这类型dp比较特殊,我们要算的其实是一个类似DAG路径上的信息,因此边权无需改变.</p>
<h3><span id="矩阵加速">矩阵加速</span></h3><h4><span id="example1luogup4007小y和恐怖的奴隶主">Example1(luoguP4007小Y和恐怖的奴隶主)</span></h4><p>首先考虑直接将随从的状态压起来,拿组合数分析一下会发现状态数大概小于等于$200 $.也就是说转移矩阵大概是$200 \times 200 $的,设状态数为$S $.</p>
<p>继续考虑,如果直接做的话复杂度是$O ( TS ^3 \log n ) $,过不了.</p>
<p>我们考虑将一个$n $在$w $进制下分解,然后预处理每一位所对应的矩阵,这样复杂度来到了$O ( wS ^3 \log _w n + TS ^2 \log _w n ) $,平衡一下复杂度即可,大概取$w = 4 $会比较优秀.</p>
<h4><span id="example2noi-online3提高组魔法值">Example2([NOI Online#3提高组]魔法值)</span></h4><p>重新定义矩阵乘法:用$\oplus $替换原本的$+ $,然后用邻接矩阵作为转移矩阵.</p>
<p>直接做仍然过不了,不过可以用和上面那个题一样的方法来优化复杂度.</p>
<h4><span id="example3cf-1474f">Example3([CF 1474F])</span></h4><p>首先需要注意到,LIS的起点和终点一定在这条线的拐角处,也就是山谷和山峰处.</p>
<p>LIS的长度是好求的.问题在于计数上.</p>
<p>首先枚举一下LIS的起点和终点,但是接下来似乎怎么dp都需要和值域有关.而且如果从起点走到终点,判断中间具体的方案数,这个东西似乎也不能快速处理,一条线上的似乎也很难捆绑更新.</p>
<p>我们冷静一下,令$f _i = \sum _{ j , a _j = a _i - 1  } f _j $,这个东西一条直线上的位置不能捆绑更新的原因在于,随着我们从左往右走,是需要不断更新后面的$\sum $的值的,这一点很难处理.每次移动需要加入一条横线上的点对应的$f $.</p>
<p>再冷静一下,既然从左到右扫不行,我们能不能考虑从下往上扫呢?考虑设$f _{ i , j  } $表示所有$a _x = i $的$x $中第$j $小的$x $的答案,我们仍然可以从下往上扫.</p>
<p>但是,这么扫的复杂度仍然和值域有关.这怎么办呢?这个加入可规律多了,注意到在经过一个山峰或山谷之前,我们需要处理的点的数量和相对顺序都是恒定的,而它们的转移也之和上一次转移(上一条横线)有关,于是可以直接拿矩阵加速这个过程.</p>
<h4><span id="example4cf-1152f2">Example4([CF 1152F2])</span></h4><p>注意到$m $和$k $很小,这一定是突破口.</p>
<p>又注意到如果$a _{ i + 1  } &gt; a _i $,那么限制很强,反之很弱.而且又要求没有相同的数字.考虑从小到大加入数字,这样每加入一个数字$x + 1 $,我们考虑它只能插入$[ x + 1 - m , x ] $后面,我们直接用一个二进制数$S $表示$[ x + 1 - m , x ] $中的数字是否存在,然后就可以在转移上直接调用$popcount ( S ) $.设$dp _{ i , j , S  } $表示目前考虑完了数字$i $,插入了$j $个数字,存在情况是$S $.直接对它做矩阵加速就可以做到$O ( ( 2 ^m k ) ^3 \log n ) $.</p>
<h4><span id="example5noi2020-美食家">Example5([NOI2020] 美食家)</span></h4><p>设$dp _{ i , j  } $表示第$i $天走到城市$j $的最大收益,一眼矩阵加速.</p>
<p>但是有两个问题需要解决:</p>
<p>第一个问题是,怎么处理美食节.这个没什么,在两个美食节之间做矩阵加速,在美食节节点上特殊处理一下就行.不过这样复杂度要乘上$k $.我们可以一开始就预处理出转移矩阵的二的幂次,然后这里就可以加快速度.</p>
<p>第二个问题是,怎么处理边权.一个自然的想法是拆边,但边很多,拆不过来.怎么办呢?我们可以拆点.将一个点拆成若干个点连起来,对于一条边就找到对应的点连过去就行.</p>
<h3><span id="分步合并">分步合并</span></h3><p>大概是有的时候如果询问比较多,我们可能需要处理前缀/后缀数组然后拼起来答案.</p>
<p>这个时候我们会发现,如果要拼起来答案就要枚举一个区间,但是实际上可以一步一步来.</p>
<h4><span id="example2022qbxt国庆day6permutation">Example([2022qbxt国庆Day6]permutation)</span></h4><p>首先遇到排列先扔平面直角坐标系上.</p>
<p>考虑合法序列一定长什么样,如果我们把这个序列的若干个下降子段拿一个矩阵括起来,那这些矩阵显然横纵坐标都不能相交.</p>
<p>我们设$f _{ l , r  } $表示$a _l $和$a _r $必选的前提下,$[ l , r ] $这个区间的下降子序列个数.</p>
<p>然后,我们考虑枚举删掉点,对着剩下来的序列做dp.</p>
<p>考虑设$dp _{ i , j  } $表示前$i $个点,最大值为$j $的方案数,不难发现最后一个矩阵的最小值一定是$a _{ i  } $.然后$dp _{ a , b  } = \sum _{ i &lt; a , j &lt; b  } dp _{ i , j  } f _{ i + 1 , a  } $.</p>
<p>这个转移是$n ^4 $的,但是这显然是一个前缀和的形式,于是做一下二维前缀和就可以做到$n ^2 $,这样我们就得到了一个复杂度$O ( n ^3 ) $的东西.</p>
<p>继续考虑,由于是多个点,我们考虑维护前缀后缀然后在这个点拼起来.注意到,如果我们想求这个点不选的方案数,那还需要枚举它左右两边选的点,很麻烦,所以我们求一下这个点必选的方案数.这样我们每次需要枚举这个点$i $,它所在矩阵的最左边的点$k $,最右边的点$k $,然后此时的答案为$pre [ j - 1 ] [ a [ k ] - 1 ] \times nxt [ k + 1 ] [ a [ j ] + 1 ] \times f [ j ] [ i ] \times f [ i ] [ k ] $.</p>
<p>冷静一下,这样一步枚举了两边的分界点,所以可能不是很优秀,我们一步一步来.</p>
<p>设$g _{ i , j  } $为接下来我们要选$[ i , j ] $,$i $是矩阵左端点,$j $任意且这两个点必在矩阵中,左右两边的方案数.初始条件$g _{ i , j  } = pre [ i - 1 ] [ a [ j ] - 1 ] \times nxt [ j + 1 ] [ a [ i ] + 1 ] $.</p>
<p>然后我们不断转移右端点,将右端点往里缩,这一步可以使用树状数组优化,最后更新答案即可.</p>
<p>很厉害.</p>
<h3><span id="合并更新">合并更新</span></h3><h4><span id="example2022zrtg十连测day7-zero">Example(2022zrtg十连测day7 Zero)</span></h4><p>设$k = \max \{ i , j \} $,首先可以求出$x , y , z $分别表示:</p>
<ol>
<li><p>$x $:只包含第一行的格子的以$k $为右端点的和为$0 $的最小矩形的左端点$- 1 $.</p>
</li>
<li><p>$y $:只包含第二行的格子的以$k $为右端点的和为$0 $的最小矩形的左端点$- 1 $.</p>
</li>
<li><p>$z $:同时包含两行的格子的以$k $为右端点的和为$0 $的最小矩形的左端点$- 1 $.</p>
</li>
</ol>
<p>那么自然有转移:</p>
<script type="math/tex; mode=display">
\begin{gathered}
f ( i , k ) \leftarrow \max \{ f ( i , k - 1 ) , f ( i , y ) + 1 \} \\
f ( k , j ) \leftarrow \max \{ f ( k - 1 , j ) , f ( x , j ) + 1 \} \\
f ( k , k ) \leftarrow \max \{ f ( k , k - 1 ) , f ( k - 1 , k ) , f ( z , z ) + 1 \} 
\end{gathered}</script><p>转移正确的原因是两维转移顺序无所谓,所以可以乱转移.</p>
<p>冷静一下这个过程,我们先只考虑第一个转移:注意到$f ( i , k ) $关于$i $不降,于是显然当$f ( i , y ) \ne f ( i , k - 1 ) $的时候才会由$f ( i , y ) + 1 $转移过来.我们不妨设$p _i $表示最小的位置满足$f ( i , p _i ) = f ( i , k - 1 ) $,那转移也就是$f ( i , k ) \leftarrow f ( i , k - 1 ) + [ p _i \leq y ] $.并且每进行一次转移,都会满足$p _i \leq y $的$p _i $设为$k $.</p>
<p>也就是说我们需要维护:我们令一个点为它对应的$i $在当前$k $的$f $值,将这个点放到$p _i $位置上.然后我们每次找到$y $并把所有在$y $位置前的点都合并到$k $这个点上,并打一个加法$tag $,这显然可以并查集启发式合并.</p>
<p>把前两个转移这么一起做,然后用二分可以得到两个转移分别的$p _k $.</p>
<p>最后还需要处理一下$f _{ k , k  } $,暴力转移即可.</p>
<p>有一个问题是为啥能想到按照$\max \{ i , j \} $为顺序进行转移,这里是由于转移顺序无区别,我们需要规定一个顺序进行转移,于是考虑到找到较长的那一部分进行转移.</p>
<h3><span id="交换状态和值">交换状态和值</span></h3><p>通常是dp值较小而状态较大的情况,而且二者间通常需要满足单调性.</p>
<h5><span id="example1cf1620f">Example1(CF1620F)</span></h5><p>首先讨论一下最大值最小值之类的不难发现:这题是二分图的充要条件是$\nexists 1 \leq i &lt; j &lt; k \leq n $,$a _i &gt; a _j &gt; a _k $.</p>
<p>然后相当于是整个序列可以拆分成两个上升子序列,一个想法是$dp _{ i , j  } $表示现在做到$i $,另一个上升子序列的终点是$j $,是否合法.然后继续做.但这样复杂度挂掉了.</p>
<p>咋优化咧?注意到dp状态很大而值很小,且显然在$i $一定的情况下,$j $的值越小越容易满足.所以设$dp _i $表示一个上升子序列的终点是$i $,另一个上升子序列的终点最小是多少,这样就可以做了.</p>
<h5><span id="example2agc033d">Example2(AGC033D)</span></h5><p>首先自然的设计是$dp _{ l , r , u , d  } $,然后优化一下就是$O ( n ^4 ) $.然后咋做?</p>
<p>注意到答案不超过$\log $级别,所以设$dp _{ l , r , u , c  } $表示答案为$c $的时候,最大的$d $是多少.然后就$O ( n ^3 \log n ) $.</p>
<h5><span id="example3">Example3</span></h5><p>给定一个序列,两个人博弈.Alice每次可以使序列最左边的数$a _i $减去$[ 1 , a _i ] $中的一个数字,减成$0 $就删掉.Bob可以对最右边的数做类似的操作,不能操作者输.问结果.$( n \leq 2000 ) $</p>
<p>先考虑一个$O ( n ^2 a ^2 ) $的dp,比较显然,因为一个人取数显然要么取$1 $要么全取,又发现不可能两个人一起取一堆(先取的那个人取完就赢了),于是设$dp _{ l , r , x , y  } $表示目前Alice在取第$l $堆,Bob在取第$r $堆,第$l $堆为$x $,第$r $堆为$y $的情况下谁赢.直接转移.</p>
<p>诶,好像优化不动了,无论咋做都要知道当前这堆数字是啥啊,那就一定要把$a $存状态里诶.</p>
<p>能不能再更新一下策略,注意到最后Alice如果要全选的话,剩下的是$1 $还是更大的数好像无所谓.那:如果$a _1 = x $的时候,Alice能赢,那$a _1 = x + 1 $的时候Alice一定能赢.也就是这个东西满足单调性.又冷静一下,如果两个人不断一直持续选$1 $,那最后一定会选到一个人清空堆为止.而且清空堆的那个一定输了.因为如果清空了还赢了,那他一开始就直接清空了.不可能一开始选着选着一个人还没清空堆另一个人就跑了.这个性质启示我们或许后两维可以删掉一维,因为大部分情况下那一维都应该等于$a _l $或$a _r $.</p>
<p>然后咧?另一维怎么去掉呢?</p>
<p>等一下,我们开一个四维的dp存$0 / 1 $是不是太奢侈了?</p>
<p>所以我们把一个状态改为dp的值,设$dp _{ l , r  } $表示当前Alice在$l $,Bob在$r $,Bob还没动$a _r $的前提下,$a _l $至少要是多少Alice才能赢,Bob做一个类似的dp.最后只需要比较$dp _{ 1 , 1  } $和$a _1 $的大小就行.</p>
<p>问题来了,这玩意咋转移啊?</p>
<p>首先,如果当前Alice开始选$l $,Bob开始选$r $,那Alice的获胜条件显然是$dp _{ l , r  } \leq a _r $</p>
<p>如果可以全选(也就是Alice开始选$l + 1 $,Bob开始选$r $的时候Alice能赢),就直接让$dp _{ l , r  } = 1 $.不然,由于清空堆的人要输,所以Alice为了不输,必须要让$dp _{ l , r - 1  } $也满足条件,一个自然的想法是$dp _{ l , r - 1  } + a _r + 1 $,但是这个值好像没有必要:因为Bob并不是只有会不断清空$a _r $的,如果目前的$[ l + 1 , r ] $这个状态,Bob的值已经赢不了了,那我Alice就可以直接把左边清空.所以一旦Bob走到了不能稳赢$[ l + 1 , r ] $的值,Bob就必须全清空,所以如果我们设$g _{ l , r  } $是Bob的$dp $数组,那其实这里应该是$a _r + 1 + dp _{ l , r - 1  } - g _{ l + 1 , r  } $,因为Bob的策略一定是一步一步走到$g _{ l + 1 , r  } $后清空,这个情况我们已经杀了他了.</p>
<h5><span id="example4uoj708">Example4(uoj708)</span></h5><p>自然的想法是$dp _{ i , j  } $表示$i $子树内划分成$j $个连通块是否合法,然后我们发现如果$j $满足条件,那么$j + 2 $一定满足条件(判掉一些边界情况).</p>
<h3><span id="斜率优化">斜率优化</span></h3><p>一般的斜率优化就略了.</p>
<p>值得一提的是,斜率优化还有一种理解方式是:将前面的点当作直线,后面的当作一条平行于$y $轴的直线进行查询.</p>
<h5><span id="example1codechef-tsum2">Example1(Codechef TSUM2)</span></h5><p>点分治+斜率优化,注意需要使用第二种理解方式的斜率优化.</p>
<p>不过第一种应该也可以用.</p>
<h3><span id="wqs二分">WQS二分</span></h3><p>能用WQS二分解决的问题通常形如:需要在$n $个物品中选择恰好$m $个,使得最后答案最大.并且如果令$f _i $表示选了$i $个的最大答案,$f _i $必须是凸函数且是单调不降的.</p>
<p>遇到这种问题,我们通常二分一个数$C $,每选择一个物品就减去$C $的答案.不难发现这样我们一定能逼近$f _m $.</p>
<h3><span id="四边形不等式">四边形不等式</span></h3><p>对于定义在$\mathbb { Z  } $上的二元函数$w $,若对定义域上任意$a , b , c , d ( a \leq b \leq c \leq d ) $都有$w ( a , c ) + w ( b , d ) \leq w ( a , d ) + w ( b , c ) $,也就是交叉小于包含,则称函数$w $满足四边形不等式.如果等式成立,那么我们称其满足四边形恒等式.</p>
<p>不难发现这意味着:$w $所形成的矩阵中的任意一个子矩阵的差分(左上角+右下角-左下角-右上角)都小于等于$0 $.</p>
<p>如果它还满足$\forall 1 \leq l ‘ \leq l \leq r \leq r ‘ \leq n , w ( l , r ) \leq w ( l ‘ , r ‘ ) $，我们称其满足区间包含单调性.</p>
<p>需要声明的一点是:四边形不等式只能处理$\min $型dp的问题,对于$\max $型dp需要取相反数改成$\min $.</p>
<h4><span id="判定性质定理">判定/性质定理</span></h4><h5><span id="定理1">定理1</span></h5><p>若二元函数$w ( x , y ) $满足$w ( a , b ) + w ( a + 1 , b + 1 ) \leq w ( a , b + 1 ) + w ( a + 1 , b ) $.其中$a &lt; a + 1 \leq b &lt; b + 1 $,则$w $满足四边形不等式.</p>
<p>证明:</p>
<p>对于$a + 1 &lt; c $ 有</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( a , c ) + w ( a + 1 , c + 1 ) & \leq w ( a , c + 1 ) + w ( a + 1 , c ) \\
w ( a + 1 , c + 1 ) & \leq w ( a , c + 1 ) + w ( a + 1 , c ) - w ( a , c ) \\

\end{aligned}</script><p>同时有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( a + 1 , c ) + w ( a + 2 , c + 1 ) & \leq w ( a + 1 , c + 1 ) + w ( a + 2 , c ) \\
w ( a + 1 , c ) + w ( a + 2 , c + 1 ) - w ( a + 2 , c ) & \leq w ( a + 1 , c + 1 ) \\

\end{aligned}</script><p>联立得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( a + 1 , c ) + w ( a + 2 , c + 1 ) - w ( a + 2 , c ) & \leq w ( a , c + 1 ) + w ( a + 1 , c ) - w ( a , c ) \\
w ( a + 2 , c + 1 ) + w ( a , c ) & \leq w ( a + 1 , c ) + w ( a + 2 , c + 1 ) 
\end{aligned}</script><p>同理可推至四边形不等式定义式.</p>
<p>事实上,这意味着一个$2 \times 2 $的子矩阵的差分满足条件,那么自然满足四边形不等式,无需推导.</p>
<h5><span id="定理2">定理2</span></h5><p>若$w _1 ( l , r ) , w _2 ( l , r ) $满足四边形不等式(或区间包含单调性),则$\forall c _1 , c _2 \geq 0 $,$( c _1 w _1 + c _2 w _2 ) $满足四边形不等式(或区间包含单调性).</p>
<p>证明显然.</p>
<h5><span id="定理3">定理3</span></h5><p>若$\exists f ( x ) , g ( x ) $使得$w ( l , r ) = f ( r ) - g ( l ) $,则$w $满足四边形恒等式.当$f , g $单调递增时,$w $还满足区间包含单调性.</p>
<p>证明显然.</p>
<h5><span id="定理4">定理4</span></h5><p>设$h $是一个单调递增的下凸函数(一阶导数单调递增),若$w ( l , r ) $满足四边形不等式和区间包含单调性,则复合函数$h ( w ( l , r ) ) $也满足四边形不等式和区间包含单调性.</p>
<p>令$l _1 \leq l _2 \leq r _1 \leq r _2 $,由于$w $满足四边形不等式,于是有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( l _1 , r _1 ) + w ( l _2 , r _2 ) & \leq w ( l _1 , r _2 ) + w ( l _2 , r _1 ) \\
0 & \leq w ( l _1 , r _1 ) - w ( l _2 , r _1 ) & \leq w ( l _1 , r _2 ) - w ( l _2 , r _2 ) 
\end{aligned}</script><p>令$t = w ( l _1 , r _2 ) - w ( l _2 , r _2 ) $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( l _1 , r _1 ) & \leq w ( l _2 , r _1 ) + t \\
w ( l _1 , r _2 ) & = w ( l _2 , r _2 ) + t \\
h ( w ( l _1 , r _1 ) ) - h ( w ( l _2 , r _1 ) ) & \leq h ( w ( l _2 , r _1 ) + t ) - h ( w ( l _2 , r _1 ) ) \\
h ( w ( l _1 , r _2 ) ) - h ( w ( l _2 , r _2 ) ) & = h ( w ( l _2 , r _2 ) + t ) - h ( w ( l _2 , r _2 ) ) 
\end{aligned}</script><p>不妨令$\Delta h ( x ) = h ( x + t ) - h ( x ) $,由于$h $是下凸函数,所以$\Delta h $函数单调递增.</p>
<p>那么也就有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
h ( w ( l _1 , r _1 ) ) - h ( w ( l _2 , r _1 ) ) & \leq \Delta h ( w ( l _2 , r _1 ) ) \\
h ( w ( l _1 , r _2 ) ) - h ( w ( l _2 , r _2 ) ) & = \Delta h ( w ( l _2 , r _2 ) ) 
\end{aligned}</script><p>由于$w ( l _2 , r _1 ) \leq w ( l _2 , r _2 ) $,所以$\Delta h ( w ( l _2 , r _1 ) ) \leq \Delta h ( w ( l _2 , r _2 ) ) $于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
h ( w ( l _1 , r _1 ) ) - h ( w ( l _2 , r _1 ) ) & \leq h ( w ( l _1 , r _2 ) ) - h ( w ( l _2 , r _2 ) ) \\
h ( w ( l _1 , r _1 ) ) + h ( w ( l _2 , r _2 ) ) & \leq h ( w ( l _1 , r _2 ) ) + h ( w ( l _2 , r _1 ) ) 
\end{aligned}</script><p>证毕.</p>
<h5><span id="定理5">定理5</span></h5><p>设$h $是一个下凸函数(一阶导数单调递增),若$w ( l , r ) $满足四边形恒等式和区间包含单调性,则复合函数$h ( w ( l , r ) ) $也满足四边形不等式.</p>
<p>证明类似定理4,因为满足四边形恒等式所以不必用到$h $单调递增的性质.</p>
<h4><span id="决策单调性">决策单调性</span></h4><p>对于形如$f _i = \min _{ 1 \leq j &lt; i  } \{ f _j + w ( j , i ) \} $的状态转移方程,记$p _i $为$f _i $的最优决策.若$p $在$[ 1 , n ] $上单调不降,则称$f $具有决策单调性.</p>
<p>值得一提的是,我们也可以把题目中的$\min $改为$\max $,并且把$+ w $改为$- w $,那么下面的结论同样成立.</p>
<h5><span id="最短路型dp">最短路型dp</span></h5><p>定理：对于形如$f _i = \min _{ 1 \leq j &lt; i  } { f _j + w ( j , i )  } $的状态转移方程,若$w $满足四边形不等式,则$f $有决策单调性.</p>
<p>证明:</p>
<p>$\forall i \in [ 1 , n ] , \forall j \in [ 0 , p _i - 1 ] $,根据$p $的定义,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ p _i  } + w ( p _i , i ) & \leq f _j + w ( j , i ) \\
f _{ p _i  } - f _j & \leq w ( j , i ) - w ( p _i , i ) \\

\end{aligned}</script><p>而对于$k \in [ i + 1 , n ] $,根据$w $的四边形不等式,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w ( j , i ) + w ( p _i , k ) & \leq w ( j , k ) + w ( p _i , i ) \\
w ( j , i ) - w ( p _i , i ) & \leq w ( j , k ) - w ( p _i , k ) \\

\end{aligned}</script><p>联立得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ p _i  } - f _j & \leq w ( j , k ) - w ( p _i , k ) \\
f _{ p _i  } + w ( p _i , k ) & \leq w ( j , k ) + f _j \\

\end{aligned}</script><p>即:$j $对$k $的更新一定不如$p _i $对$k $的更新更优,因此$p _k \in [ p _i , n ] $,因此$f $有决策单调性.</p>
<h6><span id="example1loj6039雅礼集训2017day5珠宝">Example1(LOJ6039[雅礼集训2017Day5]珠宝)</span></h6><p>首先发现代价很小但是物品很多,于是想到按照代价分类.然后同种代价要选肯定由价值从小往大选,这一段可以前缀和做.</p>
<p>于是我们设$f _i $表示价值为$i $的答案,自然有:$f _i = \max \{ f _{ i - kc  } + sum _{ c , k  } \} $.</p>
<p>如果我们把$c $相同的分层,那这显然是一个最短路型dp,其中$w ( i , j ) = sum _{ c , \frac { i - j  } { c  }  } $.</p>
<p>显然这个转移只会让$\mod c $相同的相互转移,于是后面的$w ( i , j ) $可以理解为一段数字的和,自然满足四边形不等式($\max $也满足,因为交叉等于包含).</p>
<h5><span id="k点最短路型dp">k点最短路型dp</span></h5><p>对于形如$f _{ x , j  } = \min _{ i = 1  } ^{ x - 1  } \{ f _{ i , j - 1  } + w _{ i , x  } \} $的状态转移方程,若$w $满足四边形不等式,则$f $有决策单调性.证明同上.</p>
<p>值得一提的是,如果形如$f _x = \min _{ i = 1  } ^{ x - 1  } { w _{ i , x  }  } $,我们也可以看作$k $点最短路型的$k = 1 $的特例.</p>
<h6><span id="example1-基站选址">Example1 基站选址</span></h6><p>令$f ( i , j ) $为在第$j $个位置建造第$i $个基站的代价最小值,那么我们有转移:</p>
<script type="math/tex; mode=display">
f ( i , j ) = \min _{ 1 \leq k < j  } \{ f ( i - 1 , k ) + \sum _{ l = k + 1  } ^{ j - 1  } w _l [ d _l - s _l > d _k ] [ d _l + s _l < d _j ] + c _j \}</script><p>考虑后面的式子,不难发现满足四边形不等式(可能出现包含的时候中间部分贡献一次答案,交叉的时候中间部分不贡献答案的情况),于是可以使用四边形不等式优化.</p>
<p>考虑使用二分维护决策单调性,那么后面的是一个经典的二维数点.但由于维护决策单调性时$d _k $单调递增,更新答案时$d _j $单调递增,于是可以直接使用线段树维护,复杂度$O ( nk \log n ) $.当然也可以直接用一个主席树维护.</p>
<p>也可以考虑分治维护,更加好写,复杂度$O ( nk \log ^2 n ) $.</p>
<p>另外,我们可以再使用WQS二分处理第一维,复杂度$O ( n \log k \log n ) $.</p>
<h6><span id="example2cf-gym-102984f">Example2(CF gym 102984F)</span></h6><p>自然的设计是$f _{ i , j , k  } $表示前$i $个,已经打了$j $个,末尾有连续$k $个的最大价值.但是这个状态都已经超了.</p>
<p>我们可以用一下经典套路,把它转化为$f _{ i , j  } $表示前$i $个,目前打了$j $个且第$i $个没打中,然后每次枚举一个打中了的区间,这样看上去就有了优化的可能性.而如果我们把它改成$f _{ i , j  } $表示前$i $个,目前有$j $个没打中而且第$i $个没打中,这就是经典的k点最短路dp.</p>
<p>接下来我们尝试证明决策单调性:$dp _{ i , j  } = \max \{ dp _{ k , j - 1  } + \sum _{ l = k + 1  } ^{ i - 1  } C _{ l - k  } A _l + P \} $.</p>
<p>令$w ( l , r ) = \sum _{ k = l + 1  } ^{ r - 1  } C _{ k - l  } A _k + P $,接下来我们证明:$w ( l + 1 , r ) + w ( l , r - 1 ) \geq w ( l , r ) + w ( l + 1 , r - 1 ) $即可.讨论一下每个$A $面前的系数就能发现这是成立的.</p>
<h5><span id="区间型dp">区间型dp</span></h5><p>引理:在状态转移方程$f _{ i , j  } = \min _{ i \leq k &lt; j  } \{ f _{ i , k  } + f _{ k + 1 , j  } + w ( i , j ) \} $中(通常$f _{ i , i  } = w ( i , i ) = 0 , f _{ i , i + 1  } = w _{ i , i + 1  } $),如果$w $满足四边形不等式和区间包含单调性,那么$f $也满足四边形不等式.</p>
<p>证明:</p>
<p>只需证明$f _{ i , j  } + f _{ i + 1 , j + 1  } \leq f _{ i , j + 1  } + f _{ i + 1 , j  } $即可,考虑$j - i = 1 $的时候,显然成立.</p>
<p>使用数学归纳,假设当$b - a &lt; k $时,$f $满足四边形不等式,考虑$j - i = k $的情况:</p>
<p>设$f _{ i , j + 1  } $的最优决策为$x $,$f _{ i + 1 , j  } $的最优决策为$y $,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i , j + 1  } + f _{ i + 1 , j  } & = f _{ i , x  } + f _{ x + 1 , j + 1  } + w ( i , j + 1 ) + f _{ i + 1 , y  } + f _{ y + 1 , j  } + w ( i + 1 , j ) \\

\end{aligned}</script><p>对于$f _{ i , j  } $和$f _{ i + 1 , j + 1  } $来说,$x $和$y $不一定最优,所以有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i , j  } + f _{ i + 1 , j + 1  } & \leq f _{ i , x  } + f _{ x + 1 , j  } + w ( i , j ) + f _{ i + 1 , y  } + f _{ y + 1 , j + 1  } + w ( i + 1 , j + 1 ) \\

\end{aligned}</script><p>$w $和归纳假设都可以比较两个式子右边的大小,最终得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i , j  } + f _{ i + 1 , j + 1  } & \leq f _{ i , j + 1  } + f _{ i + 1 , j  } \\

\end{aligned}</script><h6><span id="定理">定理</span></h6><p>记$p _{ i , j  } $为$f _{ i , j  } $的最优决策,若$f $满足四边形不等式,那么对于$\forall i &lt; j ， 有 p _{ i , j - 1  } \leq p _{ i , j  } \leq p _{ i + 1 , j  } \ $.</p>
<p>证明:</p>
<p>记$p = p _{ i , j  } $,$\forall k , i &lt; k \leq p $,因为$f $满足四边形不等式,所以有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i , k  } + f _{ i + 1 , p  } & \leq f _{ i , p  } + f _{ i + 1 , k  } \\
f _{ i + 1 , p  } - f _{ i + 1 , j  } & \leq f _{ i , p  } - f _{ i , k  } 
\end{aligned}</script><p>根据$p $定义,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i , p  } + f _{ p + 1 , j  } & \leq f _{ i , k  } + f _{ k + 1 , j  } \\
f _{ i , p  } - f _{ i , k  } & \leq f _{ k + 1 , j  } - f _{ p + 1 , j  } 
\end{aligned}</script><p>由上两式移项联立,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i + 1 , p  } - f _{ i + 1 , k  } & \leq f _{ k + 1 , j  } - f _{ p + 1 , j  } \\
f _{ i + 1 , p  } + f _{ p + 1 , j  } & \leq f _{ i + 1 , k  } + f _{ k + 1 , j  } \\
f _{ i + 1 , p  } + f _{ p + 1 , j  } + w _{ i + 1 , j  } & \leq f _{ i + 1 , k  } + f _{ k + 1 , j  } + w _{ i + 1 , j  } \\

\end{aligned}</script><p>因此对于$f _{ i + 1 , j  } $,$p $比任意的$k &lt; p $更优,因此$p _{ i + 1 , j  } \geq p _{ i , j  } $,另一方向同理.</p>
<h4><span id="四边形不等式判断凸性">四边形不等式判断凸性</span></h4><p>判断一个函数的凸性只需判断$f ( k ) + f ( k + 2 ) \geq 2 f ( k + 1 ) $,而这只需证明$k $的时候的答案和$k + 2 $时的答案可以调整出两个$k + 1 $的答案(不一定是最小答案)并且这两个$k + 1 $的答案的和小于等于$k $时和$k + 2 $时的答案之和即可.</p>
<h5><span id="example1cf1661f">Example1(CF1661F)</span></h5><p>首先考虑四个点$( a , b , c , d ) $,注意到其一定满足四边形不等式,也就是$w _{ ac  } + w _{ bd  } \geq w _{ ad  } + w _{ bc  } $.</p>
<p>我们现在想证明,设$f _k $为新增$k $个传送机后的减少的答案,我们考虑证明$f _k + f _{ k + 2  } \geq 2 f _{ k + 1  } $.</p>
<p>我们画出$f _k $时选的点和$f _{ k + 2  } $时选的点,注意到我们可以用这两次调整出两个$k + 1 $的答案,并且这两个答案的和小于等于$f _k + f _{ k + 2  } $,于是证明了最小的$f _{ k + 1  } $是更小的.</p>
<p>于是我们可以使用二分,每次二分一个最小增加量$w $,然后对于每一段二分出在这一段中再增加一个传送机的增加量小于等于$w $的最大的传送机数量,然后就可以做了.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="bash游戏">Bash游戏</span></h3><p>$A $和$B $,有$n $颗石子,每次可以取$x $颗,其中$1 \leq x \leq m \ $,求$A $是否能赢.</p>
<p>考虑直接令石子数量为状态,有$SG ( x ) = mex \{ SG ( y ) | \max \{ 0 , x - m \} \leq y \leq x - 1 \} \ $,注意到$SG ( x ) = 0 $当且仅当$x \equiv 0 ( \mod m + 1 ) $.</p>
<p>我们使用数学归纳证明:</p>
<p>当$0 \leq x \leq m $时,显然成立.</p>
<p>而对于$x $,如果$x \equiv 0 ( \mod m + 1 ) \ $,那么集合$S = \{ y \in \mathbb { Z  } | \max \{ 0 , x - m \} \leq y \leq x - 1 \} $中一定$\nexists y $满足$y \equiv 0 ( \mod m + 1 ) \ $.</p>
<p>也就是$\nexists y $满足$SG ( y ) = 0 $,那么$SG ( n ) = 0 $.反之,一定存在.</p>
<h3><span id="nim游戏">Nim游戏</span></h3><p>$A $和$B $,有$n $堆石子,第$i $堆石子有$x _i $个石子.每次可以任选一堆取走若干个石子,最后不能取的人输.求先手是否必胜.</p>
<p>注意到如果$x $均等于$0 $一定先手必败.考虑令$w = x _1 \oplus x _2 \oplus . . . \oplus x _n $($w $即为全游戏的$SG $值),那么先手必败当且仅当$w = 0 \ $.</p>
<p>证明:</p>
<p>只需证明当$w \ne 0 $时一定存在一种方法使得$w = 0 \ $.</p>
<p>考虑$w $的最高位为第$k $位,那么一定存在一个$x _i $的第$k $位为$1 $.将它改为$0 $,然后这个$x _i $的后面几位可以随意更改.</p>
<h4><span id="example1nimk游戏">Example1(Nimk游戏)</span></h4><p>$A $和$B $,有$n $堆石子,第$i $堆石子有$x _i $个石子.每次可以任选不超过$k $堆取走若干个石子,最后不能取的人输.</p>
<p>将$x _i $写成二进制,如果每一位的$1 $的个数均是$k + 1 $的倍数,那么先手一定必败.道理是差不多的.</p>
<h4><span id="example2multi-nim游戏">Example2(Multi-Nim游戏)</span></h4><p>Nim游戏,但是玩家每回合可以将任意一堆石子数量大于等于$2 $的石子堆分成任意两堆不为空的石子堆.没法操作的人输.</p>
<p>本质仍然是SG游戏,我们正常做就行.</p>
<p>$SG ( x ) = mex \{ \{ SG ( v ) | x \rightarrow v \} , \{ SG ( x - i ) \oplus SG ( i ) | 1 \leq i &lt; x \} \} \ $.</p>
<p>找一下规律可以发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
SG ( x ) & = \begin{cases}
x - 1 & x \equiv 0 ( \mod 4 ) \\
x & x \equiv 1 或 2 ( \mod 4 ) \\
x + 1 & x \equiv 3 ( \mod 4 ) \\

\end{cases} \\

\end{aligned}</script><p>不妨设当$x \leq 4 k $时结论成立.</p>
<p>当$x = 4 k + 1 $时,前半部分一定是取遍了$[ 1 , 4 k ] $.</p>
<p>但是一定不存在$a $和$b $满足$a + b = 4 k + 1 $并且$SG ( a ) \oplus SG ( b ) = 4 k + 1 $.讨论一下$a $和$b $在$\mod 4 $意义下的值就会发现不可能.</p>
<p>其他的是同理的.</p>
<h3><span id="sg游戏">SG游戏</span></h3><p>$n $个DAG,每个DAG只有一个起始点,起始点上有一枚棋子.$A $和$B $每次可以选一个图,将上面的棋子沿DAG移动一条边,不能移动的人输.</p>
<p>直接使用$SG ( u ) = mex \{ SG ( v ) | u \rightarrow v \} $.</p>
<p>那么先手必败当且仅当所有DAG初始节点的SG异或起来是$0 $.</p>
<p>首先如果$SG ( u ) = x $,那么$\forall 0 \leq y &lt; x $,$\exists v $使得$u \rightarrow v $且$SG ( v ) = y $.可以发现这就如同Nim游戏了.</p>
<p>但是与Nim游戏不同的是,可能$\exists y &gt; x $,但是仍然可以转移到.</p>
<p>但在这种情况下,我可以继续转移到一个$u ‘ $使得$SG ( u ‘ ) = x $,因此异或值不变.</p>
<h4><span id="example1anti-sg游戏">Example1(Anti-SG游戏)</span></h4><p>SG游戏,但是不能取的人赢.</p>
<p>SJ定理:</p>
<p>先手必胜当且仅当下面两个条件满足一个:</p>
<ol>
<li><p>游戏的SG函数不为$0 $且游戏中某个单一游戏的SG函数大于$1 $.</p>
</li>
<li><p>游戏的SG函数为$0 $且游戏中没有单一游戏的SG函数大于$1 $.</p>
</li>
</ol>
<p>如果没有单一游戏的SG函数大于$1 $,那么显然游戏的SG函数为$0 $就赢了,否则就输了.</p>
<p>而如果SG函数为$0 $且存在某个单一游戏的SG函数大于$1 $,一定是输的.</p>
<p>因为这个情况下,后手先按照正常$SG $游戏压着先手,最后一定会剩两堆一样大于$1 $的,无论你怎么选,对手都可以压着你.如果你把一堆全选了,此时对手就可以把另一堆剩下一个,这样就必输;如果你把这一堆选的只剩下一个,对手就可以把它那一堆全选了,这样就也是必输的.</p>
<h4><span id="example2every-sg">Example2(Every-SG)</span></h4><p>SG游戏,但是每次每个能移动的游戏都必须移动,不能移动任何游戏的人输.</p>
<p>对于每个子游戏,如果先手必胜,先手一定会尽可能多争取时间.</p>
<p>反之,先手一定会尽可能早结束游戏.</p>
<p>在$DAG $上dp的时候除了$SG $我们再加一维表示时间耗费,就可以dp了.</p>
<h4><span id="example25every-sg">Example2.5(Every-SG)</span></h4><p>n个游戏,每个游戏两堆石子,每次可以从大的那堆中取小的那堆石子大小的整数倍的石子.</p>
<p>直接套用Every-SG的做法就行.</p>
<h4><span id="example3nim-on-tree">Example3(Nim on tree)</span></h4><p>一棵有根树两个人,每次可以挑一棵真子树删掉,不能操作者输.</p>
<p>结论:$SG ( u ) = \bigoplus _{ u \rightarrow v  } ( SG ( v ) + 1 ) $.</p>
<p>考虑归纳假设.如果$u $只有$v $一个儿子.那么要么将$v $子树全删,要么删一部分,有:</p>
<script type="math/tex; mode=display">
SG ( u ) = mex ( x | x = 0 \lor 0 \leq x - 1 < SG ( v ) ) = SG ( v ) + 1</script><p>而如果有多个儿子,则每个儿子都相当于是一个SG子游戏,异或起来即可.</p>
<p>另一种理解方式:考虑只有一个儿子的情况,那么相当于这个儿子的所有状态都向终止节点连了一条边,终止节点的$SG $为$0 $,而显然$SG $图中的其它节点的$SG $均要$+ 1 $.</p>
<h4><span id="example4">Example4</span></h4><p>$n $个有根仙人掌,保证所有的环与树的结构只有一个公共点(环只有一条连到环外的边).</p>
<p>两个人分别操作删边,与根不连通的边都被删掉.</p>
<p>结论:奇环$SG = 1 $,偶环$SG = 0 $.</p>
<p>这么考虑:边数为$k $的链的$SG $为$k $.</p>
<p>而拆开奇环后,你得到的两条链奇偶性一定相同,因而不可能得到$1 $.偶环同理,不可能得到$0 $.</p>
<h4><span id="example5">Example5</span></h4><p>无向图,每次删掉一条边以及与根节点不连通的部分,无法操作者输.</p>
<p>考虑Example2.</p>
<p>Fusion定理:将偶环替换成一个新点,奇环替换成一个新点连出去一条边,做边双.对于一个边双,$SG $值只和他边的奇偶性有关.证明大概和上面一样.</p>
<h3><span id="斐波那契博弈">斐波那契博弈</span></h3><p>一个数$N $,两个人轮流令他减去一个数,第一次不能减完,每次减的不能超过上一次的两倍.</p>
<p>不能操作者输.</p>
<p>结论为:当且仅当$N $是斐波那契数时,先手必败.</p>
<p>考虑归纳证明:</p>
<p>先证明当$N $是斐波那契数时必败,不妨假设$N = N _0 + N _1 $,</p>
<p>考虑将$N $看成两堆,因为如果第一次取走了大于$N _1 $颗石子,由于$N _0 \leq N _1 \ $,则后手第二步可以全取走,必败.</p>
<p>并且一开始先手一定要在$N _0 $堆取石子,原因是如果取了大于$N _0 $颗石子,由于$N = N _0 + N _1 \leq 3 N _0 \ $.这样下一步后手就可以全取完.</p>
<p>那么现在先手应该开始取$N _0 $这一堆,如果在这一堆取的过程中,先手一直取得不超过$N _0 $剩下的数,那么根据归纳假设,后手一定可以取走$N _0 $堆的最后一个石子,此时局面变成了只剩$N _1 $颗石子.只要此时先手不能一次取走$N _1 $颗石子,先手就必败.而后手最后一步拿走石子最多会拿走$\frac { 2  } { 3  } N _0 $的石子,但是,$\frac { 4  } { 3  } N _0 &lt; N _1 $,因此一定不可能.</p>
<p>否则,仍然是先手取走了$N _0 $全部石子,又当了先手取$N _1 $的石子.仍然是必败的.</p>
<p>齐肯多夫定理:任意一个正整数都可以被表示成若干不连续的斐波那契数之和.</p>
<p>设$N = \sum _{ i = 1  } ^k f _{ p _i  } $,其中$p _1 &lt; p _2 &lt; p _3 &lt; . . . &lt; p _k \ $,先手取走$f _{ p _1  } \ $.由于$2 f _{ p _1  } &lt; f _{ p _2  } $,因此后手接下来无论如何不可能取得大于等于$f _{ p _2  } \ $,问题转化为一堆大小为$f _{ p _2  } $的石子,此时先手必败.因此原问题的先手必胜.</p>
<h3><span id="二分图博弈">二分图博弈</span></h3><p>给出一张二分图和起点$S $,$A $和$B $轮流操作,每次操作只能选与上一个被选的点相邻的点,且不能选已经选过的点.</p>
<p>考虑二分图的所有最大匹配,如果在所有的最大匹配的方案中都包含了起点$S $,那么先手必胜,否则先手必败.</p>
<p>证明:</p>
<p>如果所有匹配都包含$S $,那么$A $只需要每次走到一个和$S $匹配的点即可.$B $无论如何不可能走到一个不在最大匹配中的点,不然,我们将路径全部取反,就得到了一个最大匹配不变但不包含$S $的点,与假设不符.</p>
<p>而如果存在一个匹配不包含$S $,如果$A $仍然第一步走到一个和$S $匹配的点那么$B $一定能想办法走到一个不在当前$A $选择的最大匹配中的点而在一个不包含$S $的最大匹配中的点,于是$B $必胜.</p>
<h4><span id="example12022qbxt国庆day5c">Example1([2022qbxt国庆Day5]C)</span></h4><p>显然,一个人敢抢金条当且仅当没有人敢抢他的金条.假设$dp _{ S , x  } = 0 / 1 $表示目前集合$S $中的所有人都已经离场了,而目前金条在$x $手中,金条会不会被抢.显然,如果$\exists y $满足$dp _{ S \cup \{ x \} , y  } = 0 $,也就是金条在$y $手里不会被抢,那$x $手中的金条必定会被抢.</p>
<p>将这个抢的过程看作二分图博弈中走到相邻的点的过程,于是这个问题等价于二分图博弈.也就是说,如果二分图博弈先手必胜,那么第一个拿到金条的人一定会被抢.</p>
<p>因此,我们需要找到所有与$S $匹配的可能出现在最大匹配中的边,对应编号最小的那个点,金条最后一定在他手里.(第一步这么走后,一定能构造出)</p>
<p>这个怎么构造呢,我们考虑先跑一遍dinic求最大匹配,然后做一遍tarjan缩点,然后如果$S $和$x $并未匹配,那么我们判断二者是否在一个强连通分量中,如果在,那他们可以被匹配.</p>
<p>至于判断$S $是否一定在其中,只需要先删去$S $,跑dinic,再在残联网络上加上$S $,判断是否有新的增广路.</p>
<h3><span id="树上博弈">树上博弈</span></h3><h4><span id="example1zr23省选10连-day1-clashmas">Example1(zr[23省选10连 day1] Clashmas)</span></h4><p>注意到删点对树形态的影响,考虑重心</p>
<ol>
<li>$n $为奇数,重心为后手点.</li>
</ol>
<p>注意到此时后手一定可以通过一些方式维持重心不变,因此后手必胜.</p>
<ol>
<li>$n $为奇数,重心为先手点.</li>
</ol>
<p>我们不妨设先手是A,后手是B.</p>
<p>考虑一个事实:对于这样一棵树,我们删着删着一定会出现一个时刻使得此时$n $为偶数,有两个重心(比如最后只剩下两个点的时刻),根据(4)和(5)的讨论,此时胜负已分.而且不难注意到此时A变为了实际上的后手.</p>
<p>根据(5),如果B掌控了任意一个重心,那A就输了.因此A必定要使当前局面的两个中心均为A的点.考虑原重心的所有儿子,它们有的是A点,有的是B点.由于树的重心的性质,树的重心的移动一定是一点一点挪的,也就是说第一次出现上面的局面的时候,两个重心必有一个是原重心,另一个是原重心的儿子,接下来A和B就要对于另一个重心能取到哪个儿子做争夺.我们不妨设A的点的集合为$S _A $,B的点的集合为$S _B $.以原重心为根建树,设其所有儿子组成的集合为$S _C $,不难发现A能胜利(也就是让两个重心全都属于他)当且仅当$\sum _{ u \in S _A \cap S _C  } siz _u \geq \sum _{ u \in S _B \cap S _C  } siz _u $.</p>
<p>原因很简单:A和B必然每次都会去杀属于对方的子树中$siz $最大的那棵.由于A有着先手优势,因此只要满足上面的条件,A总能获胜.</p>
<ol>
<li>$n $为偶数,唯一重心,重心为后手点.</li>
</ol>
<p>类似(2)的讨论,最后一定有某个时刻使得此时$n $为偶数,有两个重心(比如最后只剩下两个点的时刻),此时A仍然是先手,根据(5),只要他掌控一个重心就可以获胜.</p>
<p>类似地,不难发现胜利条件等价于(2).</p>
<ol>
<li>$n $为偶数,两个重心,重心均为后手点.</li>
</ol>
<p>注意到此时整棵树分为两个大小相等的部分,因此后手一定可以维持这个场面不动,后手必胜.</p>
<ol>
<li>$n $为偶数,至少有一个重心是先手点.</li>
</ol>
<p>注意到此时先手一定存在一种方式开局,使得重心仍为这个先手点,这样就转化为第一种情况,先手必胜.</p>
<h3><span id="散题">散题</span></h3><h5><span id="problem1csp-s2020贪吃蛇">Problem1([CSP-S2020]贪吃蛇)</span></h5><p>首先注意到,如果一个蛇吃完后还不是最小的蛇,那它一定会吃.因为被吃的蛇是单调不降的,而吃蛇的蛇是单调不增的,因此下一个蛇如果要吃,那一定会比它还小,所以至少会先被吃掉,而那条蛇会被吃掉,它就一定不会选,所以无论如何这条蛇都不会被吃掉.</p>
<p>我们考虑如果吃完后变成了最小的蛇后会怎么样,我们设$f _i $为还剩$i $条蛇的时候能不能吃,那$f _i = 1 $的话,要么$i = 2 $,要么吃完后不是最小的,要么$f _{ i - 1  } = 0 $.</p>
<p>递归做就好了.另外这题需要复杂度$O ( n ) $,需要用几个队列/双端队列维护.</p>
<h5><span id="problem2agc023dgo-home">Problem2([AGC023D]Go Home)</span></h5><p>首先,最后一个人要么是最左边的,要么是最右边的.而显然这两边中人数较少的一个将会是最后一个到家的,那么这个人的目标就是帮助另一边的人尽可能快到家,于是会帮着它投票.以此类推不断递归下去.</p>
<h5><span id="problem3牛客38727e">Problem3(牛客38727E)</span></h5><p>首先考虑如果有人作为第$n - p + 1 $个人复读了,那接下来复读一定不会被惩罚,于是没复读的都会复读,这样这个人就必死.于是最多只会复读$n - p $个人.</p>
<p>继续思考,如果有人作为第$n - 2 p + 1 $个人复读了会怎么样,后面的人也都不会被惩罚了,于是也会继续复读.</p>
<p>以此类推,会发现最后只会有$n \mod p $个人复读,并且一定是前$n \mod p $在一轮内复读完.</p>
<h5><span id="problem4arc155d">Problem4(arc155D)</span></h5><p>考虑直接转移,但是有可能出现在原地转的情况,注意到这种情况我们只需要记录$f _{ i , j  } $表示当前的$G $是$i $,$G $的倍数还剩下$j $个,然后做转移,再进一步发现我们只关心$j $的奇偶性.于是记$f _{ i , 0 / 1  } $即可.</p>
<p>这题给我最大的启示是,我们不能假定让双方共同遵守一个”君子协定”,博弈论最重要的就是博弈,不能说我们最后再选倍数之类的,他的转移路线会变化的.</p>
<h5><span id="problem5">Problem5</span></h5><p>给一个“日”字型图,七条边,每条边有一堆石子.每次可以选任意多条不构成环的边,然后将这些边上的石子堆取走任意多个石子.求先手必胜策略,以及如果每条边的石子数量在$[ l _i , r _i ] $,那么有多少种先手必胜的情况.</p>
<p>考虑将这个图分成三部分,上面三条边,中间一条边,下面三条边.那么这三部分一定不能全选至少两部分,不然会构成环.反之一定构不成环.</p>
<p>先手必败当且仅当,这三部分内部的边上石子均相等,并且所有边异或值为$0 $.</p>
<p>否则,考虑将上部分和下部分三条边先全改成相等的,会修改较大的两条边.</p>
<p>接下来,我们剩了三条边,我们只能选择改其中一条,使得他们仨异或值为$0 $.</p>
<p>换句话说,我们现在有$x _1 , x _2 , x _3 $,我们要将其中一个$x _i $改为$y _i $,其他不变,使得他们仨异或值为$0 $.和Nim游戏类似,假设他们仨异或值的最高位为$k $.那么一定有一个$x _i $的第$k $位为$1 $,将它改为$0 $,后面就可以随意变换.</p>
<p>思路具体怎么想到的呢,可以发现整个图只有三个环,并且这三个环都可以由这几部分组成.接下来就可以每个部分的$[ l _i , r _i ] $求个交,用FWT做一遍异或卷积.数位dp也可以做.</p>
<h5><span id="problem6">Problem6</span></h5><p>Nim游戏,但是每堆石子有一个$K _i $.如果这堆石子剩$x _i $个每次最多取$\lfloor \frac { x _i  } { K _i  } \rfloor $个石子.求先手是否必胜.</p>
<p>结论是</p>
<p>SG(n-\lfloor\frac n k\rfloor,k)&amp;n\ne 0(\mod k)\\</p>
<p>\frac n k&amp;n=0(\mod k)\\</p>
<p>\end{cases}\\</p>
<p>考虑数学归纳就可以证明.</p>
<p>然后我们就只需要对于$k $是否大于$\sqrt { n  } $讨论一下,如果$k &lt; \sqrt { n  } $暴力,最多只会做$\sqrt { n  } $次.否则,意识到此时可以通过求一个区间$[ l , r ] $,满足$\forall x \in [ l , r ] , \lfloor \frac { x  } { k  } \rfloor $均相等,加速一下.这种区间最多只会有$\sqrt { n  } $个.</p>
<h5><span id="problem7">Problem7</span></h5><p>一个数$N $,两个人轮流令他减去一个数,第一次不能减完,每次减的不能超过上一次.不能操作者输.</p>
<p>先手必败当且仅当$N = 2 ^k $,不然,每次选lowbit即可.</p>
<h5><span id="problem8">Problem8</span></h5><p>A和B,有$n $颗石子,每次可以取$x $颗,其中$1 \leq x \leq \lceil \frac { n  } { 2  } \rceil \ $.</p>
<p>仍然令石子数量为状态,注意到$SG ( x ) = 0 $当且仅当$x + 1 = 2 ^k - 1 $,也即$x = 2 ^k - 2 \ $.首先,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n - \lceil \frac { n  } { 2  } \rceil & = \lfloor \frac { n  } { 2  } \rfloor \\
SG ( n ) & = mex \{ SG ( y ) | \lfloor \frac { n  } { 2  } \rfloor & \leq y & \leq n - 1 \} \\

\end{aligned}</script><p>设$n = 2 ^k - w $,其中:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- 2 ^{ k - 1  } + 2 & \leq w & \leq 2 \\
\lfloor \frac { 2 ^k - w  } { 2  } \rfloor & = 2 ^{ k - 1  } - \lfloor \frac { w  } { 2  } \rfloor \\

\end{aligned}</script><p>当$w = 2 $时,原式$= 2 ^{ k - 1  } - 1 &gt; 2 ^{ k - 1  } - 2 \ $.反之.$2 ^k - 2 \leq $原式.因此数学归纳即可证明.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>反演与容斥</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%8F%8D%E6%BC%94%E4%B8%8E%E5%AE%B9%E6%96%A5/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="反演">反演</span></h2><p>假设有两个函数$f $和$g $满足:$f ( n ) = \sum _{ k  } a _{ n , k  } g ( k ) $,已知f求g的过程称为反演.</p>
<p>一般情况下,求反演只能高斯消元,但是有一些形式的反演有巧妙解法.</p>
<h3><span id="子集反演">子集反演</span></h3><p>一般形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( S ) & = \sum _{ T \subseteq S  } g ( T ) \Leftrightarrow g ( S ) & = \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } f ( T ) \\
f ( S ) & = \sum _{ S \subseteq T \subseteq U  } g ( T ) \Leftrightarrow g ( S ) & = \sum _{ S \subseteq T \subseteq U  } ( - 1 ) ^{ | T | - | S |  } f ( T ) 
\end{aligned}</script><p>证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( S ) & = \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } f ( T ) \\
& = ( - 1 ) ^{ | S |  } \sum _{ T \subseteq S  } ( - 1 ) ^{ | T |  } \sum _{ P \subseteq T  } g ( P ) \\
& = ( - 1 ) ^{ | S |  } \sum _{ P \subseteq S  } g ( P ) \sum _{ T \subseteq S / P  } ( - 1 ) ^{ | T | + | P |  } \\
& = ( - 1 ) ^{ | S |  } \sum _{ P \subseteq S  } g ( P ) ( - 1 ) ^{ | P |  } \sum _{ T \subseteq S / P  } ( - 1 ) ^{ | T |  } \\
& = ( - 1 ) ^{ | S |  } \sum _{ P \subseteq S  } g ( P ) [ S & = P ] ( - 1 ) ^{ | P |  } \\
& = g ( S ) 
\end{aligned}</script><p>不难发现,这个子集反演也就相当于在做高维前后缀和.</p>
<h5><span id="example12019zrpzt七连day1d">Example1(2019zrpzt七连day1D)</span></h5><p>根据子集反演,设$cnt _S $为集合为$S $的数量,然后设$f _S = \sum _{ S ‘ \subseteq S  } cnt _{ S ‘  } $,有:$ans = \sum _{ S  } 2 ^{ f _S  } ( - 1 ) ^{ n - | S |  } $.</p>
<p>做一遍高维前缀和就好,复杂度$O ( n 2 ^n ) $,应该也可以用分治FMT无脑做到$O ( n ^2 2 ^n ) $.</p>
<h5><span id="example2有标号dag计数">Example2(有标号DAG计数)</span></h5><p>设$f _{ i , j  } $表示$i $个点,其中有$j $个点的入度数为$0 $的方案数.(等一下,为撒子想到要记度数为$0 $的点咧?因为你要一层一层转移,而在DAG中一层一层的就是零度点.而且说到底,你注意到有编号这个事实其实是很烦的,因为考虑如果一个一个点放上去,就有可能出现放的地方是等价的.而这么一层一层是绝对不会出现等价点的问题的.再说的仔细一点,如果我们把位置空着,然后选出一些放上来,是会出现等价点的问题的.但如果我们先选出来,然后再把边连上就不会.于是我们必须要枚举一些点然后再连到上面去)</p>
<p>这样我们每次枚举删去这$j $个点后,还剩下$k $个零度点.于是自然有:</p>
<script type="math/tex; mode=display">
f _{ i , j  } = \binom { i  } { j  } \sum _{ k = 1  } ^{ i - j  } ( 2 ^j - 1 ) ^k 2 ^{ j ( i - j - k )  } f _{ i - j , k  }</script><p>等一下咧,这复杂度$O ( n ^3 ) $了,这咋办啊?</p>
<p>好像转移优化不太了,因为$k $很难省去(在指数上).但我们注意到我们定义的时候说:$0 $度点的数量恰好为$k $,这个条件好像太强了<del>果然OI就是发现限制太强了就弱一点,发现太弱了就强一点</del>,所以我们想办法把它放弱一点.</p>
<p>一个经典的方法是:我们把定义改为至少$k $个零度点.但是这样转移好像还是不太行:零度点的情况太多了.那我们不妨考虑容斥,因为推导容斥的过程中,永远不害怕情况太多:我们直接考虑所有情况的集合.<del>当然能不能推到最后是另一回事</del>.</p>
<p>我们设$f ( n , S ) $表示$n $个点,其中只有$S $中的点的入度为$0 $;类似定义$g ( n , S ) $表示$n $个点,至少$S $中的点的入度为$0 $.显然我们所求也就是$g ( n , \emptyset ) $,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n , S ) & = 2 ^{ | S | ( n - | S | )  } g ( n - | S | , \emptyset ) \\
g ( n , S ) & = \sum _{ S \subseteq T  } f ( n , T ) 
\end{aligned}</script><p>对第二个式子用子集反演,有:</p>
<script type="math/tex; mode=display">
f ( n , S ) = \sum _{ S \subseteq T  } ( - 1 ) ^{ | T | - | S |  } g ( n , T )</script><p>接下来使用反复带入大法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n , \emptyset ) & = \sum _{ \emptyset \ne T  } f ( n , T ) \\
& = \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } g ( n , S ) \\
& = \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } 2 ^{ | S | ( n - | S | )  } g ( n - | S | , \emptyset ) \\
& = \sum _{ m = 1  } ^n \sum _{ | T | = m  } \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } 2 ^{ | S | ( n - | S | )  } g ( n - | S | , \emptyset ) \\
& = \sum _{ m = 1  } ^n \binom { n  } { m  } \sum _{ k = m  } ^n \binom { n - m  } { k - m  } ( - 1 ) ^{ k - m  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) \\

\end{aligned}</script><p>可以发现:我们在推式子的过程中,将和集合本身有关的性质转化为了只和集合大小有关的式子,于是就简化了大量运算.</p>
<p>接下来我们继续化简:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ m = 1  } ^n \binom { n  } { m  } \sum _{ k = m  } ^n \binom { n - m  } { k - m  } ( - 1 ) ^{ k - m  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) \\
& = \sum _{ k = 1  } ^n \sum _{ m = 1  } ^k \binom { n  } { m  } \binom { n - m  } { k - m  } ( - 1 ) ^{ k - m  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) \\
& = \sum _{ k = 1  } ^n \binom { n  } { k  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) \sum _{ m = 1  } ^k \binom { k  } { m  } ( - 1 ) ^{ k - m  } \\
& = \sum _{ k = 1  } ^n \binom { n  } { k  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) ( ( 1 - 1 ) ^k - ( - 1 ) ^k ) \\
& = \sum _{ k = 1  } ^n \binom { n  } { k  } 2 ^{ k ( n - k )  } g ( n - k , \emptyset ) ( - 1 ) ^{ k - 1  } \\

\end{aligned}</script><p>注意到复杂度已经降到$O ( n ^2 ) $了.</p>
<p>上面是从集合的角度一步步分析得到的.但如果你直接从容斥的角度考虑,忽略掉那个$( - 1 ) ^{ k - 1  } $,把它当成一个可以数学归纳出来的容斥系数,那么这个式子会得到一个很简单的理解方式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _n & = \sum _{ k = 1  } ^n \binom { n  } { k  } ( - 1 ) ^{ k - 1  } 2 ^{ k ( n - k )  } f _{ n - k  } \\

\end{aligned}</script><p>也就是直接设,然后钦定其有至少$j $个,然后配容斥系数.</p>
<h3><span id="二项式反演">二项式反演</span></h3><p>一般形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ k = 0  } ^n C _n ^k g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = 0  } ^n ( - 1 ) ^{ n - k  } C _n ^k f ( k ) \\
f ( n ) & = \sum _{ k = 0  } ^n ( - 1 ) ^k \binom { n  } { k  } g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = 0  } ^n ( - 1 ) ^k \binom { n  } { k  } f ( k ) \\
f ( n ) & = \sum _{ k = n  } ^N C _k ^n g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = n  } ^N ( - 1 ) ^{ k - n  } C _k ^n f ( k ) \\
f ( n ) & = \sum _{ k = n  } ^N ( - 1 ) ^k \binom { k  } { n  } g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = n  } ^N ( - 1 ) ^k \binom { k  } { n  } f ( k ) \\

\end{aligned}</script><p>显然以$( - 1 ) ^n g ( n ) $代替$g ( n ) $即可从第一个式子推导第二个式子,下面证明第一个式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ k = 0  } ^n ( - 1 ) ^{ n - k  } C _n ^k f ( k ) \\
& = \sum _{ m = 0  } ^n \sum _{ k = 0  } ^{ n - m  } ( - 1 ) ^k C _{ n - m  } ^k C _n ^m g ( m ) \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^k C _n ^k \sum _{ m = 0  } ^{ n - k  } C _{ n - k  } ^m g ( m ) \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^k C _n ^k f ( n - k ) \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^{ n - k  } C _n ^k f ( k ) \\

\end{aligned}</script><h5><span id="example1错排问题">Example1(错排问题)</span></h5><p>$n $个有编号的人站成一排,求他们都没有站到自己编号对应位置的方案数.</p>
<p>设$f ( n ) $为$n $个人随便站的方案数,$g ( n ) $为$n $个人都站错的方案数.</p>
<p>如果知道$g $的表达式,我们可以通过枚举有多少人站错位置来得到$f $,即:$f ( n ) = \sum _{ k = 0  } ^n C _n ^k g ( k ) $.</p>
<p>显然就是一个二项式反演,$g ( n ) = \sum _{ k = 0  } ^n ( - 1 ) ^{ n - k  } C _n ^k f ( k ) = \sum _{ k = 0  } ^n ( - 1 ) ^{ n - k  } C _n ^k k ! $.</p>
<p>值得一提的是,我们再观察一下最后得到的错排公式并进行一定的化简,可以得到:$g ( n ) = n ! \sum _{ 0 \leq k \leq n  } \cfrac { ( - 1 ) ^k  } { k !  } \ $.</p>
<p>不难发现$n ! $的后面形如$e ^{ - 1  } $的泰勒展开,我们考虑直接将泰勒展开的公式带入,可以得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \cfrac { n !  } { e  } - n ! \sum _{ k > n  } \cfrac { ( - 1 ) ^k  } { k !  } \\
& = \cfrac { n !  } { e  } - \cfrac { ( - 1 ) ^{ n + 1  }  } { n + 1  } \sum _{ 0 \leq k  } ( - 1 ) ^k \cfrac { ( n + 1 ) !  } { ( k + n + 1 ) !  } 
\end{aligned}</script><p>用一些我不会的方法分析误差,会发现后面的项所能带来的误差很小,于是有$g ( n ) = \lfloor \cfrac { n !  } { e  } + \cfrac { 1  } { 2  } \rfloor + [ n = 0 ] $.</p>
<p>另外,观察$g $关于$f $的表达式,不难求出$g $的递推式:$g ( n ) = ng ( n - 1 ) + ( - 1 ) ^n $.</p>
<p>下面证明$g _n = ( n - 1 ) ( g _{ n - 1  } + g _{ n - 2  } ) $,事实上,右边等于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( n - 1 ) ( g _{ n - 1  } + g _{ n - 2  } ) \\
& = ( - 1 ) ^{ n - 1  } ( n - 1 ) + ( n - 1 ) \sum _{ k = 0  } ^{ n - 2  } ( ( n - 1 ) ! \frac { ( - 1 ) ^k  } { k !  } + ( n - 2 ) ! \frac { ( - 1 ) ^k  } { k !  } ) \\
& = n ! \sum _{ k = 0  } ^{ n - 2  } \frac { ( - 1 ) ^k  } { k !  } - ( n - 1 ) ( - 1 ) ^n \\

\end{aligned}</script><h5><span id="example2cf1750g">Example2(CF1750G)</span></h5><p>如果没有字典序限制就是经典的二项式反演:考虑能被分为$k $段,说明有$n - k $个位置和前一个位置是大一的关系.我们钦定这些位置即可.</p>
<p>而有字典序限制也很经典,枚举LCP,枚举下一个位置,这个时候值域被分为若干个区间,假设剩了$x $个数字,$y $个区间,那么钦定$j $对的方案是$\binom { x - y  } { j  } ( x - j ) ! $.然后要乘上前面已经有了的,也就是乘上形如$( 1 + z ) ^k $.这样复杂度$O ( n ^4 ) $.</p>
<p>这种问题通常LCP后的下一个位置都可以规避,这里你发现不同的取值只会让后面的$x , y , k $有$O ( 1 ) $种不同的取值,因此不用枚举.这样就是$O ( n ^3 ) $.但是那个多项式乘法也可以规避,考虑最后的答案形如$\sum ( 1 + z ) ^k P _k ( x ) $,我们考虑写成$P _{ n - 1  } ( z ) + = ( 1 + z ) P _n ( z ) $,然后不断这么做,就只需要$O ( n ^2 ) $.</p>
<h5><span id="example3cf1228e">Example3(CF1228E)</span></h5><p>不妨设至多有$i $行$j $列最小值为$1 $的答案是$f _{ i , j  } $,恰好有$i $行$j $列最小值为$1 $的答案是$g _{ i , j  } $,注意到:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>令$h _{ n , m  } = \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ n , j  } \ $,则$f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } h _{ i , m  } \ $,而$f _{ n , m  } = k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $.做两次二项式反演得到$g $.</p>
<p>写到这里发现一个问题(其实是我发现问题后把上面原本写错的给改了),为啥$f _{ n , m  } \ne \binom { N  } { n  } \binom { M  } { m  } k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $呢?我们写成子集反演形式看看:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ S , T  } & = \sum _{ s \subseteq S  } \sum _{ t \subseteq T  } g _{ s , t  } \\
f _{ S , T  } & = \sum _{ s \subseteq S  } h _{ s , T  } \\
h _{ S , T  } & = \sum _{ t \subseteq T  } g _{ S , t  } \\

\end{aligned}</script><p>做子集反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ S , T  } & = k ^{ | S | \times | T |  } ( k - 1 ) ^{ NM - | S | | T |  } \\
h _{ s , T  } & = \sum _{ S \subseteq s  } ( - 1 ) ^{ | s | - | S |  } f _{ S , T  } \\
g _{ s , t  } & = \sum _{ T \subseteq t  } ( - 1 ) ^{ | t | - | T |  } h _{ s , T  } 
\end{aligned}</script><p>把集合改成集合大小就可以发现问题所在:</p>
<p>换句话说,$g _{ n , m  } $本身就包含了所有$| S | = n , | T | = m $的情况的和,并且在组合数$\binom { m  } { j  } $那里就找到了唯一确定的$f _{ s , t  } $,因此$f _{ n , m  } $是唯一确定的.这意味着这里$f $的$n , m $并非集合之和,而是已经确定的集合的大小.</p>
<p>啥?这和我平常接触的二项式反演不一样啊?不说别的,第四题(BZOJ2839)的式子是这样的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _i & = 2 ^{ 2 ^{ n - i  }  } \binom { n  } { i  } \\
f _k & = \sum _{ i = k  } ^n \binom { i  } { k  } g _i \\
g _k & = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \binom { i  } { k  } f _i 
\end{aligned}</script><p>冷静一下,二项式反演的公式肯定没错,那也就一定是下面这几句出现了问题:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>这个问题其实非常显然,我们的$g _{ i , j  } $定义为所有$| S | = i , | T | = j $的答案之和.$f $也是这么定义的,那这个式子就是错的,应该写成:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { N - i  } { n - i  } \sum _{ j = 0  } ^m \binom { M - j  } { m - j  } g _{ i , j  }</script><p>这样才是在不确定的那些行列中选择组合数,而不是在确定的那些行列中选.</p>
<p>但这样又有一个问题,就是这个题的特殊性,这个题要求$g _{ N , M  } $,那此时$g $怎么定义不应该是一样的吗?</p>
<p>当然不一样,二项式反演讲究统一性,所有的定义必须遵循一个统一的原则,不然如果什么样子的函数都能反演,那一般的反演就不是一个需要解方程才能完成的东西了.</p>
<p>回到第四题,再看一遍这个式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _k & = \sum _{ i = k  } ^n \binom { i  } { k  } g _i \\

\end{aligned}</script><p>这个定义式就非常良性,$g $是已知的集合,$f $是未知的集合.我们乘上组合数就可以得到对于$f $来说已知的集合.因此这个就非常正确.</p>
<p>回到这个题上,为什么我们最后把$f $的定义改成$f _{ n , m  } = k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $就对了呢?</p>
<p>再看看这个式子:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>这个式子的右边在干这样一件事:那就是在已知$n $行$m $列的集合的前提下,从中选出$i $行$j $列并求$g $.那么你从哪知道的$n $行$m $列呢?你得组合数啊!</p>
<p>所以,实际上的$f $是这样的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ n , m  } & = \binom { N  } { n  } \binom { M  } { m  } \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  } \\
f _{ n , m  } & = \binom { N  } { n  } \binom { M  } { m  } k ^{ nm  } ( k - 1 ) ^{ NM - nm  } 
\end{aligned}</script><p>好麻烦啊,能不能避免这种需要进一步思考集合意义的问题呢?</p>
<p>考虑二项式反演的第二个形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ k = n  } ^N C _n ^k g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = n  } ^N ( - 1 ) ^{ k - n  } C _n ^k f ( k ) \\

\end{aligned}</script><p>不难发现这个式子无论怎么写,前后都一定是从已知集合中选东西.绝对不会出现上面的问题.</p>
<p>因此,我们重新写一下这个题的相关式子,考虑直接正难则反,设$f ‘ _{ i , j  } $为至少有$i $行$j $列不满足条件的方案数,自然有$f ‘ _{ i , j  } = f _{ N - i , M - j  } $.你发现此时一定有:</p>
<script type="math/tex; mode=display">
f ' _{ n , m  } = \sum _{ i = n  } ^N \binom { i  } { n  } \sum _{ j = m  } ^M \binom { j  } { m  } g ' _{ i , j  }</script><p>最后答案就是$g ‘ _{ 0 , 0  } $.</p>
<h3><span id="斯特林反演">斯特林反演</span></h3><p>一般形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] ( - 1 ) ^{ n - k  } f ( k ) \\
f ( n ) & = \sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} ( - 1 ) ^{ n - k  } f ( k ) \\
f ( m ) & = \sum _{ n = m  } ^M ( - 1 ) ^{ m - n  } \left [ \begin{array}
{ c  } n \\
m 
\end{array} \right ] g ( n ) \Leftrightarrow g ( m ) & = \sum _{ k = 0  } ^M \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} f ( k ) \\
f ( m ) & = \sum _{ n = m  } ^M ( - 1 ) ^{ m - n  } \left \{ \begin{array}
{ c  } n \\
m 
\end{array} \right \} g ( n ) \Leftrightarrow g ( m ) & = \sum _{ k = 0  } ^M \left [ \begin{array}
{ c  } k \\
m 
\end{array} \right ] f ( k ) \\

\end{aligned}</script><p>考虑第一类斯特林数和第二类斯特林数的对称性,只需证明第一个和第三个式子即可.</p>
<p>反转公式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} ( - 1 ) ^{ n - k  } & = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} \left [ \begin{array}
{ c  } k \\
m 
\end{array} \right ] ( - 1 ) ^{ n - k  } & = [ m & = n ] \\

\end{aligned}</script><p>第一个式子的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ m = 0  } ^n [ m & = n ] g ( m ) \\
& = \sum _{ m = 0  } ^n \sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} ( - 1 ) ^{ n - k  } g ( m ) \\
& = \sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] ( - 1 ) ^{ n - k  } \sum _{ m = 0  } ^k \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} g ( m ) & = \sum _{ k = 0  } ^n \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] ( - 1 ) ^{ n - k  } f ( k ) \\

\end{aligned}</script><p>第三个式子的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( m ) & = \sum _{ n = m  } ^M [ n & = m ] g ( n ) \\
& = \sum _{ n = m  } ^M \sum _{ k = 0  } ^M \left [ \begin{array}
{ c  } n \\
k 
\end{array} \right ] \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} ( - 1 ) ^{ n - k  } g ( n ) \\
& = \sum _{ k = 0  } ^M \left \{ \begin{array}
{ c  } k \\
m 
\end{array} \right \} f ( k ) \\

\end{aligned}</script><h3><span id="莫比乌斯反演">莫比乌斯反演</span></h3><p>一般形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ d | n  } g ( d ) \Leftrightarrow g ( n ) & = \sum _{ d | n  } \mu ( \frac { n  } { d  } ) f ( d ) \\
f ( n ) & = \sum _{ n | d  } g ( d ) \Leftrightarrow g ( n ) & = \sum _{ n | d  } \mu ( \frac { d  } { n  } ) f ( d ) \\
f ( x ) & = \sum _{ 1 \leq d  } g ( d ) \Leftrightarrow g ( x ) & = \sum _{ 1 \leq d  } f ( \cfrac { x  } { d  } ) \mu ( d ) 
\end{aligned}</script><p>第一个式子的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ m | n  } [ \frac { n  } { m  } & = 1 ] g ( m ) \\
& = \sum _{ m | n  } \sum _{ d | \frac { n  } { m  }  } \mu ( d ) g ( m ) \\

\end{aligned}</script><p>注意到$[ d | \frac { n  } { m  } ] = [ md | n ] = [ m | \frac { n  } { d  } ] \ $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ d | n  } \mu ( d ) \sum _{ m | \frac { n  } { d  }  } g ( m ) \\
& = \sum _{ d | n  } \mu ( d ) f ( \frac { n  } { d  } ) \\
& = \sum _{ d | n  } \mu ( \frac { n  } { d  } ) f ( d ) \\

\end{aligned}</script><p>第二个式子的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ n | d  } [ \frac { d  } { n  } & = 1 ] g ( d ) \\
& = \sum _{ n | d  } \sum _{ c | \frac { d  } { n  }  } \mu ( c ) g ( d ) \\
& = \sum _{ c | d  } \sum _{ nc | d  } \mu ( c ) g ( d ) \\
& = \sum _{ c  } \mu ( c ) f ( nc ) \\
& = \sum _{ n | d  } \mu ( \frac { d  } { n  } ) f ( d ) \\

\end{aligned}</script><p>第三个式子的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq d  } g ( \cfrac { x  } { d  } ) \mu ( d ) & = \sum _{ d \geq 1  } \mu ( d ) \sum _{ k \geq 1  } f ( \cfrac { x  } { kd  } ) \\
& = \sum _{ m \geq 1  } f ( \cfrac { x  } { m  } ) \sum _{ d , k \geq 1  } [ m & = dk ] \mu ( d ) \\
& = \sum _{ m \geq 1  } f ( \cfrac { x  } { m  } ) \sum _{ d | m  } \mu ( d ) \\
& = f ( x ) 
\end{aligned}</script><h4><span id="example1">Example1</span></h4><p>求长度为$n $且仅包含小写英文字母且循环节长度恰为$n $的字符串个数.</p>
<p>不妨设$f ( n ) $表示长度为$n $的字符串个数,$g ( n ) $表示长度为$n $且循环节长度恰为$n $的字符串个数.</p>
<p>有$f ( n ) = \sum _{ d | n  } g ( d ) $,根据莫比乌斯反演,$g ( n ) = \sum _{ d | n  } \mu ( \cfrac { n  } { d  } ) f ( d ) $.</p>
<h4><span id="example2">Example2</span></h4><p>求$\sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m gcd ( i , j ) \ $.</p>
<p>我们通过这个题来讲一下推导技巧.</p>
<h5><span id="增加枚举量">增加枚举量</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m gcd ( i , j ) & = \sum _{ i = 1  } ^n \sum _{ j = 1  } ^m id [ gcd ( i , j ) ] \\
& = \sum _{ i = 1  } ^n \sum _{ j = 1  } ^m \sum _{ d | gcd ( i , j )  } \varphi ( d ) \\

\end{aligned}</script><h5><span id="交换枚举顺序">交换枚举顺序</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n \sum _{ j = 1  } ^m \sum _{ d | gcd ( i , j )  } \varphi ( d ) & = \sum _{ d = 1  } ^{ \min ( n , m )  } \sum ^{ \lfloor \frac { n  } { d  } \rfloor  } _{ i = 1  } \sum ^{ \lfloor \frac { m  } { d  } \rfloor  } _{ j = 1  } \varphi ( d ) \\

\end{aligned}</script><h5><span id="分离无关变量">分离无关变量</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ d = 1  } ^{ \min ( n , m )  } \sum ^{ \lfloor \frac { n  } { d  } \rfloor  } _{ i = 1  } \sum ^{ \lfloor \frac { m  } { d  } \rfloor  } _{ j = 1  } \varphi ( d ) & = \sum ^{ \min ( n , m )  } _{ d = 1  } \varphi ( d ) \times \lfloor \cfrac { n  } { d  } \rfloor \times \lfloor \cfrac { m  } { d  } \rfloor \\

\end{aligned}</script><p>考虑使用数论分块,只需处理出$\varphi ( d ) $的前缀和即可在$O ( \sqrt { n  } + \sqrt { m  } ) $的复杂度解决此问题.</p>
<h4><span id="example3">Example3</span></h4><p>求$\sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m [ gcd ( i , j ) = 1 ] \ $.</p>
<p>和上一道题几乎没区别,唯一不同的是需要处理的函数从$id $变为了$\epsilon $.</p>
<h4><span id="example4">Example4</span></h4><p>求$\sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m [ gcd ( i , j ) \in prime ] \ $.</p>
<p>考虑增加枚举量,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m [ gcd ( i , j ) \in prime ] & = \sum _{ i = 1  } ^{ n  } \sum _{ j = 1  } ^m \sum _{ p \in prime  } [ gcd ( i , j ) & = p ] \\
& = \sum _{ p \in prime  } \sum ^{ \lfloor \frac { n  } { d  } \rfloor  } _{ i = 1  } \sum ^{ \lfloor \frac { m  } { d  } \rfloor  } _{ j = 1  } [ gcd ( pi , pj ) & = p ] \\
& = \sum _{ p \in prime  } \sum ^{ \lfloor \frac { n  } { p  } \rfloor  } _{ i = 1  } \sum ^{ \lfloor \frac { m  } { p  } \rfloor  } _{ j = 1  } [ gcd ( i , j ) & = 1 ] \\
& = \sum _{ p \in prime  } \sum _{ d = 1  } ^{ \min ( \lfloor \frac { m  } { p  } \rfloor , \lfloor \frac { n  } { p  } \rfloor )  } \mu ( d ) \lfloor \cfrac { n  } { pd  } \rfloor \lfloor \cfrac { m  } { pd  } \rfloor \\

\end{aligned}</script><p>于是转化为上一道题,但复杂度仍不可接受.</p>
<h5><span id="换元">换元</span></h5><p>考虑设$x = pd $,则变为$\sum _{ x = 1  } ^{ \min ( n , m )  } \sum _{ p \in prime \land p | x  } \mu ( \frac { x  } { p  } ) \lfloor \frac { n  } { x  } \rfloor \lfloor \frac { m  } { x  } \rfloor \ $.</p>
<h4><span id="example5ur-5怎样跑得更快">Example5([UR #5]怎样跑得更快)</span></h4><p>首先先考虑去掉$lcm $使得式子中只有$i , j , \gcd ( i , j ) $.</p>
<p>显然可以构造函数$f ( x ) = x ^{ c - d  } , g ( x ) = x ^d , h ( x ) = x ^d \ $,然后将题目转化为$\sum _{ j = 1  } ^n f ( gcd ( i , j ) ) g ( i ) h ( j ) x _j \equiv b _i ( \mod p ) \ $.</p>
<p>$\gcd ( i , j ) $很难处理,于是考虑用莫比乌斯反演消掉.</p>
<p>可以求出$f _r ( n ) $使得$f ( n ) = \sum _{ d | n  } f _r ( d ) \ $,也即$f _r ( n ) = \sum _{ d | n  } \mu ( \cfrac { n  } { d  } ) f ( d ) $.</p>
<p>则原式即:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ j = 1  } ^n \sum _{ d  } [ d | i ] [ d | j ] f _r ( d ) g ( i ) h ( j ) x _j & \equiv b _i ( \mod p ) \\
\sum _{ d | i  } f _r ( d ) \sum _{ j = 1  } ^n [ d | j ] h ( j ) x _j & \equiv \frac { b _i  } { g ( i )  } ( \mod p ) \\

\end{aligned}</script><p>令$z _d = \sum _{ j = 1  } ^n [ d | j ] h ( j ) x _j \ $,有$\sum _{ d | i  } f _r ( d ) z _d \equiv \frac { b _i  } { g ( i )  } ( \mod p ) \ $.</p>
<p>这个也是一个莫比乌斯反演的形式,我们可以求出左边,进而求出$z _d $.</p>
<p>而$z _d = \sum _{ j = 1  } ^n [ d | j ] h ( j ) x _j = \sum _{ d | j  } ^n h ( j ) x _j $,可以再次使用莫比乌斯反演求出$h ( j ) x _j $,进而求$x _j $.</p>
<p>无解条件显然是$g _i = 0 \land x _i \ne 0 $.</p>
<p>简而言之,这个题的步骤就是:</p>
<ol>
<li><p>通过增加枚举量消掉$lcm $以及$\gcd $这些难以处理的项.</p>
</li>
<li><p>将$i $与$j $尽量分到式子两边.</p>
</li>
<li><p>先通过莫比乌斯反演求出一些值,再通过这些值反推.</p>
</li>
</ol>
<h4><span id="example6cf1566hxor-quiz">Example6([CF1566H]Xor-quiz)</span></h4><p>首先注意到一个重要的事实:我们只需要询问所有$\mu ( x ) \ne 0 $的$x $,就可以得到全部信息,而这些$x $的数量是完全足够我们全部询问一遍的.</p>
<p>注意到一个事实是,异或是模意义下的按位加减法,这意味着我们可以对异或做莫比乌斯反演.事实上,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \bigoplus _{ i \in A  } i [ \gcd ( i , n ) & = 1 ] \\
& = \bigoplus _{ i \in A  } ^c i \sum _{ d | i , d | n  } \mu ( d ) \\

\end{aligned}</script><p>注意到$\sum _{ d | i  } \mu ( d ) = \bigoplus _{ d | i  } | \mu ( d ) | $,于是:</p>
<script type="math/tex; mode=display">
f ( n ) = \bigoplus _{ d | n  } | \mu ( d ) | \bigoplus _{ d | i , i \in A  } i</script><p>接下来只要我们形式上写作$n $,我们就默认$\mu ( n ) \ne 0 $,又令$g ( n ) = \bigoplus _{ n | i , i \in A  } i $,此时自然有$f ( n ) = \bigoplus _{ d | n  } g ( d ) \ $.这是一个经典的莫反形式,我们再反演回去就可以得到$g ( n ) = \bigoplus _{ d | n  } \mu ( \frac { n  } { d  } ) f ( d ) = \bigoplus _{ d | n  } f ( d ) $,也就是说我们可以求得所有的$g ( n ) $,也就是这个集合中所有是$n $的倍数的异或值.</p>
<p>注意一个事实:如果我们设$w ( m ) = \prod _{ p \in prime , p | m  } p $,那么我们就可以按照$w $的不同将所有数划分为若干个集合,每个集合在每次查询的时候要么都不被异或要么都被异或.这也告诉我们:我们只能求出每个集合中被选进$A $的这些数的异或值,而不能分开得知它们.接下来考虑如何知道这个,不妨设$S ( n ) = \{ x | w ( x ) = n \} $,又设$h ( n ) = \bigoplus _{ i \in A , i \in S ( n )  } i $.考虑用$g ( n ) $表示$h ( n ) $,我们有:</p>
<script type="math/tex; mode=display">
g ( n ) = \bigoplus _{ n | d  } | \mu ( \frac { d  } { n  } ) | h ( d )</script><p>反演,有$h ( n ) = \bigoplus _{ n | d  } g ( d ) \ $.于是我们可以求得所有的$h ( n ) $了.</p>
<p>现在的问题在于:对于数$n , \mu ( n ) \ne 0 $,我们要在$S ( n ) $中选出若干个数,使得它们的异或和为$h ( n ) $,并且选出的数字总共有$| A | $个.</p>
<p>然后是根据数据随机,拿每个集合的线性基随机一下自由元,然后对着构造.多随机几次,最后做背包.</p>
<h3><span id="多重子集反演">多重子集反演</span></h3><p>设$S $为可重集合.</p>
<p>一般形式:定义$\mu ( S ) $,若$S $包含重复元素则为$0 $,否则为$( - 1 ) ^{ | S |  } $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( S ) & = \sum _{ T \subseteq S  } g ( T ) \Leftrightarrow g ( S ) & = \sum _{ T \subseteq S  } \mu ( S - T ) f ( T ) \\

\end{aligned}</script><p>证明:</p>
<p>根据莫比乌斯反演,这个是显然的.</p>
<h3><span id="单位根反演离散傅里叶变换">单位根反演(离散傅里叶变换)</span></h3><p>一般形式($\omega _n = e ^{ \frac { 2 \pi i  } { n  }  } $):</p>
<script type="math/tex; mode=display">
f _m = \sum _{ k = 0  } ^{ n - 1  } \omega _n ^{ mk  } g _k \Leftrightarrow g _m = \frac { 1  } { n  } \sum _{ k = 0  } ^{ n - 1  } \omega _n ^{ - mk  } f _k</script><p>可以发现这个式子其实就是FFT时所做的DFT与IDFT.</p>
<h3><span id="一般情况">一般情况</span></h3><p>考虑莫比乌斯反演的过程,我们实际上使用的是$[ m | n ] \sum _{ d | \frac { n  } { m  }  } \mu ( d ) = [ n = m ] \ $.</p>
<p>令$c = md $,左边$= \sum _{ c | n  } [ m | c ] \mu ( \frac { c  } { m  } ) = \sum ( [ c | n ] ) ( [ m | c ] \mu ( \frac { c  } { m  } ) ) \ $.</p>
<p>令$A _{ c , n  } = [ c | n ] $,$B _{ m , c  } = [ m | c ] \mu ( \frac { c  } { m  } ) \ $,那我们有$BA = I $.</p>
<p>刚才的过程相当于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Ax & = b \\
x & = Ix \\
x & = ( BA ) x \\
x & = B ( Ax ) \\
x & = Bb \\

\end{aligned}</script><p>无论是二项式反演还是莫比乌斯反演,他们都满足$f ( n ) $所依赖的$g ( k ) $有$k \leq n \ $.</p>
<p>根据上面的情况,我们发现$A $是一个下三角矩阵,$B $是$A ^{ - 1  } $.</p>
<p>现在来推导满足$k \leq n $的一般情况反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ k = 1  } ^n a _{ n , k  } g ( k ) \\

\end{aligned}</script><p>不妨设算子$\mu ( n , m ) $,满足$\sum _{ k = 1  } ^n a _{ n , k  } \mu ( k , m ) = \sum _{ k = 1  } ^n \mu ( n , k ) a _{ k , m  } = [ n = m ] \ $.</p>
<p>即$AB = BA = I \ $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n ) & = \sum _{ m = 1  } ^n [ n & = m ] g ( m ) \\
& = \sum _{ m = 1  } ^n \sum _{ k = 1  } ^n \mu ( n , k ) a _{ k , m  } g ( m ) \\
& = \sum _{ k = 1  } ^n \mu ( n , k ) f ( k ) \\

\end{aligned}</script><p>由上我们发现,反演解决了一些在下标上的二元运算卷积:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c _r & = \sum _{ p , q  } [ f ( p , q ) & = r ] a _p b _q \\

\end{aligned}</script><p>而我们需要把$f $分成两个独立的部分,通常正变换一下,处理一下,逆变换回来.</p>
<h2><span id="容斥">容斥</span></h2><h4><span id="一般形式">一般形式</span></h4><p>即:将求并集中元素个数转化成了求交集中元素个数.</p>
<p>我们有:$\mid \bigcup _{ i = 1  } ^n S _i \mid = \sum _{ T \subseteq \{ 1 , . . . , n \}  } ( - 1 ) ^{ | T - 1 |  } \mid \bigcap _{ p \in T  } S _p \mid $.</p>
<p>证明:我们考虑对于每个元素,看它对最终答案的贡献.假设它所属$m $个集合$T _1 , . . . , T _m $,而除了这些集合以外的集合,</p>
<script type="math/tex; mode=display">
\begin{aligned}
cnt & = \sum _{ i = 1  } ^m ( - 1 ) ^{ i - 1  } \binom { m  } { i  } \\
& = \binom { m  } { 0  } - \sum _{ i = 0  } ^m ( - 1 ) ^i \binom { m  } { i  } \\
& = 1 - [ m & = 0 ] 
\end{aligned}</script><p>显然,当这个元素被包含的时候,贡献为$1 $,反之贡献为$0 $.</p>
<p>如果我们定义一类在集合上的函数$F ( S ) = \sum _{ p \in S  } F ( p ) $,那么自然也有:</p>
<script type="math/tex; mode=display">
F ( \bigcup _{ i = 1  } ^n S _i ) = \sum _{ T \subseteq \{ 1 , . . . , n \}  } ( - 1 ) ^{ | T | - 1  } F ( \bigcap _{ p \in T  } S _p )</script><p>另外,我们上面的做法是:当交集好求时求并集.我们还可以使用一步补集转化:</p>
<script type="math/tex; mode=display">
\mid \bigcap _{ i = 1  } ^n S _i \mid = | U | - \mid \bigcup _{ i = 1  } ^n \overline { S _i  } \mid</script><p>这样我们同样可以在并集好求的时候求交集.</p>
<p>会发现容斥和二项式反演是很像的.但是不一样的是,容斥是从集合的角度考虑,更注重单个元素的贡献;二项式反演是从函数的角度考虑,更关注函数之间的转化.</p>
<h5><span id="example1不定方程非负整数解计数">Example1(不定方程非负整数解计数)</span></h5><p>考虑不定方程$\sum _{ i = 1  } ^n x _i = m $,和$n $个限制条件$x _i \leq b _i $,其中$m $和$b _i $都是非负整数,求该方程的非负整数解的数目.</p>
<p>首先,我们需要找出全集$U $,以及刻画$U $中元素的$P _i $(条件):</p>
<ol>
<li><p>$U $是满足$\sum _{ i = 1  } ^n x _i = m $的所有非负整数解;</p>
</li>
<li><p>对于每个变量$i $,都对应一个$P _i = [ x _i \leq b _i ] $.</p>
</li>
</ol>
<p>设所有满足$P _i $的解构成集合$S _i $,那么我们需要求解的值就是$\mid \bigcap _{ i = 1  } ^n S _i \mid $.而$\mid U \mid $显然是$\binom { m + n - 1  } { n - 1  } $.我们有:$\mid \bigcap _{ i = 1  } ^n S _i \mid = | U | - \mid \bigcup _{ i = 1  } ^n \overline { S _i  } \mid $.考虑对$\mid \bigcup _{ i = 1  } ^n \overline { S _i  } \mid $使用容斥原理,注意到$\overline { S _i  } $的意义是满足$x _{ i  } \geq b _{ i  } + 1 $的解的数目.换句话说也就是部分变量有下界限制,那直接左右两边同时减去下界即可.于是枚举子集即可实现.</p>
<p>欸,等一下,咋想到的补集转化,又是咋想到要用容斥的捏?</p>
<p>我们冷静一下,首先补集转化和容斥都是一个思想:正难则反.我们要求满足条件的个数,就先想一下能不能求不满足条件的个数,然后拿总的个数减去.然后注意到不满足条件的意义是:有至少一个不满足,这样就很可以容斥了.</p>
<h5><span id="example2错排问题">Example2(错排问题)</span></h5><p>我们考虑从容斥的角度再次认识一下错排.</p>
<p>首先,我们需要找出全集$U $,以及刻画$U $中元素的$P _i $(条件):</p>
<ol>
<li><p>$U $是长度为$n $的所有排列;</p>
</li>
<li><p>对于每个变量$i $,都对应一个$P _i = [ p _i \ne i ] $.</p>
</li>
</ol>
<p>注意到所求仍然是$\mid \bigcap _{ i = 1  } ^n S _i \mid $.于是我们仍然试图$| \bigcap _{ k = 1  } ^m \overline { S _{ a _k  }  } | $.考虑其意义,也即:有$m $个位置被确定了,而其它位置没有限制,于是$| \bigcap _{ k = 1  } ^m \overline { S _{ a _k  }  } | = \binom { n  } { m  } ( n - m ) ! $.根据容斥,自然有:$d _n = n ! - \sum _{ m = 1  } ^n ( - 1 ) ^{ m - 1  } \binom { n  } { m  } ( n - m ) ! = n ! \sum _{ m = 0  } ^n \cfrac { ( - 1 ) ^m  } { m !  } $.</p>
<h5><span id="example3bzoj3622已经没有什么好害怕的了">Example3(bzoj3622已经没有什么好害怕的了)</span></h5><p>首先可以用dp+双指针得到$f _i $表示勒令$i $对满足条件的方案数.把$k $的定义改为恰好$k $对满足条件的显然是同强度的.</p>
<p>我们接下来仍然考虑容斥,首先,我们需要找出全集$U $,以及刻画$U $中元素的$P _i $(条件).</p>
<p>等一下,这个好像不好刻画?</p>
<p>我们先回归一下容斥的本质:考虑每个元素的贡献.注意到恰好$a $对的方案会被恰好$b $对的方案计算$\binom { b  } { a  } $次.我们再考虑一种方式理解容斥:我们一步一步把正确的答案消出来:简单来说,我第一步让所有恰好为$k $的方案贡献为$1 $,其它的可能也有贡献,但我们忽略他们.第二步让所有恰好为$k + 1 $的方案贡献为$0 $,第三步以此类推.于是这个题,我们考虑也这么做:这样第一步令$ans = f _k $,第二步除去其中被多算的$k + 1 $,这一步令$ans - = \binom { k + 1  } { k  } f _{ k + 1  } $.这个时候,我们再考虑$k + 2 $的贡献:它将在$f _k $时贡献$\binom { k + 2  } { k  } $次,在$f _{ k + 1  } $时贡献$- \binom { k + 2  } { k + 1  } \binom { k + 1  } { k  } = - \binom { k + 2  } { k  } \binom { 2  } { 1  } $次,那它现在的贡献还有:$- \binom { k + 2  } { k  } $次.以此类推,可以得到$ans = \sum _{ i = k  } ^n f _i ( - 1 ) ^{ i - k  } \binom { i  } { k  } $.</p>
<p>等一下,这也太麻烦了,就不能从集合的角度分析嘛?</p>
<p>冷静一下,如果我们要做容斥,我们必须考虑每个元素<strong>单独</strong>的贡献,但是在这个题中,每个元素并没有单独的贡献,而是整个集合需要满足性质才能贡献.也就是说,我们无法分析每个$P _i $.而考虑集合就需要将集合分类,从而使用二项式反演.</p>
<p>换句话说,这个定义在集合上的函数并不满足可加性.</p>
<p>换句话说,我们要用容斥,就一定要刻画$P _i $,因为只有这个时候,我们才能通过分析满不满足$P _i $的解集的交并来实现.</p>
<p>再换句话说,大部分的所谓的容斥其实都和集合<strong>没啥关系</strong>,我们做容斥就是需要逐个考虑贡献,把它们贡献全都杀成$1 / 0 $就行.</p>
<h5><span id="example4haoi2008硬币购物">Example4(HAOI2008硬币购物)</span></h5><p>如果直接对于每次询问暴力做,复杂度显然是$O ( 4 ns ) $,无法接受.于是考虑预处理来降低单词询问复杂度.</p>
<p>注意到硬币数量很少,并且每个硬币的贡献可以独立计算.我们完全可以刻画$P _i = [ use _i \leq d _i ] $,从而可以用容斥做.复杂度$O ( 4 m + n 2 ^4 ) $.</p>
<h5><span id="example5">Example5</span></h5><p>Alice和Bob在玩游戏,他们有一个$n $个点的无向完全图,设所有的边组成了集合$E $,他们想取遍$E $的所有非空子集,对某个集合$S $有一个估价$f ( S ) $:考虑$n $个点与$S $中的边组成的图,我们用$m $种颜色对所有点染色,其中同一个连通块的点必须染成一种颜色,那么$f ( S ) $等于这个图的染色方案数.同时,Alice喜欢奇数,所以当$| S | $为奇数时,Alice的分值加上$f ( S ) $,否则Alice的分值减去$f ( S ) $,求最后的分值.$( n , m \leq 10 ^6 ) $.</p>
<p>一开始抄题的时候没有写染色而是直接写”设$k $为连通块个数,则$f ( S ) = m ^k $.”然后发现做不了,因为$| S | $相同的$f ( S ) $不尽相同,而且可能情况还蛮多的.冷静一下,注意到连通块这个性质太强了:如果我们把它放到指数上,那应该会做得很痛苦.所以我们考虑每有一个连通块就乘上一个$m $,这个看上去就简单一些.</p>
<p>但是这样好像还是不太好做,毕竟现在我们面对的还是一个难以转化为计数问题的图论问题,只是把问题的单位元素从图变成了连通块.那我们能不能再进一步:把单位元素换成单点呢?</p>
<p>考虑由于连通块要染一种颜色,那$x \leftrightarrow y \Rightarrow col _x = col _y $.注意到这是一个单位元素更小的限制条件!并且我们发现我们将与$- 1 $有关的单位元素(从一开始就是点)和与$f $有关的单位元素统一起来了.这也提示我们做计数的时候,尤其是做容斥的计数的时候,最好先将单位元统一,这样后面才可能更容易做.</p>
<p>接下来就可以写式子了,令$F ( C ) $表示在$C $情况下的染色方案,$T _{ ( i , j )  } $表示满足边$( i , j ) $限制的解集:</p>
<script type="math/tex; mode=display">
ans = \sum _{ \emptyset \ne S \subseteq E  } ( - 1 ) ^{ | S | - 1  } F ( \bigcap _{ ( i , j ) \in S  } T _{ ( i , j )  } )</script><p>冷静一下!这个东西和容斥长得那叫一个一模一样啊.我们看看能不能逆向分析出$ans $的意义:显然是$F ( \bigcup _{ i = 1  } ^{ m  } P _i ) $.也就是完全图中至少有两个点颜色相同的染色数.根据补集转化,我们只需求出两两点不相同的染色数即可.所以最后的答案就是$m ^n - m ^{ \underline { n  }  } $.</p>
<h5><span id="example6">Example6</span></h5><p>求$\varphi ( n ) $.</p>
<p>考虑这么一个事实:假设$n = \prod p _i ^{ q _i  } $,注意到令$P _i = [ \gcd ( i , n ) = 1 ] $,我们所求也就是$\mid \bigcap _{ i = 1  } ^n S _i \mid $.于是可以用上面的方法做.另外,这里的做法引出莫比乌斯反演.</p>
<h5><span id="example7agc058d">Example7(AGC058D)</span></h5><p>直接容斥好像不太可做,我们把容斥中的条件改为有多少个极长的形如$ABCABCAB . . . $这样的串.</p>
<p>乍一看这个极长的条件好像巨难满足,但实际上我们冷静一下,我们只需要满足这个串长度大于等于$3 $并且开头不能往前延申就可以了,后面其实是没啥必要管的.</p>
<p>拿组合数算一算.</p>
<h5><span id="example8agc035f">Example8(AGC035F)</span></h5><p>显然问题只在于重复计算的问题.我们先将所有状态做一个双射:对于一个网格,唯一可能被重复计算的只可能是一个拐角的$1 $,我们让这种情况下的行尽可能长.</p>
<p>然后捏?注意到这样的话一个拐角的角一定是行了,是列就一定不合法,我们考虑把不合法的列杀了.</p>
<p>于是做一下容斥,答案是$\sum _{ i = 0  } ^{ \min ( n , m )  } ( - 1 ) ^i \binom { n  } { i  } \binom { m  } { i  } i ! ( m + 1 ) ^{ n - i  } ( n + 1 ) ^{ m - i  } $.</p>
<h5><span id="example9">Example9</span></h5><p>给定若干个限制条件$( x , y ) $,表示$a _x = y $和$a _y = x $必须满足至少一个,求排列方案数.</p>
<p>首先$i \rightarrow p _i $把排列转化成图,这样上面的限制条件也就是有一些无向的链和环,最后定向.一开始以为随便做做,思考一下注意到如果有长度为$2 $的链,它自己成环的话是不用$\times 2 $的.</p>
<p>这咋办.一个办法是:我们考虑容斥,先随便放进去,最后再钦定若干个自己成环.诶等一下为啥这个容斥是对的?因为系数是$\times 2 $,所以一个有$1 $个单独成环的状态会被随便放的情况恰好多算一次.类似可以做容斥.</p>
<p>当然,也可以考虑先把其它的合并,最后做长度为$2 $的链,但是!一开始一定要钦定有序,最后再用组合数统一算答案.因为一开始带着顺序做很难做.</p>
<h5><span id="example10agc036f-square-constraints">Example10([AGC036F] Square Constraints)</span></h5><p>由题意得:$n ^2 - i ^2 \leq P _i ^2 \leq ( 2 n ) ^2 - i ^2 $.</p>
<p>当一个东西有上界又有下界的时候可以想到容斥.问题转化为只有上界.假设最后所有的上界为$l _i $,那么只有上界的答案应该是什么呢?将$l $从小到大排序,答案就是$\prod _{ i = 0  } ^{ 2 n - 1  } ( l _i - i ) $.(注意到必须满足$l _{ 2 n - 1  } = 2 n - 1 $.)</p>
<p>但是这个东西和容斥怎么结合起来呢?我们将限制放到二维平面上,注意到上下界的限制其实是两个$\frac { 1  } { 4  } $的圆弧.而通过圆弧的性质不难看出:最终的$l $分为三部分:在下半部分圆弧上的,在上半部分圆弧后面的,在上半部分圆弧前面的.而如果想知道$l $按照顺序排序,我们只需要对前两部分做归并,然后将最后一部分直接放到后面即可.于是我们考虑按照$l $的大小为顺序进行一个类似归并的东西,每次判断当前下半部分圆弧是否要往上加点即可.这样我们可以处理前两部分对答案的贡献,但问题在于第三部分对答案的贡献怎么做,我们需要找到第三部分上的点在排序后的位置.我们预先枚举容斥集合的大小即可,这样就可以快速算出这个东西,于是复杂度$O ( n ^3 ) $.</p>
<h5><span id="example1123省选第一轮集训day4c带劲的旅行">Example11([23省选第一轮集训day4]C带劲的旅行)</span></h5><p>(下面将$n $和$m $反着写)</p>
<p>设$p = \frac { 2 k  } { n  } , q = n - p $.</p>
<p>首先注意到期望$= P [ len \geq 1 ] + P [ len \geq 2 ] + \cdots $.</p>
<p>考虑如何计算$P [ len \geq x ] $,如果我们设$a _i $表示以$i $作为开头的极长的带劲的长度大于等于$x $的序列的集合,那么最后无非是要求所有$a $的并.考虑用容斥做到求所有$a $的交.不过要注意讨论一下是不是第一个点.</p>
<h5><span id="example12">Example12</span></h5><p>给定$n , k $和$n $个点各自的颜色,对有编号无根树计数,要求相同颜色组成的连通块大小不超过$k $.$n \leq 300 $.</p>
<p>著名结论:$n $个点$m $个连通块任意连边成树的方案数是$n ^{ m - 2  } \prod s $,其中$s $是每个连通块的大小.但是,如果我们强行对每种颜色分成若干连通块,我们要防止它们之间有边.这就是我一开始没做出来的原因:要容斥的根本不是树的大小不能超过$k $,由于树的形态多变,这个是不能维护的!正确的做法是找到若干个相同颜色的大小小于等于$k $的连通块,要求它们两两无边.甚至根本就不是它们可以连边但是大小不能超过$k $,我们要容斥的东西一定要好算,简单.</p>
<p>然后就做完了,每次暴力合并若干个颜色相同的块,容斥系数$( - 1 ) ^{ 块 数 - 1  } $.</p>
<p>容斥是一个层层递进的东西,我们每一步都是基于上一步的限制:它本身就是一个求解集的东西.</p>
<h4><span id="min-max容斥">Min-Max容斥</span></h4><p>对于:</p>
<script type="math/tex; mode=display">
\mid \bigcup _{ i = 1  } ^n S _i \mid = \sum _{ T \subseteq \{ 1 , . . . , n \}  } ( - 1 ) ^{ | T - 1 |  } \mid \bigcap _{ p \in T  } S _p \mid</script><p>考虑一个特例:$S _i = \{ 1 , 2 , \cdots , a _i \} $,那么上面的式子导出min-max容斥(我们设$S = \{ a _1 , a _2 , \cdots , a _n \} $)(第二个式子可以把前缀改成后缀):</p>
<script type="math/tex; mode=display">
\begin{aligned}
\max ( S ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } \min ( T ) \\
\min ( S ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } \max ( T ) 
\end{aligned}</script><p>由于是集合,这个式子在期望意义下同样成立:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( \max \{ S \} ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } E ( \min \{ S \} ) \\
E ( \min \{ S \} ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } E ( \max \{ S \} ) 
\end{aligned}</script><p>进一步,这个式子可不止能求min-max的转化,它可以求出集合中第k大的数字:</p>
<script type="math/tex; mode=display">
\begin{aligned}
kth \max \{ S \} & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - k  } \binom { | T | - 1  } { k - 1  } \min \{ T \} \\
kth \min \{ S \} & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - k  } \binom { | T | - 1  } { k - 1  } \max \{ T \} \\
E ( kth \max \{ S \} ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - k  } \binom { | T | - 1  } { k - 1  } E ( \min \{ T \} ) \\
E ( kth \min \{ S \} ) & = \sum _{ T \subseteq S , T \ne \emptyset  } ( - 1 ) ^{ | T | - k  } \binom { | T | - 1  } { k - 1  } E ( \max \{ T \} ) 
\end{aligned}</script><p>原理是消掉前$k - 1 $大的数字,让他们的贡献为$0 $,剩下的配一下容斥系数.</p>
<h5><span id="example123省选10连测-day6a">Example1([23省选10连测 day6]A)</span></h5><p>不妨设$tim _i $为$[ i , i + 1 ] $第一次被覆盖的时间,答案就是:</p>
<script type="math/tex; mode=display">
E ( \max _{ i = 1  } ^{ n - 1  } \{ tim _i \} ) = \sum _{ T \subseteq \{ 1 , 2 , \cdots , n - 1 \} , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } E ( \min _{ j \in T  } \{ tim _j \} )</script><p>设$f ( S ) $为有多少个区间能覆盖至少一个$[ i , i + 1 ] , i \in S $,考虑$E = p _{ [ t \geq 0 ]  } + p _{ [ t \geq 1 ]  } + p _{ [ t \geq 2 ]  } + \cdots $,于是$E ( \min _{ j \in S  } \{ tim _j \} ) = \frac { m  } { f ( S )  } $.</p>
<p>于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = \sum _{ T \subseteq \{ 1 , 2 , \cdots , n - 1 \} , T \ne \emptyset  } ( - 1 ) ^{ | T | - 1  } f ( T ) \\
& = \sum _{ k = 0  } ^m \frac { m  } { k  } \sum _{ T \subseteq \{ 1 , 2 , \cdots , n - 1 \} , T \ne \emptyset , f ( T ) = k  } ( - 1 ) ^{ | T | - 1  } 
\end{aligned}</script><p>注意到$f ( S ) $可能不那么好求,我们求$g ( S ) = m - f ( S ) $,也就是不包含任何一个$[ i , i + 1 ] , i \in S $的区间个数,我们有:</p>
<script type="math/tex; mode=display">
ans = \sum _{ k = 0  } ^m \frac { m  } { m - k  } \sum _{ T \subseteq \{ 1 , 2 , \cdots , n - 1 \} , T \ne \emptyset , g ( T ) = k  } ( - 1 ) ^{ | T | - 1  }</script><p>这里已经不难写出$O ( n ^3 ) $的dp了.</p>
<p>那么怎么优化呢?设$dp _{ i , j  } $表示只考虑$[ 1 , i ] $时($[ i - 1 , i ] $必选),$\sum _{ g ( T ) = j  } ( - 1 ) ^{ | T | - 1  } $的答案,不难发现每次加入一个区间$[ l , r ] $就会让$dp _{ i , j  } , i &lt; = l $对$dp _{ r , j + 1  } $的贡献乘一个$1 $.</p>
<p>如何处理这个事情?我们用类似多项式的东西,前者相当于平移多项式系数,后者相当于标量乘法,然后拿线段树维护和,复杂度$O ( nm \log n ) $.</p>
<h4><span id="反射容斥">反射容斥</span></h4><p>一般形式:给定二维平面上两个点$S $和$T $,其中$T $在$S $的右方,给定两条线$y = a $和$y = b $,每次可以向右上或者右下走一步,求不碰线的从$S $到$T $的方案数.</p>
<p>我们不妨设$A $表示一定碰了一次上界的方案数,$B $表示一定碰了一次下界的方案数,$AB $表示一定碰了一次上界后碰了一次下界的方案数……</p>
<p>最后的答案就是随便走$- A - B + AB + BA - ABA - BAB . . . $.</p>
<p>考虑设步数为$n $,那显然长度最多为$\cfrac { n  } { a - b  } $.</p>
]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>图论</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%9B%BE%E8%AE%BA/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="约定">约定</span></h3><p>$K _n $为$n $个点的完全图</p>
<h3><span id="树的性质">树的性质</span></h3><h5><span id="example1hdu6035colorful-tree">Example1([HDU6035]Colorful Tree)</span></h5><p>考虑每种颜色的贡献,一种颜色的贡献显然是删去所有这个颜色的边后,剩下的联通块之间的路径.</p>
<h5><span id="example22022qbxt国庆day1tree">Example2([2022qbxt国庆Day1]tree)</span></h5><p>首先考虑分开处理每个点,在做每个点的时候假设它的所有子节点全部已经满足条件了,最终我们再通过计算组合数的方式计算即可.</p>
<p>那么最后,我们需要对于每个点进行处理,假设我们已知这个子树的集合是$S $,那么我们需要用容斥计算如果当前子树集合是$S $的子集的情况,不难发现容斥式子:</p>
<script type="math/tex; mode=display">
ans = \sum _{ k = \max \{ f _v | x \rightarrow v \}  } ^{ f _x  } ( - 1 ) ^{ f _x - k  } k \binom { f _x  } { k  } \sum _{ x \rightarrow v  } \binom { k  } { f _v  }</script><p>其实也就是个二项式反演的形式.</p>
<p>这题还需要一些技巧优化,我们首先发现由于$f _v $有可能有重复的,我们可以提前把重复的$f _v $压缩到一起再用快速幂求,于是后面的部分最多不过$\sqrt { n  } $级别.而前面是一个类似于树上启发式合并的东西,于是复杂度$O ( n \sqrt { n  } \log n ) $.</p>
<h5><span id="example3cf1628e-groceries-in-meteor-town">Example3(CF1628E Groceries in Meteor Town)</span></h5><p>因为要求路径最大值,所以先建Kruskal重构树.然后问题转化为求一个点和一群白点的LCA是谁.</p>
<p>树上多点LCA有个经典性质:也就相当于其中$dfn $序最大的和最小的两个点的LCA.</p>
<p>至于区间覆盖可以用线段树.</p>
<h5><span id="example4loj3692">Example4(loj3692)</span></h5><p>注意到$D $很小.</p>
<p>我们考虑处理邻域乘,设$f _{ x , i  } $表示$x $的$i $级儿子需要乘上的答案.每次修改时,先将$f _{ x , D  } $和$f _{ x , D - 1  } $乘上$W $,然后令$x = fa _x $,$D = D - 2 $,继续此操作直到$D $为$0 $.</p>
<p>然后询问的时候直接暴力跳$D $层父亲找答案,不难发现这样做是对的.</p>
<p>同样的思路可以脱离点分治处理很多邻域问题.</p>
<h4><span id="树的直径">树的直径</span></h4><ol>
<li><p>定义:树中最长的一条简单路径.</p>
</li>
<li><p>树的直径可能有多个.</p>
</li>
<li><p>直径的两个端点一定是两个叶子节点.</p>
</li>
<li><p>如果树有多条直径,树的不同的直径的中点/中边一定是相同的.</p>
</li>
<li><p>到一个点距离最远的点一定是直径的一个端点.</p>
</li>
<li><p>对于两棵树,如果第一棵树直径两端点为$( u , v ) $,第二棵树直径两端点为$( x , y ) $,用一条边将两棵树连接,那么新树的直径一定是$u , v , x , y $中的两个点.</p>
</li>
</ol>
<p>上述的证明大都是考虑反证法:如果不成立,则一定存在一条更长的直径.</p>
<h5><span id="example1sdoi2013直径">Example1([SDOI2013]直径)</span></h5><p>有一个做法是:考虑找到直径的中点/中边,找到它到两边的最远距离的点,显然两边的点分别的以中点/中边的两个端点为根的LCA中间的部分就是一定会被包含的边.</p>
<h4><span id="树的重心">树的重心</span></h4><ol>
<li><p>定义:树的重心是删去后所有剩余子树大小最大值最小的点.</p>
</li>
<li><p>树的重心是删去后所有剩余子树大小全部小于等于$\lfloor \cfrac { n  } { 2  } \rfloor $的点.</p>
</li>
<li><p>树的重心只有可能有一个或两个.</p>
</li>
<li><p>如果树有两个重心,那么这两个重心相邻.</p>
</li>
<li><p>树的重心是所有点到其距离之和最小的点.</p>
</li>
<li><p>把一个树添加或删除一个叶子,那么它的重心最多只移动一条边的距离.</p>
</li>
<li><p>把两个树通过一条边相连得到一个新的树,那么新的树的重心在连接原来两个树的重心的路径上.</p>
</li>
</ol>
<p>(2)的证明如下:</p>
<p>如果重心是$u $,且删去$u $后剩余最大子树大小大于$\lfloor \cfrac { n  } { 2  } \rfloor $,设这棵子树中与$u $相邻的点为$v $,则我们删去$v $后,最大子树大小一定会减少,不满足假设,所以(2)得证.</p>
<p>另外,如果一个点删去后所有剩余子树大小全部小于等于$\lfloor \cfrac { n  } { 2  } \rfloor $,那它也一定是重心.因为不存在除了重心以外的满足条件的点:考虑调整法,与重心相邻的点一定都不满足条件,因为它们的子树大小全都小于等于$\lfloor \cfrac { n  } { 2  } \rfloor $,移动后最大子树一定不小于$n - \lfloor \cfrac { n  } { 2  } \rfloor $.</p>
<p>(3)(4)的证明如下:</p>
<p>首先证明:如果有两个点都是重心,那它们一定相邻.</p>
<p>考虑如果二者不相邻,那删去它们后剩下的最大子树大小一定相等,设这两个点分别为$x , y $,那删去$x $后,剩下的最大子树一定包含了$y $,而这个子树的大小一定小于等于$\lfloor \cfrac { n  } { 2  } \rfloor $.那删去$y $后,剩下的最大子树大小必定大于$\lfloor \cfrac { n  } { 2  } \rfloor $,一定不合法.</p>
<p>而树上不可能有超过两个点两两相邻,于是最多只有两个重心,且它们一定相邻.</p>
<p>(5)的证明如下:</p>
<p>考虑如果$u $是树的重心,我们看能不能将$u $调整到另一个点使得所有点到其距离之和更小.</p>
<p>由于调整是一步一步做的,显然只需要判断所有和$u $相邻的点是否符合条件即可.设这个点为$x $,那我们把$u $改为$x $,会使答案减小$siz _x $,增加$n - siz _x $,由于$siz _x \leq \lfloor \cfrac { n  } { 2  } \rfloor $,所以这么做一定不优.</p>
<p>(6)的证明如下:</p>
<p>首先,如果加入一个叶子节点后,各个子树大小仍然都$&lt; \lfloor \cfrac { n  } { 2  } \rfloor $,那显然不必调整.</p>
<p>不然,显然是往叶子节点移动一格或者加入一个相邻的重心.</p>
<p>(7)的证明如下:</p>
<p>不妨设两棵树大小分别为$siz _a \leq siz _b $,然后令相连的两个点是这两棵树的根.</p>
<p>对于$b $中的重心,肯定是会往根跳,并且不可能跳出$b $原本的树.</p>
<h5><span id="example1csp-s2019树的重心">Example1([CSP-S2019]树的重心)</span></h5><p>首先取重心$rt $为根,如果有两个就随便取一个.</p>
<p>接下来我们考虑对于每个点$x $,它在什么情况下会成为重心.首先,删掉的边不可能在$x $的子树内,不然一定不可能取到$x $的.然后,我们假设删掉的子树大小为$S $,$x $的子树内最大的一个子树大小为$g _x $,那么根据重心的性质有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ( n - S - siz _x ) & \leq n - S \\
2 g _x & \leq n - S \\

\end{aligned}</script><p>整理得到:</p>
<script type="math/tex; mode=display">
2 g _x \leq n - S \leq 2 siz _x</script><p>考虑这个怎么计算:如果没有删边必须在$x $子树外的限制,那显然可以直接遍历一遍存下$n - S $,然后统一使用值域树状数组做.而我们接下来考虑删去$x $子树内的贡献,类似colorful tree的做法,每次dfs到一个点,记录下来当前树状数组的答案,然后dfs子树,回溯时拿新答案减去旧答案就是子树内的答案.</p>
<p>接下来我们需要考虑$x = rt $怎么做.</p>
<p>考虑$x $的子树中最大的那个和次大的那个,如果我们删去的节点不在最大的子树中,那只需要保证最大的子树大小满足条件;不然,只需保证次大的子树大小满足条件,也是好维护的.</p>
<h4><span id="树的结构的维护">树的结构的维护</span></h4><h5><span id="example1">Example1</span></h5><p>给定一棵树,树上点有点权$val $.现在有一个值$sum $,初始为$0 $.从$1 $号点出发,每第一次到一个点$u $,就会使$sum + = val _u $.求在时刻保证$sum \geq 0 $的前提下,$sum $最终的最大值.</p>
<p>首先注意到为了保证$sum \geq 0 $这个性质,一个节点应该有两个值:$lim $表示能走到这个点所需要的最小的$sum $,$val $表示到了这个点后能获得的价值.显然如果$val \leq 0 $则无意义.</p>
<p>如果我们能一开始处理出根的所有儿子的$lim $和$val $,我们就可以使用先走$lim $小的点,并不断累计$sum $的方式做.</p>
<p>所以考虑不断向上合并信息.不难发现此时一个点要处理出多对$( lim , val ) $.考虑用一个左偏树维护这个东西.</p>
<p>但是,我们还需要保证不能跳着选点.也就是说我们要保证选中一个点,这个点的父亲必须选,怎么办呢?</p>
<p>一个方式是,我们把排序方法从只看$lim $变成先判是否存在祖先后代关系,再判断$lim $.</p>
<p>另一个方式是,我们每次直接把当前子树根节点扔到堆顶.但是需要满足堆的性质.不难发现如果这个点$val &lt; 0 $,我们可以将它与下面的$lim $最的节点合并直到这个点$val \geq 0 $.而如果这个点的$lim $太大,我们同样可以合并.注意到这样我们采取了一种很聪明的方式维护了树的形态.</p>
<h4><span id="dfs树的性质">dfs树的性质</span></h4><h5><span id="example1cf1361ejames-and-the-chase">Example1([CF1361E]James and the Chase)</span></h5><p>如何判断一个点是否是好的呢?首先,如果要求是任意路径,那一个点是好的当且仅当它是一个叶向有根树的根.</p>
<p>现在要求是简单路径,那也就是说如果走了重复点是可以忽略的,这也就是说这个叶向有根树可以有反走边,而显然不能有横插边.不难发现这是充要条件.</p>
<p>另一个问题是:如何快速判断一个点是否满足上述条件呢?首先我们求出以一个好的点为根的dfs树(随机选取一定数量的点,如果一个都不是好点直接输出$- 1 $),然后我们发现:一个点$u $是好的必要条件是它的子树内只有一条反走边,证明显然.假设$u $通过这条反走边走到了点$v $,那么$u $是好的点当且仅当$v $也是好的点.</p>
<p>这是为啥呢?首先,因为我们是以一个好点为根跑的dfs树,所以$u $走到子树内的点必定只有一种方式.那子树外的点呢?走到$v $后,显然就要从它走到其它点,而它到$u $的子树内显然只有一种方案,那如果$v $到其它点也只有一种方案,那么根据$u \rightarrow v $这条路径,$u $显然也是好点.</p>
<h5><span id="example2loj-6276">Example2(Loj 6276)</span></h5><p>找到所有颜色相同的点对$( x , y ) $,经过它们的路径都不合法,显然经过它们的路径可以用dfs序刻画成矩阵,最后要求矩阵面积并.</p>
<h3><span id="圆方树的性质">圆方树的性质</span></h3><ol>
<li><p>对于任意的非空无向图$G $,一定存在一个$G $的点双连通分量$B $,使得$B $中只有不超过$1 $个节点是$G $的割点.其中,若$B $中没有$G $的割点,则有$B = G $.</p>
</li>
<li><p>若一个点双连通分量不为$K _2 $,则该点双连通分量中至少有一个简单环.</p>
</li>
<li><p>在仙人掌上的每个点双连通分量要么是$K _2 $,要么是一个简单环.</p>
</li>
<li><p>对于一个不是$K _2 $的点双连通分量中的任意一个点$u $,一定存在一个简单环$C $使得$u $在$C $上.</p>
</li>
<li><p>对于一个不是$K _2 $的点双连通分量中的任意两个点$u , v $,一定存在一个简单环$C $使得$u , v $在$C $上.</p>
</li>
<li><p>对于一个不是$K _2 $的点双,任给一点$x $和一边$e $,一定存在经过$x , e $的简单环.</p>
</li>
<li><p>对于一个不是$K _2 $的点双,任给两点$s , t $和一边$e $,一定存在一条$s - e - t $的简单路径.</p>
</li>
</ol>
<p>(6)的证明非常变魔术,你考虑把$e : u \leftrightarrow v $这条边给改成$u \leftrightarrow w \leftrightarrow v $,然后$w $和$x $在一个简单环上,意味着$u , w , v , x $在一个简单环上.</p>
<p>(7)考虑(6)就行,先找到$s $和$e $所在的简单环,然后从这个环上连到$t $.</p>
<h3><span id="任意图的性质">任意图的性质</span></h3><ol>
<li>若一张无向连通图$G $中存在$3 $个不同的一度点$x , y , z $,则一定存在一个点$u \notin \{ x , y , z \} $使得存在$3 $条两两没有公共边的简单路径满足其中一个端点均为$u $ 且另一个端点分别为$x , y , z $.(证明考虑求生成树后讨论LCA)</li>
</ol>
<h3><span id="dsu-on-tree">dsu on tree</span></h3><h5><span id="exampleqoj5020">Example(QOJ5020)</span></h5><p>我们考虑树链剖分,这样将问题转化为三部分:</p>
<ol>
<li><p>对于某个点而言,到它距离$\leq d $的点数量.这个问题可以使用点分治解决.</p>
</li>
<li><p>对于某条重链的上半部分而言,它连接的所有轻子树中,到它距离$\leq d $的点数量.这个问题直接dsu on tree.</p>
</li>
<li><p>对于某个点而言,在它子树内到它距离$\leq d $的点数量.这个问题也可以直接dsu on tree.</p>
</li>
</ol>
<p>为什么转化为三个部分就能求解呢?我们考虑一条链$u \rightarrow w \rightarrow v $,其中$w $是这条链上深度最浅的点.那么首先我们统计在$w $子树外的,这一个部分可以由(1)和(3)做差求出来.然后我们要求的就是在$w $子树内,到这条链的距离$\leq d $的点的数量.这个怎么求呢?我们考虑差分,求一下$1 \rightarrow u $和$1 \rightarrow w $的答案然后做差.这样我们对这条到根的路径重链剖分,只需要处理重链的上半部分以及两条重链的连接处.不难发现两条重链的连接处会被多算一次,拿(3)减一下就好.以及这条路径所叉出去的重儿子也需要用(3).</p>
<p>现在的问题在于怎么求(2)和(3),先考虑(2),我们对于每一条重链从顶端走到低端不断地加入轻儿子,然后维护BIT就行.(3)是类似的,只不过是需要从底端走到顶端.</p>
<p>注意如果把重儿子和轻儿子分开处理,那么可能会在一些奇怪的地方算重,解决方法是特判$w $处的答案,然后拆成两条互相之间完全没有影响的链,当然这也有可能会发生跳重链的时候轻儿子算重的情况,同样需要判断一下.</p>
<h3><span id="最小生成树">最小生成树</span></h3><h5><span id="example1cf1550f-jumping-around">Example1(CF1550F Jumping Around)</span></h5><p>首先考虑离线.注意到每次肯定跳到一个自己能跳到的点,而这个点应该是所需灵活度最小的点.</p>
<p>考虑boruvka算法,建立最小生成树并判断.</p>
<h3><span id="kruskal重构树">Kruskal重构树</span></h3><p>最小生成树时,每一次加边的时候把那个边变成虚点,两个点连到这条边上.任意两个点的LCA就是它们路径上的最小边权.</p>
<h3><span id="最短路">最短路</span></h3><h5><span id="example1cf1753d-the-beach">Example1(CF1753D The Beach)</span></h5><p>首先,自然的想法是把格子图黑白染色.</p>
<p>然后,我们注意到一个床是不可能被移动两次及以上的.因为如果是横着动两次,那不动自然就有一对空位置了;如果是转两次,考虑转的目的一定是为了空出某个位置或某两个位置(不可能为了空出三个位置,显然这么做很闲),一次操作足矣;如果是动一次转一次也是一样的,要么转的很闲要么原本就存在这么一对空位置.</p>
<p>我们再进行一步转化,考虑把动床改为动格子.换句话说,每个格子可以通过一定的代价移动到和它相邻的床的与它不相邻的那个位置上.注意到移动格子的过程只会把黑格子移动到黑格子,白格子移动到白格子.</p>
<p>于是建立超级源点跑两边最短路,枚举最后床放在哪里即可.不过这里有一点是一个床有没有可能被黑白最短路同时跑了一遍,是有可能的,但这么跑一定不优秀,不可能是最小答案.</p>
<h5><span id="example2cf843ddynamic-shortest-path">Example2([CF843D]Dynamic Shortest Path)</span></h5><p>注意到$O ( nq ) $能过.而且每次修改只是对于若干条边$+ 1 $,自然想到每次修改完后跑01bfs.</p>
<p>但是怎么跑呢?注意到维护每个点最短路的增量,并且在路径的增量上跑01bfs,自然可求.</p>
<h5><span id="example3-同余最短路luogup2371墨墨的等式">Example3 同余最短路([luoguP2371]墨墨的等式)</span></h5><p>因为$a _i $无序,假设$a _1 $最小,那么所有的数字都可以按$\mod a _1 $的结果分成$a _1 $类.我们按照余数设置$a _1 $个点,编号为$0 $至$a _1 - 1 $.</p>
<p>设$dis _i $为所有能组成的数中且$\mod a _1 $余数为$i $的最小数.那么,所有能表示出来的$\bmod a _1 $余数为$i $的数都可以写作$dis _i + k \times a _1 , k \in \mathbb { N  } $的形式,求得$dis _i $后可以很轻易算出.</p>
<p>那么怎么求$dis _i $呢?我们考虑:对于任意一个数$k $,它可以怎么得到.注意到如果$k - a _j $(其中$i \ne j $)可行,那么$k $一定可行.自然有:$dis _i = \min \{ dis _j + a _k | 0 \leq j &lt; a _i , k \ne i \} $.</p>
<p>这显然是一个最短路问题.</p>
<h3><span id="差分约束">差分约束</span></h3><h5><span id="example1agc056c-01-balanced">Example1([AGC056C] 01 Balanced)</span></h5><p>将$1 $看成$- 1 $,$0 $看成$+ 1 $,不难发现字典序最小也就是让前缀和序列字典序最小,并且有$sum _{ r _i  } = sum _{ l _i - 1  } $以及$- 1 \leq sum _{ i  } - sum _{ i - 1  } \leq 1 $,然后做$01 $bfs跑最短路,显然最短路可以保证每个$sum $都尽可能小.</p>
<p>然后另一个问题在于这玩意为啥不会让$sum _i = sum _{ i - 1  } $,这个建图后观察一下就知道不会发生这种情况.</p>
<h3><span id="2-sat">2-SAT</span></h3><h5><span id="example1cf1697f">Example1(CF1697F)</span></h5><p>对每个点建立$k $对点表示$a _i \geq x $和$a _i &lt; x $,就能做了.</p>
<h5><span id="example22021集训队互测-序列">Example2(2021集训队互测 序列)</span></h5><p>注意到如果$a _i &lt; x $,那么$a _j \geq x \land a _k \geq x $,这样就可以刻画所有的条件.</p>
<p>而且一定可以刻画所有的条件.</p>
<h3><span id="对偶图">对偶图</span></h3><h5><span id="example1csp-s-2021-交通规划">Example1([CSP-S 2021] 交通规划)</span></h5><p>先考虑如果附加点的颜色全都相同,那肯定输出$0 $即可.</p>
<p>考虑附加点的数量为$2 $的时候,那显然最优情况需要将整个图分成各自联通的两部分,一部分染成黑色,一部分染成白色.可以发现这就是一个对偶图.</p>
<p>而如果附加点的数量很多怎么做呢?稍微思考一下</p>
<h3><span id="广义串并联图三度化">广义串并联图/三度化</span></h3><h4><span id="定义">定义</span></h4><p>定义:不存在$4 $个点使得任意两点之间存在一条简单路径,且这六条路径不在$4 $个点之外的地方相交.</p>
<h4><span id="删一度点">删一度点</span></h4><p>经典问题引入:树上带权最大独立集.</p>
<p>首先dp是可以实现的,我们考虑是否存在贪心算法.</p>
<p>首先,如果不带权,我们显然可以每次选取一度点或零度点,并删去所有相连的点.这样做显然是最优的.</p>
<p>但怎么做带权的方法呢?我们注意到可以先删掉所有负点权的点,然后可以加入剩下的所有零度点.</p>
<p>那么对于一度点呢?对于一个一度点$u $和它的相邻点$v $,我们不能盲目选$u $的原因是可能选取$v $会更优秀.考虑做一个带悔贪心,我们先把$u $选上,然后把$v $的权值设为$val _v - val _u $,相当于我们仍然可以选$v $,但是要花费$val _u $的代价把$u $删去.</p>
<p>我们把类似这样的操作称为<strong>删一度点</strong>.</p>
<h4><span id="缩二度点">缩二度点</span></h4><p>问题引入:给定一个仙人掌,每个点可以染色为$0 $或$1 $,$u $节点染成$0 $会有$b _u $的贡献,不然有$w _u $的贡献.若一条边$e $相邻的两点颜色相同则有$s _e $的贡献,不然有$d _e $的贡献,求最大答案.</p>
<p>首先如果有一度点和零度点,我们仍然可以使用删一度点的操作.</p>
<p>如果没有,考虑仙人掌上的一个点双一定是一个简单环.而且一定存在一个点双$B $满足$B $只包含一个割点.</p>
<p>那么对于这个点双上的一个非割点$x $以及和它相邻的两个点$u $和$v $,我们考虑$x $的染色有可能改变$u $和$v $的答案,那么怎么办呢?</p>
<p>冷静思考一下,我们想办法把$x $给删掉.简单来说,我们把$u $和$v $之间连一条边权为$[ w _{ 0 , 0  } , w _{ 0 , 1  } , w _{ 1 , 0  } , w _{ 1 , 1  } ] $的边,分别表示$u $和$v $的染色为以上四种情况时这条边(也就是原本的$x $)的最大贡献是什么,这显然可以通过讨论$x $的取值而求得.这样初始边权实际上就是$[ s , d , d , s ] $,于是我们就可以删掉一个二度点并连起来与它相邻的两个点,我们把类似这样的操作称为<strong>缩二度点</strong>.</p>
<h4><span id="叠合重边">叠合重边</span></h4><p>注意到使用缩二度点的时候,会把一个三元环缩成两个点及链接它们的两条重边,但是我们可以直接把重边合起来,我们把类似这样的操作称为<strong>叠合重边</strong>.</p>
<h4><span id="正确性证明">正确性证明</span></h4><p>接下来我们证明:任何广义串并联图都可以通过以上三种操作缩为一个点.</p>
<h5><span id="引理1">引理1</span></h5><p>对于一个无向图$G $,若进行若干次删一度点操作,缩$2 $度点操作以及叠合重边操作后得到的图不是广义串并联图,那么$G $也不是广义串并联图.</p>
<p>考虑用逆操作还原原图.删一度点的逆操作是加入一个点,叠合重边的逆操作是将一条边变成两条边,这两个操作显然不会使一个不是广义串并联图的图变成广义串并联图.接下来考虑缩二度点的逆操作:删掉一条边$( u , v ) $并加入一个点$w $和两条边$( u , w ) $和$( w , v ) $.</p>
<p>由于这个图不是广义串并联图,所以一定存在一组反例点$\{ a , b , c , d \} $.如果我们删掉的边不在作为反例的六条边上,那显然不影响;如果在,由于新加入的两条边仍然可以作为路径,所以也不影响.</p>
<p>于是引理得证.</p>
<h5><span id="引理2">引理2</span></h5><p>任意一张所有点的度数都大于等于$3 $的简单无向连通图,一定不是广义串并联图.</p>
<p>这个引理的严格证明有些麻烦.我们冷静一下,一个四个点的完全图满足以上条件且不是广义串并联图.而其他的图感性理解一下应该可以通过缩路径的方式变成一个四个点的完全图.</p>
<p>结合引理1,我们得知任意一个操作后不能变成单个节点的图的无向连通图不是广义串并联图.</p>
<h5><span id="引理3">引理3</span></h5><p>任意一个满足$m \leq n + k $的图,通过删一度点,缩二度点,叠合重边操作后,$m $和$n $都会到达一个$O ( k ) $的量级.</p>
<p>考虑缩完点后,所有点的度数$\geq 3 $,于是有$2 m \geq 3 n $,而在操作过程中,$m - n $的值显然是不增的,于是有$m - n \leq k $,解一下方程得到$n \leq 2 k , m \leq 3 k $.</p>
<h4><span id="example122zr提高十连测day6摆件">Example1(22zr提高十连测day6摆件)</span></h4><p>首先考虑颜色之间没啥区别,所以对于一棵树来说,朴素的dp是可以的.</p>
<p>简单来说,设$dp _i $表示第$i $棵子树的答案.合并的时候考虑设$f _v = \cfrac { 1  } { k  } dp _v sam _e + \cfrac { k - 1  } { k  } dp _v dif _e $,自然有$dp _u = \prod _{ u \rightarrow v  } f _v \ $.</p>
<p>接下来考虑先随便找一棵生成树,然后暴力枚举多余的反走边的深度较低的叶子节点的颜色,再进行dp即可.</p>
<p>另外也可以缩点后做,不过对于这题没啥区别.</p>
<h4><span id="example2joi-open-2022-放学路">Example2([JOI Open 2022] 放学路)</span></h4><p>广义串并联图的一个很重要的思想是:我们通过一些手段改变这个图的形态为一个好做的形态,但是答案又和原图相同.</p>
<p>在这个思想的指导下,我们考虑这个题能否进行三度化.不过注意起点和终点简单特判一下,别把他们给删了.这样我们最后如果得到了一个只有起点和终点的图,那就一定是no.</p>
<p>然后如果没有只得到起点和终点呢?对最短路图建DAG,考虑如果$S $和$T $在一个点双中,我们找到两个点$u , v $,使得$u \rightarrow v $,并且$u $的出度至少是$2 $,$v $的入度至少是$2 $,显然只要找到就做完了.现在的问题就在于为啥这条边一定存在.这个考虑找一个入度至少为$2 $的点$v $,找到它的入点$u $,如果$u $的出度不是$2 $,那么$u $也是一个入度至少为$2 $的点.这样往前推一定至少能推到一个点(因为不可能$S $贡献了俩入度).</p>
<p>如何保证$S , T $在一个点双中呢?其实只需要添加一条边$( S , T , dis _{ S \rightarrow T  } ) $就行了.显然加了后不会对答案产生影响.然后不在$S , T $这个边双内的点也没有用了.</p>
<h3><span id="点分治">点分治</span></h3><h5><span id="example1cfgym101002k">Example1(CFgym101002K)</span></h5><p>点分治,假设当前分治重心是$g $,将每个数缩成一个二元组$( w _i , d _i ) $,所求就是$w _i w _j + d _i + d _j $最小,直接排序做斜率优化.</p>
<h4><span id="点分树的性质">点分树的性质</span></h4><ol>
<li><p>点分树的高度是$O ( \log n ) $级别.</p>
</li>
<li><p>两个点在原树上的路径一定经过其在点分树上的LCA.</p>
</li>
</ol>
<h5><span id="example1codechef-btree">Example1(codechef [BTREE])</span></h5><p>这题用到了一个经典套路:一个树形连通图的点数减去边数为$1 $,把虚树建出来,能到达一个点的守卫必然是一个树形连通图(虚树中原本没有守卫的点可以加个不同覆盖范围的守卫).于是我们只需要求出每个守卫能覆盖多少点以及两个守卫之间的那条路径能覆盖多少个点,前者用点分树轻松维护,后者的话找一下这条边上的某个满足条件的点就行.</p>
<h5><span id="example2">Example2</span></h5><p>给定一棵树,现在在上面选定$m $对不同的点,要求每对点的距离之和最大.</p>
<p>考虑如果确定了$2 m $个点,我们如何匹配他们.对每条边算贡献,假设这条边两侧分别有$a , b $个点,那么这条边最大的贡献就是$\min \{ a , b \} $.不难发现这个上界可以取到,只需要取这$2 m $个点的带权重心,由于不存在绝对众数,所以直接两两匹配.枚举带权重心是啥,这样复杂度$O ( n ^2 ) $.</p>
<p>那么怎么优化呢?我们注意到如果以一个点$x $作为根,而它有一个儿子$y $,$y $的子树中选了少于$m $个点,那么我们以$y $为根一定是不优秀的,不然一开始就不可能只选少于$m $个点,再考虑带权重心这个东西,上点分树.</p>
<p>具体来说,我们建立点分树,然后从点分树的根开始枚举带权重心,如果当前没有一棵子树选了$m $个点,就停止,不然往选了$m $个点的那棵子树走(如果有两个的话选第$m $大更大的那个),这样就只会选取$O ( \log n ) $个带权重心.</p>
<h3><span id="边分治">边分治</span></h3><p>需要建立虚点转二叉树.</p>
<h4><span id="边分树的性质">边分树的性质</span></h4><ol>
<li><p>非叶子节点代表边,叶子节点代表点.</p>
</li>
<li><p>边分树的高度是$O ( \log n ) $级别.</p>
</li>
<li><p>边分树上每棵子树中的叶子节点一定联通.</p>
</li>
<li><p>是一棵完全二叉树.</p>
</li>
<li><p>两个点在原树上的路径一定经过其在边分树上的LCA所代表的边.</p>
</li>
</ol>
<h3><span id="二分图">二分图</span></h3><h4><span id="定理">定理</span></h4><h5><span id="最大流-最小割定理">最大流-最小割定理</span></h5><h5><span id="hall定理">Hall定理</span></h5><p>对于二分图$\lang V _1 , V _2 , E \rang , | V _1 | \leq | V _2 | $,那么该图存在完备匹配的充要条件是$\forall Q \subseteq V _1 , | Q | \leq | N ( Q ) | $,其中$N ( Q ) $指的是所有与$Q $中点有边相连的点的集合.</p>
<p>必要性很显然,接下来说明充分性.设$T $为最小点覆盖,也就是最大匹配的数量,再设$M $为最大匹配,此时自然有:</p>
<script type="math/tex; mode=display">
| M | = | T | = | T _1 | + | T _2 | \geq | T _1 | + | N ( V _1 / T _1 ) | \geq | T _1 | + | V _1 / T _1 | = | V _1 |</script><p>显然$| M | \leq | V _1 | $,于是$| M | = | V _1 | $.</p>
<p>另外,Hall定理有一个推论:正则二分图一定存在完美匹配.什么叫正则二分图,就是所有的点的度数(不为$0 $)都相等的图.</p>
<p>$2 ^d $-正则二分图求完美匹配的话,可以不断求欧拉回路并给边定向,每次把一个方向的边全都删掉,这样就转化成了$2 ^{ d - 1  } $-正则二分图,不断递归到$d = 0 $.</p>
<h5><span id="vizing定理">Vizing定理</span></h5><p>设$f ( G ) $表示将$G $边染色,使得有公共点的边的颜色不同,最少需要的颜色数量.</p>
<p>设$\delta ( G ) $表示$G $中的点的最大度数.</p>
<p>对于一般图,我们有:$\delta ( G ) \leq f ( G ) \leq \delta ( G ) + 1 $,对于二分图有$\delta ( G ) = f ( G ) $.</p>
<p>考虑这个的证明:我们每次将一对点$( x , y ) $染色,考虑设它们当前没染色的最小的颜色是$l _x , l _y ( l _x \leq l _y ) $,如果相等就直接选,不然类似增广路更新.</p>
<h4><span id="二分图最大权匹配">二分图最大权匹配</span></h4><p>假定二分图两边两两有边(不是的话可以补上$- \infty $的边),这样就一定存在完美匹配.</p>
<p>我们给每个点一个顶标权值$v $,对于任意一条边$e : a \leftrightarrow b $,它的权值是$w _e $,我们要求$v $满足$v _a + v _b \geq w _e $.</p>
<p>如果我们规定了一组顶标后,取出所有满足$v _a + v _b = w _e $的边后的图(称作相等子图)存在完美匹配,那这组完美匹配就一定是最大权匹配.</p>
<p>这是为啥呢?考虑此时的最大权其实也就是$\sum v $,而由于$v _a + v _b \geq w _e $,因此最大权匹配一定不会超过$\sum v $.这就是一个可达的上界.</p>
<p>那么我们该怎么得到一个相等子图呢?考虑先构造一组合法的顶标,让左部端点取边的最大值,右部端点取$0 $,然后开始增广.</p>
<p>从左侧任意一个非匹配点出发,在相等子图上走增广路并增广.如果增广失败,我们将访问过的左部端点全部减去$d $,右部端点全部加上$d $,注意到此时匹配边一定不会变化,因为匹配边要么两个端点都没被访问过,要么都被访问过.而左端点被访问过,右端点没被访问过的边有可能加入相等子图,我们考虑取所有这种边的需要的差值的最小值并进行更新.但是直接这么做的复杂度有点高.</p>
<p>使用bfs优化,可以发现只会扩大$O ( n ^2 ) $次子图,每次复杂度$O ( n ) $,增广的复杂度类似,于是总复杂度$O ( n ^3 ) $.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1-xvii-open-cup-named-after-ev-pankratiev-grand-prix-of-japanopenstrain-contest-1489-bpoint-pairs">Example1([ XVII Open Cup named after E.V. Pankratiev. Grand Prix of Japan(openstrain contest 1489) B]Point Pairs)</span></h5><p>看到这种要求横坐标或纵坐标相同的题,有一个自然的想法是建立二分图,对于点$( x , y ) $,将二分图左边的$x $和右边的$y $连一条边.那么配对等价于要每次找两条相邻的边删掉.那么如何删掉呢?</p>
<p>首先发现的是,二分图不同的连通块可以分开处理,我们接下来只讨论一个连通块的情况.如果这个连通块有奇数条边,显然一定不行.而又可以发现,如果这个连通块有一个点度数仅为$1 $,那这条边如何删是确定的,我们可以把它和另一条边删掉,不难发现怎么删最后得到的新图仍然联通.而如果不存在度数为$1 $的点呢?由于这是一个二分图,不存在奇环,所以我们可以找一个简单环删掉,之后显然也是一个连通块.我们到这里就可以发现问题了.运用数学归纳不难证明:只要一个连通块的边数是偶数就一定合法.</p>
<p>然后我们可以使用可撤销的分治解决这个问题.</p>
<h3><span id="网络流常见模型">网络流常见模型</span></h3><h4><span id="最大流">最大流</span></h4><h4><span id="最小费用最大流">最小费用最大流</span></h4><h4><span id="最小割">最小割</span></h4><p>最大流$= $最小割,证明显然.</p>
<p>最小割求方案。这个是简单的，我们删去所有流量$0 $的边后从$S $开始bfs，找到所有$S $能到达的点，显然这些点（注意如果这个点一开始就不能到达$T $，那它是废物，不用管它，下面只讨论它能到达$T $的情况）组成一个SCC（为啥呢？首先$S $能到达它们，其次由于是最小割，因此这个点一定到达不了$T $，而原本是可以到达$T $的，假设这个点是$x $，那么一定是原本存在一条$S \rightarrow x \rightarrow T $的路径被割掉了，也就是现在一定存在一条$x \rightarrow S $的路径）。最小割包含的边一定是这个集合和其它集合交界处的边。这是为啥呢？首先这些边一定组成了原图的一个割，其次，我们发现割不可能存在$S $所在SCC中，而割掉完全不连接$S $的边可以发现不如割其中一个点在$S $所在SCC的边。</p>
<h5><span id="example1luogup4313-文理分科">Example1(luoguP4313 文理分科)</span></h5><p>先把所有的满意值全部吃下,然后考虑放弃哪些.</p>
<p>对于每个人$u $,将$S $向他连一条流量为$art $的边,它向$T $连一条为$science $的边,表示它自己要么放弃文科,要么放弃理科.</p>
<p>然后再对每个点建立一个虚点$u ‘ $,$S $向$u ‘ $连一条为$sameart $的边,$u ‘ $向相邻的实点连$\infty $的边,表示要么放弃$sameart $,要么那些点全都放弃理科.$samescience $是同理的.</p>
<p>从这也可以看出来,大部分最小割的题目其实就是将冲突的选项放到一条路径中,然后考虑放弃哪些,将这个限制用最小割表示出来.</p>
<h5><span id="example2hnoi2013切糕">Example2([HNOI2013]切糕)</span></h5><p>也是显然的最小割,唯一难处理的地方在于相差$\leq D $.</p>
<p>这个怎么做呢?建图后先每一竖轴都变成了一条链,我们在链之间加一些$\infty $的边,使得如果断开的两个点之差大于$D $,那就可以通过这条边破坏最小割结构.</p>
<p>这题同样告诉我们:对于最小割题目中的限制条件,几乎都是需要考虑破坏最小割结构的(也有可能是用费用流限制).</p>
<h5><span id="example3uoj704">Example3(uoj704)</span></h5><p>二分图最小割计数.</p>
<p>先求出最小割,然后显然每个匹配的三条边一定会选择一条割掉.</p>
<p>不妨设$a _i = 0 / 1 / 2 $表示第$i $对匹配割掉了哪一条边.</p>
<p>考虑每个非匹配边$( u , v ) $对点权的限制:</p>
<ol>
<li><p>$u $在最大匹配$i $中,$v $不在.则$a _i = 0 $.</p>
</li>
<li><p>$v $在最大匹配$i $中,$u $不在,则$a _i = 2 $.</p>
</li>
<li><p>$u $在最大匹配$i $中,$v $在最大匹配$j $中,则$a _i = 0 $或$a _j = 2 $.</p>
</li>
</ol>
<p>前两种是好处理的,考虑第三种:显然所有都选$2 $或所有都选$0 $是一种方案,更进一步地,我们将$i \rightarrow j $,那么在一个强连通分量中的点一定都是$2 $或都是$0 $.这样可以缩点,缩点后发现DAG上的每一条路径的染色都形如$0 , 0 , 0 , \cdots , 0 , ( 1 ) , 2 , \cdots , 2 , 2 , 2 $.</p>
<p>不妨折半搜索,按照拓扑排序,确定前一半哪些是$0 $,剩下是$1 / 2 $,那他们的后继必然全都是$2 $,这样后面的是$2 $的集合一定是这个后继集合的超集,高维后缀和.</p>
<p>接下来只需要判断哪些位置可以选$1 $.相当于前驱全都是$0 $并且后继全都是$2 $.</p>
<h4><span id="二分图匹配">二分图匹配</span></h4><h4><span id="二分图最小点覆盖">二分图最小点覆盖</span></h4><p>二分图最小点覆盖$= $二分图最小割.</p>
<p>问题在于如何求解方案.</p>
<p>我们从左侧的非匹配点开始dfs,走还有残留流量的路径.并将路径上所有的点全都打上标记.那么左侧所有的未标记点和右侧所有的标记点就是一组合法的方案.</p>
<p>这是为啥呢?首先我们注意到,左侧的非匹配点一定会被标记,右侧的非匹配点一定不会被标记.</p>
<p>为啥右侧的非匹配点一定不会被标记呢?因为如果被标记了,从左侧非匹配点到右侧非匹配点这条路径的起始边和终边就都是非匹配边,显然是一条增广路.</p>
<p>然后我们又注意到:对于一组匹配点,要么两者都被标记,要么两者都不被标记,因为一旦走到了右侧点,下一步必然走向左侧点.而如果走到了左侧点,也必然是从右侧点走过来的.</p>
<p>接下来我们讨论一下:</p>
<p>对于非匹配边,由于其必然连了一个左侧非匹配点,所以它的右边必然被选择了.</p>
<p>对于匹配边,不难发现它会被某个匹配点覆盖掉.</p>
<p>于是得证.</p>
<p>当然,上面的证明略显啰嗦.事实上我们这么考虑:</p>
<p>首先,我们按照套路,求出$S $所有能到达的点.根据二分图的性质,这个点的集合必然不包括$T $.</p>
<p>然后我们取所有不在这个点集的左侧点和所有在这个点集的右侧点,这样所有的点被分为了四个部分,边也自然被分为了四个部分,讨论一下就知道这四个部分中有一个部分是不存在边的.于是得证.</p>
<h4><span id="二分图最大独立集">二分图最大独立集</span></h4><p>二分图最大独立集$= n - $二分图最小点覆盖.</p>
<h5><span id="example1cf1404e">Example1(CF1404E)</span></h5><p>在两个可选矩形的边界处建立一个点,如果它被选了,那么说明这个矩形和上面那个矩形被一起覆盖了.然后注意到每有一个点被选,自然就多覆盖了一个矩形,显然一个矩形不可能又跟纵向的一起被覆盖又跟横向的一起被覆盖,在他俩之间连边跑最大独立集即可.</p>
<p>感觉还是类似于最小路径覆盖,将这种两个一起被覆盖就减少答案的东西转换成一整条流.</p>
<h4><span id="最大权闭合子图">最大权闭合子图</span></h4><p>原图的边流量设为$+ \infty $,然后对于每个点$x $,如果$val _x &gt; 0 $,那么$ans + = val _x $,然后将$S \rightarrow x $,流量为$val _x $;不然,$x \rightarrow T $,流量为$- val _x $,然后求出最小割$w $,答案即为$ans - w $.</p>
<h5><span id="example1luogup4177">Example1(luoguP4177)</span></h5><p>只需要把中间的$\infty $边改为租用的代价即可.</p>
<h4><span id="最小路径覆盖覆盖点">最小路径覆盖(覆盖点)</span></h4><p>将每个点$x $拆为两个点$A _x $,$B _x $,将$S $向所有$A $连边,$B $向$T $连边,如果图中存在一条路径$x \rightarrow y $,则连边$A _x \rightarrow B _y $,流量均为$1 $,然后求出最大流$w $,答案即为$n - w $.</p>
<p>还有一个版本是可以重复走点,做一遍传递闭包就行.因为可重复相当于原图上的可跳点,这个版本又叫最小链覆盖.</p>
<h5><span id="example1网络流24题魔术球问题">Example1([网络流24题]魔术球问题)</span></h5><p>枚举球数,不断在残联网络上加边并在新图跑最小路径覆盖即可.</p>
<h4><span id="最长反链">最长反链</span></h4><p>反链是一个点的集合,满足这个集合中的点两两不可达.</p>
<p>最长反链$= $可重复走点的最小点覆盖(最小链覆盖).</p>
<p>为啥呢?因为发现做完传递闭包后等价于新图的最大独立集.当然图是有性质的,观察一下可重复走点的最小点覆盖就可以发现等价于传递闭包后在二分图上求最大独立集.</p>
<h5><span id="example1cf1630fmaking-it-bipartite">Example1([CF1630F]Making It Bipartite)</span></h5><p>首先显然的一点是,对于任意一个数字$x $,这个序列中不能同时出现$px $和$pqx $,其中$p , q $都是大于等于二的正整数.这是显然的.如果我们把图改为有向图,由$x \rightarrow px $,那么整个图就只会有两种点:只有出边的点和只有入边的点.</p>
<p>那么我们该怎么办呢?如果是只能出现$x $就不能出现$px $,那这就是一个经典的最长反链问题.但多了一层,我们可以考虑类似分层图的思想:建立和原图完全一样的图$G ‘ $,并且将$G $中的$x $向$G ‘ $中的$x ‘ $连有向边,然后跑最长反链.不难发现这样做是正确的.</p>
<h4><span id="平面图最小割">平面图最小割</span></h4><p>平面图最小割$= $对偶图最短路.</p>
<h4><span id="最小费用任意流">最小费用任意流</span></h4><p>一般费用流,但是当当前增广路代价为正的就停止增广.</p>
<p>和最小费用最大流不一样,这玩意是可以增量的.</p>
<p>只需要考虑所有新的从源到汇的增广路以及增加过程出现的负环即可.</p>
<h5><span id="example1luogup4694-pa2013raper">Example1(luoguP4694 [PA2013]Raper)</span></h5><p>费用流模型很好建立,问题在于这个东西好像跑费用流有点慢.</p>
<p>那咋办呢?我们考虑到费用流是有凸性的.所以搭配一下wqs二分.</p>
<p>然后分一下三种情况讨论:</p>
<ol>
<li><p>直接$S \rightarrow T $的负增广路,相当于选取最小的$b $和当前的$a $搭配.</p>
</li>
<li><p>有一条$S \rightarrow a \rightarrow b \rightarrow a \rightarrow S $的负环,相当于以当前的$a $代替前面的某个较大的$a $.</p>
</li>
<li><p>有一条$S \rightarrow a \rightarrow b \rightarrow T \rightarrow b \rightarrow a \rightarrow S $的负环,注意到这个环必然没意义,因为不可能存在一条$T \rightarrow S $的负路径(不然反路径就是正的,而最小费用任意流不可能流正路径),所以这种情况不如直接选$S \rightarrow T $的路径.</p>
</li>
</ol>
<p>讨论完拿堆模拟一下就行.</p>
<p>这引出了著名的模拟费用流算法.</p>
<h4><span id="负费用最小流">负费用最小流</span></h4><p>一般费用流,但是当增广当前增广路时费用变成正的就停止增广.</p>
<p>注意如果两条增广路代价相同选流量大的那条.</p>
<h4><span id="有负环的费用流">有负环的费用流</span></h4><p>首先注意到:如果初始图没有负环,那无论后面怎么流都不可能出来负环.因为这意味着要么是一开始流了个正环,要么是一开始有负路径不走走正路径,都不太可能.</p>
<p>对于所有的负边$u \rightarrow v $,我们建立两个新点$S ‘ $和$T ‘ $,我们先将这条负边反向权值取相反数并让答案加上$f \times v $,之后令$u \rightarrow T ‘ , S ‘ \rightarrow v $,跑$S ‘ \rightarrow T ‘ $的费用流,这个时候再在残联网络上跑$s \rightarrow t $的费用流就是答案.</p>
<p>为啥会这样呢?</p>
<p>首先先证明正确性,这个东西相当于一开始跑了一下$T ‘ \rightarrow u \rightarrow v \rightarrow S ‘ $的图.然后我们在跑$S ‘ \rightarrow T ‘ $的时候一定是可以把上面的那个东西所从$T ‘ \rightarrow S ‘ $的所有流量全都退回去,因为这是一个可以构造的上界.也就相当于我们跑了一个环流.而在费用流里跑环流显然是不会影响答案的.</p>
<p>好,那么为啥这么做就不会出现负环了呢?因为你不可能在跑$S ‘ \rightarrow T ‘ $的时候跑个正环出来,自然不可能出现负环.</p>
<p>另外有一点是,一个点可能向$S ‘ $或$T ‘ $连很多边,其实是可以拼掉的,因为这些边全都是零权边,而构造完后的图是非负权边.</p>
<h4><span id="模拟费用流">模拟费用流</span></h4><p>对于特殊的图,模拟EK费用流的增广过程并进行操作.</p>
<p>对着例题记吧.</p>
<h5><span id="example1luogup4694-pa2013raper">Example1(luoguP4694 [PA2013]Raper)</span></h5><h4><span id="散题">散题</span></h4><h5><span id="example1cqoi2014危桥">Example1([CQOI2014]危桥)</span></h5><p>有一个朴素的想法是:我们直接按题意建图,然后$S \rightarrow a _1 , b _1 $,$T \rightarrow a _2 , b _2 $,跑最大流然后检查是否满流.</p>
<p>问题在于,这样有可能会出现$a _1 \rightarrow b _2 $的流量,我们怎么避免这种情况呢?</p>
<p>做法是,我们交换$b _1 , b _2 $并重复上面的过程,如果还是满流,我们声明一定合法.</p>
<p>为什么呢?我们注意到此时网络上的流量分为四种:$a _1 \rightarrow a _2 $,$a _1 \rightarrow b _2 $,$b _1 \rightarrow a _2 $,$b _1 \rightarrow b _2 $.不难发现$a _1 \rightarrow b _2 $和$b _1 \rightarrow a _2 $的流量是相等的.</p>
<p>在第二次跑网络流时,我们不妨直接将$a _1 \rightarrow a _2 $和$b _2 \rightarrow b _1 $的流量加入答案并将这两条路径反向.此时,如果$a _1 $还是要走到$b _1 $,你发现第一轮的时候已经找到了一条$b _1 \rightarrow a _2 $的路径,我们一定可以走这条来构造出只有$a _1 \rightarrow a _2 $的路径,另一边同理.</p>
<h3><span id="图的计数问题">图的计数问题</span></h3><h4><span id="prufer序列">Prufer序列</span></h4><p>我们可以将一颗有编号$n $个点($n \geq 2 $)的无根树与一个长度为$n - 2 $的Prufer序列建立双射.换句话说,一颗有编号$n $个节点的无根树总共有$n ^{ n - 2  } $种(Cayley公式).</p>
<p>首先证明一个树可以对应到一个序列:每次选择一个度数为$1 $的编号最小的点,把它连向的点加到序列中并把这个点删去,直到最后只剩下两个节点,这样我们就把一棵树对应到一个序列.不难发现每个点出现的次数是其度数$- 1 $.</p>
<p>然后证明一个序列可以还原成一棵树:</p>
<p>我们可以通过序列得知每个点的度数,每次找到度数中最小的那个点并把它与序列中的第一个元素连边并删去序列中的第一个元素,不断这么做显然可以还原树.</p>
<h5><span id="example">Example</span></h5><p>一个$n $个点的图有$k $个连通块,现在加入$k - 1 $条边使得图连通,求方案数.</p>
<p>令$s _i $为第$i $个连通块的点数,$d _i $为第$i $个连通块所新连上的边数,如果我们令$\binom { n  } { c _1 , c _2 , . . . , c _m  } = \cfrac { n !  } { c _1 ! c _2 ! . . . c _m !  } , \sum _{ i = 1  } ^m c _i = n \ $,也即将$n $个位置拆分成$m $个集合,第$i $个集合有$c _i $个位置的方案数.</p>
<p>那我们所需要做的也就是枚举每个连通块所新连出的边数$d _i $,于是答案即$\sum _d [ \sum d _i = 2 k - 2 ] \binom { k - 2  } { d _1 - 1 , d _2 - 1 , . . . , d _k - 1  } \prod _{ i = 1  } ^k s _i ^{ d _i  } \ $.</p>
<p>注意到我们有多项式定理:$( x _1 + x _2 + . . . + x _m ) ^n = \sum _{ c  } [ \sum c _i = n ] \binom { n  } { c _1 , c _2 , . . . , c _m  } \prod _{ i = 1  } ^m x _i ^{ c _i  } \ $.</p>
<p>于是原式$= n ^{ k - 2  } \prod _{ i = 1  } ^k s _i $.</p>
<h4><span id="prufer序列的矩阵树定理理解">Prufer序列的矩阵树定理理解</span></h4><p>事实上,Prufer序列其实是可以拿矩阵树定理代替的(但是更麻烦一点).</p>
<p>我们先考虑证明Cayley公式:构造矩阵:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
- n + 1 & 1 & \cdots & 1 \\
1 & - n + 1 & \cdots & 1 \\
\vdots & \vdots & \ddots & \vdots \\
1 & 1 & \cdots & - n + 1 
\end{bmatrix}</script><p>其主余子式为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
- n + 1 & 1 & \cdots & 1 \\
1 & - n + 1 & \cdots & 1 \\
\vdots & \vdots & \ddots & \vdots \\
1 & 1 & \cdots & - n + 1 
\end{bmatrix}</script><p>将所有行全部加到第一行:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
- 1 & - 1 & \cdots & - 1 \\
1 & - n + 1 & \cdots & 1 \\
\vdots & \vdots & \ddots & \vdots \\
1 & 1 & \cdots & - n + 1 
\end{bmatrix}</script><p>全部加下来,然后就成了上三角矩阵,将对角线乘起来就是$n ^{ n - 2  } $.</p>
<p>连通块的结论是类似的.</p>
<h4><span id="lgv引理">LGV引理</span></h4><p>设$G $是一个有限的带权有向无环图,有点集$V $的一个大小为$n $的子集$A = \{ a _1 , a _2 , . . . , a _n \} $作为起点集合,一个大小为$n $的子集$B = \{ b _1 , b _2 , . . . , b _n \} $作为终点集合.</p>
<p>记边$i $的权值为$w _i $.对于有向路径$p $,记路径上所有边的边权的乘积为$W ( p ) $.记$e ( u , v ) = \sum _{ p : u \rightarrow v  } W ( p ) $,即从$u $到$v $的所有路径的边权乘积之和.</p>
<p>记$P : A \rightarrow B = ( p _1 , p _2 , . . . , p _n ) $,$p _i $表示从$a _i $到$b _{ \sigma ( i )  } $的一条路径,其中$\sigma $是一个排列,记$sign ( \sigma ) $为$- 1 $以这个排列的逆序对数量为幂的值.又记$\sigma ( P ) $为$P $所对应终点的排列.若满足$\forall 1 \leq i , j \leq n , i \ne j $,$p _i $与$p _j $没有公共点,则记作$P ^u $,否则记作$P ^c $,若不作区分记作$P $.记$W _{ all  } ( P ) = \prod _{ i = 1  } ^n W ( p _i ) \ $,也就是所有路径的乘积.</p>
<p>设矩阵$M $满足$M _{ i , j  } = e ( a _i , b _j ) $,那么有:</p>
<script type="math/tex; mode=display">
\det M = \sum _{ P ^u : A \rightarrow B  } sign ( \sigma ( P ^u ) ) W _{ all  } ( P ^u )</script><p>证明:</p>
<p>根据行列式的定义,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det M & = \sum _{ \sigma  } sign ( \sigma ) \prod _{ i = 1  } ^n e ( a _i , b _{ \sigma ( i )  } ) \\
& = \sum _{ \sigma  } sign ( \sigma ) \prod _{ i = 1  } ^n \sum _{ p _i : a _i \rightarrow b _{ \sigma ( i )  }  } w ( p _i ) \\

\end{aligned}</script><p>考虑后面那部分,$\prod _{ i = 1  } ^n \sum _{ p _i : a _i \rightarrow b _{ \sigma ( i )  }  } w ( p _i ) \ $形如一个卷积的形式,所以这个式子等价于所有对应排列为$\sigma $的$P $的$w ( P ) $,所以有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det M & = \sum _{ \sigma  } sign ( \sigma ) ( \sum _{ P : \{ a _1 , . . . , a _n \} \rightarrow \{ b _{ \sigma ( 1 )  } , . . . , b _{ \sigma ( n )  } \}  } w ( P ) ) \\
& = \sum _{ P : A \rightarrow B  } sign ( \sigma ( P ) ) w ( P ) \\
& = \sum _{ P ^u : A \rightarrow B  } sign ( \sigma ( P ^u ) ) w ( P ^u ) + \sum _{ P ^c : A \rightarrow B  } sign ( \sigma ( P ^c ) ) w ( P ^c ) 
\end{aligned}</script><p>接下来只需证明$\sum _{ P ^c : A \rightarrow B  } sign ( \sigma ( P ^c ) ) w ( P ^c ) = 0 \ $即可.</p>
<p>设所有$P ^c $组成的集合为$E $,考虑构造一个映射$f : E \rightarrow E $满足如下条件:</p>
<ol>
<li><p>$f ( P ^c ) \ne P ^c $.</p>
</li>
<li><p>$f ( f ( P ^c ) ) = P ^c $.</p>
</li>
<li><p>$w ( f ( P ^c ) ) = w ( P ^c ) $.</p>
</li>
<li><p>$sign ( f ( P ^c ) ) = - sign ( P ^c ) $.</p>
</li>
</ol>
<p>上面的结论即得证.</p>
<p>我们不妨考虑$P ^c $中的第一对相交的路径$p _i $和$p _j $,并交换它们的终点.显然满足上述条件,于是结论得证.</p>
<h5><span id="example">Example</span></h5><p>现在有$n $个点,第$i $个点位于$( a _i , 1 ) $,需要走到$( b _i , n ) $.一个在$( x , y ) $的点可以走向$( x + 1 , y ) $或$( x , y + 1 ) $.求路径不相交的方案数.</p>
<p>路径不相交,则终点排列只有可能是$\{ 1 , 2 , . . . , n \} $,直接使用LGV引理即可.</p>
<h4><span id="矩阵树定理">矩阵树定理</span></h4><h5><span id="无向图情况">无向图情况</span></h5><p>定义无向图的度数矩阵$D ( G ) $为:$D ( G ) _{ i , j  } = \begin{cases}0 &amp; i \ne j \ \deg _{ i  } &amp; i = j \end{cases} $.</p>
<p>令$w ( i , j ) $为$i $与$j $之间直接相连的无向边个数,定义无向图的邻接矩阵$A ( G ) _{ i , j  } = \begin{cases}0 &amp; i = j \ w ( i , j ) &amp; i \ne j \end{cases} $</p>
<p>定义无向图的基尔霍夫矩阵(又称拉普拉斯矩阵)$L ( G ) = D ( G ) - A ( G ) $.</p>
<p>记$t ( G ) $为图$G $的生成树个数,那么有:$t ( G ) $等于基尔霍夫矩阵任意一个主余子式.</p>
<p>引理:无向图的基尔霍夫矩阵的任意一个代数余子式都相等.</p>
<p>证明:考虑删去第$i $行,设剩下的矩阵为$A = [ \vec { r  } _1 , \vec { r  } _2 , . . . , \vec { r  } _n ] $,根据基尔霍夫矩阵的性质,不难发现$\sum { \vec { r  } _i  } = \vec { 0  } $.$\forall 1 \leq j &lt; k \leq n $,如果我们删去第$j $列,考虑将除了第$k $列的其它列全部加到第$k $列,于是得到矩阵$[ \vec { r  } _1 , . . . , \vec { r  } _{ j - 1  } , \vec { r  } _{ j + 1  } , . . . , \vec { r  } _{ k - 1  } , - \vec { r  } _j , \vec { r  } _{ k + 1  } , . . . , \vec { r  } _n ] $.我们接下来一路将第$k $列交换到第$j + 1 $列之前并取反,我们就得到了删去第$k $列的矩阵,于是有$M _{ i , j  } = ( - 1 ) ^{ 1 + ( k - 1 ) - ( j + 1 ) + 1  } M _{ i , k  } $,也就是$C _{ i , j  } = C _{ i , k  } $,同理可证明$C _{ j , i  } = C _{ k , i  } $.</p>
<p>接下来,用$T $表示生成树的边的集合,设$w ( T ) = \prod _{ e \in T  } w ( e ) $,我们只需证明$C _{ 1 , 1  } = \sum w ( T ) $.</p>
<p>定义$\zeta ( e , u ) = v , e = \{ u , v \} $,考虑构造一个$n \times m $的矩阵$A $满足$A _{ i , j  } = \begin{cases}1 &amp; i \in e _j \land i &lt; \zeta ( e _j , i ) \ - 1 &amp; i \in e _j \land i &gt; \zeta ( e _j , i ) \ 0 &amp; other \end{cases} \ $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
AA ^T ( i , j ) & = \sum _{ k = 1  } ^m A ( i , k ) A ^T ( k , j ) \\
& = \sum _{ k = 1  } ^m A ( i , k ) A ( j , k ) \\

\end{aligned}</script><p>当$i = j $时,不难发现$AA ^T ( i , j ) = \sum _{ k = 1  } ^m [ i \in e _k ] = \deg _i $.不然,注意到显然为$- \sum _{ k = 1  } ^m [ i \in e _k ] [ j \in e _k ] $.也就是说,$AA ^T = L $.</p>
<p>定义$A $删去第一行后得到的矩阵为$B $,则$BB ^T = M _{ 1 , 1  } $.此时我们带入Cauchy-Binet公式,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
M _{ 1 , 1  } & = \sum _{ | S | = n - 1 , S \subseteq \{ 1 , 2 , . . . , m \}  } \det ( B [ S ] B ^T [ S ] ) \\
& = \sum _{ | S | = n - 1 , S \subseteq \{ 1 , 2 , . . . , m \}  } \det ( B [ S ] ) ^2 
\end{aligned}</script><p>接下来我们需要证明:如果$S $集合构成了一棵生成树,那么$\det B [ S ] = \pm 1 $.反之,$\det B [ S ] = 0 $.</p>
<p>如果集合没有构成一个生成树,则至少存在一个简单环.如果有某个点是孤立点那么答案肯定是$0 $,因此只需考虑每个点都与边连通的情况即可.</p>
<p>考虑这种情况下,如果有两条边$( u _1 , u _2 ) $和$( u _2 , u _3 ) $被选上了,那么我们可以通过列变换将它们改为$( u _1 , u _2 ) $和$( u _1 , u _3 ) $.这样不断进行下去,如果存在环,一定会出现重边选择的情况,这个时候行列式的值为$0 $.如果不存在环,那么我们可以通过这个操作得到一个菊花图.所以行列式为$\pm 1 $.</p>
<p>所以定理得证.</p>
<h6><span id="example省选联考-2020-a-卷作业题">Example([省选联考 2020 A 卷]作业题)</span></h6><p>给定一个图,设第$i $条边的权值为$w _i $,求所有生成树的$\gcd ( w _1 , . . . , w _{ n - 1  } ) \sum _{ i = 1  } ^{ n - 1  } w _i $之和.</p>
<p>首先前面的$\gcd $可以使用$\varphi * I = id $来处理.于是剩下的问题在于我们如何将一个生成树的边的和代替乘积作为贡献来求和.</p>
<p>不妨进行扩域,令$j ^2 = 0 , j \ne 0 $,这样我们可以类比复数来将每个数写作$a + bj $的模式.考虑将每条边的边权改为$w _i j + 1 $并定义新域的四则运算,取最后得到的数$a + bj $的$b $作为答案即可.</p>
<p>另外,注意到这样做复杂度$wn ^3 $,很难通过.考虑每次只当边数大于等于$n - 1 $的时候再跑行列式.不妨设$\sigma ( n ) $为$n $的因数个数,考虑如果因数很分散,那肯定复杂度很低,不然,我们有复杂度$O ( n ^3 \cfrac { \sum _{ i = 1  } ^m \sigma ( w _i )  } { n - 1  } ) $,可以通过.</p>
<h6><span id="example北京省选集训2019生成树计数">Example([北京省选集训2019]生成树计数)</span></h6><p>给定一个图,设第$i $条边的权值为$w _i $,求所有生成树的$( \sum _{ i = 1  } ^{ n - 1  } w _i ) ^k $之和.</p>
<p>考虑将第$e $条边边权改为$\sum _{ i = 0  } ^k \cfrac { w _e ^i x ^i  } { i !  } $.根据多项式定理,显然最后取$[ x ^k ] $并乘以$k ! $即可.</p>
<h5><span id="有向图情况">有向图情况</span></h5><p>定义有向图的出度矩阵$D ^{ out  } ( G ) = \begin{cases}0 &amp; i \ne j \ \deg ^{ out  } _i &amp; i = j \end{cases} $,类似地可以定义入度矩阵$D ^{ in  } ( G ) $.</p>
<p>令$cnte ( i , j ) $为从$i $直接连向$j $的有向边个数,定义有向图的邻接矩阵$A ( G ) _{ i , j  } = \begin{cases}0 &amp; i = j \ cnte ( i , j ) &amp; i \ne j \end{cases} $</p>
<p>定义有向图的出度基尔霍夫矩阵$L ^{ out  } ( G ) = D ^{ out  } ( G ) - A ( G ) $,同理可以定义其入度基尔霍夫矩阵$L ^{ in  } ( G ) $.</p>
<p>记$t ^{ root  } ( r , G ) $为图$G $以$r $为根的根向生成树($r $为根时,所有边都从儿子指向父亲)个数,同理可以定义叶向生成树个数$t ^{ leaf  } ( r , G ) $.</p>
<p>设$M ^{ out  } _{ r , r  } $为$L ^{ out  } $的主余子式,有$t ^{ root  } ( r , G ) = M ^{ out  } _{ r , r  } $.叶向同理.</p>
<p>下面只简单提到根向生成树的证明,叶向同理.</p>
<p>类似于无向图,我们考虑构造$n \times m $矩阵$A $和$( n - 1 ) \times m $矩阵$B $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A _{ i , j  } & = \begin{cases}
1 & e _j ' s \ head \ is \ i \\
- 1 & e _j ' s \ tail \ is \ i \\
0 & other 
\end{cases} \\
B _{ i , j  } & = \begin{cases}
1 & e _j ' s \ head \ is \ i \\
0 & other 
\end{cases} 
\end{aligned}</script><p>剩下的部分与无向图类似.</p>
<h4><span id="best定理">BEST定理</span></h4><p>设$ec ( G ) $为有向图$G $的欧拉回路个数,若其存在欧拉回路,则:</p>
<script type="math/tex; mode=display">
ec ( G ) = t ^{ root  } ( G , x ) \prod _{ i = 1  } ^n ( \deg _i - 1 ) !</script><p>其中$\deg _i = \deg ^{ in  } _i = \deg _i ^{ out  } $.</p>
<p>考虑如果勒令以$x $为起点,我们保留除了$x $以外每个点的最后经过的出边,最后一定会形成一棵根向树.而其他点可以随便选(由于我们勒令了每个点存在一个出边,所以不可能走到死胡同),这样的答案是$t ^{ root  } ( G , x ) \deg _x \prod _{ i = 1  } ^n ( \deg _i - 1 ) ! $.</p>
<p>但是如果没有规定起点,考虑循环重构,在我们选择不同的边当作初始边时,只需循环一下总体的顺序,就可以得到以另一条边为初始边的另一个图,所以答案要比规定起点的答案多除一个$\deg _x $.</p>
<h4><span id="格路计数问题">格路计数问题</span></h4><h5><span id="定义">定义</span></h5><ol>
<li><p>在平面直角坐标系中,横坐标和纵坐标都是整数的点称为格点,平面格路是指从一个格点到另一格点只走格点的路,格路的长度是指其所走的路的步数.</p>
</li>
<li><p>对于一条从$( 0 , 0 ) $到$( n , m ) $的格路,若其只使用了上步$U = ( 0 , 1 ) $,右步$L = ( 1 , 0 ) $,则我们称其为$( n , m ) $自由路.</p>
</li>
<li><p>记$\mathcal { F  } ( n , m ) $为$( n , m ) $自由路的集合,$F ( n , m ) = # \mathcal { F  } ( n , m ) $为$( n , m ) $自由路数量,即$\mathcal { F  } ( n , m ) $的元素个数,显然$F ( n , m ) = \binom { n + m  } { n  } \ $.</p>
</li>
<li><p>对于一条从$( 0 , 0 ) $到$( n , m ) $的自由路,若其始终不经过对角线$y = \cfrac { m  } { n  } x $下方,则我们称之为$( n , m ) - Dyck $路.</p>
</li>
<li><p>记$\mathcal { D  } ( n , m ) $为$( n , m ) $自由路的集合,$D ( n , m ) = # \mathcal { D  } ( n , m ) $为$( n , m ) $自由路数量,即$\mathcal { D  } ( n , m ) $的元素个数.</p>
</li>
<li><p>对于从$( 0 , 0 ) $到$( n , m ) $的$2 $条格路$P , Q $,其中$P = u _1 u _2 . . . u _{ n + m  } , Q = v _1 v _2 . . . v _{ n + m  } ( u _i , v _i \in { L , U  } , i = 1 , 2 , . . . , n + m ) $.若 $\exists i , u _{ i + 1  } . . . u _{ n + m  } u _1 . . . u _i = v _1 v _2 . . . v _{ n + m  } $,则我们称格路$P , Q $等价.将$P $的等价格路全集记为$[ P ] $.</p>
</li>
<li><p>对于任意格路$P $,记$P _k = u _{ k + 1  } . . . u _{ n + m  } u _1 . . . u _k $,则$[ P ] = \{ P _k | k = 1 , 2 , 3 , · · · , n + m \} $.定义$P $的周期为使得$P = P _k $的最小数$k $，用$period ( P ) $表示,则显然有$# [ P ] = period ( P ) $.</p>
</li>
</ol>
<h5><span id="定理">定理</span></h5><h4><span id="散模型">散模型</span></h4><h5><span id="多叉堆计数">多叉堆计数</span></h5><p>有一棵树,要求给每个点一个$[ 1 , n ] $的权值且不同的点权值不同,满足父亲的权值小于儿子的权值,求方案数.</p>
<p>不妨设以$u $为根节点的子树方案数为$f _u $,$u $的儿子是$v _1 , . . . , v _k $,注意到$f _u = \binom { siz _u - 1  } { siz _{ v _1  } , siz _{ v _2  } , . . . , siz _{ v _k  }  } \prod f _{ v _i  } = ( siz _u - 1 ) ! \prod _{ u \rightarrow v  } \frac { f _{ v  }  } { siz _v !  } \ $.</p>
<p>那么考虑根的答案$f _1 $,考虑不断将$f _1 $中含有的其它$f _u $向下展开,自然的,除了$1 $号点外,每个点对答案都贡献了一个$\frac { 1  } { siz  } $,而根的贡献是$( n - 1 ) ! $.</p>
<p>也就是说,$ans = ( n - 1 ) ! \prod _{ u = 2  } ^n \frac { 1  } { siz _u  } = n ! \prod _{ u = 1  } ^n \frac { 1  } { siz _u  } \ $.</p>
<h6><span id="example1agc060c-large-heap">Example1([AGC060C] Large Heap)</span></h6><p>如果没有限制,就是一个简单的多叉堆计数.</p>
<p>而有了限制怎么做呢?我们考虑把$u $到$1 $的路径和$v $到$1 $的路径归并起来,会得到一条长链.我们只要确定了长链上的元素,通过组合数以及二叉堆计数,自然可以算出不在长链上的元素的答案.而对于长链上的元素,我们可以直接设计一个$O ( n ^2 ) $的dp即可.</p>
<h6><span id="example2heoi2013sao">Example2([HEOI2013]SAO)</span></h6><p>显然给出的是一张树形图,然后每条边有一个限制表示这条边所连接的两个点哪个更大.现在给每个点一个$[ 1 , n ] $的权值且不同的点权值不同求方案数.</p>
<p>我们随便找一个点然后当成有根树做,然后如果只有父亲小于儿子的边就是简单的多叉堆计数.不然,我们可以做一个简单容斥.这样问题就又转化回多叉堆计数,容斥部分写一个树形dp就好.</p>
<p>补一下,这个树形dp没有那么简单.首先你注意到多叉堆计数是跟子树大小有关系的,所以你不能简单地设计$f _{ i , j  } $表示$i $子树内选中了$j $条边的代价,你必须加一维来处理子树大小,也就是设$f _{ u , siz , cnt  } $表示$u $所在连通块大小为$siz $,子树中总共选择了$cnt $条边的代价.</p>
<p>但是注意到这题的容斥系数是$( - 1 ) ^k $,其中$k $是选择的儿子小于父亲的数量,然后其它的要求儿子大于父亲的边随便选.你发现你选中了一条边,无非是对答案乘以一个$- 1 $,这是没有必要记录的.因此直接以$f _{ u , siz  } $的状态转移就行.</p>
<p>这个故事告诉我们别什么容斥都最后算,你能在做的过程中把$- 1 $乘上去就别惦记最后统一求和了.</p>
<h5><span id="三元环计数">三元环计数</span></h5><p>我们对原图建立一个新的有向图,在新图中,如果$u \rightarrow v $,则在原图中$\deg u &lt; \deg v $或$\deg u = \deg v \land u &lt; v $.根据自然根号,每个点的出度不会超过$O ( \sqrt { n  } ) $.</p>
<p>接下来枚举原图的一条边$u \leftrightarrow v $,只要在新的图中找到$w $满足$u \rightarrow v , u \rightarrow w , v \rightarrow w $即可.打tag做一做,复杂度$O ( n \sqrt { n  } ) $.</p>
<h5><span id="四元环计数">四元环计数</span></h5><p>仍然类似三元环计数那样建立新图.</p>
<p>考虑原图中的两条边$u \leftrightarrow v $和$u \leftrightarrow v ‘ $,我们考虑对四元环中度数最大的那个点$w $计数,对于这个$w $统计一个tag表示形如$u \leftrightarrow v \rightarrow w $的数量,每次改变$u $的时候清空一下全图tag.</p>
<h5><span id="有标号dag计数">有标号DAG计数</span></h5><p>即:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _n & = \sum _{ k = 1  } ^n \binom { n  } { k  } ( - 1 ) ^{ k - 1  } 2 ^{ k ( n - k )  } f _{ n - k  } \\

\end{aligned}</script><p>证明见反演与容斥-子集反演-Example2.</p>
<h6><span id="example1qoj5749">Example1(qoj5749)</span></h6><p>注意到一个环内部不能有任何边,那么其实也就是有标号DAG计数,只不过要乘上一个斯特林数.不妨设$g _{ n , m  } $为$n $个点$m $条边的答案,再设$G _n $为其生成函数.事实上,我们自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
G _n & = \sum _{ k = 1  } \binom { n  } { k  } \sum _{ j = 1  } ^k { k \brack j  } ( - 1 ) ^{ j - 1  } ( 1 + z ) ^{ k ( n - k )  } G _{ n - k  } \\
& = \sum _{ k = 1  } \binom { n  } { k  } ( 1 + z ) ^{ k ( n - k )  } G _{ n - k  } \sum _{ j = 1  } ^k { k \brack j  } ( - 1 ) ^{ j - 1  } \\

\end{aligned}</script><p>逆用斯特林公式,如果$n \geq 1 $:</p>
<script type="math/tex; mode=display">
\sum _{ i  } { n \brack i  } ( - 1 ) ^{ i - 1  } = ( - 1 ) \times ( - 1 ) ^{ \overline { n  }  } = [ n = 1 ]</script><p>注意到$G _1 = 1 $,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
G _n & = n ( 1 + z ) ^{ n - 1  } G _{ n - 1  } \\
& = n ! ( 1 + z ) ^{ \frac { n ( n - 1 )  } { 2  }  } \\
[ z ^m ] G _n & = n ! \binom { \frac { n ( n - 1 )  } { 2  }  } { m  } 
\end{aligned}</script>]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="kmp">KMP</span></h3><h5><span id="example1zr23省选第一轮集训day5b">Example1(zr23省选第一轮集训day5b)</span></h5><p>必须提一下的是,能用KMP的前提是可以比较两个字符串是否相等,不一定是比较两个字母相等.只要能比较两个字符串是否相等,并且已知$A = B $能快速判断是否有$A + a = B + b $,那么就可以使用KMP.并不要求$A = B $并且$a = b $才有$A + a = B + b $.</p>
<p>因此,我们取$p $的置换$q $,然后找到所有和$q $的大小关系一样的区间即可,要证明这是个等价关系,然后就可以上KMP了.</p>
<h5><span id="example2noi2014-动物园">Example2(NOI2014 动物园)</span></h5><p>自然的想法是先求border数组,然后每次暴力跳border直到当前前后缀不重叠.根据border的定义显然是对的.但这样复杂度不对.</p>
<p>另一个想法是我们能不能在做KMP的时候,直接判掉当前长度是否超过,如果超过就放弃呢?也不对,因为这样往前跳也会用到这个border数组,但往前跳有可能跳的很少.</p>
<p>因此我们先求border,再第二遍做KMP,用另一个数组,但是往前跳的时候用border跳,其他情况正常做就行.</p>
<h3><span id="border理论">border理论</span></h3><h4><span id="定理">定理</span></h4><h5><span id="定理1">定理1</span></h5><p>$s $的某个border长度为$k $等价于$| s | - k $是$s $的周期.</p>
<p>证明显然.</p>
<h5><span id="定理2周期引理">定理2(周期引理)</span></h5><p>弱周期引理:如果$p , q $是$s $的周期且$p + q \leq | s | $,那么$\gcd ( p , q ) $是$s $的周期.</p>
<p>考虑分开两面证明,不妨设$p &gt; q , r = p - q $,先证明$\forall i &gt; q , s _i = s _{ i + r  } $,事实上$s _i = s _{ i - q  } = s _{ i - q + p  } = s _{ i + r  } $.再考虑证明$i \leq | s | - p , s _i = s _{ i + r  } $,事实上$s _i = s _{ i + p  } = s _{ i + p - q  } = s _{ i + r  } $.</p>
<p>由于$p + q \leq | s | $,因此上面那个证明对所有$i $成立,由此得证.</p>
<p>强周期引理:如果$p , q $是$s $的周期且$p + q - \gcd ( p , q ) \leq | s | $,那么$\gcd ( p , q ) $是$s $的周期.</p>
<p>这个有一个生成函数证明.简单来说我们不妨设长度为$p $的那个周期的生成函数为$P ( z ) $,它是一个$p - 1 $次的生成函数.同理定义$Q ( z ) $.不妨设$S _p ( z ) = \frac { P ( z )  } { 1 - z ^p  } $,同理定义$S _q ( z ) $.</p>
<p>如果我们能说明$S _p ( z ) = S _q ( z ) $,由于这两个都是无穷项,由欧几里得算法立刻得到$\gcd ( p , q ) $是其周期.考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _p ( z ) - S _q ( z ) \\
& = \frac { P ( z )  } { 1 - z ^p  } - \frac { Q ( z )  } { 1 - z ^q  } \\
& = \frac { 1 - z ^g  } { ( 1 - z ^p ) ( 1 - z ^q )  } ( \frac { 1 - z ^q  } { 1 - z ^g  } P ( z ) - \frac { 1 - z ^p  } { 1 - z ^g  } Q ( z ) ) 
\end{aligned}</script><p>此时注意到括号里面的那个东西的次数有限,设其为$H ( z ) $,不难发现$H ( z ) $的次数是$p + q - g - 1 $.若$H ( z ) \ne 0 $,又因为$\frac { 1 - z ^g  } { ( 1 - z ^p ) ( 1 - z ^q )  } $的常数项不为$0 $,因此$\exists 0 \leq k \leq p + q - g - 1 , [ z ^k ] ( S _p ( z ) - S _q ( z ) ) \ne 0 $,但根据假设,$\forall 0 \leq k \leq n - 1 \leq p + q - g - 1 $,应该有$[ z ^k ] ( S _p ( z ) - S _q ( z ) ) = 0 $,因此$H ( z ) = 0 $,因此$S _p ( z ) = S _q ( z ) $.</p>
<h5><span id="定理3">定理3</span></h5><p>若$S $是$T $的前缀,且$T $有周期$a $,$S $有整周期$b $,$b | a , | S | \geq a $,则$T $有周期$b $.证明显然.</p>
<h5><span id="定理4">定理4</span></h5><p>若$2 | S | \geq | T | $,则$S $在$T $中的匹配位置必为等差序列.</p>
<p>证明考虑WPL就行.</p>
<h5><span id="定理5">定理5</span></h5><p>$S $的长度大于等于$\frac { n  } { 2  } $的border长度构成一个等差序列.</p>
<p>不妨设最长的border长度为$n - p $,还有一个border长度是$n - q $,$q &gt; p $,那么必有长度为$n - \gcd ( p , q ) $的border.注意到$n - p $是最长的border,则$\gcd ( p , q ) \geq p $,$p | q $.</p>
<h5><span id="定理6">定理6</span></h5><p>一个串的所有border按照长度排序后,可以被划分成$O ( \log n ) $个等差序列.</p>
<p>首先,将该串的长度$\geq \frac { n  } { 2  } $的border拿出作为一个等差序列.考虑这些中长度最小的$T $.</p>
<p>再考虑最小循环节$d $,如果$d \leq \frac { n  } { 4  } $,那么不断减小一定有$| T | \leq \frac { 3  } { 4  } n $.反之则最长border本身就$\leq \frac { 3  } { 4  } n $,于是剩下的border都是$T $的border.这样就证明了$O ( \log n ) $,事实上更紧凑的界是$\lceil \log _2 | S | \rceil $,不会证.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1poi2011okr-periodicity">Example1([POI2011]OKR-Periodicity)</span></h5><p>注意到一个事实:如果这个字符串存在长度为$k $的周期,等价于存在长度为$len - k $的border,证明是显然的.</p>
<p>考虑从小周期开始向大周期确定,首先可以用KMP求出所有前缀的最大border,然后就可以得到整个字符串的所有border.换句话说,我们实际上是在一步一步确定整个字符串的若干前缀的最大border.</p>
<p>考虑border理论,设$q $为最小周期,如果$2 q &lt; n $,也就是原串能写成$tt \cdots t ‘ $的形式.我们不妨先求$tt ‘ $对应的答案,然后在前面拼$t $.根据$\leq \frac { n  } { 2  } $的border构成等差序列的结论,这样显然是正确的.</p>
<p>如果$2 q \geq n $,此时必定有$s = tat $,其中$t $是border.考虑递归求解$t $,然后就只需要找到一个$a $满足条件,最小的$a $是全$0 $,能放的话肯定放,不然我们就放一个$0 \cdots 01 $.</p>
<p>为什么这样一定是对的呢?我们考虑什么时候全$0 $不合法:</p>
<ol>
<li><p>新增一个长度$l $的border,$l \leq | t | + | a | $:考虑$l $的最后一段是一段全$0 $,也就必然意味着$t $的最后一段是全$0 $,这么不断推下去就可以说明整个序列都是全$0 $,此时放上$0 \cdots 01 $必定合法.</p>
</li>
<li><p>新增一个长度$l $的border,$l &gt; | t | + | a | $:不妨设当前的$l $是最大的那个(最小的无意义,因为需要保证$| l | &gt; | t | $),此时最短周期必然是$d = 2 | t | + | a | - l $.由于$| t | + | a | $也是周期并且二者之和$\leq n $,因此必然有$d | ( | t | + | a | ) $.把$ta $按照$d $长度划分.如果$d \geq | a | $必有该串是全$0 $串,不然考虑此时$d = | b | + | a | $,$b $是$t $的一段后缀.考虑此时的周期必然$&lt; | b | + | a | $,首先不可能等于,如果大于的话可以平移一格.不妨假设周期比$| b | - | a | $少了$w $,那么此时必定有$b $的前$w $个字符是$0 $,但是由于$0 \cdots 01 $后面第一个$b $也往前平移了$w $格,因此它的第$w $个字符必定是$1 $,这就保证了$0 \cdots 0 1 $必定合法.</p>
</li>
</ol>
<h3><span id="sa">SA</span></h3><h5><span id="example1">Example1</span></h5><p>给定一个长度为$n $的字符串,要从中从左往右选出若干段不相交的子串,使得选出的这些串中,每个串都是上一个串的严格子串.求最多能选出多少段.$n \leq 5 \times 10 ^5 $.</p>
<p>不难发现一定有一组答案每段的长度是$k , k - 1 , \cdots , 2 , 1 $,我们不妨把串反过来,这样就是$1 , 2 , \cdots , k - 1 , k $.这样就可以设计一个简单的dp是$f _{ i , j  } $表示以$i $结尾,$i $这段长度为$j $是否可行,发现单调性后把dp状态扔进值里,$f _i $表示以$i $结尾的最大长度是多少,这样用SA做lcp就可以实现$O ( n ^2 ) $.仔细观察转移过程,我们可以二分答案,然后用主席树+SA判断答案是否可行.复杂度$O ( n \log ^2 n ) $.</p>
<p>那么怎么优化呢?我们考虑类似height的证明:$f _i \leq f _{ i - 1  } + 1 $,原因很简单,如果$f _i &gt; f _{ i - 1  } + 1 $,那么我们把$f _i $那个序列的末尾字符全部删掉,自然得到了一个以$i - 1 $结尾,长度为$f _i - 1 &gt; f _{ i - 1  } $的串,于是就可以类似height那样去掉二分,很厉害.</p>
<h3><span id="acam">ACAM</span></h3><p>用于对于每个文本串的前缀,求出它以哪些模式串为后缀.</p>
<h5><span id="example1uoj772企鹅游戏">Example1(uoj772企鹅游戏)</span></h5><p>考虑一个暴力:建出$s $的AC自动机,然后我们记录fail树结构,然后把$t $放上去跑,每次暴力向上跳fail树上的匹配节点,这样的复杂度就是$O ( \sum 匹 配 节 点 个 数 ) $.</p>
<p>但是这个复杂度是正确的.</p>
<p>为啥呢?首先对于任意节点,它在fail树上的祖先中匹配节点个数不可能超过$O ( \sqrt { L  } ) $个,这是个自然根号,因此复杂度至少是$O ( L \sqrt { L  } ) $.</p>
<p>但还没完,考虑所有长度小于等于$B $的模式串,他们会被匹配$O ( B | t | ) $次.对于所有长度大于$B $的模式串,考虑只有长度大于$B $的文本串会匹配到他们,于是复杂度$O ( \frac { L ^2  } { B ^2  } ) $,$B = L ^{ \frac { 1  } { 3  }  } $得到$O ( L ^{ \frac { 4  } { 3  }  } ) $.</p>
<h5><span id="example2loj3396-novel">Example2(loj3396 novel)</span></h5><p>offline.</p>
<h3><span id="pam">PAM</span></h3><h4><span id="引理">引理</span></h4><ol>
<li>本质不同回文串最多只有$n $个.</li>
</ol>
<p>证明:考虑类似manacher,每次将$S \rightarrow S + c $,新产生的回文串一定是$S + c $的最长回文后缀.</p>
<h4><span id="算法">算法</span></h4><p>回文自动机由转移边和fail树构成,经过一条转移边的影响是在前后均添加一个该字符,一个状态在fail树上指向它的最长回文border.</p>
<p>我们记录两个根:长度为$- 1 $的奇根和长度为$0 $的偶根,偶根的失配指针指向奇根.</p>
<p>增量构造,每次加入个新字符,然后在fail树上跳祖先直到$s _i = s _{ i - len - 1  } $.</p>
<p>继续跳这个节点,直到又遇到一个位置,那这个位置就是当前节点的fail指针所指向的点.这个操作是$O ( n ) $的,因为这个fail指针只有一个永远不会访问,另外的都会访问至少一次,在访问的时候就会均摊掉求的时候往上跳的复杂度,因为深度直接减去这玩意了.</p>
<h3><span id="sam">SAM</span></h3><ol>
<li><p>$endpos ( T ) $表示子串$T $在$S $中出现位置的末尾集合,特别地,我们设$endpos ( \emptyset ) = \{ 1 , \cdots , | S | - 1 , | S | \} $.</p>
</li>
<li><p>若两个不同的子串的$endpos $相等,则称它们为一个$endpos $等价类.</p>
</li>
</ol>
<p>下面开始证明引理:</p>
<h4><span id="引理">引理</span></h4><ol>
<li><p>字符串$s $的两个非空子串$u $和$w $的$endpos $相同(假设$| u | \leq | w | $),当且仅当字符串$u $在$s $中的每次出现,都是以$w $后缀的形式存在.</p>
</li>
<li><p>字符串$s $的两个非空子串$u $和$w $的$endpos $集合的交为空(假设$| u | \leq | w | $),当且仅当字符串$u $不是$w $的后缀.</p>
</li>
<li><p>字符串$s $的两个非空子串$u $和$w $的$endpos $集合的交为$endpos ( w ) $(假设$| u | \leq | w | $),当且仅当字符串$u $是$w $的后缀.</p>
</li>
</ol>
<p>证明都是显然的.</p>
<ol>
<li>对于一个$endpos $等价类中的子串$u $,要么$u $是这个等价类中最短的子串,要么存在一个子串$w $且$| w | + 1 = | u | $,$w $是$u $的后缀</li>
</ol>
<p>由前面的引理,容易证明.</p>
<ol>
<li>对于一个$endpos $等价类中最短的子串$w $,不妨设$v $是$w $去掉最前面的元素后得到的子串,那么$v $在另一个$endpos $等价类中,我们将$endpos ( w ) \rightarrow endpos ( v ) $,记$link ( w ) = v $或$fa ( w ) = v $,这就是后缀链接link,这些关系构成树.</li>
</ol>
<p>首先除了$\emptyset $,每个$w $的出度都是$1 $,而我们发现所有的子串都会以$\emptyset $作为祖先,这就证明了连通性.</p>
<ol>
<li>$endpos $等价类的数量有$O ( n ) $个.</li>
</ol>
<p>考虑后缀链接树,显然一个点的$endpos $集合包含它的所有儿子的$endpos $集合的并,并且它所有儿子的$endpos $集合两两无交,这等价于一个合并的过程.</p>
<h4><span id="约定">约定</span></h4><ol>
<li><p>记$longest ( v ) $为$v $这个$endpos $等价类中最长的一个字符串,记$len ( v ) $为它的长度.类似地定义$shortest ( v ) $和$minlen ( v ) $,不难发现$minlen ( v ) = len ( fa ( v ) ) + 1 $.每个节点的子串数量也就是$len ( v ) - len ( fa ( v ) ) $.</p>
</li>
<li><p>记$siz ( v ) $为$v $这个$endpos $等价类的$endpos $集合的大小.</p>
</li>
</ol>
<h4><span id="算法">算法</span></h4><p>先来捋一下整个过程:整个SAM分为两部分:</p>
<p>第一部分:后缀链接树(parent tree).</p>
<p>它的信息由下文中的fa记录.对于每一个节点:它对应一个endpos等价类,因此它拥有一个父亲节点,也就是后缀链接link指向的节点.同时它拥有一个len,表示这个endpos等价类中最长的子串的长度.</p>
<p>第二部分:trie图.</p>
<p>它的信息由下文中的son记录,表示一个endpos(设为x)通过一条trie边走到另一个endpos(设为y),不难发现x中的所有endpos+1所形成的集合包含y.我们注意这一点后,会发现只要从$\emptyset $所代表的节点不断地走trie边,最后走到的节点的对应长度的子串就是我们想要的子串.这也意味着我们要保证对应长度的子串一定在走到节点的子串集合中.另外有个结论是trie图的边数是$O ( n ) $的.这必然要求走trie走到的那个节点的$len $的长度的区间包含了这个节点的$len $的长度的区间$+ 1 $.</p>
<p>也就是说,走trie边的过程是不断在字符串后面添加字符的过程,而走link的过程是不断在字符串前面删去字符串的过程(当然,反向link自然是不断在字符串前面加上另一个字符串集合的过程).</p>
<p>下面给出构造代码.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SAM</span>&#123;</span><br><span class="line"><span class="type">int</span> fa;</span><br><span class="line"><span class="type">int</span> son[<span class="number">27</span>];</span><br><span class="line"><span class="type">int</span> len,siz;</span><br><span class="line">&#125;tr[MAXN&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cntp=<span class="number">1</span>,las=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> End[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_c</span><span class="params">(<span class="type">int</span> c,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=++cntp;</span><br><span class="line">End[i]=x;tr[x].siz=<span class="number">1</span>;<span class="comment">//新建一个endpos=&#123;i&#125;</span></span><br><span class="line"><span class="comment">//End[i]存的是前缀[1,i]的结束位置,由于我们当前正在插入i,自然是x.</span></span><br><span class="line"><span class="type">int</span> prex=las;</span><br><span class="line">las=cntp;</span><br><span class="line"><span class="comment">//las存储的是当前的终止节点,其实也就是End[i],我们每次要找到上一次的终止节点,根据它来操作.</span></span><br><span class="line">tr[x].len=tr[prex].len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;prex&amp;&amp;tr[prex].son[c]==<span class="number">0</span>;prex=tr[prex].fa)tr[prex].son[c]=x;</span><br><span class="line"><span class="comment">//考虑当前的串:[1,i-1]+&#x27;c&#x27;,如果前面存在一个endpos集合包含[j,i-1](这个集合可能是空子串所在的集合)并且它存在一条&#x27;c&#x27;边,那么就存在这么一个子串[j,i-1]+&#x27;c&#x27;,它的endpos应该是&#123;i&#125;这个集合的祖先.</span></span><br><span class="line"><span class="comment">//如果在判断[j,i-1]的时候,发现[j,i-1]+&#x27;c&#x27;在原串中不存在,那么我们就直接连过来.可以发现在这个跳跃的过程中就是不断探索当前x的shortest的过程.</span></span><br><span class="line"><span class="keyword">if</span>(!prex)&#123;</span><br><span class="line"><span class="comment">//说明一直到最后都没有找到字母c,这也意味着c在前面根本没出现过,于是endpos=&#123;i&#125;的等价类是[1,i],[2,i],...,[i,i],所以父亲设为1.</span></span><br><span class="line">tr[x].fa=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> y=tr[prex].son[c];</span><br><span class="line"><span class="comment">//考虑这里的prex到底是什么意义,它意味着我们找到了一个最长的[j,i-1]的子串所在的endpos集合,并且[j,i-1]+&#x27;c&#x27;这个子串在原串存在,这也意味着[j,i-1]+&#x27;c&#x27;这个子串所在的endpos集合必然真包含&#123;i&#125;,而这个子串的长度是tr[prex].len+1.</span></span><br><span class="line"><span class="keyword">if</span>(tr[y].len==tr[prex].len+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果y这个节点的长度恰好也是tr[prex].len+1,那么必然意味着[j,i]这个子串完全就在y这里,而[j-1,i]这些子串不在y这里,但被y表示的endpos集合包含.</span></span><br><span class="line">tr[x].fa=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//反之,这里y这个节点的endpos集合就可以分成两部分了:第一部分的endpos集合在加入[j,i]这个子串后不变:因为它们的长度都大于tr[prex].len+1,它们必然不可能存在一个endpos是i.而第二部分,其实也只包含一个子串:就是长度等于tr[prex].len+1的子串,它的endpos集合必然是第一部分的endpos集合并上&#123;i&#125;,根据我们上面所发现的parent tree的本质是合并endpos集合的性质,它应该是第一部分以及&#123;i&#125;的父亲(也就是这两部分合并的结果),我们把第二部分拿出来单独建点.</span></span><br><span class="line"><span class="type">int</span> fay=++cntp;</span><br><span class="line">tr[fay]=tr[y];</span><br><span class="line">tr[fay].len=tr[prex].len+<span class="number">1</span>;</span><br><span class="line">tr[y].fa=tr[x].fa=fay;</span><br><span class="line"><span class="keyword">for</span>(;prex&amp;&amp;tr[prex].son[c]==y;prex=tr[prex].fa)tr[prex].son[c]=fay;</span><br><span class="line"><span class="comment">//注意单独建点后,原本指向y的trie边要改向.这是为什么呢?考虑当前这条边是什么意义:它必然指向一个endpos集合要包含&#123;i&#125;的点,因为这样才能保证trie图的性质.此时指向y的点就不能是包含&#123;i-1&#125;的点了.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> que[MAXN&lt;&lt;<span class="number">1</span>],l,r;</span><br><span class="line"><span class="type">int</span> ind[MAXn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">work_siz</span><span class="params">()</span></span>&#123;<span class="comment">//通过一次拓扑排序处理出siz</span></span><br><span class="line">l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line">++ind[tr[i].fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(ind[i]==<span class="number">0</span>)que[++r]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> x=que[l];++l;</span><br><span class="line">tr[tr[x].fa].siz+=tr[x].siz;</span><br><span class="line">--ind[tr[x].fa];</span><br><span class="line"><span class="keyword">if</span>(ind[tr[x].fa]==<span class="number">0</span>)que[++r]=tr[x].fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实还是省掉了很多说明:比如这里的复杂度证明以及边数证明,但是我们咕了吧.</p>
<h4><span id="应用">应用</span></h4><h5><span id="检查字符串是否出现">检查字符串是否出现</span></h5><p>从根开始跳trie边就行.</p>
<h5><span id="不同子串个数">不同子串个数</span></h5><p>显然是$\sum len _i - len _{ fa _i  } $.</p>
<h4><span id="例题">例题</span></h4><h5><span id="example1">Example1</span></h5><p>给出一个长度为$n $的小写字母串,你需要计算有多少对非空字符串$( A , B ) $满足:</p>
<ol>
<li><p>$AB $是原串的子串.</p>
</li>
<li><p>每次$A $在原串中作为子串出现后,要么紧跟着出现一个子串$B $,要么$A $后面放不下一个子串$B $.</p>
</li>
</ol>
<p>两个字符串被认为是不同的当且仅当他们在某个位置上字母不同,$| S | \leq 2 \times 10 ^5 $.</p>
<p>首先,我们考虑确定$( AB , A ) $这个二元组,对反串建立SAM,我们自然有:</p>
<ol>
<li><p>$AB $的endpos集合是$A $的endpos集合的后缀.</p>
</li>
<li><p>$A $的endpos集合中存在的最大的不存在于$AB $的endpos集合的endpos的大小小于$| AB | $.</p>
</li>
</ol>
<p>看到这里你可能有疑问:为啥要建立反串.因为不建立反串的话$( AB , B ) $的endpos可能根本没啥区别,这个很难处理$A $.SAM最强大的武器还是在于它能快速处理endpos.</p>
<p>那么接下来我们要在SAM上判断这两件事,我们需要一些更方便判断的条件.首先一个自然的发现是,$A $的最大的endpos必然也是$AB $的最大的endpos,我们进行一个类似重链剖分的操作:将每个点的重儿子设为它所有儿子中最大的endpos最大的那个.不难发现此时的$A $与$AB $必然在同一条重链上,且$A $是$AB $的祖先.不过显然这并不能保证一定是后缀,我们开始补条件,直到补到它充要:另一个显然的条件是,设$mx _v $表示节点$v $的轻儿子中最大的endpos最大是多少,那么$A $与$AB $间的所有$mx $的最大值就是$A $的endpos集合中存在的最大的不存在于$AB $的endpos集合的endpos的大小,它需要小于$| AB | $.进一步发现这个数字必然需要小于$AB $的endpos的集合中最小的那个(不然就不是后缀),这被包含于小于$| AB | $这个条件.</p>
<p>接下来就拆重链,写单调栈就行.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>北大相关选拔数学真题汇总</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%8C%97%E5%A4%A7%E7%9B%B8%E5%85%B3%E9%80%89%E6%8B%94%E6%95%B0%E5%AD%A6%E7%9C%9F%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="2024寒假学堂部分">2024寒假学堂(部分)</span></h3><h4><span id="problem4">Problem4</span></h4><p>设$G ( x ) = ( x ^2 + x - 1 ) ^{ 100  } = \sum _{ k = 0  } ^{ 200  } a _k x ^k $,求$2 a _0 - a _1 - a _2 + 2 a _3 - a _4 - a _5 + \cdots + 2 a _{ 198  } - a _{ 199  } - a _{ 200  } $.</p>
<h5><span id="solution4">Solution4</span></h5><p>考虑求出$\sum _{ 0 \leq k \leq 66  } { a _{ 3 k  }  } $.直接取三次单位根$\omega _3 = - \frac { 1  } { 2  } + \frac { \sqrt { 3  }  } { 2  } i $,自然有$1 + \omega _3 + \omega _3 ^2 = 0 $,所以$G ( 1 ) + G ( \omega _3 ) + G ( \omega _3 ^2 ) = 3 \sum _{ 0 \leq k \leq 66  } { a _{ 3 k  }  } $.</p>
<p>所以答案显然是$G ( \omega _3 ) + G ( \omega _3 ^2 ) = ( - 2 ) ^{ 100  } + ( - 2 ) ^{ 100  } = 2 ^{ 101  } $.</p>
<h4><span id="problem10">Problem10</span></h4><p>等差数列中,$a _1 &gt; 0 $,公差$d &lt; 0 , \frac { a _{ 31  }  } { a _{ 30  }  } &lt; - 1 $,求最大的正整数$n $,使得$S _n &gt; 0 $.</p>
<h5><span id="solution10">Solution10</span></h5><p>显然$S _{ 60  } = 30 ( a _{ 30  } + a _{ 31  } ) &lt; 0 , S _{ 59  } = 59 a _{ 30  } &gt; 0 $.</p>
<h4><span id="problem11">Problem11</span></h4><p>全为整数的等差数列,$d = 4 $,求所有满足$S _n = 2024 $的$n $的和.</p>
<h5><span id="solution11">Solution11</span></h5><p>则$n ( 2 n - 2 + a _1 ) = 2024 = 2 ^3 \times 11 \times 23 $.显然只要$n | 2024 $即可.</p>
<p>所有$n $的和自然是$( 1 + 2 + 4 + 8 ) ( 1 + 11 ) ( 1 + 23 ) = 15 \times 12 \times 24 = 4320 $.</p>
<h4><span id="problem14">Problem14</span></h4><p>整数数列$U _n $满足$U _0 = 1 $,且当$n \geq 1 $的时候$U _{ n + 1  } U _{ n - 1  } = kU _n $,其中$k $是一个正整数.问能让$U _{ N  } = N $的$k $的个数有多少个,其中$N = 2024 $.</p>
<h5><span id="solution14">Solution14</span></h5><p>则$U _{ n + 1  } = \frac { kU _n  } { U _{ n - 1  }  } , \frac { U _{ n + 1  }  } { U _n  } = k \frac { U _n  } { U _{ n - 1  }  } \frac { 1  } { U _n  } $.</p>
<p>观察上面的式子,不难想到换元后求前缀积,但其实注意到我们可以直接求前缀积,设$T _n = \prod _{ k = 1  } ^n U _k , W _n = U _n \prod _{ k = 1  } ^{ n - 2  } U _k $.</p>
<p>注意到$W _n = kW _{ n - 1  } , W _1 = U _1 , W _n = k ^{ n - 1  } U _1 $.又注意到$T _n = kU _{ n - 1  } W _{ n - 1  } = kW _{ n - 1  } \frac { T _{ n - 1  }  } { T _{ n - 2  }  } = k ^{ n - 1  } U _1 \frac { T _{ n - 1  }  } { T _{ n - 2  }  } = ( k ^{ n - 1  } U _1 ) ( k ^{ n - 2  } U _1 ) \frac { 1  } { T _{ n - 3  }  } $,$T _{ n - 3  } = ( k ^{ n - 4  } U _1 ) ( k ^{ n - 5  } U _1 ) \frac { 1  } { T _{ n - 6  }  } $.所以$T _{ n  } = k ^6 T _{ n - 6  } $,所以$U $存在长度为$6 $的循环节.所以$U _{ N  } = \frac { T _N  } { T _{ N - 1  }  } = \frac { T _2  } { T _1  } = U _2 = kU _1 $.(其实直接暴力找循环节也是可以的)</p>
<p>所以$k $需要是$N $的因子.</p>
<p>哦,还不如直接找循环节,还要判断这是个整数序列.</p>
<p>设$w = U _1 $,则$U $的前六项是:$1 , w , kw , k ^2 , \frac { k ^2  } { w  } , \frac { k  } { w  } $.要求$kw = N , w | k $,所以$( 11 \times 23 ) | k $,$k \equiv 0 \pmod { 4  } $.所以$k = 4 \times 11 \times 23 $或$k = 8 \times 11 \times 23 $.</p>
<h4><span id="problem15">Problem15</span></h4><p>求使方程$\lfloor \frac { 10 ^n  } { x  } \rfloor = N = 2024 $恰有两个整数解的正整数$n $的个数.</p>
<h5><span id="solution15">Solution15</span></h5><p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
N & \leq \frac { 10 ^n  } { x  } & < N + 1 \\
xN & \leq 10 ^n & < x ( N + 1 ) \\
\frac { 10 ^n  } { N + 1  } & < x & \leq \frac { 10 ^n  } { N  } \\
\lfloor \frac { 10 ^n  } { N + 1  } \rfloor & < x & \leq \lfloor \frac { 10 ^n  } { N  } \rfloor \\
\lfloor \frac { 10 ^n  } { N  } \rfloor - \lfloor \frac { 10 ^n  } { N + 1  } \rfloor & = 2 \\
\frac { 10 ^n  } { N ( N + 1 )  } - \frac { 10 ^n \bmod N  } { N  } + \frac { 10 ^n \bmod { ( N + 1 )  }  } { N + 1  } & = 2 
\end{aligned}</script><p>显然$\lfloor \frac { 10 ^n  } { N ( N + 1 )  } \rfloor = 1 , 2 , 3 $.而$N ( N + 1 ) = 4098600 $,所以只有$n = 7 $可能满足条件,带入检验可行.</p>
<h4><span id="problem18">Problem18</span></h4><p>用六种颜色给正方形六个面染色,旋转平移后相同算一种方案,要求每个面颜色都不同,求方案数.</p>
<h5><span id="solution18">Solution18</span></h5><p>钦定一个面,然后枚举对面,中间四个是一个环,方案数是$5 \times 3 ! = 30 $.</p>
<h4><span id="problem19">Problem19</span></h4><p>$f ( x ) = \lfloor 2 x \rfloor + \lfloor 4 x \rfloor + \lfloor 6 x \rfloor + \lfloor 8 x \rfloor , x \in \mathbb { R  } $,求其不超过$n = 2024 $的正整数取值有多少种.</p>
<h5><span id="solution19">Solution19</span></h5><p>显然$f ( x + 1 ) = f ( x ) + 20 $,因此我们先考虑$x \in [ 0 , 1 ) $的情况.</p>
<p>手动枚举一下知道此时$f ( x ) $有$12 $种不同的取值,前六种是$\{ 0 , 1 , 2 , 4 , 5 , 6 \} $,后六种对应了前六种$+ 10 $.而$2024 = 101 \times 20 + 4 $,所以共有$101 \times 12 - 1 + 4 = 1215 $种取值.</p>
<h4><span id="problem20">Problem20</span></h4><p>从$[ 1 , n ] , n = 2024 $中分别独立随机两个正整数(可以相同)$a , b $,则求$3 ^a + 7 ^b \equiv 8 \pmod { 10  } $的概率.</p>
<h5><span id="solution20">Solution20</span></h5><p>考虑$\varphi ( 10 ) = 4 $,所以原题答案等价于$n = 4 $的时候的答案.在这$16 $中可能性中满足条件的只有三种,概率为$\frac { 3  } { 16  } $.</p>
<h3><span id="2023强基部分">2023强基(部分)</span></h3><h4><span id="problem3">Problem3</span></h4><p>已知$a _1 = \frac { 5  } { 2  } , a _{ n + 1  } = a _n ^2 - 2 $,求$\lfloor a _n \rfloor \bmod 7 , n = 2023 $.</p>
<h5><span id="solution3">Solution3</span></h5><p>这个一看就不是好解的,想都别想直接数学归纳,注意到$a _n = \frac { 4 ^{ 2 ^{ n - 1  }  } + 1  } { 2 ^{ 2 ^{ n - 1  }  }  } $,那么$\lfloor a _n \rfloor = 2 ^{ 2 ^{ n - 1  }  } $.</p>
<p>而$\varphi ( 7 ) = 6 , \varphi ( 6 ) = 2 $.由扩展欧拉定理,立刻有:$2 ^{ 2 ^{ 2022  }  } \equiv 2 ^{ 2 ^{ 2022  } \bmod 6  } \equiv 2 ^{ 2 ^{ 6  }  } \equiv 16 \equiv 2 \pmod { 7  } $.</p>
<h4><span id="problem4">Problem4</span></h4><p>$50 $个队伍两两打比赛,胜一场积分$+ 1 $,负一场积分不变,无平局.</p>
<p>且任取$27 $支队伍,其中一定有一支队伍负于其它的$26 $支,也一定有一支队伍胜于其它的$26 $支.</p>
<p>问$50 $支队伍最少有多少种不同的积分.</p>
<h5><span id="solution4">Solution4</span></h5><p>答案是$50 $.</p>
<p>因为是竞赛图,缩点之后是一条链.</p>
<p>如果所有强连通分量的大小都$\leq 27 $的话,显然我们全选一个强连通分量就完蛋了.因此所有的强连通分量的大小都$&gt; 27 $,唯一的可能是所有点在一个强连通分量中,我们在其中取出一个长度为$k $的简单环,由鸽笼原理,剩下的$n - k $个点中至少有$\frac { n - k  } { 2  } $个点对着$k $个点只输或者只赢(如果有输有赢就无所谓了),这样的话只需要$k + \frac { n - k  } { 2  } \geq 27 $即可,此时$k \geq 4 $即可.由于这是竞赛图,显然存在长度为$4 $的简单环.</p>
<p>还有一种更简单的做法,考虑取一个积分最多的点,假设为$u $.我们任意取一个击败过它的点(如果有的话),假设为$v $,再取$25 $个被$u $击败的点(显然这些点存在),设这些点集为$S $.则$u , v , S $组成的集合中,有一个点可以击败其它所有点,根据假设,只能是$v $.由此,可以知道,只要是$u $能击败的点,$v $一定能击败,而且$v $能击败$u $,因此$\deg _v &gt; \deg _u $,与假设不符.因此一定不存在一个$v $可以击败$u $.删掉$u $后做数学归纳,可知原图一定是拓扑图.</p>
<h4><span id="problem8">Problem8</span></h4><p>一只蚂蚁第一天在$( 0 , 0 ) $,第$k + 1 $天向上下左右随机一个方向移动$\frac { 1  } { 4 ^k  } $单位,求第$n $天的可能位置数量,$n = 2023 $.</p>
<h5><span id="solution8">Solution8</span></h5><p>不妨设第$n $天不同位置数量为$S _n $,显然只要前面岔开了,后面永远无法走到一个点.所以$S _1 = 1 , S _{ n + 1  } = 4 S _n , S _{ 2023  } = 4 ^{ 2022  } $.</p>
<h4><span id="problem10">Problem10</span></h4><p>集合$U = \{ 1 , 2 , \cdots , n \} , n = 10 $,求$U $中的满足元素两两互素的三元子集个数.</p>
<h5><span id="solution10">Solution10</span></h5><p>集合是无序的,这个很难搞,我们先从$U $中把$1 $去掉最后再加上.</p>
<p>先考虑可以重复放$1 $的情况:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n \sum _{ j = 1  } ^{ n  } \sum _{ k = 1  } ^{ n  } [ \gcd ( i , j ) & = 1 ] [ \gcd ( i , k ) & = 1 ] [ \gcd ( j , k ) & = 1 ] \\

\end{aligned}</script><p>这个推下去感觉就头大了,退一步考虑暴力算吧.</p>
<p>先考虑全是奇数的情况,只能从$1 , 3 , 5 , 7 , 9 $中选,答案应该是$1 + 2 \binom { 3  } { 2  } = 7 $.</p>
<p>接下来考虑选一个偶数,如果选$2 , 4 , 8 $是等价的,答案此时是$3 ( \binom { 5  } { 2  } - 1 ) = 27 $.如果选$6 $的话答案是$\binom { 3  } { 2  } = 3 $.如果选$10 $的话方案数是$\binom { 4  } { 2  } - 1 = 5 $,加起来方案数是$42 $.</p>
<h4><span id="problem11">Problem11</span></h4><p>集合$U = \{ 1 , 2 , \cdots , n \} , n = 366 $,则$U $的互不相交且各元素之和为$17 $的倍数的二元子集最多有多少个?</p>
<h5><span id="solution11">Solution11</span></h5><p>考虑$\lfloor \frac { 366  } { 17  } \rfloor = 21 , 366 \equiv 9 \pmod { 17  } $.答案显然是$21 \times 8 + 10 + 1 = 179 $个.</p>
<h4><span id="problem12">Problem12</span></h4><p>三个互不相同的数的$\gcd = 20 , \text { lcm  } = 20000 $,求选取这三个数的方案数(顺序不同算不同的方案).</p>
<h5><span id="solution12">Solution12</span></h5><p>显然等价于$\gcd = 1 , \text { lcm  } = 1000 = 2 ^3 \times 5 ^3 $.先只分析其中一个质因子,方案应该是$( 0 , 0 , 3 ) , ( 0 , 1 , 3 ) , ( 0 , 2 , 3 ) , ( 0 , 3 , 3 ) $,打乱一下顺序的话就共有$3 + 6 + 6 + 3 = 18 $种方案.如果可以重复,平方一下得到$324 $.</p>
<p>接下来去掉重复的情况,只有可能两个质因子都相同才会重复,拿上面的三元组算一下,此时方案数共有$2 \times 2 \times 3 = 12 $种,于是答案为$312 $.</p>
<h4><span id="problem14">Problem14</span></h4><p>求$\lfloor \frac { k ^2  } { n  } \rfloor , k \in [ 1 , n ] , n = 2023 $种有多少个不同的元素.</p>
<h5><span id="solution14">Solution14</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\lfloor \frac { k ^2  } { n  } \rfloor & = d \\
d & \leq \frac { k ^2  } { n  } & < d + 1 \\
nd & \leq k ^2 & < n ( d + 1 ) 
\end{aligned}</script><p>由于两个完全平方数的差是固定的,不妨猜测存在一个$k _0 $,$\leq k _0 $的$k $会扎堆,但是这些$d $全都能取到,$&gt; k _0 $的则不会有两个$k $得到相同的元素.所以前者统计不同的$d $,后者统计不同的$k $考虑$( k + 1 ) ^2 - k ^2 = 2 k + 1 $.分界线应该是$k _0 = 1011 $.</p>
<p>所以答案应该是$n - k _0 + \lfloor \frac { k _0 ^2  } { 2 k _0 + 1  } \rfloor + 1 = 1012 + 506 = 1518 $.</p>
<h4><span id="problem15">Problem15</span></h4><p>对四元组$( a , b , c , d ) $计数,满足$101 | ( a + b + c + d ) $且$0 &lt; a &lt; b &lt; c &lt; d \leq 101 $.</p>
<h5><span id="solution15">Solution15</span></h5><p>这题真的厉害啊.</p>
<p>不妨设$S _k $为满足$( a + b + c + d ) \equiv k \pmod { 101  } $的满足$0 &lt; a &lt; b &lt; c &lt; d \leq 101 $的四元组数量.不难发现$\sum S _k = \binom { 101  } { 4  } $.</p>
<p>注意到$( a , b , c , d ) \mapsto ( a + 1 , b + 1 , c + 1 , d + 1 ) $,注意这里是$\pmod { 101  } $意义下的加法,这是一个双射,所以$S _{ k  } = S _{ k + 4  } $,下标同样也是$\pmod { 101  } $意义下进行的.又因为$\gcd ( 101 , 4 ) = 1 $,所以所有的$S _k $均相等.$S _0 = \frac { \binom { 101  } { 4  }  } { 101  } = 40425 $.</p>
<h4><span id="problem16">Problem16</span></h4><p>问方程$x \lfloor x \rfloor = 6 $的解的个数.</p>
<h5><span id="solution16">Solution16</span></h5><p>$6 = x \lfloor x \rfloor \geq \lfloor x \rfloor ^2 $,所以$\lfloor x \rfloor = \pm 1 , \pm 2 $.显然都不可以.所以个数为$0 $.</p>
<h4><span id="problem17">Problem17</span></h4><p>设$R ( n ) = \sum _{ k = 2  } ^{ 10  } ( n \bmod k ) $,求满足$R ( n ) = R ( n + 1 ) $的十进制下的两位数$n $的个数.</p>
<h5><span id="solution17">Solution17</span></h5><p>从$R ( n ) $到$R ( n + 1 ) $,应该是加了若干个$1 $,然后又丢了几个$k - 1 $这样的.那就一定需要丢掉的数字之和为$9 $.枚举一下,丢了的只有可能是以下情况:$( 9 ) , ( 7 + 2 ) , ( 6 + 3 ) , ( 5 + 4 ) , ( 4 + 3 + 2 ) $,分别对应了$n + 1 $应该是分别以下数的倍数$( 9 ) , ( 14 ) , ( 6 ) , ( 20 ) , ( 12 ) $,并且和分别要求不是另一些数的倍数,这就去掉了其中的若干个,最后剩下的是:$( 7 + 2 ) $,并且分别不能是以下数字的倍数$( 3 , 4 , 5 ) $.</p>
<p>取一下的话$n + 1 $可以是:$14 , 98 $,$n = 13 , 97 $,验证一下均合法,所以答案为$2 $.</p>
<h4><span id="problem18">Problem18</span></h4><p>已知$a &lt; b &lt; c &lt; d $,而$x , y , z , w $是$a , b , c , d $的一个排列,求$( x - y ) ^2 + ( y - z ) ^2 + ( z - w ) ^2 + ( w - x ) ^2 $得到的不同数个数.</p>
<h5><span id="solution18">Solution18</span></h5><p>圆排列个数是$3 ! = 6 $个,只需要判掉相同的圆排列即可.</p>
<p>显然翻转后是相同的,所以最多有三个不同数,排列分别是$( x , y , z , w ) , ( x , z , w , y ) , ( x , w , y , z ) $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x - y ) ^2 + ( y - z ) ^2 + ( z - w ) ^2 + ( w - x ) ^2 \\
& = 2 ( x ^2 + z ^2 + y ^2 + w ^2 ) - 2 ( xy + yz + zw + wx ) 
\end{aligned}</script><p>显然只要$xy + yz + zw + wx $不同,那么两个数就不同.不难判断上面三个数互不相同.</p>
<h4><span id="problem19">Problem19</span></h4><p>已知$0 &lt; x _1 &lt; x _2 &lt; \cdots &lt; x _9 $且$\sum _{ k = 1  } ^9 x _k = 220 $,在$\sum _{ k = 1  } ^5 x _k $最大的前提下,最小化$x _9 - x _1 $.</p>
<h5><span id="solution19">Solution19</span></h5><p>不妨枚举一下$x _5 $选啥,设$f ( S , m , k ) $表示选出$k $个互不相同的数,使得它们$\leq m $且总和为$S $,是否可行.不难发现$f ( S , m , k ) = [ \frac { k ( k + 1 )  } { 2  } \leq S \leq \frac { k ( 2 m - k + 1 )  } { 2  } ] $.</p>
<p>那我们要求的就是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\max _{ 5 \leq x _5  } \{ S | f ( 220 - 4 x _5 - S , + \infty , 4 ) & = 1 \land f ( S - x _5 , x _5 - 1 , 4 ) & = 1 \} \\
& = \max _{ 5 \leq x _5  } \{ S | 4 x _5 + S & \leq 210 \land 10 + x _5 & \leq S & \leq 5 x _5 - 10 \} \\
& = \max _{ 5 \leq x _5  } ( \min \{ 5 x _5 - 10 , 210 - 4 x _5 \} ) 
\end{aligned}</script><p>立刻得到$x _5 = 24 , 25 , S = 110 $,那么后面的选法就一定了,后面四个数一定是$26 , 27 , 28 , 29 $,只需要让$x _1 $最大即可</p>
<p>$x _5 = 24 $时,此时最优显然是$20 , 21 , 22 , 23 , 24 , 26 , 27 , 28 , 29 $,$x _9 - x _1 = 9 $.</p>
<h4><span id="problem20">Problem20</span></h4><p>有一个$n $边形,其中有$\binom { n  } { 2  } $条对角线,不存在三线交于一点的情况,问这些对角线将该$n $边形分成了多少个部分.$n = 10 $.</p>
<h5><span id="solution20">Solution20</span></h5><p>平面图同样符合欧拉定理.</p>
<p>考虑内部一定多出来了$\binom { n  } { 4  } $个点(任意四个点有且只有一种交法),每交一个点就会多出$2 $条边,所以多出来了$2 \binom { n  } { 4  } + \frac { n ( n - 3 )  } { 2  } $条边.</p>
<p>考虑内部的若干个部分一定是$a _3 $个三角形,$a _4 $个四边形,…,$a _k $个$k $边形,总之我们发现:</p>
<script type="math/tex; mode=display">
\begin{cases}
\sum _{ j = 3  } ^k ( j - 2 ) \pi a _j = ( n - 2 ) \pi + 2 \pi \binom { n  } { 4  } \\
\sum _{ j = 3  } ^k ja _j = n + 4 \binom { n  } { 4  } + n ( n - 3 ) 
\end{cases}</script><p>两式得到:$\sum _{ j = 3  } ^k a _j = \frac { ( n - 1 ) ( n - 2 )  } { 2  } + \binom { n  } { 4  } $.</p>
<p>$n = 10 $的时候,答案为$246 $.</p>
<h3><span id="2024强基部分">2024强基(部分)</span></h3><h4><span id="problem1">Problem1</span></h4><p>求$\sum _{ i = 1  } ^n \lfloor \frac { 19 ^i  } { 20  } \rfloor \bmod 7 , n = 2024 $.</p>
<h5><span id="solution1">Solution1</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n \lfloor \frac { 19 ^i  } { 20  } \rfloor \\
& = \sum _{ i = 1  } ^n \lfloor \frac { \sum _{ k = 0  } ^i 20 ^k ( - 1 ) ^{ i - k  } \binom { i  } { k  }  } { 20  } \rfloor \\
& = - \lfloor \frac { n  } { 2  } \rfloor + \sum _{ i = 1  } ^{ n  } \frac { 19 ^i - ( - 1 ) ^i  } { 20  } \\
& = - \lfloor \frac { n  } { 2  } \rfloor + \frac { \frac { 19  } { 18  } ( 19 ^n - 1 ) - ( \frac { ( - 1 ) ^n - 1  } { 2  } )  } { 20  } 
\end{aligned}</script><p>带入$n = 2024 $并$\bmod 7 $,原式为:</p>
<script type="math/tex; mode=display">
\equiv - 4 + \frac { 5  } { 4  } ( 1 - 5 ^n ) \equiv - 4 + 3 ( 1 - 5 ^n )</script><p>注意到$2024 \bmod 6 = 2 $,原式$\equiv - 4 - 9 \equiv 1 $.</p>
<h4><span id="problem3">Problem3</span></h4><p>求长度为$n $的排列个数,使得排列中$\nexists i \in [ 1 , n - 1 ] , a _i = a _{ i + 1  } - 1 $.$n = 8 $.</p>
<h5><span id="solution3">Solution3</span></h5><p>一眼容斥,也就是每个长度为$k $的连续段的容斥系数应该是$( - 1 ) ^{ k - 1  } $.那么设分成了$w $个段,总的容斥系数应该是$( - 1 ) ^{ n - w  } $,答案就是$f _{ n ‘  } = \sum _{ w = 1  } ^n ( - 1 ) ^{ n - w  } w ! \binom { n - 1  } { w - 1  } = \sum _{ w = 0  } ^{ n ‘  } ( - 1 ) ^{ n ‘ - w  } \binom { n ‘  } { w  } ( w + 1 ) ! = n ‘ ! \sum _{ w = 0  } ^{ n ‘  } \frac { ( - 1 ) ^w  } { w !  } ( n ‘ - w + 1 ) $,此时已经能算出答案是$16687 $.</p>
<p>注意到这个形式和错排非常像,类似错排去凑递推公式.设$g _n $为错排数量,显然有$f _{ n  } = nf _{ n - 1  } + g _{ n  } $,立刻算出答案是$16687 $.</p>
<h4><span id="problem4">Problem4</span></h4><p>已知数列$1 , 2 , 2 , 3 , 3 , 3 , 4 , 4 , 4 , 4 , \cdots $,求其第$n $项$\bmod 5 $的值,$n = 2024 $.</p>
<h5><span id="solution4">Solution4</span></h5><p>考虑第一个值为$k $的地方应该在哪里.显然$a _{ \frac { k ( k - 1 )  } { 2  } + 1  } = k $.注意到$a _{ 2081  } = 65 $,所以$a _n = 64 $,其$\bmod 5 = 4 $.</p>
<h4><span id="problem5">Problem5</span></h4><p>求四元组$( a _1 , a _2 , a _3 , a _4 ) $的个数,满足$a _1 , a _2 , a _3 , a _4 \in \{ 1 , 2 , 3 \} $,且$10 &lt; a _1 a _2 a _3 a _4 &lt; 20 $.</p>
<h5><span id="solution5">Solution5</span></h5><p>排个序按照字典序开搜,只有三种可能:$\{ 3 , 3 , 2 , 1 \} , \{ 3 , 2 , 2 , 1 \} , \{ 2 , 2 , 2 , 2 \} $,打乱顺序的话就有$25 $种可能.</p>
<h4><span id="problem8">Problem8</span></h4><p>求$\mathbb { R  } $上方程$x ^2 - 13 \lfloor x \rfloor + 11 = 0 $的解的个数.</p>
<h5><span id="solution8">Solution8</span></h5><p>首先注意到$\lfloor x \rfloor = \frac { x ^2 + 11  } { 13  } $,那么自然有方程组:</p>
<script type="math/tex; mode=display">
\begin{cases}
\frac { x ^2 + 11  } { 13  } \leq x \\
x < \frac { x ^2 + 11  } { 13  } + 1 
\end{cases}</script><p>只需要解这个方程组即可.但是这个方程组很难搞.</p>
<p>先考虑$x ^2 \equiv 2 \pmod { 13  } $这个性质,由勒让德判别符号,算出该方程在整数范围内无解.</p>
<p>没办法,只能设$x = \sqrt { 2 + 13 k  } $的形式,带入有不等式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k - x + 1 & \leq 0 & < k - x + 2 \\
1 & \leq \sqrt { 2 + 13 k  } - k & < 2 \\
\begin{cases}
0 < k ^2 - 9 k + 2 \\
k ^2 - 11 k - 1 \leq 0 
\end{cases} 
\end{aligned}</script><p>冷静一下!注意到$0 \leq k \leq 13 $,又根据第一个不等式得知大部分$k $应该会很大,开始暴力枚举一下,合法的情况有:$k = 0 , 9 , 10 , 11 $,共有四个解.</p>
<h4><span id="problem9">Problem9</span></h4><p>在一个体积为$1 $的正方体内部找一个点,过这个点作平行于正方体的面的三个平面,这样整个正方体会被分为八个长方体,最小化这八个部分中,体积$\leq \frac { 1  } { 8  } $的长方体的个数.</p>
<h5><span id="solution9">Solution9</span></h5><p>原本想考虑先横着切一刀,分为一个大部分一个小部分,大部分均分即可,小部分选一个很大的部分,剩下三个部分体积$\leq \frac { 1  } { 8  } $.考虑设这个点是$( x , x , h ) $,那么必然有$\begin{cases}( 1 - h ) x ^2 &gt; \frac { 1  } { 8  } \ h ( 1 - x ) ^2 &gt; \frac { 1  } { 8  } \end{cases} $,化简,只要$8 &gt; \frac { 1  } { x ^2  } + \frac { 1  } { ( 1 - x ) ^2  } $即可,这个根据基本不等式不可能满足,寄了.</p>
<p>但是四个肯定是好构造的,我们直接取$( 0 . 5 , 0 . 5 , 0 . 1 ) $即可.那么是不是可以证明答案一定$&gt; 3 $呢?</p>
<p>考虑一个面上的四个长方体,其中较小的两个一定是相邻的.因此,最终体积$\leq \frac { 1  } { 8  } $的长方体肯定也是相连的.接下来证明三个的不行,只需要设这个点为$( x , y , h ) , x , y , h \leq \frac { 1  } { 2  } $,然后证明$8 &gt; \frac { 1  } { xy  } + \frac { 1  } { ( 1 - x ) ( 1 - y )  } , x , y \leq \frac { 1  } { 2  } $这个不等式无解即可.</p>
<p>由基本不等式,$\frac { 1  } { xy  } + \frac { 1  } { ( 1 - x ) ( 1 - y )  } \geq 2 \sqrt { \frac { 1  } { x ( 1 - x ) y ( 1 - y )  }  } \geq 2 \sqrt { 4 \times 4  } = 8 $,不符题意.</p>
<p>这样就是最少是四个.</p>
<h4><span id="problem11">Problem11</span></h4><p>设$S ( n ) $表示正整数$n $的十进制数码和,求满足$S ( n ) \equiv S ( n + 1 ) \equiv 0 \pmod { 5  } $的最小的$n $.</p>
<h5><span id="solution11">Solution11</span></h5><p>显然必须发生进位,不妨设$n = 10 ^k a + 10 ^k - 1 $,$a \ne 9 \pmod { 10  } $,$S ( n ) = S ( a ) + 9 k , S ( n + 1 ) = S ( a ) + 1 $,</p>
<p>此时显然有$9 k - 1 \equiv 0 \pmod { 5  } $,$k \equiv 4 \pmod { 5  } $.$n _{ \min  } = 49999 $.</p>
<h4><span id="problem12">Problem12</span></h4><p>求满足以下条件的最大的正整数$n $:十进制下每一位数字互不相同,且$\forall m , 10 ^m \leq n , \lfloor \frac { n  } { 10 ^m  } \rfloor | n $.</p>
<h5><span id="solution12">Solution12</span></h5><p>显然不可能是五位数及以上,而且如果是四位数的话最后一位必然是$0 $.</p>
<p>不妨设其为$\overline { ab  } $,其中$b = 10 c $,$a $是$b $的因子,不妨枚举一下$k = \frac { b  } { a  } $.注意到因为$a $中不能有$0 $,所以$k \in \{ 2 , 4 , 5 , 8 \} $.取$k = 2 $试出来$3570 $是合法的,而且显然$k \in \{ 4 , 5 , 8 \} $的时候不可能有更大的答案了.</p>
<h4><span id="problem20">Problem20</span></h4><p>$a _1 = \sqrt { 2  } , a _{ n + 1  } = \lfloor a _n \rfloor + \frac { 1  } { a _n - \lfloor a _n \rfloor  } $,求$\sum _{ k = 1  } ^{ n  } a _k , n = 2024 $.</p>
<h5><span id="solution20">Solution20</span></h5><p>这一看就是个环,设$a _n = b _n + c _n \sqrt { 2  } $.难点显然在下取整函数.</p>
<p>没想出太好的办法,选择使用数学归纳,注意到:</p>
<script type="math/tex; mode=display">
\begin{cases}
a _1 = 0 + \sqrt { 2  } \\
a _2 = 2 + \sqrt { 2  } \\
a _3 = 4 + \sqrt { 2  } \\
\cdots 
\end{cases}</script><p>容易猜测$b _n = 2 ( n - 1 ) , c _n = 1 $.也就是$a _n = 2 ( n - 1 ) + \sqrt { 2  } $,数学归纳一下即可.</p>
<p>那么$\sum _{ k = 1  } ^n a _k = n ( n - 1 ) + n \sqrt { 2  } $,带入$n = 2024 $即可.</p>
<h3><span id="2022图选">2022图选</span></h3><h4><span id="problem1">Problem1</span></h4><p>问能否将有限个单位正方形摆放在平面上使得:</p>
<ol>
<li><p>任意两个正方形至多有一个顶点重合</p>
</li>
<li><p>每个正方形的每个顶点都与其他某个正方形的顶点重合</p>
</li>
</ol>
<h5><span id="solution1">Solution1</span></h5><p>这个题传到我这里题面已经丧失了,但反正理解起来就两种情况</p>
<ol>
<li><p>边不能相交.此时不可能.考虑扫描线,从上到下扫一条线,然后第一次扫到的最右边的那个顶点显然不可能和其它的某个正方形顶点重合.</p>
</li>
<li><p>边可以相交,放到正十二边形的边上.</p>
</li>
</ol>
<h4><span id="problem2">Problem2</span></h4><p>求$\lfloor ( \frac { 1 + \sqrt { 5  }  } { 2  } ) ^{ 12  } \rfloor $.</p>
<h5><span id="solution2">Solution2</span></h5><p>考虑$( \frac { 1 + \sqrt { 5  }  } { 2  } ) ^3 = 2 + \sqrt { 5  } $,$\lfloor ( \frac { 1 + \sqrt { 5  }  } { 2  } ) ^{ 12  } \rfloor = 161 + \lfloor 72 \sqrt { 5  } \rfloor = 321 $.</p>
<p>也可以考虑类似斐波那契数列,取$f _n = ( \frac { 1 + \sqrt { 5  }  } { 2  } ) ^{ n  } + ( \frac { 1 - \sqrt { 5  }  } { 2  } ) ^{ n  } $,其满足$f _n = f _{ n - 1  } + f _{ n - 2  } , f _0 = 2 , f _1 = 1 $,取$f _{ 12  } - 1 $就是答案$321 $.</p>
<h4><span id="problem3">Problem3</span></h4><p>对于一个加法乘法环,要求你利用:</p>
<ol>
<li><p>乘法结合律、交换律、对加法的分配律、逆元.</p>
</li>
<li><p>加法结合律、逆元.</p>
</li>
</ol>
<p>来证明加法的交换律.</p>
<h5><span id="solution3">Solution3</span></h5><p>倒反天罡题.</p>
<p>注意到$( a + 1 ) ( b + 1 ) = ( b + 1 ) ( a + 1 ) $,所以$a + b = b + a $.</p>
<h4><span id="problem4">Problem4</span></h4><p>给你$n $个数集$a _i $,其中$| a _i | = i + 1 $,要你选出$n $个两两不同的数字满足$x _i \in a _i $,求最少方案数.</p>
<h5><span id="solution4">Solution4</span></h5><p>考虑从小的往大了选,每次可能会删掉一个可选择的数字,所以是$2 ^n $.</p>
<h4><span id="problem5">Problem5</span></h4><p>Alice和Bob博弈.Alice先选一个数$m $,然后Bob选一个数$n ( n &gt; m ) $,并构造一个$n $个点的竞赛图.Alice如果能从中选出$m $个不同的点,满足不存在某个点$x $到这$m $个点都有出边,那么Alice赢,否则Bob赢.问是否有人存在必胜策略.</p>
<h5><span id="solution5">Solution5</span></h5><p>一开始以为Alice肯定赢,结果被gank了.</p>
<p>其实Bob一定赢.为啥呢?考虑一对点合法的概率,应该是$( 1 - \frac { 1  } { 2 ^m  } ) ^{ n - 2  } $,因此期望为$E = \binom { n  } { m  } ( 1 - \frac { 1  } { 2 ^m  } ) ^{ n - 2  } $,只需$n $足够大的时候期望$&lt; 1 $,则说明一定存在$0 $,也就是Bob总有必胜策略.</p>
<p>注意到只需证明$\exists n $,$\binom { n  } { m  } &lt; ( \frac { 2 ^m  } { 2 ^m - 1  } ) ^{ n - 2  } $,而$\binom { n  } { m  } = \frac { n ^{ \underline { m  }  }  } { m !  } &lt; n ^m $.下面证明$\exists n , n ^m &lt; ( \frac { 2 ^m  } { 2 ^m - 1  } ) ^{ n - 2  } $.</p>
<p>两边取$\ln $,不妨假设$n \geq 3 $,有$m \ln n &lt; ( n - 2 ) \ln ( \frac { 2 ^m  } { 2 ^m - 1  } ) , \frac { m  } { \ln ( \frac { 2 ^m  } { 2 ^m - 1  } )  } &lt; \frac { n - 2  } { \ln n  } $,$\frac { n - 2  } { \ln n  } $显然在$n \geq 3 $的时候单增,所以一定存在这么一个$n $.</p>
<h3><span id="2023图选">2023图选</span></h3><h4><span id="problem1">Problem1</span></h4><p>求单位正方形中能放下的最大的等边三角形的边长.</p>
<h5><span id="solution1">Solution1</span></h5><p>首先肯定三角形有一个角卡在正方形的角上(不然可以平移过去),而且剩下两个角肯定卡在边上.</p>
<h4><span id="problem2">Problem2</span></h4><p>求正整数拆分成有序的$1 , 2 $序列的个数.</p>
<h5><span id="solution2">Solution2</span></h5><p>显然为斐波那契数.</p>
<h4><span id="problem3">Problem3</span></h4><p>定义$* $为集合$G $上的二元运算,已知:</p>
<ol>
<li><p>满足结合律$a ∗ b ∗ c = a ∗ ( b ∗ c ) $.</p>
</li>
<li><p>存在左单位元$e $,对任意$a $满足$e ∗ a = a $.</p>
</li>
<li><p>对任意$a $存在左逆元$b $,使$b ∗ a = e $.</p>
</li>
</ol>
<p>问:</p>
<ol>
<li><p>左单位元是否也为右单位元.</p>
</li>
<li><p>左逆元是否也为右逆元.</p>
</li>
</ol>
<h5><span id="solution3">Solution3</span></h5><p>看(2),考虑设$b $是$a $的左逆元,$c $是$b $的左逆元,则$cba = ce = a , ab = ceb = e $.</p>
<p>看(1),设$b $是$a $的逆元,$ea = aba = ae $,所以左单位元也是右单位元.</p>
<p>值得一提的是,这个题如果将条件(3)改为右逆元,则不一定构成群.</p>
<p>感性理解一下改前的题,如果存在左逆元的话,说明$ab $的时候$b $不能彻底损失信息,而观察$ab = eab $知道$a $也不能损失信息,于是应该是群.</p>
<p>但怎么构造反例呢?首先得造出来左单位元对吧.答案给了一种很聪明的构造方式:考虑运算$( a _1 , b _1 ) ( a _2 , b _2 ) $,想办法让其损失掉$( a _1 , b _1 ) $中的信息(这样使其不存在左逆元,但可以构造出左幺元).注意到$( a _1 , b _1 ) ( a _2 , b _2 ) = ( a _1 + a _2 , b _2 ) $即可,存在左幺元为$( 0 , 0 ) $,右逆元为$( - a , 0 ) $.</p>
<h4><span id="problem4">Problem4</span></h4><p>$f $的定义域和值域都是正整数并且$f ( xy ) = f ( x ) + f ( y ) - 1 $,求:</p>
<ol>
<li><p>是否存在这样的函数.</p>
</li>
<li><p>是否存在无数个这样的函数.</p>
</li>
<li><p>是否存在严格递增的函数.</p>
</li>
</ol>
<h5><span id="solution4">Solution4</span></h5><p>令$g ( x ) = f ( x ) - 1 $,则$g ( xy ) = g ( x ) + g ( y ) $.</p>
<p>对于(1),取$g ( x ) = 0 , f ( x ) = 1 $即可.</p>
<p>对于(2),考虑$g ( p ^k ) = kg ( p ) $,只需要让$g ( p ) $取不同的值即可.</p>
<p>对于(3),考虑$g ( 2 ^a ) = ag ( 2 ) $,$g ( 3 ^b ) = bg ( 3 ) $.</p>
<p>考虑构造$a , b $,使得$2 ^a &lt; 3 ^b $但是$ag ( 2 ) \geq bg ( 3 ) $.不妨取$a = \lceil \frac { bg ( 3 )  } { g ( 2 )  } \rceil $,那么必定有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ^{ \lceil \frac { bg ( 3 )  } { g ( 2 )  } \rceil  } & < 3 ^b \\
\lceil \frac { bg ( 3 )  } { g ( 2 )  } \rceil & < b \log _2 3 \\
\frac { bg ( 3 )  } { g ( 2 )  } + \Delta & \leq b \log _2 3 \\

\end{aligned}</script><p>于是如果存在,必定需要$\frac { g ( p _1 )  } { g ( p _2 )  } \geq \log _{ p _2  } p _1 \land \frac { g ( p _2 )  } { g ( p _1 )  } \geq \log _{ p _1  } p _2 $,也就是$\frac { g ( p _2 )  } { g ( p _1 )  } = \log _{ p _1  } p _2 $.但是左边是有理数右边是无理数,不可能.</p>
<h4><span id="problem5">Problem5</span></h4><p>对于任意$2 n - 1 $个正整数(可重复),问其中是否一定有$n $个数的和能被$n $整除,这题$n = 50 $.</p>
<h5><span id="solution5">Solution5</span></h5><p>考虑当$n $是合数的时候,设$n = pq $,则可以将其拆成$q - 1 $组每组$2 p $个数以及一组$2 p - 1 $个数,因此只需要这些都可以找到$p $个数使得其是$p $的倍数,组合起来就行了.</p>
<p>只需要解决$n $是质数的情况.</p>
<p>感觉场上的最优解应该是解决$n = 2 $和$n = 5 $的情况然后拼成$n = 50 $.</p>
<p>$n = 2 $的时候显然是对的.</p>
<p>这谁想得到啊?</p>
<p>考虑反证,如果不存在的话,显然$S = \sum _{  } ( x _{ p _1  } + x _{ p _2  } + \cdots + x _{ p _n  } ) ^{ p - 1  } \equiv \binom { 2 n - 1  } { n  } \equiv 1 \pmod { n  } $.</p>
<p>但是考虑左边那个多项式的每一项,形如$c \prod _{ i = 1  } ^k x _{ p _i  } ^{ e _i  } $.注意到$c $一定是$\binom { 2 n - 1 - k  } { n - k  } $的倍数,而后者$\bmod n $为$0 $.</p>
<p>这玩意到底咋想到的?</p>
<p>不过其实也合理,因为$1 $并不是对称的,而左边是个对称式子,某个$x $增大也无所谓,这意味着左边应该是为$0 $的,我们要做的就是去证明它是$0 $.</p>
<h3><span id="2024图选">2024图选</span></h3><h4><span id="problem1">Problem1</span></h4><p>问在双曲线$xy = 1 $上有一个三个点都在上面的等边三角形,求其边长.</p>
<h5><span id="solution1">Solution1</span></h5><p>不会做,取个特殊值知道答案应该是$[ 2 \sqrt { 6  } , + \infty ) $.</p>
<h4><span id="problem2">Problem2</span></h4><p>我们称”能表示为两个数的平方和”的数是好的,求证:</p>
<ol>
<li><p>如果$n , m $都是好的,那么$nm $是好的.</p>
</li>
<li><p>$2024 $不是好的.</p>
</li>
</ol>
<h5><span id="solution2">Solution2</span></h5><p>如果$n = a ^2 + b ^2 , m = c ^2 + d ^2 $,那么$nm = a ^2 c ^2 + a ^2 d ^2 + b ^2 c ^2 + b ^2 d ^2 = ( ac - bd ) ^2 + ( ad + bc ) ^2 $.</p>
<p>$2024 = 2 ^3 \times 11 \times 23 $,使用反证法,不妨设其可以被表示为$a ^2 + b ^2 $.</p>
<p>讨论一下:如果$a , b $均为奇数,那么$a ^2 + b ^2 \equiv 2 \pmod { 8  } $,不符题意.</p>
<p>于是$a , b $应该均为偶数,那么就有$a ‘ ^2 + b ‘ ^2 = 506 $.简单枚举一下就知道不存在.</p>
<p>当然这个题是个数竞结论,可以直接套用结论.</p>
<h4><span id="problem3">Problem3</span></h4><p>对于集合$G $,$e \in G $,定义域为$G $的函数$f $满足以下性质:</p>
<ol>
<li><p>$e \in G $,但$e $不在$f $的值域中.</p>
</li>
<li><p>$G $关于$f $封闭.</p>
</li>
<li><p>若$\exists A \subseteq G $,$e \in A $且$A $对$f $封闭,则$A = G $.</p>
</li>
</ol>
<p>在$G $上定义二元运算$\circ $,满足$ae = a , af ( b ) = f ( ab ) $.</p>
<p>求证:</p>
<ol>
<li><p>存在幺元.</p>
</li>
<li><p>运算满足交换律.</p>
</li>
<li><p>运算满足结合律.</p>
</li>
</ol>
<h5><span id="solution3">Solution3</span></h5><p>只需要证明运算满足交换律即可.</p>
<p>考虑性质(3),我们不妨先往$A $里面扔个$e $,此时$A $一定不满足条件.我们不断从$A $中选出一个元素$w $满足$f ( w ) \notin A $,并把$A : = A \cup \{ f ( w ) \} $.不断做这个过程显然最后会得到$G $,这意味着任何一个元素$a $可以写成$f ( f ( f \cdots f ( e ) ) ) $的形式.</p>
<p>不妨将$f $函数嵌套$k $次记作$f ^{ ( k )  } $,那么我们要证明的是$a = f ^{ ( A )  } ( e ) , b = f ^{ ( B )  } ( e ) $,$ab = ba $.</p>
<p>考虑$ab = f ^{ ( A )  } ( e ) f ^{ ( B )  } ( e ) = f ^{ ( B )  } ( f ^{ ( A )  } ( e ) e ) = f ^{ ( A + B )  } ( e ) $,因此证毕.</p>
<h4><span id="problem4">Problem4</span></h4><p>给出一个具体函数满足:</p>
<ol>
<li><p>$f ( x + y ) = f ( x ) + f ( y ) + xy $.</p>
</li>
<li><p>$f ( xy ) = f ( x ) f ( y ) + f ( x - 1 ) f ( y - 1 ) $.</p>
</li>
</ol>
<h5><span id="solution4">Solution4</span></h5><p>先注意到$f ( 0 ) = 0 , f ( 1 ) = 1 $.</p>
<p>以$x $为主元两边求导,立刻得到$f ‘ ( x + y ) = f ‘ ( x ) + y $,因此$f ‘ ( x ) $是斜率为$1 $的一次函数,立刻得到$f ( x ) = \frac { x ^2  } { 2  } + \frac { x  } { 2  } $.</p>
<h4><span id="problem5">Problem5</span></h4><p>对于$r = \sqrt { 2  } $,是否存在正整数$p $和整数$q $满足$| pr - q | &lt; \frac { 1  } { 2024  } $且$p &lt; 2024 $.</p>
<h5><span id="solution5">Solution5</span></h5><p>考虑取$0 , \sqrt { 2  } , 2 \sqrt { 2  } , 3 \sqrt { 2  } , \cdots 2023 \sqrt { 2  } $的小数部分,记作$a _0 , a _1 , \cdots a _{ 2023  } $.</p>
<p>由鸽笼原理,一定存在两个数$0 \leq x &lt; y \leq 2023 $满足$| a _x - a _y | &lt; \frac { 1  } { 2024  } $,于是证毕.</p>
<h3><span id="2019茶选">2019茶选</span></h3><h4><span id="problem1">Problem1</span></h4><p>在一个数轴上,你站在$0 $点,并按照如下算法寻找$x ( x &gt; 0 ) $点处的牛:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curpos = 0;</span><br><span class="line">curdir = LEFT;</span><br><span class="line">step = 1;</span><br><span class="line">while (没有找到牛) &#123;</span><br><span class="line">沿着 curdir 方向，走 step 单位距离，如果找到牛就停止;</span><br><span class="line">如果没有找到牛，回到原点并将 curdir 设为反方向，step = step * 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大约至少需要多少步才能找到牛?</p>
<p>A. $3 x $  B. $5 x $  C. $7 x $  D. $9 x $  E. 以上答案都不对.</p>
<h5><span id="solution1">Solution1</span></h5><p>考虑找到牛的时候$step $为多少,应该为$2 ^{ 2 k  } $,其中$k $满足$2 ^{ 2 k  } \geq x &gt; 2 ^{ 2 ( k - 1 )  } $.此时走的步数应该是$ans = 2 \sum _{ i = 0  } ^{ 2 k - 1  } 2 ^i + x = 2 ^{ 2 k + 1  } - 1 + x $步.而$x \leq 2 ^{ 2 k  } &lt; 4 x $,所以$ans &lt; 9 x - 1 $.</p>
<h4><span id="problem2">Problem2</span></h4><p>给定$10 $个实数变量$x _1 , \cdots , x _{ 10  } $,满足它们均$\geq 1 $且两两不同.你要寻找一组$\{ x \} $和一个实数$a $,使得存在尽可能多组$\langle b \rangle , b _i = \pm 1 $,满足$\sum _{ i = 1  } ^{ 10  } b _i x _i \in ( a , a + 2 ) $.</p>
<p>最多存在多少组$\langle b \rangle $?</p>
<p>A. $512 $  B. $252 $  C. $504 $  D. $684 $  E.以上答案都不对.</p>
<h5><span id="solution2">Solution2</span></h5><p>不妨猜测$x $全取$1 $最优,此时的答案是$\binom { 10  } { 5  } = 252 $.</p>
<p>能不能严格证明这个事情呢?我们不妨注意到一个事情:由于$x \geq 1 $,所以如果存在两组$\langle b \rangle $,使得$A $组中选择取$+ 1 $恰好是$B $组的子集,那么$S _A \leq S _B - 2 $,不可能同时满足条件.</p>
<p>如果我们能选出若干个互不相交的集合呢?那我们显然可以让$x $尽可能接近$1 $,这样就是满足条件的.所以问题变为对于一个大小为$10 $的集合,要在其中挑选出尽可能多的子集使得这些集合两两之间没有包含关系,有结论说这个东西取$\binom { 10  } { 5  } $最优,即Sperner定理.其实也就是Dilworth定理的特例.</p>
<h4><span id="problem3">Problem3</span></h4><p>给定无向图$G = ( V , E ) $,我们称一个图是好的,如果:</p>
<ol>
<li><p>每个点的度数均为$d $.</p>
</li>
<li><p>任何一个大小不超过$\frac { | V |  } { 2  } $的联通集合$S $,其邻居(不属于$S $但和$S $中的某个点存在直接相连的边)的大小$\geq \frac { 5  } { 4  } | S | $.</p>
</li>
</ol>
<p>求证:好的图中任意两个点$u , v $之间的最短路径长度$dis ( u , v ) = O ( \log | V | ) $.</p>
<h5><span id="solution3">Solution3</span></h5><p>考虑以$u $为起点一点一点往外扩张,这样一直扩张到$\frac { | V |  } { 2  } + 1 $时,集合中每个点到$u $的距离不超过$O ( \log | V | ) $.</p>
<p>然后以$v $做同样的事,由于这两个集合大小之和大于$| V | $,说明一定有交,且存在一条路径长度为$O ( \log | V | ) $的路径,最短路径肯定比这个还短.</p>
<h4><span id="problem4">Problem4</span></h4><p>给你两个完全相同的鸡蛋和一个$n = 100 $层的高楼,你每次可以将鸡蛋从某一层楼掉下去.问你最少用多少次操作才能测出能让鸡蛋摔碎的最低楼层.</p>
<h5><span id="solution4">Solution4</span></h5><p>经典信息论题.考虑构造一棵左倾的决策树,从根到任何一个叶子节点最多向右走两步,并且有$101 $个叶子节点(因为还有可能从最高层掉下去不碎).</p>
<p>设$f _{ i , 1 / 2  } $表示一棵有$i $个叶子的树,最多向右走$1 / 2 $步,深度最低为多少.显然$f _{ i , 1  } = i - 1 $.</p>
<p>不妨设最后的最大深度为$k $,需要满足$1 + \sum _{ i = 1  } ^k i = 1 + \frac { k ( k + 1 )  } { 2  } \geq 101 , k ( k + 1 ) \geq 200 $,$k _{ \min  } = 14 $.</p>
<h4><span id="problem5">Problem5</span></h4><p>$n $个人要进行一场游戏.游戏设计者准备了$n $张卡片,正面分别写着$n $个人的名字,背面写了$[ 1 , n ] $共$n $个不同的数字.所有卡片都背面朝上放置在一个房间里.</p>
<p>当设计者准备完成后,$n $个人可以经过充分的讨论,并依次进入房间,一张一张地翻开$\lfloor \frac { n  } { 2  } \rfloor $张卡片,并找到写有自己名字的卡片.当一个人操作结束后,他无法与其他人交流直到游戏结束.</p>
<p>只有所有$n $个人全部找到了写有自己名字的卡片,他们才能获胜.请问:是否存在一种策略,使得无论设计者怎样安排名字和数字的对应,他们均拥有超过$0 . 1 $的胜率.</p>
<h5><span id="solution5">Solution5</span></h5><p>这题真理元素讲过.做法是每个人先翻开自己编号的位置的卡片,假设卡片上数字是$a $,如果$a $就是自己的编号就下班;反之接下来翻开$a $位置的卡片.为了防止设计者刻意安排,可以提前自己随机一个数字的映射.这样失败当且仅当场上存在一个长度大于$\frac { n  } { 2  } $的环.</p>
<p>考虑总方案数是$n ! $.不妨枚举这个环的长度为$K $,则存在一个长度$= K &gt; \frac { n  } { 2  } $的环的方案数是$\binom { n  } { K  } ( K - 1 ) ! ( n - K ) ! = \frac { n !  } { K  } $.所以此时的概率为$\frac { 1  } { K  } $.</p>
<p>那么失败的概率就是$H _n - H _{ \frac { n  } { 2  }  } \approx \ln 2 $.</p>
<h3><span id="2022茶选">2022茶选</span></h3><h4><span id="problem1">Problem1</span></h4><p>证明弱对偶定理,差不多就是:</p>
<p>提一个问题:最大化$z = 5 x _1 + 8 x _2 + 4 x _3 $,其中:</p>
<ol>
<li><p>$x _1 , x _2 , x _3 \geq 0 $</p>
</li>
<li><p>$\frac { 1  } { 2  } x _1 + 5 x _2 + 9 x _3 \leq 3 $</p>
</li>
<li><p>$4 x _1 + 7 x _2 + 3 x _3 \leq 6 $</p>
</li>
</ol>
<p>再提一个问题:最小化$v = 3 y _1 + 6 y _2 $,其中:</p>
<ol>
<li><p>$y _1 , y _2 \geq 0 $</p>
</li>
<li><p>$\frac { 1  } { 2  } y _1 + 4 y _2 \geq 5 $</p>
</li>
<li><p>$5 y _1 + 7 y _2 \geq 8 $</p>
</li>
<li><p>$9 y _1 + 3 y _2 \geq 4 $</p>
</li>
</ol>
<p>现在请你证明:$z \leq v $.</p>
<h5><span id="solution1">Solution1</span></h5><p>下面乘一下配一下上面的系数,自然得证.</p>
<p>写成矩阵形式,设$X = \begin{bmatrix}x _1 &amp; x _2 &amp; x _3 \end{bmatrix} , A = \begin{bmatrix}0 . 5 &amp; 4 \ 5 &amp; 7 \ 9 &amp; 3 \end{bmatrix} , Y = \begin{bmatrix}y _1 \ y _2 \end{bmatrix} $,不难发现$z \leq XAY \leq v $.</p>
<h4><span id="problem2">Problem2</span></h4><p>半径为$R $的球里放点,要求两两之间距离不能小于$1 $,证明至多放$( 2 R + 1 ) ^3 $个.</p>
<h5><span id="solution2">Solution2</span></h5><p>要求两两距离不能小于$1 $等价于往其中放半径为$0 . 5 $的球,这种球体积为$\frac { 4  } { 3  } \pi \frac { 1  } { 8  } $.然后原球要扩大一圈,所以原球体积变为$\frac { 4  } { 3  } \pi ( R + 0 . 5 ) ^3 $.除一下得到答案.</p>
<h4><span id="problem3">Problem3</span></h4><p>一个无限长的数轴上有一辆车,它的初始坐标是个未知的整数$n $.</p>
<p>它每秒以$v $的速度行驶,其中$v $是个未知的整数(可以为负).</p>
<p>现在你每秒能进行一次这样的询问:询问整数$x $,你会得知此时车的坐标是否是$x $(Yes or No).</p>
<p>请给出一个策略,使得在有限的时间里可以获得一次Yes回答.</p>
<h5><span id="solution3">Solution3</span></h5><p>第$t $秒的时候车应该在$n + vt $处.由于我们知道现在是第几秒,枚举$n , v $然后不断check即可.这个是经典的证明$\mathbb { Z  } ^2 $和$\mathbb { N  } $等势.按照$| n | + | v | $排序然后一个一个遍历.</p>
<h4><span id="problem4">Problem4</span></h4><p>对满足$\forall i , | i - p _i | \leq 1 $的排列计数.</p>
<h5><span id="solution4">Solution4</span></h5><p>简单题,设$f _n $为答案,考虑$p _n $取什么.</p>
<p>当$p _n = n $时,方案数为$f _{ n - 1  } $.</p>
<p>当$p _n = n - 1 $时,$p _{ n - 1  } = n $,方案数为$f _{ n - 2  } $.</p>
<p>于是,$f _1 = 1 , f _2 = 2 $,$f _n = f _{ n - 1  } + f _{ n - 2  } $.</p>
<h4><span id="problem5">Problem5</span></h4><p>你有一个$n \times n $的棋盘.初始所有格子都是白色的.</p>
<p>你可以选择$k $个格子染黑.此后,如果某个格子四联通的两个格子都是黑色,它自己也会变成黑色.</p>
<p>你要让所有格子最终都变黑.试证明:你一开始选择染黑的格子数$k $最小值是$n $.</p>
<h5><span id="solution5">Solution5</span></h5><p>数学归纳了半天,屁用没用.</p>
<p>注意到在扩张过程中,黑色格子的周长不会变大,所以至少是$\frac { 4 n  } { 4  } = n $个.</p>
<h4><span id="problem6">Problem6</span></h4><p>设$F = \{ S _1 , S _2 , S _3 , . . . , S _{ | F |  } \} $,定义一个集合$T $能被$F $ shattered为:$T $的任意一个子集(包括它自己和空集),都可以由$T \cap S _{ i _1  } \cap S _{ i _2  } . . . $表示.其中$S _{ i _j  } $是$F $中的集合(就是说每个子集都等于$T $和某些$F $内集合的交.)</p>
<p>定义一个$F $的”VC-Dimension”是,能被他shattered的集合$T $的大小的最大值.</p>
<p>$F $中的集合们只会包含某$n $种不同的元素.证明:</p>
<ol>
<li><p>任意一个$F $能shattered的$T $至少有$| F | $个.</p>
</li>
<li><p>对于一个VC-Dimension的大小为$k $的$F $,其$| F | \leq \sum _{ i = 0  } ^k \binom { n  } { i  } $.</p>
</li>
</ol>
<h5><span id="solution6">Solution6</span></h5><p>显然只要证明了(1),那么(2)是显然的.</p>
<p>那么怎么证明(1)呢?考虑数学归纳.先考虑拎出所有的$S $,满足$S , S \cup \{ x \} \in F $,然后将这些$S \cap \{ x \} $拎出来,假设有$t $个,左边删去$x $后再进行数学归纳得到$| F | - t $个集合(由于拎出了所有满足上述条件的集合,不可能删出重复的集合),右边也有$t $个集合,在这$t $个集合添上$x $这个元素即可.</p>
<p>$t = 0 $怎么办?我们自己造一组满足条件的就行了.每次加入一个集合:如果这个集合存在一个前面所有的集合都没有的元素,那么显然把这个元素拎出来就行了.又注意到如果一个元素全局都有的话,那么很废物对吧,我们把这个元素删掉继续做.此时不妨设新加入的集合为$S $(选取最大的那个集合为新加入的),我们在前面的集合中找到一个与$S $有交的集合$T $,根据上面的预处理,此集合显然存在.选出一个$x \in S \setminus T $,不妨设$S = S ‘ \cup \{ x \} $,令$T ‘ = S ‘ \cap T $,然后用$T ‘ $代替原本的$T $即可.</p>
<h3><span id="2023茶选">2023茶选</span></h3><h4><span id="problem1">Problem1</span></h4><p>令$p ( x ) $表示$x $的最大质因子,求所有$( x , y , z ) $使得:</p>
<ol>
<li><p>$x &lt; y &lt; z $且$x + z = 2 y $.</p>
</li>
<li><p>$p ( xyz ) \leq 3 $.</p>
</li>
</ol>
<h5><span id="solution1">Solution1</span></h5><p>不妨令$g = \gcd ( x , y , z ) $,令$x ‘ = \frac { x  } { g  } $,则只需要解:$x ‘ + z ‘ = 2 y ‘ $.</p>
<p>我们有$y - x = z - y $,则$\gcd ( y ‘ , x ‘ ) = \gcd ( y ‘ , y ‘ - x ‘ ) = \gcd ( y ‘ , z ‘ ) = 1 $,用这个能解决不少讨论.</p>
<p>此时有以下两种情况:</p>
<ol>
<li><p>$2 \nmid x ‘ , 2 \nmid z ‘ $.</p>
</li>
<li><p>$2 \mid x ‘ , 2 \mid z ‘ , 2 \nmid y ‘ $.</p>
</li>
</ol>
<p>先看(1),设$x ‘ = 3 ^a , z ‘ = 3 ^c , y ‘ = 2 ^b $.方程变为$3 ^a ( 1 + 3 ^{ c - a  } ) = 2 ^{ b + 1  } $,一定有$a = 0 $,只需解$1 + 3 ^{ c  } = 2 ^{ b + 1  } $.</p>
<p>当$b \leq 2 $的时候,经检验有$\begin{cases}c = 0 \ b = 0 \end{cases} $(舍)和$\begin{cases}c = 1 \ b = 1 \end{cases} $两组解.</p>
<p>当$b \geq 3 $的时候,注意到$3 ^{ c  } \equiv - 1 \pmod { 4  } $,所以$c $是偶数.又注意到$3 ^{ c  } \equiv - 1 \pmod { 8  } $,但是奇数的平方$\bmod 8 $应该是$1 $,不符.</p>
<p>再看(2),设$x ‘ = 2 ^d , z ‘ = 2 ^e , y ‘ = 3 ^b $.</p>
<p>当$e = 1 $时,显然不符.</p>
<p>当$d = 1 , e &gt; 1 $时,要解$2 ^{ e - 1  } + 1 = 3 ^{ b  } $.当$e = 2 $的时候有一组解$\begin{cases}e = 2 \ b = 1 \end{cases} $.当$e \geq 3 $的时候,有$3 ^b \equiv 1 \pmod { 4  } $,说明$b $是偶数.</p>
<p>那必然有$2 ^{ e - 1  } = 3 ^b - 1 = ( 3 ^{ \frac { b  } { 2  }  } + 1 ) ( 3 ^{ \frac { b  } { 2  }  } - 1 ) $.令$t = 3 ^{ \frac { b  } { 2  }  } - 1 $,则$2 ^{ e - 1  } = t ( t + 2 ) $.则要么$t = 2 $,要么$t + 2 = 2 $.解出$b - 2 $,此时有$\begin{cases}e = 4 \ b = 2 \end{cases} $.</p>
<p>综上,解出来的解有$\begin{cases}x ‘ = 2 \ y ‘ = 3 \ z ‘ = 4 \end{cases} , \begin{cases}x ‘ = 1 \ y ‘ = 2 \ z ‘ = 3 \end{cases} , \begin{cases}x ‘ = 2 \ y ‘ = 9 \ z ‘ = 16 \end{cases} $.</p>
<p>但其实有更厉害一点的做法,考虑升幂引理.</p>
<p>先看方程$2 ^x + 1 = 3 ^y $,考虑两边$\bmod 3 $知道$x $是奇数,于是$v _3 ( 2 ^x + 1 ) = v _3 ( 3 ) + v _3 ( x ) = y , 3 ^{ y - 1  } | x , x \geq 3 ^{ y - 1  } $,用这个放缩一下就行.</p>
<p>再看方程$2 ^x = 3 ^y + 1 $.仍然考虑两边$\bmod 4 $,知道$y $是奇数.$x = v _2 ( 3 ^y + 1 ) = v _2 ( 3 + 1 ) = 2 $,当场下班.</p>
<h4><span id="problem2">Problem2</span></h4><p>给定两个随机分布：</p>
<p>$x ∼ D _1 $:从${ 0 , 1 , … , p − 1  } $中等概率随机一个$y $,令$x = y   \bmod   { 2 ^k  } $.</p>
<p>$x ∼ D _1 $:从${ 0 , 1 , … , 2 ^k - 1  } $中等概率随机一个$y $,令$x = y   $.</p>
<p>定义二者的统计距离为:$SD ( D _1 , D _2 ) = \frac { 1  } { 2  } \sum _{ i = 0  } ^{ 2 ^k - 1  } | P _{ D _1  } ( x = i ) - P _{ D _2  } ( x = i ) | $.</p>
<p>求证:$SD ( D _1 , D _2 ) ≤ \frac { 2 ^k  } { 4 p  } $.</p>
<h5><span id="solution2">Solution2</span></h5><p>令$w = p \bmod { 2 ^k  } $.则$SD ( D _1 , D _2 ) = \frac { w  } { 2  } ( P _{ D _1  } ( x = 0 ) - P _{ D _2  } ( x = 0 ) ) + \frac { 2 ^k - w  } { 2  } ( P _{ D _2  } ( x = w ) - P _{ D _1  } ( x = w ) ) $.</p>
<p>令$k = \lfloor \frac { p  } { 2 ^k  } \rfloor = \frac { p - w  } { 2 ^k  } $不难发现$P _{ D _1  } ( x = 0 ) = \frac { k + 1  } { p  } , P _{ D _1  } ( x = w ) = \frac { k  } { p  } $.</p>
<p>则$SD ( D _1 , D _2 ) = \frac { w  } { 2  } ( \frac { p - w + 2 ^k  } { p 2 ^k  } - \frac { 1  } { 2 ^k  } ) + \frac { 2 ^k - w  } { 2  } ( \frac { 1  } { 2 ^k  } - \frac { p - w  } { p 2 ^k  } ) = \frac { 1  } { 2 ^{ k + 1  }  } ( \frac { w ( 2 ^k - w )  } { p  } + \frac { w ( 2 ^k - w )  } { p  } ) = \frac { w ( 2 ^k - w )  } { p 2 ^k  } $.</p>
<p>要证明$\frac { w ( 2 ^k - w )  } { p 2 ^k  } \leq \frac { 2 ^k  } { 4 p  } \Leftrightarrow w ( 2 ^k - w ) \leq ( 2 ^{ k - 1  } ) ^2 $.由基本不等式显然.</p>
<h4><span id="problem3">Problem3</span></h4><p>给你一个单增函数$f $,满足定义域和值域都是$\mathbb { N  } $,并且$f ( f ( n ) ) = 3 n $,求$f ( 2023 ) $.</p>
<h5><span id="solution3">Solution3</span></h5><p>首先我们不妨先试一下$f ( f ( 1 ) ) = 3 $.由于$f ( 1 ) \geq 2 $,且$f ( 1 ) \ne 3 $,所以$f ( 1 ) = 2 , f ( 2 ) = 3 $.</p>
<p>考虑$f ( 3 n ) $,必然存在一个$n &lt; m &lt; 3 n $,使得$f ( n ) = m , f ( m ) = 3 n $.</p>
<p>用这个找前几项,发现规律是把$n $写成三进制形式,如果首位是$1 $就变成$2 $,首位是$2 $就改为$1 $再在后面加个$0 $.容易验证这是合法的$f $且$f ( 2023 ) = 3882 $.</p>
<p>但问题没有解决,需要证明它是唯一的$f $.</p>
<p>考虑数学归纳假设现在$f ( x ) , x \in [ 1 , 3 k ] $都确定了.</p>
<p>注意到如果$f ( n ) = m , f ( m ) = 3 n , f ( 3 n ) = 3 m , f ( 3 m ) = 9 n $.所以如果$f ( n ) = m $,我们实际上有$f ( 3 ^k m ) = 3 ^{ k + 1  } n , f ( 3 ^k n ) = 3 ^k m $.数学归纳即可以证明$f ( 3 k + 3 ) $一定是确定的.</p>
<p>接下来要证明$f ( 3 k + 1 ) $和$f ( 3 k + 2 ) $一定是确定的.</p>
<p>手玩发现确定它们的方式有两种:</p>
<ol>
<li><p>$f ( 3 k ) + 3 = f ( 3 k + 3 ) $.</p>
</li>
<li><p>$\exists n , f ( n ) = 3 k + w ( w \in \{ 1 , 2 \} ) $.</p>
</li>
</ol>
<p>如果我们能说明至少可以取二者其一就行.</p>
<p>由归纳假设,不难发现当$k $在三进制下首位如果是$2 $,则一定满足(2).</p>
<p>当$k $在三进制下首位是$1 $,则一定满足(1).</p>
<p>于是证毕.</p>
<h4><span id="problem4">Problem4</span></h4><p>对于一个$n \times n $的包含$[ 1 , n ^2 ] $各一个的矩阵(下称为排列矩阵),定义一次操作为:将每行都任意重排;或将每列都任意重排.求证:</p>
<ol>
<li><p>如果一个排列矩阵满足每行恰有模$n $余$[ 0 , n - 1 ] $的数各一个,则称它是好的.求证:好的矩阵可以通过两次操作变为一个满足第$i $行第$j $列为$( i - 1 ) n + j $的矩阵(不妨称为有序矩阵).</p>
</li>
<li><p>求证:任意排列矩阵可以通过一次操作变为好的.</p>
</li>
</ol>
<h5><span id="solution4">Solution4</span></h5><p>这题原题啊,AGC037D.</p>
<p>(1)显然,注意到有序矩阵的每列$\bmod n $不相同,可以先将每行按照$\bmod n $排序,再每列排序即可.</p>
<p>(2)的话我们考虑一次列操作.将$\bmod n $不同的数字分类,然后建一个二分图:左侧的点是数字分的类,右侧的点代表行,注意到这个东西是$n $正则二分图,根据Hall定理一定存在完美匹配.</p>
<h4><span id="problem5">Problem5</span></h4><p>有$n ( \geq 2 ) $个硬币排成一个环.你被蒙上眼睛,你每次操作可以选择一个硬币的子集并将它们翻面.但是你每次操作之后,硬币的位置将会任意旋转(即变为原来的一个循环同构).如果你存在一种策略,使得对于任意初始局面和任意中途的旋转方案,有限步内一定可以令存在一个时刻所有硬币正面朝上,则称$n $是好的.求证:</p>
<ol>
<li><p>$4 $是好的.</p>
</li>
<li><p>如果$n $是奇数,那么$n $不是好的.</p>
</li>
<li><p>求出所有好的$n $.</p>
</li>
</ol>
<h5><span id="solution5">Solution5</span></h5><p>首先可以证明$2 $是好的.</p>
<p>这么干:如果一开始都正面向上就赢了.不然第一步全翻,这样如果一开始是反面向上也赢了.下一次随便翻一个,再下一次全翻,这样四次中至少赢了一次.</p>
<p>从上面的观察可以发现啊,我们场上一定会进行若干次全局翻转操作,并且最后一次一定是一个全局翻转,不然我们每次只需要让一个位置保持不被翻到就输麻了.</p>
<p>转全局太复杂了,考虑转操作,问题转化为现在你要排若干个操作,使得它们任意旋转后,仍然可以保证前缀异或和取到了所有的情况.注意到不妨让第一轮轮空,此时最少需要$2 ^n $步.</p>
<p>不妨每进行一次非全局操作就全局翻一次,这样$0 $和$1 $就没区别了.</p>
<p>先考虑全局异或和为偶数的时候:</p>
<p>注意到$1100 $来一个$1010 $之后啥也不变,但是$1010 $来一个$1010 $一定赢了.所以上来先来一个$1010 $,如果赢了就下班,没赢就来个$1100 $,这样$1100 $要么下班,要么变成了$1010 $,再重复上面的操作.</p>
<p>如果全局异或和为奇数,那就随便异或一下,再按照偶数的做.</p>
<p>总的来说,先按照偶数的操作,不会改变全局异或和.如果没结束说明是奇数,变一下重复以上操作.</p>
<p>总结一下的话就是操作序列是:$0000 , 1111 , 1010 , 1111 , 1100 , 1111 , 1010 , 1111 , 1000 , 1111 , 1010 , 1111 , 1100 , 1111 , 1010 , 1111 $.</p>
<p>上面的构造启发我们手玩一下$n = 3 $,注意到此时的问题在于$100 $和$110 $,都很完蛋.</p>
<p>我们先考虑弱化版问题:就是我们摘下了眼罩,但是选择策略在旋转之前.如果这种情况我们都做不到那蒙上眼更做不到了对吧.</p>
<p>我们不妨将所有的状态分为两类:一类叫做成功状态,即如果一个状态是成功的,那它可以通过有限次操作得到全$0 $;另一类叫做失败状态,即只要初值是它,一定有一种旋转的方式使得一直得不到全$0 $.</p>
<p>我们来仔细看一下这两个状态应该是啥样的:</p>
<p>对于一个成功状态,应该有一个固定的选择翻面策略,使得它可以在有限次操作内达到另一个更接近全$0 $的成功状态.我们不妨令一个成功状态的度为$d $表示它可以经过$d $步到达全$0 $,显然全$1 $的$d = 1 $,$n = 4 $的时候,$1010 $的$d = 2 $,因为其可以通过一次操作转化为全$1 $,$1100 $的$d = 3 $,因为其可以用一次操作转化为$1010 $.</p>
<p>仔细思考上面的过程,也就意味着:任何一个成功状态的所有出边,必然要指向$d $比它更小的成功状态.</p>
<p>对于一个失败状态,应该有一个任意的选择旋转策略,使得它怎么翻都还是失败状态.</p>
<p>这个定义还是挺粗糙的,我们先看失败状态吧.</p>
<p>显然$n = 3 $的时候,$\{ 110 , 100 \} $就是失败状态.</p>
<p>而对于$n $取任意来说,一定得存在一个$d = 2 $的成功状态.一个显然的$d = 2 $的成功状态要满足的条件是,假设它是$a $,那么存在一个数$b $,使得$a \oplus b $是全$1 $或者全$0 $.既然$a $和$b $旋转后只有两种结果,那么$b $的循环节必定为$2 $,也就是$b $一定要是$101 \cdots 010 $这样的,于是$n $是奇数的时候一定不符合,这就证明了(2).</p>
<p>同理寻找$d = 3 $的成功状态,现在我们已知的四种成功状态是$111 \cdots 111 $,$000 \cdots 000 $,$101 \cdots 010 $,$010 \cdots 101 $,所以考虑构造一个循环节长度为$4 $的串,使得异或完它是这上面四种其一,注意到$1100 \cdots 1100 $就是一个合法的串.</p>
<p>做到这里发现上面那个东西完全无法扩展啊.更要命的是我们现在还是睁着眼的,甚至没证明闭着眼是一样的.</p>
<p>找qyc讨论了一下得到了另一个思路的做法:</p>
<p>先证明$n = 2 ^k $一定是好的.考虑数学归纳,不妨这么干:构造一个长度为$2 ^{ k - 1  } $的串$b $,使得其$b _i = a _i \oplus a _{ i + 2 ^{ k - 1  }  } $.然后由数学归纳,可以造出$b $全$0 $的情况.而如果$b $全$0 $,则原串一定存在长为$2 ^{ k - 1  } $的循环节,并且消除循环节的过程不会改变$b $的值,仍然是数学归纳下去就做完了.</p>
<p>不然,设$n = 2 ^k m $,</p>
<p>模仿上面的过程,不妨使用数学归纳证明其不成立.仍然是构造$b $数组,由于$b $数组都不可能全$0 $,显然也不可能成立.</p>
<p>这个能不能顺便证明$n $是奇数一定不行呢?还真可以.</p>
<p>考虑你现在要卡掉蒙眼的对手的构造,你选出一个位置来备用,剩下了$n - 1 $个位置.</p>
<p>接下来无论对手怎么出,你都可以通过乱搞这个备用的位置,来保证前$n - 1 $个位置的异或值为$1 $.因此对手一定不能完成任务.</p>
<h3><span id="2024茶选">2024茶选</span></h3><h4><span id="problem1">Problem1</span></h4><p>连续扔一枚硬币,连续扔出三个正面则停止.假设硬币扔出正面反面的概率都为$50 \% $,求期望停止时间.</p>
<h5><span id="solution1">Solution1</span></h5><p>简单题,设$f _0 , f _1 , f _2 , f _3 $,然后有$\begin{cases}f _3 = 0 \ f _2 = \frac { 1  } { 2  } f _3 + \frac { 1  } { 2  } f _0 + 1 \ f _1 = \frac { 1  } { 2  } f _2 + \frac { 1  } { 2  } f _0 + 1 \ f _0 = \frac { 1  } { 2  } f _1 + \frac { 1  } { 2  } f _0 + 1 \end{cases} $,算出$f _0 = 14 $.</p>
<h4><span id="problem2">Problem2</span></h4><p>Alice和Bob玩游戏,一共有三轮.每一轮中,Alice选择一个实数,Bob将这个数填到下式中任意一个框中.进行三轮后,如果下式方程有三个不同的整数解则Alice赢,反之Bob赢,求是否有必胜策略.</p>
<script type="math/tex; mode=display">
x ^3 + □ x ^2 + □ x + □ = 0</script><h5><span id="solution2">Solution2</span></h5><p>纯粹的构造.</p>
<p>简单分析一下,不妨设三个解为$- A , - B , - C $,方程应该可以写作$( x + A ) ( x + B ) ( x + C ) = 0 $.</p>
<p>拆开有$x ^3 + ( A + B + C ) x ^2 + ( AB + AC + BC ) x + ABC = 0 $.</p>
<p>这么对称,不妨猜一手Alice先选择$0 $,讨论一下:</p>
<ol>
<li>Bob令$ABC = 0 $.不妨令$C = 0 $.</li>
</ol>
<p>此时方程变为$x ^2 + ( A + B ) x + AB = 0 $.直接秒了,随便选一个数就行(比如选$3 $,如果Bob令$AB = 3 $,就再选$4 $;如果令$A + B = 3 $,就再选$2 $)</p>
<ol>
<li>Bob令$A + B + C = 0 , C = - A - B $.</li>
</ol>
<p>不妨令$C ‘ = - C , D = AB $,则$AB + AC + BC = D - C ‘ ^2 , ABC = DC ‘ $.</p>
<p>接下来Alice要选择一个数字$k $,如果Bob又令$D - C ‘ ^2 = k $,发现在此时如果$k $是一个负的完全平方数,并且Alice接下来选择$0 $,当场就下班了.</p>
<p>所以不妨直接让$k = - n ^2 $,然后看当$DC ‘ = - n ^2 $的时候如何去解.此时有$AB ( A + B ) = n ^2 $.不难发现取勾股数就很优秀.</p>
<p>总结一下就是,Alice第二步选择$- 3 ^2 \times 4 ^2 \times 5 ^2 $,这样就赢了.</p>
<ol>
<li>Bob令$AB + AC + BC = 0 , C = - \frac { AB  } { A + B  } $.</li>
</ol>
<p>我是构造不出来了.但我可以抄答案,答案是你接下来选择$6 ^2 \times 7 ^3 $,两种情况如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x + 2 \times 7 ) ( x - 3 \times 7 ) ( x - 6 \times 7 ) & = 0 \\
( x - 2 \times 6 ^2 \times 7 ^2 ) ( x + 3 \times 6 ^2 \times 7 ^2 ) ( x + 6 \times 6 ^2 \times 7 ^2 ) & = 0 
\end{aligned}</script><p>后来又找人讨论了一下这个是咋得出来的啊.考虑$ABC \ne 0 $,我们有的条件其实是$\frac { 1  } { A  } + \frac { 1  } { B  } + \frac { 1  } { C  } = 0 $.方程现在是$x ^3 + ( A + B - \frac { AB  } { A + B  } ) x ^2 - \frac { A ^2 B ^2  } { A + B  } = 0 $.不妨令$a = A + B , b = AB $,方程实际上是$x ^3 + ( a - \frac { b  } { a  } ) x ^2 - \frac { b ^2  } { a  } = 0 $.最好能让$a $小一点,因此我们不妨直接取$a = 1 $,此时$A = - n , B = n + 1 , C = n ( n + 1 ) $,只要能构造这样的两组$A , B , C $使得它们的$a _1 - \frac { b _1  } { a _1  } = - \frac { b _2 ^2  } { a _2  } $即可.直接造看上去没啥前途,但是不难发现$A = - nk , B = ( n + 1 ) k , C = n ( n + 1 ) k $依然合法.此时有$k _1 = a _1 , b _1 = - n ( n + 1 ) a _1 ^2 , k _2 = a _2 , b _2 = - n ( n + 1 ) a _2 ^2 $,我们有$a _1 ( n ^2 + n + 1 ) = - n ^2 ( n + 1 ) ^2 a _2 ^3 $.取$n = 2 $试试看!此时有$7 a _1 = - 36 a _2 ^3 $.取$a _2 = 7 , a _1 = - 6 ^2 \times 7 ^2 $,这就是上面那组答案的构造过程.</p>
<h4><span id="problem3">Problem3</span></h4><p>人们之间可能会有讨厌的情况,讨厌关系是相互的.一个人最多讨厌另外$3 $个人.现在希望将全部的人分成两组,使得每个人在自己的组内至多只讨厌$1 $个人.这是一定可以办到的吗?</p>
<h5><span id="solution3">Solution3</span></h5><p>考虑增广,对于一个不合法的点,它应当连了两个同色点.不妨将这个点反色,那么同色边的数量一定减少,因此一定存在操作终点.而只要当前不合法就一定可以继续操作,因此操作终点一定合法.</p>
<h4><span id="problem4">Problem4</span></h4><p>有公式:</p>
<script type="math/tex; mode=display">
\sum _{ S \subseteq \{ 1 , 2 , \cdots , n \}  } ( P ( f ( R ) \oplus \bigoplus _{ i \in S  } R _i = 0 ) - P ( f ( R ) \oplus \bigoplus _{ i \in S  } R _i = 1 ) ) ^2 = 1</script><p>其中$f $是任意一个将$\{ 0 , 1 \} ^n \rightarrow \{ 0 , 1 \} $的函数,$\oplus $是二进制意义下的异或运算,$R $是$\{ 0 , 1 \} ^n $上的均匀分布,$R _i $表示第$i $位.再定义$\chi _S ( r ) = \prod _{ i \in S  } ( - 1 ) ^{ r _i  } $.</p>
<p>按照下面的步骤证明上面的式子,也就是说,求证:</p>
<ol>
<li><p>$\chi _S ( r ) \times \chi _S ( r ‘ ) = \chi _S ( r \oplus r ‘ ) $.</p>
</li>
<li><p>当$r \ne 0 $时,$\sum _{ S \subseteq \{ 1 , \cdots , n \}  } \chi _S ( r ) = 0 $.</p>
</li>
<li><p>$[ f ( r ) \oplus \bigoplus _{ i \in S  } r _i = 0 ] - [ f ( r ) \oplus \bigoplus _{ i \in S  } r _i = 1 ] = ( - 1 ) ^{ f ( r )  } \chi _S ( r ) $.</p>
</li>
<li><p>证明原命题.</p>
</li>
</ol>
<h5><span id="solution4">Solution4</span></h5><p>(1)显然.</p>
<p>(2)也很经典,挑选一个$j $,使得$r _j = 1 $,然后所有的集合分为两类:一类是包含$j $,一类不包含,两类集合一一对应并且$\chi $互为相反数.</p>
<p>(3)显然.</p>
<p>来看(4),注意到$P ( f ( R ) \oplus \bigoplus _{ i \in S  } R _i = 0 ) = \frac { 1  } { 2 ^n  } \sum _{ r  } [ f ( r ) \oplus \bigoplus _{ i \in S  } r _i = 0 ] $,而$\sum _{ r  } [ f ( r ) \oplus \bigoplus _{ i \in S  } r _i = 0 ] - [ f ( r ) \oplus \bigoplus _{ i \in S  } r _i = 1 ] = \sum _r ( - 1 ) ^{ f ( r )  } \chi _S ( r ) $,要证明的只是$\sum _{ S  } \frac { 1  } { 4 ^n  } ( \sum _r ( - 1 ) ^{ f ( r )  } \chi _S ( r ) ) ^2 = 1 $,而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S  } ( \sum _r ( - 1 ) ^{ f ( r )  } \chi _S ( r ) ) ^2 \\
& = \sum _S \sum _{ r  } \sum _{ r '  } ( - 1 ) ^{ f ( r ) + f ( r ' )  } \chi _S ( r \oplus r ' ) \\
& = \sum _{ r  } \sum _{ r '  } ( - 1 ) ^{ f ( r ) + f ( r ' )  } \sum _S \chi _S ( r \oplus r ' ) \\
& = \sum _{ r  } 2 ^n & = 4 ^n 
\end{aligned}</script><p>于是证毕.</p>
<h4><span id="problem5">Problem5</span></h4><p>Alice在手心上写了两个不同的实数.你可以看其中一只手上的,然后猜哪边的数大.设计一种策略使得不论两个数是什么,猜对的概率都严格大于$50 \% $.</p>
<h5><span id="solution5">Solution5</span></h5><p>我对这个题有亿点小疑问,但是先说策略.</p>
<p>随机(无需均匀)一个数$x $,然后随机一只手,看上面的数字$a $,如果$a \geq x $就认为$a $大,反之认为$b $大.只要随机到一个区间内的实数的概率不为$0 $即可.</p>
<p>但是怎么随机实数呢?好像可以按照正态分布随机,我其实也不太懂.</p>
<h4><span id="problem6">Problem6</span></h4><p>使用一些长方形的砖头搭墙.如果每块砖头都有至少一条边的长度是整数,且搭出的墙面是没有缝隙的长方形,求证:这个长方形也至少有一条边长是整数.</p>
<h5><span id="solution6">Solution6</span></h5><p>这个题是经典知乎题,下面搬一下知乎上面整理的这个题的答案:</p>
<p>数论证明:令$p $为素数,把整个图形放大$p $倍(也就是长度$1 $变成长度$p $).下面把每个交叉点$( x , y ) $换成其整数部分$( \lfloor x \rfloor , \lfloor y \rfloor ) $,我们就得到了一个新的大矩形,它被划分为很多两边长均为整数的小矩形,而且每个小矩形有一边长能被$p $整除.这样这个新的大矩形的面积也能被$p $整除,所以它的有一边长能被$p $整除.这条边只是被换成了它长度的整数部分,所以变化不超过$1 $,所以在放大之前这条边的长度和某个整数相差不超过$1 / p $.因为素数有无穷多个,所以原来的大矩形某一条边长度与某个整数相差无限小,证毕.</p>
<p>图论证明:令所有的交叉点为顶点.每个小矩形都有一边长为整数,我们把这两条边长为整数的边在图上标出(允许两顶点之间的重复边),另外两条边不连.这样除了大矩形的四个角以外每个顶点有$2 $条边或者$4 $条边(这是因为这个点,要么是处于一个丁字路口(两条边),要么是十字路口(四条边)),而大矩形四个角每个角只连了一条边.所以从大矩形一角开始存在一条欧拉路径在另一个角结束.因为图上连边的边长都是整数,把这个欧拉路径投影到大矩形的长宽,我们就得到了大矩形至少有一边长为整数.</p>
<p>组合证明:考虑Sperner引理(和染色有关的那个).假设结论不成立.把每个小矩形画上对角线,然后把所有交叉点$( x , y ) $染色:如果$x $是整数,染X颜色.如果$x $不是整数但$y $是整数,染Y颜色.如果都不是整数,染Z颜色.由Sperner引理,三顶点被染不同颜色的三角形有奇数个(简单来说就是,你考虑大矩阵的左侧两个点都是X颜色,右侧一个是Y一个是Z,并且在最下面这条边(两个端点分别被染成了X颜色和Y颜色)上面只可能出现X和Y两种颜色,由于这两种颜色交替出现,那么连接不同颜色的边就会有奇数个,同理对于全局来说,三条边上连接不同颜色的边总共奇数个,内部的每一条边会在两个三角形中被各算一次,因此三个顶点染成不同颜色的三角形应该有奇数个),但由题目条件这种三角形不存在(如果一个点被染成了X颜色,那么上面的点如果存在也该被染成了X颜色,Y颜色同理,俩总会矛盾一个),矛盾.</p>
<p>扫描线证明:设大矩形为$[ 0 , a ] \times [ 0 , b ] $,并假设$b $不是整数.把所有小矩形的下边界去掉,然后令$f ( t ) $为所有上边界$y $坐标不是整数,并且与直线$y = t $相交的小矩形的$x $方向边长之和.那么$f ( 0 ) = 0 $,而且当$f ( t ) $变化的时候,它一定会变成另一个整数(原因在于一个小矩阵(假设已加入扫描线)上方的矩阵,如果想要退出扫描线,则必然横向长度是整数.同理对于一个没有加入扫描线的小矩阵上方的矩阵,如果想要加入扫描线,也需要横向长度是整数).所以$f ( b ) $是整数.而因为$b $不是整数,$f ( b ) $就是最靠上的所有小矩形的宽之和,等于$a $,所以$a $是整数.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>概率与期望</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="离散概率">离散概率</span></h2><h3><span id="基本定义">基本定义</span></h3><p>概率空间$\Omega $:在一个给定问题中可能发生的所有情况.</p>
<p>事件:$\Omega $的一个子集.</p>
<p>基本事件$\omega $:$\Omega $中的单个元素,也可以看作集合大小为$1 $的事件.</p>
<p>概率:若$\omega \in \Omega $,我们称它发生的概率为$\Pr ( \omega ) $,有$\Pr ( \omega ) \geq 0 $且$\sum _{ \omega \in \Omega  } \Pr ( \omega ) = 1 $.</p>
<p>随机变量:在概率空间的基本事件上定义的函数.</p>
<p>联合分布:如果两个随机变量$X $和$Y $定义在同一个概率空间$\Omega $上,对于每一个在$X $取值范围内的$x $以及在$Y $取值范围内的$y $,我们称$\Pr ( X = x \land Y = y ) $为它们的联合分布.</p>
<p>独立:如果对于每一个在$X $取值范围内的$x $以及在$Y $取值范围内的$y $,$\Pr ( X = x \land Y = y ) = \Pr ( X = x ) \times \Pr ( Y = y ) $,我们称$X $和$Y $是独立的.</p>
<p>期望(均值)$E X $:我们设概率空间上的随机变量$X $的期望$EX = \sum _{ x \in X ( \Omega )  } x \times \Pr ( X = x ) = \sum _{ w \in \Omega  } X ( \omega ) \Pr ( \omega ) $.</p>
<p>中位数:我们设概率空间上的随机变量$X $的中位数为满足$\Pr ( X \leq x ) \geq 0 . 5 \land \Pr ( X \geq x ) \geq 0 . 5 $的$x \in X ( \Omega ) $所组成的集合.</p>
<p>众数:我们设概率空间上的随机变量$X $的众数为满足$\Pr ( X = x ) \geq \Pr ( X = x ‘ ) , \forall x ‘ \in X ( \Omega ) $的$x \in X ( \Omega ) $所组成的集合.</p>
<p>方差$VX $:我们设概率空间上的随机变量$X $的方差$VX = E ( ( X - EX ) ^2 ) $.</p>
<p>标准差$\sigma $:我们设概率空间上的随机变量$X $的标准差$\sigma = \sqrt { VX  } $.</p>
<h3><span id="期望的简单运算">期望的简单运算</span></h3><p>如果$X , Y $是定义在同一个概率空间上的两个随机变量,那么:</p>
<ol>
<li><p>$E ( X + Y ) = EX + EY $.</p>
</li>
<li><p>$E ( \alpha X ) = \alpha EX $.</p>
</li>
<li><p>如果$X $和$Y $互相独立,那么$E ( XY ) = ( EX ) ( EY ) $.</p>
</li>
</ol>
<p>上述法则都可以通过期望的定义简单证明.</p>
<h3><span id="方差的简单运算">方差的简单运算</span></h3><p>我们考虑方差的定义式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( ( X - EX ) ^2 ) & = E ( X ^2 - 2 X ( EX ) + ( EX ) ^2 ) \\
& = E ( X ^2 ) - 2 ( EX ) ( EX ) + ( EX ) ^2 \\
& = E ( X ^2 ) - ( EX ) ^2 
\end{aligned}</script><p>也即:方差等于随机变量平方的均值减均值的平方.</p>
<p>当$X $和$Y $为独立的随机变量时,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
V ( X + Y ) & = E ( ( X + Y ) ^2 ) - ( EX + EY ) ^2 \\
& = E ( ( X + Y ) ^2 ) - ( EX ) ^2 - 2 ( EX ) ( EY ) - ( EY ) ^2 
\end{aligned}</script><p>而又有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( ( X + Y ) ^2 ) & = E ( X ^2 + 2 XY + Y ^2 ) \\
& = E ( X ^2 ) + 2 ( EX ) ( EY ) + E ( Y ^2 ) 
\end{aligned}</script><p>则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
V ( X + Y ) & = E ( X ^2 ) + 2 ( EX ) ( EY ) + E ( Y ^2 ) - ( EX ) ^2 - 2 ( EX ) ( EY ) - ( EY ) ^2 \\
& = VX + VY 
\end{aligned}</script><p>即:独立随机变量之和的方差等于它们的方差之和.</p>
<p>接下来,我们可以得到切比雪夫不等式:</p>
<script type="math/tex; mode=display">
\Pr ( ( X - EX ) ^2 \geq \alpha ) \leq \cfrac { VX  } { \alpha  } , \alpha > 0</script><p>证明如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
VX & = \sum _{ \omega \in \Omega  } ( X ( \omega ) - EX ) ^2 \Pr ( \omega ) \\
& \geq \sum _{ \omega \in \Omega  } ( X ( \omega ) - EX ) ^2 \Pr ( \omega ) [ ( X ( \omega ) - EX ) ^2 & \geq \alpha ] \\
& \geq \sum _{ \omega \in \Omega  } \alpha \Pr ( \omega ) [ ( X ( \omega ) - EX ) ^2 & \geq \alpha ] \\
& = \alpha \Pr ( ( X - EX ) ^2 & \geq \alpha ) 
\end{aligned}</script><p>如果我们用$c ^2 VX $代替$\alpha $,我们就有:</p>
<p>$\Pr ( | X - EX | \geq c \sigma ) \leq \cfrac { 1  } { c ^2  } $.</p>
<p>简单来说,这个不等式说明:$X $落在$( EX - c \sigma , EX + c \sigma ) $之外的概率至多为$\cfrac { 1  } { c ^2  } $.</p>
<p>另外,如果我们取$n $个独立的样本$X _1 , X _2 , . . . , X _n $,令$S = \sum _{ i = 1  } ^n X _i $,那么它的均值是$nEX $,标准差是$\sqrt { n  } \sigma $,也就是说,$\cfrac { S  } { n  } $落在$( EX - \cfrac { c \sigma  } { \sqrt { n  }  } , EX + \cfrac { c \sigma  } { \sqrt { n  }  } ) $之外的概率小于等于$\cfrac { 1  } { c ^2  } $.</p>
<h3><span id="随机抽样调查">随机抽样调查</span></h3><p>如果我们随机取得了$n $个值$X _1 , X _2 , . . . , X _n $,那么我们可以通过这些值来估计概率空间的期望和方差.</p>
<p>$\hat EX = \cfrac { \sum _{ i = 1  } ^n X _i  } { n  } $.</p>
<p>$\hat VX = \cfrac { \sum _{ i = 1  } ^n X _i ^2  } { n - 1  } - \cfrac { ( \sum _{ i = 1  } ^n X _i ) ^2  } { n ( n - 1 )  } $.</p>
<p>这里的$\hat VX $似乎与定义不是那么相符.但是它拥有更好的性质:$E ( \hat VX ) = VX $.</p>
<p>证明如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( \hat VX ) & = \cfrac { 1  } { n - 1  } E ( \sum _{ i = 1  } ^n X _i ^2 - \cfrac { 1  } { n  } \sum _{ j = 1  } ^n \sum _{ k = 1  } ^n X _j X _k ) \\
& = \cfrac { 1  } { n - 1  } ( \sum _{ i = 1  } ^n E ( X _i ^2 ) - \cfrac { 1  } { n  } \sum _{ i = 1  } ^n \sum _{ j = 1  } ^n E ( X _i X _j ) ) \\
& = \cfrac { 1  } { n - 1  } ( \sum _{ i = 1  } ^n E ( X ^2 ) - \cfrac { 1  } { n  } \sum _{ i = 1  } ^n \sum _{ j = 1  } ^n ( ( EX ) ^2 [ j \ne k ] + E ( X ^2 ) [ j & = k ] ) ) \\
& = \cfrac { 1  } { n - 1  } ( nE ( X ^2 ) - \cfrac { 1  } { n  } ( nE ( X ^2 ) + n ( n - 1 ) ( EX ) ^2 ) ) \\
& = E ( X ^2 ) - ( EX ) ^2 \\
& = VX 
\end{aligned}</script><h3><span id="条件概率">条件概率</span></h3><p>已知事件B发生时事件A发生的概率为$P ( A | B ) = \frac { P ( AB )  } { P ( B )  } \ $.</p>
<h4><span id="贝叶斯公式">贝叶斯公式</span></h4><p>贝叶斯公式:如果有$\{ B _i \} $是样本空间的一个划分,即$\forall i , j $,有$B _i \cap B _j = \emptyset $,并且有$\bigcup _{ i = 1  } ^n B _i = \Omega $.则有$P ( B _i | A ) = \frac { P ( AB _i )  } { P ( A )  } = \frac { P ( AB _i )  } { P ( A ) \sum P ( B _j )  } = \frac { P ( A B _i )  } { \sum _{ j = 1  } ^n P ( A B _j )  } = \frac { P ( A | B _i ) P ( B _i )  } { \sum _{ j = 1  } ^n P ( A | B _j ) P ( B _j )  } \ $.</p>
<p>简化形式:$P ( B | A ) = \frac { P ( A | B ) P ( B )  } { P ( A )  } \ $.</p>
<p>另外,我们考虑设$O ( B ) = \cfrac { P ( B )  } { P ( \lnot B )  } $,称$\cfrac { P ( B | E )  } { P ( \lnot B | E )  } $为贝叶斯算子,则同理可得:</p>
<script type="math/tex; mode=display">
O ( B | E ) = O ( B ) \cfrac { P ( B | E )  } { P ( \lnot B | E )  }</script><p>这个公式更加精准地分开了先验概率和后验概率,也表现了贝叶斯算子对先验概率的改变.</p>
<h3><span id="概率生成函数">概率生成函数</span></h3><p>如果$X $是定义在概率空间$\Omega $上的随机变量,那么它的概率生成函数为$G _X ( z ) = \sum _{ k \geq 0  } \Pr ( X = k ) z ^k = E ( z ^X ) $.</p>
<p>不难发现$G _X ( z ) $需要满足的条件:所有系数都非负并且$G _X ( 1 ) = 1 $.</p>
<p>我们发现,当我们定义了概率生成函数后,期望和方差都可以使用它来表示:</p>
<script type="math/tex; mode=display">
\begin{aligned}
EX & = G _X ' ( 1 ) \\
E ( X ^2 ) & = G ' ' _X ( 1 ) + G _X ' ( 1 ) \\
VX & = G _X ' ' ( 1 ) + G _X ' ( 1 ) - ( G _X ' ( 1 ) ) ^2 
\end{aligned}</script><p>通常,我们也可以将方差和均值的定义扩展到任意函数上,于是我们定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Mean ( G ) & = G ' ( 1 ) \\
Var ( G ) & = G ' ' ( 1 ) + G ' ( 1 ) - ( G ' ( 1 ) ) ^2 
\end{aligned}</script><p>不过,求导的过程可能会有些麻烦,但我们可以直接使用泰勒定理:</p>
<script type="math/tex; mode=display">
G ( 1 + t ) = \sum _{ i \geq 0  } \cfrac { G ^{ ( i )  } ( 1 )  } { i !  } t ^i</script><p>另外,我们不难发现:$G _{ X + Y  } ( z ) = G _X ( z ) G _Y ( z ) $.</p>
<p>根据前面的推导,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Mean ( G _{ X + Y  } ) & = Mean ( G _X ) + Mean ( G _Y ) \\
Var ( G _{ X + Y  } ) & = Var ( G _X ) + Var ( G _Y ) 
\end{aligned}</script><p>换句话说,若$G _X ( 1 ) = 1 , G _Y ( 1 ) = 1 $,那么这个式子与直接对$G _{ X + Y  } $使用求导的那个公式是等价的.注意,这里并没有要求这些生成函数的系数是非负的.</p>
<p>于是我们有了另一个法则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Mean ( G _X ) & = Mean ( G _{ X + Y  } ) - Mean ( G _Y ) \\
Var ( G _X ) & = Var ( G _{ X + Y  } ) - Var ( G _Y ) 
\end{aligned}</script><h4><span id="example1">Example1</span></h4><p>一枚硬币正面向上的概率为$p $,反面向上的概率为$q $,设硬币正面向上为H,反面向上为T,不断抛掷硬币直到抛掷出连续的THTTH为止,求期望次数.</p>
<p>考虑设$N $为所有不包含THTTH的硬币序列的生成函数,$S $为所有只有结尾为THTTH的硬币序列的生成函数,令$H = pz , T = qz $,$1 $为空集,我们显然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + N \times ( H + T ) & = N + S \\
N \times THTTH & = S + S \times TTH 
\end{aligned}</script><p>解方程即可.</p>
<p>另外不难发现,这种方法取决于字符串的所有border,显然是通用方法.</p>
<p>我们考虑扩展这个方法,设$A $是我们要找到的字符串,$m $是它的长度,令$A ^{ ( k )  } $表示$A $字符串的前$k $个字符所组成的字符串,$A _{ ( k )  } $表示$A $字符串的后$k $个字符所组成的字符串.这样的形式与$k $阶导的形式可能会起冲突,但至少在接下来我们的式子中不会出现导数<del>(好吧其实是因为《具体数学》上就这么写的我也懒得改了)</del>.</p>
<p>我们的方程将会变为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + N ( H + T ) & = N + S \\
N \times A & = S ( \sum _{ k = 0  } ^{ m - 1  } A ^{ ( k )  } [ A ^{ ( m - k )  } & = A _{ ( m - k )  } ] ) 
\end{aligned}</script><p>如果我们设$\tilde { A  } $为将字符串$A $中的H替换成$\cfrac { 1  } { p  } z $,T替换成$\cfrac { 1  } { q  } z $之后的值,那么显然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
N \times A & = A \times S \times ( \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] ) \\
N & = S \times ( \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] ) \\
\cfrac { S - 1  } { H + T - 1  } & = S \times ( \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] ) \\
S \times ( 1 + ( 1 - H - T ) \times ( \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] ) ) & = 1 
\end{aligned}</script><p>这显然是一个卷积的形式.</p>
<p>令$w = \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } = A _{ ( k )  } ] $.</p>
<p>令$H ( z ) = 1 $,$F ( z ) = ( 1 + ( 1 - z ) \times w ) $,$G ( z ) = S $.</p>
<p>那么我们显然可以直接求$G ( z ) $的期望和方差,事实上:</p>
<script type="math/tex; mode=display">
\begin{aligned}
EX & = \sum _{ k = 1  } ^{ m  } \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] \\
VX & = ( EX ) ^2 - \sum _{ k = 1  } ^m ( 2 k - 1 ) \tilde { A  } _{ ( k )  } [ A ^{ ( k )  } & = A _{ ( k )  } ] 
\end{aligned}</script><p>如果硬币是均匀的($p = q = \cfrac { 1  } { 2  } $)我们引入另一个符号:我们设$A : A = \sum _{ k = 1  } ^m 2 ^{ k  } [ A ^{ ( k )  } = A _{ ( k )  } ] $.那么显然期望需要的抛硬币次数就是$( A : A ) $.</p>
<h4><span id="example2penney游戏">Example2(Penney游戏)</span></h4><p>一枚均匀硬币,设硬币正面向上为H,反面向上为T.不断扔硬币直到扔出连续的HHT或HTT为止,求最后以HHT结尾的概率.</p>
<p>我们设$S _A $为所有以HHT结尾的硬币序列的生成函数,设$S _B $为所有以HTT结尾的硬币序列的生成函数.$N $为其它的硬币序列的生成函数,令$H = T = 0 . 5 z $.</p>
<p>我们显然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + N ( H + T ) & = N + S _A + S _B \\
N \times HHT & = S _A \\
N \times HTT & = S _A \times T + S _B 
\end{aligned}</script><p>解方程并带入$z = 1 $,可以有得知以HHT结尾的概率为$\cfrac { 2  } { 3  } $.</p>
<p>事实上,我们使用类似Example1的方法,设这两个硬币序列分别为$A $和$B $,那么可以求出:</p>
<script type="math/tex; mode=display">
\cfrac { S _A  } { S _B  } = \cfrac { B : B - B : A  } { A : A - A : B  }</script><h4><span id="example3sdoi2017-硬币游戏">Example3([SDOI2017] 硬币游戏)</span></h4><p>是Example2的超级加强版.</p>
<p>把上面的东西给形式化一下,不妨设$g _i $表示进行了$i $步还未结束的概率,$f _{ k , i  } $为进行了$i $步恰好第$k $个人胜利的概率,$F , G $是它们的生成函数,我们自然有:</p>
<ol>
<li><p>$1 + xG ( x ) = \sum _k F _k ( x ) + G ( x ) $.</p>
</li>
<li><p>$( \frac { 1  } { 2  } x ) ^L G ( x ) = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 0  } ^{ L - 1  } ( \frac { 1  } { 2  } x ) ^i [ A _k ^{ ( L - i )  } = { A _j  } _{ ( L - i )  } ] $.</p>
</li>
</ol>
<p>第一个式子的用处在于带入$x = 1 $,发现$\sum _{ k  } F _k ( 1 ) = 1 $.</p>
<p>把(2)化简一下,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x ^L G ( x ) & = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 0  } ^{ L - 1  } ( \frac { 1  } { 2  } x ) ^{ i - L  } [ A _k ^{ ( L - i )  } & = { A _j  } _{ ( L - i )  } ] \\
x ^L G ( x ) & = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 1  } ^{ L  } ( \frac { 1  } { 2  } x ) ^{ - i  } [ A _k ^{ ( i )  } & = { A _j  } _{ ( i )  } ] 
\end{aligned}</script><p>带入$x = 1 $,有:</p>
<script type="math/tex; mode=display">
G ( 1 ) = \sum _{ j = 1  } ^n F _j ( 1 ) \sum _{ i = 1  } ^{ L  } 2 ^i [ A _k ^{ ( i )  } = { A _j  } _{ ( i )  } ]</script><p>不难发现对于不同的$k $,(2)的右边不同,而左边一定相同,这样就给出了$n $个等式,算上(1)一共有$n + 1 $个等式,可以算出$G ( 1 ) , F _{ 1 \cdots n  } ( 1 ) $这$n + 1 $个未知数.</p>
<h3><span id="二项式分布">二项式分布</span></h3><p>现在有一个大小为$n + 1 $的概率空间,其中$\Pr ( \omega _k ) = \binom { n  } { k  } p ^k q ^{ n - k  } \ $,我们把这样的概率序列称为二项式分布.</p>
<p>如果我们令$H ( z ) = q + pz $,不难发现二项式分布的生成函数为$H ( z ) ^n $.</p>
<p>不难发现,满足二项式分布的随机变量的均值是$np $,方差是$npq $.</p>
<p>与二项式分布相对应的还有负二项式分布,它的生成函数形如:$G ( z ) ^n = ( \cfrac { p  } { 1 - qz  } ) ^n = \sum _{ k  } \binom { n + k - 1  } { k  } p ^n q ^k z ^k $.</p>
<p>我们考虑如何求$G ( z ) $的方差和均值,不妨设$F ( z ) = \cfrac { 1 - qz  } { p  } = \cfrac { 1  } { p  } - \cfrac { q  } { p  } z $,则$G ( z ) ^n = F ( z ) ^{ - n  } $.</p>
<p>不难发现$F ( z ) $满足二项式分布.也就是说,以$( n , p , q ) $为参数的负二项式分布也就是以$( - n , - \cfrac { q  } { p  } , \cfrac { 1  } { p  } ) $为参数的二项式分布.</p>
<h3><span id="模型">模型</span></h3><h4><span id="树上随机游走">树上随机游走</span></h4><p>随机游走指每次从相邻的点中随机选一个走过去， 重复这样的过程若干次.</p>
<h5><span id="example1">Example1</span></h5><p>给一棵所有边长都为$1 $的$n $个点的树,问所有点对$( i , j ) ( 1 \leq i , j \leq n ) $中,从$i $走到$j $的期望距离的最大值是多少.</p>
<p>由于树上简单路径唯一,我们考虑设$f _u $表示$u $随机走到它父亲的期望,$g _v $表示$v $的父亲(假设是$u $)走到$v $的期望.</p>
<p>对于$f _u $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _u & = \cfrac { \sum _{ u \rightarrow v  } ( f _v + f _u )  } { \deg _u  } + 1 \\
f _u & = \deg _u + \sum _{ u \rightarrow v  } f _v 
\end{aligned}</script><p>对于$g _v $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g _v & = \cfrac { g _u + g _v + \sum _{ u \rightarrow w , w \ne v  } ( g _v + f _w )  } { \deg _u  } + 1 \\
g _v & = g _u + \sum _{ u \rightarrow w , w \ne v  } f _w + \deg _u 
\end{aligned}</script><h5><span id="example2">Example2</span></h5><p>给出一棵$n $个节点的树,每个点有可能是黑白两种颜色的一种.</p>
<p>现在从$1 $号点开始随机游走(即走这个点的每条出边的概率是相同的),每到一个点,如果这个点是黑点,或者这是白点并且这个点第一次经过,那么答案$+ 1 $.当走到度数为$1 $的节点时游走停止.</p>
<p>注意到黑白点对答案的贡献是互相独立的,所以分开讨论:</p>
<p>如果只有黑点,那么显然答案就是路径的期望长度,我们设$f _u $表示以$u $为起点的路径的期望长度,不难注意到$f _{ leaf  } = 1 $且$f _u = 1 + \cfrac { 1  } { \deg _u  } \sum _{ u \rightarrow v \lor v \rightarrow u  } f _v $.这个dp转移显然是有后效性的,可以使用高斯消元做,但有一个经典做法:我们求得$f _u = k _u f _{ fa  } + b _u $,然后就可以采取带入化简的方法做了.</p>
<p>如果只有白点,考虑每个点只会贡献一次,所以我们要求出的就是每个点被走到的概率.注意到一个点被走到一定是从它父亲走来的,于是我们需要求出$g _v $表示从$v $的父亲(假设是$u $)走到$v $的概率,再令$f _u $表示从$u $走到父亲的概率,类似Example1,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _u & = \cfrac { 1  } { \deg _u  } ( 1 + \sum _{ u \rightarrow v  } f _v f _u ) \\
g _v & = \cfrac { 1  } { \deg _u  } ( 1 + g _v g _u + \sum _{ u \rightarrow w , w \ne v  } f _w g _v ) 
\end{aligned}</script><p>最后把两部分答案合起来就好.</p>
<h4><span id="计数与期望的转换">计数与期望的转换</span></h4><h5><span id="examplecodechef-secplayer">Example(CodeChef Secplayer)</span></h5><p>冷静一下,如果我们直接计数的话会发现巨大难做,因为项太多了,直接乘起来也太麻烦了.</p>
<p>这启发我们:当我们注意到一个计数题的各种情况相乘很麻烦的时候,我们不妨只考虑一种情况并计算期望,然后拿期望和总数反推计数.注意到权值最小的人最危险,他不能和其他任何一个人匹配到,不然就死了.那不难求得此时他作为次大值存活的概率为$\frac { 1  } { \binom { n  } { 2  }  } $.</p>
<p>把所有人权值从大到小排序,设$f _i $表示只考虑前$i $个人的时候的期望,不难发现:$f _{ i  } = \frac { 1  } { \binom { i  } { 2  }  } v _i + ( 1 - \frac { 1  } { \binom { i  } { 2  }  } ) f _{ i - 1  } $.</p>
<h4><span id="一些小技巧">一些小技巧</span></h4><h5><span id="example1cf865c">Example1(CF865C)</span></h5><p>首先写出转移式子,但是存在后效性.如果我们设$f _{ i , j  } $表示过了$i $关,花费为$j $的期望,不难发现所有的$f $都需要与$f _{ 0 , 0  } $取$\min $,这咋办?</p>
<p>我们考虑二分这个$f _{ 0 , 0  } $,做的时候直接取$\min $,这样最后还会求出一个$f _{ 0 , 0  } $,比较一下大小然后继续做二分.</p>
<p>等一下,为撒子这样是收敛的呢?</p>
<p>首先,根据这个题,期望肯定是存在的.</p>
<p>我们注意到我们一开始二分的$f _{ 0 , 0  } $越大,最后的答案就越大,但是增长的一定会变慢.换句话说,最后的答案关于我们二分的值的关系应该是一个上凸的函数(增长的时候会被取$\min $的另一项限制住,但原本应该是没被限制的),于是这个时候得到的答案如果比二分的答案更小,那我们就应该调小一点.</p>
<p>换句话说,当我们二分答案的时候,应该判断函数凸性.wqs二分也是这个道理:二分答案并判断答案是否满足条件.</p>
<h5><span id="example2猎人杀">Example2(猎人杀)</span></h5><p>先做一步转化:如果做期望的时候,会有一些操作变得不能做,那我们改为:先随便选,如果选到不合法的操作就跳过,概率和期望都不会变.</p>
<p>offline</p>
<h5><span id="example3agc019f">Example3(AGC019F)</span></h5><p>人类智慧题…</p>
<p>首先注意到策略显然是每次选剩下最多的答案.</p>
<p>我们画一张$n \times m $的图(假设$n \geq m $),其中格点$( a , b ) $表示现在还剩$a $个Yes,$b $个No.我们再把我们的策略用图上的有向边表示.我们先考虑转化为计数问题,那答案显然就是所有从$( n , m ) $走到$( 0 , 0 ) $的路径与我们图上有向边的交的大小总和.</p>
<p>然后咧?</p>
<p>我们注意到这张图长得太规律了,换句话说,如果我们把图的左半部分沿着直线$y = x $翻折(路径也跟着翻折),注意到对着这张图做仍然是一样的!</p>
<p>所以呢?由于从$( n , m ) $走到$( 0 , 0 ) $一定会经过$n $条有向边,所以期望贡献一定要加上一个$n $.而如果我走到了直线$y = x $上,那接下来的贡献是$\frac { 1  } { 2  } $.我们只需要枚举一下走到了多少次即可.</p>
<h2><span id="数据随机下的性质">数据随机下的性质</span></h2><h3><span id="树">树</span></h3><ol>
<li><p>随机树树高为$\sqrt { n  } $.</p>
</li>
<li><p>点的度数期望为$\log n $.</p>
</li>
</ol>
<h3><span id="数">数</span></h3><ol>
<li>数字的期望因数个数为$\log V $.</li>
</ol>
<h3><span id="序列">序列</span></h3><ol>
<li>随机序列的LIS长度期望为$O ( \sqrt { n  } ) $.</li>
</ol>
<h2><span id="随机化算法的分类">随机化算法的分类</span></h2><h3><span id="数值概率算法">数值概率算法</span></h3><p>即通过随机选取元素从而求得在数值上的近似解.较之于传统算法,其运行速度更快,而且随着运行时间的增加,近似解的精度也会提高.在不可能或不必要求出问题的精确解时,可以使用其得到相当满意的近似解,如随机撒点法(近似求难以计算的图形面积).</p>
<h3><span id="monte-carlo算法">Monte Carlo算法</span></h3><p>总是能在确定的运行时间内出解,但是得到的解有一定概率是错的.通常出错的概率比较小,因此可以通过反复运行算法来得到可以接受的正确率.</p>
<h5><span id="求解最优化问题的monte-carlo算法">求解最优化问题的Monte Carlo算法</span></h5><p>事实上,大部分最优化问题都可以转化为判定性问题:也就是判定一个解是否是最优解,因此我们接下来基本都是讨论的求解判定性问题的Monte Carlo算法.</p>
<h5><span id="求解判定性问题的monte-carlo算法">求解判定性问题的Monte Carlo算法</span></h5><ol>
<li><p>假倾向的Monte Carlo算法:当这类算法的返回值为假的时候,结果一定正确,但返回值为真的时候则有一定概率错误.</p>
</li>
<li><p>真倾向的Monte Carlo算法:当这类算法的返回值为真的时候,结果一定正确,但返回值为假的时候则有一定概率错误.</p>
</li>
<li><p>产生双侧错误的Monte Carlo算法:无论返回值为什么都有概率出错.基本不会使用.</p>
</li>
</ol>
<p>以下讨论的Monte Carlo算法均为产生单侧错误的Monte Carlo算法.</p>
<h5><span id="正确率与复杂度">正确率与复杂度</span></h5><p>显然,如果我们有一个单词正确率为$p $,时间复杂度为$O ( f ( n ) ) $的算法,我们运行其$k $次,则正确率为$1 - ( 1 - p ) ^k $,时间复杂度为$O ( kf ( n ) ) $.</p>
<h5><span id="算法设计思路1">算法设计思路1</span></h5><p>我们来总结一下通常的Monte Carlo算法的设计思路:</p>
<h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要枚举一些元素.</p>
</li>
<li><p>设这个算法的复杂度为$O ( f ( n ) g ( n ) ) $,其中$f ( n ) $为枚举部分的复杂度,$g ( n ) $为单词枚举中计算所需的复杂度.大部分情况下应保证$g ( n ) $不会很大.</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机化寻找元素来降低复杂度.</p>
</li>
<li><p>计算随机化情况下的正确率以及复杂度.</p>
</li>
</ol>
<h5><span id="算法设计思路2">算法设计思路2</span></h5><h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要用到一个或多个传入的元素.</p>
</li>
<li><p>这个元素的值不应该依赖于输入数据.</p>
</li>
<li><p>我们可以通过check这个元素来得到与答案有关的信息.</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机这个元素.</p>
</li>
<li><p>计算随机化情况下的正确率以及复杂度</p>
</li>
</ol>
<h5><span id="example">Example</span></h5><h6><span id="example-1millar-rabin算法">Example 1(Millar-Rabin算法)</span></h6><p>略</p>
<h6><span id="example2codechef-mstone">Example2(CodeChef MSTONE)</span></h6><p>平面上有$n $个互不重合的点,已知存在不超过$7 $条直线可以覆盖全部的点,问在平面上作一条直线,最多能覆盖多少个点.$n \leq 10000 $.</p>
<p>考虑一个朴素的暴力:枚举两个点,确定一条直线,然后判断多少个点在这条直线上.但是这样复杂度是$O ( n ^3 ) $的.</p>
<p>考虑加入随机化.我们不妨每次随机两个点,注意到存在七条直线覆盖全部的点,那覆盖点最多的直线覆盖的点数一定不少于$\lceil \frac { n  } { 7  } \rceil $个点.换句话说,我们随机一个点,这个点在这条直线上的概率是$\frac { 1  } { 7  } $,因此随机两个点确定这条直线的概率为$\frac { 1  } { 49  } $.随机$1000 $次,错误概率为$1 - ( \frac { 48  } { 49  } ) ^{ 1000  } $,是很小的.</p>
<h6><span id="example3cf364d-ghd">Example3(CF364D Ghd)</span></h6><p>给定一个长度为$n $的序列,要求找出一个长度大于等于$\frac { n  } { 2  } $的子序列,使这个子序列中所有数的$\gcd $最大,求最大的$\gcd $.$n \leq 10 ^6 $,$a _i \leq 10 ^{ 12  } $.</p>
<p>注意到我们随机一个数,这个数在最终答案中的概率是$\frac { 1  } { 2  } $.我们不妨直接随机这个数,然后枚举它的因子,判断每个因子在序列中的出现次数即可.但是这样单次复杂度$O ( n \sqrt { a  } ) $,好像不太能过.</p>
<p>冷静一下,我们不妨将这$\sqrt { a  } $个质因子全都存下来,然后将$n $个数也全都存下来,做狄利克雷后缀和即可.不过直接做可能还需要离散化/map,我们考虑先把所有数与我们随机到的那个数取一个$\gcd $,这样所有数就都是这个数的因子,可以使用大小因子分别编号来实现.</p>
<h6><span id="example4poi2014couriers">Example4([POI2014]Couriers)</span></h6><p>给定长度为$n $的序列$a $,有$m $次询问,每次给定一个区间$[ l , r ] $,问$a [ l , r ] $中是否存在出现次数严格大于其它所有数出现次数之和的数,如果存在请输出.$( n , m \leq 500000 , 1 \leq a _i \leq n ) $.</p>
<p>先存下来每个位置的数是第几次出现,我们就可以利用二分快速找到一个区间内某个数出现次数.接下来只需要随机化找这个区间内某个数并判断是否满足条件即可.</p>
<h5><span id="example5noi2013-向量内积">Example5([NOI2013] 向量内积)</span></h5><p>先考虑$k = 2 $的情况:</p>
<p>首先,我们自然可以枚举一个向量$A $并判断它与其它向量的内积,这样复杂度为$O ( n ^2 d ) $.</p>
<p>冷静一下,这个过程其实就是一个矩阵乘法的过程:我们设$A = \begin{bmatrix}\vec { a _1  } , \vec { a _2  } , . . . , \vec { a _n  } \end{bmatrix} $,那我们要验证的无非是$B = AA ^T $中是否存在一个不在主对角线上的元素$B _{ i , j  } $在$\mod 2 $意义下为$0 $.</p>
<p>这咋做啊?我们冷静一下,构造一个矩阵$C $,其中$C $的主对角线元素与$B $相同,而其他元素全是$1 $.接下来我们要做的无非是找到$B $和$C $不同的地方.</p>
<p>这咋办呢?我们考虑这么一点:如果$B = C $,那么对于任意一个$X _{ m \times n  } $都应该满足$XB = XC $,取$m = 1 $,我们的问题就转化为:是否能找到一个$X $,使得$XB \ne XC $?这显然可以随机化.计算前者的复杂度为$O ( nd ) $,后者由于$C $很特殊,可以在$O ( n ) $的时间内求出.这样我们就保证了算法复杂度上的合理性.</p>
<p>接下来,我们要证明其正确率上的合理性.这个算法显然是单侧错误的Monte Carlo算法.问题在于正确率:</p>
<p>令$D = B - C $,若返回相等但实际上不相等,则$D $中至少存在一个不为$0 $的数字,假设$D _{ i , j  } \ne 0 $.我们令$E = X \times D $,那么只有当$E $是零向量时才会错误.而$E _j = \sum _{ k  } X _k D _{ k , j  } $,不难解得:$E _i = - \frac { 1  } { D _{ i , j  }  } \sum _{ k \ne i  } X _k D _{ k , j  } $,也就是说如果$X $的其它位置都确定了,那么$E $只有一种取值会返回错误.由于$k $一共就俩取值,所以正确率至少$\frac { 1  } { 2  } $.</p>
<p>至于找到答案:我们找到一个不为$0 $的$E _i $,那么一定存在一组解包含了第$i $个向量,只需枚举另一个向量检验就行,复杂度$O ( nd ) $.</p>
<p>$k = 3 $的话,我们注意到$\mod 3 $意义下,$1 $和$2 $的平方都是$1 $.考虑$\sum _{ j  } B _{ i , j  } ^2 X _j = \sum _{ j  } B _{ i , j  } X _j B _{ h , i  } ^T $,大概做做.</p>
<h3><span id="las-vegas算法sherwood算法">Las Vegas算法(Sherwood算法)</span></h3><p>总是能返回正确的结果,但是其运行时间不确定.对于一些平均时间复杂度优秀,但是最坏情况下复杂度较高的确定性算法,通过引入随机函数,尝试减小最坏情况的可能性,以在期望意义下达到优秀的时间复杂度.</p>
<h5><span id="算法设计思路">算法设计思路</span></h5><h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要枚举全排列.</p>
</li>
<li><p>通常,问题问的是要么只是可行解而不是最优解,要么最优方案特别多,总之要保证有用的排列个数不会太少</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机化寻找排列来降低复杂度.</p>
</li>
<li><p>通常证明复杂度和正确率巨大麻烦,这里建议直接实践证明.</p>
</li>
</ol>
<h5><span id="example">Example</span></h5><h6><span id="快速排序算法">快速排序算法</span></h6><p>我们试图计算它的期望时间复杂度:</p>
<p>不妨设$T ( n ) $表示对长度为$n $的序列运行快速排序算法所需的期望时间,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( 0 ) & = 0 \\
T ( n ) & = n + \frac { 1  } { n  } \sum _{ i = 0  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) 
\end{aligned}</script><p>做放缩(可能有些地方需要$+ 1 $或者$- 1 $或者加取整,但是问题不大,反正是期望):</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & = n + \frac { 1  } { n  } \sum _{ i = 0  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) \\
& = n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) \\
& = n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ \frac { 3 n  } { 4  }  } ( T ( i ) + T ( n - i - 1 ) ) + \frac { 2  } { n  } \sum _{ i = \frac { 3 n  } { 4  }  } ^{ n  } ( T ( i ) + T ( n - i - 1 ) ) 
\end{aligned}</script><p>由于$T ( n ) \geq n $,所以对于$\frac { n  } { 2  } \leq i \leq j $,我们显然有:$T ( i ) + T ( n - i ) \leq T ( j ) + T ( n - j ) $.</p>
<p>因此:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & \leq n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ \frac { 3 n  } { 4  }  } ( T ( \frac { 3 n  } { 4  } ) + T ( \frac { n  } { 4  } ) ) + \frac { 2  } { n  } \sum _{ i = \frac { 3 n  } { 4  }  } ^{ n  } ( T ( n - 1 ) + T ( 0 ) ) \\
& \leq n + \frac { 1  } { 2  } ( T ( \frac { 3 n  } { 4  } ) + T ( \frac { n  } { 4  } ) + T ( n - 1 ) ) 
\end{aligned}</script><p>我们要证明$\exists c $,$T ( n ) \leq cn \log n $,考虑使用数学归纳法,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & \leq n + \frac { 1  } { 2  } ( \frac { 3 cn  } { 4  } \log ( \frac { 3 n  } { 4  } ) + \frac { cn  } { 4  } \log ( \frac { n  } { 4  } ) + c ( n - 1 ) \log ( n - 1 ) ) \\
& \leq n + c ( \frac { 3 n  } { 8  } \log n - \frac { 3 n  } { 8  } \log \frac { 4  } { 3  } + \frac { n  } { 8  } \log n - \frac { n  } { 4  } + \frac { n  } { 2  } \log n ) \\
& = cn \log n + n ( 1 - \frac { 3 c  } { 8  } \log ( \frac { 4  } { 3  } ) - \frac { c  } { 4  } ) 
\end{aligned}</script><p>于是显然存在,假设成立.</p>
<h6><span id="一类由monte-carlo算法改造而成的算法">一类由Monte Carlo算法改造而成的算法</span></h6><p>对于一类一定有解的构造性问题,假设我们有一个正确率为$p $,时间复杂度为$O ( f ( n ) ) $的产生单侧错误的Monte Carlo算法,我们时图将其改造为Las Vegas算法,我们现在想知道它的期望复杂度.</p>
<p>设其期望运行$k $次,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k & = \sum _{ i = 1  } ^{ \infty  } p ( 1 - p ) ^{ i - 1  } i \\
( 1 - p ) k & = \sum _{ i = 1  } ^{ \infty  } p ( 1 - p ) ^i i \\
pk & = \sum _{ i = 2  } ^{ \infty  } p ( 1 - p ) ^{ i - 1  } & = p \sum _{ i = 0  } ^{ \infty  } ( 1 - p ) ^i \\
k & = \frac { 1  } { p  } 
\end{aligned}</script><p>则期望复杂度为$O ( \frac { f ( n )  } { p  } ) $.</p>
<h6><span id="example3cf329c-graph-reconstruction">Example3(CF329C Graph Reconstruction)</span></h6><h6><span id="example4petrozavodsk-summer-2015-moscow-ipt-contest-bgame-with-a-fairy">Example4([Petrozavodsk Summer-2015. Moscow IPT Contest B]Game With A Fairy)</span></h6><p>首先注意到一个问题:操作能得到的信息太少了,应该是没有什么确定性算法.因此考虑随机化,那就肯定要先将整个序列random_shuffle一下.</p>
<p>然后呢?我们考虑之后随机选取新序列的一个前缀询问,只要有大致的正确性/复杂性估计应该就是很正确的.</p>
<p>这里有一种方式:考虑这个前缀中第一个有宝藏的位置$x _1 $和第二个位置$x _2 $,显然只要问到$[ x _1 , x _2 ) $是正确的.</p>
<p>考虑因为是随机,所以$x _1 \times 2 \leq x _2 $的概率应当是不低的(事实上约为$\frac { 1  } { 2  } $),而此时的$[ x _1 , x _2 ) $中必有一个位置是二的整数幂,因此我们查询一个等比数列:$1 , 2 , 4 , . . . $.每次random_shuffle后就查一次,就可以得到一个正确性较高的Las Vegas算法.</p>
<h3><span id="爬山与模拟退火">爬山与模拟退火</span></h3><h4><span id="爬山">爬山</span></h4><p>也就是随机一个起始的解,然后走向与其相邻的较大的解.</p>
<p>但是这样会卡在一个局部最优解上而得不到全局最优解.</p>
<p>于是我们就有了模拟退火算法.</p>
<h4><span id="模拟退火">模拟退火</span></h4><p>简而言之,模拟退火就是以一定的概率跳到随机的不优秀的点,这样就避免卡在了局部最优解上.不妨设我们想找到最大解,如果要最小解那就稍微改改.</p>
<p>下面给出这个概率的公式:</p>
<script type="math/tex; mode=display">
P = \begin{cases}
1 & E _{ t + 1  } > E _t \\
e ^{ \frac { E _{ t + 1  } - E _t  } { T  }  } & E _{ t + 1  } \leq E _t 
\end{cases}</script><p>具体流程是,先设定一个初始温度$T _0 $,降温速度$k \in ( 0 , 1 ) $,以及终止温度$T _k $,每次操作后让$T = kT $,直到其小于终止温度.</p>
]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>程序设计实习</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E4%B9%A0/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="随机化算法">随机化算法</span></h2><h3><span id="基本分析">基本分析</span></h3><h4><span id="union-bound">Union Bound</span></h4><p>即:$Pr [ \bigcup _i X _i ] \leq \sum Pr [ X _i ] $,取等当且仅当所有$X _i $互斥.</p>
<h4><span id="markov-不等式">Markov 不等式</span></h4><p>若$X \geq 0 $,则$Pr [ X \geq t \mathbb { E  } [ X ] ] \leq \frac { 1  } { t  } $.</p>
<h6><span id="examplemax-cut算法">Example(Max-Cut算法)</span></h6><p>一个无向无权图,将点集划分成两个部分,使得跨越这两部分的边尽可能多.</p>
<p>直接随机划分,容易见到每条边有$\frac { 1  } { 2  } $的概率是割边,因此期望自然是$\frac { 1  } { 2  } | E | \geq \frac { 1  } { 2  } | \text { max - cut  } | $.</p>
<p>由此立即见到,$Pr [ | ans | \leq ( \frac { 1  } { 2  } - \epsilon ) | E | ] = Pr [ | E | - | ans | \geq ( \frac { 1  } { 2  } + \epsilon ) | E | ] \leq \frac { 1  } { 1 + 2 \epsilon  } $.</p>
<p>由于每次独立操作,因此如果有$P $的概率失败,那么运行$T $次后至少成功一次的概率应当为$1 - P ^T $.从而$T = O ( \log _P { \delta  } ) = O ( \cfrac { \ln \frac { 1  } { \delta  }  } { \ln ( 1 + { 2 \epsilon  } )  } ) \approx O ( \cfrac { \ln \frac { 1  } { \delta  }  } { \epsilon  } ) $即可拿到$\delta $失败概率.</p>
<h4><span id="chernoff-bound">Chernoff Bound</span></h4><p>设$X _1 , \cdots , X _n \in [ 0 , 1 ] $是独立,同期望(期望为$\mu \geq t $)的随机变量,令$X = \frac { \sum _k X _k  } { n  } $,对于任何失败概率$\delta \in ( 0 , 1 ) $,应当有:</p>
<script type="math/tex; mode=display">
Pr \left [ | X - \mu | \geq \sqrt { \cfrac { \log ( 1 / \delta )  } { nt  }  } \mu \right ] \leq \delta</script><h6><span id="examplemedian-trick">Example(Median Trick)</span></h6><p>现在有一个黑盒能够以$p &gt; \frac { 1  } { 2  } $的概率正确回答Yes或者No,问重复$T $选多少次能拿到$1 - \delta $的成功概率.</p>
<p>考虑重复$T $次后应当有期望$pT $个正确答案,因此直接取中位数.称此算法为Median Trick.</p>
<p>Chernoff Bound 告诉我们$T = O ( \log \frac { 1  } { \delta  } ) $足够.</p>
<h4><span id="hoeffding-不等式">Hoeffding 不等式</span></h4><p>设独立随机变量$x _1 , \cdots , x _m \in [ s , t ] $,令$X = \sum _i x _i $,则:</p>
<script type="math/tex; mode=display">
Pr [ X - E [ X ] \geq z ] \leq 2 \exp \left ( - \cfrac { 2 z ^2  } { m ( t - s ) ^2  } \right )</script><h3><span id="编程中的随机性">编程中的随机性</span></h3><p>一般采用伪随机,也即是给定初值$X _0 $,通过某个确定性的函数来生成$X _{ n + 1  } = f ( X _n ) $这样的.</p>
<h3><span id="数值概率算法">数值概率算法</span></h3><p>即通过随机选取元素从而求得在数值上的近似解.较之于传统算法,其运行速度更快,而且随着运行时间的增加,近似解的精度也会提高.在不可能或不必要求出问题的精确解时,可以使用其得到相当满意的近似解,如随机撒点法(近似求难以计算的图形面积).</p>
<h3><span id="monte-carlo算法">Monte Carlo算法</span></h3><p>总是能在确定的运行时间内出解,但是得到的解有一定概率是错的.通常出错的概率比较小,因此可以通过反复运行算法来得到可以接受的正确率.</p>
<h5><span id="求解最优化问题的monte-carlo算法">求解最优化问题的Monte Carlo算法</span></h5><p>事实上,大部分最优化问题都可以转化为判定性问题:也就是判定一个解是否是最优解,因此我们接下来基本都是讨论的求解判定性问题的Monte Carlo算法.</p>
<h5><span id="求解判定性问题的monte-carlo算法">求解判定性问题的Monte Carlo算法</span></h5><ol>
<li><p>假倾向的Monte Carlo算法:当这类算法的返回值为假的时候,结果一定正确,但返回值为真的时候则有一定概率错误.</p>
</li>
<li><p>真倾向的Monte Carlo算法:当这类算法的返回值为真的时候,结果一定正确,但返回值为假的时候则有一定概率错误.</p>
</li>
<li><p>产生双侧错误的Monte Carlo算法:无论返回值为什么都有概率出错.基本不会使用.</p>
</li>
</ol>
<p>以下讨论的Monte Carlo算法均为产生单侧错误的Monte Carlo算法.</p>
<h5><span id="正确率与复杂度">正确率与复杂度</span></h5><p>显然,如果我们有一个单词正确率为$p $,时间复杂度为$O ( f ( n ) ) $的算法,我们运行其$k $次,则正确率为$1 - ( 1 - p ) ^k $,时间复杂度为$O ( kf ( n ) ) $.</p>
<h5><span id="算法设计思路1">算法设计思路1</span></h5><p>我们来总结一下通常的Monte Carlo算法的设计思路:</p>
<h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要枚举一些元素.</p>
</li>
<li><p>设这个算法的复杂度为$O ( f ( n ) g ( n ) ) $,其中$f ( n ) $为枚举部分的复杂度,$g ( n ) $为单词枚举中计算所需的复杂度.大部分情况下应保证$g ( n ) $不会很大.</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机化寻找元素来降低复杂度.</p>
</li>
<li><p>计算随机化情况下的正确率以及复杂度.</p>
</li>
</ol>
<h5><span id="算法设计思路2">算法设计思路2</span></h5><h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要用到一个或多个传入的元素.</p>
</li>
<li><p>这个元素的值不应该依赖于输入数据.</p>
</li>
<li><p>我们可以通过check这个元素来得到与答案有关的信息.</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机这个元素.</p>
</li>
<li><p>计算随机化情况下的正确率以及复杂度</p>
</li>
</ol>
<h5><span id="example">Example</span></h5><h6><span id="example-1millar-rabin算法">Example 1(Millar-Rabin算法)</span></h6><p>略</p>
<h6><span id="example2codechef-mstone">Example2(CodeChef MSTONE)</span></h6><p>平面上有$n $个互不重合的点,已知存在不超过$7 $条直线可以覆盖全部的点,问在平面上作一条直线,最多能覆盖多少个点.$n \leq 10000 $.</p>
<p>考虑一个朴素的暴力:枚举两个点,确定一条直线,然后判断多少个点在这条直线上.但是这样复杂度是$O ( n ^3 ) $的.</p>
<p>考虑加入随机化.我们不妨每次随机两个点,注意到存在七条直线覆盖全部的点,那覆盖点最多的直线覆盖的点数一定不少于$\lceil \frac { n  } { 7  } \rceil $个点.换句话说,我们随机一个点,这个点在这条直线上的概率是$\frac { 1  } { 7  } $,因此随机两个点确定这条直线的概率为$\frac { 1  } { 49  } $.随机$1000 $次,错误概率为$1 - ( \frac { 48  } { 49  } ) ^{ 1000  } $,是很小的.</p>
<h6><span id="example3cf364d-ghd">Example3(CF364D Ghd)</span></h6><p>给定一个长度为$n $的序列,要求找出一个长度大于等于$\frac { n  } { 2  } $的子序列,使这个子序列中所有数的$\gcd $最大,求最大的$\gcd $.$n \leq 10 ^6 $,$a _i \leq 10 ^{ 12  } $.</p>
<p>注意到我们随机一个数,这个数在最终答案中的概率是$\frac { 1  } { 2  } $.我们不妨直接随机这个数,然后枚举它的因子,判断每个因子在序列中的出现次数即可.但是这样单次复杂度$O ( n \sqrt { a  } ) $,好像不太能过.</p>
<p>冷静一下,我们不妨将这$\sqrt { a  } $个质因子全都存下来,然后将$n $个数也全都存下来,做狄利克雷后缀和即可.不过直接做可能还需要离散化/map,我们考虑先把所有数与我们随机到的那个数取一个$\gcd $,这样所有数就都是这个数的因子,可以使用大小因子分别编号来实现.</p>
<h6><span id="example4poi2014couriers">Example4([POI2014]Couriers)</span></h6><p>给定长度为$n $的序列$a $,有$m $次询问,每次给定一个区间$[ l , r ] $,问$a [ l , r ] $中是否存在出现次数严格大于其它所有数出现次数之和的数,如果存在请输出.$( n , m \leq 500000 , 1 \leq a _i \leq n ) $.</p>
<p>先存下来每个位置的数是第几次出现,我们就可以利用二分快速找到一个区间内某个数出现次数.接下来只需要随机化找这个区间内某个数并判断是否满足条件即可.</p>
<h5><span id="example5noi2013-向量内积">Example5([NOI2013] 向量内积)</span></h5><p>先考虑$k = 2 $的情况:</p>
<p>首先,我们自然可以枚举一个向量$A $并判断它与其它向量的内积,这样复杂度为$O ( n ^2 d ) $.</p>
<p>冷静一下,这个过程其实就是一个矩阵乘法的过程:我们设$A = \begin{bmatrix}\vec { a _1  } , \vec { a _2  } , . . . , \vec { a _n  } \end{bmatrix} $,那我们要验证的无非是$B = AA ^T $中是否存在一个不在主对角线上的元素$B _{ i , j  } $在$\mod 2 $意义下为$0 $.</p>
<p>这咋做啊?我们冷静一下,构造一个矩阵$C $,其中$C $的主对角线元素与$B $相同,而其他元素全是$1 $.接下来我们要做的无非是找到$B $和$C $不同的地方.</p>
<p>这咋办呢?我们考虑这么一点:如果$B = C $,那么对于任意一个$X _{ m \times n  } $都应该满足$XB = XC $,取$m = 1 $,我们的问题就转化为:是否能找到一个$X $,使得$XB \ne XC $?这显然可以随机化.计算前者的复杂度为$O ( nd ) $,后者由于$C $很特殊,可以在$O ( n ) $的时间内求出.这样我们就保证了算法复杂度上的合理性.</p>
<p>接下来,我们要证明其正确率上的合理性.这个算法显然是单侧错误的Monte Carlo算法.问题在于正确率:</p>
<p>令$D = B - C $,若返回相等但实际上不相等,则$D $中至少存在一个不为$0 $的数字,假设$D _{ i , j  } \ne 0 $.我们令$E = X \times D $,那么只有当$E $是零向量时才会错误.而$E _j = \sum _{ k  } X _k D _{ k , j  } $,不难解得:$E _i = - \frac { 1  } { D _{ i , j  }  } \sum _{ k \ne i  } X _k D _{ k , j  } $,也就是说如果$X $的其它位置都确定了,那么$E $只有一种取值会返回错误.由于$k $一共就俩取值,所以正确率至少$\frac { 1  } { 2  } $.</p>
<p>至于找到答案:我们找到一个不为$0 $的$E _i $,那么一定存在一组解包含了第$i $个向量,只需枚举另一个向量检验就行,复杂度$O ( nd ) $.</p>
<p>$k = 3 $的话,我们注意到$\mod 3 $意义下,$1 $和$2 $的平方都是$1 $.考虑$\sum _{ j  } B _{ i , j  } ^2 X _j = \sum _{ j  } B _{ i , j  } X _j B _{ h , i  } ^T $,大概做做.</p>
<h3><span id="las-vegas算法sherwood算法">Las Vegas算法(Sherwood算法)</span></h3><p>总是能返回正确的结果,但是其运行时间不确定.对于一些平均时间复杂度优秀,但是最坏情况下复杂度较高的确定性算法,通过引入随机函数,尝试减小最坏情况的可能性,以在期望意义下达到优秀的时间复杂度.</p>
<h5><span id="算法设计思路">算法设计思路</span></h5><h6><span id="设计一个能解决问题的确定性算法">设计一个能解决问题的确定性算法</span></h6><ol>
<li><p>这个算法需要枚举全排列.</p>
</li>
<li><p>通常,问题问的是要么只是可行解而不是最优解,要么最优方案特别多,总之要保证有用的排列个数不会太少</p>
</li>
</ol>
<h6><span id="向算法引入随机化优化复杂度">向算法引入随机化优化复杂度</span></h6><ol>
<li><p>随机化寻找排列来降低复杂度.</p>
</li>
<li><p>通常证明复杂度和正确率巨大麻烦,这里建议直接实践证明.</p>
</li>
</ol>
<h5><span id="example">Example</span></h5><h6><span id="快速排序算法">快速排序算法</span></h6><p>我们试图计算它的期望时间复杂度:</p>
<p>不妨设$T ( n ) $表示对长度为$n $的序列运行快速排序算法所需的期望时间,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( 0 ) & = 0 \\
T ( n ) & = n + \frac { 1  } { n  } \sum _{ i = 0  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) 
\end{aligned}</script><p>做放缩(可能有些地方需要$+ 1 $或者$- 1 $或者加取整,但是问题不大,反正是期望):</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & = n + \frac { 1  } { n  } \sum _{ i = 0  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) \\
& = n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ n - 1  } ( T _i + T _{ n - i - 1  } ) \\
& = n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ \frac { 3 n  } { 4  }  } ( T ( i ) + T ( n - i - 1 ) ) + \frac { 2  } { n  } \sum _{ i = \frac { 3 n  } { 4  }  } ^{ n  } ( T ( i ) + T ( n - i - 1 ) ) 
\end{aligned}</script><p>由于$T ( n ) \geq n $,所以对于$\frac { n  } { 2  } \leq i \leq j $,我们显然有:$T ( i ) + T ( n - i ) \leq T ( j ) + T ( n - j ) $.</p>
<p>因此:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & \leq n + \frac { 2  } { n  } \sum _{ i = \frac { n  } { 2  }  } ^{ \frac { 3 n  } { 4  }  } ( T ( \frac { 3 n  } { 4  } ) + T ( \frac { n  } { 4  } ) ) + \frac { 2  } { n  } \sum _{ i = \frac { 3 n  } { 4  }  } ^{ n  } ( T ( n - 1 ) + T ( 0 ) ) \\
& \leq n + \frac { 1  } { 2  } ( T ( \frac { 3 n  } { 4  } ) + T ( \frac { n  } { 4  } ) + T ( n - 1 ) ) 
\end{aligned}</script><p>我们要证明$\exists c $,$T ( n ) \leq cn \log n $,考虑使用数学归纳法,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ( n ) & \leq n + \frac { 1  } { 2  } ( \frac { 3 cn  } { 4  } \log ( \frac { 3 n  } { 4  } ) + \frac { cn  } { 4  } \log ( \frac { n  } { 4  } ) + c ( n - 1 ) \log ( n - 1 ) ) \\
& \leq n + c ( \frac { 3 n  } { 8  } \log n - \frac { 3 n  } { 8  } \log \frac { 4  } { 3  } + \frac { n  } { 8  } \log n - \frac { n  } { 4  } + \frac { n  } { 2  } \log n ) \\
& = cn \log n + n ( 1 - \frac { 3 c  } { 8  } \log ( \frac { 4  } { 3  } ) - \frac { c  } { 4  } ) 
\end{aligned}</script><p>于是显然存在,假设成立.</p>
<h6><span id="一类由monte-carlo算法改造而成的算法">一类由Monte Carlo算法改造而成的算法</span></h6><p>对于一类一定有解的构造性问题,假设我们有一个正确率为$p $,时间复杂度为$O ( f ( n ) ) $的产生单侧错误的Monte Carlo算法,我们时图将其改造为Las Vegas算法,我们现在想知道它的期望复杂度.</p>
<p>设其期望运行$k $次,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k & = \sum _{ i = 1  } ^{ \infty  } p ( 1 - p ) ^{ i - 1  } i \\
( 1 - p ) k & = \sum _{ i = 1  } ^{ \infty  } p ( 1 - p ) ^i i \\
pk & = \sum _{ i = 2  } ^{ \infty  } p ( 1 - p ) ^{ i - 1  } & = p \sum _{ i = 0  } ^{ \infty  } ( 1 - p ) ^i \\
k & = \frac { 1  } { p  } 
\end{aligned}</script><p>则期望复杂度为$O ( \frac { f ( n )  } { p  } ) $.</p>
<h6><span id="example3cf329c-graph-reconstruction">Example3(CF329C Graph Reconstruction)</span></h6><h6><span id="example4petrozavodsk-summer-2015-moscow-ipt-contest-bgame-with-a-fairy">Example4([Petrozavodsk Summer-2015. Moscow IPT Contest B]Game With A Fairy)</span></h6><p>首先注意到一个问题:操作能得到的信息太少了,应该是没有什么确定性算法.因此考虑随机化,那就肯定要先将整个序列random_shuffle一下.</p>
<p>然后呢?我们考虑之后随机选取新序列的一个前缀询问,只要有大致的正确性/复杂性估计应该就是很正确的.</p>
<p>这里有一种方式:考虑这个前缀中第一个有宝藏的位置$x _1 $和第二个位置$x _2 $,显然只要问到$[ x _1 , x _2 ) $是正确的.</p>
<p>考虑因为是随机,所以$x _1 \times 2 \leq x _2 $的概率应当是不低的(事实上约为$\frac { 1  } { 2  } $),而此时的$[ x _1 , x _2 ) $中必有一个位置是二的整数幂,因此我们查询一个等比数列:$1 , 2 , 4 , . . . $.每次random_shuffle后就查一次,就可以得到一个正确性较高的Las Vegas算法.</p>
<h3><span id="爬山与模拟退火">爬山与模拟退火</span></h3><h4><span id="爬山">爬山</span></h4><p>也就是随机一个起始的解,然后走向与其相邻的较大的解.</p>
<p>但是这样会卡在一个局部最优解上而得不到全局最优解.</p>
<p>于是我们就有了模拟退火算法.</p>
<h4><span id="模拟退火">模拟退火</span></h4><p>简而言之,模拟退火就是以一定的概率跳到随机的不优秀的点,这样就避免卡在了局部最优解上.不妨设我们想找到最大解,如果要最小解那就稍微改改.</p>
<p>下面给出这个概率的公式:</p>
<script type="math/tex; mode=display">
P = \begin{cases}
1 & E _{ t + 1  } > E _t \\
e ^{ \frac { E _{ t + 1  } - E _t  } { T  }  } & E _{ t + 1  } \leq E _t 
\end{cases}</script><p>具体流程是,先设定一个初始温度$T _0 $,降温速度$k \in ( 0 , 1 ) $,以及终止温度$T _k $,每次操作后让$T = kT $,直到其小于终止温度.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>CS</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构相关</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="数据结构理论">数据结构理论</span></h2><h3><span id="维度">维度</span></h3><h4><span id="b维正交范围">B维正交范围</span></h4><p>对于一个$B $维的点$x $,满足$\forall 1 \leq i \leq B , l _i \leq x _i \leq r _i $,称所有这样的点组成的集合为一个$B $维正交范围.</p>
<p>一维正交范围就是区间,二维正交范围是矩形,三维正交范围是立方体.</p>
<p>另外,如果$l , r $有若干个是自动满足的(所有点都满足),那么我们称它为无用限制,如果一个$B $维正交范围有$k $个有用限制,称它为$k - side $的.</p>
<p>例如,找到区间$[ l , r ] $中$&lt; x $的元素,这个矩形是$3 - side $的.找到区间$[ 1 , l ] $中$&lt; x $的元素,这个矩形是$2 - side $的.有些矩形虽然是高side的,但可能因为某些维度满足可减性,因此可能等价于一个低side的问题.</p>
<p>(lxl:我建议大家遇到题都要把能差分的东西差分到不能差分为止)</p>
<h3><span id="矩阵乘法归约">矩阵乘法归约</span></h3><h4><span id="矩阵乘法">矩阵乘法</span></h4><p>做$n \times n $的矩阵乘法目前得到的最优秀复杂度也是$O ( n ^{ 2 . 373  } ) $.</p>
<p>另外可以归约:$01 $矩阵和整数矩阵在去除$\log n $后的复杂度相同.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1链颜色数问题">Example1(链颜色数问题)</span></h5><p>考虑构造一棵树:他有$\sqrt { n  } $个叉,每个叉上有$\sqrt { n  } $个点.我们将这些叉编号为$[ 1 , \sqrt { n  } ] $.然后我们考虑询问两个叉所组成的链的答案,设$f _{ i , j  } $表示数字$j $是否在$i $的叉上出现过,不难发现它们合并的时候要对$f $做或运算,$01 $矩阵乘法相当于且运算,显然这两个运算等价,证毕.</p>
<h5><span id="example2区间逆序对">Example2(区间逆序对)</span></h5><p>考虑对序列和值域同时分块,考虑序列中第$L $到第$R $个块的答案,设为$f ( L , R ) $,这两块间的答案设为$g ( L , R ) $,显然$f ( L , R ) = f ( L + 1 , R ) + f ( L , R - 1 ) - f ( L + 1 , R - 1 ) + g ( L , R ) $,而由于对值域分块,$g ( L , R ) = \sum a \times b $的形式.根据这个形式构造即可.当然这个只是简化了好多,你会发现这个东西只能处理矩阵某一行递增的情况.lxl:真正的归约是很复杂的.</p>
<h5><span id="example3">Example3</span></h5><p>平面上有若干点,两个操作:每次将横坐标小于等于$A $的点加上$v $,或者查询纵坐标小于等于$B $的点的点权和.</p>
<p>这玩意显然能加上扫描线归约区间逆序对.</p>
<h2><span id="数据结构">数据结构</span></h2><h3><span id="分块">分块</span></h3><h5><span id="example1luogup8527-ynoi2003-樋口円香">Example1(luoguP8527 [Ynoi2003] 樋口円香)</span></h5><p>首先将$a $分块,这样对于一次修改就分成了整块和散块.散块暴力做,整块的话显然是一个位移的形式,可以直接卷积,比较简单.</p>
<p>不过我们先考虑个事:这么顺溜就出来了,为啥会需要分块啊?</p>
<p>首先看到题面的位移的形式,自然想到卷积.但问题在于有个区间,所以需要把区间处理掉.注意到每个区间是需要记录一下不同的$L $的,这使得这个问题只能使用分块解决.</p>
<p>最后还没完,这题要平衡复杂度.</p>
<p>设块长为$B $,暴力处理散块的复杂度是$O ( Bm ) $,处理整块的复杂度是$O ( \frac { n  } { B  } ( m + n \log n ) ) $.取$B ^2 = \frac { n  } { m  } ( m + n \log n ) = 500 $最优.</p>
<p>但事实上FFT肯定是很慢的,所以我开到了$B = 2048 $.</p>
<p>即使这样,笔者还是被卡常了(哭).</p>
<h5><span id="example2luoguynoi2079-riapq">Example2(luogu[Ynoi2079] riapq)</span></h5><p>首先对于这种区间内部贡献,而且每个点由前面点的贡献,先看有没有可差分性(区间逆序对也是一个套路).</p>
<p>注意到是有的,这样我们就把问题转化为了$[ 1 , l - 1 ] $对$[ l , r ] $的贡献.</p>
<p>先序列分块.然后$[ 1 , l - 1 ] $中的整块对$[ l , r ] $的贡献是简单的:我们对每个整块开一个区间加单点查的树状数组,每次将$[ 1 , l - 1 ] $中的整块的树状数组进行一个$[ l , r ] $的区间加,查询的时候查一下每个整块对当前单点的贡献,这里需要对整块内部提前处理一下小于等于某个数的数量,自然可以做到$O ( Bq \log n ) $的时间复杂度和$O ( Bn ) $的空间复杂度.</p>
<p>问题在于$[ 1 , l - 1 ] $中的散块咋办.首先$[ 1 , l - 1 ] $中的散块对$[ l , r ] $中的散块的贡献是好处理的,因为总共就$O ( \frac { n  } { B  } ) $个数字,直接全部存下来排序做归并就可以统计,时间复杂度$O ( Bq \log n ) $.</p>
<p>现在的问题在于$[ 1 , l - 1 ] $中的散块对$[ l , r ] $中的整块如何贡献.能不能把$[ l , r ] $的信息统计在$[ 1 , l - 1 ] $的散块中呢?似乎不太行.因为散块的总数太多了.所以我们考虑把散块的信息记录在整块里.但是好像不太好记,因为你查询一个整块内的点的时候是需要判断记录的这些信息是否比它要小的,只有比它小的才能贡献.自然想到值域分块.不过还有一个问题,就是散块一共有$\frac { n  } { B  } $个,整块一共有$B $个,是不能一一对应着贡献的,这咋办呢?</p>
<p>其实挺好办的,因为散块要对一个区间有贡献,所以拿树状数组+差分统计一下就行.</p>
<p>最终复杂度为$O ( n \sqrt { n  } \log n ) $,需要进行一个极致卡常.</p>
<p>如果你写完代码测一下会发现,跑的最慢的是散块对散块的贡献,你把sort改成基数排序就行.事实上实测了一下基数排序还不如直接换成树状数组.</p>
<p>但即使这样,笔者现在也没过这个题(哭).</p>
<h5><span id="example3cts2022-普罗霍洛夫卡">Example3([CTS2022] 普罗霍洛夫卡)</span></h5><p>比较复杂的分块题.</p>
<p>放弃了,太难了.</p>
<h5><span id="example4walking-plan-hdu-6331">Example4(Walking Plan HDU 6331)</span></h5><p>类似BSGS一样分块处理即可,最后需要枚举中继点,询问部分复杂度$O ( nq ) $.</p>
<h5><span id="example5p5063-ynoi2014-置身天上之森">Example5(P5063 [Ynoi2014] 置身天上之森)</span></h5><p>考虑如果$n = 2 ^k $,很好做,因为每一层的点大小是相等的.我们对每一层分开处理,显然区间加操作也就等价于每一层的节点区间加上若干倍的$a $(开头结尾可能有两个需要特殊判断),用分块求区间rank的技巧就行.</p>
<p>但是$n $不一定是$2 ^k $,也简单,每一层最多有两种不一样大小的点,这是经典结论.</p>
<h5><span id="example6第二分块ynoi2018五彩斑斓的世界">Example6(第二分块:[Ynoi2018]五彩斑斓的世界)</span></h5><p>大概是对于每个块处理出它的值域范围:一开始是$[ 1 , n ] $,然后每次操作都会将整个块分为两部分:$[ 1 , x ) $和$[ x , maxn ] $,讨论一下$maxn $和$2 x $的大小,就可以用$\min ( x , maxn - x ) $的复杂度使得$maxn $变成$maxn - x $,复杂度均摊掉了.</p>
<h3><span id="二次离线">二次离线</span></h3><h5><span id="example1luogup5047-ynoi2019-模拟赛-yuno-loves-sqrt-technology-ii">Example1(luoguP5047 [Ynoi2019 模拟赛] Yuno loves sqrt technology II)</span></h5><p>简单来说就是区间逆序对数.</p>
<p>首先想到莫队,然后配一个树状数组就可以做到$O ( n \sqrt { n  } \log n ) $.</p>
<p>那我们怎么改这个东西呢?</p>
<p>我们注意到:我们莫队在实现的无非是俩事:一个是移动左端点的时候判断左端点对右边的贡献,一个是移动右端点的时候,由于这俩是对称的,我们只讨论左端点不动移动右端点.</p>
<p>考虑这个过程的答案实际上是可差分的,因为$[ l , r ] $对$r $的贡献实际上就是$[ 1 , r ] $对$r $的贡献减去$[ 1 , l - 1 ] $对$r $的贡献,前者可以直接算,而后者呢?</p>
<p>我们考虑对后者再进行一次离线操作,我们把这$O ( n \sqrt { n  } ) $次贡献查询全都记下来,然后扫描线处理一下.注意到我们只需要插入$O ( n ) $次但是需要查询$O ( n \sqrt { n  } ) $次,所以需要使用一下值域分块平衡一下复杂度.</p>
<p>做到这里其实要做完了,但还没完,这里空间复杂度达到了$O ( n \sqrt { n  } ) $,有点大.咋办呢?我们发现右端点移动的时候左端点不动,并且右端点移动的是一个区间,所以我们把所有不动的左端点上记录一下右端点移动的区间即可,由于不动的左端点只有可能是查询区间的左端点,所以这里空间复杂度降到$O ( n ) $.</p>
<p>注意到我们求出的是两个查询的答案的差分,最后还需要做一下前缀和求答案.</p>
<h3><span id="二维分块">二维分块</span></h3><p>我们现在有一个需要维护的$n \times n $的平面,我们现在对其进行分块:</p>
<ol>
<li><p>将平面分成$n ^{ \frac { 1  } { 2  }  } $个$n ^{ \frac { 3  } { 4  }  } \times n ^{ \frac { 3  } { 4  }  } $的$A $块,以$A $块为单位做二维前缀和.</p>
</li>
<li><p>每个$A $块内部分成$n ^{ \frac { 1  } { 2  }  } $个$n ^{ \frac { 1  } { 2  }  } \times n ^{ \frac { 1  } { 2  }  } $的$B $块,在$A $块内部以$B $块为单位做二维前缀和.</p>
</li>
<li><p>将整个平面横着分别分成一个个$n \times n ^{ \frac { 3  } { 4  }  } $的$C $块.(竖着也要分成一个个$n ^{ \frac { 3  } { 4  }  } \times n $的块,是类似的,略去)</p>
</li>
<li><p>每个$C $块内部分成$\sqrt { n  } $个$n ^{ \frac { 3  } { 4  }  } \times n ^{ \frac { 1  } { 2  }  } $个$D $块,在$C $块内部以$D $块为单位做二位前缀和.</p>
</li>
</ol>
<p>注意到修改一个点的时候,需要更新三次二位前缀和,每次复杂度$O ( \sqrt { n  } ) $.同时注意到空间复杂度是$O ( n ) $的.</p>
<p>查询显然是分四种情况讨论:$A , B , D $块都可以快速求得答案,接下来只需要做一下散块就行.</p>
<p>那散块怎么做呢?我们考虑一个特殊情况:修改点的纵坐标以及横坐标两两不同,或至少一个坐标只对应$O ( 1 ) $个点.</p>
<p>如果查询的时候,也仍然是满足查询的一个$l $对应$O ( 1 ) $个$r $,我们就可以枚举一个点被哪些查询查到了散块,显然只有可能有$O ( \sqrt { n  } ) $个查询,记录一下即可.这样就做到了$O ( \sqrt { n  } ) $单点改,$O ( 1 ) $查询.</p>
<p>如果我们一开始不做二维前缀和,就可以实现$O ( 1 ) $单点改,那这种情况下如何实现$O ( \sqrt { n  } ) $求和呢?首先还是可以$O ( \sqrt { n  } ) $求出整块的和.</p>
<p>横着和竖着的散块相同,只讨论横着的.由于横着的散块高度$&lt; n ^{ \frac { 1  } { 2  }  } $,我们就可以在每次查询的时候用$\sqrt { n  } $的复杂度枚举一遍横纵坐标在这个区间的点然后暴力判断即可,也可以$O ( \sqrt { n  } ) $求散块.</p>
<h5><span id="example1luogup7448-ynoi2007-rdiq">Example1(luoguP7448 [Ynoi2007] rdiq)</span></h5><p>首先注意到这个问题严格难于区间逆序对,想到二次离线莫队.</p>
<p>开始做二次离线,发现问题在于我们需要求出右端点移动的时候,找到新增了多少个本质不同的逆序对.设上一个和$a _r $颜色相同的点是$r ‘ $,则显然新增的逆序对只可能出现在$[ r ‘ , r ] $中.</p>
<p>由于我们现在在保证左端点不动,于是我们考虑对于每种颜色,找到其在这个左端点后第一次出现的位置,并且只在这个位置贡献答案.这里其实已经可以扫描线了,套一下二次离线,把点扔到二位坐标系上.</p>
<p>现在问题在于,我们需要从$n \rightarrow 1 $扫左端点,总共做$O ( n ) $次单点修改,做$O ( n \sqrt { n  } ) $次矩阵查询.</p>
<p>现在我们要查询的也就是左下角为$( r ‘ + 1 , a _r ) $,右上角是$( r , \infty ) $的矩阵.</p>
<p>这个东西其实已经可以做高维前缀和了.为了使答案更显然,我们令$rev ( x ) = n - x + 1 $.然后将所有点的纵坐标$rev $掉,现在我们要查询的也就是左下角为$( r ‘ + 1 , 1 ) $,右上角是$( r , rev ( a _r ) ) $的矩阵,这玩意可以拆前缀和拆成形如左下角是$( 1 , 1 ) $,右上角是$( i , rev ( a _i ) ) $的矩阵.也就是说我们的$O ( n \sqrt { n  } ) $次矩阵查询本质上只有$O ( n ) $种.</p>
<p>拆到这里发现其实到这一步$a _r $和$a _{ r ‘  } $是否相等已经不重要了,可以用一下基数排序让他俩有一定的差异.</p>
<p>然后上二维分块.</p>
<h5><span id="example2luogup8530-ynoi2003-博丽灵梦">Example2(luoguP8530 [Ynoi2003] 博丽灵梦)</span></h5><p>首先自然的想法是拿莫队扫掉$[ l _1 , r _1 ] $这一维.</p>
<p>这样我们的问题转化为:每次插入/删除一个点,求一个类似区间颜色数的东西.</p>
<p>那么这个东西咋做呢?</p>
<p>首先我们考虑插入/删除的本质,把第二维$[ l _2 , r _2 ] $扔到二维平面上,那本质也就是需要寻找前驱后继,然后对一个矩形做加法,查询的时候单点查询,可以配个树套树解决这个问题.</p>
<p>有没有什么好办法?先考虑对矩形做加法然后单点查询这个操作看上去很蛋疼.我们考虑把它转化为单点加法矩形查询.这个做法比较显然:如果没有相同的只贡献一次的限制,我们就可以直接对于每个点$( a , a ) $上加上一个相应的$b $,然后每次查询矩阵即可.但是有了限制怎么办呢?我们考虑在每两个相邻的点$A ( x _1 , x _1 ) $和$B ( x _2 , x _2 ) $之间的$( x _1 , x _2 ) $上加上一个$- b $,不难发现这样就满足了条件.</p>
<p>分析一下我们现在需要做的东西:</p>
<ol>
<li><p>莫队时查询一个点的前驱后继,这个操作就需要$O ( 1 ) $完成.</p>
</li>
<li><p>$n \sqrt { n  } $次单点修改,这个操作需要$O ( 1 ) $完成.</p>
</li>
<li><p>$n $次矩阵求和,这个操作需要在小于$O ( \sqrt { n  } ) $的时间完成.</p>
</li>
</ol>
<p>对于第一个问题,我们可能会想到用链表来解决.但问题在于链表难以支持插入操作.不过问题不大,我们有回滚莫队.这样就可以实现只删除不插入,解决了问题.</p>
<p>而后半部分是一个经典的二维分块.</p>
<p>简单来说,我们首先需要猜出时间复杂度为$O ( n \sqrt { n  } ) $,然后用到莫队,然后用二维平面表示这个问题,发现直接做不太能做,想到一步转化,转化后的问题的一半可以直接套二维分快.最后想到前半部分可以用回滚莫队+链表解决.</p>
<h3><span id="trie树">trie树</span></h3><h5><span id="example12019zrtg十连测day1set">Example1([2019zrtg十连测day1]set)</span></h5><p>首先反应是扔到trie上然后异或就是打个tag,但是$+ 1 $很难处理,因为它形如在trie上找到所有长度连续为$1 $到叶子的链并且全部翻转,不过打一下tag应该也能做.</p>
<p>更简单的做法是,我们考虑从小到大插入数字.这样异或几乎没有影响,但是$+ 1 $的话就相当于反转一条从根开始均为$1 $的链,这个东西更为好做.</p>
<h3><span id="线段树">线段树</span></h3><h4><span id="普通线段树">普通线段树</span></h4><h5><span id="example1luogup6780-ynoi2009-pmrllcsrms">Example1(luoguP6780 [Ynoi2009] pmrllcsrms)</span></h5><p>感觉这题比较厉害.</p>
<p>先扔做法:对$c $分块,这样答案就是块内和块间的最大值.对于每个块都可以用线段树维护最大值,然后最后再求$\max $.而对于块间如何做呢?</p>
<p>我们设$suf _i $为前一个块的后$i $个数之和,$pre _i $为后一个块的前$i $个数之和.注意到我们要求的就是$\max \{ suf _i + pre _j | i + j \leq c \} $.这个咋做呢?</p>
<p>你注意到这个$i + j \leq c $的限制非常的奇怪,我们如果想处理两个东西,自然想让这两个东西联系越紧密越好,但是这个联系就特别奇怪.但没关系,我们注意到如果用$j \rightarrow c - j + 1 $的话,这个限制就转化为了$i + c - j + 1 \leq c $,也就是$i &lt; j $,这个限制就可以放到线段树上维护了.</p>
<p>仔细思考这个过程:线段树只可以维护有大于小于的限制的两个数,而不能维护和区间长度有关的条件.但如果一个限制和区间长度有关,可能可以通过翻转之类的操作取消掉区间长度.</p>
<p>这个问题解决了,我们再回到一开始:为啥要对$c $分块?</p>
<p>一方面,题目中的$c $是给定的.另一方面,我们注意到我们需要维护一个和$c $有关的东西,而如果没有$c $,或者说$c = n $的时候,这个东西是好维护的:一般的区间最大子段和其实暗含了$c = n $的条件.考虑到这一点,对$c $分块就合情合理了.换句话说,分块其实有两种用途:一种是平衡暴力的复杂度:它可以让一些和块长有关的暴力复杂度降低.另一种用途是保证某个东西的合法性.</p>
<p>一个需要注意的事是,由于我们最后查询的是一个区间,所以对于块间的处理是需要处理区间的.不过我选择将$a [ l - 1 ] $和$a [ r + 1 ] $都加上一个极大值.</p>
<p>但是啊,但是.我们发现我们一开始是需要把块间做线段树的那个$maxn $设成$- \infty $的.如果这两个东西设成等大的$- \infty $,就会出现错误,为啥呢?</p>
<p>因为一开始这样会使得运算过程中有可能出现比$- \infty $还要小的数字,最底层的$maxn $有可能覆盖掉上面的.</p>
<h4><span id="线段树分治">线段树分治</span></h4><p>大概就是用到了线段树结构进行操作,通常用来处理存在区间的问题.</p>
<p>之所以说它是线段树分治而不是一般的分治,是因为有的时候我们还可以利用线段树的结构.</p>
<h5><span id="example12022qbxt国庆day1dottlebot">Example1([2022qbxt国庆Day1]dottlebot)</span></h5><p>注意到每个点其实只需要找到$[ i - r _i , i - 1 ] $和$[ i + 1 , i + r _i ] $这两段的最大值,设为$x $,则最后的答案就是$\max \{ a _i + x \} $.</p>
<p>思考这个过程,我们将$[ i - r _i , i - 1 ] $和$[ i + 1 , i + r _i ] $这两条线段以$a _i $的权值放到线段树上.具体地,我们在线段树的每个节点都开一个堆存储覆盖了这个节点区间的线段的权值.然后利用线段树求出每个区间的$a _i $的最大值,在节点处和堆中元素一起更新答案即可.</p>
<h4><span id="线段树上二分">线段树上二分</span></h4><h5><span id="example12022qbxt国庆day3analysis">Example1([2022qbxt国庆Day3]analysis)</span></h5><p>考虑全局的和是$sum $,则我们要在这些数中找到一个分界点,使得左边的和大于等于$sum $,然后再考虑能不能将右边移动一个过去.</p>
<p>先把数据离散化,那么这就是一个值域线段树上二分的过程.</p>
<p>另外值得一提的是,考虑树状数组的形态也即线段树删去所有的右儿子,因此树状数组上也是可以二分的.</p>
<h5><span id="example2">Example2</span></h5><p>给定$a _i , b _i $,选定至多$k $个位置使这里的值为$a _i - b _i $,其它位置的值是$a _i $,最小化最大子段和.</p>
<p>考虑先二分再贪心:二分一个值,然后看如果需要使得答案小于等于这个值,最少需要用多少次操作.这个咋做呢?一个想法是,我先从左到右去扫一遍,然后每次如果当前最大后缀和大于二分的$mid $,我们就需要找一个位置使得把这个位置改掉后,最大后缀和最小.</p>
<p>首先来看这个为什么是正确的.考虑后面的最大后缀和是会继承前面的最大后缀和的,因此让当前局面最小一定更优秀,并且每个位置选中的代价是相等的,那自然要选择贡献最高的那个.</p>
<p>显然,如果选择一个改掉的话,我们需要求出$\min _{ k = 1  } ^r \{ \max ( \max _{ i = k + 1  } ^n \{ sum _{ i  } \} , - b _k + \max _{ i = 1  } ^k \{ sum _i \} ) \} $.注意改掉一个位置后要把它的$b $变成$0 $.</p>
<p>那么什么样的$b $有可能是我们要选中的呢?显然可能被选中的$b $一定是一个单调下降的序列中的某个,因为同等大小,选后面一定更优秀.上面那个式子我们是难以快速维护的,但如果我把它改成:$\min _{ k = 1  } ^r \{ \max ( \max _{ i = k + 1  } ^n \{ sum _{ i  } \} , - \max _{ i = k  } ^n \{ b _i \} + \max _{ i = 1  } ^k \{ sum _i \} ) \} $,你会发现前者是一个单调不升的序列,后者是一个单调不降的序列,现在我们想要让它们的$\max $尽量小,这玩意显然可以做线段树二分.</p>
<p>上面那个东西也就是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\min _{ k = 1  } ^r \{ \max ( sufmax ( sum ) _{ k + 1  } , - sufmax ( b ) _k + premax ( sum ) _k \} \\
& = \min _{ k = 1  } ^r \{ \max ( sufmax ( sum ) _{ k + 1  } , - \max ( sufmax ( b ) _{ k + 1  } , b _k ) + premax ( sum ) _k \} \\

\end{aligned}</script><p>这样就可以在交界点更新答案.</p>
<p>另外,我们实际上更新答案会用到实际上找到的最小的$k $后面最大的$b $,这是为啥呢?首先这样的确是更优秀的解,而且我们发现,我们的确有可能找到更靠前的位置,如果往前的挪动不影响$sufmax ( b ) $的话.那有没有可能跳出了这一段,来到了更靠后的地方呢?这显然也不会,因为我们只找到最后面第一个处于当前分段函数的$b $,这个$b $必然存在.如果它所在的sufmax和premax不一样,那么会是一个更优秀的解,压根不可能找到前面.</p>
<h4><span id="线段树合并">线段树合并</span></h4><h4><span id="线段树维护矩阵乘法">线段树维护矩阵乘法</span></h4><h4><span id="吉司机线段树">吉司机线段树</span></h4><h4><span id="李超线段树">李超线段树</span></h4><h3><span id="珂朵莉树">珂朵莉树</span></h3><h5><span id="example1luogup8512-ynoi-easy-round-2021-test_152">Example1(luoguP8512 [Ynoi Easy Round 2021] TEST_152)</span></h5><p>首先有经典套路:赋值操作有用的只有最后一次.</p>
<p>所以考虑扫描线,扫右端点的时候直接用珂朵莉树做.这样就剩下左端点的问题,因为有珂朵莉树,所以再开以时间为下标的数据结构就能处理.</p>
<h3><span id="猫树">猫树</span></h3><h3><span id="kd-tree">KD-Tree</span></h3><p>处理$K $维正交范围(给定$n $个有意义的点)在线修改查询的数据结构,是一棵二叉树.单次复杂度$O ( n ^{ 1 - \frac { 1  } { k  }  } + \log n ) $.(单调修改复杂度只是$O ( \log n ) $)</p>
<p>离线情况下通常可以用cdq分治代替.</p>
<p>如果要支持动态插点,可以使用复杂度不正确的替罪羊树重构+kdtree.</p>
<h4><span id="1d-tree">1D-Tree</span></h4><p>也就是线段树.</p>
<h4><span id="2d-tree">2D-Tree</span></h4><p>建树的时候,对于每一维轮流考虑,每次考虑将这一维上的坐标的中位数的点(基准点)找到,左右分治下去(下一层要考虑另一维)处理.查询和修改都是类似的.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">KD_tree</span>&#123;</span><br><span class="line"><span class="type">int</span> son[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">int</span> siz;</span><br><span class="line"><span class="type">int</span> f;</span><br><span class="line"><span class="type">int</span> l,r,u,d;</span><br><span class="line">&#125;tr[qwq&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> cur[qwq&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> clen;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;p[qwq&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpx</span><span class="params">(P a,P b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmpy</span><span class="params">(P a,P b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">mabs</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> -x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> cnt)</span></span>&#123;</span><br><span class="line">tr[cnt].l=tr[cnt].r=tr[cnt].x;</span><br><span class="line">tr[cnt].d=tr[cnt].u=tr[cnt].y;</span><br><span class="line">tr[cnt].siz=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[cnt].son[<span class="number">0</span>])&#123;</span><br><span class="line">tr[cnt].l=std::<span class="built_in">min</span>(tr[cnt].l,tr[tr[cnt].son[<span class="number">0</span>]].l);</span><br><span class="line">tr[cnt].r=std::<span class="built_in">max</span>(tr[cnt].r,tr[tr[cnt].son[<span class="number">0</span>]].r);</span><br><span class="line">tr[cnt].d=std::<span class="built_in">min</span>(tr[cnt].d,tr[tr[cnt].son[<span class="number">0</span>]].d);</span><br><span class="line">tr[cnt].u=std::<span class="built_in">max</span>(tr[cnt].u,tr[tr[cnt].son[<span class="number">0</span>]].u);</span><br><span class="line">tr[cnt].siz+=tr[tr[cnt].son[<span class="number">0</span>]].siz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tr[cnt].son[<span class="number">1</span>])&#123;</span><br><span class="line">tr[cnt].l=std::<span class="built_in">min</span>(tr[cnt].l,tr[tr[cnt].son[<span class="number">1</span>]].l);</span><br><span class="line">tr[cnt].r=std::<span class="built_in">max</span>(tr[cnt].r,tr[tr[cnt].son[<span class="number">1</span>]].r);</span><br><span class="line">tr[cnt].d=std::<span class="built_in">min</span>(tr[cnt].d,tr[tr[cnt].son[<span class="number">1</span>]].d);</span><br><span class="line">tr[cnt].u=std::<span class="built_in">max</span>(tr[cnt].u,tr[tr[cnt].son[<span class="number">1</span>]].u);</span><br><span class="line">tr[cnt].siz+=tr[tr[cnt].son[<span class="number">1</span>]].siz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dispp</span><span class="params">(<span class="type">int</span> pa,<span class="type">int</span> pb)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1ll</span>*<span class="built_in">mabs</span>(tr[pa].x-tr[pb].x)+<span class="number">1ll</span>*<span class="built_in">mabs</span>(tr[pa].y-tr[pb].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dispm</span><span class="params">(<span class="type">int</span> po,<span class="type">int</span> mat)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!mat)<span class="keyword">return</span> <span class="number">320051113</span>;</span><br><span class="line">ll d=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tr[po].x&lt;tr[mat].l)d+=tr[mat].l-tr[po].x;</span><br><span class="line"><span class="keyword">if</span>(tr[po].x&gt;tr[mat].r)d+=tr[po].x-tr[mat].r;</span><br><span class="line"><span class="keyword">if</span>(tr[po].y&lt;tr[mat].d)d+=tr[mat].d-tr[po].y;</span><br><span class="line"><span class="keyword">if</span>(tr[po].y&gt;tr[mat].u)d+=tr[po].y-tr[mat].u;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">get_var</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> avx=<span class="number">0</span>,avy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">avx+=p[i].x;avy+=p[i].y;</span><br><span class="line">&#125;</span><br><span class="line">avx/=(r-l+<span class="number">1</span>);avy/=(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="type">double</span> varx=<span class="number">0</span>,vary=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;++i)&#123;</span><br><span class="line">varx+=<span class="number">1ll</span>*(avx-p[i].x)*(avx-p[i].x);</span><br><span class="line">vary+=<span class="number">1ll</span>*(avy-p[i].y)*(avy-p[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> varx&lt;vary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> cnt=cur[mid];</span><br><span class="line">tr[cnt].f=<span class="built_in">get_var</span>(l,r);</span><br><span class="line"><span class="keyword">if</span>(tr[cnt].f)std::<span class="built_in">nth_element</span>(p+l,p+mid,p+r+<span class="number">1</span>,cmpy);</span><br><span class="line"><span class="keyword">else</span> std::<span class="built_in">nth_element</span>(p+l,p+mid,p+r+<span class="number">1</span>,cmpx);</span><br><span class="line">tr[cnt].x=p[mid].x;tr[cnt].y=p[mid].y;tr[cnt].siz=<span class="number">1</span>;</span><br><span class="line">tr[cnt].son[<span class="number">0</span>]=<span class="built_in">build</span>(l,mid<span class="number">-1</span>);</span><br><span class="line">tr[cnt].son[<span class="number">1</span>]=<span class="built_in">build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(cnt);</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="笛卡尔树">笛卡尔树</span></h3><h5><span id="example1cfgym101613factor-free-tree">Example1([CFgym101613]Factor-free tree)</span></h5><p>首先有一个自然的想法是随便找一个和整个区间都互质的数,然后把序列分成左右两端向下递归.对于一棵构造出来的二叉树,它的复杂度就是$\sum dep _u $,是可以被卡成$O ( n ^2 ) $的.</p>
<p>但我们考虑类似dsu on tree的做法,我们每次找到一个点,它将一个区间劈成了两部分,我们把小的那部分的贡献删去,然后做大的那部分.在递归过程中把大的那部分的贡献逐渐消磨掉.最后再做小的那部分,这样就类似于启发式合并的过程,复杂度就正确了.</p>
<h5><span id="example223省选第一轮集训day5c">Example2(23省选第一轮集训day5C)</span></h5><p>注意到最小值的条件是容易满足的.</p>
<p>考虑枚举以每个点为最大值转移的区间,假设为$[ l , r ] $,这样会有:$[ l - 1 , i - 1 ] \rightarrow [ i , r ] $.注意到我们可以选择其中较短的区间来更新零一个区间或被另一个区间更新.</p>
<h3><span id="单调队列">单调队列</span></h3><h5><span id="exampleloj3151">Example(loj3151)</span></h5><p>首先自然地,我们设$f _{ i , j  } $表示前$i $个测试点已经分成了$j $段的方案数,然后做转移,复杂度$O ( T ^2 S ) $.</p>
<p>接下来咋优化咧?<del>决策单调性!</del></p>
<p>嘶这题好像不满足决策单调性(这个故事也告诉我们不要看到$k $最短路就想决策单调性).</p>
<p>冷静一下,首先如果我把$[ l , r ] $分到一段里,那这一段的答案和啥有关?显然只和有多少个人在这段区间中没挂分有关.对于一个右端点$r $,我们不妨枚举有多少个人会在它所在的子任务挂分.显然,在左端点在一个区间内的时候,这个子任务会有一定的人挂分.而且随着现在右端点的移动,这个区间的左右端点都是单调不降的.那我们对于每种人数做单调队列维护即可.</p>
<h3><span id="树套树">树套树</span></h3><p>解决矩阵修改+单点查询或单点修改+矩阵查询问题.</p>
<h5><span id="example1">Example1</span></h5><p>维护一个序列支持把$x $位置的值改为$y $或查询一个区间中小于$y $的数个数.</p>
<p>用树状数组维护平衡树,每次在树状数组上对应的节点修改即可.</p>
<h5><span id="example2luogu4054-jsoi2009计数问题">Example2(Luogu4054 [JSOI2009]计数问题)</span></h5><p>乍一看是动态三维问题.</p>
<p>相等维度是特殊的,我们开$100 $个二维数据结构处理值不同的情况,这样就是二维.</p>
<h2><span id="数据结构常见套路">数据结构常见套路</span></h2><h3><span id="分开考虑">分开考虑</span></h3><h5><span id="example1p6105-ynoi2010-y-fast-trie">Example1(P6105 [Ynoi2010] y-fast trie)</span></h5><p>考虑只有两种可能:</p>
<ol>
<li><p>$x + y &lt; C $,取$x + y $作为答案.</p>
</li>
<li><p>$x + y \geq C $,取$x + y - C $作为答案.</p>
</li>
</ol>
<p>后者只需要取出最大的两个数即可,至于前者,考虑将所有数字分成两个集合,一个集合只在$[ 0 , \lceil \frac { C  } { 2  } \rceil ) $中,一个集合包含剩下的数字.对于第一个集合,我们只需要取出其中最大的两个数字就行.接下来的问题是怎么处理跨越两个集合的答案.考虑将每个点对应的答案配对,显然每个点能影响到的点是一段区间,删除时暴力修改.</p>
<p>另外,$x + y &lt; C $也就是$x &lt; C - y $,我们把第二个集合中的元素全部变成$C - y $后插入,只需最小化$C - x - y $,这个只需要维护最大的$x $和最小的$C - y $就行.</p>
<h3><span id="合并信息">合并信息</span></h3><p>lxl:这种问题主要需要解决三件事:标记对标记可合并,标记对值可合并,值与值可合并.</p>
<h5><span id="example1hnoi2011括号修复-jsoi2011括号序列">Example1([HNOI2011]括号修复 / [JSOI2011]括号序列)</span></h5><p>注意到只要知道区间的最小前缀和以及区间的和,这个题就做完了.我们只需要维护这两件事.区间的和显然是好维护的,难以维护的是最小前缀和,我们来分开看每个操作:</p>
<p>替换:简单的.翻转:不太好做,尝试维护一下最小后缀和.反转:需要维护最大前缀和,进一步需要维护最大后缀和.</p>
<p>这样就可以更新答案了.</p>
<h5><span id="example2p4198-楼房重建">Example2(P4198 楼房重建)</span></h5><p>左右维护单调栈合并,但这样复杂度肯定不对.</p>
<p>怎么办呢?我们可以用$O ( \log n ) $的单次pushup操作,也就是维护一下每个节点所代表的区间的答案和最大值,不断递归右子树(或左子树)判断.</p>
<h5><span id="example3cf1017g">Example3(CF1017G)</span></h5><p>设$w _i $为从上往下延伸到$i $这个点后,还能多往下延伸多少,一开始$w $都是$- 1 $,每次操作会让$w + = 1 $.树链剖分维护子段最大非空后缀和.</p>
<h3><span id="去除冗余信息">去除冗余信息</span></h3><h5><span id="example1luogup6617">Example1(luoguP6617)</span></h5><p>自然的想法是考虑找到每个点前面第一个和它之和为$w $的数字,但这样就炸了,因为每修改一个点可能要影响$O ( n ) $个点的答案.</p>
<p>我们注意到一个事实:我们也可以找到每个点后面第一个和它之和为$w $的数字,而显然只有两个数互相匹配才可行.如果$i &lt; j &lt; k , ( i , j ) , ( i , k ) $分别配对,那么显然$( i , k ) $没有用.这样每个点只有$O ( 1 ) $个匹配了.</p>
<h3><span id="set维护颜色">set维护颜色</span></h3><h5><span id="example1luogup5278-算术天才9与等差数列">Example1(luoguP5278 算术天才⑨与等差数列)</span></h5><p>首先考虑$k = 1 $怎么做,显然找一下区间最大值和区间最小值,然后就只需要判断区间内有没有重复元素,经典套路:set维护颜色,这样可以处理出每个点上一个和它相同颜色的点,拿线段树维护它的最大值.</p>
<p>$k \ne 1 $怎么办呢?考虑这只是相当于要判断一下这个区间内的数字是否在$\bmod k $意义下全部相等,维护差分数组的区间$\gcd $就行.</p>
<h3><span id="复杂度均摊">复杂度均摊</span></h3><h5><span id="example1cf702f-t-shirts">Example1(CF702F T-Shirts)</span></h5><p>看到这个感觉很奇怪,想想好像也没有什么快速tag算法.</p>
<p>我们考虑对人建平衡树,然后按照顺序买衣服,每次找到所有能买这件衣服的人,显然是平衡树的某棵子树.但是,这棵子树在买完衣服后可能就不满足顺序了,那怎么办呢?能不能暴力重构一波?</p>
<p>事实上是可以的,对于一件价格为$q $的衣服,$[ 0 , q ) $的人肯定买不了,$[ q , 2 q - 1 ] $的人买完后,手上的钱至少减半,我们暴力处理,至于$[ 2 q , + \infty ) $,显然买完后不会对其形态有什么影响,打个tag.</p>
<h5><span id="example2uoj228">Example2(uoj228)</span></h5><p>一个自然的想法是暴力开根号,它会迅速缩短两个数之间的差.但可能也不能缩到$0 $,那怎么办呢?当我们发现这个区间的最大值和最小值开根号后的差不变了,我们就把开根操作改成区间减法就行了.</p>
<p>loj6029是等价做法.</p>
<h5><span id="example3luogu-4690-ynoi2016镜中的昆虫">Example3(Luogu 4690 [Ynoi2016]镜中的昆虫)</span></h5><p>维护每个点的颜色相同的前驱,单点修改的话就是简单树套树.</p>
<p>然后区间推平可以用颜色块均摊(同一个颜色块内只需要改开头元素,剩下的都是$pre [ i ] = i - 1 $).</p>
<h3><span id="根号分治">根号分治</span></h3><h5><span id="example1luogup7722-ynoi2007-tmpq">Example1(luoguP7722 [Ynoi2007] tmpq)</span></h5><p>这个题告诉我们一个故事:有的时候,有的条件可能真的没用.</p>
<p>直接把题目改成:每次修改$a , b , c $中的某个数,求.</p>
<h5><span id="example2">Example2</span></h5><p>对于一个数字$x $,每次随机在$[ 1 , x ] $中一个数$y $并令$x \leftarrow x \bmod y $,初始值为$n $,求期望几次能变成$0 $.</p>
<p>注意到如果$y $很小就直接做,$y $很大的话$\lfloor \frac { x  } { y  } \rfloor $很小,暴力做数论分块.</p>
<h5><span id="example3">Example3</span></h5><p>给定一棵树,每次修改树上某个点的权值,或询问某个点周围的点的权值和.</p>
<p>度数大的点在修改的时候改,度数小的在询问的时候做.</p>
<h5><span id="example4">Example4</span></h5><p>给定序列,每次询问给出两个数字$x , y $,求最小的$| i - j | $满足$a _i = x , a _j = y $.</p>
<p>对于出现次数大的,处理出它和所有数字的答案.</p>
<p>如果$x , y $出现次数都少,就在做的时候直接归并.</p>
<h5><span id="example5shoi2006-homework">Example5(SHOI2006 Homework)</span></h5><p>首先对于$Y $很小的情况直接预处理就行,每次插入的时候更新答案.</p>
<p>对于$Y $很大的情况,$\frac { n  } { Y  } $一定很小,我们不断查询大于等于$kY $的最小元素即可,这个可以值域分块来根号平衡做到$O ( 1 ) $查询,$O ( \sqrt { n  } ) $单点修改.具体地,我们对每个块处理出大于等于这个块的最小的$X $,以及块内每个点后面最小的$X $(必须在块内),然后定位到$kY $的块.</p>
<h5><span id="example6">Example6</span></h5><p>给定$n , m $,以及序列$a $和长度为$n $的排列$y $,你需要回答$m $个询问.对每个询问,给定$l , r $,查询:</p>
<script type="math/tex; mode=display">
\sum _{ i = 1  } ^n \sum _{ j = i + 1  } ^n [ a _i = a _j ] \prod _{ k = i  } ^j [ l \leq y _k \leq r ]</script><p>注意到$y _i = i $的时候,这题等价于小Z的袜子.因此这题不会低于根号复杂度.轮流猜算法,猜到根号分治.</p>
<p>首先有一个性质:对于一对点$( x , y ) , a _x = a _y , \nexists x &lt; z &lt; y , a _z = a _x $,对于$( x , y ) $这个区间内部的点,它们其实是可以缩起来的!(比赛的时候没想到呜呜)具体来说,我们只需要保留它们中最大的那个和最小的那个就行.</p>
<p>接下来,对于出现次数大于$\sqrt { n  } $的数字,它们最多只有$\sqrt { n  } $个,考虑莫队复杂度$O ( n \sqrt { m  } + m ) $,因此我们可以对每个分别做莫队,总复杂度$O ( n \sqrt { m  } + m \sqrt { n  } ) $,注意用基数排序,甚至不能用桶排.</p>
<p>对于出现次数小于$\sqrt { n  } $的数字,这些数字一共最多有$n $个,每个点暴力配对就有$O ( n \sqrt { n  } ) $个点对,然后$O ( m ) $次询问,用根号平衡做扫描线,这里复杂度$O ( n \sqrt { n  } + m \sqrt { n  } ) $.</p>
<h3><span id="重链分治">重链分治</span></h3><h5><span id="example1luogu5314-ynoi2011odt">Example1(Luogu5314 [Ynoi2011]ODT)</span></h5><p>其实不是根号分治,但是差不多,扔这里了.</p>
<p>给一棵树,边权为$1 $,支持把一条链上所有点加上$k $,或者查询距离一个点$&lt; = 1 $的所有点的点权$kth $.$n \leq 2 \times 10 ^5 $.</p>
<p>每个点周围的点一共有三种可能:父亲,重儿子,轻儿子,特判重儿子和父亲,然后处理出所有轻儿子的情况,这个怎么做都能做(大不了把所有轻儿子全扔平衡树里),然后重链剖分的时候只会改$O ( \log n ) $个轻儿子.</p>
<h3><span id="扫描线">扫描线</span></h3><h4><span id="一维扫描线">一维扫描线</span></h4><p>最经典的应用是对于一个$B $维的静态问题,我们可能可以用扫描线扫掉一维,让它变成一个$B - 1 $维的动态问题.不过扫描线处理的时候可能需要是低$side $的问题,具体情况具体分析.</p>
<p>主席树通常就是解决强制在线不能处理扫描线的问题.</p>
<p>另外,通常认为时间也是一维,也就是即使是动态问题也一般是等价于对时间跑了扫描线.</p>
<h4><span id="二维扫描线">二维扫描线</span></h4><p>也就是莫队.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1cf1609f-interesting-sections">Example1(CF1609F Interesting Sections)</span></h5><p>首先枚举每个数的$popcount $,相当于每次将一些点标记为关键点,然后查询有多少个区间满足区间最大值和最小值都是关键点.</p>
<p>可以求出每个点$x $作为最大值的影响区间$[ l , r ] $,也就是如果一个区间左端点在$[ l , x ] $,右端点在$[ x , r ] $即可满足条件.我们考虑放入一个左下角坐标为$( l , x ) $,右上角坐标为$( x , r ) $的矩阵.最小值也是同理的,最后也就是求所有最大值矩阵和所有最小值矩阵的交.注意到如果两个点相同,我们规定一下在前面的更小,那么最大值矩阵两两不交,最小值矩阵也两两不交,就是一个最简单的扫描线问题了.</p>
<h5><span id="example2cf833e">Example2(CF833E)</span></h5><p>离散化,设$S = \{ l \} \cup \{ r \} $,考虑用$len _i $表示$i $节点及以前最多能有多少阳光.我们考虑用$len _{ i - 1  } $更新$len _i $,如果$[ i - 1 , i ] $没被覆盖,显然直接加上这段的长度.如果$[ i - 1 , i ] $被覆盖大于两次,那显然直接继承$len _{ i - 1  } $.</p>
<p>先考虑$[ i - 1 , i ] $被两朵云覆盖了怎么办,我们考虑用$h _{ j , k  } $表示当前被且只被$j $和$k $共同覆盖的区间长度,不难发现$h _{ j , k  } $有值的地方很少,用map.然后还要加上它们各自的贡献,用$g _j $表示当前被且只被$j $覆盖的区间长度,这样就可以计算答案.而这两个辅助数组也可以在判断$[ i - 1 , i ] $是被一朵云还是被两朵云覆盖的时候更新掉.</p>
<p>如果$[ i - 1 , i ] $被一朵云覆盖了怎么办呢?我们考虑把这朵云杀了,但我们还可能杀掉前面的某一朵云,假设为$k $,那么就有两种情况:要么这两朵云有交,要么无交.</p>
<p>先考虑无交的情况,这个时候答案显然是$g _j + g _k $,用线段树处理出当前代价和小于等于$C $的$k $的$g _k $的最大值就行.</p>
<p>再考虑有交的情况,答案应该为$g _j + g _k + h _{ j , k  } $,我们在每次遇到$( j , k ) $的时候都在对方那里打个tag就好,也就是对于每个$j $,处理出和它有交的云中$g _j + g _k + h _{ j , k  } $的最大值.虽然这些值都会变,但是只会变大,因此可以处理.</p>
<p>那么怎么判断两朵云有交呢?我们不用判断两朵云是否有交,因为前者一定没有后者优秀.不过需要判断两朵云不能是同一朵,这个存一下次大值就可以解决.</p>
<p>这样就转移完了这个题,挺厉害的.</p>
<h5><span id="example3loj3489">Example3(loj3489)</span></h5><p>时间也是一维,扫序列维护时间,线段树二分就可以解决.</p>
<p>具体地,我们需要对每个询问找到这个询问前最近的队列为空的时刻,然后这个时刻后面的答案就可以直接拿前缀max二分,问题在于怎么求这个时刻.</p>
<p>这个时刻也是好求的,它一定是前缀的最小值(这个点一定清空了,这个点后面的数比它小,因此这个点变成$0 $后那些数一定没清空).</p>
<h5><span id="example4luogup7709-wdsr-27八云蓝自动机-ii">Example4(luoguP7709 「Wdsr-2.7」八云蓝自动机 Ⅱ)</span></h5><p>如果初始序列全为$0 $:</p>
<p>倒着扫操作序列,维护当前还没有得到答案的询问,每次找到一个操作一定将整个区间的询问全部得知了答案.</p>
<p>不然不会做.</p>
<h5><span id="example5luogu3863">Example5(luogu3863)</span></h5><p>仍然是个数据结构维护时间维,扫描线扫序列维的东西.</p>
<h5><span id="example6qoj6304">Example6(qoj6304)</span></h5><p>考虑横纵坐标是对称的,因此我们只需要考虑两横一竖的情况和三条横的情况.</p>
<p>先做三条横,枚举中间的那个横的位置,剩了一段前缀和一段后缀需要覆盖,这个可以前后缀预处理.</p>
<p>然后是两横一竖,扫竖线,问题转化为动态加入删除区间,求当前用两个点覆盖所有区间的方案数,不妨设这两个点是$L &lt; R $,自然有$L \leq \min \{ r _i \} , R \geq \max \{ l _i \} $,那么当我们确定$L $后,我们有$R \in [ \max \{ l _i \} , f ( L ) ] $.接下来我们考虑如何计算$f ( L ) $.</p>
<p>注意到$L &lt; l _i \Rightarrow R \leq r _i $,我们考虑将$l _i $这个点的权值设成$r _i $,那么我们要做的就是一个后缀最小值求和,用楼房重建.</p>
<h3><span id="莫队">莫队</span></h3><h4><span id="回滚莫队">回滚莫队</span></h4><h4><span id="带修莫队">带修莫队</span></h4><p>也就是维护三维的扫描线,根据KDT不难发现复杂度是$O ( nm ^{ \frac { 2  } { 3  }  } ) $,$B = n ^{ \frac { 2  } { 3  }  } $,排序原则是$( ls , rs , t ) $,复杂度算一算就知道是对的.</p>
<h4><span id="树上莫队">树上莫队</span></h4><h4><span id="二次离线莫队">二次离线莫队</span></h4><p>这个直接拿区间逆序对当例子记笔记好了.</p>
<p>如果我们用正常的莫队做区间逆序对,我们会得到带个$\log n $的复杂度:也就是每次扩展一个数,计算它对答案的贡献,这个是必须带$\log n $的,而且查询次数等价于移动次数,我们甚至不能用根号平衡.</p>
<p>那么怎么解决这个问题呢?我们现在无非是有$n \sqrt { n  } $次询问,每次询问$f ( l , r , r + 1 ) $表示区间$[ l , r ] $对$r + 1 $的逆序对贡献.考虑差分成$f ( 1 , r , r + 1 ) - f ( 1 , l - 1 , r + 1 ) $,前者显然可以迅速求出.而后者的右端点需要移动$n $次,需要查询总共$n \sqrt { n  } $次,zhe’ge</p>
<h4><span id="example">Example</span></h4><h5><span id="example1ynoi2016这是我自己的发明">Example1([Ynoi2016]这是我自己的发明)</span></h5><p>dfn将子树转序列,注意到换根无非是把一个序列拆成了两个序列,这是好做的.不过这玩意都$4 - side $了,但是有可减性,减成$2 - side $就能莫队了.</p>
<h5><span id="example2hnoi2016大数">Example2([HNOI2016]大数)</span></h5><p>区间子区间问题对于莫队是有一个套路的:即转化为二元组计数问题.</p>
<p>具体怎么做呢?首先这个题我们特判掉$p = 2 $和$p = 5 $的情况,这个只需要判断个位数就可以.然后我们考虑求每个点后缀代表的数字$\bmod p $的值,设为$suf _i $,假设存在两个点$l , r $满足$p | ( suf _l - suf _{ r + 1  } ) $,那么$[ l , r ] $就是合法的,这是自然的,也就等价于$suf _l = suf _{ r + 1  } $,相当于要对满足$suf _l = suf _{ r + 1  } $的二元组$( l , r ) $计数,这个是可以用莫队维护的.</p>
<h5><span id="example3luogup3604-美好的每一天">Example3(luoguP3604 美好的每一天)</span></h5><p>类似上面那个题,用哈希(其实就是将26个字母表示成26个二的幂次)然后异或起来,和上面的题就完全一样了,做二元组计数.</p>
<h3><span id="区间子区间问题">区间子区间问题</span></h3><p>求有多少个子区间满足条件.</p>
<p>上二维平面,子区间所代表的$( l , r ) $的点一定是在一条角平分线上的一个等腰直角三角形.</p>
<h5><span id="example1cf997e">Example1(CF997E)</span></h5><p>考虑转化为二维平面,$a _{ l , r  } = maxn - minn - ( r - l ) $,显然只需要找到为$0 $的操作就行,这四个数可以转化为四个矩形加法,做扫描线.</p>
<p>另外这里的矩阵加法有$3 - side $的,但是可差分成$2 - side $.</p>
<h3><span id="时间倒流">时间倒流</span></h3><h5><span id="example12022qbxt国庆day6sgtbeats">Example1([2022qbxt国庆Day6]sgtbeats)</span></h5><p>首先考虑:如果一个点被清空了多次,那么只有最后一次有意义.</p>
<p>删除操作很难做,考虑变成插入,然后就可以拿数据结构维护操作序列的后缀max,存一下每个点最后被清空的时间,然后处理即可.</p>
<h5><span id="example2wc2006水管局长">Example2([WC2006]水管局长)</span></h5><p>时间倒流,删边变加边,LCT做一下.</p>
<h3><span id="数据结构维护分段函数">数据结构维护分段函数</span></h3><h5><span id="example1cf1540d-inverse-inversions">Example1(CF1540D Inverse Inversions)</span></h5><p>考虑对于一个数列怎么构造:假设只考虑前$k $个数,它们的取值是$[ 1 , k ] $,现在加入第$k + 1 $个数,由于我们知道它是前缀第几小,所以我们可以直接将它设成这个值,然后将前面所有大于等于这个值的点全都$+ 1 $,不难发现这一定是唯一构造.</p>
<p>那么我们现在要知道$p _i $是多少,根据上面的构造过程,首先将$p _i = a _i $,然后不断向后遍历,每遇到一个$a _j $,如果$a _j \leq p _i $,则把$p _i + = 1 $.</p>
<p>我们将数列分块,设块长为$B $,那一个值经过一个块的时候最多加块长个$1 $.也就是经过整块的时候是一个$B $段的分段函数.</p>
<p>考虑暴力求出这个分段函数,每次询问的时候直接二分,修改的时候考虑每个块维护一个线段树,线段树的区间表示这个区间对应的分段函数.这样单点修改复杂度是$\sum { \cfrac { B  } { 2 ^i  }  } = B $的,</p>
<p>于是最后复杂度为$O ( T ( B + \cfrac { n  } { B  } \log n ) ) $,取$B = \sqrt { n \log n  } $即可.</p>
<h3><span id="根号平衡">根号平衡</span></h3><p>根号平衡主要用到下面四个东西:</p>
<ol>
<li><p>$O ( 1 ) $单点加,$O ( \sqrt { n  } ) $区间和:维护块内的和即可.</p>
</li>
<li><p>$O ( \sqrt { n  } ) $单点加,$O ( 1 ) $区间和:维护块内和块间的前缀和即可.</p>
</li>
<li><p>$O ( \sqrt { n  } ) $区间加,$O ( 1 ) $单点和:差分转化为$( 2 ) $.当然打标记也是可以的.</p>
</li>
<li><p>$O ( 1 ) $区间加,$O ( \sqrt { n  } ) $单点和:差分转化为$( 1 ) $.当然打标记也是可以的.</p>
</li>
</ol>
<p>还有一些拓展的东西:</p>
<ol>
<li><p>维护值域$O ( n ) $的集合,支持$O ( 1 ) $插入,$O ( \sqrt { n  } ) $查询第$k $小:值域分块就可以.</p>
</li>
<li><p>维护值域$O ( n ) $的集合,支持$O ( \sqrt { n  } ) $插入,$O ( 1 ) $查询第$k $小:值域分块,然后暴力改变每个点所属的块就行.</p>
</li>
</ol>
<h4><span id="example">Example</span></h4><h5><span id="example1区间众数">Example1(区间众数)</span></h5><p>首先分块,处理出$f _{ l , r  } $表示块$[ l , r ] $的答案.这样每次只需要加入散块中的每个数并判断答案即可,由于判断每个数在区间出现次数是$\log n $的,因此复杂度$O ( n \sqrt { n \log n  } ) $.</p>
<p>但是可以优化,我们设$mx $表示当前众数出现次数,注意到我们判断一个数字在区间中出现次数是否大于$mx $可以$O ( 1 ) $判断(处理出这个数所有的出现位置),而如果遇到两个数需要对冲,显然$mx $增加总次数也不会超过$O ( \sqrt { n  } ) $,因此做到$O ( n \sqrt { n  } ) $.</p>
<p>不删除莫队也能做.</p>
<p>当然,如果只要求区间众数的出现次数,可以直接莫队.</p>
<h5><span id="example2codechef-chef-and-churu">Example2(CodeChef Chef and Churu)</span></h5><p>首先发现函数是不会被修改的,因此考虑对函数分块,对于那些散着的函数肯定可以用一个$O ( 1 ) $查询区间和,$O ( \sqrt { n  } ) $单点修改的进行根号平衡.</p>
<p>而怎么快速处理整块呢?发现函数可差分,差分后就可以算出每一个位置对这个块内的总贡献,这样就可以更新了.</p>
<h5><span id="example3ahoi2013作业">Example3([Ahoi2013]作业)</span></h5><p>莫队,发现有$m $次查询,$n \sqrt { m  } $次移动,于是根号平衡.</p>
<h5><span id="example4bzoj4241历史研究">Example4(Bzoj4241历史研究)</span></h5><p><del>回滚莫队板子.</del></p>
<p>事实上考虑可能的答案只有$O ( n ) $种,用值域分块就可以平衡复杂度.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>数论相关</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E6%95%B0%E8%AE%BA%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<span id="more"></span>
<p>本文除特殊说明,所涉及数均为整数.</p>
<h3><span id="整除性及相关">整除性及相关</span></h3><p>如果$m &gt; 0 $且$\cfrac { n  } { m  } $是一个整数,我们就说$m $整除$n $,记作$m | n $.</p>
<p>能同时整除两个数$n $和$m $的数称为$n $和$m $的公因子,所有公因子中最大的那个称为最大公因子,记作$\gcd ( n , m ) $.而最小的能同时被$n $和$m $整除的非零数被称为他们的最小公倍数,记作$lcm ( n , m ) $.不难发现$lcm ( n , m ) \gcd ( n , m ) = nm $.</p>
<h4><span id="欧几里得算法">欧几里得算法</span></h4><p>欧几里得算法基于以下定理:</p>
<p>$\gcd ( 0 , n ) = n $且$\gcd ( n , m ) = \gcd ( n \mod m , m ) , m &gt; 0 $.</p>
<p>考虑证明,首先,$\forall k \in \mathbb { Z  } $,$n $和$m $的公因子一定是$n $和$m + kn $的公因子,这是显然的.因此,$n $和$m $的公因子一定是$m $和$n - m \lfloor \cfrac { n  } { m  } \rfloor $的公因子,而反之亦然.</p>
<p>另外有如下性质:</p>
<ol>
<li><p>$\gcd ( kn , km ) = k \gcd ( n , m ) $以及$lcm ( kn , km ) = k  lcm ( n , m ) $.</p>
</li>
<li><p>若$a \bot b $,则$\gcd ( a ^m - b ^m , a ^n - b ^n ) = a ^{ \gcd ( n , m )  } - b ^{ \gcd ( n , m )  } $.</p>
</li>
<li><p>如果$n ^a \equiv 1 \pmod { m  } \land n ^b \equiv 1 \pmod { m  } $,则$n ^{ \gcd ( a , b )  } \equiv 1 \pmod { m  } $.</p>
</li>
</ol>
<p>(1)的证明较为显然,我们考虑(2)的证明.</p>
<p>不妨假设$n \leq m $,当$n = m $时显然成立.</p>
<p>当$n &lt; m $时:</p>
<p>假设$a &gt; b $,考虑$\gcd ( a ^m - b ^m , a ^n - b ^n ) = \gcd ( a ^m - b ^m - k ( a ^n - b ^n ) , a ^n - b ^n ) $.</p>
<p>取$k = b ^{ m - n  } $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\gcd ( a ^m - b ^m , a ^n - b ^n ) & = \gcd ( a ^m - b ^{ m - n  } a ^n , a ^n - b ^n ) \\
& = \gcd ( a ^n ( a ^{ m - n  } - b ^{ m - n  } ) , a ^n - b ^n ) 
\end{aligned}</script><p>由于$a \bot b $,所以显然$a ^n - b ^n \bot a ^n $,于是:</p>
<script type="math/tex; mode=display">
\gcd ( a ^m - b ^m , a ^n - b ^n ) = \gcd ( a ^{ m - n  } - b ^{ m - n  } , a ^n - b ^n )</script><p>自然得证.</p>
<p>接下来考虑(3)的证明:</p>
<p>如果$a = b $,显然得证.不然,不妨设$a &gt; b $注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ^a & \equiv 1 \pmod { m  } \\
n ^a - n ^{ a - b  } n ^b & \equiv 1 - n ^{ a - b  } \pmod { m  } \\
n ^{ a - b  } & \equiv 1 \pmod { m  } 
\end{aligned}</script><p>自然得证.</p>
<h4><span id="一些性质">一些性质</span></h4><p>令$n , m \in \mathbb { N _+  } $.</p>
<ol>
<li><p>$k | n \land k | m \Leftrightarrow k | \gcd ( n , m ) $.</p>
</li>
<li><p>$\sum _{ m | n  } a _m = \sum _{ m | n  } a _{ \frac { n  } { m  }  } $.</p>
</li>
<li><p>$\sum _{ m | n  } \sum _{ k | m  } a _{ k , m  } = \sum _{ k | n  } \sum _{ l | ( \frac { n  } { k  } )  } a _{ k , kl  } $.</p>
</li>
</ol>
<p>另外,$\gcd $有一个很著名的性质:对于数字$n , m $,找到最小的正整数$x $满足$\exists y \in \mathbb { N  } $,$xn = ym $.</p>
<p>首先令$g = \gcd ( n , m ) $,我们自然有$x \frac { n  } { g  } = y \frac { m  } { g  } $,也就相当于$x \frac { n  } { g  } \equiv 0 \pmod { \frac { m  } { g  }  } $,由于$\gcd ( \frac { n  } { g  } , \frac { m  } { g  } ) = 1 $,所以左边的$\frac { n  } { g  } $可以用逆元消掉,显然最小正整数解为$x = \frac { m  } { g  } $.</p>
<h5><span id="example1cf1656hequal-lcm-subsets">Example1([CF1656H]Equal LCM Subsets)</span></h5><p>注意到插入可能有点小困难,我们考虑从全集中删除:注意到如果对于一个数字的某一个质因子,如果它的指数大于了对方集合中相同质因子的最大指数,那这个数一定不可能存在,直接删掉.不难发现删完后就是合法的了.</p>
<p>首先,数据范围不允许我们判断质因子,那么怎么做呢?</p>
<p>显然合法的条件等价于$a _i | lcm ( b ) , \forall 1 \leq i \leq n $(当然这个还要反过来再写一遍,两个式子一起才是充要条件,这里为了方便只写一个),这个条件等价于$\gcd _{ j = 1  } ^n ( \frac { a _i  } { \gcd ( b _j , a _i )  } ) = 1 $.后者是方便做的.</p>
<p>然后上线段树处理一下,好像先random_shuffle一下再暴力删除也是对的.</p>
<h4><span id="基于值域预处理的快速-gcd">基于值域预处理的快速 GCD</span></h4><p>存在一种$O ( n ) $预处理,$O ( 1 ) $求任意两个小于等于$n $的数的$\gcd $的方法:</p>
<p>引理:</p>
<p>对于任意整数$n $,存在一种划分方式$n = abc $,$a $,$b $,$c $三个数要么是质数,要么$\leq \sqrt { n  } $.</p>
<p>证明:</p>
<p>如果$n $存在一个大于等于$\sqrt { n  } $的质因子,显然成立.</p>
<p>否则,使用数学归纳,我们考虑$n $的最小质因子为$p $,设$\frac { n  } { p  } = xyz $,不妨设$x \leq y \leq z $.</p>
<p>如果$x = 1 $,显然成立.</p>
<p>不然有$p \leq x \leq y \leq z $,而$pxyz = n $,那么$p ^4 \leq n $,$p \leq n ^{ \frac { 1  } { 4  }  } $.</p>
<p>现在我们想要证明不存在$xp &gt; \sqrt { n  } $,$yp &gt; \sqrt { n  } $,$zp &gt; \sqrt { n  } $.</p>
<p>如果存在,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
xyzp ^3 & > n ^{ \frac { 3  } { 2  }  } \\
np ^2 & > n ^{ \frac { 3  } { 2  }  } \\
p ^2 & > \sqrt { n  } \\
p & > n ^{ \frac { 1  } { 4  }  } 
\end{aligned}</script><p>与我们前面的结论不符合.</p>
<p>因而该引理成立,并且给出了$O ( n ) $预处理所有数$abc $的方法.</p>
<p>接下来，设$m = \sqrt { n  } $,考虑使用$O ( n ) $的时间求出每个小于等于$m $的数对的$\gcd $,如果我们要求$\gcd ( x , y ) $,设$x = abc $,显然$\gcd ( x , y ) = \gcd ( a , y ) \times \gcd ( b , \frac { y  } { \gcd ( a , y )  } ) \times \gcd ( c , \frac { y  } { \gcd ( ab , y )  } ) $.</p>
<p>如果$a $是质数，只需要判断$a $是否整除$y $.</p>
<p>否则$\gcd ( a , y ) = \gcd ( y \mod a , a ) $,因为$a \leq \sqrt { n  } $,因而可以直接查表.</p>
<h4><span id="裴蜀定理">裴蜀定理</span></h4><p>$\forall a , b , m \in \mathbb { Z  } $,则$\exists x , y \in \mathbb { Z  } $满足$ax + by = m $,当且仅当$\gcd ( a , b ) | m $.</p>
<p>证明如下:</p>
<p>若$a = 0 $或$b = 0 $,显然成立.</p>
<p>不然,设集合$A = \{ xa + yb | x , y \in \mathbb { Z  } \} $中的最小正元素$d _0 = x _0 a + y _0 b $,该集合中显然一定有正元素.</p>
<p>考虑取该集合中另一个正整数$d _1 = x _1 a + y _1 b &gt; d _0 $,注意到$d _1 - d _0 = ( x _1 - x _0 ) a + ( y _1 - y _0 ) b \in A $,所以$\gcd ( d _1 , d _0 ) \in A $,如果$d _0 \nmid d _1 $,那么$0 &lt; \gcd ( d _1 , d _0 ) &lt; d _0 $,与假设不符.所以这个集合里的所有数一定都是$d _0 $的倍数.</p>
<p>事实上还有另一种证明方式:</p>
<p>如果我们定义一个非空集合$I \subseteq \mathbb { Z  } $,满足其对加法和数乘($\forall a \in \mathbb { Z  } , x \in I , ax \in I $)均封闭,那么我们可以证明其中存在一个唯一的数字$g $满足所有数都是$g $的倍数.</p>
<p>如果$I = \{ 0 \} $,可以取$g = 0 $.</p>
<p>反之,显然其中有正有负(因为可以取$a = - 1 $),我们设$I _+ = \{ k \in I | k \geq 1 \} $取$g = \min I _+ $.$\forall a \in I $,不妨设$a = gq + r , r \in [ 0 , g ) $,那么$r = a + ( - q ) g \in I $,由于$r &lt; g $,所以$r \notin I _+ $,所以$r = 0 $,$a $是$g $的倍数,且显然$g $唯一.</p>
<h4><span id="扩展欧几里得算法">扩展欧几里得算法</span></h4><p>考虑求方程$ax + by = \gcd ( a , b ) $的一组解.</p>
<p>首先,如果$b = 0 $,那这组解显然就是$\begin{cases}x = 1 \ y = 0 \end{cases} $.</p>
<p>反之,我们令$c = a \mod b $,考虑求方程$cz + bw = \gcd ( c , b ) $的一组解.</p>
<p>接下来呢,考虑带入$c $,则我们求出来的即方程$( a - b \lfloor \cfrac { a  } { b  } \rfloor ) z + bw = \gcd ( a , b ) $的一组解.不难发现这也就是方程$az + ( w - \lfloor \cfrac { a  } { b  } \rfloor z ) b = \gcd ( a , b ) $的一组解,所以原本的方程的解也就是$\begin{cases}x = z \ y = ( w - \lfloor \cfrac { a  } { b  } \rfloor z ) \end{cases} $.</p>
<p>另外,这个算法也可以使用矩阵形式:</p>
<p>首先有</p>
<p>a\\</p>
<p>b</p>
<p>\end{matrix}\right]</p>
<p>=\left[\begin{matrix}</p>
<p>a\\</p>
<p>b</p>
<p>\end{matrix}\right]$, 令 $q=\lfloor\frac a b\rfloor$, 那 么 我 们 有 $\left[\begin{matrix}</p>
<p>0&amp;1\\</p>
<p>1&amp;-q</p>
<p>\end{matrix}\right]</p>
<p>\left[\begin{matrix}</p>
<p>a\\</p>
<p>b</p>
<p>\end{matrix}\right]=</p>
<p>\left[\begin{matrix}</p>
<p>b\\</p>
<p>a\mod b</p>
<p>\end{matrix}\right]</p>
<p>同样我们可以得到:</p>
<p>x_1&amp;y_1\\</p>
<p>x_2&amp;y_2</p>
<p>\end{matrix}\right]</p>
<p>\left[\begin{matrix}</p>
<p>a\\</p>
<p>b</p>
<p>\end{matrix}\right]=</p>
<p>\left[\begin{matrix}</p>
<p>\gcd(a,b)\\</p>
<p>0</p>
<p>\end{matrix}\right]$, 即 $ax_1+by_1=\gcd(a,b)$, $(x_1,y_1)</p>
<h5><span id="example1xvii-open-cup-named-after-ev-pankratiev-grand-prix-of-japanopenstrain-contest-1489eeel-and-grid">Example1([XVII Open Cup named after E.V. Pankratiev. Grand Prix of Japan(openstrain contest 1489)E]Eel and Grid)</span></h5><p>题意:$h \times w ( h , w \leq 10 ^6 ) $的格子图,只能往下往右走,走到边界会循环,问从$( 0 , 0 ) $开始走遍历走一个哈密顿回路的方案数.</p>
<p>这题最重要的地方其实在于观察到,由于每个点只会被走到一次(除了$( 0 , 0 ) $,它会被走到两次,但只会由其它格子走来一次),因此如果抽象成图,每个格子只会有一个出边和一个入边.这意味着每个格子上面的和左边的格子必定只有一个指向它,进一步地,这意味着这两个格子的状态必然相同.</p>
<p>由此我们发现,每条副对角线(取膜意义下)的状态必然相同,而取膜意义下的副对角线有多少条呢?不难注意到是$d = \frac { hw  } { \text { lcm  } ( h , w )  } = \gcd ( h , w ) $条.也就是说,我们只需要确定这$d $条对角线的值,就可以确定整个矩阵的答案.假设$R $表示向右走,$D $表示向下走,$a _i $表示第$i $条副对角线的状态,最后的操作序列自然是$a _0 a _1 . . . a _{ d - 1  } a _0 a _1 . . . $.</p>
<p>那么我们接下来要做的就是给这$d $条副对角线定向,并判断一个方案是否合法.注意到一个方案不合法当且仅当出现了多于$1 $个环.那这又意味着什么呢?意味着存在一个点,它可以通过少于$hw $次走动走回自己.这显然是不被我们允许的.另一件不难发现的事是,第一个走回自己的点一定是$( 0 , 0 ) $.再不难发现的是,走回自己的时候一定是经过了若干个周期:$a _0 a _1 . . . a _{ d - 1  } a _0 . . . a _{ d - 1  } $,因为每次向下或者向右走都会走到下一条副对角线,而且最后要回到自己.这就注意到每一个循环$a _0 a _1 . . . a _{ d - 1  } $内部具体什么情况是不在乎的,只在乎经历过这个过程之后会发生什么样的变化.</p>
<p>我们不妨假设序列$\{ a \} $中有$k $个$R $,$d - k $个$D $,那会产生这种情况当且仅当$\exists x \in \mathbb { N _+  } , x &lt; \frac { hw  } { d  } $,$\begin{cases}h | x ( d - k ) \ w | xk \end{cases} $.注意到这等价于寻找最小的$x $,判断其是否小于$\frac { hw  } { d  } $,于是条件等价于自然有$x = lcm ( \frac { h  } { \gcd ( d - k , h )  } , \frac { w  } { \gcd ( w , k )  } ) $,枚举$k $并判断即可.</p>
<h3><span id="素数及相关">素数及相关</span></h3><h4><span id="定义">定义</span></h4><p>可以利用裴蜀定理证明素数的定义等价于$\forall a , b , p | ab \Rightarrow p | a \lor p | b $.</p>
<p>考虑先用最基础的定义得到这个命题,考虑$p | ab , p \nmid a $,则$1 = px + ay $有解,则$b = pxb + ( ab ) y $,右边都是$p $的倍数,所以$p | b $.</p>
<p>这个命题反推的话,考虑设$p = ab , a , b \ne 1 $,则$p | ab $且$p \nmid a , p \nmid b $,不符.</p>
<h5><span id="example1具体数学422">Example1(《具体数学》4.22)</span></h5><p>证明:在$n $进制下,若$( 11 . . . 1 ) _n $的$1 $的个数不是质数则其一定不是质数..</p>
<p>设$1 $的个数为$m $,则$( 11 . . . 1 ) _n = \sum _{ i = 0  } ^{ m - 1  } n ^i $.</p>
<p>如果$m \notin prime $,不妨设则$m = cd , c \ne 1 \land d \ne 1 $.</p>
<p>则</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 0  } ^{ m - 1  } n ^i & = \sum _{ i = 0  } ^{ c - 1  } n ^{ di  } \sum _{ j = 0  } ^{ d - 1  } n ^{ j  } \\
& = ( \sum _{ i = 0  } ^{ c - 1  } n ^{ di  } ) ( \sum _{ j = 0  } ^{ d - 1  } n ^j ) 
\end{aligned}</script><p>显然不是质数.</p>
<h4><span id="唯一分解定理算数基本定理">唯一分解定理(算数基本定理)</span></h4><p>任何正整数都只有一种方式以素数非减的次序写成素数的乘积.</p>
<p>证明:</p>
<p>考虑数学归纳法,设小于$n $的数全部满足.</p>
<p>则对于$n $,如果它不满足条件,一定存在两种分解方式$n = \prod _{ i = 1  } ^m p _i = \prod _{ i = 1  } ^k q _i $.</p>
<p>首先,如果$p _1 = q _1 $,根据归纳假设,显然不成立.</p>
<p>不失一般性,设$p _1 &lt; q _1 $.则$q _1 | p _1 \prod _{ i = 2  } ^m p _i $,显然$q _1 \nmid p _1 $,所以$q _1 | \prod _{ i = 2  } ^m p _i $,设$s = \prod _{ i = 2  } ^m p _i $,但这是不可能的,因为$s &lt; n $,根据归纳假设,它只有一种分解方式,这种方式中显然不可能存在$p _1 $.</p>
<p>那么根据上述证明,我们可以将一个数表示为以下形式:$n = \prod _p p ^{ n _p  } , n _p \geq 0 $.</p>
<p>另外不难证明的一点是,假设$\sum n _p = k $,那么最小质因子一定不大于$\sqrt [k ] { n  } $.</p>
<h5><span id="example1cf986foppa-funcan-style-remastered">Example1([CF986F]Oppa Funcan Style Remastered)</span></h5><p>首先对$k $做pollard-Rho算法.注意到我们可以默认$q _i $是质因子,这显然不会影响答案.</p>
<p>然后,如果只有一个质因子,显然直接判断.</p>
<p>如果有两个质因子,是经典的二元不定方程.</p>
<p>如果有三个质因子,此时最小质因子的大小就不大于$\sqrt [3 ] { k  } $,做同余最短路即可.</p>
<h4><span id="素数的个数">素数的个数</span></h4><p>首先,欧几里得证明了素数有无穷多个:</p>
<p>假设素数有有限个,分别为$p _1 , p _2 , . . . p _m $,则$\prod _{ i = 1  } ^m p _i + 1 $无法被其中任何素数整除,则假设不成立.</p>
<p>在此基础上,我们可以定义欧几里得数:</p>
<p>$e _1 = 2 , e _n = 1 + \prod _{ i = 1  } ^{ n - 1  } e _i $.</p>
<p>令$\pi ( n ) $表示小于等于$n $的素数个数,有${ \lim _{ n \rightarrow + \infty  } \cfrac { \pi ( n ) \times \ln n  } { n  }  } = 1 $.</p>
<p>有切比雪夫定理(又称贝特朗假设):若$n &gt; 1 , \exists p \in prime , p \in ( n , 2 n ) $.</p>
<p>又有狄利克雷定理:若$\gcd ( a , b ) = 1 , \{ an + b \} $中包含了无穷个素数.</p>
<p>(顺便一提,当$a = 4 $或者$a = 6 $,$b = - 1 $的时候是好证明的,由于素数要么形如$6 n - 1 $要么形如$6 n + 1 $,或者要么形如$4 n - 1 $要么形如$4 n + 1 $,只需要类似证明素数无限那样乘一乘)</p>
<p>同时,我们还有以下结论:$\sum _{ 1 \leq p \leq n \land p \in prime  } \cfrac { 1  } { p  } \approx \log \log n $.</p>
<p>证明如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq p \leq n \land p \in prime  } \cfrac { 1  } { p  } & = \sum ^n _{ k = 1  } \cfrac { \pi ( k ) - \pi ( k - 1 )  } { k  } & = \sum ^n _{ k = 1  } \cfrac { \pi ( k )  } { k  } - \sum ^n _{ k = 1  } \cfrac { \pi ( k - 1 )  } { k  } \\
& = \sum ^n _{ k = 1  } \cfrac { \pi ( k )  } { k  } - \sum ^{ n - 1  } _{ k = 0  } \cfrac { \pi ( k )  } { k + 1  } \\
& = \sum ^{ n - 1  } _{ k = 1  } \cfrac { \pi ( k )  } { k  } + \cfrac { \pi ( n )  } { n  } - \sum ^{ n - 1  } _{ k = 1  } \cfrac { \pi ( k )  } { k + 1  } - \cfrac { \pi ( 0 )  } { 1  } \\
& = \sum ^{ n - 1  } _{ k = 1  } \cfrac { \pi ( k )  } { k ( k + 1 )  } + \cfrac { \pi ( n )  } { n  } \\
& = \sum ^{ n - 1  } _{ k = 1  } { ( \cfrac { 1  } { k \log k  } )  } + O ( \frac { 1  } { \log n  } ) & = O ( \log \log n ) + O ( \frac { 1  } { \log n  } ) 
\end{aligned}</script><h5><span id="example1具体数学420">Example1(《具体数学》4.20)</span></h5><p>证明:存在一个常数$b $满足$\lfloor 2 ^b \rfloor , \lfloor 2 ^{ 2 ^b  } \rfloor , \lfloor 2 ^{ 2 ^{ 2 ^b  }  } \rfloor . , . . $都是质数.</p>
<p>如此构造数列:设$p _1 = 2 $,且$p _n $为满足$2 ^{ p _{ n - 1  }  } &lt; p _n &lt; 2 ^{ p _{ n - 1  } + 1  } $的最小质数.</p>
<p>通过构造不难发现:$p _{ n - 1  } = \lfloor \log _2 p _n \rfloor $.</p>
<p>根据整值函数的性质,我们有$\lfloor \log _2 x \rfloor = \lfloor \log _2 \lfloor x \rfloor \rfloor $.考虑反向数学归纳,考虑当$n \rightarrow + \infty $时构造满足题目条件,那么$p ^{ n - 1  } = \lfloor \log _2 \lfloor 2 ^{ 2 ^{ 2 ^{ . . . ^{ b  }  }  }  } \rfloor \rfloor = \lfloor 2 ^{ 2 ^{ . . . ^{ b  }  }  } \rfloor $,自然也满足条件.所以如果设$\log _2 ^{ ( n )  } x $为不断对$x $迭代求$\log _2 $做$n $次后的答案,只需构造$b = \lim _{ n \rightarrow + \infty  } \log _2 ^{ ( n )  } p _n $即可.</p>
<h5><span id="example2">Example2</span></h5><p>求证:</p>
<script type="math/tex; mode=display">
\mu ( \gcd ( a , b ) ) = 0 \Leftrightarrow \forall n > 0 , \mu ( an + b ) = 0</script><p>左推右是简单的.接下来考虑右推左.</p>
<p>考虑狄利克雷定理,数列$\{ \frac { an + b  } { \gcd ( a , b )  } \} $.不妨反证,假设$\mu ( \gcd ( a , b ) ) \ne 0 $,不妨设$p = \frac { an + b  } { \gcd ( a , b )  } $,$p \gcd ( a , b ) = ax + b $,也就是$\mu ( p \gcd ( a , b ) ) = 0 $,注意到$\mu ( \gcd ( a , b ) ) \ne 0 $,此时必有$p | \gcd ( a , b ) $,而$p $无限,$\gcd ( a , b ) $的素因子有限,这就导出了矛盾.</p>
<h4><span id="欧几里得数">欧几里得数</span></h4><p>定义欧几里得数:$e _1 = 2 , e _n = 1 + \prod _{ i = 1  } ^{ n - 1  } e _i $.不难发现$e _n = e _{ n - 1  } ( e _{ n - 1  } - 1 ) $.</p>
<h4><span id="费马数">费马数</span></h4><p>定义费马数$f _n = 2 ^{ 2 ^n  } + 1 $.不难发现$f _n = ( f _{ n - 1  } - 1 ) ^2 + 1 $.</p>
<p>另外,费马数还满足$f _n = \prod _{ i = 0  } ^{ n - 1  } f _i + 2 $,我们考虑这个式子的证明:显然后面那一个连乘会得到若干项$2 $的次幂,并且这些项两两不同,根据几何级数,我们有$\prod _{ i = 0  } ^{ n - 1  } f _i + 1 $=$2 ^{ 2 ^{ n  }  } $,于是显然得证.</p>
<h5><span id="example1具体数学417">Example1(《具体数学》4.17)</span></h5><p>求证:如果$m \ne n $,则$f _m \bot f _n $.</p>
<p>不妨假设$m &lt; n $,有:$\gcd ( f _m , f _n ) = \gcd ( f _m , 2 ) = 1 $.</p>
<h5><span id="example2具体数学418">Example2(《具体数学》4.18)</span></h5><p>求证:若$2 ^n + 1 $是质数,则$n $是$2 $的整数幂.</p>
<p>如果$n = qm $且$q $是奇数,我们有:$2 ^n + 1 = ( 2 ^m + 1 ) ( 2 ^{ n - m  } - 2 ^{ n - 2 m  } + 2 ^{ n - 3 m  } . . . - 2 ^m + 1 ) $.</p>
<h4><span id="miller-rabin算法">Miller-Rabin算法</span></h4><p>如果判断$n $是否是质数,取$a &lt; n $,设$n - 1 = d \times 2 ^r $.</p>
<p>则要么$a ^d \equiv 1 ( \mod n ) $.</p>
<p>要么$\exists i $,使得$0 \leq i &lt; r $,$a ^{ d \times 2 ^i  } \equiv - 1 ( \mod n ) $.</p>
<p>若一个都不满足,则n一定不是质数,不然可能是质数.</p>
<p>但是若取足够多的不同的$a $(如果选$m $个),那么$n $是质数的可能性更大.</p>
<p>此为Miller-Rabin算法,复杂度$O ( m \times log _2 n ) $.不保证正确性.</p>
<p>其中a通常取质数,原因不详.（事实上，如果a取前八个小质数，在$2 ^{ 64  } $内是不会出错的）</p>
<h4><span id="pollard-rho算法">Pollard-Rho算法</span></h4><p>对$n $做质因数分解,若能找到$a $使得$a | n $,则考虑对$\cfrac { n  } { a  } $和$a $分别进行质因数分解.</p>
<p>考虑随机$a $,若$n $有$m $个因数,那么显然随机到$a $使得$a | n $的概率为$\cfrac { m  } { n  } $,显然不太优秀.</p>
<p>考虑改变随机策略,我们考虑随机一个$a $使得$\gcd ( a , n ) \ne 1 $,那么$\gcd ( a , n ) $就是$n $的一个因子.</p>
<p>这种情况下,随机的概率是$\cfrac { \varphi ( n )  } { n  } $,仍然很不优秀.</p>
<p>考虑使用生日悖论优化,随机$k $个数$a $.两两匹配得到$k ^2 $个值,这些值全都不整除$n $的概率可以用生日悖论来计算.</p>
<p>当$k = 10 \sqrt { n  } $时,错误的概率会很小,但是复杂度仍然很高,无法接受.</p>
<p>考虑构造$a _i = [ ( a _{ i - 1  } ) ^2 + b ] \mod n $.</p>
<p>考虑该数列的性质,当$b $确定时,$a $一定有循环节.</p>
<p>显然当$x | ( a _i - a _j ) $,则$x | [ ( a _i - a _j ) \times ( a _i + a _j ) - b + b ] $,$x | ( a _{ i + 1  } - a _{ j + 1  } ) $.</p>
<p>因此,我们可以利用floyd判环法(双指针法)找出循环节.</p>
<p>并且在这个过程中,我们可以预处理出大量的$a _{ i + len  } - a _i $.</p>
<p>复杂度极其玄学,但是实际应用中不差.</p>
<h4><span id="狄利克雷前缀和">狄利克雷前缀和</span></h4><p>已知数列$a $,求数列$b $满足$b _n = \sum _{ d | n  } a _d $.</p>
<p>我们将一个数的质因数分解看作它的向量表示.更直接地,如果$n = \prod _{ i = 1  } ^k p _i ^{ q _i  } $,其中$p _i $是第$i $大的质数.我们将其写作向量$( q _1 , q _2 , . . . , q _k ) $的形式,并做高位前缀和.</p>
<p>可以用$O ( n \log \log n ) $的时间复杂度解决问题.</p>
<h3><span id="阶乘">阶乘</span></h3><p>我们定义$n ! = \prod _{ i = 1  } ^n i $,特别地,$0 ! = 1 $.</p>
<p>考虑估计$n ! $的大小,不难发现$( n ! ) ^2 = \prod _{ i = 1  } ^n i ( n + 1 - i ) $.</p>
<p>而函数$y = i ( n + 1 - i ) , i \in [ 1 , n ] $显然在$i = 1 $和$i = n $时取最小值,而在$i = \cfrac { n + 1  } { 2  } $时取最大值.</p>
<p>那么我们有$\prod _{ i = 1  } ^n n \leq ( n ! ) ^2 \leq \prod _{ i = 1  } ^n \cfrac { ( n + 1 ) ^2  } { 4  } $.</p>
<p>于是$n ^{ \frac { n  } { 2  }  } \leq n ! \leq \cfrac { ( n + 1 ) ^n  } { 2 ^n  } $.</p>
<p>还有一种估计方式是考虑$\lim _{ n \rightarrow \infty  } \frac { n  } { \sqrt [n ] { n  } !  } $,由Stolz定理及其推论,我们知道若$a _n &gt; 0 , \frac { a _{ n + 1  }  } { a _n  } = a $,那么$\lim _{ n \rightarrow \infty  } \sqrt [n ] { a _n  } = a $.而我们令$a _n = \frac { n ^n  } { n !  } $,$\frac { a _{ n + 1  }  } { a _n  } = ( 1 + \frac { 1  } { n  } ) ^n $,所以$\lim _{ n \rightarrow \infty  } \frac { n  } { \sqrt [n ] { n !  }  } = e $,于是我们可以估计$n ! \sim ( \frac { n  } { e  } ) ^n $.</p>
<p>事实上有一种更准确的估计方法:$n ! \sim \sqrt { 2 \pi n  } ( \cfrac { n  } { e  } ) ^n $.</p>
<p>考虑设$\varepsilon _p ( n ! ) $为$n ! $中质因子$p $的个数,我们分析一下这个函数:</p>
<p>首先显然有:$\varepsilon _p ( n ! ) = \sum _{ k \geq 1  } \lfloor \cfrac { n  } { p ^k  } \rfloor \leq \frac { n  } { p - 1  } $.</p>
<p>我们考虑以$v _p ( n ) $表示$n $在$p $进制下各位数字之和,不妨设第$k $位数字为$w $.那么这个数字对于最后的答案的贡献为$w ( p ^{ k - 1  } + p ^{ k - 2  } + . . . + 1 ) = w \cfrac { p ^k - 1  } { p - 1  } = \cfrac { wp ^k - w  } { p - 1  } $.求和得到$\varepsilon _p ( n ! ) = \cfrac { n - v _p ( n )  } { p - 1  } $.</p>
<h5><span id="example具体数学455">Example(《具体数学》4.55)</span></h5><p>令$P _n = \prod _{ i = 1  } ^n i ! $,求证:$P _n ^4 ( n + 1 ) \mid P _{ 2 n  } $.</p>
<p>考虑对于每个质因子,分开考虑它在前者和后者内出现的次数.</p>
<p>我们不妨将$p $和$p ^k $分开考虑,于是显然下面的式子是上面的式子成立的充分条件:</p>
<script type="math/tex; mode=display">
\sum _{ m \geq 1  } \sum _{ i = 1  } ^{ 2 n  } \lfloor \cfrac { i  } { p ^m  } \rfloor \geq 4 \sum _{ m \geq 1  } \sum _{ i = 1  } ^n \lfloor \cfrac { i  } { p ^m  } \rfloor + [ p ^m \mid ( n + 1 ) ]</script><p>我们不妨对上面这个式子使用数学归纳,也就是说它的充分条件是:</p>
<script type="math/tex; mode=display">
\lfloor \cfrac { 2 n - 1  } { p ^m  } \rfloor + \lfloor \cfrac { 2 n  } { p ^m  } \rfloor \geq 4 \lfloor \cfrac { n  } { p ^m  } \rfloor + [ n \equiv - 1 \pmod { p ^m  } ] - [ n \equiv 0 \pmod { p ^m  } ]</script><p>这个式子,当$1 \leq n \leq p ^m $时显然成立.而当$n $每增大$p ^m $的时候,左右两边同时增大$4 $,于是也是成立的,由此可以数学归纳.</p>
<h3><span id="互素">互素</span></h3><p>如果两个数$n $和$m $满足$\gcd ( n , m ) = 1 $,我们称他们互素,记作$n \bot m $.</p>
<p>我们显然有这样两条性质:</p>
<ol>
<li><p>$\cfrac { n  } { \gcd ( n , m )  } \bot \cfrac { m  } { \gcd ( n , m )  } $.</p>
</li>
<li><p>$k \bot n \land k \bot m \Leftrightarrow k \bot nm $.</p>
</li>
</ol>
<h5><span id="example1具体数学442">Example1(《具体数学》4.42)</span></h5><p>证明:如果两个分数$\cfrac { m  } { n  } $和$\cfrac { m ‘  } { n ‘  } $满足$n \bot m $且$n ‘ \bot m ‘ $,则$( mn ‘ + m ‘ n ) \bot ( nn ‘ ) $的充分必要条件是$n \bot n ‘ $.</p>
<p>首先,如果$\gcd ( n , n ‘ ) \ne 1 $,显然不可能满足条件,必要性得证.</p>
<p>考虑充分性,如果$n \bot n ‘ $,则只需证明$n \bot ( mn ‘ + m ‘ n ) \land n ‘ \bot ( mn ‘ + m ‘ n ) $即可.</p>
<p>而$\gcd ( n , mn ‘ + m ‘ n ) = \gcd ( n , mn ‘ ) = 1 $,另一个式子同理,于是得证.</p>
<h5><span id="example2">Example2</span></h5><p>证明:$\sum _{ 0 \leq k &lt; m  } f ( k ) = \sum _{ d | m  } \sum _{ 0 \leq k &lt; d  } f ( \frac { km  } { d  } ) [ k \bot d ] \ $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 \leq k < m  } f ( k ) & = \sum _{ d | m  } \sum _{ 0 \leq k < m , d | k  } f ( k ) [ \gcd ( k , m ) & = d ] \\
& = \sum _{ d | m  } \sum _{ 0 \leq k < m , d | k  } f ( k ) [ \frac { k  } { d  } \bot \frac { m  } { d  } ] \\
& = \sum _{ d | m  } \sum _{ 0 \leq k < \frac { m  } { d  }  } f ( kd ) [ k \bot \frac { m  } { d  } ] \\
& = \sum _{ d | m  } \sum _{ 0 \leq k < d  } f ( \frac { km  } { d  } ) [ k \bot d ] 
\end{aligned}</script><h5><span id="example3具体数学463">Example3(《具体数学》4.63)</span></h5><p>证明:满足$a ^n + b ^n = c ^n ( n \in \mathbb { N _+  } , n &gt; 2 ) $的最小的($n $为第一关键字,$c $为第二关键字)一组正整数解(即费马大定理最小的反例)一定满足以下性质:(另外,$n = 4 $的情况早被证明了无解)</p>
<ol>
<li><p>$n \in prime $.</p>
</li>
<li><p>$\exists m \in \mathbb { N _+  } , a + b = \begin{cases}m ^n &amp; n \nmid c \ n ^{ n - 1  } m ^n &amp; n \mid c \end{cases} $.</p>
</li>
</ol>
<p>首先证明(1),如果$n $是最小的满足条件的数但并不是质数,我们不妨设$n = xy , x &gt; 2 $,则$( a ^y ) ^x + ( b ^y ) ^x = ( c ^y ) ^x $,显然这是更小的一组反例,于是(1)得证.</p>
<p>接下来考虑性质(2),注意到$a , b , c $必然两两互质,不然可以两边同时除以一个数构造出更小的解,又注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\gcd ( a + b , \cfrac { a ^n + b ^n  } { a + b  } ) & = \gcd ( a + b , ( a ^{ n - 1  } - a ^{ n - 2  } b + . . . + b ^{ n - 1  } ) ) \\
\gcd ( a + b , \cfrac { c ^n  } { a + b  } ) & = \gcd ( a + b , na ^{ n - 1  } ) \\
\gcd ( a + b , \cfrac { c ^n  } { a + b  } ) & = \gcd ( a + b , n ) 
\end{aligned}</script><p>如果$\gcd ( a + b , n ) = 1 $,那么我们有$( a + b ) \bot \cfrac { c ^n  } { a + b  } $.接下来考虑每一个质因子$p $,如果$( a + b ) $中有$x $个$p $,$c $中有$y $个$p $,于是$c ^n $中有$ny $个$p $,我们自然有:$x = ny $,于是$\exists m \in \mathbb { N _+  } $满足$a + b = m ^n $.</p>
<p>如果$n \mid ( a + b ) $,我们就有:$\gcd ( a + b , \cfrac { c ^n  } { a + b  } ) = n $,此时必有$n \mid c $,$n ^n \mid c ^n $,并且不难发现:$n ^k \mid \cfrac { c ^n  } { a + b  } \Leftrightarrow n ^{ n - k  } \mid ( a + b ) $,由于上面提到的$\gcd $的原因,$\min \{ k , n - k \} = 1 $,显然$k = 1 $或者$k = n - 1 $.下面只需要证明$k \ne n - 1 $.</p>
<p>冷静一下,如果$n | ( a + b ) , n ^2 \nmid ( a + b ) $,令$m = a + b $,此时必有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c ^n & = a ^n + ( m - a ) ^n \\
& = a ^n + ( - a ) ^n + nm ( - a ) ^{ n - 1  } + \frac { n ( n - 1 )  } { 2  } m ^2 ( - a ) ^{ n - 2  } + \cdots 
\end{aligned}</script><p>注意到$n $是奇数,$a ^n + ( - a ) ^n = 0 $,而$n ^n | c ^n \Rightarrow n ^3 | c ^n $,又注意到$n ^3 | nm ^2 $,我们把两边对$n ^3 $取模:</p>
<script type="math/tex; mode=display">
0 \equiv nx ( - a ) ^{ n - 1  } \pmod { n ^3  }</script><p>注意到若$n ^2 \nmid m $,则该式子必不成立.</p>
<h4><span id="stern-brocot-树">Stern-Brocot 树</span></h4><p>Stern-Brocot树是一种可以不重不漏列举有理数的方式,它的构造如下:</p>
<p>一开始,序列中有两个分数:$\cfrac { 0  } { 1  } $和$\cfrac { 1  } { 0  } $,这里使用了$0 $作分母,但我们暂且认为它是正确的,因为这样会出现很多方便的性质.</p>
<p>接下来,不断地对这个序列进行以下操作:在两个相邻的分数$\cfrac { m  } { n  } $和$\cfrac { m ‘  } { n ‘  } $之间插入一个新分数$\cfrac { m + m ‘  } { n + n ‘  } $.</p>
<p>这么无限构造下去得到的序列满足两个性质:</p>
<ol>
<li><p>所得到的分数全都是最简分数.</p>
</li>
<li><p>所得到的分数不重不漏,换句话说,任意非负有理数都在这个序列中出现恰好一次.</p>
</li>
</ol>
<p>我们不妨认为$\cfrac { 1  } { 0  } = + \infty $,那么不难发现这么构造序列,所得到的序列一定是单调递增的.</p>
<p>这是因为如果我们有$\cfrac { m  } { n  } &lt; \cfrac { m ‘  } { n ‘  } $,那么我们一定有:$\cfrac { m  } { n  } &lt; \cfrac { m + m ‘  } { n + n ‘  } &lt; \cfrac { m ‘  } { n ‘  } $,其中$n , n ‘ , m , m ‘ \geq 0 $,这一点不难验证.</p>
<p>而正因为如此,我们可以证明所得到的所有分数不重.</p>
<p>然后,如果当前所得到的序列中有两个数$\cfrac { m  } { n  } $和$\cfrac { m ‘  } { n ‘  } $相邻,则$m ‘ n - mn ‘ = 1 $,这一点不难通过数学归纳证明.而根据裴蜀定理,显然$m \bot n $且$m ‘ \bot n ‘ $.</p>
<p>我们最后需要证明任意非负有理数都可以通过这个序列构造出来,考虑类似二分的方法构造.换句话说,我们有两个序列中的分数$\cfrac { m  } { n  } $和$\cfrac { m ‘  } { n ‘  } $,要构造的有理数为$\cfrac { a  } { b  } $且满足$\cfrac { m  } { n  } &lt; \cfrac { a  } { b  } &lt; \cfrac { m ‘  } { n ‘  } $.</p>
<p>我们考虑判断$\cfrac { m + m ‘  } { n + n ‘  } $与$\cfrac { a  } { b  } $的大小关系,这样就可以类似二分的方法一直往下找下去.</p>
<p>问题在于为什么我们最后一定可以找到这个数呢?如果我们一直找不到这个数,意味着无论我们怎么做,都有$\cfrac { m  } { n  } &lt; \cfrac { a  } { b  } &lt; \cfrac { m ‘  } { n ‘  } $成立,而这也就意味着$an - bm \geq 1 \land bm ‘ - an ‘ \geq 1 $,处理一下不等式并合并,我们有$( m ‘ + n ‘ ) ( an - bm ) + ( n + m ) ( bm ‘ - an ‘ ) \geq n + m + n ‘ + m ‘ $.</p>
<p>化简这个式子得到$a + b \geq m ‘ + n ‘ + m + n $,而我们在操作过程中$m , n , m ‘ , n ‘ $显然会有两个数不变,另外两个数变大,因此迟早会大于$a + b $,也就意味着这个数迟早会被找到.</p>
<p>之所以称其为”树”,则是因为我们如果每次都在任意两个数之间插入一个数,然后将进行若干次操作得到的序列放到二叉搜索树上,会得到一些很好的性质,譬如一个数是由它所有祖先中最大的小于它的数和最小的大于它的数生成的,以及关于根中心对称的两点互为倒数.</p>
<p>另外,如果我们定义法里级数$\mathcal { F  } _n $表示所有在$[ 0 , 1 ] $范围内且分母小于等于$n $的最简分数的集合.不难发现,$\mathcal { F  } _n $对应着整棵树的一棵子树的一部分.而$\mathcal { F  } _n $可以由$\mathcal { F  } _{ n - 1  } $得到,只需要判断$\mathcal { F  } _{ n - 1  } $中每两个相邻数能否生成一个满足条件的数即可.</p>
<p>我们回到它的树形态上,如果我们定义$\cfrac { 1  } { 1  } $为这棵二叉搜索树的根,那么每个有理数显然都可以表示为从根到它的一个$LR $序列,表示从根向下搜索时每一步向左走还是向右走.特别地,我们定义根的序列为$I $.</p>
<p>不难发现,通过这样的操作,我们将每一个非负有理数都对应到了一个$LR $序列.</p>
<p>那么我们来考虑第一个问题:已知$LR $序列如何求这个数.</p>
<p>我们可以设当前点是$x $,且它由$y $和$z $生成,其中$y &lt; x &lt; z $,那么不难发现它的右儿子由$x $和$z $生成,左儿子由$y $和$x $生成.</p>
<p>那么我们显然可以使用记录$y $和$z $的方式,反复迭代求得答案.注意$x $是可以通过$y $和$z $求得的,因此没有必要存储.</p>
<p>而这一过程可以简化为矩阵运算:</p>
<p>我们令$y = \cfrac { m  } { n  } $,$z = \cfrac { m ‘  } { n ‘  } $,$S = \begin{bmatrix}n &amp; n ‘ \ m &amp; m ‘ \end{bmatrix} $,$f ( S ) = \cfrac { m + m ‘  } { n + n ‘  } $.</p>
<p>那么不难发现它的每一次操作只需右乘一个变换矩阵即可.</p>
<p>其中:$L = \begin{bmatrix}1 &amp; 1 \ 0 &amp; 1 \end{bmatrix} , R = \begin{bmatrix}1 &amp; 0 \ 1 &amp; 1 \end{bmatrix} $.</p>
<p>使用数学归纳不难证明:</p>
<p>$L ^k = \begin{bmatrix}1 &amp; k \ 0 &amp; 1 \end{bmatrix} , R ^k = \begin{bmatrix}1 &amp; 0 \ k &amp; 1 \end{bmatrix} $.</p>
<p>至于已知数字求它的序列表示,首先可以直接在树上搜索.</p>
<p>而如果要脱离树,我们仍然可以回到矩阵上,意识到$f ( RS ) = f ( S ) + 1 $,再加上关于根中心对称两点互为倒数的性质,我们可以推导出以下法则:</p>
<p>如果$m &gt; n $,那么$f ( RS ) = \cfrac { m  } { n  } \Leftrightarrow f ( S ) = \cfrac { m - n  } { n  } $.</p>
<p>如果$m &lt; n $,那么$f ( LS ) = \cfrac { m  } { n  } \Leftrightarrow f ( S ) = \cfrac { m  } { n - m  } $.</p>
<p>借助这一点,我们就可以求一个数的$LR $序列表示了.</p>
<p>在某些情形下,这种表示可以解决二进制下某些分数无法精确表示的问题.</p>
<h4><span id="升幂引理">升幂引理</span></h4><h5><span id="形式一">形式一</span></h5><p>对于素数$p $,$p \nmid x , p \nmid y $,对于满足$\gcd ( n , p ) = 1 $的$n $:</p>
<ol>
<li><p>若$p | ( x - y ) $,则$v _p ( x ^n - y ^n ) = v _p ( x - y ) $.</p>
</li>
<li><p>若$p | ( x + y ) $,$n $是奇数,则$v _p ( x ^n + y ^n ) = v _p ( x + y ) $.</p>
</li>
</ol>
<p>考虑(1)的证明,由于$p | ( x - y ) , x \equiv y \pmod { p  } $,因此$\sum _{ k = 0  } ^{ n - 1  } x ^k y ^{ n - 1 - k  } \equiv nx ^{ n - 1  } \ne 0 \pmod { p  } $.有次方差公式,显然.</p>
<p>(2)类似.</p>
<h5><span id="形式二">形式二</span></h5><p>对于奇素数$p $,$p \nmid x , p \nmid y $:</p>
<ol>
<li><p>若$p | ( x - y ) $,则$v _p ( x ^n - y ^n ) = v _p ( x - y ) + v _p ( n ) $.</p>
</li>
<li><p>若$p | ( x + y ) $,$n $是奇数,则$v _p ( x ^n + y ^n ) = v _p ( x + y ) + v _p ( n ) $.</p>
</li>
</ol>
<p>和形式一的证明完全类似.</p>
<h3><span id="同余">同余</span></h3><p>如果$a \mod m = b \mod m $,我们称$a $和$b $关于模$m $同余,记作$a \equiv b ( \mod m ) $.</p>
<p>根据同余的定义,若$a , b , c , d , k \in \mathbb { Z  } $,$n , m \in \mathbb { N _+  } $,我们有以下性质:</p>
<ol>
<li><p>$a \equiv b \pmod { m  } \Leftrightarrow a - b = km $.</p>
</li>
<li><p>$a \equiv b \pmod { m  } \land c \equiv d \pmod { m  } \Rightarrow a + c \equiv b + d \pmod { m  } $.</p>
</li>
<li><p>$a \equiv b \pmod { m  } \land c \equiv d \pmod { m  } \Rightarrow ac \equiv bd \pmod { m  } $.</p>
</li>
<li><p>$a \equiv b \pmod { m  } \Rightarrow a ^k \equiv b ^k \pmod { m  } $.</p>
</li>
<li><p>$ad \equiv bd \pmod { m  } \Leftrightarrow a \equiv b \pmod { m  } , m \bot d $.</p>
</li>
<li><p>$ad \equiv bd \pmod { md  } \Leftrightarrow a \equiv b \pmod { m  } , d \ne 0 $.</p>
</li>
<li><p>$ad \equiv bd \pmod { m  } \Leftrightarrow a \equiv b \pmod { \cfrac { m  } { \gcd ( m , d )  }  } $.</p>
</li>
<li><p>$a \equiv b \pmod { md  } \Rightarrow a \equiv b \pmod { m  } , d \ne 0 $.</p>
</li>
<li><p>$a \equiv b \pmod { m  } \land a \equiv b \pmod { n  } \Leftrightarrow a \equiv b \pmod { lcm ( n , m )  } $.</p>
</li>
</ol>
<p>我们考虑第五条的证明:由于$m \bot d $,则根据扩展欧几里得算法,可以求得一个数$d ‘ $满足$dd ‘ + mm ‘ = 1 $,也就是$dd ‘ \equiv 1 ( \mod m ) $,那么如果我们有$ad \equiv bd ( \mod m ) $,只需要两边同时乘以$d ‘ $就可以得到右边.值得一提的是,我们通常称$d ‘ $是$d $在模$m $意义下的逆元,记作$inv ( d , m ) $或$d ^{ - 1  } $.</p>
<p>逆元有一种线性预处理的求法:</p>
<p>考虑$1 \leq i \leq n $,设$p = ki + r $,则有$ki + r \equiv 0 ( \mod p ) $,则有$kr ^{ - 1  } + i ^{ - 1  } \equiv 0 ( \mod p ) $.</p>
<p>于是有$i ^{ - 1  } \equiv - kr ^{ - 1  } ( \mod p ) $,即$i ^{ - 1  } \equiv - \lfloor \cfrac { p  } { i  } \rfloor \times r ^{ - 1  } ( \mod p ) $.</p>
<p>现在,我们给出一个结论:数列$0 \mod m , n \mod m , 2 n \mod m , . . . , ( m - 1 ) n \mod m $在排序去重后恰好为数列$0 , d , 2 d , . . . , m - d $,$d = \gcd ( n , m ) $,而且其中每个数字在原数列中恰好出现了$d $次.</p>
<p>恰好出现$d $次是好证明的:考虑$jn \equiv kn ( \mod m ) $可以推导出$j \equiv k ( \mod \cfrac { m  } { d  } ) , d = \gcd ( n , m ) $,则显然这些数是一个序列复制$d $次得到的.</p>
<p>由上,我们要证明$kn \mod m $一定是$d $的倍数.不难发现$kn \mod m = dk \cfrac { n  } { d  } ( \mod \cfrac { m  } { d  } d ) = d ( \cfrac { kn  } { d  } \mod \cfrac { m  } { d  } ) $.</p>
<p>接下来,不妨假设$n \bot m $,并在此条件下证明$0 \mod m , n \mod m , 2 n \mod m , . . . , ( m - 1 ) n \mod m $两两不同即可.而由于$n \bot m $,则$kn \equiv jn ( \mod m ) $的充分必要条件是$k \equiv j ( \mod m ) $,因此它们显然两两不同.</p>
<h5><span id="example具体数学431">Example(《具体数学》4.31)</span></h5><p>$n $进制下,各位数字之和是$m $的倍数,则这个数是$m $的倍数的充分必要条件是?</p>
<p>令$a _i $表示这个数字在$n $进制下的第$i $位,则这条性质也就是:</p>
<script type="math/tex; mode=display">
\sum _{ i = 0  } a _i n ^i \equiv 0 \pmod { m  } \Leftrightarrow \sum _{ i = 0  } a _i \equiv 0 \pmod { m  }</script><p>不难发现,当$n \equiv 1 \pmod { m  } $时,满足该性质.</p>
<h4><span id="威尔逊定理">威尔逊定理</span></h4><p>-1(\mod p)&amp;p\in prime\\</p>
<p>2(\mod p)&amp;p=4\\</p>
<p>0(\mod p)&amp;other</p>
<p>\end{cases}</p>
<p>证明:</p>
<p>当$p $为质数时，考虑对于$a $和$b = a ^{ - 1  } ( \mod p ) $,若$a = b $,此时可证明$a = 1 $或$a = p - 1 $(需要用到下面独立剩余知识).</p>
<p>如果$a \ne b $那么一定可以在$[ 1 , p - 1 ] $找到一对数,它们相乘为$1 $.原因是若$a _1 \ne a _2 $,那么$a _1 ^{ - 1  } \ne a _2 ^{ - 1  } $.</p>
<p>若$p $不是质数,则设$p = ab $,当$a \ne b $时,由于$a , b \leq p $,因此$( p - 1 ) ! $一定是$p $的倍数.</p>
<p>若$a = b $,除非$p = 4 $,不然一定能在$[ 1 , p - 1 ] $里找到$a $和$2 a $,此时$( p - 1 ) ! $也是$p $的倍数.</p>
<p>另外,当$p $是奇质数的时候,威尔逊定理可以写成如下形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ k = 1  } ^{ \frac { p - 1  } { 2  }  } k ( p - k ) & \equiv - 1 \pmod { p  } \\
\prod _{ k = 1  } ^{ \frac { p - 1  } { 2  }  } - k ^2 & \equiv - 1 \pmod { p  } \\
( - 1 ) ^{ \frac { p - 1  } { 2  }  } ( ( \cfrac { p - 1  } { 2  } ) ! ) ^2 & \equiv - 1 \pmod { p  } 
\end{aligned}</script><p>另外,通过以上推导过程,不难发现威尔逊定理还可以写成:</p>
<script type="math/tex; mode=display">
( p - 2 ) ! \equiv \begin{cases}
1 ( \mod p ) & p \in prime \\
2 ( \mod p ) & p = 4 \\
0 ( \mod p ) & other 
\end{cases}</script><h5><span id="example1具体数学448">Example1(《具体数学》4.48)</span></h5><p>求$\prod _{ 1 \leq n &lt; m , n \bot m  } n \pmod { m  } \ $.</p>
<p>首先,类似威尔逊定理的推导,不难注意到这个式子也就等价于:</p>
<script type="math/tex; mode=display">
\prod _{ 1 \leq n < m , n ^2 \equiv 1 \pmod { m  }  } n \pmod { m  }</script><p>首先考虑满足$n ^2 \equiv 1 \pmod { m  } $的$n $满足什么性质,根据我们在二次剩余的推导,先考虑$2 \nmid m $的情况,此时我们将$m $分解为了若干个形如$p ^k $的质因数的乘积,对于每个$p ^k $作为模数时,$n $有两个解:$1 $和$p ^k - 1 $.</p>
<p>当$m = p ^k $的时候,显然答案就是$- 1 $.</p>
<p>不然,由于此时有很多解,我们考虑设答案为$ans $并对于每个$p ^k $求出$ans \pmod { p ^k  } $的答案,再使用中国剩余定理合并.不难发现只要$m $有多个不同的质因子,那么中国剩余定理合并的时候,一定会有偶数个$n $(事实上,假设$m $有$a $个质因子,那么有$2 ^{ a - 1  } $个这样的$n $)满足$n \equiv - 1 \pmod { p ^k  } $,也有同样数目的$n $满足$n \equiv 1 \pmod { p ^k  } $.那么此时的$ans \equiv 1 \pmod { p ^k  } $.多次合并后的$ans $显然还是$1 $.</p>
<p>至于$2 \mid m $的情况并没有麻烦很多,当$2 \mid m \land 4 \nmid m $,显然有没有这个$2 $作为质因子都一样.当$4 \mid m \land 8 \nmid m $,这个质因子和其它质因子并没有多少区别.</p>
<p>于是我们最后得到结论:</p>
<script type="math/tex; mode=display">
\prod _{ 1 \leq n < m , n \bot m  } n \equiv \begin{cases}
- 1 \pmod { m  } & m = p ^k \lor m = 2 p ^k \lor m = 4 , p \in prime \land p \ne 2 \\
1 \pmod { m  } & other \\

\end{cases}</script><h5><span id="example2具体数学440">Example2(《具体数学》4.40)</span></h5><p>如果我们设$n = \sum _{ k \geq 0  } a _k p ^k $,求证:$\cfrac { n !  } { p ^{ \varepsilon _p ( n ! )  }  } = ( - 1 ) ^{ \varepsilon _p ( n ! )  } \prod _{ k \geq 0  } a _k ! \pmod { p  } $.</p>
<p>证明考虑数学归纳:如果$n \rightarrow n + 1 $的过程中没有发生进位,那么该公式显然成立.</p>
<p>如果发生进位了,假设进到了第$k $位,第$k $位原本是$w $,现在是$w + 1 $,那么要证其对于$n + 1 $成立,即证明下式成立:</p>
<script type="math/tex; mode=display">
\cfrac { n ! ( n + 1 )  } { p ^{ \varepsilon _p ( n ! ) + k  }  } = ( - 1 ) ^{ \varepsilon _p ( n ! ) + k  } ( w + 1 ) ! \prod _{ i \geq k + 1  } a _i ! \pmod { p  }</script><p>考虑$( p - 1 ) \equiv - 1 \pmod { p  } $,于是上式也即:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { n ! ( n + 1 )  } { p ^{ \varepsilon _p ( n ! ) + k  }  } & = ( - 1 ) ^{ \varepsilon _p ( n ! )  } ( w + 1 ) \prod _{ i \geq 0  } a _i ! \pmod { p  } \\
\cfrac { n !  } { p ^{ \varepsilon _p ( n ! )  }  } \cfrac { n + 1  } { p ^k  } & = ( - 1 ) ^{ \varepsilon _p ( n ! )  } ( w + 1 ) \prod _{ i \geq 0  } a _i ! \pmod { p  } \\
\cfrac { n !  } { p ^{ \varepsilon _p ( n ! )  }  } ( w + 1 ) & = ( - 1 ) ^{ \varepsilon _p ( n ! )  } ( w + 1 ) \prod _{ i \geq 0  } a _i ! \pmod { p  } 
\end{aligned}</script><p>于是化到$n $的情况,于是$n + 1 $时该式子成立.</p>
<h5><span id="example3具体数学453">Example3(《具体数学》4.53)</span></h5><p>求所有满足$n | \lceil \cfrac { ( n - 1 ) !  } { n + 1  } \rceil $的整数$n $.</p>
<p>首先这个形式看上去就是威尔逊定理的形式,所以第一步我们先暴力验证$n \in [ 1 , 4 ] $的答案,注意到此时当且仅当$n = 1 $时成立.接下来我们尝试找到$n \geq 5 $时的解.</p>
<p>考虑当$n + 1 \in prime $时,根据威尔逊定理,要求化为:$n \mid \cfrac { ( n - 1 ) ! + n  } { n + 1  } $.注意到此时$n $一定不是质数,又因为$n \bot ( n + 1 ) $,于是要求化为$n \mid { ( n - 1 ) ! + n  } $,显然成立.</p>
<p>当$n + 1 \notin prime $时,要求则化为$n \mid \cfrac { ( n - 1 ) !  } { n + 1  } $.当$n \in prime $时,显然不成立.反之显然成立.</p>
<p>于是要么$n = 1 $,要么$n \geq 5 \land n \notin prime $.</p>
<h4><span id="费马小定理">费马小定理</span></h4><p>$n ^{ p - 1  } \equiv 1 ( \mod p ) , n \bot p , p \in prime $.</p>
<p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ k = 1  } ^{ p - 1  } kn & \equiv \prod _{ k = 1  } ^{ p - 1  } ( kn \mod p ) ( \mod p ) \\
n ^{ p - 1  } ( p - 1 ) ! & \equiv ( p - 1 ) ! ( \mod p ) 
\end{aligned}</script><p>根据威尔逊定理,显然可以推得费马小定理.</p>
<p>根据费马小定理,我们可以考虑证明一个结论:$n ^{ p ^k  } \equiv n ^{ p ^{ k - 1  }  } ( \mod p ^k ) $.</p>
<p>由于$n ^{ p - 1  } \equiv 1 ( \mod p ) $,那么我们有$n ^p \equiv n ( \mod p ) $,也即$\exists q \in \mathbb { Z  } $满足$n ^p = n + pq $,不断两边取$p $次方即可得到上述结论.</p>
<p>另外,费马小定理还可以如下证明:</p>
<p>考虑证明$n ^p \equiv n \pmod { p  } $,也就是要证明$( \sum _{ i = 1  } ^n 1 ) ^p \equiv n \pmod { p  } $.</p>
<p>注意到根据多项式定理,$( \sum _{ i = 1  } ^n 1 ) ^p = \sum _{ \sum a = p  } \cfrac { p !  } { a _1 ! . . . a _n !  } $.而如果$\max \{ a \} \ne p $,则后面的式子在$\mod p $意义下显然为$0 $,不然,考虑$\max \{ a \} = p $的序列一共会出现$n $次且每次对答案的贡献都是$1 $,自然有$n ^p \equiv n ( \mod p ) $.</p>
<h5><span id="example1具体数学441">Example1(《具体数学》4.41)</span></h5><p>求证:如果质数$p $满足$p \equiv 3 \pmod { 4  } $,则不存在整数$n $满足$p | ( n ^2 + 1 ) $;如果其满足$p \equiv 1 \pmod { 4  } $,则一定存在一个整数$n $满足条件.</p>
<p>先考虑证明前半部分,如果存在这样一个整数$n $,考虑$p | ( n ^2 + 1 ) $也就等价于$n ^2 \equiv - 1 \pmod { p  } $,则$n ^4 \equiv 1 \pmod { p  } $.显然$p \bot n $,根据费马小定理,我们有$n ^{ p - 1  } \equiv 1 \pmod { p  } $,也就有$n ^{ p + 1  } \equiv - 1 \pmod { p  } $.</p>
<p>而由于$p \equiv 3 \pmod { 4  } $,所以$4 | ( p + 1 ) $,所以$n ^{ p + 1  } \equiv 1 \pmod { p  } $,不符,因此一定不存在.</p>
<p>反之,考虑威尔逊定理的变形$\prod _{ k = 1  } ^{ \frac { p - 1  } { 2  }  } - k ^2 \equiv - 1 \pmod { p  } \ $.由于$p - 1 \equiv 0 \pmod { 4  } $,所以这个式子也就等价于$\prod _{ k = 1  } ^{ \frac { p - 1  } { 2  }  } k ^2 \equiv - 1 \pmod { p  } $,也就是$( ( \cfrac { p - 1  } { 2  } ) ! ) ^2 \equiv - 1 \pmod { p  } $,这就是一个解.</p>
<h5><span id="example2具体数学446">Example2(《具体数学》4.46)</span></h5><p>求证:如果$n &gt; 1 $,则$2 ^n \ne 1 \pmod { n  } $.</p>
<p>如果$n $是质数,根据费马小定理,显然得证.</p>
<p>不然,设$n = pq $,且$p $是$n $的最小质因子,若$2 ^{ n  } \equiv 1 \pmod { n  } $,则$2 ^n \equiv 1 \pmod { p  } $.</p>
<p>若$p = 2 $,显然不成立.不然,有$2 ^{ p - 1  } \equiv 1 \pmod { p  } $,由于$( p - 1 ) \bot n $,则$2 ^{ \gcd ( p - 1 , n )  } \equiv 2 \equiv 1 \pmod { p  } $,显然不成立.</p>
<p>另外,上面的过程显然可以推广为:</p>
<p>如果$n &gt; 1 $,则对于任意质数$p $,$p ^n \ne 1 \pmod { n  } $.</p>
<h4><span id="中国剩余定理crt">中国剩余定理(crt)</span></h4><p>对于方程组$x \equiv a _i ( \mod m _i ) $,其中$m _i $两两互质,求$x $.</p>
<p>令$m = \prod ^k _{ i = 1  } m _i $,设$M _i = \cfrac { m  } { m _i  } $,$N _i $是$M _i $在$\mod m _i $意义下逆元.</p>
<p>则$x \equiv \sum ^k _{ i = 1  } M _i N _i a _i ( \mod m ) $.</p>
<p>中国剩余定理的证明类似拉格朗日插值:</p>
<p>由于$x $在$\mod m _i $意义下,$\sum $中枚举的所有不等于$i $的项都会成$0 $，等于$i $的项会成$a _i $.</p>
<p>考虑每次合并两项，显然有:$a = a _1 + ( a _2 - a _1 ) \times m _1 \times inv ( m _1 , m _2 ) $,$m = m _1 m _2 $.</p>
<p>中国剩余定理的本质是一个环同构$\varphi : \mathbb { Z  } / m _1 m _2 \mathbb { Z  } \rightarrow ( \mathbb { Z  } / m _1 \mathbb { Z  } ) \times ( \mathbb { Z  } / m _2 \mathbb { Z  } ) $,当$m _1 \bot m _2 $.</p>
<p>由于映射两边都是大小相同的有限环,所以只需证明它是单射就行.而容易发现$\ker \varphi = \{ [ 1 ] \} $.</p>
<p>下面的扩展中国剩余定理亦然同理,用一下裴蜀定理证明映射两边的有限环大小相等,再注意到$| \ker \varphi | = 1 $.</p>
<h4><span id="扩展中国剩余定理excrt">扩展中国剩余定理(excrt)</span></h4><p>对于方程组$x \equiv a _i ( \mod m _i ) $,若$m _i $两两不互质.</p>
<p>我们考虑每次合并两个方程:</p>
<p>x\equiv a_1(\mod m_1)\\</p>
<p>x\equiv a_2(\mod m_2)</p>
<p>\end{cases}</p>
<p>那这个方程组等价于:</p>
<p>x=k_1m_1+a_1\\</p>
<p>x=k_2m_2+a_2</p>
<p>\end{cases}</p>
<p>合并上下方程,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k _1 m _1 + a _1 & = k _2 m _2 + a _2 \\
a _2 - a _1 & = k _1 m _1 - k _2 m _2 
\end{aligned}</script><p>设$g = \gcd ( m _1 , m _2 ) $,显然若$g \nmid ( a _2 - a _1 ) $,方程无解.</p>
<p>不然,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { a _2 - a _1  } { g  } & = k _1 \frac { m _1  } { g  } - k _2 \frac { m _2  } { g  } \\
k _1 \frac { m _1  } { g  } & = k _2 \frac { m _2  } { g  } + \frac { a _2 - a _1  } { g  } \\
k _1 \frac { m _1  } { g  } & \equiv \frac { a _2 - a _1  } { g  } ( \mod \frac { m _2  } { g  } ) \\

\end{aligned}</script><p>令$inv ( a , p ) $表示$a $在$\mod p $意义下的逆元,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k _1 & \equiv inv ( \frac { m _1  } { g  } , \frac { m _2  } { g  } ) \frac { a _2 - a _1  } { g  } ( \mod \frac { m _2  } { g  } ) \\
k _1 & = inv ( \frac { m _1  } { g  } , \frac { m _2  } { g  } ) \frac { a _2 - a _1  } { g  } + k _3 \frac { m _2  } { g  } \\

\end{aligned}</script><p>带回第一个方程:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x & = m _1 ( inv ( \frac { m _1  } { g  } , \frac { m _2  } { g  } ) \frac { a _2 - a _1  } { g  } + k _3 \frac { m _2  } { g  } ) + a _1 \\
x & \equiv m _1 inv ( \frac { m _1  } { g  } , \frac { m _2  } { g  } ) \frac { a _2 - a _1  } { g  } + a _1 ( \mod \frac { m _1 m _2  } { g  } ) 
\end{aligned}</script><h5><span id="example1noi2018屠龙勇士">Example1([NOI2018]屠龙勇士)</span></h5><p>考虑拿个set之类的维护,然后问题转化为求:</p>
<script type="math/tex; mode=display">
\begin{cases}
b _1 x \equiv a _1 ( \mod m _1 ) \\
b _2 x \equiv a _2 ( \mod m _2 ) \\
. . . \\
b _n x \equiv a _n ( \mod m _n ) 
\end{cases}</script><p>的一个$x $的最小解.</p>
<p>对于一个式子$b _i x \equiv a _i \pmod { m _i  } $,设$g = \gcd ( b _i , m _i ) $,那么若$g \nmid a _i $,显然无解;不然,我们有:$\cfrac { b _i  } { g  } x \equiv \cfrac { a _i  } { g  } \pmod { \cfrac { m _i  } { g  }  } $,而$\cfrac { b _i  } { g  } \bot \cfrac { m _i  } { g  } $,可以求逆元.</p>
<h5><span id="example2cf571egeometric-progressions">Example2([CF571E]Geometric Progressions)</span></h5><p>首先分解质因子,这样问题转化为判断等差数列中是否出现.我们随便挑一个数列,假设这个数列中第$x $个数字是答案,显然最小化$x $即可.</p>
<p>但是直接对所有质因子做excrt复杂度不可接受.我们考虑如果对于质因子$p $,$\exists i , j \in [ 1 , n ] , i \ne j $有$p | b _j , p \nmid a _i , p \nmid b _i $,显然无解.如果有$p | b _j , p | a _i , p \nmid b _i $,显然要么无解,要么有唯一解,而且可以快速求出唯一解是谁,直接验证就行.</p>
<p>这样,我们就保证了所有需要做excrt的质因子必然全部出现,容易发现这样的质因子数量很少.</p>
<h4><span id="二次剩余">二次剩余</span></h4><p>求方程$x ^2 = k ( \mod m ) $的解.</p>
<p>我们先考虑一个特殊情况:$k = 1 $,$m = p ^k , p \in prime $.</p>
<p>那么也就相当于求方程$( x - 1 ) ( x + 1 ) \equiv 0 ( \mod p ^k ) $.</p>
<p>如果$p &gt; 2 $,那么显然$x - 1 $和$x + 1 $只有一个能被$p ^k $整除,所以有$x = \pm 1 $.</p>
<p>如果$p = 2 $,那么显然$x - 1 $和$x + 1 $有一个能被$2 $整除但不能被$4 $整除,另一个能被$2 ^{ k - 1  } $整除,如果$k = 1 $时,显然只有一个解.当$k = 2 $时,同上.反之,有$x = \pm 1 $或$x = 2 ^{ k - 1  } \pm 1 $.考虑一个性质:$( 2 k + 1 ) ^2 \equiv 1 ( \mod 8 ) $.</p>
<p>那么如果:$k = 1 , m \in \mathbb { N _+  } $,也是一样的.先把$m $作质因数分解,然后再用中国剩余定理合并,那么显然不同质数的解会累乘到总的解上,若$m $有$r $个不同大于$2 $的质因子,总的解的个数是$2 ^r $.而如果考虑$p = 2 $的情况,$m $有$r $个不同的质因子,则解的个数为$2 ^{ r + [ 8 | m ] + [ 4 | m ] - [ 2 | m ]  } $.</p>
<p>下面开始讲正经的二次剩余.</p>
<p>我们称$a $是$p $的二次剩余,当且仅当$\exists b , b ^2 \equiv a \pmod { p  } $并且$a \ne 0 \pmod { p  } $,这里的$p $是奇素数,如果$a $不是$p $的倍数且$\nexists b , b ^2 \equiv a \pmod { p  } $,则称为二次非剩余.我们引入勒让德符号来表示这个东西:</p>
<script type="math/tex; mode=display">
\left ( \frac { a  } { p  } \right ) = \begin{cases}
1 & a 是 二 次 剩 余 \\
0 & a \equiv 0 \pmod { p  } \\
- 1 & a 为 二 次 非 剩 余 
\end{cases}</script><p>那么这玩意怎么求呢?我们有欧拉判别准则:</p>
<script type="math/tex; mode=display">
\left ( \frac { a  } { p  } \right ) \equiv a ^{ \frac { p - 1  } { 2  }  } \pmod { p  }</script><p>先证明个引理:若$g $为$\bmod p $意义下的原根,且$a \equiv g ^k $,那么$x ^2 \equiv a \pmod { p  } $有解的充要条件是$k $是偶数.</p>
<p>充分性显然,而必要性,我们考虑费马小定理:$g ^{ p - 1  } \equiv 1 \pmod { p  } $,而$p - 1 $是偶数,因此无论如何奇偶性都不会变.</p>
<p>接下来证明欧拉判别准则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ^{ p - 1  } & \equiv 1 \pmod { p  } \\
g ^{ p - 1  } - 1 & \equiv 0 \pmod { p  } \\
( g ^{ \frac { p - 1  } { 2  }  } + 1 ) ( g ^{ \frac { p - 1  } { 2  }  } - 1 ) & \equiv 0 \pmod { p  } \\
g ^{ \frac { p - 1  } { 2  }  } & \equiv - 1 \pmod { p  } \\
a ^{ \frac { p - 1  } { 2  }  } & = ( g ^k ) ^{ \frac { p - 1  } { 2  }  } & = ( g ^{ p - 1  } ) ^{ \frac { k  } { 2  }  } 
\end{aligned}</script><p>于是得证.另外通过这个证明过程,我们可以发现$[ 1 , p - 1 ] $中有正好一半的数是二次剩余,我们还能得知$x ^2 \equiv a \pmod { p  } $的解的数量是$\left ( \frac { a  } { p  } \right ) + 1 \ $.</p>
<h5><span id="example1cf1091gnew-year-and-the-factorisation-collaboration">Example1([CF1091G]New Year and the Factorisation Collaboration)</span></h5><p>考虑随机一个$x $,令$x ‘ = \sqrt { x ^2  } \pmod { n  } $,如果$x ‘ = x $则放弃这次询问,不然自然有$( x ‘ - x ) ( x ‘ + x ) \equiv 0 \pmod { n  } $.</p>
<p>$\forall p | n , p \in prime $,注意到一定满足$p | ( x ‘ - x ) $或$p | ( x ‘ + x ) $,我们可以多做几次,可以理解为这样将$n $随机分割了.</p>
<h5><span id="example2qoj5021">Example2(qoj5021)</span></h5><p>整个题就强调一个字:双射!</p>
<p>先把模数质因数分解.</p>
<p>从头开始看,这种多元组计数肯定要一点一点确定,我们考虑固定$( a , a ‘ ) $求解$( b , b ‘ ) $,这个时候发现只要$( a , a ‘ ) $不全为$0 $,那么就有$p $组$( b , b ‘ ) $满足条件,这个可以通过移项求逆元发现.发现这个全为$0 $的条件很烦,我们先把它处理掉.</p>
<p>显然只有$r = 0 $会出现这种情况,讨论一下$( a , a ‘ ) $全为$0 $或$( b , b ‘ ) $全为$0 $的情况,简单分类讨论可以得到共有$2 p ^3 + p ^2 - 2 p $种方案.</p>
<p>好了,困难的部分被我们解决了,不过这样我们需要多讨论一下$r $是否等于$0 $,不过问题不大.</p>
<p>先考虑$r = 0 $的情况:</p>
<p>注意到此时固定$( a , a ‘ ) $会有$p - 1 $组(有一组全$0 $)$( b , b ‘ ) $满足条件,此时有方程$\begin{cases}ac + a ‘ c ‘ \equiv 0 \pmod { p  } \ bc + b ‘ c ‘ \equiv 0 \pmod { p  } \end{cases} $.显然若$( b , b ‘ ) \equiv k ( a , a ‘ ) $,那么该方程有$p $组解,不然只有一组解.而前者相当于$( a , a ‘ ) $满足$ka ^2 + ka ‘ ^2 \equiv 0 $,我们设$C _k $是方程$a ^2 + a ‘ ^2 \equiv k \pmod { p  } $的解的数量,把上面的全部加起来,答案是:</p>
<script type="math/tex; mode=display">
( C _0 - 1 ) ( p - 1 ) p + ( ( p ^2 - 1 ) ( p - 1 ) - ( C _0 - 1 ) ( p - 1 ) )</script><p>化简一下得到:$( C _0 - 1 ) ( p - 1 ) ^2 + p ^3 - p ^2 - p + 1 $.</p>
<p>再考虑$r \ne 0 $的情况:</p>
<p>注意到此时不可能有全为$0 $的二元组了.所以固定$( a , a ‘ ) $的话,$( b , b ‘ ) $共有$p $组解,此时有方程$\begin{cases}ac + a ‘ c ‘ \equiv r \pmod { p  } \ bc + b ‘ c ‘ \equiv r \pmod { p  } \end{cases} $.</p>
<p>若$( b , b ‘ ) \equiv k ( a , a ‘ ) $,显然当$k = 1 $时有$p $组解,否则无解,此时$a ^2 + a ‘ ^2 \equiv r \pmod { p  } $.</p>
<p>不然有唯一解.</p>
<p>而$( b , b ‘ ) = k ( a , a ‘ ) $的方案有多少呢,显然是$\sum _{ k = 1  } ^{ p - 1  } C _{ \frac { r  } { k  }  } = \sum _{ k = 1  } ^{ p - 1  } C _k = p ^2 - C _0 $,这里用到了这篇题解的第一个双射,$[ 1 , p - 1 ] / k \mapsto [ 1 , p - 1 ] $.</p>
<p>于是这里的答案就是:</p>
<script type="math/tex; mode=display">
C _r p + ( ( p ^2 - 1 ) p - ( p ^2 - C _0 ) )</script><p>化简一下得到$p ^3 - p ^2 - p + C _0 + C _r p $.</p>
<p>现在的问题是如何求$C _0 , C _r $.</p>
<p>先来技术总结一下,这种多元组计数通常要确定一些数字,然后对另一些数字进行计数,如果确定的那些数字不能进行枚举,那就得进行一些别的操作来在不同的情况下判断数量.</p>
<p>那么$C _r $怎么求呢?考虑$x ^2 \equiv a \pmod { p  } $的解数为$\left ( \frac { a  } { p  } \right ) + 1 $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C _r & = \sum _{ i = 0  } ^{ p - 1  } ( \left ( \frac { i  } { p  } \right ) + 1 ) ( \left ( \frac { r - i  } { p  } \right ) + 1 ) \\
& = \sum _{ i = 0  } ^{ p - 1  } \left ( \frac { i ( r - i )  } { p  } \right ) + 2 \sum _{ i = 0  } ^{ p - 1  } \left ( \frac { i  } { p  } \right ) + p \\
& = \sum _{ i = 1  } ^{ p - 1  } \left ( \frac { \frac { r  } { i  } - 1  } { p  } \right ) + p 
\end{aligned}</script><p><del>(这是干啥啊)</del></p>
<p>我们来一步一步分析这个式子是怎么得到的:</p>
<p>首先,第一步仍然是枚举其中一个,然后求另一个.然后将整个式子乘开,做一个双射$r - [ 0 , p - 1 ] \mapsto [ 0 , p - 1 ] $就可以合并其中两项,而至于前两项则是根据欧拉判别准则直接将上指标乘起来合并.然后我们发现$\sum _{ i = 0  } ^{ p - 1  } \left ( \frac { i  } { p  } \right ) = 0 $,因为$[ 0 , p - 1 ] $中一半是$1 $一半是$- 1 $,又可以发现$i = 0 $时显然为$0 $,$x ^2 = i ( r - i ) \Leftrightarrow ( \frac { x  } { i  } ) ^2 = \frac { r  } { i  } - 1 $,做双射$[ 1 , p - 1 ] \times i ^{ - 1  } \mapsto [ 1 , p - 1 ] $.</p>
<p>做到这一步,自然有$C _0 = ( p - 1 ) \left ( \frac { - 1  } { p  } \right ) + p $.</p>
<p>而对于$r \ne 0 $的时候,我们再做双射$r / [ 1 , p - 1 ] \mapsto [ 1 , p - 1 ] $,于是$C _r = \sum _{ i = 0  } ^{ p - 2  } \left ( \frac { i  } { p  } \right ) + p = p - \left ( \frac { - 1  } { p  } \right ) $.</p>
<p>只能说模质数意义下的加法乘法减法以及不含$0 $的乘法都是群,而且所有运算都是双射,很牛逼,计数题直接起飞.</p>
<p>不过这题需要特别判断一下$p = 2 $的情况,也容易,暴力就行.</p>
<h5><span id="example3">Example3</span></h5><p>求$2 ^a = 3 ^b + 1 $和$3 ^a = 2 ^b + 1 $的所有解.</p>
<p>先看$2 ^a = 3 ^b + 1 $,显然$( 2 , 1 ) $是一组解.当$y \geq 3 $的时候,显然有$3 ^a + 1 \equiv 0 \pmod { 8  } $,而考虑$3 ^{ 2 k  } \equiv 1 \pmod { 8  } $,这自然不可能.</p>
<p>再看$3 ^a = 2 ^b + 1 $.显然$( 1 , 1 ) $和$( 2 , 3 ) $是两组解.当$b \geq 2 $的时候$3 ^a \equiv 1 \pmod { 4  } $,根据欧拉定理知道$a \in \text { even  } $,令$a = 2 k $.自然有$( 3 ^k - 1 ) ( 3 ^k + 1 ) = 2 ^b $,这是形如$t ( t + 2 ) = 2 ^b $的形式,只有$t = 2 $是一个解.</p>
<h4><span id="bsgs">BSGS</span></h4><p>求$a ^x \equiv b ( \mod p ) $的一组解,其中$p \in prime $且$1 \leq p \leq 10 ^9 $.</p>
<p>直接枚举显然是$O ( p ) $的,非常不合理,考虑如何优化.</p>
<p>求出$s = \lfloor \sqrt { p  } \rfloor $,并求出所有$a ^i $,其中$i \in [ 0 , s - 1 ] $.</p>
<p>若$x \leq s - 1 $.则可以直接判断是否被求出来过.</p>
<p>否则,则将$x = x \mod ( s - 1 ) $,一直操作直到$x \leq s - 1 $.</p>
<h4><span id="exbsgs">exBSGS</span></h4><p>求$a ^x \equiv b ( \mod p ) $的一组解,其中$1 \leq p \leq 10 ^9 $.</p>
<p>设$g = \gcd ( a , p ) $,那么根据膜的性质,原方程即$\frac { a ^x  } { g  } \equiv \frac { b  } { g  } ( \mod \frac { p  } { g  } ) $.</p>
<p>显然若$g \nmid b $并且$b \ne 1 $,方程定无解.(若$b = 1 $,那么$x = 0 $就是一个解)</p>
<p>那么现在的方程就是$a ^{ x - 1  } \frac { a  } { g  } \equiv \frac { b  } { g  } ( \mod \frac { p  } { g  } ) $.</p>
<p>继续进行这个过程,不断求$a $和当前模数的$\gcd $.并将当前模数除以该$\gcd $,这样最后我们得到了方程:</p>
<p>$a ^{ x - k  } \prod _{ i = 1  } ^k \frac { a  } { g _i  } \equiv \frac { b  } { \prod _{ i = 1  } ^k g _i  } ( \mod \frac { p  } { \prod _{ i = 1  } ^k g _i  } ) \ $</p>
<p>不妨设$A = \prod _{ i = 1  } ^k \frac { a  } { g _i  } , B = \frac { b  } { \prod _{ i = 1  } ^k g _i  } , P = \frac { p  } { \prod _{ i = 1  } ^k g _i  } \ $</p>
<p>那么现在方程就是$a ^{ x - k  } \equiv \frac { B  } { A  } \pmod { P  } $,可以使用BSGS求解.</p>
<p>ps：$p = 1 $的时候要特判.</p>
<h4><span id="原根和阶">原根和阶</span></h4><p>阶:找到一个最小的$k $使得$a ^k \equiv 1 ( \mod p ) $,则称$k $是$a $在膜$p $意义下的阶.</p>
<p>原根:如果$a $在膜$p $意义下的阶是$\varphi ( p ) $且$a &lt; p $,则称$a $是$p $的一个原根.</p>
<p>若$m $有原根,则$m $一定是$2 $,$4 $或是$p ^a , 2 p ^a $,其中$p \in prime $且$2 \nmid p $.</p>
<p>由于对于大部分$m $来说,都存在一个很小的原根,所以在实际应用中只需要暴力找就可以了.</p>
<p>根据阶的定义,我们如果要判断一个$a $不是$p $的原根,只需判断是否$\exists i $使得$a ^i \equiv 1 ( \mod p ) $.</p>
<p>而由于$a ^{ \varphi ( p )  } \equiv 1 ( \mod p ) $,因此一定有$i | \varphi ( p ) $,因此只需判断$\varphi ( p ) $的所有因数,复杂度$O ( \sqrt { \varphi ( p )  } ) $.</p>
<p>事实上,只需要判断对于$\varphi ( p ) $的所有质因子$w $,是否有$a ^{ \frac { \varphi ( p )  } { w  }  } \equiv 1 ( \mod p ) $即可,复杂度$O ( \omega ( p ) ) $.</p>
<h5><span id="example1">Example1</span></h5><p>给定$k $,$p $,$a $,求$x ^k \equiv a ( \mod p ) $的所有解,其中$p \in prime $,$1 \leq k \leq 10 ^5 $.</p>
<p>考虑求出$p $的原根$g $,得到$g ^r \equiv a ( \mod p ) $,同时由于$x \equiv g ^y ( \mod p ) $,因此原方程变为:$g ^{ yk  } \equiv g ^r ( \mod p ) $.</p>
<p>于是有:$yk \equiv r ( \mod p - 1 ) $,即可求解.</p>
<h5><span id="example2具体数学447">Example2(《具体数学》4.47)</span></h5><p>证明:如果$\exists n , n ^{ m - 1  } \equiv 1 \pmod { m  } $,且对于所有满足$p | ( m - 1 ) $的$p $都满足$n ^{ \frac { m - 1  } { p  }  } \ne 1 \pmod { m  } $,那么$m $是素数.</p>
<p>首先不难发现,$m \in  prime \Leftrightarrow \varphi ( m ) = m - 1 $.</p>
<p>考虑上面的过程中,不可能存在一个数$k $满足$0 \leq k &lt; m - 1 , n ^k \equiv 1 \pmod { m  } $.因此$\nexists 0 \leq i , j &lt; m , i \ne j , n ^i \equiv n ^j \pmod { m  } $.</p>
<p>根据欧拉定理,$m - 1 = \varphi ( m ) $,因此得证.</p>
<h3><span id="积性函数">积性函数</span></h3><p>若函数$f ( x ) $满足$\forall n , m \in \mathbb { N _+  } , n \bot m $,有$f ( 1 ) = 1 , f ( nm ) = f ( n ) f ( m ) $,则称其为积性函数.若$\forall n , m \in \mathbb { N _+  } $,有$f ( 1 ) = 1 , f ( nm ) = f ( n ) f ( m ) $,则称其为完全积性函数.</p>
<p>若函数$g ( x ) $是积性函数并且有$g ( m ) = \sum _{ d | m  } f ( d ) $,则$f ( x ) $也是积性函数,证明如下:</p>
<p>不妨考虑数学归纳,首先$g ( 1 ) = f ( 1 ) = 1 $.</p>
<p>令$m = m _1 m _2 , m _1 \bot m _2 $,则$g ( m ) = \sum _{ d | m  } f ( d ) = \sum _{ d _1 | m _1  } \sum _{ d _2 | m _2  } f ( d _1 d _2 ) $.由于归纳假设,此时只有$d _1 = m _1 \land d _2 = m _2 $的时候,$f ( d _1 d _2 ) $可能不等于$f ( d _1 ) f ( d _2 ) $.</p>
<p>于是有</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( m ) & = \sum _{ d _1 | m _1  } \sum _{ d _2 | m _2  } f ( d _1 ) f ( d _2 ) - f ( m _1 ) f ( m _2 ) + f ( m _1 m _2 ) \\
& = g ( m _1 m _2 ) - f ( m _1 ) f ( m _2 ) + f ( m _1 m _2 ) 
\end{aligned}</script><p>于是$f ( m _1 ) f ( m _2 ) = f ( m _1 m _2 ) $.</p>
<p>该命题的逆命题也是同样成立的.有一些常见的积性函数,比如:$id ( x ) = x $,$I ( x ) = 1 $,$\varepsilon ( x ) = [ x = 1 ] $.</p>
<h5><span id="example具体数学458">Example(《具体数学》4.58)</span></h5><p>求:$f ( m ) = \sum _{ d | m  } d $是$2 $的整数次幂的充分必要条件.</p>
<p>不难发现$f $是一个积性函数,于是考虑$f ( p ^k ) = 1 + p + p ^2 + . . . + p ^k $.</p>
<p>当$p = 2 $的时候,显然不满足条件.</p>
<p>不然,只有$k $是奇数的时候,$f ( p ^k ) $才是一个偶数.</p>
<p>而此时$f ( p ^k ) = ( 1 + p ) ( 1 + p ^2 + p ^4 + . . . + p ^{ k - 1  } ) = ( 1 + p ) ( 1 + p ^2 ) ( 1 + p ^4 + . . . + p ^{ k - 3  } ) $.其是$2 $的整数次幂的一个必要条件是$p $是一个梅森素数,而且不难发现只有当$k = 1 $的时候才满足条件.</p>
<p>于是充分必要条件是:$m $是若干个不同的梅森素数的乘积.</p>
<h4><span id="狄利克雷卷积">狄利克雷卷积</span></h4><p>$f * g = \sum _{ d | n  } { f ( d ) g ( \cfrac { n  } { d  } )  } $.</p>
<p>不难证明狄利克雷卷积满足:</p>
<ol>
<li><p>交换律:$f <em> g = g </em> f $.</p>
</li>
<li><p>结合律:$f <em> ( g </em> h ) = ( f <em> g ) </em> h $.</p>
</li>
<li><p>分配律:$f <em> ( g + h ) = f </em> g + f * h $.</p>
</li>
<li><p>若$f , g $是积性函数,则$f * g $也是积性函数.</p>
</li>
</ol>
<p>考虑第四条的证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f * g ( nm ) & = \sum _{ d | ( nm )  } f ( d ) g ( \cfrac { n  } { d  } ) \\
& = \sum _{ c | n  } \sum _{ d | m  } f ( cd ) g ( \cfrac { nm  } { cd  } ) \\
& = \sum _{ c | n  } \sum _{ d | m  } f ( c ) f ( d ) g ( \cfrac { n  } { c  } ) g ( \cfrac { m  } { d  } ) \\
& = ( f * g ( n ) ) \times ( f * g ( m ) ) 
\end{aligned}</script><ol>
<li>$\forall f , f ( 1 ) \ne 0 $,$\exists f ^{ - 1  } $,$f * f ^{ - 1  } = \epsilon $.</li>
</ol>
<p>构造$g ( x ) $满足$f ( 1 ) g ( x ) = \epsilon ( x ) - \sum _{ d | x , d \ne 1  } f ( d ) g ( \frac { x  } { d  } ) $显然就是满足条件的.</p>
<ol>
<li>积性函数的逆元也是积性函数.</li>
</ol>
<h4><span id="欧拉函数">欧拉函数</span></h4><p>定义欧拉函数$\varphi ( m ) $为所有满足$1 \leq n \leq m \land n \perp m $的$n $的个数.</p>
<p>令$m = m _1 m _2 $,其中$m _1 \bot m _2 $.由于若$n \bot m _1 , n \bot m _2 $,显然有$( n \mod m _1 ) \bot m _1 $且$( n \mod m _2 ) \bot m _2 $,则根据中国剩余定理,不难有$\varphi ( m ) = \varphi ( m _1 ) \varphi ( m _2 ) $,也即$\varphi ( x ) $是积性函数.</p>
<p>若$n = \prod ^{ k  } _{ i = 1  } p _i ^{ a _i  } $,则:</p>
<p>$\varphi ( n ) = \prod ^k _{ i = 1  } \varphi ( p _i ^{ a _i  } ) = \prod ^k _{ i = 1  } { p _i ^{ a _i  } - p _i ^{ a _i - 1  }  } = \prod ^k _{ i = 1  } { p ^{ a _i - 1  } ( p _i - 1 )  } $.</p>
<p>考虑改变枚举方式,因为$n = \prod _{ p | n  } p ^{ a _p  } $,则:$\varphi ( n ) = \prod _{ p | n  } { p ^{ a _p - 1  } ( p - 1 )  } = \prod _{ p | n  } { ( p ^{ a _p  } \times \cfrac { p - 1  } { p  } )  } = n \times \prod _{ p | n  } \cfrac { p - 1  } { p  } $.</p>
<p>我们考虑一个事实:现在有$m $个不同的分数$\cfrac { k  } { m  } , k \in [ 1 , m ] $,这些分数进行约分后,它们的分母即$m $的若干因数,而它们的分子就是与这些因数互质的数,同时这些数的个数总共是$m $个,我们可以得到:$\sum _{ d | m  } \varphi ( d ) = m $.</p>
<p>上面这个结论还有另一种证明方法:</p>
<p>由于$\varphi $是积性函数,若$n \ne 1 $,设$n = \prod _{ i = 1  } ^k p _i ^{ q _i  } $,则$\varphi ( n ) = \prod _{ i = 1  } ^k \varphi ( p _i ^{ q _i  } ) $,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ d | n  } \varphi ( d ) & = \sum _{ w _1 = 0  } ^{ q _1  } \sum _{ w _2 = 0  } ^{ q _2  } . . . . . . \sum _{ w _k = 0  } ^{ q _k  } { \varphi ( p _1 ^{ w _1  } ) \varphi ( p _2 ^{ w _2  } ) . . . . . . \varphi ( p _k ^{ w _k  } )  } \\

\end{aligned}</script><p>而$\varphi ( p ^q ) = p ^q - p ^{ q - 1  } $,于是有$\sum _{ i = 1  } ^{ q _i  } { ( p _x ^i - p _x ^{ i - 1  } )  } = ( p _x ^{ q _x  } - 1 ) $,则有$\sum _{ i = 0  } ^{ q _x  } \varphi ( p _x ^{ i  } ) = p _x ^{ q _x  } $.</p>
<p>则原式等于$\prod _{ i = 1  } ^k p _i ^{ q _i  } = n $.</p>
<h5><span id="和法里级数的关系">和法里级数的关系</span></h5><p>我们考虑之前提到的法里级数$\mathcal { F  } _n $,令$\Phi ( x ) = \sum _{ 1 \leq k \leq x  } \varphi ( k ) $,那么$\mathcal { F  } _n $的个数显然是$\Phi ( x ) + 1 $.</p>
<p>接下来我们思考如何计算$\Phi ( x ) $.事实上,我们有$\sum _{ d = 1  } ^n \Phi ( \lfloor \cfrac { n  } { d  } \rfloor ) = \cfrac { 1  } { 2  } ( n + 1 ) n $.这里的证明是:考虑满足$0 \leq a &lt; b \leq n $的分数$\cfrac { a  } { b  } $共有$\cfrac { 1  } { 2  } n ( n + 1 ) $个,而如果我们枚举$d = \gcd ( a , b ) $,那么显然右边也等于这些分数个数,于是得证.</p>
<p>而事实上,如果我们用$n = \lfloor x \rfloor $来带入上面的式子,可以得到$\sum _{ d = 1  } \Phi ( \cfrac { x  } { d  } ) = \cfrac { 1  } { 2  } \lfloor x \rfloor \lfloor 1 + x \rfloor $.</p>
<p>根据第三种莫比乌斯反演的形式,我们有:$\Phi ( x ) = \cfrac { 1  } { 2  } \sum _{ 1 \leq d  } \mu ( d ) \lfloor \cfrac { x  } { d  } \rfloor \lfloor \cfrac { x  } { d  } + 1 \rfloor $.</p>
<h5><span id="麦克马洪和式">麦克马洪和式</span></h5><p>考虑这个问题:我们现在有$m $种颜色,要对一个长度为$n $的圆环进行染色,旋转后相同算一种方案,求方案数.</p>
<p>我们先设答案为$N ( n , m ) $,并将这些答案全部列举出来,然后将它们进行旋转,进行$n - 1 $次.这样我们就得到了$nN ( n , m ) $个圆环,但是这些圆环是有重复的.</p>
<p>那么我们显然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
nN ( n , m ) & = \sum _{ a _0 a _1 . . . a _{ n - 1  }  } \sum _{ 0 \leq k < n  } [ a _0 a _1 . . . a _{ n - 1  } & = a _k . . . a _{ n - 1  } a _0 . . . a _{ k - 1  } ] \\
& = \sum _{ 0 \leq k < n  } \sum _{ a _0 a _1 . . . a _{ n - 1  }  } [ a _0 a _1 . . . a _{ n - 1  } & = a _k . . . a _{ n - 1  } a _0 . . . a _{ k - 1  } ] 
\end{aligned}</script><p>接下来我们只需要知道,当已知$k $的时候,右边和式的贡献是多少.显然此时有$a _i = a _{ ( i + k ) \mod n  } $,也就是$a _i = a _{ ( i + kl ) \mod n  } $,此时答案为$m ^{ \gcd ( { n , k  } )  } $.</p>
<p>为啥答案为$m ^{ \gcd ( n , k )  } $呢?我们考虑这一定会不断在$a $中取数,那么会取多少数呢?显然会取$x - 1 $个数,其中$i + xk = i + yn $,不难解得此时$x = \frac { n  } { \gcd ( k , n )  } $,因此一共有$\gcd ( n , k ) $个轨道.</p>
<p>也就是说:$nN ( n , m ) = \sum _{ 0 \leq k &lt; n  } m ^{ \gcd ( n , k )  } , N ( n , m ) = \cfrac { 1  } { n  } \sum _{ 0 \leq k &lt; n  } m ^{ \gcd ( n , k )  } \ $.</p>
<p>如果我们对这个式子进行化简:</p>
<script type="math/tex; mode=display">
\begin{aligned}
N ( n , m ) & = \cfrac { 1  } { n  } \sum _{ d | n  } m ^d \sum _{ 0 \leq k < n  } [ d & = \gcd ( n , k ) ] \\
& = \cfrac { 1  } { n  } \sum _{ d | n  } m ^d \sum _{ d | k , k < n  } [ \cfrac { k  } { d  } \bot \cfrac { n  } { d  } ] \\
& = \cfrac { 1  } { n  } \sum _{ d | n  } m ^d \sum _{ 0 \leq k < \frac { n  } { d  }  } [ k \bot \cfrac { n  } { d  } ] \\
& = \cfrac { 1  } { n  } \sum _{ d | n  } \varphi ( d ) m ^{ \frac { n  } { d  }  } . 
\end{aligned}</script><p>这个式子被称为麦克马洪公式.</p>
<p>另外,如果我们考虑$n | ( \sum _{ d | n  } \varphi ( d ) n ^{ \frac { n  } { d  }  } ) $这件事的证明,考虑如果$n = p ^k $,那么根据费马小定理,显然可证明.</p>
<p>而由于$\varphi ( x ) $是积性函数,令$n = n _1 n _2 , n _1 \bot n _2 $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ d | n  } \varphi ( d ) n ^{ \frac { n  } { d  }  } & = \sum _{ d _1 | n _1 , d _2 | n _2  } \varphi ( d _1 d _2 ) n ^{ \frac { n _1 n _2  } { d _1 d _2  }  } \\
& = \sum _{ d _1 | n _1  } \varphi ( d _1 ) ( \sum _{ d _2 | n _2  } \varphi ( d _2 ) ( n ^{ \frac { n _1  } { d _1  }  } ) ^{ \frac { n _2  } { d _2  }  } ) 
\end{aligned}</script><p>我们可以通过数学归纳来证明.</p>
<h5><span id="burnside定理">Burnside定理</span></h5><p>现在让我们来进行一些抽象代数的计算.</p>
<p>置换群:运算$( a _1 , a _2 , . . . , a _k ) $表示将$a _1 $放到$a _2 $位置…把$a _i $放到$a _{ i + 1  } $的位置…把$a _k $放到$a _1 $的位置,而幺元$e = ( 1 ) ( 2 ) ( 3 ) . . . ( n ) $.</p>
<p>由麦克马洪和式的证明,我们不难推导出Polya定理:设要对$n $个元素用$m $种颜色染色,若通过某种旋转得到的染色方案算同一种,考虑旋转一定是一种置换,则本质不同的染色方案数$= \cfrac { \sum _{ s \in S  } m ^{ \eta ( s )  }  } { | S |  } $,其中$\eta ( s ) $表示$s $的轨道数,即有多少组置换.</p>
<h6><span id="example1hnoi2009图的同构计数">Example1([HNOI2009]图的同构计数)</span></h6><p>首先看到循环同构,第一反应就是Burnside定理.考虑将每条边的状态设为两种:选或不选,那么我们就对点的编号进行置换,然后找到不动边的数量.</p>
<p>我们先考虑对于一个置换,该如何求得它的不动边的数量.考虑置换是一个排列,对它做置换环分解.</p>
<p>现在问题在于置换环内和置换环间要分别求不动点的数量.</p>
<p>先来考虑置换环内:由于是一个置换环,我们假设它的大小是$b $,将这$b $个点排成一个正$b $边形($b $个点的完全图),考虑一个一条边转多少次才能转回来,如果不是$b $是偶数并且这条边正好平分整个多边形的话,显然需要转$n $次,简单判掉特殊情况,发现轨道数量$\lfloor \frac { b  } { 2  } \rfloor $.</p>
<p>接下来考虑置换环外:对于两个置换环间,对于一条边,我们考虑不断做置换,做多少次才能使这条边回归原位置.注意到需要做$lcm ( b _1 , b _2 ) $次.而总共有$b _1 b _2 $条边,于是轨道数量$\frac { b _1 b _2  } { lcm ( b _1 , b _2 )  } = \gcd ( b _1 , b _2 ) $.</p>
<p>这样对于一个$k $个环的置换,它的答案就是$\sum _{ i = 1  } ^k \lfloor \frac { b _i  } { 2  } \rfloor + \sum _{ i = 1  } ^k \sum _{ j = i + 1  } ^k \gcd ( b _i , b _j ) $.</p>
<p>接下来发现本质不同的置换不多,搜出来每个置换环的大小,暴力判断.</p>
<h5><span id="欧拉定理">欧拉定理</span></h5><p>当$a \perp m $时,$a ^{ \varphi ( m )  } \equiv 1 ( \mod m ) $.</p>
<p>证明考虑取出$[ 1 , m ] $中所有和$m $互质的数,设它们为$b _1 , b _2 , \cdots , b _{ \varphi ( m )  } $.我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ k = 1  } ^{ \varphi ( m )  } ab _k & \equiv \prod _{ k = 1  } ^{ \varphi ( m )  } ( ab _k \bmod p ) ( \mod p ) \\
a ^{ \varphi ( m )  } \prod _{ k = 1  } ^{ \varphi ( m )  } b _k & \equiv \prod _{ k = 1  } ^{ \varphi ( m )  } b _k ( \mod p ) 
\end{aligned}</script><p>欧拉定理可以用来求逆元:$a ^{ \varphi ( p )  } \equiv 1 ( \mod p ) $,则有$a ^{ - 1  } \equiv a ^{ \varphi ( p ) - 1  } ( \mod p ) $.</p>
<h5><span id="扩展欧拉定理">扩展欧拉定理</span></h5><p>$a ^b \equiv a ^c ( \mod m ) $,其中</p>
<p>\begin{cases}</p>
<p>b\bmod \varphi(m) &amp;a\perp m\\</p>
<p>b &amp;b&lt;\varphi(m)\\</p>
<p>(b\bmod \varphi(m))+\varphi(m) &amp;other</p>
<p>\end{cases}</p>
<p>证明如下:</p>
<p>设$m = \prod ^k _{ i = 1  } p _i ^{ e _i  } $,则要证$a ^b \equiv a ^{ ( b \mod \varphi ( m ) ) + \varphi ( m )  } ( \mod m ) $,即证$\forall i $都有$a ^b \equiv a ^{ ( b \mod \varphi ( m ) ) + \varphi ( m )  } ( \mod p _i ^{ e _i  } ) $.</p>
<p>分情况讨论:</p>
<p>若$p _i ^{ e _i  } \perp a $,则为普通欧拉定理情况,即证明$\varphi ( p _i ^{ e _i  } ) $是$b - c $的因数.由于$\varphi ( p _i ^{ e _i  } ) $是$\varphi ( m ) $的因数,而$\varphi ( m ) $是$b - c $的因数,显然得证.</p>
<p>不然,发现$e _i \leq \varphi ( p _i ^{ e _i  } ) \leq \varphi ( m ) \leq b $且$\varphi ( m ) \leq c $,又发现$p _i ^{ e _i  } | a ^{ e _i  } $,所以$p _i ^{ e _i  } | a ^b $,$p _i ^{ e _i  } | a ^c $,左右两边均为$0 $,得证.</p>
<h6><span id="example1cf906d-power-tower">Example1(CF906D Power Tower)</span></h6><p>考虑每次暴力做扩展欧拉定理,注意到每次会把$p $变成$\varphi ( p ) $,如果$p $是奇数,那它下一步会变为偶数,如果$p $是偶数,则下一步至少减半,于是迭代次数是$\log n $级别的.</p>
<h6><span id="example2六省联考-2017-相逢是问候">Example2([六省联考 2017] 相逢是问候)</span></h6><p>同上.</p>
<h6><span id="example3具体数学454">Example3(《具体数学》4.54)</span></h6><p>求$1000 ! \pmod { 10 ^{ 250  }  } $.</p>
<p>首先,根据前面的例题,不难发现$5 ^{ 249  } \times 2 ^{ 994  } \mid ( 1000 ! ) $.</p>
<p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1000 ! & \equiv ans \pmod { 10 ^{ 250  }  } \\
\cfrac { 1000 !  } { 10 ^{ 249  }  } & \equiv \cfrac { ans  } { 10 ^{ 249  }  } \pmod { 10  } 
\end{aligned}</script><p>由于模数现在变成了$10 $,考虑$1 \times 3 \times 3 \times 7 \times 9 \mod { 10  } = 7 $,于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { ans  } { 10 ^{ 249  }  } & \equiv 2 ^{ 745  } \times 7 ^{ 100  } \pmod { 10  } \\

\end{aligned}</script><p>而$\varphi ( 10 ) = 4 $,根据扩展欧拉定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { ans  } { 10 ^{ 249  }  } & \equiv 2 ^{ 5  } \pmod { 10  } \\
ans & \equiv 2 \times 10 ^{ 249  } \pmod { 10 ^{ 250  }  } 
\end{aligned}</script><h5><span id="example1具体数学457">Example1(《具体数学》4.57)</span></h5><p>求证:$\sum _{ 1 \leq k \leq n + m  } \varphi ( k ) [ ( m \mod k ) + ( n \mod k ) \geq k ] = nm \ $.</p>
<p>先考虑将条件改为一个更好处理的式子,不难发现:</p>
<script type="math/tex; mode=display">
[ m \bmod k + n \bmod k \geq k ] = \lfloor \cfrac { n + m  } { k  } \rfloor - \lfloor \cfrac { n  } { k  } \rfloor - \lfloor \cfrac { m  } { k  } \rfloor</script><p>于是接下来我们要处理的式子形如$\sum _{ 1 \leq k \leq n  } \varphi ( k ) \lfloor \cfrac { n  } { k  } \rfloor \ $.</p>
<p>对其增加枚举量:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq k \leq n  } \varphi ( k ) \lfloor \cfrac { n  } { k  } \rfloor & = \sum _{ 1 \leq k \leq n  } \varphi ( k ) \sum _{ d = 1  } ^{ \lfloor \frac { n  } { k  } \rfloor  } 1 \\
& = \sum _{ k = 1  } ^n \sum _{ d | k  } \varphi ( d ) \\
& = \sum _{ k = 1  } ^n k & = \cfrac { ( n + 1 ) n  } { 2  } 
\end{aligned}</script><p>带入即可证明.</p>
<h5><span id="example2">Example2</span></h5><p>求$\sum _{ 1 \leq a , b \leq p ( p - 1 )  } [ a ^b \equiv b ^a ( \mod p ) ] , p \in prime $.</p>
<p>考虑$p \bot ( p - 1 ) $,使用中国剩余定理,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq a , b \leq p ( p - 1 )  } [ a ^b & \equiv b ^a ( \mod p ) ] \\
& = \sum _{ 0 \leq a , b < p  } \sum _{ 0 \leq c , d < p - 1  } [ a ^c & \equiv b ^d ( \mod p ) ] \\
& = ( p - 1 ) ^2 + \sum _{ 1 \leq a , b < p  } \sum _{ 0 \leq c , d < p - 1  } [ a ^c & \equiv b ^d ( \mod p ) ] 
\end{aligned}</script><p>后面那部分的答案是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq a , b < p  } \sum _{ 0 \leq c , d < p - 1  } [ a ^c & \equiv b ^d ( \mod p ) ] \\
& = \sum _{ 1 \leq x < p  } \sum _{ 0 \leq a , b < p  } \sum _{ 1 \leq c , d < p - 1  } [ a ^c & \equiv x ( \mod p ) ] [ b ^d & \equiv x ( \mod p ) ] \\
& = \sum _{ 1 \leq x < p  } ( \sum _{ 1 \leq a < p , 0 \leq c < p - 1  } [ a ^c & \equiv x ( \mod p ) ] ) ^2 
\end{aligned}</script><p>令$g $为$p $的原根,令$a = g ^b $,$x = g ^{ x ‘  } $有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq x < p  } ( \sum _{ 1 \leq a < p , 0 \leq c < p - 1  } [ a ^c & \equiv x ( \mod p ) ] ) ^2 \\
& = \sum _{ 0 \leq x ' < p - 1  } ( \sum _{ 0 \leq b < p - 1 , 0 \leq c < p - 1  } [ bc & \equiv x ' ( \mod p - 1 ) ] ) ^2 \\
& = \sum _{ 0 \leq x < p - 1  } ( \sum _{ 0 \leq a , b < p - 1  } [ ab & \equiv x ( \mod p - 1 ) ] ) ^2 \\

\end{aligned}</script><p>考虑前面那个式子,如果我们令$x = x _0 x _1 , x _0 \bot x _1 $,$p - 1 = p _0 p _1 , p _0 \bot p _1 $,其中$0 \leq x _0 &lt; p _0 , 0 \leq x _1 &lt; p _1 $,后面那个式子为$f ( p - 1 , x ) $,由于中国剩余定理,有$f ( p - 1 , x ) = f ( p _0 , x _0 ) f ( p _1 , x _1 ) $.</p>
<p>于是令$p - 1 = \prod _{ i = 1  } ^k p _i ^{ q _i  } $上面的式子可以改为:</p>
<script type="math/tex; mode=display">
\prod _{ i = 1  } ^k ( \sum _{ 0 \leq x _i < p _i ^{ q _i  }  } ( \sum _{ 0 \leq a , b < p _i ^{ q _i  }  } [ ab \equiv x _i ( \mod p _i ^{ q _i  } ) ] ) ^2 )</script><p>我们只考虑其中一项,形如:</p>
<script type="math/tex; mode=display">
\sum _{ 0 \leq x < p ^{ q  }  } ( \sum _{ 0 \leq a , b < p ^q  } [ ab \equiv x ( \mod p ^{ q  } ) ] ) ^2</script><p>我们不妨用$ap ^{ \alpha  } $代替$a $,$bp ^\beta $代替$b $,$xp ^t $代替$x $,其中$a , b , x \bot p $那么有:</p>
<script type="math/tex; mode=display">
\sum _{ 0 \leq x < p ^{ q - t  }  } ( \sum _{ 0 \leq a < p ^{ q - \alpha  } , 0 \leq b < p ^{ q - \beta  }  } [ abp ^{ \alpha + \beta  } \equiv xp ^t ( \mod p ^{ q  } ) ] ) ^2</script><p>则我们要做的即对四元组$( a , b , \alpha , \beta ) $计数.由于$a , b , x \bot p $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\alpha + \beta & = t , \alpha , \beta \in \mathbb { N  } \\
ab & \equiv x \pmod { p ^{ q - t  }  } , 0 & \leq a & < p ^{ q - \alpha  } , 0 & \leq b & < p ^{ q - \beta  } 
\end{aligned}</script><p>第一个式子对四元组的贡献显然是$t + 1 $,而第二个式子,由于$[ 1 , p ^{ q - t  } ) \in [ 1 , p ^{ q - \alpha  } ) $,所以我们可以先求出$1 \leq a &lt; p ^{ q - t  } $的答案,然后乘以$p ^{ t - \alpha  } $得到答案,$b $是类似的,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = \sum _{ 1 \leq x < p ^{ q - t  }  } ( ( t + 1 ) p ^{ t - \alpha  } p ^{ t - \beta  } \sum _{ 1 \leq a , b < p ^{ q - t  }  } [ ab & \equiv x \pmod { p ^{ q - t  }  } ] ) ^2 + ( \sum _{ 1 \leq a , b \leq p ^q  } [ ab & \equiv 0 \pmod { p ^{ q  }  } ] ) ^2 \\
& = \sum _{ 1 \leq x < p ^{ q - t  }  } ( ( t + 1 ) p ^{ t - \alpha  } p ^{ t - \beta  } \sum _{ 1 \leq a , b < p ^{ q - t  }  } [ ab & \equiv x \pmod { p ^{ q - t  }  } ] ) ^2 + q ( p - 1 ) p ^{ q - 1  } + p ^q 
\end{aligned}</script><p>后面,由于$a \bot p $,显然一个$a $唯一对应一个$b $.于是我们得到了答案为:</p>
<script type="math/tex; mode=display">
\sum _{ 1 \leq x < p ^{ q - t  }  } ( ( t + 1 ) p ^{ t  } \varphi ( p ^{ q - t  } ) ) ^2</script><p>而后面的式子显然跟$x $无关,所以有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 < x < p ^{ q - t  }  } ( ( t + 1 ) p ^{ t  } \varphi ( p ^{ q - t  } ) ) ^2 \\
& = \sum _{ 0 \leq t < q  } ( \varphi ( p ^{ q - t  } ) ) ( ( t + 1 ) p ^{ t  } \varphi ( p ^{ q - t  } ) ) ^2 \\
& = \sum _{ 0 \leq t < q  } ( t + 1 ) ^2 p ^{ 2 t  } ( p - 1 ) ^3 p ^{ 3 q - 3 t - 3  } \\
& = \sum _{ 0 \leq t < q  } ( t + 1 ) ^2 ( p - 1 ) ^3 p ^{ 3 q - t - 3  } 
\end{aligned}</script><p>其实到这一步,由于$\sum t $是$O ( \log n ) $级别的,这题已经可以做了.</p>
<h4><span id="莫比乌斯函数">莫比乌斯函数</span></h4><p>莫比乌斯函数$\mu ( x ) $是一个满足$\sum _{ d | n  } \mu ( n ) = 1 $的函数,根据定义其显然是积性函数.根据定义可以求出它的封闭形式:</p>
<p>$\mu ( m ) = \begin{cases}0 &amp; \exists m _i \geq 2 \ ( - 1 ) ^k &amp; \forall m _i \leq 1 \end{cases} , m = \prod _{ i = 1  } ^k p _i ^{ m _i  } $.</p>
<h5><span id="莫比乌斯反演">莫比乌斯反演</span></h5><p>见”反演.md”.</p>
<p>另外,值得一提的是,根据莫比乌斯反演,我们可以发现$\mu * id = \varphi $.</p>
<p>有公式:$\mu ^2 ( x ) = \sum _{ i ^2 | x  } \mu ( i ) $.原因很简单,我们设$x ‘ $为$x $中所有的质因子的幂先除二下取整再乘二后变成的答案,显然$\mu ^2 ( x ) = \mu ^2 ( x ‘ ) $,我们有$\sum _{ i | \sqrt { x ‘  }  } \mu ( y ) = [ \sqrt { x ‘  } = 1 ] , \sum _{ i ^2 | x ‘  } \mu ( y ) = [ x ‘ = 1 ] $.</p>
<h4><span id="min25筛">min25筛</span></h4><p>如果我们考虑积性函数的值,理论上来说,设$S ( n , k ) $表示最小质因子大于等于$p _k $的所有$f $的和加上$f ( 1 ) $,其实我们自然有:</p>
<script type="math/tex; mode=display">
S ( n , k ) = \sum _{ e \geq 0  } f ( p _k ^e ) S ( \lfloor \frac { n  } { p _k ^e  } \rfloor , k + 1 )</script><p>问题在于这么做需要枚举$[ 1 , n ] $中的全部质数,这是根本无法接受的.</p>
<p>我们考虑一些很大的质数,换言之,最小质因子大于$\sqrt { n  } $的数在$[ 1 , n ] $中只有可能是质数本身.</p>
<p>因此你会发现,这个过程只需要把质数单独拿出来做,复杂度就可以得到相当的飞跃.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\sum _{ i = 1  } ^n f ( i ) = \sum _{ p \in prime  } f ( p ) + \sum _{ p \notin prime \land p \ne 1  } f ( p ) + f ( 1 )</script><p>令$g ( N , i ) = \sum _{ j = 1  } ^N [ j \in prime \lor \mathrm { Min  } _j &gt; p _i ] F ( j ) \ $,其中$\mathrm { Min  } _j $表示$j $最小的质因数,$p _i $表示第$i $个质数.</p>
<p>注意到$g ( N , i ) $实际上就是$N $以内的数在第$i $轮埃氏筛后剩余的数的$F $的和.</p>
<p>$F ( i ) $表示若干完全积性函数之和且当$p \in prime $ 时,$F ( p ) = f ( p ) $,下文为了方便书写,直接认为$F $是完全积性函数.</p>
<p>而$g ( N , \sqrt { N  } ) $实际上就是$N $以内的质数的$F $之和,那么有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n , 0 ) & = \sum _{ i = 2  } ^n F ( i ) \\
g ( i , j ) & = g ( i , j - 1 ) - F ( p _j ) ( \ g ( \lfloor \frac { i  } { p _j  } \rfloor , j - 1 ) - \sum _{ 2 \leq p \leq p _{ j - 1  } , p \in prime  } F ( p ) \ ) \\

\end{aligned}</script><p>ps1:</p>
<p>第$j $个质数会比第$j - 1 $个多筛若干个数,即最小质因数是$p _j $的数.这些数形如$\{ p _j , 2 p _j , 3 p _j . . . \} $,同时除以$p _j $得到$\{ 1 , 2 , 3 . . . \} $.</p>
<p>我们要的就是其中最小质因数大于等于$p _j $的数,也就是最小质因数大于$p _{ j - 1  } $的数,因而就是$g ( \lfloor \frac { i  } { p _j  } \rfloor , j - 1 ) $.</p>
<p>但还有一些质数会被重复计算,我们把他删掉就可以了.</p>
<p>考虑到$g $后面的维度最多走到$\sqrt { n  } $,所以我们所枚举的最小质因子一定小于等于$\sqrt { n  } $,所以一定有$p _{ j - 1  } &lt; \lfloor \frac { i  } { p _j  } \rfloor $,所以直接删去一定不会多删.</p>
<p>ps2:</p>
<p>注意到以下事实:$\lfloor \frac { \lfloor \frac { a  } { b  } \rfloor  } { c  } \rfloor = \lfloor \frac { a  } { bc  } \rfloor \ $.</p>
<p>因而,如果我们有以下代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[n])<span class="keyword">return</span> f[n];</span><br><span class="line"><span class="keyword">else</span> f[n]=......;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="built_in">solve</span>(n/i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">solve</span>(n);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该代码复杂度为$O ( \sqrt { n  } ) $.原因在于,根据整数分块,$\lfloor \frac { n  } { i  } \rfloor $有$\sqrt { n  } $种取值.</p>
<p>而如果递归下去,继续枚举$j $,并往下递归到$\lfloor \frac { \lfloor \frac { n  } { i  } \rfloor  } { j  } \rfloor $,那他就相当于枚举$k = ij $,并递归到$\lfloor \frac { n  } { k  } \rfloor $,因而复杂度得到保证.</p>
<p>由此可知,求$g $的复杂度为$O ( \sqrt { n  } \times \sqrt { \sqrt { n  }  } ) = O ( n ^{ \frac { 3  } { 4  }  } ) $.</p>
<p>令$S ( n , m ) $表示前$n $个数中,最小质因数大于等于$p _m $的数的$f $之和,可知:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( n , m ) & = g ( n , + \infty ) - \sum _{ k = 1  } ^{ m - 1  } f ( p _k ) + \sum _{ k \geq m , e \geq 1 , p _k ^{ e + 1  } \leq n  } f ( p _k ^e ) S ( \lfloor \frac { n  } { p _k ^e  } \rfloor , k + 1 ) + \sum _{ k \geq m , e = 2 , p _k ^e \leq n  } f ( p _k ^e ) \\
& = g ( n , + \infty ) - \sum _{ k = 1  } ^{ m - 1  } f ( p _k ) + \sum _{ k \geq m , e \geq 1 , p _k ^{ e + 1  } \leq n  } [ f ( p _k ^e ) S ( \lfloor \frac { n  } { p _k ^e  } \rfloor , k + 1 ) + f ( p _k ^{ e + 1  } ) ] \\

\end{aligned}</script><p>ps1:</p>
<p>前半段求出质数部分的和,后半段开始枚举最小质因子.</p>
<p>由于$p _k $是当前数的最小质因子,$e $是他的幂.则这个数其他的质因子应该均大于$p _k $,因而大于等于$p _{ k + 1  } $.</p>
<p>注意到由于$S $中不包含$1 $,所以应特殊处理只含有$p _k $一个质因子的情况.</p>
<p>又注意到,如果$p _k ^e &lt; n &lt; p _k ^{ e + 1  } $,那么此时$\lfloor \frac { n  } { p _k ^e  } \rfloor $一定小于$p _k $,则不可能拥有比$p _k $更大的质因子.</p>
<p>该形式与上面一致,因而复杂度同样为$O ( n ^{ \frac { 3  } { 4  }  } ) $.我们最终要求的答案即$S ( n , 1 ) + f ( 1 ) $.</p>
<p>一些后记:</p>
<ol>
<li><p>事实上,复杂度的计算只是上限,实际上应该约为$O ( \frac { n ^{ \frac { 3  } { 4  }  }  } { \log _2 n  } ) $.</p>
</li>
<li><p>如果使用map会导致复杂度较差,考虑如下事实:</p>
</li>
</ol>
<p>(1).$\forall 1 \leq x \leq n $,则要么$x \leq \sqrt { n  } $,要么$\lfloor \frac { n  } { x  } \rfloor \leq \sqrt { n  } \ $.</p>
<p>(2).$\forall a $形如$\lfloor \frac { n  } { x  } \rfloor $,则$\lfloor \frac { n  } { a  } \rfloor $应为$x _{ max  } $,互不相同.</p>
<p>因而可以分别特判,从而做到比map或离散化都优秀的复杂度.</p>
<ol>
<li><p>我们在代码中所求出的$w $是倒序的,而我们转移的过程也是倒序的,因而枚举的时候可以直接正序枚举.</p>
</li>
<li><p>考虑做的时候由于进行了滚动数组,因而继承操作可以直接使用,为了方便可以直接判掉可以直接继承的情况.</p>
</li>
<li><p>求$S $的过程可以使用递归,因为我们只关心一个$S $的量.</p>
</li>
</ol>
<h5><span id="example1uoj188sanrd">Example1([uoj188]Sanrd)</span></h5><p>注意到这题显然可以写埃筛的暴力.考虑使用类似min15筛的方式,定义$f ( n ) $为$n $的次大质因子(若$n = 1 \lor n \in prime $则$f ( n ) = 0 $),$S ( n , k ) = \sum _{ i = 1  } ^n [ \mathrm { Min  } _i \geq p _k ] f ( i ) $.不难发现我们要求的就是$S ( n , 1 ) $,而显然$S ( n , \sqrt { n  } ) = 0 $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
S ( n , m ) = \sum _{ i \geq m , e \geq 1 , p _i ^{ e + 1  } \leq n  } S ( \lfloor \frac { n  } { p _i ^e  } \rfloor , i + 1 ) + p _i \sum _{ i = p _i + 1  } ^{ \lfloor \frac { n  } { p _i ^e  } \rfloor  } [ i \in prime ]</script><p>区间素数个数可以拿min25筛的前半部分做.</p>
<h4><span id="杜教筛">杜教筛</span></h4><p>令$F ( n ) = \sum _{ i = 1  } ^n f ( i ) \ $,我们考虑构造两个函数$g $和$s $.使得$f * g = s $.</p>
<p>令$G ( n ) = \sum _{ i = 1  } ^n g ( i ) , S ( n ) = \sum _{ i = 1  } ^n s ( i ) \ $.若$G ( i ) $和$S ( i ) $都很方便求,$g ( 1 ) = 1 $,我们就可以求出$F ( n ) $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
f * g & = s \\
\sum _{ j | i  } f ( j ) g ( \frac { i  } { j  } ) & = s ( i ) \\

\end{aligned}</script><p>由于$g ( 1 ) = 1 $,我们有$f ( i ) = s ( i ) - \sum _{ j | i , j \ne i  } f ( j ) g ( \frac { i  } { j  } ) \ $.</p>
<p>那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F ( n ) & = \sum _{ i = 1  } ^n f ( i ) \\
& = \sum _{ i = 1  } ^n ( s ( i ) - \sum _{ j | i , j \ne i  } f ( j ) g ( \frac { i  } { j  } ) ) \\
& = S ( n ) - \sum _{ j = 1  } ^n \sum _{ k = 2  } ^{ \lfloor \frac { n  } { j  } \rfloor  } g ( k ) f ( j ) \\
& = S ( n ) - \sum _{ k = 2  } ^n g ( k ) \sum _{ j = 1  } ^{ \lfloor \frac { n  } { k  } \rfloor  } f ( j ) \\
& = S ( n ) - \sum _{ k = 2  } ^n g ( k ) F ( \lfloor \frac { n  } { k  } \rfloor ) \\

\end{aligned}</script><p>复杂度证明和min25筛是一样的,不同点在于我们可以预处理$n ^{ \frac { 2  } { 3  }  } $以内的$F $,这样复杂度可以降到$O ( n ^{ \frac { 2  } { 3  }  } ) $.</p>
<h5><span id="example1">Example1</span></h5><p>求$\sum _{ i = 1  } ^N \mu ( i ) \ $.</p>
<p>由于$\mu * I = \epsilon $,于是考虑$g = I $.</p>
<h5><span id="example2">Example2</span></h5><p>求$\sum _{ i = 1  } ^N \varphi ( i ) \ $.</p>
<p>由于$\varphi * I = id $,于是考虑$g = I $.</p>
<h5><span id="example3">Example3</span></h5><p>求$\sum _{ i = 1  } ^N { \varphi ( i ) \times i  } \ $</p>
<p>由于$\sum ^N _{ i = 1  } ( f * g ) ( i ) = \sum _{ d | N  } { f ( i ) \times g ( \cfrac { n  } { d  } )  } = \sum _{ d | N  } { \varphi ( d ) \times d \times g ( \cfrac { n  } { d  } )  } \ $</p>
<p>由于中间过程中乘出来的$d $很难处理,需要消掉它,于是考虑$g = id $.</p>
<h5><span id="example4">Example4</span></h5><p>$\sum _{ i = 1  } ^N { \varphi ( i ) \times i ^2  } \ $.</p>
<p>由Example3,于是考虑$g = id ^2 $.</p>
<h4><span id="powerful-number筛">Powerful Number筛</span></h4><p>定义Powerful Number为满足所有质因子的指数都$&gt; 1 $的数,不难证明这样的数在$[ 1 , n ] $中最多只有$O ( \sqrt { n  } ) $个(使用积分).同时对于质因子的幂分奇偶讨论:奇数分成一个$3 $加上一个偶数,那么不难证明这个数一定有:$a ^2 b ^3 $的形式.找到这些数字可以直接dfs搜指数.</p>
<p>现在我们要求积性函数$f ( n ) $的前缀和.假设$f = h * g $,其中$h ( 1 ) = 1 , g ( p ) = f ( p ) , \forall p \in prime $且$g ( n ) $的前缀和容易计算.</p>
<p>接下来我们证明:$h ( n ) \ne 0 \Rightarrow n  is  Powerful  Number $.</p>
<p>$\forall p \in prime $,$f ( p ) = g ( 1 ) h ( p ) + g ( p ) h ( 1 ) = h ( p ) + g ( p ) $,于是$h ( p ) = 0 $.根据积性函数的性质有$\forall x \notin \text { PN  } , h ( x ) = 0 $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F ( n ) & = \sum _{ i = 1  } ^n f ( i ) \\
& = \sum _{ i = 1  } ^n \sum _{ j | i  } h ( j ) g ( \frac { i  } { j  } ) \\
& = \sum _{ j = 1  } ^n h ( j ) G ( \lfloor \frac { n  } { j  } \rfloor ) 
\end{aligned}</script><p>于是可以快速求,复杂度$O ( \sqrt { n  } ) $.</p>
<h5><span id="example1sp20174divcnt3">Example1([SP20174]DIVCNT3)</span></h5><p>首先我们需要构造$g ( p ) = f ( p ) , p \in prime $.注意到$f ( p ) = d ( p ^3 ) = 4 $,我们构造$g ( p ) = ( d * d ) ( p ) $.这样问题在于求$G ( n ) $.我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
G ( n ) & = \sum _{ i = 1  } ^n ( d * d ) ( i ) \\
& = \sum _{ ij \leq n  } d ( i ) d ( j ) \\
& = \sum _{ i = 1  } ^n d ( i ) D ( \lfloor \frac { n  } { i  } \rfloor ) 
\end{aligned}</script><p>而$D ( n ) = \sum _{ i = 1  } ^n \lfloor \frac { n  } { i  } \rfloor $,自然可以做.复杂度算一算是$O ( n ^{ \frac { 2  } { 3  }  } ) $.</p>
<p>感觉Powerful Number筛的关键在于构造.</p>
<h2><span id="整值函数">整值函数</span></h2><h3><span id="定义">定义</span></h3><p>若$x \in \mathbb { R  } $,则:</p>
<p>$\lfloor x \rfloor = $小于等于x的最大的整数.</p>
<p>$\lceil x \rceil = $大于等于x的最小的整数.</p>
<p>我们有时称$\lfloor x \rfloor $为$x $的整数部分,并定义$x - \lfloor x \rfloor $为分数部分,有时记作$\{ x \} $.</p>
<p>我们定义$x \mod y = x - y \lfloor \cfrac { x  } { y  } \rfloor $,$x  mumble  y = y \lceil \cfrac { x  } { y  } \rceil - x $,其中$x , y \in \mathbb { N _+  } $.</p>
<p>当然,我们也可以使用上述定义将$mod $和$mumble $的定义扩展到实数域,不过$y = 0 $的时候需要特殊处理.</p>
<h3><span id="整值函数的基本性值">整值函数的基本性值</span></h3><p>若$x \in \mathbb { R  } , n \in \mathbb { Z  } $,则有:</p>
<ol>
<li><p>$\lfloor x \rfloor = x \Leftrightarrow \lceil x \rceil = x \Leftrightarrow x \in \mathbb { Z  } $.</p>
</li>
<li><p>$\lceil x \rceil - \lfloor x \rfloor = [ x \notin \mathbb { Z  } ] $.</p>
</li>
<li><p>$x - 1 &lt; \lfloor x \rfloor \leq x \leq \lceil x \rceil &lt; x + 1 $.</p>
</li>
<li><p>$\lfloor - x \rfloor = - \lceil x \rceil , \lceil - x \rceil = - \lfloor x \rfloor $.</p>
</li>
<li><p>$\lfloor x \rfloor = n \Leftrightarrow n \leq x &lt; n + 1 \Leftrightarrow x - 1 &lt; n \leq x $.</p>
</li>
<li><p>$\lceil x \rceil = n \Leftrightarrow n - 1 &lt; x \leq n \Leftrightarrow x \leq n &lt; x + 1 $.</p>
</li>
<li><p>$x &lt; n \Leftrightarrow \lfloor x \rfloor &lt; n $.</p>
</li>
<li><p>$x \leq n \Leftrightarrow \lceil x \rceil \leq n $.</p>
</li>
<li><p>$x &gt; n \Leftrightarrow \lceil x \rceil &gt; n $.</p>
</li>
<li><p>$x \geq n \Leftrightarrow \lfloor x \rfloor \geq n $.</p>
</li>
<li><p>$\lfloor x + n \rfloor = \lfloor x \rfloor + n $.</p>
</li>
<li><p>$\lceil x + n \rceil = \lceil x \rceil + n $.</p>
</li>
<li><p>$\lfloor nx \rfloor = n \lfloor x \rfloor \Leftrightarrow n = 0 \lor x - \lfloor x \rfloor &lt; \cfrac { 1  } { n  } $.</p>
</li>
<li><p>$\lceil nx \rceil = n \lceil x \rceil \Leftrightarrow n = 0 \lor x - \lceil x \rceil &lt; \cfrac { 1  } { n  } $.</p>
</li>
<li><p>$\lceil \cfrac { n  } { m  } \rceil = \lfloor \cfrac { n - 1  } { m  } \rfloor + 1 , m \in \mathbb { N _+  } $.</p>
</li>
<li><p>$m \lceil x \rceil - \lceil m ( \lceil x \rceil - x ) \rceil = \lfloor mx \rfloor $.</p>
</li>
<li><p>$( x \mod ny ) \mod y = x \mod y , n \in \mathbb { N _+  } $.</p>
</li>
<li><p>分配律:$c ( x \mod y ) = ( cx ) \mod ( cy ) $.</p>
</li>
</ol>
<h3><span id="整值函数的应用">整值函数的应用</span></h3><h4><span id="一类函数与整值函数">一类函数与整值函数</span></h4><p>设$f ( x ) $是一个有以下性质且在一个实数区间连续的单调递增函数:</p>
<p>$f ( x ) \in \mathbb { Z  } \Rightarrow x \in \mathbb { Z  } $.</p>
<p>那么,只要$f ( x ) , f ( \lfloor x \rfloor ) , f ( \lceil x \rceil ) $都有定义,我们有:</p>
<p>$\lfloor f ( x ) \rfloor = \lfloor f ( \lfloor x \rfloor ) \rfloor $和$\lceil f ( x ) \rceil = \lceil f ( \lceil x \rceil ) \rceil $.</p>
<p>由于底和顶是类似的,我们考虑先对顶进行证明,这样也可以类似证明底:</p>
<p>若$x = \lceil x \rceil $,显然得证;</p>
<p>不然,有$x &lt; \lceil x \rceil $,那么有$f ( x ) &lt; f ( \lceil x \rceil ) $,也就有$\lceil f ( x ) \rceil \leq \lceil f ( \lceil x \rceil ) \rceil $.</p>
<p>考虑反证法,不妨令$\lceil f ( x ) \rceil &lt; \lceil f ( \lceil x \rceil ) \rceil $.则一定存在一个整数$y $使得$\lceil f ( x ) \rceil = y &lt; \lceil f ( \lceil x \rceil ) \rceil $,此时必有$x \leq y &lt; \lceil x \rceil $.由于$f $的性值,显然有$y $是整数,但根据整值函数的性值,不可能存在这样一个整数$y $满足$x \leq y &lt; \lceil x \rceil $,因此得证.</p>
<p>另外,我们考虑函数$f ( x ) = \cfrac { x + m  } { n  } $,显然这是一个满足条件的函数,因此显然满足上述的条件.再考虑$m = 0 $的特殊情况:$\lfloor \cfrac { \lfloor \cfrac { x  } { n  } \rfloor  } { m  } \rfloor = \lfloor \cfrac { x  } { nm  } \rfloor $.</p>
<p>而单调递减函数可以取相反数转化为单调递增函数.</p>
<h4><span id="迪利克雷抽屉原理">迪利克雷抽屉原理</span></h4><p>$n $个物体放进$m $个盒子里,那么必定有一个盒子中放入了大于等于$\lceil \cfrac { n  } { m  } \rceil $个物品,有一个盒子放入了小于等于$\lfloor \cfrac { n  } { m  } \rfloor $个物体.</p>
<h5><span id="example1">Example1</span></h5><p>求证:每个由$n ^2 + 1 $个不同实数构成的序列都包含一个长为$n + 1 $的严格递增子序列或严格递减子序列.</p>
<p>设$a _i $为第$i $个实数,$c _i $为以这个数为开头的最长的递增子序列,$d _i $表示以这个数为开头的最长的递减子序列.考虑反证法,如果不成立,那么$\forall 1 \leq i \leq n ^2 + 1 $,$1 \leq c _i \leq n \land 1 \leq d _i \leq n $.那么一共有$n ^2 $种不同的有序对.</p>
<p>根据抽屉原理,一共有$n ^2 + 1 $个有序对,所以一定有两个有序对相等.由于这些数字两两不同,所以一定可以把其中一个数字加到另一个数字的递增或递减子序列的后面,这样那个数字的$c _i $或者$d _i $就要$+ 1 $,与我们的假设不符,因此该定理成立.</p>
<h5><span id="example2">Example2</span></h5><p>求证:若任意两个人间只有两种关系:朋友或敌人.那么对于六个人而言,一定有三个人两两都是朋友或者两两都是敌人.</p>
<p>令$A $是这六个人中其中一个,根据抽屉原理,一定有大于等于$3 $个人都是$A $的敌人或者都是$A $的朋友,不妨假设这三个人都是$A $的朋友.</p>
<p>如果这三个人中有两个人是朋友,那么它们和A就一起构成了一组人.不然,他们三个人就构成了一组人.</p>
<h4><span id="计算区间内整数个数">计算区间内整数个数</span></h4><p>整值函数的另一个应用是计算区间内整数个数:</p>
<p>考虑基本性值$7 , 8 , 9 , 10 $,不难发现:</p>
<ol>
<li><p>$[ \alpha , \beta ] $包含$\lfloor \beta \rfloor - \lceil \alpha \rceil + 1 $个整数.</p>
</li>
<li><p>$( \alpha , \beta ) $包含$\lceil \beta \rceil - \lfloor \alpha \rfloor - 1 $个整数.</p>
</li>
<li><p>$( \alpha , \beta ] $包含$\lfloor \beta \rfloor - \lfloor \alpha \rfloor $个整数.</p>
</li>
<li><p>$[ \alpha , \beta ) $包含$\lceil \beta \rceil - \lceil \alpha \rceil $个整数.</p>
</li>
</ol>
<h4><span id="谱">谱</span></h4><p>我们定义一个实数$\alpha $的<strong>谱</strong>是以下集合:</p>
<p>$Spec ( \alpha ) = \{ \lfloor \alpha \rfloor , \lfloor 2 \alpha \rfloor , \lfloor 3 \alpha \rfloor . . . \} $.</p>
<p>不难发现,只要$\alpha \ne \beta $,则$Spec ( \alpha ) \ne Spec ( \beta ) $.</p>
<h5><span id="example">Example</span></h5><p>求证:$Spec ( \sqrt { 2  } ) \cup Spec ( 2 + \sqrt { 2  } ) = \mathbb { N _+  } $且$Spec ( \sqrt { 2  } ) \cap Spec ( 2 + \sqrt { 2  } ) = \phi $,即这两个集合构成了正整数集的一个划分.</p>
<p>我们考虑这样一个事实:对于任意正整数$n $,如果我们能求出来$Spec ( \sqrt { 2  } ) $中有$a $个元素$\leq n $,$Spec ( 2 + \sqrt { 2  } ) $中有$b $个元素$\leq n $,并且$a + b = n $,则结论显然成立.</p>
<p>不妨令函数$N ( \alpha , n ) $表示$Spec ( \alpha ) $中有多少个元素$\leq n $,其中$\alpha $是正数,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
N ( \alpha , n ) & = \sum _{ k \in \mathbb { N _+  }  } [ \lfloor k \alpha \rfloor & \leq n ] \\
& = \sum _{ k \in \mathbb { N _+  }  } [ \lfloor k \alpha \rfloor & < n + 1 ] \\
& = \sum _{ k \in \mathbb { N _+  }  } [ k \alpha & < n + 1 ] \\
& = \sum _k [ 0 & < k & < ( n + 1 ) / \alpha ] \\
& = \lceil ( n + 1 ) / \alpha \rceil - 1 
\end{aligned}</script><p>则我们要证明的就是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lceil \cfrac { n + 1  } { \sqrt { 2  }  } \rceil - 1 + \lceil \cfrac { n + 1  } { 2 + \sqrt { 2  }  } \rceil - 1 & = n \\
\lfloor \cfrac { n + 1  } { \sqrt { 2  }  } \rfloor + \lfloor \cfrac { n + 1  } { 2 + \sqrt { 2  }  } \rfloor & = n \\
\cfrac { n + 1  } { \sqrt { 2  }  } - \{ \cfrac { n + 1  } { \sqrt { 2  }  } \} + \cfrac { n + 1  } { 2 + \sqrt { 2  }  } - \{ \cfrac { n + 1  } { 2 + \sqrt { 2  }  } \} & = n 
\end{aligned}</script><p>而由于我们有恒等式:$\cfrac { 1  } { \sqrt { 2  }  } + \cfrac { 1  } { 2 + \sqrt { 2  }  } = 1 $,且两个相加为整数的数的分数部分相加显然为$1 $,原式得证.</p>
<p>事实上,如果两个集合$Spec ( \alpha ) $和$Spac ( \beta ) $构成正整数集一个划分,可以同上证明$\cfrac { 1  } { \alpha  } + \cfrac { 1  } { \beta  } = 1 $且$\alpha $和$\beta $都是无理数.</p>
<h4><span id="整值函数的递归式">整值函数的递归式</span></h4><p>得到递归式的封闭形式的确很有用,它可以让我们在很快的时间内求出答案,但大部分时候是很麻烦的.</p>
<p>而如果我们对时间的要求没有那么紧,我们不妨考虑一种较慢但更容易的方法:</p>
<h5><span id="example">Example</span></h5><p>约瑟夫问题,但是每隔两个人处死一个人,求最后存活者的编号.</p>
<p>我们不妨这样考虑:我们每略过两个人,就将他们重新编号.</p>
<p>例如,我们杀掉了三号,就将一号和二号重新编号为$n + 1 $号和$n + 2 $号,杀掉了六号,就将四号和五号重新编号为$n + 3 $号和$n + 4 $号,这样,我们在做游戏的时候,场上人员的编号一定是连续的.</p>
<p>我们把最后存活者改为最后死亡者,这样它的最后编号就是$3 n $.</p>
<p>并且不难发现,第$k $个死亡的人的最后编号就是$3 k $.</p>
<p>我们考虑已知新编号如何求旧编号,设新编号为$N $:</p>
<p>如果$N \leq n $,则$N $是初始编号,反之,我们考虑在编号$N $的时候被杀死的人的编号.</p>
<p>假设现在进行完了$k + 1 $轮,令$N = n + 2 k + w $,其中$w \in \{ 1 , 2 \} $,则编号$N $的时候被杀死的即是$3 ( k + 1 ) $,那么$N $之前的编号就是$3 k + w = N - ( n - k ) = N - n + k $.</p>
<p>而$k = \lfloor \cfrac { ( N - n - 1 )  } { 2  } \rfloor $,我们可以不断进行迭代.</p>
<p>如果我们令$D = 3 n + 1 - N $,换句话说即改变编号的顺序,我们可以有以下的赋值操作:</p>
<p>$3 n + 1 - D ‘ = 3 n + 1 - D - n + \lfloor \cfrac { ( 3 n + 1 - D - n - 1 )  } { 2  } \rfloor $.</p>
<p>化简这个式子,我们有:$D ‘ = D + n - \lfloor \cfrac { ( 2 n - D )  } { 2  } \rfloor = D + \lceil \cfrac { D  } { 2  } \rceil = \lceil \cfrac { 3 D  } { 2  } \rceil $.</p>
<p>事实上,我们可以证明:如果我们每隔$q $个人就杀掉一个人的话,那么$D ‘ = \lceil \cfrac { ( q + 1 ) D  } { q  } \rceil $,一直迭代到$D ‘ &gt; qn $时.</p>
<p>而最后的答案就是$( q + 1 ) n + 1 - D $.</p>
<h4><span id="整值函数的恒等式">整值函数的恒等式</span></h4><p>考虑公式$\lceil \cfrac { n - k + 1  } { m  } \rceil $,不难发现它在$1 \leq k \leq n \mod m $时的值为$\lceil \cfrac { n  } { m  } \rceil $,而在$n \mod m &lt; k \leq m $的值为$\lfloor \cfrac { n  } { m  } \rfloor $.</p>
<p>那么我们可以得到以下恒等式:</p>
<p>$n = \sum _{ k = 1  } ^m \lceil \cfrac { n - k + 1  } { m  } \rceil $.</p>
<p>类似地,有:</p>
<p>$n = \sum _{ k = 1  } ^m \lfloor \cfrac { n + k - 1  } { m  } \rfloor $.</p>
<p>用$\lfloor mx \rfloor $替换上面的$n $有$\lfloor mx \rfloor = \sum _{ k = 1  } ^m \lfloor x + \cfrac { k - 1  } { m  } \rfloor $.</p>
<p>同样的,有$\lceil mx \rceil = \sum _{ k = 1  } ^m \lceil x - \cfrac { k - 1  } { m  } \rceil $.</p>
<h4><span id="整值函数的和式">整值函数的和式</span></h4><p>通常情况下,处理含整值函数的和式时,通过引入新变量进行代替以及通过转化为区间进行化简.</p>
<p>如果遇到难以处理的情况,我们不妨考虑直接处理其中一段的和,使得剩下部分求和更为简单.</p>
<p>处理整值函数的另一个方法是:考虑将整值函数内的东西移出,并且让里面的东西形如等差序列,这样我们就可以尝试使用恒等式来化简.</p>
<h5><span id="example1">Example1</span></h5><p>求$\sum _{ k = 0  } ^{ n - 1  } \lfloor \sqrt { k  } \rfloor $.</p>
<p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^{ n - 1  } \lfloor \sqrt { k  } \rfloor & = \sum _{ 0 \leq k , m  } [ k & < n ] [ m & = \lfloor \sqrt { k  } \rfloor ] m \\
& = \sum _{ 0 \leq k , m  } [ k & < n ] [ m ^2 & \leq k & < ( m + 1 ) ^2 ] m \\
& = \sum _{ 0 \leq k , m  } m [ m ^2 & \leq k & < n & < ( m + 1 ) ^2 ] + \sum _{ 0 \leq k , m  } m [ m ^2 & \leq k & < ( m + 1 ) ^2 & \leq n ] 
\end{aligned}</script><p>考虑$n = a ^2 $的特殊情况,则前面那一项显然是$0 $,那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = \sum _{ 0 \leq k , m  } m [ m ^2 & \leq k & < ( m + 1 ) ^2 & \leq n ] \\
& = \sum _{ 0 \leq m  } m ( 2 m + 1 ) [ m & < a ] \\
& = \sum _{ m = 0  } ^{ a - 1  } ( 2 m ^2 + m ) \\
& = \cfrac { ( a - 1 ) a ( 2 a - 1 )  } { 3  } + \cfrac { a ( a - 1 )  } { 2  } \\
& = \cfrac { ( 4 a + 1 ) a ( a - 1 )  } { 6  } 
\end{aligned}</script><p>而如果$n \ne a ^2 $,我们令$a = \lfloor \sqrt { n  } \rfloor $,而当$k \in [ a ^2 , n ) $的部分的贡献显然是$a ( n - a ^2 ) $.</p>
<p>于是最后的结果就是:$\cfrac { ( 4 a + 1 ) a ( a - 1 )  } { 6  } + a ( n - a ^2 ) , a = \lfloor \sqrt { n  } \rfloor $.</p>
<p>另一个做法是,我们考虑增加枚举量,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^{ n - 1  } \lfloor \sqrt { k  } \rfloor & = \sum _{ j , k  } [ 1 & \leq j & \leq \sqrt { k  } ] [ 0 & \leq k & < a ^2 ] \\
& = \sum _{ 1 \leq j < a  } \sum _{ k  } [ j ^2 & \leq k & < a ^2 ] \\
& = \sum _{ 1 \leq j < a  } a ^2 - j ^2 & = a ^3 - \cfrac { a ( 2 a + 1 ) ( a + 1 )  } { 6  } 
\end{aligned}</script><h5><span id="example2类欧几里得算法">Example2(类欧几里得算法)</span></h5><p>求$\sum _{ k = 0  } ^{ m - 1  } \lfloor \cfrac { nk + x  } { m  } \rfloor , m \in \mathbb { N _+  } , n \in \mathbb { Z  } $.</p>
<p>由于$kn - ( kn \mod m ) = m \lfloor \cfrac { kn  } { m  } \rfloor $,我们有:</p>
<script type="math/tex; mode=display">
\lfloor \cfrac { x + kn  } { m  } \rfloor = \lfloor \cfrac { x + ( kn \mod m )  } { m  } \rfloor + \cfrac { kn  } { m  } - \cfrac { kn \mod m  } { m  }</script><p>这样,我们将整个式子的求和分为了三部分,第二项显然是等差数列求和,而如果我们令$g = \gcd ( n , m ) $,不难发现第三项的分子是一个等差数列$0 , g , 2 g , . . . m - g $重复了$g $次,而且正因为这,第一项里面的数也就自然组成了等差数列,由于我们有恒等式,那么这一项也就自然可以计算了.</p>
<p>分别求和后加起来,得到答案为$g \lfloor \cfrac { x  } { g  } \rfloor + \cfrac { ( m - 1 ) n  } { 2  } + \cfrac { g - m  } { 2  } $.</p>
<p>另外,对这个式子进行化简,我们可以得到:$g \lfloor \cfrac { x  } { g  } \rfloor + \cfrac { ( m - 1 ) ( n - 1 )  } { 2  } + \cfrac { g - 1  } { 2  } $,而这个式子关于$n $和$m $是对称的.</p>
<p>也就是说:$\sum _{ k = 0  } ^{ m - 1  } \lfloor \cfrac { nk + x  } { m  } \rfloor = \sum _{ k = 0  } ^{ n - 1  } \lfloor \cfrac { mk + x  } { n  } \rfloor , m , n \in \mathbb { N _+  } $.</p>
<p>另外,如果要求$\sum ^n _{ i = 0  } \lfloor \cfrac { ai + b  } { c  } \rfloor $,我们也有一种$O ( \log n ) $的做法(类欧几里得算法):</p>
<p>若$c \leq a $,原式化为$\sum ^n _{ i = 0  } { ( i \times \lfloor \frac { a  } { c  } \rfloor + \lfloor \cfrac { ( a \mod c ) i + b  } { c  } \rfloor )  } $.</p>
<p>若$c \leq b $,原式化为$\sum ^n _{ i = 0  } { \lfloor \cfrac { b  } { c  } \rfloor + \lfloor \cfrac { ai + ( b \mod c )  } { c  } \rfloor  } $.</p>
<p>考虑$a , b &lt; c $的情况,设$m = \lfloor \cfrac { an + b  } { c  } \rfloor $,原式化为</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum ^n _{ i = 0  } \sum ^m _{ j = 1  } [ j & \leq \lfloor \cfrac { ai + b  } { c  } \rfloor ] \\
& = \sum ^n _{ i = 0  } \sum ^m _{ j = 1  } [ cj & \leq ai + b ] \\
& = nm - \sum ^n _{ i = 0  } \sum ^m _{ j = 1  } [ ai & \leq cj - b - 1 ] \\
& = nm - \sum ^m _{ i = 1  } \lfloor \cfrac { ci - b - 1  } { a  } \rfloor 
\end{aligned}</script><h5><span id="example3">Example3</span></h5><p>求$\sum _{ n = 1  } ^{ 1000  } [ \lfloor \sqrt [3 ] { n  } \rfloor | n ] $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = \sum _{ n , k  } [ k & = \lfloor \sqrt [3 ] { n  } \rfloor ] [ k | n ] [ 1 & \leq n & \leq 1000 ] \\
& = \sum _{ k , m , n  } [ k ^3 & \leq n & < ( k + 1 ) ^3 ] [ n & = km ] [ 1 & \leq n & \leq 1000 ] \\
& = 1 + \sum _{ k , m  } [ k ^3 & \leq km & < ( k + 1 ) ^3 ] [ 1 & \leq k & < 10 ] \\
& = 1 + \sum _{ k , m  } [ k ^2 & \leq m & < \frac { ( k + 1 ) ^3  } { k  } ] [ 1 & \leq k & < 10 ] \\
& = 1 + \sum _{ k = 1  } ^9 ( \lceil k ^2 + 3 k + 3 + \frac { 1  } { k  } \rceil - \lceil k ^2 \rceil ) \\
& = 1 + \sum _{ k = 1  } ^9 ( 3 k + 4 ) & = 172 
\end{aligned}</script><p>上述推理过程将$n = 1000 $的情况特殊讨论了一下,不难发现,如果我们要求的式子是$\sum _{ n = 1  } ^{ N  } [ \lfloor \sqrt [3 ] { n  } \rfloor | n ] $,也仍然可以使用将$[ K ^3 , N ] , K = \lfloor \sqrt [3 ] { N  } \rfloor $中的数特殊处理的方式做掉,因为这些数的三次根下取整一定是$K $,式子就不难化简了.</p>
<h5><span id="example4uoj42sum">Example4([uoj42]Sum)</span></h5><p>这题的重点在于将幂通过$- 1 $的性质拿下来.</p>
<p>我们有$( - 1 ) ^a = 1 - 2 ( a \mod 2 ) = 1 - 2 ( a - 2 \lfloor \frac { a  } { 2  } \rfloor ) $.</p>
<p>于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ d = 1  } ^n ( - 1 ) ^{ \lfloor d \sqrt { r  } \rfloor  } \\
& = n - 2 \sum _{ d = 1  } ^n \lfloor d \sqrt { r  } \rfloor + 4 \sum _{ d = 1  } ^n \lfloor \frac { \lfloor d \sqrt { r  } \rfloor  } { 2  } \rfloor \\

\end{aligned}</script><p>令$f ( x ) = \frac { x  } { 2  } $,根据整值函数的性质,不难发现$\lfloor \frac { \lfloor d \sqrt { r  } \rfloor  } { 2  } \rfloor = \lfloor \frac { d \sqrt { r  }  } { 2  } \rfloor $.</p>
<p>于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = n - 2 \sum _{ d = 1  } ^n \lfloor d \sqrt { r  } \rfloor + 4 \sum _{ d = 1  } ^n \lfloor \frac { d \sqrt { r  }  } { 2  } \rfloor \\

\end{aligned}</script><p>记$t = \sqrt { r  } $,我们所要解决的问题是$\sum _{ d = 1  } ^n \lfloor d \frac { Pt + R  } { Q  } \rfloor $.如果$\frac { Pt + R  } { Q  } \geq 1 $,我们可以把整数部分取出来单独算.于是接下来我们只讨论$0 \leq \frac { Pt + R  } { Q  } &lt; 1 $的情况.相当于求一条斜率小于$1 $的直线下方的整点个数.我们可以反转坐标系,这样就变成了斜率大于$1 $的直线,继续做上面的操作.</p>
<p>这个问题引出万能欧几里得算法.</p>
<h5><span id="example5loj6440万能欧几里得算法">Example5([loj6440]万能欧几里得算法)</span></h5><p>解决形如$\sum _{ x = 1  } ^{ L  } A ^x B ^{ \lfloor \frac { Px + R  } { Q  } \rfloor  } $的问题,其中$A $和$B $都是$n \times n $的矩阵.默认$P , Q , R \geq 0 $.</p>
<p>我们将问题抽象为下面的模型:</p>
<p>首先将坐标系中所有经过整数点的与坐标轴平行的直线全都标记出来.</p>
<p>考虑将问题转化为:有一条$y = \frac { Px + R  } { Q  } $的直线,我们从$( 0 , \frac { R  } { Q  } ) $(不包含这个点)处开始沿直线向右走.每遇到一条横线,就进行$U _w $操作;每遇到一条竖线,就进行$R _w $操作.如果遇到了整数格点,就先进行$U _w $操作,再进行$R _w $操作.</p>
<p>例如上面那个例子就是:现在有一个矩阵二元组$( X , Y ) $,初始为$( A , B ^{ \lfloor \frac { R  } { Q  } \rfloor  } ) $,$R _w $操作是:$( X , Y ) \rightarrow ( AX , Y + X ) $,$U _w $操作是:$( X , Y ) \rightarrow ( XB , Y ) $.一直走到$x = L $的点为止,最后矩阵$Y $就是答案.不过这个形式不好写成矩阵,我们可以记录$( A ^a , B ^b , Y ) $.这样最后就可以带入操作,不难发现这个操作是个环.</p>
<p>操作要满足可合并性,也就是我可以将$U _w R _w $变成一个操作进行.</p>
<p>接下来我们分情况讨论一下:</p>
<p>当$P \geq Q $时,注意到$y = \frac { Px + R  } { Q  } = \lfloor \frac { P  } { Q  } \rfloor x + \frac { ( P \mod Q ) x + R  } { Q  } $,此时任意一个$R _w $操作前必然有至少$\lfloor \frac { P  } { Q  } \rfloor $个$U _w $,我们令$R _w ‘ = U _w ^{ \lfloor \frac { P  } { Q  } \rfloor  } R _w $,不难发现:$solve ( P , Q , R , L , U _w , R _w ) = solve ( P \mod Q , Q , R , L , U _w , R _w ‘ ) $.</p>
<p>当$P &lt; Q \land P \ne 0 $时,我们想要让$P $与$Q $互换,假设第$a $个$R _w $在第$b $个$U _w $之前,考虑这个$R _w $前会有$\lfloor \frac { Pa + R  } { Q  } \rfloor - \lfloor \frac { R  } { Q  } \rfloor $个$U _w $,而对于后者,变换坐标系得到$x = \frac { yQ - R  } { P  } $,由于遇到整点时,先$U _w $再进行$R _w $,也就是说,第$b $个$U _w $前会有$\lfloor \frac { Qb - R - 1  } { P  } \rfloor $个$R _w $(这个并没有忽略初始位置).我们考虑如何让这个数和上面的$\lfloor \frac { Pa + R  } { Q  } \rfloor $的差分写成一样的形式.注意到$b = 1 $需要特殊处理!</p>
<p>显然操作序列一共有$cntU = \lfloor \frac { PL + R  } { Q  } \rfloor - \lfloor \frac { R  } { Q  } \rfloor $,将二者对应一下,这里的答案就是$solve ( Q , P , ( Q - R - 1 ) \bmod P , cntU - 1 , R _w , U _w ) $.</p>
<p>然后是开头部分,开头部分一共有$\lfloor \frac { Q - R - 1  } { P  } \rfloor $个$R _w $和一个$U _w $.</p>
<p>但是注意到末尾部分同样是不规整的,注意到末尾一共有$L - \lfloor \frac { QcntU - R - 1  } { P  } \rfloor $个$R _w $,拼到末尾即可.</p>
<p>最后$P = 0 $的时候直接返回$R _w ^{ L  } $即可.</p>
<p>假设合并的复杂度是$c $,注意到每层的复杂度是$O ( c \log ( \frac { Q  } { P  } ) ) = O ( c ( \log Q - \log P ) ) $,但是每两层会抵消,因此复杂度$O ( C \log ( P + Q ) ) $.</p>
]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>简单乐理</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E7%AE%80%E5%8D%95%E4%B9%90%E7%90%86/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="前言">前言</span></h3><p>这个博客是北京大学课程《音乐与数学》的相关笔记.然而我懒得画五线谱以及插入钢琴图片,所以这里我们只空谈理论.</p>
<p>本人在大学前并未学过相关乐理,所以下面的个人理解当然可能会出错.</p>
<h3><span id="泛音列">泛音列</span></h3><h4><span id="拍音理论">拍音理论</span></h4><p>假设两个正弦单音的频率分别是$\omega , \omega + \delta $,那么它们叠加后是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin ( 2 \pi ( \omega + \delta ) t ) + \sin ( 2 \pi \omega t ) \\
& = 2 \sin \left ( 2 \pi ( \omega + \frac { \delta  } { 2  } ) t \right ) \cos ( \pi \delta t ) 
\end{aligned}</script><p>注意到这个声音受到$\cos ( \pi \delta t ) $的控制.因此会以$\frac { \delta  } { 2  } $的频率振动,由于$\delta $应该远小于$\omega $,这里就会产生$\delta = | \omega _1 - \omega _2 | $个拍音.</p>
<h4><span id="mersenne定律">Mersenne定律</span></h4><p>考虑弦乐的情况,将一根弦理想化后,可以只关注它的三个参数:</p>
<ol>
<li><p>弦长$L $.</p>
</li>
<li><p>张力$T $.</p>
</li>
<li><p>线密度$\rho $.</p>
</li>
</ol>
<p>对于弦的振动解微分方程,这里我不是很想解了啊!所以我们直接放结论,对于弦上一个点$u ( x , t ) $,首先是一维振动方程:</p>
<script type="math/tex; mode=display">
\frac { \partial ^2 u  } { \partial x ^2  } = \frac { \rho  } { T  } \frac { \partial ^2 u  } { \partial t ^2  }</script><p>最终得到的会是一个无穷级数,这个无穷级数的每一项都形如:</p>
<script type="math/tex; mode=display">
u _n ( x , t ) = c _n \sin ( \omega _n t + \theta _n ) \sin ( \frac { n \pi  } { L  } x )</script><p>其中第$n $项的频率满足:</p>
<script type="math/tex; mode=display">
f _n = \frac { n  } { 2 L  } \sqrt { \frac { T  } { \rho  }  }</script><p>其中我们将$f _1 $称为<strong>基频</strong>,相应的声音称为<strong>基音</strong>,而将剩下的频率对应的声音统称为泛音,其中$f _n , n \geq 2 $对应的是第$n - 1 $泛音.</p>
<p>特别地,如果我们干脆记$f = f _1 $,上述结果告诉我们弦的振动产生的一列频率是:</p>
<script type="math/tex; mode=display">
f , 2 f , 3 f , \cdots</script><p>这个序列通常被称为<strong>泛音列</strong>.</p>
<p>特别地,上述的频率其实是固定了点来讨论的,实际上的泛音要更为复杂,会在一根弦上的不同位置处产生不同的加权.实际上对于不同的$n $,它们的泛音列长这个样子:<img src="https://y.gtimg.cn/music/photo_new/T062M000004QlDkO0nCeWY.jpg?max_age=0" alt></p>
<p>其中标注的点(波节)在振动中均是固定不变的.</p>
<p>这其实是某些弦乐演奏中一些按弦技巧的基础.例如这里,如果我用手轻触中间点,我就可以消灭掉所有的$f _{ 2 k + 1  } $,泛音列中只剩下$2 f , 4 f , \cdots $.我们后面会再提这个事,这意味着我弹出的音高了八度.那如果我按$\frac { 1  } { 3  } $处呢?那泛音列中就会只剩下$3 f , 6 f , 9 f , \cdots $,也就是先高一个纯八度,再高一个纯五度.</p>
<p>还有拨弦,如果我在中间拨弦会发生什么呢?由于我的拨动使得整个弦应该以中间为对称形成一个偶函数,中间的点一定在波动,因此泛音列中剩下的就会是$f , 3 f , 5 f , \cdots $.</p>
<h4><span id="管乐器">管乐器</span></h4><p>管乐器中振动的变为空气柱,不过吧空气柱这个东西振动的时候会略微超出管口,因此会有管口矫正这个事存在.</p>
<p>再就是,管乐器其实分为两种:开管(两面开口)和闭管(单面开口).而且不像琴弦的两端是固定的.一个自然的想法是,根据上面我们放的那张图,开口的那个位置一定要振动,而闭口的那个位置一定被卡住不动.这意味着开管和闭管的泛音列天然不同.具体来说:</p>
<p>开管的泛音列:</p>
<script type="math/tex; mode=display">
f , 2 f , 3 f , 4 f , \cdots</script><p>闭管的泛音列:</p>
<script type="math/tex; mode=display">
f , 3 f , 5 f , 7 f</script><p>另外,相同长度的管,开管的基音比闭管高了一个八度.</p>
<p>管乐器有一种演奏方式是超吹.简单来说,当你用力吹的时候,直觉上随着你用力越大,你吹出来的音的频率应该是连续的.但实际上听感更接近于离散的.这是因为从一开始整个泛音列就都是存在的,只是当气流加快的时候,后面的音在某种程度上被”加强”了,所以对于开管来说,你会先听到一个高八度的音,再听到一个高五度的音.</p>
<h4><span id="泛音列重合理论">泛音列重合理论</span></h4><p>既然如此,我们可以见到,当两个音的基频的比较为简单的时候,它们产生的泛音列重合程度就会较高.例如:</p>
<script type="math/tex; mode=display">
\begin{gathered}
f , 2 f , 3 f , 4 f , \cdots \\
2 f , 4 f , 6 f , 8 f , \cdots 
\end{gathered}</script><p>或是:</p>
<script type="math/tex; mode=display">
\begin{gathered}
f , 2 f , 3 f , 4 f , \cdots \\
\frac { 3  } { 2  } f , 3 f , \frac { 9  } { 2  } f , 6 f , \cdots 
\end{gathered}</script><p>这从相当的程度解释了为什么理想的音程全都是简单整数比.</p>
<h3><span id="律制">律制</span></h3><p>要讲律制,首先要知道从经验上来讲,人耳对于音乐的听觉其实并非线性.换言之,当你听两个音的时候,你关注的可不是它们之间的频率差值,而可能更关注它们之间的频率比值.类似地,其实人听声压的时候靠的也是比值,例如<strong>分贝</strong>的定义是$L _p = 20 \log _{ 10  } ( \frac { p  } { p _0  } ) $,其中$p _0 = 20 \mu Pa $.</p>
<h4><span id="音程">音程</span></h4><p>我们称两个音级之间的距离为<strong>音程</strong>,其中高的音称为<strong>冠音</strong>,而低的音被称为<strong>根音</strong>,一个音程应该由两个参数决定:<strong>度数</strong>和<strong>半音数</strong>,简单来说,度数是跨越的音名数量,而半音数是跨越的半音数量.表格长这样:</p>
<p>| 度数 | 半音数 | 名称   |</p>
<p>| —— | ——— | ——— |</p>
<p>| 一   | 0      | 纯一度 |</p>
<p>| 二   | 1      | 小二度 |</p>
<p>| 二   | 2      | 大二度 |</p>
<p>| 三   | 3      | 小三度 |</p>
<p>| 三   | 4      | 大三度 |</p>
<p>| 四   | 5      | 纯四度 |</p>
<p>| 四   | 6      | 增四度 |</p>
<p>| 五   | 6      | 减五度 |</p>
<p>| 五   | 7      | 纯五度 |</p>
<p>| 六   | 8      | 小六度 |</p>
<p>| 六   | 9      | 大六度 |</p>
<p>| 七   | 10     | 小七度 |</p>
<p>| 七   | 11     | 大七度 |</p>
<p>| 八   | 12     | 纯八度 |</p>
<p>从这套理论出发,毕达哥拉斯说我们找一下最简整数比:注意到:</p>
<p>| 音程   | 频率比 |</p>
<p>| ——— | ——— |</p>
<p>| 纯八度 | $2 : 1 $  |</p>
<p>| 纯五度 | $3 : 2 $  |</p>
<p>| 纯四度 | $4 : 3 $  |</p>
<p>| 大三度 | $5 : 4 $  |</p>
<p>| 小三度 | $6 : 5 $  |</p>
<p>看上去太漂亮了对吧!但是就是这个规定出了大锅.</p>
<h4><span id="五度相生律">五度相生律</span></h4><p>中国的三分损益法和毕达哥拉斯的五度相生法其实是类似的东西,我们这里只考虑五度相生律.</p>
<p>毕达哥拉斯学派说,我们这么干,规定$C $的频率(当时其实不存在频率的概念,但我们这里就为了方便这么说了)为$1 $,然后每次向上升一个纯五度,如果超出去了呢,那就降一个八度降回来.回忆到纯五度是七个半音,这相当于求$\{ 7 k \} \pmod { 12  } $这个数列对吧,简单数论知识告诉我们它必然能遍历$12 $种情况,具体而言:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C \to & & G \to & & D \to & & A \to & & E \to & & B \to \\
1 \to & & \frac { 3  } { 2  } \to & & \frac { 3 ^2  } { 2 ^3  } \to & & \frac { 3 ^3  } { 2 ^4  } \to & & \frac { 3 ^4  } { 2 ^6  } \to & & \frac { 3 ^5  } { 2 ^7  } \to \\
\\
\\
\# F \to & & \# C \to & & \# G \to & & \# D \to & & \# A \to & & \# E \\
\frac { 3 ^6  } { 2 ^9  } \to & & \frac { 3 ^7  } { 2 ^{ 11  }  } \to & & \frac { 3 ^8  } { 2 ^{ 12  }  } \to & & \frac { 3 ^9  } { 2 ^{ 14  }  } \to & & \frac { 3 ^{ 10  }  } { 2 ^{ 15  }  } \to & & \frac { 3 ^{ 11  }  } { 2 ^{ 17  }  } \\

\end{aligned}</script><p>我们是拿纯八度和纯五度生成的所有的音,因此纯五度肯定是准的,那么与之对应的纯四度肯定是准的.但是看三度音程就会发现问题,例如大三度$CE $的比是$\frac { 81  } { 64  } &gt; \frac { 80  } { 64  } = \frac { 5  } { 4  } $.</p>
<p>更难过的是就算我们按照纯八度和纯五度生成的,这个纯八度也有点难绷.具体而言这里的$# E \ne F $,你对着这个$# E $往上再升一个音得到的理应是$C ‘ = \frac { 3 ^{ 12  }  } { 2 ^{ 18  }  } &gt; 2 $,具体来说$\frac { 3 ^{ 12  }  } { 2 ^{ 19  }  } \approx 1 . 013643 $,这就出事了,这个东西转一圈并没有转到理想的纯八度音阶上,这个问题在中国古代的三分损益上也体现了,那里的名字叫旋宫不归,这里的话则是将这个略大于$1 $的数叫做<strong>毕达哥拉斯音差</strong>.</p>
<p>仔细分析一下就会发现这个问题几乎是不可避免的,因为你上升$12 $个纯五度,再下降$7 $个纯八度理应回到原点,可是:</p>
<script type="math/tex; mode=display">
( \frac { 3  } { 2  } ) ^{ 12  } \times ( \frac { 1  } { 2  } ) ^7 > 1</script><p>这下这下了.</p>
<h4><span id="纯律">纯律</span></h4><p>其实我们刚才就能见到真正完美符合简单整数比的律根本调不出来.但是能不能让一些常用的音程(比如纯八度,纯五度,纯四度,大三度)尽可能准呢.这就是纯律在干的事.</p>
<p>还是规定$C $的频率为$1 $.接下来用正三和弦(一个大三度和一个小三度)$I : C - E - G $,$IV : F - A - C ‘ $,$V : G - B - D ‘ $的比例是$4 : 5 : 6 $确定剩下的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C & & D & & E & & F & & G & & A & & B & & C ' & & D ' \\
1 & & \frac { 9  } { 8  } & & \frac { 5  } { 4  } & & \frac { 4  } { 3  } & & \frac { 3  } { 2  } & & \frac { 5  } { 3  } & & \frac { 15  } { 8  } & & 2 & & \frac { 9  } { 4  } 
\end{aligned}</script><p>所以现在大三度和小三度都准了.但问题又来了:</p>
<ol>
<li><p>五度音程$D - A $不协和,比例为$\frac { 80  } { 54  } &lt; \frac { 81  } { 54  } = \frac { 3  } { 2  } $.这直接导致了转调会出错.</p>
</li>
<li><p>有两种不同的大二度:音程$C - D , F - G , A - B $的比例是$\frac { 9  } { 8  } $而音程$D - E , G - A $的比例为$\frac { 10  } { 9  } $.</p>
</li>
<li><p><strong>谐调音差</strong>:从$C $出发升高四个纯五度,降低两个八度和一个大三度后,得到的是:$( \frac { 3  } { 2  } ) ^4 \times ( \frac { 1  } { 2  } ) ^2 \times \frac { 4  } { 5  } = \frac { 81  } { 80  } = 1 . 0125 &gt; 1 $.</p>
</li>
</ol>
<h4><span id="十二平均律">十二平均律</span></h4><p>既然我们一开始就说了律是根据比值来定的,为什么不直接简单一点,干脆用$\sqrt [12 ] { 2  } $来平均律制呢?于是将近五百年前就有了朱载堉这位手开十二次根号的神人.这也是所有律法中几乎最简单的一种了,以至于我到这里发现没啥可写的了.</p>
<p>但它的问题也是最一眼能看出来的,那就是除了纯八度,全都不准.</p>
<p>先在这里定义<strong>音分</strong>的概念,设两个声音的频率分别是$f _1 , f _2 $,则它们的音分数定义为$1200 \log _2 ( \frac { f _2  } { f _1  } ) $,容易见到十二平均律拿到的一个半音恰好是$100 $音分.</p>
<p>用音分可以迅速确定一下,发现十二平均律这玩意准的离谱,虽然哪里都差一点,但哪里差的都不多.</p>
<h3><span id="调式">调式</span></h3><h4><span id="大小调">大小调</span></h4><h5><span id="自然大调">自然大调</span></h5><p>就是我们最常用的$CDEFGABC ‘ $,用大二度和小二度组织调式.具体而言,以一个大二度分开了两组四声音阶(均为大大小),按顺序分别为:</p>
<ol>
<li><p>主音</p>
</li>
<li><p>上主音</p>
</li>
<li><p>中音</p>
</li>
<li><p>下属音</p>
</li>
<li><p>属音</p>
</li>
<li><p>下中音</p>
</li>
<li><p>导音</p>
</li>
</ol>
<p>用五度相生,下属音$\rightarrow $主音$\rightarrow $属音.</p>
<h5><span id="自然小调">自然小调</span></h5><p>以一个大二度分开了两组四声音阶(分别为大小大和小大大)</p>
<p>以$ABCDEFG $用的调子,然而这里的问题是$G $作为导音却和$A ‘ $差了个全音,导得不好.</p>
<h5><span id="和声小调">和声小调</span></h5><p>以一个大二度分开了两组四声音阶(分别为大小大和小增小)</p>
<p>将自然小调的导音升高一个半音.用$A , B , C , D , E , F , ( ^# G ) $.</p>
<p>但是这样出了个增二度.</p>
<h5><span id="旋律小调">旋律小调</span></h5><p>以一个大二度分开了两组四声音阶(分别为大小大和大大小)</p>
<p>把下中音也升上去,这样差的就小,用$A , B , C , D , E , ( ^# F ) , ( ^# G ) $.</p>
<p>可以见到小调改音的主要目的是为了调导音的作用,这种作用只有在上行音阶的时候才是需要人为更改的,因此下行音阶不改音,与自然小调的下行音阶保持一致.</p>
<h4><span id="升降号调">升降号调</span></h4><p>以五度相生:</p>
<script type="math/tex; mode=display">
C \to G \to D \to A \to E \to B \to ( ^\# F ) \to ( ^\# C )</script><p>依次考虑它们为主调的自然大调音阶.</p>
<p>大调音阶的前后是对称的全全半+全+全全半结构,跳一个五度刚好能从前半部分跳到后半部分,因此从$C $开始每次往后跳一次都要在一个音阶上增一个升号.从$C $大调提升到$G $大调的时候就是将$C $的下属音(也就是$F $)升音.</p>
<p>对称地,反方向的五度相生:</p>
<script type="math/tex; mode=display">
C \to F \to ( ^b B ) \to ( ^b E ) \to ( ^b A ) \to ( ^b D ) \to ( ^b G ) \to ( ^b C )</script><p>那这个应该降什么呢?比如从$C $大调提升到$F $大调的时候就是将$F $的下属音$B $降一个音对吧.</p>
<p>所以最后的结果就是:</p>
<p><img src="https://img2022.cnblogs.com/blog/662544/202204/662544-20220411164109167-1657776014.png" alt></p>
<p>一个自然大调将主音向前挪小三度就得到了一个自然小调,它们称为一对<strong>关系大小调</strong>.</p>
<p>具有相同主音的大小调被称为<strong>平行大小调</strong>.其实也就是名字精确到大小写是一样的.</p>
<p>一个大调的下属音大调和属音大调以及对应的关系小调称为其<strong>近关系调</strong>.</p>
<h3><span id="和弦">和弦</span></h3><h4><span id="三和弦">三和弦</span></h4><p>按照三度音程叠起来的三个音所构成的和弦被称为<strong>三和弦</strong>.其中最下面的音被称为<strong>根音</strong>,最上面的音被称为<strong>冠音</strong>或者<strong>五音</strong>,中间的被称为<strong>三音</strong>.</p>
<p>由于三度音程分大小,所以就有了四种不同的三和弦.</p>
<ol>
<li><p>大三和弦:下面一个大三度,上面一个小三度,刚好形成$4 : 5 : 6 $的频率关系.</p>
</li>
<li><p>小三和弦:下面一个小三度,上面一个大三度.</p>
</li>
<li><p>减三和弦:两个小三度.</p>
</li>
<li><p>增三和弦:两个大三度.</p>
</li>
</ol>
<h4><span id="七和弦">七和弦</span></h4><p>按照三度音程叠四个音构成的和弦被称为<strong>七和弦</strong>.除去其中由三个大三度构成的(这样使得最上方的七音和最底下的根音形成了八度)以外,其余七种七和弦依照三和弦名称+七度音阶名称的原则命名,如下:</p>
<ol>
<li><p>减减七和弦(减七和弦):小小小.</p>
</li>
<li><p>减小七和弦(半减七和弦):小小大.</p>
</li>
<li><p>小小七和弦(小七和弦):小大小.</p>
</li>
<li><p>小大七和弦:小大大.</p>
</li>
<li><p>大小七和弦(属七和弦):大小小.</p>
</li>
<li><p>大大七和弦(大七和弦):大小大.</p>
</li>
<li><p>增大七和弦:大大小.</p>
</li>
</ol>
<p>很遗憾的是七和弦全部包含至少一个不协和音程,所以它们全都是不协和和弦.</p>
<h4><span id="和弦转位">和弦转位</span></h4><p>以根音为低音的和弦为<strong>原位和弦</strong>,以三五七音为低音的则称为<strong>转位和弦</strong>.</p>
<p>对于三和弦来说:</p>
<ol>
<li><p>以三音作为低音的称为<strong>第一转位</strong>,也称作<strong>六和弦</strong>.</p>
</li>
<li><p>以五音作为低音的称为<strong>第二转位</strong>,也称作<strong>四六和弦</strong>.</p>
</li>
</ol>
<p>对于七和弦来说:</p>
<ol>
<li><p>以三音作为低音的称为<strong>第一转位</strong>,也称作<strong>五六和弦</strong>.</p>
</li>
<li><p>以五音作为低音的称为<strong>第二转位</strong>,也称作<strong>三四和弦</strong>.</p>
</li>
<li><p>以七音作为低音的称为<strong>第三转位</strong>,也称作<strong>二和弦</strong>.</p>
</li>
</ol>
<h4><span id="和弦的调性">和弦的调性</span></h4><p>在调式的主音,下属音,属音上的和弦分别被称为<strong>主和弦(I)</strong>,<strong>下属和弦(IV)</strong>,<strong>属和弦(V)</strong>,它们被统称为<strong>正和弦</strong>,在C大调中体现为$C - E - G $,$F - A - C ‘ $,$G - B - D ‘ $.其中主和弦一般比较稳定,属和弦则比较飘渺,下属和弦往往则起到过度作用.</p>
<p>一定范围内的和弦连接被称为<strong>和声进行</strong>,下面是三种基本形式:</p>
<ol>
<li><p>正格进行:$I \to V \to I $.</p>
</li>
<li><p>变格进行:$I \to IV \to I $.</p>
</li>
<li><p>复式进行:$I \to IV \to V \to I $.</p>
</li>
</ol>
<p>对于大调来说,其不同的三和弦之间有更加复杂的关系.经验给出以下图表:</p>
<script type="math/tex; mode=display">
\xymatrix { & & & & I \\
& & IV \ar [r ] \ar [d ] \ar [dr ] \ar [rru ] & vii \degree \ar [ru ] & \\
iii \ar [r ] & vi \ar [r ] \ar [ru ] & ii \ar [r ] \ar [ru ] & V \ar [ruu ] &  }</script><p>其中$I $较为特殊,可以走向全部的和弦,这里略去不画.</p>
<h4><span id="新黎曼理论">新黎曼理论</span></h4><p>引入以下三种对三和弦的变换(均会使得大和弦变小和弦,小和弦变大和弦):</p>
<ol>
<li><p>平行变换$P $:保持纯五度音阶不变,将三音切换.</p>
</li>
<li><p>关系变换$R $:保持大三度音阶不变,补上剩下的一个(等价于大小调转换).</p>
</li>
<li><p>导音变换$L $:保持小三度音阶不变,补上剩下的一个.</p>
</li>
</ol>
<p>容易见到$R \circ ( L \circ R ) ^3 = P $.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>乐理</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="二项式系数">二项式系数</span></h2><h3><span id="上升幂和下降幂">上升幂和下降幂</span></h3><p>定义下降幂$x ^{ \underline { k  }  } = \prod _{ i = 0  } ^{ k - 1  } ( x - i ) = \frac { x !  } { ( x - k ) !  } $.</p>
<p>定义上升幂$x ^{ \overline { k  }  } \prod _{ i = 0  } ^{ k - 1  } ( x + i ) = \frac { ( x + k - 1 ) !  } { ( x - 1 ) !  } $.</p>
<p>上升幂和下降幂的定义是可以引申到复数域的.</p>
<p>例如我们有加倍公式:$r ^{ \underline { k  }  } ( r - 0 . 5 ) ^{ \underline { k  }  } = \cfrac { ( 2 r ) ^{ \underline { 2 k  }  }  } { 2 ^{ 2 k  }  } , k \in \mathbb { N  } $.</p>
<p>他们之间存在转换:$x ^{ \underline { n  }  } = ( - 1 ) ^n ( - x ) ^{ \overline { n  }  } $.</p>
<p>同时存在大小关系:$x ^{ \underline { n  }  } \leq x ^n \leq x ^{ \overline { n  }  } $,其中$0 \leq n &lt; x $.</p>
<h3><span id="二项式系数的定义">二项式系数的定义</span></h3><p>考虑令$\binom { n  } { m  } $表示从一个大小为$n $的子集中选出大小为$m $的子集的方案数.第一次有$n $个选择,第二次有$n - 1 $个选择……第m次有$n - m + 1 $个选择.而由于可能可以选择重复的,但一个排列被重复选择的次数显然是$m ! $,因此显然有$\binom { n  } { m  } = \cfrac { n ^{ \underline { m  }  }  } { m !  } $.</p>
<p>如果我们把它的定义拓展到复数域,我们有:</p>
<p>$\binom { r  } { k  } = \begin{cases}\cfrac { r ^{ \underline { k  }  }  } { k !  } &amp; k \geq 0 \ 0 &amp; k &lt; 0 \end{cases} , r \in \mathbb { C  } , k \in \mathbb { Z  } $.</p>
<p>值得一提的是,如果我们这么定义,本质上其实是把$\binom { r  } { k  } $看作了一个关于$r $的$k $次多项式.</p>
<p>另外根据定义,$r \in \mathbb { Z  } \land r &lt; k $时,该公式给出$0 $.</p>
<p>值得一提的是,为了使二项式系数在面对$0 $的时候更加简洁,通常直接定义$0 ! = 1 , 0 ^0 = 1 $.</p>
<p>另外不难发现$\binom { 2 n  } { n  } $是所有$\binom { 2 n  } { k  } $中最大的.事实上我们有Wallis公式:$\lim _{ n \rightarrow \infty  } \frac { ( \frac { 2 ^{ 2 n  }  } { \binom { 2 n  } { n  }  } ) ^2  } { 2 n + 1  } = \frac { \pi  } { 2  } $.</p>
<h3><span id="基本的二项式恒等式">基本的二项式恒等式</span></h3><ol>
<li>阶乘展开式:$\binom { n  } { k  } = \cfrac { n !  } { k ! ( n - k ) !  } , n , k \in \mathbb { N  } , n \geq k \ $.</li>
</ol>
<p>证明根据定义是显然的.</p>
<ol>
<li>对称恒等式:$\binom { n  } { k  } = \binom { n  } { n - k  } , n \in \mathbb { N  } , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>根据$( 1 ) $,$0 \leq k \leq n $时是显然的.而其他情况两边都会给出$0 $,因此也是成立的.</p>
<ol>
<li>吸收恒等式:$\binom { r  } { k  } = \cfrac { r  } { k  } \binom { r - 1  } { k - 1  } , k \in \mathbb { Z  } \land k \ne 0 \ $.</li>
</ol>
<p>证明根据定义是显然的.</p>
<ol>
<li>吸收恒等式的变式:$k \binom { r  } { k  } = r \binom { r - 1  } { k - 1  } , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>根据$( 3 ) $,只需要验证$k = 0 $的情况即可,也是显然的.</p>
<ol>
<li>相伴恒等式:$( r - k ) \binom { r  } { k  } = r \binom { r - 1  } { k  } , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>证明如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( r - k ) \binom { r  } { k  } & = ( r - k ) \binom { r  } { r - k  } \\
& = r \binom { r - 1  } { r - k - 1  } \\
& = r \binom { r - 1  } { k  } 
\end{aligned}</script><p>问题在于:我们在上述描述中并未提到$r $的范围,但是推导过程要求$r \in \mathbb { N  } $.不过,我们已经说明了二项式系数是关于$r $的$k $次多项式,因此只需要有$k + 1 $个$r $满足这个公式即可.而根据推导过程显然有无限个$r $满足,因此这个公式对$r \in \mathbb { C  } $也是成立的.</p>
<p>不过事实上,直接用吸收恒等式就可以证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k \binom { r  } { k  } & = r \binom { r - 1  } { k - 1  } \\
( r - k ) \binom { r  } { r - k  } & = r \binom { r - 1  } { r - k - 1  } \\
( r - k ) \binom { r  } { k  } & = r \binom { r - 1  } { k  } 
\end{aligned}</script><ol>
<li>加法公式:$\binom { r  } { k  } = \binom { r - 1  } { k  } + \binom { r - 1  } { k - 1  } , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>证明可以使用定义,也可以先用$r \in \mathbb { N  } $的情况给出组合意义,再使用多项式推理法证明.</p>
<ol>
<li>$\binom { r  } { m  } \binom { m  } { k  } = \binom { r  } { k  } \binom { r - k  } { m - k  } , n , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>证明可以使用组合意义和多项式推理法.</p>
<ol>
<li>平行求和法:$\sum _{ k \leq n  } \binom { r + k  } { k  } = \binom { r + n + 1  } { n  } , n \in \mathbb { N  } \ $.</li>
</ol>
<p>我们不妨考虑不断使用加法公式:</p>
<p>$\binom { r + n + 1  } { n  } = \binom { r + n  } { n  } + \binom { r + n  } { n - 1  } = \binom { r + n  } { n  } + \binom { r + n - 1  } { n - 1  } + \binom { r + n - 1  } { n - 2  } = . . . \ $,最终下标会减成负数,这样后面的项就全都是$0 $了.</p>
<p>也可以考虑组合意义:如果$r \in \mathbb { N  } $,那么我们考虑从右到左第一个没有被选上的数,假设它是$r + k + 1 $,那么在它右边的数全部选择了,一共是$n - k $个数,而还需要在左边的$r + k $中选择$k $个数.</p>
<ol>
<li>上指标求和法:$\sum _{ 0 \leq k \leq n  } \binom { k  } { m  } = \binom { n + 1  } { m + 1  } , n , m \in \mathbb { N  } \ $.</li>
</ol>
<p>可以组合意义解释:我们不妨假设选的最大数是$k + 1 $,接下来就还需要在$[ 1 , k ] $中选择$m $个.</p>
<p>如果我们将这个公式两边同时乘以$m ! $,我们可以得到公式:$\sum _{ 0 \leq k \leq n  } k ^{ \underline { m  }  } = \cfrac { ( n + 1 ) ^{ \underline { m + 1  }  }  } { m + 1  } , n , m \in \mathbb { N  } \ $,这也就是有限微积分的公式中的一个.</p>
<ol>
<li>二项式定理:$( x + y ) ^r = \sum _{ k  } \binom { r  } { k  } x ^k y ^{ r - k  } , r \in \mathbb { N  } \ $.</li>
</ol>
<p>可以使用组合意义证明.</p>
<p>二项式定理有一些有用的特殊情况:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 \leq k \leq n  } \binom { n  } { k  } & = 2 ^n , n \in \mathbb { N  } \\

\end{aligned}</script><p>在二项式定理中令$x = y = 1 $即可证明.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 \leq k \leq n  } ( - 1 ) ^k \binom { n  } { k  } & = 0 ^n & = [ n & = 0 ] , n \in \mathbb { N  } \\

\end{aligned}</script><p>在二项式定理中令$x = - 1 , y = 1 $即可证明,值得一提的是,当$n = 0 $的时候这个式子给出$1 $,并在其他情况下给出$0 $,这个式子是二项式反演的基础.</p>
<ol>
<li>三项式定理:$( x + y + z ) ^n = \sum _{ 0 \leq a , b , c \leq n  } [ a + b + c = n ] \cfrac { n !  } { a ! b ! c !  } x ^a y ^b z ^c , n \in \mathbb { N  } \ $.</li>
</ol>
<p>证明与二项式定理类似.值得一提的是,$\cfrac { n !  } { a ! b ! c !  } = \binom { n  } { b + c  } \binom { b + c  } { c  } $.</p>
<ol>
<li>多项式定理:$( \sum _{ i = 1  } ^m x _i ) ^n = \sum _{ \forall i \in [ 1 , m ] , 0 \leq a _i \leq n  } [ \sum _{ i = 1  } ^m a _i = n ] \cfrac { n !  } { \prod _{ i = 1  } ^m a _i !  } \prod _{ i = 1  } ^m x _i ^{ a _i  } , n \in \mathbb { N  } \ $.</li>
</ol>
<p>证明与二项式定理类似.</p>
<ol>
<li>范德蒙德卷积:$\sum _{ k  } \binom { r  } { m + k  } \binom { s  } { n - k  } = \binom { r + s  } { n + m  } , n , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>证明可以使用组合意义和多项式推理法.</p>
<p>另外,这个式子可以直接使用生成函数证明.</p>
<ol>
<li>范德蒙德卷积的变式:$\sum _{ k  } \binom { l  } { m + k  } \binom { s  } { n + k  } = \binom { l + s  } { l - m + n  } , l \in \mathbb { N  } , n , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>有$\binom { l  } { m + k  } = \binom { l  } { l - m - k  } $,然后运用范德蒙德卷积即可得到答案.</p>
<ol>
<li>上指标反转公式:$\binom { r  } { k  } = ( - 1 ) ^k \binom { k - r - 1  } { k  } \ $.</li>
</ol>
<p>根据定义显然.</p>
<h3><span id="扩展的二项式恒等式整数范围内">扩展的二项式恒等式(整数范围内)</span></h3><ol>
<li>$\sum _{ k \leq m  } \binom { r  } { k  } ( - 1 ) ^k = ( - 1 ) ^m \binom { r - 1  } { m  } , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>证明如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k \leq m  } \binom { r  } { k  } ( - 1 ) ^k & = \sum _{ k \leq m  } \binom { k - r - 1  } { k  } \\
& = \binom { - r + m  } { m  } & = ( - 1 ) ^m \binom { r - 1  } { m  } 
\end{aligned}</script><ol>
<li>$\sum _{ - q \leq k \leq l  } \binom { l - k  } { m  } \binom { q + k  } { n  } = \binom { l + q + 1  } { m + n + 1  } , n , m \in \mathbb { N  } , l + q \geq 0 \ $.</li>
</ol>
<p>可以组合意义与多项式推理法证明.</p>
<ol>
<li>$\sum _{ k  } \binom { a + b  } { a + k  } \binom { a + b  } { b + k  } ( - 1 ) ^k = \binom { a + b  } { a  } , a , b \in \mathbb { N  } \ $.</li>
</ol>
<p>可以数学归纳证明.</p>
<ol>
<li>$\sum _{ k = 0  } ^m \cfrac { \binom { m  } { k  }  } { \binom { n  } { k  }  } = \cfrac { n + 1  } { n + 1 - m  } , n , m \in \mathbb { N  } , n \geq m \ $.</li>
</ol>
<p>我们有$\binom { n  } { m  } \binom { m  } { k  } = \binom { n  } { k  } \binom { n - k  } { m - k  } \ $,两边同时除以$\binom { n  } { m  } \binom { n - k  } { m - k  } \ $,于是我们得到了$\cfrac { \binom { m  } { k  }  } { \binom { n  } { k  }  } = \cfrac { \binom { n - k  } { m - k  }  } { \binom { n  } { m  }  } \ $.</p>
<p>有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^m \cfrac { \binom { m  } { k  }  } { \binom { n  } { k  }  } & = \sum _{ k = 0  } ^m \cfrac { \binom { n - k  } { m - k  }  } { \binom { n  } { m  }  } \\
& = \cfrac { 1  } { \binom { n  } { m  }  } \sum _{ k = 0  } ^m \binom { n - k  } { m - k  } \\
& = \cfrac { 1  } { \binom { n  } { m  }  } \sum _{ k = 0  } ^m \binom { n - m + k  } { k  } \\
& = \cfrac { \binom { n + 1  } { m  }  } { \binom { n  } { m  }  } \\
& = \cfrac { n + 1  } { n + 1 - m  } 
\end{aligned}</script><ol>
<li>$( - 1 ) ^m \binom { - n - 1  } { m  } = ( - 1 ) ^n \binom { - m - 1  } { n  } , n , m \in \mathbb { N  } \ $.</li>
</ol>
<p>根据上指标反转公式,这个公式两边都等于$\binom { n + m  } { m  } \ $.</p>
<ol>
<li>$\sum _{ k \leq m  } \binom { r  } { k  } ( \cfrac { r  } { 2  } - k ) = \cfrac { m + 1  } { 2  } \binom { r  } { m + 1  } , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>可以使用归纳法证明这个公式.</p>
<ol>
<li>$\sum _{ k \leq m  } \binom { m + r  } { k  } x ^k y ^{ m - k  } = \sum _{ k \leq m  } \binom { - r  } { k  } ( - x ) ^k ( x + y ) ^{ m - k  } , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>不妨令左边的值为$S _m $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _m & = \sum _{ k \leq m  } \binom { m + r  } { k  } x ^k y ^{ m - k  } & = \sum _{ k \leq m  } \binom { m + r - 1  } { k  } x ^k y ^{ m - k  } + \sum _{ k \leq m  } \binom { m + r - 1  } { k - 1  } x ^k y ^{ m - k  } \\
& = y \sum _{ k < m  } \binom { m - 1 + r  } { k  } x ^k y ^{ m - 1 - k  } + \binom { m + r - 1  } { m  } x ^m + x \sum _{ k \leq m  } \binom { m + r - 1  } { k - 1  } x ^{ k - 1  } y ^{ m - k  } \\
& = ( x + y ) S _{ m - 1  } + \binom { m + r - 1  } { m  } x ^m \\
& = ( x + y ) S _{ m - 1  } + \binom { r  } { m  } ( - x ) ^m 
\end{aligned}</script><p>左右两边满足相同递归式,通过数学归纳法不难证明二者相等.</p>
<ol>
<li>$\sum _{ k \leq m  } \binom { m + k  } { k  } 2 ^{ - k  } = 2 ^m , m \in \mathbb { N  } \ $.</li>
</ol>
<p>考虑$( 7 ) $,将$x = y = 1 , r = m + 1 $带入,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k \leq m  } \binom { 2 m + 1  } { k  } & = \sum _{ k \leq m  } \binom { m + k  } { k  } 2 ^{ m - k  } \\
2 ^{ 2 m  } & = \sum _{ k \leq m  } \binom { m + k  } { k  } 2 ^{ m - k  } \\
2 ^m & = \sum _{ k \leq m  } \binom { m + k  } { k  } 2 ^{ - k  } 
\end{aligned}</script><ol>
<li>$\sum _{ k  } \binom { l  } { m + k  } \binom { s + k  } { n  } ( - 1 ) ^k = ( - 1 ) ^{ l + m  } \binom { s - m  } { n - l  } , l \in \mathbb { N  } , n , m \in \mathbb { Z  } \ $.</li>
</ol>
<p>可以数学归纳证明.</p>
<ol>
<li>$\sum _{ k \leq l  } \binom { l - k  } { m  } \binom { s  } { k - n  } ( - 1 ) ^k = ( - 1 ) ^{ l + m  } \binom { s - m - 1  } { l - n - m  } , l , n , m \in \mathbb { N  } \ $.</li>
</ol>
<p>可以数学归纳证明.</p>
<h3><span id="拓展的二项式恒等式实数范围内">拓展的二项式恒等式(实数范围内)</span></h3><ol>
<li>$\binom { r  } { k  } \binom { r - \cfrac { 1  } { 2  }  } { k  } = \cfrac { \binom { 2 r  } { 2 k  } \binom { 2 k  } { k  }  } { 2 ^{ 2 k  }  } , k \in \mathbb { Z  } \ $.</li>
</ol>
<p>将加倍公式两边同时除以$k ! ^2 $即可得到这个公式.</p>
<ol>
<li>$\binom { n - \cfrac { 1  } { 2  }  } { n  } = \cfrac { \binom { 2 n  } { n  }  } { 2 ^{ 2 n  }  } , n \in \mathbb { Z  } \ $.</li>
</ol>
<p>将$( 1 ) $中令$r = k = n $即可得到这个公式.</p>
<ol>
<li>$\binom { - \cfrac { 1  } { 2  }  } { n  } = ( \cfrac { - 1  } { 4  } ) ^n \binom { 2 n  } { n  } , n \in \mathbb { Z  } \ $.</li>
</ol>
<p>即$( 2 ) $的变形.</p>
<ol>
<li>$\sum _{ k  } \binom { n  } { 2 k  } \binom { 2 k  } { k  } 2 ^{ - 2 k  } = \binom { n - \cfrac { 1  } { 2  }  } { \lfloor \cfrac { n  } { 2  } \rfloor  } , n \in \mathbb { N  } \ $</li>
</ol>
<p>首先根据$( 1 ) $,左边$= \sum _{ k  } \binom { \cfrac { n  } { 2  }  } { k  } \binom { \cfrac { n - 1  } { 2  }  } { k  } \ $,而考虑到$\cfrac { n  } { 2  } $和$\cfrac { n - 1  } { 2  } $必有一个是自然数,因此可以直接用范德蒙德卷积的变形.</p>
<ol>
<li>$\sum _{ k  } \binom { - \cfrac { 1  } { 2  }  } { k  } \binom { - \cfrac { 1  } { 2  }  } { n - k  } = ( - 1 ) ^n , n \in \mathbb { N  } \ $.</li>
</ol>
<p>直接使用范德蒙德卷积即可证明.</p>
<ol>
<li>$\sum _{ k  } \binom { 2 k  } { k  } \binom { 2 n - 2 k  } { n - k  } = 4 ^n , n \in \mathbb { N  } \ $.</li>
</ol>
<p>由$( 5 ) $和$( 3 ) $不难推出.</p>
<ol>
<li>$\sum _{ k  } \binom { n  } { k  } \cfrac { ( - 1 ) ^k  } { x + k  } = x ^{ - 1  } \binom { x + n  } { n  } ^{ - 1  } , x \notin \{ 0 , - 1 , . . . , - n \} \ $.</li>
</ol>
<p>令$f ( x ) = ( x - 1 ) ^{ \underline { - 1  }  } $,直接做高阶差分即可得到这个式子.</p>
<ol>
<li>$\sum _{ k = 0  } ^n \binom { r  } { k  } \binom { r  } { n - k  } ( - 1 ) ^k = [ n  is  \mathrm { even  } ] ( - 1 ) ^{ \cfrac { n  } { 2  }  } \binom { r  } { \cfrac { n  } { 2  }  } \ $.</li>
</ol>
<p>首先不难发现,$( 1 - z ) ^r = \sum _{ k \geq 0  } ( - 1 ) ^k \binom { r  } { k  } \ $.</p>
<p>考虑$( 1 - z ) ^r ( 1 + z ) ^r = ( 1 - z ^2 ) ^r $.</p>
<p>我们有$[ z ^n ] ( 1 - z ) ^r ( 1 + z ) ^r = [ z ^n ] ( 1 - z ^2 ) ^r $,不难发现即上式.</p>
<h3><span id="卡特兰数">卡特兰数</span></h3><p>卡特兰数$f _n $表示:长度为$2 n $的合法括号序列个数.</p>
<p>卡特兰数的前几项为$1 , 1 , 2 , 5 , 14 , 42 , 132 \cdots $.</p>
<p>接下来,我们通过这个定义来证明以下其他定义方式.</p>
<p>递归定义:$f _n = \sum _{ i = 0  } ^{ n - 1  } f _i f _{ n - 1 - i  } $.</p>
<p>不妨考虑枚举一个括号序列的第一个断点,则该括号序列应形如$( A ) B $.</p>
<p>考虑将其删成$A $和$B $,则$A $一定合法,因为若$A $不合法,那么这里一定不是第一个断点.</p>
<p>通项公式:$f _n = \frac { 1  } { n + 1  } C _{ 2 n  } ^n = C _{ 2 n  } ^n - C _{ 2 n  } ^{ n - 1  } $.</p>
<p>考虑平面直角坐标系,我们将’(‘认为是向右上走一单位长度,将’)’认为是向右下走一单位长度.</p>
<p>那么卡特兰数就相当于从$( 0 , 0 ) $走到$( 2 n , 0 ) $不经过第四象限的方案数.</p>
<p>考虑反射容斥,如果只是走到$( 2 n , 0 ) $的方案数是$C _{ 2 n  } ^n $.</p>
<p>而如果到达第四象限,说明在这条这线上存在一个点$( x , - 1 ) $.</p>
<p>考虑将$x $以后的折线以直线$y = - 1 $为对称轴反转,那么终点到了$( 2 n , - 2 ) $.</p>
<p>不难发现,任意从$( 0 , 0 ) $走到$( 2 n , - 2 ) $的方案一定唯一对应了一种从$( 0 , 0 ) $走到$( 2 n , 0 ) $的不合法方案.因为从$( 0 , 0 ) $走到$( 2 n , - 2 ) $一定会经过直线$y = - 1 $,将后半部分对称后就是其对应方案.而从$( 0 , 0 ) $走到$( 2 n , - 2 ) $的方案数为$C _{ 2 n  } ^{ n - 1  } $.</p>
<p>因而$f _n = C _{ 2 n  } ^n - C _{ 2 n  } ^{ n - 1  } \ $.</p>
<p>而$C _{ 2 n  } ^n - C _{ 2 n  } ^{ n - 1  } = \frac { ( 2 n ) !  } { n ! n !  } - \frac { ( 2 n ) !  } { ( n - 1 ) ! ( n + 1 ) !  } = \frac { ( 2 n ) !  } { n ! ( n + 1 ) !  } = \frac { C _{ 2 n  } ^n  } { n + 1  } \ $.</p>
<p>递推定义:$f _n = \frac { 4 n - 2  } { n + 1  } f _{ n - 1  } \ $.</p>
<p>使用一下上一步的通项公式:</p>
<p>f_n=\frac{(2n)!}{n!(n+1)!}\\</p>
<p>f_{n-1}=\frac{(2n-2)!}{(n-1)!(n)!}</p>
<p>\end{cases}\\</p>
<p>不难发现$f _n = \frac { ( 2 n - 1 ) ( 2 n )  } { n ( n + 1 )  } f _{ n - 1  } \ $.整理,得到$f _n = \frac { 4 n - 2  } { n + 1  } f _{ n - 1  } \ $.</p>
<p>换个记号,设$C _n $为卡特兰数的第$n $项,卡特兰数有一个著名的结论是$k $次卷积:</p>
<script type="math/tex; mode=display">
C ^{ ( k )  } _n = \sum _{ \sum _{ j = 1  } ^k a _j = n  } \prod C _{ a _i  } = \frac { k  } { n + k  } \binom { 2 n + k - 1  } { n  }</script><p>我们可以这么理解它:它指的是一个长度为$n + k - 1 $的括号序列,前$k - 1 $个必须是左括号的方案数.为啥呢?因为这样这个括号序列必须写成$( ( ( A ) B ) C ) D $之类的形式,等价于卷积.</p>
<p>那么证明就很简单了,类似反射容斥,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C ^{ ( k )  } _n & = \binom { 2 n + k - 1  } { n  } - \binom { 2 n + k - 1  } { n - 1  } \\
& = \frac { k  } { n + k  } \binom { 2 n + k - 1  } { n  } 
\end{aligned}</script><h5><span id="examplehnoi2009有趣的数列">Example([HNOI2009]有趣的数列)</span></h5><p>首先,如果没有第三条限制,那显然奇数位置和偶数位置互不影响,直接随便选,答案就是$\binom { 2 n  } { n  } $.</p>
<p>而有了限制呢,我们还是想随便选然后顺序排起来,但是这次不能排列的时候使奇数位置大于偶数位置,可以发现这就是括号序列需要满足的条件,于是答案就是卡特兰数.</p>
<p>至于处理,这题因为模数不是质数,需要做质因数分解来维护除法.</p>
<h5><span id="example223省选10连测day7b">Example2([23省选10连测day7]b)</span></h5><p>给定$x , n $,对$y \in [ 1 , n ] $,固定$p _x = y $做笛卡尔树的<strong>形态</strong>计数.$n \leq 5 \times 10 ^5 $.</p>
<p>由于是对树的形态计数,其实根本就不在乎每个点具体的取值,只要这个取值有解就行.事实上,容易发现$a _x = y $只要满足:</p>
<ol>
<li><p>$x $节点的祖先数量不超过$y - 1 $个(深度小于等于$y $).</p>
</li>
<li><p>$x $节点的子树大小不超过$n - y + 1 $.</p>
</li>
</ol>
<p>发现合法不太好记,经典补集转化,然后两个不合法情况无关,分别算.</p>
<p>我们考虑直接算出$f _p $表示$x $的深度为$p $的答案,$g _p $表示$x $的子树大小为$p $的答案,然后就可以完成这个题.</p>
<p>这两部分怎么算呢?</p>
<p>先看深度:$x $的祖先有两种:一种在序列中在$x $的左边,一种在$x $的右边.我们设前者为$0 = l _0 &lt; l _1 &lt; l _2 &lt; \cdots l _p &lt; l _{ p + 1  } = x $,设后者为$n + 1 = r _0 &gt; r _1 &gt; r _2 &gt; \cdots &gt; r _{ q  } &gt; r _{ q + 1  } = x $.这么分类有什么用呢?我们考虑$( l _{ i - 1  } , l _{ i  } ) $这一段数能放在哪里,它只能是$l _{ i  } $的左儿子,独立于整棵树,因此这一段的答案就是$C _{ l _i - l _{ i - 1  } - 1  } $.</p>
<p>记:</p>
<script type="math/tex; mode=display">
\begin{aligned}
L _p & = \sum _{ l  } \prod _{ i = 1  } ^{ p + 1  } C _{ l _i - l _{ i - 1  } - 1  } \\
R _q & = \sum _{ r  } \prod _{ i = 1  } ^{ q + 1  } C _{ r _{ i - 1  } - r _i - 1  } \\

\end{aligned}</script><p>注意到这等价于卡特兰数的$k $次卷积,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
L _p & = C _{ x - p - 1  } ^{ ( p + 1 )  } \\
R _q & = C ^{ ( q + 1 )  } _{ n - x - q  } \\

\end{aligned}</script><p>此时的答案自然是$f _{ p + q + 1  } = L _p R _q \binom { p + q  } { q  } $,做卷积.</p>
<p>儿子怎么算呢?二叉搜索树有一个经典性质:确定根后每个点插在哪里是固定的.也就是说我们把$x $的子树从原树中删去,然后插入$x $一定会插回原位置,这是一个双射.而子树内随便做,设左子树大小为$p $,右子树大小为$q $,我们有$g _{ p + q + 1  } = C _p C _q C _{ n - ( p + q + 1 )  } = C _{ n - 1  } ^{ ( 3 )  } $,同样是简单的卷积.</p>
<h3><span id="二项式系数的处理">二项式系数的处理</span></h3><h4><span id="通过恒等式变形求解">通过恒等式变形求解</span></h4><h5><span id="example1">Example1</span></h5><p>求$\sum _{ k = 0  } ^n k \binom { m - k - 1  } { m - n - 1  } , n , m \in \mathbb { N  } \land m &gt; n \ $.</p>
<p>这个式子乘了个系数$k $导致很难处理,一个自然的想法是使用吸收恒等式将$k $消去,然后对后面的式子使用上指标求和.</p>
<p>于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^n k \binom { m - k - 1  } { m - n - 1  } & = \sum _{ k = 0  } ^n m \binom { m - k - 1  } { m - n - 1  } - \sum _{ k = 0  } ^n ( m - k ) \binom { m - k - 1  } { m - n - 1  } \\
& = m \sum _{ k = 0  } ^{ m - 1  } \binom { m - k - 1  } { m - n - 1  } - ( m - n ) \sum _{ k = 0  } ^m \binom { m - k  } { m - n  } 
\end{aligned}</script><p>不妨令$S _m = \sum _{ k = 0  } ^m \binom { m - k  } { m - n  } \ $,不难发现我们有:</p>
<script type="math/tex; mode=display">
S _m = \sum _{ k = 0  } ^m \binom { k  } { m - n  } = \binom { m + 1  } { m - n + 1  }</script><p>于是原式$= mS _{ m - 1  } - ( m - n ) S _m = \cfrac { n  } { m - n + 1  } \binom { m  } { m - n  } \ $.</p>
<p>不过事实上,我们有另一种方式来处理这个等式,我们直接将$k = \binom { k  } { 1  } $带入:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^n k \binom { m - k - 1  } { m - n - 1  } & = \sum _{ k = 0  } ^n \binom { k  } { 1  } \binom { m - k - 1  } { m - n - 1  } \\
& = \binom { m  } { m - n + 1  } \\
& = \cfrac { n  } { m - n + 1  } \binom { m  } { m - n  } 
\end{aligned}</script><h5><span id="example2">Example2</span></h5><p>求$\sum _{ k  } k \binom { n  } { k  } \binom { s  } { k  } , n \in \mathbb { N  } \ $.</p>
<p>第一反应仍然是使用吸收恒等式,但是注意到$n $和$s $的范围不一样,由于吸收恒等式的范围很松,因此应选择一个范围更松的数吸收,这样才能保证另一个数范围的特殊性,于是有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k  } k \binom { n  } { k  } \binom { s  } { k  } & = s \sum _{ k  } \binom { n  } { k  } \binom { s - 1  } { k - 1  } \\
& = s \binom { n + s - 1  } { n - 1  } 
\end{aligned}</script><h5><span id="example3">Example3</span></h5><p>求$\sum _{ 0 \leq k  } \binom { n + k  } { 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } , n \in \mathbb { N  } \ $.</p>
<p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 \leq k  } \binom { n + k  } { 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } & = \sum _{ 0 \leq k  } \binom { n + k  } { k  } \binom { n  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } , n \in \mathbb { N  } \\
& = \cfrac { 1  } { n + 1  } \sum _{ 0 \leq k  } \binom { n + k  } { k  } \binom { n + 1  } { k + 1  } { ( - 1 ) ^k  } \\
& = \cfrac { 1  } { n + 1  } \sum _{ 0 \leq k  } \binom { - n - 1  } { k  } \binom { n + 1  } { k + 1  } \\
& = \cfrac { 1  } { n + 1  } \binom { 0  } { n  } \\
& = [ n & = 0 ] 
\end{aligned}</script><h5><span id="example4">Example4</span></h5><p>求$\sum _{ k \geq 0  } \binom { n + k  } { m + 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } , n , m \in \mathbb { N _+  } \ $.</p>
<p>考虑恒等式扩展的二项式恒等式(整数范围内)的$( 1 ) $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k \geq 0  } \binom { n + k  } { m + 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } & = \sum _{ k \geq 0  } \sum _{ 0 \leq j \leq n + k - 1  } \binom { n + k - 1 - j  } { 2 k  } \binom { j  } { m - 1  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } \\
& = \sum _{ 0 \leq j \leq n - 1  } \binom { j  } { m - 1  } \sum _{ j + 1 - n \leq k , 0 \leq k  } \binom { n + k - 1 - j  } { 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } 
\end{aligned}</script><p>注意到如果$j + 1 - n \geq 0 $,则$\binom { n + k - 1 - j  } { 2 k  } \ $应为$0 $.所以有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 0 \leq j \leq n - 1  } \binom { j  } { m - 1  } \sum _{ j + 1 - n \leq k , 0 \leq k  } \binom { n + k - 1 - j  } { 2 k  } \binom { 2 k  } { k  } \cfrac { ( - 1 ) ^k  } { k + 1  } \\
& = \sum _{ 0 \leq j < n  } \binom { j  } { m - 1  } [ n - 1 - j & = 0 ] & = \binom { n - 1  } { m - 1  } 
\end{aligned}</script><h5><span id="example5">Example5</span></h5><p>求$\sum _{ k = 0  } ^n ( C _n ^k ) ^2 $.</p>
<script type="math/tex; mode=display">
\sum _{ k = 0  } ^n ( C _n ^k ) ^2 = \sum _{ k = 0  } ^n C _{ n  } ^k \times C _{ n  } ^{ n - k  } = C _n ^{ 2 n  }</script><h4><span id="转化为递归式和式求解">转化为递归式/和式求解</span></h4><h5><span id="example1">Example1</span></h5><p>求$Q _n = \sum _{ k \leq 2 ^n  } \binom { 2 ^n - k  } { k  } ( - 1 ) ^k , n \in \mathbb { N  } \ $.</p>
<p>如果要转化为递归式的话,我们所掌握的只有加法恒等式,但加法恒等式只给出了杨辉三角中相邻两行的关系.但由于$Q _n $的式子中实际上只与$2 ^n $有关,我们不妨令$R _n = \sum _{ k \leq n  } \binom { n - k  } { k  } ( - 1 ) ^k \ $,显然有$Q _n = R _{ 2 ^n  } $.</p>
<p>而我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R _n & = \sum _{ k \leq n  } \binom { n - 1 - k  } { k  } ( - 1 ) ^k + \sum _{ k \leq n  } \binom { n - 1 - k  } { k - 1  } ( - 1 ) ^k \\
& = \sum _{ k \leq n  } \binom { n - 1 - k  } { k  } ( - 1 ) ^k + \sum _{ k \leq n - 1  } \binom { n - k - 2  } { k  } ( - 1 ) ^{ k + 1  } \\
& = \sum _{ k \leq n - 1  } \binom { n - 1 - k  } { k  } ( - 1 ) ^k + \binom { - 1  } { n  } ( - 1 ) ^n - ( \sum _{ k \leq n - 2  } \binom { n - 2 - k  } { k  } ( - 1 ) ^k + \binom { - 1  } { n - 1  } ( - 1 ) ^{ n - 1  } ) \\
& = \sum _{ k \leq n - 1  } \binom { n - 1 - k  } { k  } ( - 1 ) ^k - \sum _{ k \leq n - 1  } \binom { n - 2 - k  } { k  } ( - 1 ) ^k \\
& = R _{ n - 1  } - R _{ n - 2  } \\
& = R _{ n - 2  } - R _{ n - 3  } - R _{ n - 2  } \\
& = - R _{ n - 3  } \\
& = R _{ n - 6  } 
\end{aligned}</script><p>也即$R _n $具有周期性,不难计算前几项答案,最后有$Q _n \begin{cases}1 &amp; n = 0 \ 0 &amp; n  is  \mathrm { odd  } \ - 1 &amp; n &gt; 0 \land n  is  \mathrm { even  } \end{cases} $.</p>
<h5><span id="example2">Example2</span></h5><p>求$( \sum ^{ + \infty  } _{ i = 0  } C ^{ ik + r  } _{ nk  } ) \mod p $.</p>
<p>考虑设$f ( n , r ) = \sum ^{ + \infty  } _{ i = 0  } C ^{ ik + r  } _{ nk  } \ $,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n , r ) & = \sum ^{ + \infty  } _{ i = 0  } C ^{ ik + r  } _{ nk  } \\
& = \sum _{ i = 0  } ^{ + \infty  } \sum _{ j = 0  } ^k C _{ nk - k  } ^{ ik + r - j  } \times C _k ^j \\
& = \sum ^k _{ j = 0  } C _k ^j \sum _{ i = 0  } ^{ + \infty  } C _{ nk - k  } ^{ ik + r - j  } \\
& = \sum _{ j = 0  } ^k C _k ^j f ( n - 1 , r - j ) \\

\end{aligned}</script><p>整理上式,得到:$f ( n , r ) = \sum _{ j = 0  } ^k C _k ^j f ( n - 1 , r - j ) \ $.</p>
<p>于是我们得到了关于$f $的转移方程,可以矩阵加速.</p>
<h4><span id="利用微积分求解">利用微积分求解</span></h4><h5><span id="example">Example</span></h5><p>求$\sum _{ k = 1  } ^n k ^2 C _n ^k $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
( ( 1 + x ) ^n ) & = ( \sum _{ k = 0  } ^n C _n ^k x ^{ k  } ) \\
( ( 1 + x ) ^n ) ' & = ( \sum _{ k = 0  } ^n C _n ^k x ^{ k  } ) ' \\
n ( 1 + x ) ^{ n - 1  } & = \sum _{ k = 0  } ^n kC _n ^k x ^{ k - 1  } \\
nx ( 1 + x ) ^{ n - 1  } & = \sum _{ k = 0  } ^n kC _n ^k x ^{ k  } \\
( nx ( 1 + x ) ^{ n - 1  } ) ' & = ( \sum _{ k = 0  } ^n kC _n ^k x ^{ k  } ) ' \\
n ( ( 1 + x ) ^{ n - 1  } + ( n - 1 ) x ( 1 + x ) ^{ n - 2  } ) & = \sum _{ k = 0  } ^n k ^2 C _n ^k x ^{ k - 1  } \\

\end{aligned}</script><p>取$x = 1 $,则原式$= n ( n + 1 ) 2 ^{ n - 2  } $.</p>
<h4><span id="转化为二维平面">转化为二维平面</span></h4><h5><span id="example1">Example1</span></h5><p>多次询问给定$k , r $,$\sum k \leq 2 n , r &lt; 2 n - k $,求$\sum _{ i = 0  } ^{ r  } \frac { 1  } { 2 ^i  } \binom { i  } { n - k  } $,.</p>
<p>我们把模型抽象成:在二维平面上,从$( 0 , 0 ) $随机游走到$( n - k + 1 , r - n + k ) $正下方(包含这个点)的概率,容易发现此时向右走了$n - k $步,总共走了$\leq r $步,然后再向右走一步保证第一次走到了$( n - k + 1 , r - n + k ) $下方.</p>
<p>因为是概率,所以当我们已经确定这个事会发生的时候可以多走几步,不难发现这里的概率等价于走到$x + y = r + 1 $这条直线时横坐标$\geq n - k + 1 $的概率.枚举一下总共向上走了几步,就得到$\frac { 1  } { 2 ^{ r  }  } \sum _{ j = 0  } ^{ r - n + k  } \binom { r + 1  } { j  } $,注意这里是$\frac { 1  } { 2 ^r  } $,因为从一开始钦定了一步,因此映射过来需要多乘个$\frac { 1  } { 2  } $,反映射就要乘个$2 $.但是这个式子还是做不了,因为$r $并不满足$\sum r \leq 2 n $.我们需要另辟蹊径.</p>
<p>做一下补集转化转化成走到上方的概率,这个概率就等价于$1 - \frac { 1  } { 2 ^{ r  }  } \sum _{ i = 0  } ^{ n - k  } \binom { r + 1  } { i  } $.我们考虑暴力预处理出$f _r = \sum _{ i = 0  } ^{ n  } \binom { r  } { i  } $,每次删掉一个后缀的组合数就行.现在的问题在于$f $怎么做.</p>
<p>直接拆组合数,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _r & = \sum _{ i = 0  } ^n \binom { r  } { i  } \\
& = \sum _{ i = 0  } ^n \binom { r - 1  } { i - 1  } + \sum _{ i = 0  } ^n \binom { r - 1  } { i  } \\
& = 2 \sum _{ i = 0  } ^n \binom { r - 1  } { i  } - \binom { r - 1  } { n  } \\
& = 2 f _{ r - 1  } - \binom { r - 1  } { n  } 
\end{aligned}</script><h3><span id="lucas定理">Lucas定理</span></h3><p>若$p $是质数,则$C _n ^m \mod p = C _{ n \mod p  } ^{ m \mod p  } \times C _{ \lfloor \frac { n  } { p  } \rfloor  } ^{ \lfloor \frac { m  } { p  } \rfloor  } \mod p \ $.</p>
<p>或者说,将$n $和$m $在$p $进制下分解,再逐位求组合数并相乘.</p>
<p>证明:</p>
<p>首先,若$i \ne 0 $且$i \ne p $,$C _{ p  } ^i \equiv \frac { p  } { i  } C _{ p - 1  } ^{ i - 1  } \equiv 0 ( \mod p ) \ $.</p>
<p>而根据二项式定理,$( 1 + x ) ^p \equiv \sum _{ i = 0  } ^p C _{ p  } ^i x ^i = 1 + x ^p ( \mod p ) \ $.</p>
<p>令$n = k _1 p + b _1 $,$m = k _2 p + b _2 $,则$( 1 + x ) ^n = ( 1 + x ) ^{ k _1 p  } ( 1 + x ) ^{ b _1  } \ $.</p>
<p>而$( 1 + x ) ^{ k _1 p  } \equiv ( 1 + x ^p ) ^{ k _1  } ( \mod p ) \ $,有$( 1 + x ) ^n \equiv ( 1 + x ^p ) ^{ k _1  } ( 1 + x ) ^{ b _1  } \ $.</p>
<p>根据二项式定理,$C _n ^m \bmod p $即$x ^m $项的系数.</p>
<p>我们可以得出,$C _n ^m x ^m \equiv C _{ k _1  } ^{ k _2  } x ^{ k _2 p  } C _{ b 1  } ^{ b _2  } x ^{ b _2  } \pmod { p  } \ $,那么有$C _a ^b \equiv C _{ k _1  } ^{ k _2  } C _{ b _1  } ^{ b _2  } \pmod { p  } \ $.</p>
<p>另外,Lucas定理有一个很重要的推论是:</p>
<script type="math/tex; mode=display">
\binom { n  } { m  } \equiv [ m \subseteq n ] \pmod { 2  }</script><h5><span id="example1cf1770fkoxia-and-sequence">Example1([CF1770F]Koxia and Sequence)</span></h5><p>首先观察样例并思考,可以发现当$n $为偶数时,显然翻转整个序列就可以一一对应(除非翻转后与本身相同,但这种情况下异或值也是$0 $),所以异或值为$0 $.不然,我们可以翻转$a [ 2 . . . n ] $,得出答案应该是所有$a _1 $的异或和.</p>
<p>问题在于接下来怎么做,我们考虑把按位或的那个东西容斥掉.现在问题转化为:对于所有$y ‘ \subseteq y $,求出满足$a _i \subseteq y ‘ , \sum a _i = x $时,$a _1 $异或和.接下来怎么做呢?我们考虑拆位,若$2 ^k \subseteq y ‘ $,假设$a _1 $的第$k $位是$1 $,然后讨论此时它对答案是否会产生贡献.</p>
<p>我们不难发现,第$k $位贡献是:</p>
<script type="math/tex; mode=display">
[ 2 ^k \subseteq y ' ] \bigoplus _{ \sum a = x  } [ 2 ^k \subseteq a _1 ] \prod _{ i = 1  } ^n [ a _i \subseteq y ' ]</script><p>这个东西看上去没办法做,但我们突然想到个事:Lucas定理的推论:$[ x \subseteq y ] \equiv \binom { y  } { x  } \pmod { 2  } $.</p>
<p>所以原式化简为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\binom { y '  } { 2 ^k  } \sum _{ \sum a = x  } \binom { a _1  } { 2 ^k  } \prod _{ i = 1  } ^n \binom { y '  } { a _i  } \pmod { 2  } \\
& = \binom { y '  } { 2 ^k  } \sum _{ a _1  } \binom { y ' - 2 ^k  } { a _1 - 2 ^k  } \sum _{ \sum a = x - a _1  } \prod _{ i = 2  } ^n \binom { y '  } { a _i  } \pmod { 2  } \\

\end{aligned}</script><p>然后呢?不难发现后面那一串是范德蒙德卷积的形式,就可以写成:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\binom { y '  } { 2 ^k  } \sum _{ a _1  } \binom { y ' - 2 ^k  } { a _1 - 2 ^k  } \binom { ( n - 1 ) y '  } { x - a _1  } \pmod { 2  } \\
& = \binom { y '  } { 2 ^k  } \binom { ny ' - 2 ^k  } { x - 2 ^k  } \pmod { 2  } \\
& = [ 2 ^k \subseteq y ' ] [ ( x - 2 ^k ) \subseteq ( ny ' - 2 ^k ) ] 
\end{aligned}</script><h3><span id="扩展lucas定理">扩展Lucas定理</span></h3><p>令$p = \prod p _i ^{ e _i  } $,那我们只要对于每个$i $求出$C _n ^m \mod p _i ^{ e _i  } $,然后使用中国剩余定理合并即可.</p>
<p>那现在问题转化为要求$C _n ^m \mod p ^k $,其中$p \in prime $.</p>
<p>原式$= \frac { n !  } { m ! ( n - m ) !  } \mod p ^k = \frac { \frac { n !  } { p ^x  }  } { \frac { m !  } { p ^y  } \frac { ( n - m ) !  } { p ^z  }  } p ^{ x - y - z  } \mod p ^k \ $.</p>
<p>现在问题转化为求$\frac { n !  } { p ^x  } \mod p ^k 以 及 p ^x \ $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ! & = \prod _{ i = 1  } i \\
& = ( \prod _{ i = wp , w \in \mathbb { Z  }  } i ) ( \prod _{ i \ne wp , w \in \mathbb { Z  }  } i ) \\
& = p ^{ \lfloor n p \rfloor  } ( \lfloor n p \rfloor ! ) ( \prod _{ i \ne wp , w \in \mathbb { Z  }  } i ) \\
& \equiv p ^{ \lfloor \frac { n  } { p  } \rfloor  } ( \lfloor \frac { n  } { p  } \rfloor ! ) ( \prod _{ i = 1 , i \ne wp , w \in \mathbb { Z  }  } ^{ p ^k  } i ) ^{ \lfloor \frac { n  } { p ^k  } \rfloor  } ( \prod ^{ n \ \bmod { p ^k  }  } _{ i = p ^k \lfloor \frac { n  } { p ^k  } \rfloor , i \ne wp , w \in \mathbb { Z  }  } i ) ( \mod p ^k ) 
\end{aligned}</script><p>递归求解即可.</p>
<p>ps:</p>
<p>这样摆式子可能非常难以理解,我们考虑将$[ 1 , n ] $的所有数全部排成一个宽为$p ^k $的矩阵.</p>
<p>那右边第一项就是把那些$p $的倍数的列拿出来,第二项是那些填满的行,第三项是最后没填满的一行.</p>
<h2><span id="斯特林数">斯特林数</span></h2><h3><span id="第一类斯特林数">第一类斯特林数</span></h3><p>$n \brack k \ $:长度为$n $的排列划分成$k $个轮换的方案数.</p>
<p>考虑现在已经将$n - 1 $个数分成了若干轮换,现在新加入第$n $个数.这个数要么和其他的数一起组成轮换,要么自己形成自环.</p>
<p>而由于它可以插入前面轮换的任意位置,显然$\left [ \begin{array}{ c  } n \ k \end{array} \right ] = ( n - 1 ) \left [ \begin{array}{ c  } n - 1 \ k \end{array} \right ] + \left [ \begin{array}{ c  } n - 1 \ k - 1 \end{array} \right ] \ $.</p>
<p>特别地,我们定义$\left [ \begin{array}{ c  } 0 \ k \end{array} \right ] = [ k = 0 ] \ $.</p>
<p>由于所有的排列都由若干置换组成,因此我们有:$\sum _{ k = 0  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] = n ! $.</p>
<h3><span id="第二类斯特林数">第二类斯特林数</span></h3><p>$\left \{ \begin{array}{ c  } n \ k \end{array} \right \} $:将$n $个本质不同的物品划分成k个非空集合的方案数.</p>
<p>考虑现在已经放好$n - 1 $个物品,正要放入第$n $个物品.那么这个物品要么单独放在一起,要么和其他物品放在一起.显然$\left \{ \begin{array}{ c  } n \ k \end{array} \right \} = k \left \{ \begin{array}{ c  } n - 1 \ k \end{array} \right \} + \left \{ \begin{array}{ c  } n - 1 \ k - 1 \end{array} \right \} \ $.</p>
<p>特别地,我们定义$\left \{ \begin{array}{ c  } 0 \ k \end{array} \right \} = [ k = 0 ] \ $.</p>
<h3><span id="斯特林数的扩展">斯特林数的扩展</span></h3><p>如果我们让斯特林数的定义式扩展到整数域,我们可以发现一个性质:${ n \brack m  } = { - m \brace - n  } \ $.</p>
<h3><span id="基本斯特林恒等式">基本斯特林恒等式</span></h3><ol>
<li>$x ^n = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } n \ k \end{array} \right \} x ^{ \underline { k  }  } = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } n \ k \end{array} \right \} ( - 1 ) ^{ n - k  } x ^{ \overline { k  }  } \ $.</li>
</ol>
<p>证明:先考虑前半段,不妨使用数学归纳.若$x ^{ n - 1  } = \sum _{ k = 0  } ^{ n - 1  } \left \{ \begin{array}{ c  } n - 1 \ k \end{array} \right \} x ^{ \underline { k  }  } \ $,我们要证</p>
<p>\\</p>
<script type="math/tex; mode=display">
\begin{aligned}
x \sum _{ k = 0  } ^{ n - 1  } \left \{ \begin{array}
{ c  } n - 1 \\
k 
\end{array} \right \} x ^{ \underline { k  }  } & = \sum _{ k = 0  } ^{ n  } \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} x ^{ \underline { k  }  } \\

\end{aligned}</script><p>考虑$( x - k ) x ^{ \underline { k  }  } = x ^{ \underline { k + 1  }  } $,所以$x \cdot x ^{ \underline { k  }  } = x ^{ \underline { k + 1  }  } + kx ^{ \underline { k  }  } \ $.那么左边即:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^{ n - 1  } \left \{ \begin{array}
{ c  } n - 1 \\
k 
\end{array} \right \} x ^{ \underline { k + 1  }  } + \sum _{ k = 0  } ^{ n - 1  } \left \{ \begin{array}
{ c  } n - 1 \\
k 
\end{array} \right \} kx ^{ \underline { k  }  } \\
& = \sum _{ k = 1  } ^{ n  } \left \{ \begin{array}
{ c  } n - 1 \\
k - 1 
\end{array} \right \} x ^{ \underline { k  }  } + \sum _{ k = 1  } ^{ n  } \left \{ \begin{array}
{ c  } n - 1 \\
k 
\end{array} \right \} kx ^{ \underline { k  }  } \\
& = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} x ^{ \underline { k  }  } \\
\\

\end{aligned}</script><p>至于后半段,由于$x ^{ \underline { n  }  } = ( - 1 ) ^n ( - x ) ^{ \overline { n  }  } \ $,所以$x ^n = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } n \ k \end{array} \right \} ( - 1 ) ^k ( - x ) ^{ \overline { k  }  } \ $.</p>
<p>不妨用$x $来代替$- x $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( - x ) ^n & = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} ( - 1 ) ^k ( x ) ^{ \overline { k  }  } \\
x ^n & = \sum _{ k = 0  } ^n \left \{ \begin{array}
{ c  } n \\
k 
\end{array} \right \} ( - 1 ) ^{ n - k  } x ^{ \overline { k  }  } 
\end{aligned}</script><ol>
<li><p>$x ^{ \overline { n  }  } = \sum _{ k = 0  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] x ^k \ $.</p>
</li>
<li><p>$x ^{ \underline { n  }  } = \sum _{ k = 0  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] ( - 1 ) ^{ n - k  } x ^k \ $.</p>
</li>
</ol>
<p>证明:</p>
<p>先考虑前者,由于$( x + n - 1 ) x ^k = x ^{ k + 1  } + ( n - 1 ) x ^k \ $,所以类似于(1)前半段的推导即可得到,后者同样可以使用下降幂和上升幂的转化来得到.</p>
<ol>
<li>反转公式:$\sum _{ k = 0  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] \left \{ \begin{array}{ c  } k \ m \end{array} \right \} ( - 1 ) ^{ n - k  } = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } n \ k \end{array} \right \} \left [ \begin{array}{ c  } k \ m \end{array} \right ] ( - 1 ) ^{ n - k  } = [ m = n ] \ $.</li>
</ol>
<p>证明:</p>
<p>考虑先证明后半部分,将(3)带入(1),得到$x ^n = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } n \ k \end{array} \right \} x ^{ \underline { k  }  } = \sum _{ k = 0  } ^n \sum _{ m = 0  } ^k \left \{ \begin{array}{ c  } n \ k \end{array} \right \} \left [ \begin{array}{ c  } k \ m \end{array} \right ] ( - 1 ) ^{ n - k  } x ^m \ $.</p>
<p>由于这对任意$x $都成立,因此右边除了$x ^n $以外的项系数均为$0 $,而$x ^n $的系数为$1 $.前半部分是同理的.这个公式是斯特林反演的基础.</p>
<ol>
<li><p>$\left \{ \begin{array}{ c  } n + 1 \ m + 1 \end{array} \right \} = \sum _{ k = m  } ^n \left ( \begin{array}{ c  } n \ k \end{array} \right ) \left \{ \begin{array}{ c  } k \ m \end{array} \right \} \ $.</p>
</li>
<li><p>$\left [ \begin{array}{ c  } n + 1 \ m + 1 \end{array} \right ] = \sum _{ k = m  } ^n \left ( \begin{array}{ c  } n \ k \end{array} \right ) \left [ \begin{array}{ c  } k \ m \end{array} \right ] \ $.</p>
</li>
</ol>
<p>证明:对于前者,考虑组合意义,将$n + 1 $个分为$m + 1 $组,也就是先找一部分分成$m $组,再把剩下的分到一组.对于后者,也可以同样考虑组合意义.</p>
<h3><span id="补充斯特林恒等式">补充斯特林恒等式</span></h3><ol>
<li><p>$\left \{ \begin{array}{ c  } n \ m \end{array} \right \} = \sum _{ k = m  } ^n \left ( \begin{array}{ c  } n \ k \end{array} \right ) \left \{ \begin{array}{ c  } k + 1 \ m + 1 \end{array} \right \} ( - 1 ) ^{ n - k  } \ $.</p>
</li>
<li><p>$\left [ \begin{array}{ c  } n \ m \end{array} \right ] = \sum _{ k = m  } ^n \left ( \begin{array}{ c  } n \ k \end{array} \right ) \left [ \begin{array}{ c  } k + 1 \ m + 1 \end{array} \right ] ( - 1 ) ^{ n - k  } \ $.</p>
</li>
</ol>
<p>证明:由(5)(6),根据二项式反演可知.</p>
<ol>
<li>$m ! \left \{ \begin{array}{ c  } n \ m \end{array} \right \} = \sum _{ k = 0  } ^m C _m ^k k ^n ( - 1 ) ^{ m - k  } \ $.</li>
</ol>
<p>证明:首先有$m ^n = \sum _{ k = 0  } ^m m ^{ \underline { k  }  } \left \{ \begin{array}{ c  } m \ k \end{array} \right \} = \sum _{ k = 0  } ^m k ! C _m ^k \left \{ \begin{array}{ c  } m \ k \end{array} \right \} \ $,对这个式子进行二项式反演即可.</p>
<ol>
<li>$\left \{ \begin{array}{ c  } n + 1 \ m + 1 \end{array} \right \} = \sum _{ k = 0  } ^n \left \{ \begin{array}{ c  } k \ m \end{array} \right \} ( m + 1 ) ^{ n - k  } \ $.</li>
</ol>
<p>证明:</p>
<p>考虑组合意义,相当于先把前$k $个分为$m $组,把第$k + 1 $个数放到第$m + 1 $组.然后剩下$( n + 1 ) - ( k + 1 ) = n - k $个随便放.相当于我们按照每组所放的数的最小值区分每组.由于这么做,第$m + 1 $组(最小值最大的那组)在$k $不同的时候最小值是不同的,因此一定不重不漏.</p>
<ol>
<li>$\left [ \begin{array}{ c  } n + 1 \ m + 1 \end{array} \right ] = \sum _{ k = 0  } ^n \left [ \begin{array}{ c  } k \ m \end{array} \right ] C _{ n  } ^k ( n - k ) ! = n ! \sum _{ k = 0  } ^n \frac { \left [ \begin{array}{ c  } k \ m \end{array} \right ]  } { k !  } \ $.</li>
</ol>
<p>证明:</p>
<p>先考虑前半部分,首先如果$n &gt; 0 $,我们有$\left [ \begin{array}{ c  } n \ 1 \end{array} \right ] = ( n - 1 ) ! \ $.这个式子很显然,我们现在有一个长度为$n - 1 $的环,想要往里插入第$n $个数有$n - 1 $种选择,所以我们有:$\left [ \begin{array}{ c  } n \ 1 \end{array} \right ] = \left [ \begin{array}{ c  } n - 1 \ 1 \end{array} \right ] ( n - 1 ) \ $,数学归纳一下即可.</p>
<p>那么前半部分的组合意义就是:考虑将$n + 1 $个数划分成$m + 1 $个环,我们先将其中$k $个数划分成$m $个环,剩下$n + 1 - k $个数划分成另一个环.但是这样算显然会算重,所以我们只需要勒令第$n + 1 $个数在最后一个环里即可.该证明就显然了.</p>
<p>而由于$C _n ^k ( n - k ) ! = C _n ^{ n - k  } ( n - k ) ! = n ^{ \underline { n - k  }  } = \frac { n !  } { k !  } \ $.因此后半部分也得证.</p>
<ol>
<li><p>$\left \{ \begin{array}{ c  } n + m + 1 \ m \end{array} \right \} = \sum _{ k = 0  } ^m k \left \{ \begin{array}{ c  } n + k \ k \end{array} \right \} \ $.</p>
</li>
<li><p>$\left [ \begin{array}{ c  } n + m + 1 \ m \end{array} \right ] \sum _{ k = 0  } ^m ( n + k ) \left [ \begin{array}{ c  } n + k \ k \end{array} \right ] \ $.</p>
</li>
</ol>
<p>证明:</p>
<p>先考虑前者,我们将$n + k $个位置分到$k $个集合之后.还剩下$( n + m + 1 ) - ( n + k ) = ( m - k + 1 ) $个数,剩下$( m - k ) $个集合.</p>
<p>拿出来$( n + k + 1 ) $这个数,剩下的数刚好够每个集合放一个.最后枚举一下把$( n + k + 1 ) $放在哪里即可.由于每个划分一定存在一段(可能是$0 $)单独自己集合的后缀.所以这个递推成立.后者也可以同样证明.</p>
<ol>
<li>$C _n ^m ( n - 1 ) ^{ \underline { n - m  }  } = \sum _{ k = m  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] \left \{ \begin{array}{ c  } k \ m \end{array} \right \} \ $.</li>
</ol>
<p>证明:</p>
<p>考虑$( n - 1 ) ^{ \underline { n - m  }  } = \frac { ( n - 1 ) !  } { ( m - 1 ) !  } \ $,不妨设$f ( n , m ) = \sum _{ k = m  } ^n \left [ \begin{array}{ c  } n \ k \end{array} \right ] \left \{ \begin{array}{ c  } k \ m \end{array} \right \} \ $,相当于将$n $个数分成非空$m $组,然后组内的数要形成若干轮换的方案数.那么知道$f ( n , m ) = f ( n - 1 , m - 1 ) + ( n - 1 + m ) f ( n - 1 , m ) \ $.</p>
<p>设$g ( n , m ) = C _n ^m \frac { ( n - 1 ) !  } { ( m - 1 ) !  } = \frac { n ! ( n - 1 ) !  } { m ! ( n - m ) ! ( m - 1 ) !  } \ $,那么知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( n - 1 , m - 1 ) & = \frac { ( n - 1 ) ! ( n - 2 ) !  } { ( m - 1 ) ! ( n - m ) ! ( m - 2 ) !  } \\
g ( n - 1 , m ) & = \frac { ( n - 1 ) ! ( n - 2 ) !  } { m ! ( n - 1 - m ) ! ( m - 2 ) !  } \\

\end{aligned}</script><p>显然$g ( n , m ) = g ( n - 1 , m - 1 ) + ( n - 1 + m ) g ( n - 1 , m ) \ $,数学归纳即可.</p>
<ol>
<li><p>$C _n ^m = \frac { n !  } { m ! ( n - m ) !  } = \sum _{ k = m  } ^n \left \{ \begin{array}{ c  } n + 1 \ k + 1 \end{array} \right \} \left [ \begin{array}{ c  } k \ m \end{array} \right ] ( - 1 ) ^{ m - k  } \ $.</p>
</li>
<li><p>$n ^{ \underline { n - m  }  } = \frac { n !  } { m !  } = \sum _{ k = m  } ^n \left [ \begin{array}{ c  } n + 1 \ k + 1 \end{array} \right ] \left \{ \begin{array}{ c  } k \ m \end{array} \right \} ( - 1 ) ^{ m - k  } ， 其 中 m \leq n \ $.</p>
</li>
</ol>
<p>证明:考虑(5)(6),对其做一遍斯特林反演即可.</p>
<ol>
<li><p>$\left \{ \begin{array}{ c  } n \ l + m \end{array} \right \} C _{ l + m  } ^l = \sum _{ k = l  } ^n \left \{ \begin{array}{ c  } k \ l \end{array} \right \} \left \{ \begin{array}{ c  } n - k \ m \end{array} \right \} C _n ^k \ $.</p>
</li>
<li><p>$\left [ \begin{array}{ c  } n \ l + m \end{array} \right ] C _{ l + m  } ^l = \sum _{ k = l  } ^n \left [ \begin{array}{ c  } k \ l \end{array} \right ] \left [ \begin{array}{ c  } n - k \ m \end{array} \right ] C _n ^k \ $.</p>
</li>
</ol>
<p>证明:先考虑前者,左边即先将$n $个数分为$l + m $个集合,然后再挑出$l $个集合.那不妨枚举这$l $个集合中是哪些数,然后再进行分配.后者同理.</p>
<h2><span id="欧拉数">欧拉数</span></h2><p>记$\left \langle \begin{array}\ n \ k \end{array} \right \rangle $表示$\{ 1 , 2 , . . . , n \} $的排列$a $中满足这条性质的排列个数:存在且只存在$k $个升高,换句话说,存在且只存在$k $个$i $,满足$1 \leq i &lt; n $,$a _i &lt; a _{ i + 1  } $.不难发现$\left \langle \begin{array}\ n \ k \end{array} \right \rangle = \left \langle \begin{array}\ n \ n - k - 1 \end{array} \right \rangle $.</p>
<p>考虑在一个$\{ 1 , 2 , . . . , n - 1 \} $的排列中插入$n $,设插入的位置是原本$a _i $的后面,那么要么原本$a _i &lt; a _{ i + 1  } $,要么反之.前者不会改变排列的升高的数量,后者则会增加$1 $.另外还有一种情况是插入到了序列最前面.于是我们自然得到:$\left \langle \begin{array}\ n \ k \end{array} \right \rangle = ( k + 1 ) \left \langle \begin{array}\ n - 1 \ k \end{array} \right \rangle + ( n - k ) \left \langle \begin{array}\ n - 1 \ k - 1 \end{array} \right \rangle $.</p>
<p>特别地,我们令$\left \langle \begin{array}\ 0 \ k \end{array} \right \rangle = [ k = 0 ] $,若$k &lt; 0 $,则$\left \langle \begin{array}\ n \ k \end{array} \right \rangle = 0 $.</p>
<h3><span id="欧拉数与二项式系数">欧拉数与二项式系数</span></h3><p>我们有Worpitzky恒等式:</p>
<script type="math/tex; mode=display">
x ^n = \sum _{ k \geq 0  } \binom { x + k  } { n  } \left \langle \begin{array}
\\
n \\
k 
\end{array} \right \rangle , n \in \mathbb { N  }</script><p>还有另一个恒等式:</p>
<script type="math/tex; mode=display">
\left \langle \begin{array}
\\
n \\
m 
\end{array} \right \rangle = \sum _{ k = 0  } ^m \binom { n + 1  } { k  } ( m + 1 - k ) ^n ( - 1 ) ^k</script><p>剩下的不会了.</p>
<h2><span id="伯努利数">伯努利数</span></h2><p>定义$B _j $为第$j $个伯努利数,且满足$\sum _{ j = 0  } ^m \binom { m + 1  } { j  } B _j = [ m = 0 ] , m \geq 0 \ $.</p>
<p>定义$S _m ( n ) = \sum _{ i = 0  } ^{ n - 1  } i ^m $.</p>
<p>伯努利数满足公式:$S _m ( n ) = \cfrac { 1  } { m + 1  } \sum _{ k = 0  } ^m \binom { m + 1  } { k  } B _k n ^{ m + 1 - k  } \ $.</p>
<p>证明如下:</p>
<p>对$S _{ m + 1  } ( n ) $使用扰动法,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _{ m + 1  } ( n ) + n ^{ m + 1  } & = \sum _{ k = 0  } ^{ n - 1  } ( k + 1 ) ^{ m + 1  } \\
& = \sum _{ k = 0  } ^{ n - 1  } \sum _{ j = 0  } ^{ m + 1  } \binom { m + 1  } { j  } k ^j \\
& = \sum _{ j = 0  } ^{ m + 1  } \binom { m + 1  } { j  } S _j ( n ) \\
& = \sum _{ j = 0  } ^{ m  } \binom { m + 1  } { j  } S _j ( n ) + S _{ m + 1  } ( n ) \\
n ^{ m + 1  } & = \sum _{ j = 0  } ^m \binom { m + 1  } { j  } S _j ( n ) \\

\end{aligned}</script><p>接下来使用数学归纳,假设$0 \leq j &lt; m $时该公式成立,并假设有$S _m ( n ) = \cfrac { 1  } { m + 1  } \sum _{ k = 0  } ^m \binom { m + 1  } { k  } B _k n ^{ m + 1 - k  } + \Delta \ $,我们只需要证明$\Delta = 0 $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ^{ m + 1  } & = \sum _{ j = 0  } ^m \binom { m + 1  } { j  } \cfrac { 1  } { j + 1  } \sum _{ k = 0  } ^j \binom { j + 1  } { k  } B _k n ^{ j + 1 - k  } + ( m + 1 ) \Delta \\
& = \sum _{ 0 \leq k \leq j \leq m  } \binom { j + 1  } { k  } \binom { m + 1  } { j  } \cfrac { 1  } { j + 1  } B _k n ^{ j + 1 - k  } + ( m + 1 ) \Delta \\
& = \sum _{ 0 \leq k \leq j \leq m  } \binom { j + 1  } { j - k  } \binom { m + 1  } { j  } \cfrac { 1  } { j + 1  } B _{ j - k  } n ^{ k + 1  } + ( m + 1 ) \Delta \\
& = \sum _{ 0 \leq k \leq j \leq m  } \binom { j + 1  } { k + 1  } \binom { m + 1  } { j  } \cfrac { 1  } { j + 1  } B _{ j - k  } n ^{ k + 1  } + ( m + 1 ) \Delta \\
& = \sum _{ 0 \leq k \leq m  } \cfrac { n ^{ k + 1  }  } { k + 1  } \sum _{ j = k  } ^m B _{ j - k  } \binom { m + 1  } { j  } \binom { j  } { k  } + ( m + 1 ) \Delta \\
& = \sum _{ 0 \leq k \leq m  } \cfrac { n ^{ k + 1  }  } { k + 1  } \binom { m + 1  } { k  } \sum _{ j = k  } ^m B _{ j - k  } \binom { m + 1 - k  } { j - k  } + ( m + 1 ) \Delta \\
& = \sum _{ k = 0  } ^m \cfrac { n ^{ k + 1  }  } { k + 1  } \binom { m + 1  } { k  } \sum _{ j = 0  } ^{ m - k  } B _{ j  } \binom { m + 1 - k  } { j  } + ( m + 1 ) \Delta \\
& = \sum _{ k = 0  } ^m \cfrac { n ^{ k + 1  }  } { k + 1  } \binom { m + 1  } { k  } [ m - k & = 0 ] + ( m + 1 ) \Delta \\
& = n ^{ m + 1  } + ( m + 1 ) \Delta 
\end{aligned}</script><p>显然$\Delta = 0 $,上式成立.</p>
<h2><span id="斐波那契数">斐波那契数</span></h2><p>定义斐波那契数$F _n = \begin{cases}0 &amp; n = 0 \ 1 &amp; n = 1 \ F _{ n - 1  } + F _{ n - 2  } &amp; n &gt; 1 \end{cases} $.</p>
<h3><span id="斐波那契数的扩展定义">斐波那契数的扩展定义</span></h3><p>首先根据数学归纳,不难证明卡西尼恒等式:</p>
<script type="math/tex; mode=display">
F _{ n + 1  } F _{ n - 1  } - F _n ^2 = ( - 1 ) ^n , n > 0</script><p>事实上,如果我们将斐波那契数的递推式改写作:$F _n = F _{ n + 2  } - F _{ n + 1  } $,我们可以在$n \in \mathbb { Z  } $的时候定义斐波那契数,同样也是满足上面的恒等式的,而且我们可以发现:</p>
<script type="math/tex; mode=display">
F _{ - n  } = ( - 1 ) ^{ n - 1  } F _n , n \in \mathbb { Z  }</script><h3><span id="斐波那契数与数论">斐波那契数与数论</span></h3><p>如果我们考虑不断使用斐波那契递推式展开,不难发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F _{ n + k  } & = F _k F _{ n + 1  } + F _{ k - 1  } F _n \\
F _{ n + m + 1  } & = F _{ n + 1  } F _{ m + 1  } + F _n F _m 
\end{aligned}</script><p>另外,如果我们在上面这个式子中取$k = wn , w \in \mathbb { N  } $并使用归纳法,我们又可以得到一个性质:$F _{ kn  } $是$F _n $的倍数,$k \in \mathbb { Z  } $.</p>
<p>再观察这个式子,使用归纳法可以证明$\gcd ( F _{ n  } , F _{ n - 1  } ) = 1 $,进一步有:$\gcd ( F _{ n + m  } , F _m ) = \gcd ( F _n , F _m ) $.</p>
<p>如果我们推广这个结论,就可以得到一个重要的性质:</p>
<script type="math/tex; mode=display">
\gcd ( F _m , F _n ) = F _{ \gcd ( n , m )  }</script><p>如果我们再一次推广这个结论,可以得到马蒂亚舍维奇引理:</p>
<script type="math/tex; mode=display">
F _n ^2 | F _m \Leftrightarrow nF _n | m , n > 2</script><p>这个引理的证明如下:</p>
<p>由于$F _{ n + 1  } \equiv F _{ n - 1  } \pmod { F _n  } $.于是我们有:$F _{ 2 n  } = F _n F _{ n + 1  } + F _{ n - 1  } F _n $,也就是$F _{ 2 n  } \equiv 2 F _n F _{ n + 1  } \pmod { F _n ^2  } $.</p>
<p>另外我们有:$F _{ 2 n + 1  } \equiv F _{ n + 1  } ^2 \pmod { F _n ^2  } $.</p>
<p>同理,使用归纳法可以证明:$F _{ kn  } \equiv kF _n F _{ n + 1  } ^{ k - 1  } \pmod { F _n ^2  } , F _{ kn + 1  } \equiv F _{ n + 1  } ^k \pmod { F _n ^2  } $.</p>
<p>而$F _{ n + 1  } \bot F _n $,于是$F _{ kn  } \equiv 0 \pmod { F _n ^2  } \Leftrightarrow k \equiv 0 \pmod { F _n  } , n &gt; 2 $.</p>
<h3><span id="斐波那契数系">斐波那契数系</span></h3><p>我们如果定义$j \gg k \Leftrightarrow j \geq k + 2 $,那么有齐肯多夫定理:</p>
<p>每个正整数都有唯一的表示方式满足:$n = \sum _{ i = 1  } ^r F _{ k _i  } , \forall 1 \leq i &lt; r , k _i \gg k _{ i + 1  } \gg 0 $.</p>
<p>首先证明存在性:我们考虑数学归纳,对于一个数n,如果$\exists k $满足$F _k = n $,则显然成立,不然,应$\exists k $满足$F _k &lt; n &lt; F _{ k + 1  } $,而$n - F _k $的表示已经存在了.另外,由于$n - F _k &lt; F _{ k + 1  } - F _k = F _{ k - 1  } $,因此必定不可能出现选了$F _k $又选了$F _{ k - 1  } $的情况,存在性得证.</p>
<p>至于唯一性,如果我们不选择$F _k $而是选择$F _{ k - 1  } $,那么显然接下来无论怎么选,它们的加和都不可能大于等于$F _k $,因此一定是唯一的.</p>
<p>这样的话,我们可以将一个自然数$n $以斐波那契数的形式表示出来.</p>
<h3><span id="斐波那契数的封闭形式">斐波那契数的封闭形式</span></h3><p>使用生成函数,令$F ( z ) = \sum _{ k \geq 0  } F _k z ^k $.那么不难发现$F ( z ) - zF ( z ) - z ^2 F ( z ) = z $,也就是$F ( z ) = \cfrac { z  } { 1 - z - z ^2  } $.</p>
<p>考虑这个形式一定可以分解为$F ( z ) = \cfrac { a  } { 1 - \alpha z  } + \cfrac { b  } { 1 - \beta z  } $的形式,而这两种形式对应的生成函数都很显然.</p>
<p>进行因式分解,如果令$\phi = \cfrac { 1 + \sqrt { 5  }  } { 2  } , \hat \phi = \cfrac { 1 - \sqrt { 5  }  } { 2  } $,那么可以得到$F _n = \cfrac { 1  } { \sqrt { 5  }  } ( \phi ^n - \hat \phi ^n ) $.</p>
<p>另外,由于$\hat \phi ^n $的影响很小,于是又有$F _n = \lfloor \cfrac { \phi ^n  } { \sqrt { 5  }  } + 0 . 5 \rfloor $.</p>
<h3><span id="连项式">连项式</span></h3><p>连项式多项式$K _n ( x _1 , x _2 , . . . , x _n ) $定义为:$K _n ( x _1 , x _2 , . . . , x _n ) = \begin{cases}1 &amp; n = 0 \ x _1 &amp; n = 1 \ x _n K _{ n - 1  } ( x _1 , x _2 , . . . x _{ n - 1  } ) + K _{ n - 2  } ( x _1 , x _2 , . . . , x _{ n - 2  } ) &amp; n \geq 2 \end{cases} $.</p>
<p>通过定义不难发现:$K _n ( 1 , 1 , . . . , 1 ) = F _{ n + 1  } $.</p>
<p>继续观察式子,会发现它递归的过程相当于枚举是否消掉相邻的一对数$( x _{ n - 1  } , x _n ) $.我们考虑用这样一种形式的字符串来表示最后某一项的情况:’.’为还没有消除掉的项,长度为$1 $;’-‘为已经消除了的两项,长度为$2 $.那么$K _n ( x _1 , x _2 , . . . , x _n ) $就可以表示为一个长度为$n $的字符串,其中若有$k $个’-‘,有$n - 2 k $个’.’,则有$\binom { n - k  } { k  } $种不同的排列方式.</p>
<p>于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
K _n ( z , z , . . . , z ) & = \sum _{ k = 0  } ^n \binom { n - k  } { k  } z ^{ n - 2 k  } \\

\end{aligned}</script><p>另外,这也导出:$F _{ n + 1  } = \sum _{ k = 0  } ^n \binom { n - k  } { k  } \ $.</p>
<p>考虑上面的构造过程,不难发现$K _n ( x _1 , x _2 , . . . , x _n ) = K _n ( x _n , x _{ n - 1  } , . . . , x _1 ) $.</p>
<p>于是递归式可以写成:$K _n ( x _1 , x _2 , . . . , x _n ) = x _1 K _{ n - 1  } ( x _2 , x _3 , . . . x _{ n  } ) + K _{ n - 2  } ( x _3 , x _4 , . . . , x _{ n  } ) $.</p>
<p>进一步地,不断展开后得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
K _{ m + n  } ( x _1 , . . . , x _m , x _{ m + 1  } , . . . , x _{ n + m  } ) & = \\
K _m ( x _1 , . . . , x _m ) K _n ( x _{ m + 1  } , . . . , x _{ n + m  } ) + K _{ m - 1  } ( x _1 , . . . , x _{ m - 1  } ) K _{ n - 1  } ( x _{ m + 2  } , . . . , x _{ n + m  } ) 
\end{aligned}</script><p>另外,根据连项式的定义,不难导出$K _n ( x _1 , . . . , x _n + y ) = K _n ( x _1 , . . . , x _n ) + K _{ n - 1  } ( x _1 , . . . , x _{ n - 1  } ) y $.</p>
<p>由这个公式可以推出:$\cfrac { K _{ n + 1  } ( a _0 , . . . , a _n )  } { K _n ( a _1 , . . . , a _n )  } = \cfrac { K _n ( a _0 , . . . , a _{ n - 1  } + \cfrac { 1  } { a _n  } )  } { K _{ n - 1  } ( a _1 , . . . , a _{ n - 1  } + \cfrac { 1  } { a _n  } )  } $.</p>
<p>不断做这个迭代,于是我们可以得到连项式与连分数之间的关系:</p>
<script type="math/tex; mode=display">
\cfrac { K _{ n + 1  } ( a _0 , . . . , a _n )  } { K _n ( a _1 , . . . , a _n )  } = a _0 + \cfrac { 1  } { a _1 + \cfrac { 1  } { a _2 + \cfrac { 1  } { a _3 + . . .  }  }  }</script><p>另外,这个与数论中的Stern-Brocot树有很大关系,暂略.</p>
]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式与生成函数</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B8%8E%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="高数基础补档">高数基础补档</span></h2><h3><span id="复数相关">复数相关</span></h3><p>棣莫弗定理:$( cos \theta + i \sin \theta ) ^n = \cos ( n \theta ) + i \sin ( n \theta ) $.</p>
<p>欧拉公式:$e ^{ i \pi  } = - 1 $.</p>
<p>也就是$e ^{ 2 i \pi  } = 1 $,同时又有$e ^{ i \theta  } = cos \theta + i · sin \theta $,证明直接使用泰勒展开.</p>
<p>单位根:对于$x ^n = 1 $,我们会有$n $个根,设第$k $个根为$\omega _n ^k $.那么我们有:$\omega _n ^k = e ^{ 2 \pi \frac { k  } { n  } i  } = cos ( 2 \pi \frac { k  } { n  } ) + i · sin ( 2 \pi \frac { k  } { n  } ) $.</p>
<p>单位根有以下性质:</p>
<ol>
<li><p>折半引理:$\omega _{ 2 n  } ^{ 2 k  } = \omega _n ^k \ $,由我们上面推导的通项公式即可证明.</p>
</li>
<li><p>消去引理:$\omega _n ^{ k + \frac { n  } { 2  }  } = - \omega _n ^k \ $,同样使用通项，运用三角恒等变换可证明.</p>
</li>
</ol>
<h4><span id="分圆多项式">分圆多项式</span></h4><p>上复平面,设$S _k = ( \cos \frac { 2 k \pi  } { n  } , \sin \frac { 2 k \pi  } { n  } ) $,也就是$z _k = \cos \frac { 2 k \pi  } { n  } + i \sin \frac { 2 k \pi  } { n  } $是方程$z ^n - 1 = 0 $的复根.我们把这个方程写开:</p>
<script type="math/tex; mode=display">
z ^n - 1 = ( z - 1 ) ( z ^{ n - 1  } + z ^{ n - 2  } + \cdots + 1 ) = 0</script><p>不难发现$z = 1 $是平凡解.</p>
<p>我们不妨定义$f ( x ) = \prod _{ k = 1  } ^n ( 1 + X ^k ) = \sum _{ k \geq 0  } a _k X ^k $,事实上我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { n  } \sum _{ j = 1  } ^n f ( \omega _n ^j ) & = \frac { 1  } { n  } \sum _{ j = 1  } ^n \sum _{ k \geq 0  } a _k \omega ^{ kj  } _n \\
& = \frac { 1  } { n  } \sum _{ k \geq 0  } a _k \sum _{ j = 1  } ^n \omega _{ n  } ^{ kj  } \\
& = \sum _{ j \geq 0  } a _{ jn  } + \frac { 1  } { n  } \sum _{ k \geq 0 , n \nmid k  } a _k \frac { 1 - \omega ^{ nj  } _n  } { 1 - \omega ^{ k  } _n  } \omega _{ n  } ^j \\
& = \sum _{ j \geq 0  } a _{ jn  } 
\end{aligned}</script><p>事实上,我们令$d = \frac { n  } { \gcd ( j , n )  } $,容易发现$f ( \omega _n ^j ) = ( \prod _{ k = 1  } ^d ( 1 + \omega _n ^{ kj  } ) ) ^{ \frac { n  } { d  }  } $,又容易发现$n | jd $.</p>
<p>接下来观察$X ^d - 1 = \prod _{ k = 1  } ^d ( X - \omega _{ n  } ^{ kj  } ) $,带入$X = - 1 $得到$f ( \omega _n ^j ) = \begin{cases}2 ^{ \frac { n  } { d  }  } &amp; d \in \text { odd  } \ 0 &amp; d \in \text { even  } \end{cases} $.</p>
<p>接下来考虑拿到$\sum _{ j  } a _{ jn  } $,只需求$\frac { 1  } { n  } \sum _{ j = 1  } ^n f ( \omega _n ^j ) = \frac { 1  } { n  } \sum _{ d \in \text { odd  } , \gcd ( j , n ) = \frac { n  } { d  }  } 2 ^{ \frac { n  } { d  }  } = \frac { 1  } { n  } \sum _{ d \in \text { odd  }  } \varphi ( d ) 2 ^{ \frac { n  } { d  }  } $.</p>
<h5><span id="example尺规做正n边形问题">Example(尺规做正n边形问题)</span></h5><p><del>碰瓷高斯问题.</del></p>
<p>一步一步来.根据尺规作图理论:尺规作图只可以实现$+ , - , \times , \div , \sqrt [2 ] {  } $五种操作.而对于正$n $边形,显然只要我们能将$\cos \frac { 2 \pi  } { n  } $用只含上述五种操作和若干整数表示出来,那就一定可行.</p>
<h6><span id="正五边形问题">正五边形问题</span></h6><p>观察正五边形在复平面上的图像,注意到有两对点互为共轭复数,我们令:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sigma _1 & = z _1 + z _4 \\
\sigma _2 & = z _2 + z _3 
\end{aligned}</script><p>不难验证:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sigma _1 + \sigma _2 & = - 1 \\
\sigma _1 \sigma _2 & = - 1 
\end{aligned}</script><p>可以求出复合条件的解,将$z $带入又有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sigma _1 & = 2 \cos \frac { 2 \pi  } { 5  } \\
\sigma _2 & = 2 \cos \frac { 4 \pi  } { 5  } 
\end{aligned}</script><p>于是我们显然可以求得.</p>
<h6><span id="正七边形">正七边形</span></h6><p>类似正五边形,最后会导出三次方程:根中含有三次根号,因此不行.</p>
<h6><span id="正n边形">正n边形</span></h6><p><del>要解决正17边形,只需要解决正n边形,然后令n=17即可</del>.</p>
<p><del>你问我咋想到的下面的证明?问高斯去.</del></p>
<p>下面其实用到了ntt知识,但我懒得扔下面了.</p>
<p>先假设$n \in prime $,我们用$p $代替$n $.</p>
<p>我们有$z _1 = \cos \frac { 2 \pi  } { p  } + i \sin \frac { 2 \pi  } { p  } $,由于其它的$z $都可以表示成它的幂,因此我们记$\varepsilon = z _1 $.</p>
<p>我们现在想要这么分组:</p>
<script type="math/tex; mode=display">
\sigma _{ k + 1  } = \sum _{ 1 \leq l \leq p - 1 , f ( l , k ) = 1  } \varepsilon ^l</script><h3><span id="泰勒展开">泰勒展开</span></h3><p>即$f ( x ) = g ( x ) = f ( x _0 ) + \sum _{ k \geq 1  } \frac { f ^{ ( k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k \ $.$x _0 = 0 $的时候是麦克劳林级数.</p>
<p>麦克劳林展开是生成函数的基础,我们所谓的生成函数的封闭形式其实就是麦克劳林展开的逆运算(可能也不能完全等价,但笔者能力不够,暂且这么理解).</p>
<h2><span id="多项式">多项式</span></h2><h3><span id="多项式基础">多项式基础</span></h3><h4><span id="点值表示法和系数表示法">点值表示法和系数表示法</span></h4><p>代数基本定理:一个$n - 1 $次方程在复数域上有且只有$n - 1 $个根.</p>
<p>定理:一个$n - 1 $次多项式在$n $个不同点的取值唯一确定了该多项式.</p>
<p>证明:考虑反证法,假设命题不成立,则存在两个$n - 1 $次多项式$A ( x ) $和$B ( x ) $且有$\forall i \in [ 0 , n - 1 ] , A ( x _i ) = B ( x _i ) \ $.</p>
<p>令$C ( x ) = A ( x ) - B ( x ) $,那么$C ( x ) $至多是一个$n - 1 $次多项式且$\forall i \in [ 0 , n - 1 ] , C ( x _i ) = 0 \ $,也就是$C ( x ) $有$n $个根,与代数基本定理不符合.</p>
<p>由上面的内容,多项式有点值表示法和系数表示法两种:</p>
<p>系数表示法:$A ( x ) = \sum _{ i = 0  } ^{ n - 1  } a _i x ^i \ $.</p>
<p>点值表示法:$y _i = \sum _{ j = 0  } ^{ n - 1  } a _j x _i ^j \ $.</p>
<p>已知多项式点值表示法求系数表示法的过程被称为插值.</p>
<h4><span id="拉格朗日插值">拉格朗日插值</span></h4><p>构造多项式$\sum _{ i = 0  } ^{ n - 1  } y _i ( \prod _{ j = 0 \land j \ne i  } ^{ n - 1  } \frac { x - x _j  } { x _i - x _j  } ) \ $.显然当$x = x _i $时,该多项式的答案为$y _i $.</p>
<p>另外,如果$x _i = i $,不难发现这个式子可以写成:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^{ n  } y _i ( \prod _{ j = 1 \land j \ne i  } ^{ n  } \frac { x - x _j  } { x _i - x _j  } ) \\
\\
& = \sum _{ i = 1  } ^n y _i ( \prod _{ j = 1 \land j \ne i  } ^n \cfrac { x - j  } { i - j  } ) \\
& = \sum _{ i = 1  } ^n y _i ( - 1 ) ^{ n - i  } ( \cfrac { 1  } { ( i - 1 ) ! ( n - i ) !  } \prod _{ j = 1 , j \ne i  } ^{ n  } ( x - j ) ) 
\end{aligned}</script><h3><span id="多项式运算">多项式运算</span></h3><p>考虑两个多项式相乘,如果我们已知他们的点值表示法,显然可以直接相乘.</p>
<p>这为我们提供了一种思路:先将系数表示法转化为点值表示法,进行相乘之后再转化回系数表示法.</p>
<p>这引出以FFT为代表的多项式乘法,并拓展到了多种多项式运算.</p>
<h4><span id="多项式乘法">多项式乘法</span></h4><h5><span id="快速傅里叶变换fft">快速傅里叶变换(FFT)</span></h5><h6><span id="dft">DFT</span></h6><p>将$n $次单位根(默认$n $是二的整次幂,如果少了的话补零,设$n = 2 ^w $)分别带入$A ( x ) $得到点值向量$A ( \omega _n ^k ) \ $.</p>
<p>如果朴素带入,复杂度显然不可接受.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( x ) & = \sum _{ i = 0  } ^{ n - 1  } a _i x ^i \\
& = \sum _{ i = 2 k , k \in \mathbb { N  }  } ^{ n - 2  } a _i x ^i + \sum _{ i = 2 k + 1 , k \in \mathbb { N  }  } ^{ n - 1  } a _i x ^i \\
& = \sum _{ i = 2 k , k \in \mathbb { N  }  } ^{ n - 2  } a _i x ^{ 2 k  } + x \sum _{ i = 2 k + 1 , k \in \mathbb { N  }  } ^{ n - 1  } a _i x ^{ 2 k  } \\

\end{aligned}</script><p>令</p>
<p>A_2(x)=\sum_{i=2k+1,k\in\mathbb{N}}^{n-1}a_ix^{k}\\$, 那 么 $A(x)=A_1(x^2)+xA_2(x^2)\\</p>
<p>接下来分类讨论:</p>
<p>$\forall 0 \leq k \leq \frac { n  } { 2  } - 1 , k \in \mathbb { N  } \ $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( \omega _n ^k ) & = A _1 ( \omega _n ^{ 2 k  } ) + \omega _n ^k A _2 ( \omega _n ^{ 2 k  } ) \\

\end{aligned}</script><p>根据折半引理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( \omega _n ^k ) & = A _1 ( \omega _{ \frac { n  } { 2  }  } ^k ) + \omega _n ^k A _2 ( \omega ^k _{ \frac { n  } { 2  }  } ) \\

\end{aligned}</script><p>这样我们处理完了前半部分.</p>
<p>$\forall \frac { n  } { 2  } \leq k + \frac { n  } { 2  } \leq n - 1 , k \in \mathbb { N  } \ $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( \omega _n ^{ k + \frac { n  } { 2  }  } ) & = A _1 ( \omega _n ^{ 2 k + n  } ) + \omega _n ^{ k + \frac { n  } { 2  }  } A _2 ( \omega _n ^{ 2 k + n  } ) \\

\end{aligned}</script><p>根据消去引理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( \omega _n ^{ k + \frac { n  } { 2  }  } ) & = A _1 ( \omega _{ \frac { n  } { 2  }  } ^k ) - \omega _n ^k A _2 ( \omega _{ \frac { n  } { 2  }  } ^k ) \\

\end{aligned}</script><p>综上,我们可以递归处理$A _1 $和$A _2 $,然后合并得到$A $的答案,可以分治.</p>
<h6><span id="idft">IDFT</span></h6><p>设$A ( \omega _n ^k ) = d _k \ $,构造多项式$F ( x ) = \sum _{ i = 0  } ^{ n - 1  } d _i x ^i \ $.</p>
<p>我们求出$F ( x ) $的点值表示,设$c _k = F ( \omega _n ^{ - k  } ) \ $,也即:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c _k & = \sum _{ i = 0  } ^{ n - 1  } d _i ( \omega _n ^{ - k  } ) ^i \\
& = \sum _{ i = 0  } ^{ n - 1  } ( \sum _{ j = 0  } ^{ n - 1  } a _j ( \omega _n ^i ) ^j ) ( \omega _n ^{ - k  } ) ^i \\
& = \sum _{ j = 0  } ^{ n - 1  } a _j \sum _{ i = 0  } ^{ n - 1  } ( \omega _n ^i ) ^{ j - k  } \\

\end{aligned}</script><p>当$j = k $时,显然$\sum _{ i = 0  } ^{ n - 1  } ( \omega _n ^i ) ^{ j - k  } = n \ $.</p>
<p>否则根据等比数列求和公式,$\sum _{ i = 0  } ^{ n - 1  } ( \omega _n ^i ) ^{ j - k  } = \frac { \omega ^0 _n [ ( \omega _n ^{ j - k  } ) ^n - 1 ]  } { \omega _n ^{ j - k  } - 1  } = 0 \ $.</p>
<p>所以$\sum _{ i = 0  } ^{ n - 1  } ( \omega _n ^i ) ^{ j - k  } = n [ j = k ] \ $.</p>
<p>那么我们有</p>
<p>a_k=\frac{c_k}{n}\\</p>
<h6><span id="写法">写法</span></h6><p>递归写法显然.</p>
<p>递归过程中,第$k $层相当于在根据数在第$k $位的二进制数是$1 $还是$0 $来分类.那显然可以求出最后一层的数组,然后向上合并.</p>
<p>(没找到fft的代码,懒得写了,直接用的ntt的,注意快速幂要处理幂为负数的情况).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_rev</span><span class="params">(<span class="type">int</span> limit,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">rev[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;limit;++i)&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(<span class="type">int</span> limit,ll *a,ll t)</span></span>&#123;<span class="comment">//DFT:t=1;IDFT:t=-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit;++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;rev[i])std::<span class="built_in">swap</span>(a[i],a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;limit;mid=mid&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> n=mid&lt;&lt;<span class="number">1</span>;</span><br><span class="line">ll wn=<span class="built_in">mpow</span>(gn,t*(mod<span class="number">-1</span>)/n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit;i+=n)&#123;</span><br><span class="line">ll w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k,w=w*wn%mod)&#123;</span><br><span class="line">ll wakn=w*a[i+k+mid]%mod;</span><br><span class="line">ll ak=a[i+k];</span><br><span class="line">a[i+k]=ak+wakn;<span class="built_in">Mod</span>(a[i+k]);</span><br><span class="line">a[i+k+mid]=ak-wakn+mod;<span class="built_in">Mod</span>(a[i+k+mid]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">ll inv=<span class="built_in">mpow</span>(limit,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit;++i)&#123;</span><br><span class="line">a[i]=a[i]*inv%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="快速数论变换ntt">快速数论变换(NTT)</span></h5><p>由于FFT中的单位根会产生精度误差,因此在膜$998244353 $意义下,通常会选择NTT来进行多项式乘法.</p>
<p>NTT与FFT的运算过程基本相同,证明过程基本相同,唯一不同的是将单位根改为了原根.</p>
<p>根据上面FFT的证明过程,我们知道,设原根为$g $,$g _n = g ^{ \frac { p - 1  } { n  }  } \ $,只需要证明原根满足以下条件,就可以进行变换:</p>
<ol>
<li><p>$g _n ^n = g _n ^0 = 1 $且$\forall 0 \leq i &lt; j &lt; n , g _n ^i \ne g _n ^j $,证明由原根的性质.</p>
</li>
<li><p>折半引理:$g _{ 2 n  } ^{ 2 k  } = g _{ n  } ^k $,证明显然.</p>
</li>
<li><p>消去引理:$g _{ n  } ^{ k + \frac { n  } { 2  }  } = - g ^k _n \ $.由于$g ^{ \frac { p - 1  } { 2  }  } = - 1 $,该结论显然成立.</p>
</li>
</ol>
<p>由上我们证明了,我们完全可以使用$g _n $代替$\omega _n $进行变换.</p>
<p>另外,注意到$998244352 = 2 ^{ 23  } \times 7 \times 17 \ $,而$2 ^{ 23  } \approx 8 \times 10 ^6 \ $.因而,当$n \leq 8 \times 10 ^6 $的时候,$g _n $可以直接求出.这也是为什么大部分NTT题目都使用$998244353 $作为模数的原因.</p>
<h5><span id="范德蒙德矩阵理解">范德蒙德矩阵理解</span></h5><p>范德蒙德矩阵形如:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & \alpha _1 & \cdots & \alpha _1 ^{ n - 1  } \\
1 & \alpha _2 & \cdots & \alpha _2 ^{ n - 1  } \\
\vdots & \vdots & \ddots & \vdots \\
1 & \alpha _m & \cdots & \alpha _m ^{ n - 1  } 
\end{bmatrix} \in \mathbb { R  } ^{ m \times n  }</script><p>如果取单位根,我们有:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & 1 & \cdots & 1 \\
1 & \omega _n ^1 & \cdots & \omega _2 ^{ n - 1  } \\
\vdots & \vdots & \ddots & \vdots \\
1 & \omega _n ^{ n - 1  } & \cdots & \omega _n ^{ ( n - 1 ) ^2  } 
\end{bmatrix} \in \mathbb { R  } ^{ n \times n  }</script><p>这就是我们在做FFT(一个线性变换)的时候的变换矩阵.所以我们有:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & 1 & \cdots & 1 \\
1 & \omega _n ^1 & \cdots & \omega _2 ^{ n - 1  } \\
\vdots & \vdots & \ddots & \vdots \\
1 & \omega _n ^{ n - 1  } & \cdots & \omega _n ^{ ( n - 1 ) ^2  } 
\end{bmatrix} ^{ - 1  } = \frac { 1  } { n  } \begin{bmatrix}
1 & 1 & \cdots & 1 \\
1 & \omega _n ^{ - 1  } & \cdots & \omega _2 ^{ - ( n - 1 )  } \\
\vdots & \vdots & \ddots & \vdots \\
1 & \omega _n ^{ - ( n - 1 )  } & \cdots & \omega _n ^{ - ( n - 1 ) ^2  } 
\end{bmatrix}</script><h4><span id="分治fft">分治FFT</span></h4><p>给定$g ( x ) $和$f ( 0 ) $,求$f ( x ) = \sum _{ y = 1  } ^x f ( x - y ) g ( y ) $,答案对$998244353 $取膜.</p>
<p>考虑分治,假如我们已经知道了$f ( x ) , x \in [ 1 , \frac { n  } { 2  } ] $.那我们可以计算出这段部分对$f ( y ) ， y \in [ \frac { n  } { 2  } + 1 , n ] $的贡献.</p>
<p>这显然是一个卷积的形式,我们直接计算$f $和$g $的乘积并贡献上去.</p>
<h4><span id="多项式求逆">多项式求逆</span></h4><p>对于多项式$P ( x ) $,找到$Q ( x ) $使得$Q ( x ) P ( x ) \equiv 1 \pmod { x ^{ n  }  } \ $.显然$Q ( x ) $是唯一的.</p>
<p>首先不妨设$n = 2 ^k \ $.</p>
<p>如果我们已知$P ( x ) Q _{ k - 1  } ( x ) \equiv 1 \pmod { x ^{ 2 ^{ k - 1  }  }  } \ $,同时肯定有$P ( x ) Q _{ k  } ( x ) \equiv 1 \pmod { x ^{ 2 ^{ k - 1  }  }  } \ $,相减得到$Q _k ( x ) - Q _{ k - 1  } ( x ) \equiv 0 \pmod { x ^{ 2 ^{ k - 1  }  }  } \ $.</p>
<p>两边平方:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Q _k ^2 ( x ) + Q ^2 _{ k - 1  } ( x ) - 2 Q _k ( x ) Q _{ k - 1  } ( x ) & \equiv 0 \pmod { x ^{ 2 ^k  }  } \\

\end{aligned}</script><p>两边乘一下$P ( x ) $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Q _k ( x ) - 2 Q _{ k - 1  } ( x ) + P ( x ) Q _{ k - 1  } ^2 ( x ) & \equiv 0 \pmod { x ^n  } \\
Q _k ( x ) & \equiv 2 Q _{ k - 1  } ( x ) - P ( x ) Q _{ k - 1  } ^2 ( x ) \pmod { x ^n  } \\

\end{aligned}</script><p>根据主定理，这么做复杂度是$O ( n \log _2 n ) $的.</p>
<p>同时,多项式求逆可以解决上面提到的分治FFT.我们注意到分治FFT的条件等价于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F ( x ) & \equiv F ( x ) G ( x ) + f _0 \pmod { x ^{ n + 1  }  } \\
F ( x ) & = \frac { f ( 0 )  } { 1 - G ( x )  } \pmod { x ^{ n + 1  }  } 
\end{aligned}</script><p>于是可以直接做多项式求逆.</p>
<h4><span id="多项式除法">多项式除法</span></h4><p>对于$n $次多项式$F ( x ) $和$m $次多项式$G ( x ) $,找到$Q ( x ) , R ( x ) $使得$F ( x ) = G ( x ) Q ( x ) + R ( x ) \ $.</p>
<p>考虑对于$n $次多项式$F ( x ) $,令$F _R ( x ) = x ^n F ( \cfrac { 1  } { x  } ) $,如果设$f _i $为其$x ^i $项前的系数,不难发现$f _R ( i ) = f ( n - i ) $.</p>
<p>那么我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F ( x ) & = G ( x ) Q ( x ) + R ( x ) \\
F ( \cfrac { 1  } { x  } ) & = G ( \cfrac { 1  } { x  } ) Q ( \cfrac { 1  } { x  } ) + R ( \cfrac { 1  } { x  } ) \\
x ^n F ( \cfrac { 1  } { x  } ) & = x ^m G ( \cfrac { 1  } { x  } ) x ^{ n - m  } Q ( \cfrac { 1  } { x  } ) + x ^{ n - m + 1  } x ^{ m - 1  } R ( \cfrac { 1  } { x  } ) \\
F _R ( x ) & = G _R ( x ) Q _R ( x ) + x ^{ n - m + 1  } R _R ( x ) \\
F _R ( x ) & \equiv G _R ( x ) Q _R ( x ) \pmod { x ^{ n - m + 1  }  } \\
Q _R ( x ) & \equiv F _R ( x ) G _R ^{ - 1  } ( x ) \pmod { x ^{ n - m + 1  }  } 
\end{aligned}</script><p>于是只要做一遍多项式求逆即可求得$Q ( x ) $,再做一遍相减既可以得到$R ( x ) $.</p>
<h4><span id="多项式ln">多项式ln</span></h4><p>给出$n - 1 $次多项式$A ( x ) $,求一个多项式$B ( x ) $,满足$B ( x ) \equiv \ln A ( x ) $.</p>
<p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
B ( x ) & \equiv \ln A ( x ) \pmod { x ^n  } \\
B ' ( x ) & \equiv \cfrac { A ' ( x )  } { A ( x )  } \pmod { nx ^{ n - 1  }  } \\
B ( x ) & \equiv \int \cfrac { A ' ( x )  } { A ( x )  } dx \pmod { x ^n  } \\

\end{aligned}</script><p>另外,考虑中间求导的过程中,其实模数也要相应发生变化,但是由于模数是从更高次变低,而最后积分的时候又要变回来,所以可以直接忽略变化.</p>
<p>定理:在模意义下当且仅当$[ x ^0 ] f ( x ) = 1 $的时候,$f ( x ) $有对数多项式.</p>
<p>我们对最后再做一步:</p>
<script type="math/tex; mode=display">
\begin{aligned}
B ( x ) & \equiv \int _0 ^x \cfrac { A ' ( t )  } { A ( t )  } dt + B ( 0 ) \pmod { x ^n  } \\

\end{aligned}</script><p>首先$B ( 0 ) = \ln A ( 0 ) = \ln a _0 $,如果$a _0 \in \mathbb { Q  } \land a _0 \ne 1 $,则$B ( 0 ) \notin \mathbb { Q  } $,因此不能放到模意义下,自然不存在对数多项式.</p>
<p>若$[ x ^0 ] f ( x ) = 1 $的时候,$B ( 0 ) = 0 $,因此可以直接求出答案.</p>
<h4><span id="牛顿迭代">牛顿迭代</span></h4><p>给定多项式$G ( x ) $,求一个多项式$F ( x ) $满足$G ( F ( x ) ) \equiv 0 \pmod { x ^n  } $.</p>
<p>首先$n = 1 $的时候,也就是求$G ( F ( x ) ) \equiv 0 \pmod { x  } $.这个要根据具体题目具体分析求出.</p>
<p>假设我们已经求出了在$\bmod x ^{ \lceil \frac { n  } { 2  } \rceil  } $意义下的答案$F _0 ( x ) $,我们考虑在$F _0 ( x ) $处做泰勒展开:</p>
<script type="math/tex; mode=display">
\begin{aligned}
G ( F ( x ) ) & = \sum _{ k = 0  } ^{ + \infty  } \frac { G ^{ ( k )  } ( F _0 ( x ) )  } { k !  } ( F ( x ) - F _0 ( x ) ) ^k & \equiv 0 \pmod { x ^n  } \\

\end{aligned}</script><p>考虑$F ( x ) - F _0 ( x ) $,由于$F _0 ( x ) \equiv F ( x ) \pmod { x ^{ \lceil \frac { n  } { 2  } \rceil  }  } $,因此,因此$( F ( x ) - F _0 ( x ) ) ^2 \equiv 0 \pmod { x ^n  } $.</p>
<p>于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^{ + \infty  } \frac { G ^{ ( k )  } ( F _0 ( x ) )  } { k !  } ( F ( x ) - F _0 ( x ) ) ^k & \equiv 0 \pmod { x ^n  } \\
G ( F _0 ( x ) ) + G ' ( F _0 ( x ) ) ( F ( x ) - F _0 ( x ) ) & \equiv 0 \pmod { x ^n  } \\
F ( x ) & \equiv F _0 ( x ) - \frac { G ( F _0 ( x ) )  } { G ' ( F _0 ( x ) )  } \pmod { x ^n  } 
\end{aligned}</script><p>牛顿迭代可以用来证明多项式求逆的式子同样正确.</p>
<h4><span id="多项式开方">多项式开方</span></h4><p>给定$h ( x ) $,设$g ( f ( x ) ) = f ^2 ( x ) - h ( x ) $,求零点.</p>
<p>根据牛顿迭代,有:</p>
<script type="math/tex; mode=display">
f ( x ) \equiv f _0 ( x ) - \frac { f ^2 ( x ) - h ( x )  } { 2 f _0 ( x )  } \equiv \frac { f ^2 ( x ) + h ( x )  } { 2 f _0 ( x )  } \pmod { x ^n  }</script><p>还没完,用牛顿迭代前一定要求$g ( a ) \equiv 0 \pmod { x ^n  } $的解,也就是$[ x ^0 ] h ( x ) $的开根,用二次剩余算.</p>
<h4><span id="多项式exp">多项式exp</span></h4><p>给定$h ( x ) $,设$g ( f ( x ) ) = \ln f ( x ) - h ( x ) $,求零点.</p>
<p>根据牛顿迭代,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & \equiv f _0 ( x ) - \frac { \ln f _0 ( x ) - h ( x )  } { \frac { 1  } { f _0 ( x )  }  } \pmod { x ^n  } \\
& \equiv f _0 ( x ) ( 1 - \ln f _0 ( x ) + h ( x ) ) \pmod { x ^n  } 
\end{aligned}</script><p>还没完,还需要求$g ( a ) \equiv 0 \pmod { x ^n  } $的解,注意到存在$\exp $当且仅当$[ x ^0 ] g ( x ) \equiv 0 $,此时$f ( x ) \equiv 1 \pmod { x  } $.</p>
<h4><span id="多项式快速幂">多项式快速幂</span></h4><p>求$\ln $后求$\exp $即可,唯一的问题是为什么指数可以对$p $取膜.</p>
<p>我们有一个结论:</p>
<script type="math/tex; mode=display">
f ( x ^p ) \equiv f ( x ) ^p \pmod { p  }</script><p>这个结论很简单,注意到$( a + b ) ^p \equiv a ^p + b ^p \pmod { p  } $即可.</p>
<p>而又由于$n &lt; p $,因此$f ( x ) ^p \equiv f ( 0 ) \pmod { p  } $,通常取$f ( 0 ) = 1 $,于是就可以直接对$p $取膜.</p>
<h4><span id="多项式运算全家桶重载运算符版">多项式运算全家桶(重载运算符版)</span></h4><p>我们必须指出的一点是,虽然重载运算符很好看,但是大部分情况下还是需要指针传参.例如在这里,由于做$\exp $的时候的直接数组传参,会导致$\exp $的复杂度退化到$O ( n \log ^2 n ) $.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> qwq 300007</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> gn=<span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> rev[qwq];</span><br><span class="line">ll inv[qwq];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">poly</span>&#123;</span><br><span class="line">ll x[qwq];</span><br><span class="line"><span class="type">int</span> limit,k;</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Mod</span><span class="params">(ll &amp;x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;=mod)x-=mod;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)x+=mod;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mpow</span><span class="params">(ll x,ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k&lt;<span class="number">0</span>)k+=mod<span class="number">-1</span>;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k=k&gt;&gt;<span class="number">1</span>,x=x*x%mod)&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)ans=ans*x%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get_inv</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;qwq<span class="number">-7</span>)<span class="keyword">return</span> <span class="built_in">mpow</span>(x,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">if</span>(inv[x])<span class="keyword">return</span> inv[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> inv[x]=<span class="built_in">mpow</span>(x,mod<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_rev</span><span class="params">(<span class="type">int</span> limit,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;limit;++i)&#123;</span><br><span class="line">rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(k<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">ntt</span><span class="params">(poly *a,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="built_in">init_rev</span>((a-&gt;limit),(a-&gt;k));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(a-&gt;limit);++i)&#123;</span><br><span class="line"><span class="keyword">if</span>(rev[i]&gt;i)std::<span class="built_in">swap</span>(a-&gt;x[i],a-&gt;x[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;(a-&gt;limit);mid=mid&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> n=mid&lt;&lt;<span class="number">1</span>;</span><br><span class="line">ll wn=<span class="built_in">mpow</span>(gn,t*(mod<span class="number">-1</span>)/n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(a-&gt;limit);i+=n)&#123;</span><br><span class="line">ll w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k,w=w*wn%mod)&#123;</span><br><span class="line">ll wakn=w*(a-&gt;x[i+k+mid])%mod;</span><br><span class="line">ll ak=(a-&gt;x[i+k]);</span><br><span class="line">a-&gt;x[i+k]=ak+wakn;<span class="built_in">Mod</span>(a-&gt;x[i+k]);</span><br><span class="line">a-&gt;x[i+k+mid]=ak-wakn;<span class="built_in">Mod</span>(a-&gt;x[i+k+mid]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">ll inv=<span class="built_in">get_inv</span>(a-&gt;limit);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a-&gt;limit;++i)&#123;</span><br><span class="line">a-&gt;x[i]=(a-&gt;x[i])*inv%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> %(poly x,<span class="type">int</span> k)&#123;<span class="comment">//对x^&#123;2^k&#125;取膜</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=(<span class="number">1</span>&lt;&lt;k);i&lt;x.limit;++i)x.x[i]=<span class="number">0</span>;</span><br><span class="line">x.k=k;</span><br><span class="line">x.limit=<span class="number">1</span>&lt;&lt;k;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> +(poly x,poly y)&#123;</span><br><span class="line">x.limit=std::<span class="built_in">max</span>(x.limit,y.limit);</span><br><span class="line">x.k=std::<span class="built_in">max</span>(x.k,y.k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.limit;++i)&#123;</span><br><span class="line">x.x[i]+=y.x[i];<span class="built_in">Mod</span>(x.x[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> -(poly x,poly y)&#123;</span><br><span class="line">x.limit=std::<span class="built_in">max</span>(x.limit,y.limit);</span><br><span class="line">x.k=std::<span class="built_in">max</span>(x.k,y.k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.limit;++i)&#123;</span><br><span class="line">x.x[i]-=y.x[i];<span class="built_in">Mod</span>(x.x[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span>*(ll x,poly y)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;y.limit;++i)&#123;</span><br><span class="line">y.x[i]=x*y.x[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> *(poly x,poly y)&#123;</span><br><span class="line">x.limit=std::<span class="built_in">max</span>(x.limit,y.limit)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">x.k=std::<span class="built_in">max</span>(x.k,y.k)+<span class="number">1</span>;</span><br><span class="line">y.limit=x.limit;y.k=x.k;</span><br><span class="line"><span class="built_in">ntt</span>(&amp;x,<span class="number">1</span>);<span class="built_in">ntt</span>(&amp;y,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;x.limit;++i)&#123;</span><br><span class="line">x.x[i]=x.x[i]*y.x[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">ntt</span>(&amp;x,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">poly q_inv,tmp_inv;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">invpoly</span><span class="params">(poly x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(x.limit&lt;&lt;<span class="number">1</span>);++i)&#123;</span><br><span class="line">q_inv.x[i]=tmp_inv.x[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q_inv.x[<span class="number">0</span>]=<span class="built_in">mpow</span>(x.x[<span class="number">0</span>],<span class="number">-1</span>);q_inv.limit=<span class="number">1</span>,q_inv.k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> lim=<span class="number">2</span>,k=<span class="number">1</span>;lim&lt;=x.limit;lim=lim&lt;&lt;<span class="number">1</span>,++k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)&#123;</span><br><span class="line">tmp_inv.x[i]=x.x[i];</span><br><span class="line">&#125;</span><br><span class="line">tmp_inv.limit=q_inv.limit=lim;</span><br><span class="line">tmp_inv.k=q_inv.k=k;</span><br><span class="line">q_inv=<span class="number">2ll</span>*q_inv-q_inv*q_inv%k*tmp_inv%k;</span><br><span class="line">&#125;</span><br><span class="line">q_inv.limit=x.limit;q_inv.k=x.k;</span><br><span class="line"><span class="keyword">return</span> q_inv;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> poly <span class="keyword">operator</span> /(poly x,poly y)&#123;</span><br><span class="line"><span class="type">int</span> lim=x.limit,k=x.k;</span><br><span class="line">x=x*<span class="built_in">invpoly</span>(y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=lim;i&lt;x.limit;++i)&#123;</span><br><span class="line">x.x[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x.limit=lim,x.k=k;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">Dpoly</span><span class="params">(poly x)</span></span>&#123;<span class="comment">//求导</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;x.limit;++i)&#123;</span><br><span class="line">x.x[i<span class="number">-1</span>]=x.x[i]*i%mod;</span><br><span class="line">x.x[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">Spoly</span><span class="params">(poly x)</span></span>&#123;<span class="comment">//积分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x.limit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">x.x[i+<span class="number">1</span>]=x.x[i]*<span class="built_in">get_inv</span>(i+<span class="number">1</span>)%mod;</span><br><span class="line">x.x[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">lnpoly</span><span class="params">(poly x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.x[<span class="number">0</span>]!=<span class="number">1</span>);<span class="comment">//无解</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Spoly</span>(<span class="built_in">Dpoly</span>(x)/x);</span><br><span class="line">&#125;</span><br><span class="line">poly q_exp,tmp_exp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">exppoly</span><span class="params">(poly x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.x[<span class="number">0</span>]!=<span class="number">0</span>);<span class="comment">//无解</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(x.limit&lt;&lt;<span class="number">1</span>);++i)&#123;</span><br><span class="line">q_exp.x[i]=tmp_exp.x[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">q_exp.x[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> lim=<span class="number">2</span>,k=<span class="number">1</span>;lim&lt;=x.limit;lim=lim&lt;&lt;<span class="number">1</span>,++k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)tmp_exp.x[i]=x.x[i];</span><br><span class="line">tmp_exp.limit=q_exp.limit=lim;</span><br><span class="line">tmp_exp.k=q_exp.k=k;</span><br><span class="line">q_exp=(q_exp+q_exp*(tmp_exp-<span class="built_in">lnpoly</span>(q_exp)))%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> q_exp;</span><br><span class="line">&#125;</span><br><span class="line">poly q_sqrt,tmp_sqrt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">sqrtpoly</span><span class="params">(poly x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.x[<span class="number">0</span>]!=<span class="number">1</span>);<span class="comment">//如果不是1要做二次剩余</span></span><br><span class="line">q_sqrt.x[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> lim=<span class="number">2</span>,k=<span class="number">1</span>;lim&lt;=x.limit;lim=lim&lt;&lt;<span class="number">1</span>,++k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lim;++i)tmp_sqrt.x[i]=x.x[i];</span><br><span class="line">tmp_sqrt.limit=q_sqrt.limit=lim;</span><br><span class="line">tmp_sqrt.k=q_sqrt.k=k;</span><br><span class="line">q_sqrt=(q_sqrt*q_sqrt%k+tmp_sqrt)/(<span class="number">2ll</span>*q_sqrt)%k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> q_sqrt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> poly <span class="title">powpoly</span><span class="params">(poly x,ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.x[<span class="number">0</span>]!=<span class="number">1</span>);<span class="comment">//无解</span></span><br><span class="line">x=k*<span class="built_in">lnpoly</span>(x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">exppoly</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="集合幂级数">集合幂级数</span></h3><p>集合幂级数形如$\sum _{ i = 0  } ^{ 2 ^n - 1  } a _i x ^i $,其中二进制数$i $表示$\{ 1 , 2 , . . . , n \} $的一个子集,用$| i | $表示该子集大小,等价于对二进制使用的popcount函数.</p>
<p>下述级数如无特别说明均为集合幂级数.</p>
<h4><span id="与或卷积">与/或卷积</span></h4><p>高维前缀和:$c _i = \sum _{ j \subseteq i  } a _j \ $.</p>
<p>高维后缀和:$c _i = \sum _{ j \supseteq i  } a _j \ $.</p>
<p>上述过程又称快速莫比乌斯变换(FMT).</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++)</span><br><span class="line"><span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;i)) a[j]+=a[j^(<span class="number">1</span>&lt;&lt;i)];<span class="comment">//高维前缀和</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(<span class="number">1</span>&lt;&lt;n);j++)</span><br><span class="line"><span class="keyword">if</span>(j&amp;(<span class="number">1</span>&lt;&lt;i)) a[j^(<span class="number">1</span>&lt;&lt;i)]+=a[j];<span class="comment">//高维后缀和</span></span><br></pre></td></tr></table></figure>
<p>或卷积:$c _i = \sum _{ j  } \sum _{ k  } [ j \lor k = i ] a _j b _k \ $.</p>
<p>与卷积:$c _i = \sum _{ j  } \sum _{ k  } [ j \land k = i ] a _j b _k \ $.</p>
<p>二者求法类似,考虑如何求$a $和$b $的或卷积:</p>
<p>引理:</p>
<p>若$j , k \subseteq i $,则$j \lor k \subseteq i $,逆命题同样成立.</p>
<p>若$j , k \supseteq i $,则$j \land k \supseteq i $,逆命题同样成立.</p>
<p>设$a , b , c $的高维前缀和分别为$A , B , C $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A _i B _i & = ( \sum _{ j \subseteq i  } a _j ) ( \sum _{ k \subseteq i  } b _k ) \\
& = \sum _{ j , k \subseteq i  } a _i b _k \\
& = \sum _{ k \lor j \subseteq i  } a _i b _k \\
& = C _i \\

\end{aligned}</script><p>现在考虑已知$C $求$c $,本质上是一个反演.注意到$\sum _{ r \subseteq p  } ( - 1 ) ^{ | r |  } = \sum _{ k = 0  } ^{ | p |  } C _{ | p |  } ^k ( - 1 ) ^k = [ p = 0 ] \ $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c ( p ) & = \sum _{ q \subseteq p  } [ p - q & = 0 ] c ( q ) \\
& = \sum _{ q \subseteq p  } \sum _{ r \subseteq ( p - q )  } ( - 1 ) ^{ | r |  } c ( q ) \\
& = \sum _{ r \subseteq p  } ( - 1 ) ^{ | r |  } \sum _{ q \subseteq ( p - r )  } c ( q ) \\
& = \sum _{ r \subseteq p  } ( - 1 ) ^{ r  } C ( p - r ) \\
& = \sum _{ r \subseteq p  } ( - 1 ) ^{ | p | - | r |  } C ( r ) \\

\end{aligned}</script><p>于是有$c ( S ) = \sum _{ T \subseteq S  } ( - 1 ) ^{ | S | - | T |  } C ( T ) \ $(实际上就是个差分的过程).</p>
<p>因而做两遍高维前缀和再反推回去即可,复杂度$O ( 2 ^n n ) $.</p>
<p>与卷积即改为高维后缀和.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FWT_and</span><span class="params">(ll *a,ll t,<span class="type">int</span> limit)</span></span>&#123;<span class="comment">//FWT:t=1;IFWT:t=-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;limit;mid=mid&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> n=mid&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;limit;j+=n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k)&#123;</span><br><span class="line">a[j+k]+=t*a[j+k+mid]%mod;</span><br><span class="line"><span class="built_in">Mod</span>(a[j+k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FWT_or</span><span class="params">(ll *a,ll t,<span class="type">int</span> limit)</span></span>&#123;<span class="comment">//FWT:t=1;IFWT:t=-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;limit;mid=mid&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> n=mid&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;limit;j+=n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k)&#123;</span><br><span class="line">a[j+k+mid]+=t*a[j+k]%mod;</span><br><span class="line"><span class="built_in">Mod</span>(a[j+k+mid]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="异或卷积">异或卷积</span></h4><p>异或卷积:$c _i = \sum _j \sum _k [ j \oplus k = i ] a _j b _k \ $.</p>
<p>引理:$( i \oplus j ) \land k = ( i \land k ) \oplus ( j \land k ) $.</p>
<p>证明的话考虑如果$k = 0 $,二者显然相等;当$k = 1 $的时候,左右都等价于$( i \oplus j ) $.</p>
<p>快速沃尔什变换(FWT):</p>
<p>定义集合幂级数$FWT ( a ) $,满足$FWT ( a ) _i = \sum _{ j = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | i \land j |  } a _j \ $.</p>
<p>那么有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( c ) _i & = \sum _{ j = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | i \land j |  } c _j \\
& = \sum _{ j = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | i \land j |  } \sum _{ k = 0  } ^{ 2 ^n - 1  } \sum _{ l = 0  } ^{ 2 ^n - 1  } [ k \oplus l & = j ] a _k b _l \\
& = \sum _{ k = 0  } ^{ 2 ^n - 1  } \sum _{ l = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | ( k \oplus l ) \land i |  } a _k b _l \\
& = \sum _{ k = 0  } ^{ 2 ^n - 1  } \sum _{ l = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | k \land i |  } a _k ( - 1 ) ^{ | l \land i |  } b _l \\
& = FWT ( a ) _i FWT ( b ) _i \\

\end{aligned}</script><p>时间复杂度$O ( 2 ^n n ) $.</p>
<p>逆运算的话考虑实现过程,反向就行.不过可以把过程中乘上的$\frac { 1  } { 2  } $都提出来乘到最后.</p>
<p>FMT可以看作是FWT在解决与/或卷积时的特例.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FWT_xor</span><span class="params">(ll *a,ll t,<span class="type">int</span> limit)</span></span>&#123;<span class="comment">//FWT:t=1;IFWT:t=-1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> mid=<span class="number">1</span>;mid&lt;limit;mid=mid&lt;&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> n=mid&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;limit;j+=n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;mid;++k)&#123;</span><br><span class="line">ll x=a[j+k],y=a[j+k+mid];</span><br><span class="line">a[j+k]=x+y;<span class="built_in">Mod</span>(a[j+k]);</span><br><span class="line">a[j+k+mid]=x-y;<span class="built_in">Mod</span>(a[j+k+mid]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">-1</span>)&#123;</span><br><span class="line">ll inv=<span class="built_in">mpow</span>(limit,mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;limit;++i)a[i]=a[i]*inv%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4><span id="快速沃尔什变换">快速沃尔什变换</span></h4><h5><span id="线性代数角度">线性代数角度</span></h5><p>我们来重定义一下所谓的FWT.</p>
<p>首先类比FFT,我们希望存在一个线性变换$FWT $,使得</p>
<ol>
<li><p>若$c _i = \sum _{ j \oplus k  } a _j b _k $,则$FWT ( c ) = FWT ( a ) FWT ( b ) $.</p>
</li>
<li><p>这个线性变换是可逆的.</p>
</li>
<li><p>做这个线性变换和其逆变换的复杂度都可以接受.</p>
</li>
</ol>
<p>我们设$FWT ( A ) _i = \sum _{ j  } w ( i , j ) A _j $,我们想要做的就是构造一组满足上述条件的$w $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( C ) _i & = FWT ( A ) _i FWT ( B ) _i \\
\sum _{ j  } w ( i , j ) C _j & = \sum _{ j , k  } w ( i , j ) w ( i , k ) A _j B _k 
\end{aligned}</script><p>再考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C & = A * B \\
C _i & = \sum _{ k \oplus l = i  } A _k B _l \\
\sum _{ j  } w ( i , j ) C _j & = \sum _j w ( i , j ) \sum _{ k \oplus l = j  } A _k B _l \\
\sum _{ j , k  } w ( i , j ) w ( i , k ) A _j B _k & = \sum _j w ( i , j ) \sum _{ k \oplus l = j  } A _k B _l \\
\sum _{ j , k  } w ( i , j ) w ( i , k ) A _j B _k & = \sum _{ j , k  } A _j B _k w ( i , j \oplus k ) 
\end{aligned}</script><p>比较两边系数,有$w ( i , j ) w ( i , k ) = w ( i , j \oplus k ) $.只要满足这个条件,我们就能构造出一组满足条件(1)的线性变换.如果这个线性变换对应的矩阵可逆,那么就满足了条件(2).</p>
<p>而由于$\oplus $是集合的运算,我们可以对二进制分开考虑.换句话说,如果$a = \sum _{ i = 0  } a _i 2 ^i , b = \sum _{ i = 0  } b _i 2 ^i $,那么$w ( a , b ) = \prod _{ i = 0  } w ( a _i , b _i ) $一定是满足条件的.</p>
<p>这样我们就可以只求一个$2 \times 2 $的线性变换矩阵就好.我们接下来将对三种常见的基础位运算($\lor , \land , xor ( \oplus ) $)分别讨论这个矩阵.我们先来解决第三个问题:如何快速求出$FWT ( a ) $呢?</p>
<p>考虑和FFT一样折半,令$i _0 $为$i $的最高位是否是$1 $,$i ‘ $为$i $去掉最高位后的二进制数字,令$n = 2 ^m $我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( A ) _i & = \sum _{ j = 0  } ^{ 2 ^m - 1  } w ( i , j ) A _j \\
& = \sum _{ j = 0  } ^{ 2 ^{ m - 1  } - 1  } w ( i , j ) A _j + \sum _{ j = 2 ^{ m - 1  }  } ^{ 2 ^m - 1  } w ( i , j ) A _j \\
& = w ( i _0 , 0 ) \sum _{ j = 0  } ^{ 2 ^{ m - 1  } - 1  } w ( i ' , j ' ) A _j + w ( i _0 , 1 ) \sum _{ j = 2 ^{ m - 1  }  } ^{ 2 ^m - 1  } w ( i ' , j ' ) A _j 
\end{aligned}</script><p>这样就实现了规模减半,复杂度$O ( mn ) $.</p>
<p>下面我们设FWT的变换矩阵为$\begin{bmatrix}w ( 0 , 0 ) &amp; w ( 0 , 1 ) \ w ( 1 , 0 ) &amp; w ( 1 , 1 ) \end{bmatrix} $.顺便一提,不难发现,最后对整体做的矩阵是这个矩阵的克罗内多积.</p>
<h6><span id="或卷积">或卷积</span></h6><p>取矩阵$\begin{bmatrix}1 &amp; 0 \ 1 &amp; 1 \end{bmatrix} $.其逆矩阵为$\begin{bmatrix}1 &amp; 0 \ - 1 &amp; 1 \end{bmatrix} $.</p>
<h6><span id="与卷积">与卷积</span></h6><p>取矩阵$\begin{bmatrix}1 &amp; 1 \ 0 &amp; 1 \end{bmatrix} $.其逆矩阵为$\begin{bmatrix}1 &amp; - 1 \ 0 &amp; 1 \end{bmatrix} $.</p>
<h6><span id="异或卷积">异或卷积</span></h6><p>取矩阵$\begin{bmatrix}1 &amp; 1 \ 1 &amp; - 1 \end{bmatrix} $.其逆矩阵为$\begin{bmatrix}\frac { 1  } { 2  } &amp; \frac { 1  } { 2  } \ \frac { 1  } { 2  } &amp; - \frac { 1  } { 2  } \end{bmatrix} $.</p>
<h5><span id="生成函数角度">生成函数角度</span></h5><p>我们再从生成函数角度理解一下FWT.</p>
<p>我们重新定义幂乘法:$x ^S x ^T = x ^{ S \oplus T  } $,显然幂乘法该满足的性质它都满足.</p>
<p>观察FWT的式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( A ) _S & = \sum _{ T = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | S \land T |  } a _T \\
IFWT ( A ) _S & = \frac { 1  } { 2 ^n  } FWT ( A ) _S 
\end{aligned}</script><p>这等价于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
[ x ^S ] FWT ( A ) & = \sum _{ T = 0  } ^{ 2 ^n - 1  } ( - 1 ) ^{ | S \land T |  } a _T \\
[ x ^S ] IFWT ( A ) & = [ x ^S ] \frac { 1  } { 2 ^n  } FWT ( A ) 
\end{aligned}</script><h4><span id="子集卷积">子集卷积</span></h4><p>子集卷积:$c _i = \sum _{ j  } \sum _{ k  } [ j \land k = \emptyset , j \lor k = i ] a _j b _k \ $.</p>
<p>意识到该卷积与或卷积的差别在于:或卷积会多累加一些$[ j \land k \ne \emptyset ] $的答案,而$[ j \land k = \phi , j \lor k = i ] = [ | j | + | k | = | i | , j \lor k = i ] \ $.</p>
<p>因而可以将原集合按照元素个数分组做FMT,然后再$n ^2 $次结合,并做IFMT,最终将结果累计,复杂度$O ( 2 ^n n ^2 ) $.</p>
<h4><span id="集合占位幂级数">集合占位幂级数</span></h4><p>其实就是设$g _{ i , j  } = z ^i f _j $,然后做卷积(类似子集卷积).</p>
<h4><span id="example">Example</span></h4><h5><span id="example1agc034f-rng-and-xor">Example1([AGC034F] RNG and XOR)</span></h5><p>设$f _i ( n ) $表示操作$n $次后第一次变成$i $的概率,$g _i ( n ) $表示操作$n $次后变成$i $的概率.$F , G $分别是其生成函数.</p>
<p>注意到$G _i = F _i G _0 , F _i = \frac { G _i  } { G _0  } $,而$F _i ‘ ( 1 ) $就是期望.接下来的问题在于如何求$G $.</p>
<p>接下来涉及到的东西就很本质了,我们一开始先把$a _i \rightarrow \frac { a _i  } { \sum a  } $,然后做$A = FWT ( a ) $,注意这里$A _0 = \sum a = 1 $,FWT自身有很好的性质:$a = \frac { 1  } { 2 ^N  } FWT ( A ) $.我们做$n $次操作后得到的概率数组也就是$\frac { 1  } { 2 ^N  } FWT ( A ^n ) $.展开FWT的式子,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g _i ( n ) & = \sum _{ j = 0  } ^{ 2 ^N - 1  } ( - 1 ) ^{ | i \land j |  } A _j ^n x ^n \\
G _i & = \sum _{ j = 0  } ^{ 2 ^N - 1  } ( - 1 ) ^{ | i \land j |  } \frac { 1  } { 1 - A _j x  } \\
F _i & = \frac { G _i  } { G _0  } \\
F _i ' & = \frac { G _i ' G _0 - G _0 ' G _i  } { G _0 ^2  } \\
& = \frac { ( \sum _{ j = 0  } ^{ 2 ^N - 1  } ( - 1 ) ^{ | i \land j |  } \frac { A _j  } { ( 1 - A _j x ) ^2  } ) ( \sum _{ j = 0  } ^{ 2 ^N - 1  } \frac { 1  } { 1 - A _j x  } ) - ( \sum _{ j = 0  } ^{ 2 ^N - 1  } \frac { A _j  } { ( 1 - A _j x ) ^2  } ) ( \sum _{ j = 0  } ^{ 2 ^N - 1  } ( - 1 ) ^{ | i \land j |  } \frac { 1  } { 1 - A _j x  } )  } { ( \sum _{ j = 0  } ^{ 2 ^N - 1  } \frac { 1  } { 1 - A _j x  } ) ^2  } 
\end{aligned}</script><p><del>(我草这个式子太顶级了)</del></p>
<p>但是我们冷静一下,这个题与普通生成函数不同的地方在于,我们要求$F ‘ _i ( 1 ) $,因此我们直接把$x = 1 $带入算一算就好.不过由于$A _0 = 1 $,我们必须要解决分母为$0 $的情况,解决的方法是分母乘上$( 1 - x ) $,这样就消掉了$j = 0 $的项,同时分子由于是减法可以抵消一下.</p>
<p>然后大概做做吧,感觉太顶级了.</p>
<h5><span id="example2qoj5089环覆盖">Example2([QOJ5089]环覆盖)</span></h5><p>合法显然当且仅当每个点度数为偶数,考虑直接拿一个二进制数将每个点度数奇偶性压起来,如果选中一条边$u \leftrightarrow v $就异或上$( 2 ^u + 2 ^v ) $.最后要求这个二进制数是$0 $.我们用一个二元组$( a , F ) $表示在集合幂级数上异或上$a $,在多项式上乘上$F $.显然一条边是$( 0 , 1 ) + ( 2 ^u + 2 ^v , x ) $.注意到这是可以定义乘法运算和标量乘法运算的,也就能做FWT,而且在做FWT的时候要么乘上$1 + x $要么乘上$1 - x $,做完FWT得到的每一个$FWT _i $一定形如$( 1 + x ) ^k ( 1 - x ) ^{ m - k  } $,做IFWT的时候直接求$\frac { 1  } { 2 ^N  } \sum ( 1 + x ) ^k ( 1 - x ) ^{ m - k  } $即可.</p>
<p>仔细想想这个过程:有一句名言是只要看到生成函数就一定存在分配律,这里也是一样的,由于存在一种选择:选不选这条边,因此这里也就有了两种情况:$( 0 , 1 ) $和$( 2 ^u + 2 ^v , x ) $,分开两种情况就实现了FWT.</p>
<p>问题在于对于每个$i $求$k $,也就是对于每个$i $求有多少条边满足$| i \land ( 2 ^u + 2 ^v ) | = 1 $,也就是求有多少条边一段链接在了$i $的内部,另一端连接在了外部,这个补集转化一下,做高维前缀和.</p>
<h5><span id="example3cf1034e-little-c-loves-3-iii">Example3(CF1034E Little C Loves 3 III)</span></h5><p>仍然是子集卷积,转化为$c _i = \sum _{ j  } \sum _{ k  } [ | j | + | k | = | i | , j \lor k = i ] a _j b _k \ $.然后我们将$a _j $乘上$4 ^j $,将$b _k $乘上$4 ^k $,最后把$c _i $除去$4 ^i $对$4 $取膜就行.</p>
<p>还有个用到FWT的本质的矩阵做法,大概是手推矩阵然后再手推求逆.</p>
<h5><span id="example4cf1336e2-chiori-and-doll-picking">Example4(CF1336E2 Chiori and Doll Picking)</span></h5><p>先考虑easy version.首先求出线性基,如果线性基的大小$k $比较小,我们可以直接$2 ^k $枚举一下.而如果线性基较大,我们先消成最简线性基,然后主元位置有多少个$1 $取决于选了多少个元素,其他位置共有$m - k $个,可以直接状压进状态.这样复杂度就是$O ( \min \{ 2 ^k , m ^2 2 ^{ m - k  } \} ) $.</p>
<p>那么我们怎么优化呢?首先$k $较大的时候有点难做,我们看看能不能优化到$2 ^{ m - k  } $.</p>
<p>考虑设$f _i ^c = [ | i | = c ] $,将线性基能做出的线性空间设为$A $,$A _S = 1 $当且仅当线性基能异或出$S $(最后再把那些废元素贡献到答案里).那么$popcount = c $的答案就是$IFWT ( FWT ( F ) FWT ( A ) ) _0 $.考虑$IFWT _0 = \frac { 1  } { 2 ^m  } \sum _{ i = 0  } ^{ 2 ^m - 1  } FWT ( F ) _i FWT ( A ) _i $,问题在于这个东西好像也不好做.</p>
<p>然后接下来开始一波顶级操作(下面的操作全部基于行向量+行操作):</p>
<p>引理1:$FWT ( A ) $要么是$2 ^k $,要么是$0 $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
A * A = A \times 2 ^k</script><p>这句是为啥呢?因为对于右边的每一个数字$x $和左边的一个数字$y $,如果它们都在线性基中,一定存在一个数字$z $满足$y \oplus z = x $,不然就是$0 $.</p>
<p>于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( A ) _i \cdot FWT ( A ) _i & = FWT ( A ) _i \times 2 ^k \\
FWT ( A ) _i & = 0 \lor 2 ^k 
\end{aligned}</script><p>引理2:$FWT ( A ) _i = 2 ^k \Leftrightarrow \forall x , A _x \ne 0 , | i \land x | \equiv 0 \pmod { 2  } $.</p>
<p>直接展开上面的式子,用$\sum _{ S \subseteq T  } ( - 1 ) ^{ | S |  } = [ T = \emptyset ] $.</p>
<p>引理3:$FWT ( A ) $中值为$2 ^k $的位置构成一个线性基.</p>
<p>只需要证明封闭性就好,注意到如果$i $满足条件,$j $满足条件,一开始做FWT时我们已经注意到:$( i \oplus j ) \land x = ( i \land x ) \oplus ( j \land x ) $.于是这个引理也显然成立.</p>
<p>引理4:$FWT ( A ) $中值为$2 ^k $的位置构成的线性基的大小是$m - k $.</p>
<p>设这些位置构成的空间是$B $,$B _S = 1 $当且仅当$S $在这个空间中.我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
FWT ( A ) & = B \times 2 ^k \\
A & = IFWT ( B ) \times 2 ^k 
\end{aligned}</script><p>注意到$a _0 = 1 $,也就是$\frac { 2 ^k  } { 2 ^m  } \sum b = 1 , \sum b = 2 ^{ m - k  } $,这就证明了引理.</p>
<p>引理5:将$A $的线性基对应的矩阵从前往后消成最简,$B $的线性基对应的矩阵从后往前消成最简,上$A $下$B $拼成一个$m \times m $的矩阵,那么这个矩阵关于主对角线对称.</p>
<p>首先根据$rank ( A ) + rank ( B ) = k + m - k = m $可以知道主对角线一定全是$1 $,然后我们任取$A $中的一个基$x $和$B $中的一个基$y $,应该有$| x \land y | \equiv 0 \pmod { 2  } $.不难发现此时必定对称(画个图,不对称的话考虑主元对他俩的贡献就不是偶数了).</p>
<p>通过这个引理可以由$A $得知$B $长什么样.</p>
<p>引理6:$FWT ( F ^c ) _i $只和$| i | $有关.</p>
<p>因为$F ^c _i $只和$| i | $有关,这里考虑一下对称性就可以.因此设$w _{ d  } ^c = FWT ( F ^c ) _i , | i | = d $.</p>
<p>然后注意到$w _d ^c = \sum _{ i = 0  } ^{ 2 ^m - 1  } ( - 1 ) ^{ | i \land ( 2 ^d - 1 ) |  } [ | i | = c ] $.组合意义展开一下:</p>
<script type="math/tex; mode=display">
w _d ^c = \sum _{ j = 0  } ^{ d  } ( - 1 ) ^{ j  } \binom { d  } { j  } \binom { m - d  } { c - j  }</script><p>接下来怎么做呢?令$g _d = \sum _{ i = 0  } ^{ 2 ^m - 1  } [ A _i = 1 ] [ | i | = d ] $,这里可以$O ( 2 ^{ m - k  } ) $,然后乘起来就行了.</p>
<p>太顶级了吧.</p>
<h5><span id="example5cf-1326f2">Example5(CF 1326F2)</span></h5><p>首先发现”如果没有边那么是$0 $”这个限制太强了,如果我们能改为”如果是$0 $,那么可有边可无边”的话,整个序列就会被$1 $的段分成若干两两无关的链.显然这是一步或卷积,这样我们就只需要求后者.如果设$g _{ len , S  } $表示长度为$len $,一段长度为$len - 1 $的连续的$1 $对应的集合是$S $的方案数,不难发现我们最后只需要做一个类似子集卷积的东西就行(前面的每个段会自动在后面放个$0 $).</p>
<p>但是还没完,题目让我们求每一个,我们不难发现我们这样划分之后答案只取决于链的长度的可重集合,而本质不同的集合的数量很少,直接枚举就行.</p>
<h5><span id="example6qoj5019">Example6(qoj5019)</span></h5><p>首先可以类似数位dp设计一个$dp _{ i , S  } $表示目前dp到了第$i $位,然后前面的$limit $是$S $.接下来分类讨论当前的最大值限制是$1 $还是$0 $.</p>
<p>这个题知道题解其实没什么难的,但是这个题告诉了我们:FWT作为一种线性变换,它是可以和其它线性变换一起做的,也就是说你是可以将其中的若干位做FWT,剩下若干位做其它的东西的.</p>
<h2><span id="生成函数">生成函数</span></h2><h3><span id="普通生成函数ogf">普通生成函数(OGF)</span></h3><h4><span id="概念">概念</span></h4><p>我们定义一个幂级数形如$A ( z ) = \sum _{ k \geq 0  } a _k z ^k $,并使$[ z ^n ] A ( z ) = a _n $.则称$A ( z ) $是$\langle a _0 , a _1 , . . . \rangle $的生成函数.</p>
<h4><span id="运算">运算</span></h4><ol>
<li><p>$\alpha A ( z ) + \beta B ( z ) = \sum _{ n \geq 0  } ( \alpha f _n + \beta g _n ) z ^n $.</p>
</li>
<li><p>$z ^m A ( z ) = \sum _{ n \geq 0  } g _{ n  } z ^{ n + m  } = \sum _{ n \geq m  } g _{ n - m  } z ^n $.</p>
</li>
<li><p>$A ( cz ) = \sum _{ n \geq 0  } c ^n f _n z ^n $.</p>
</li>
<li><p>$A ‘ ( z ) = \sum _{ n \geq 1  } ig _i z ^{ i - 1  } $.</p>
</li>
<li><p>$\int A ( z ) dz = \sum _{ n \geq 0  } \cfrac { 1  } { n + 1  } g _n z ^{ n + 1  } $.</p>
</li>
<li><p>$A ( z ) B ( z ) = \sum _{ n \geq 0  } ( \sum _{ k = 0  } ^n f _k g _{ n - k  } ) z ^n $.</p>
</li>
<li><p>$\cfrac { 1  } { 1 - z  } A ( z ) = \sum _{ n \geq 0  } ( \sum _{ k = 0  } ^n g _k ) z ^n $.</p>
</li>
</ol>
<h4><span id="常见序列生成函数">常见序列生成函数</span></h4><ol>
<li>$\cfrac { 1  } { 1 - z  } = \sum _{ k \geq 0  } z ^k \ $,$\cfrac { 1  } { 1 - cz  } = \sum _{ k \geq 0  } c ^k z ^k \ $.</li>
</ol>
<p>证明显然.</p>
<ol>
<li>$( 1 + z ) ^r = \sum _{ k \geq 0  } \binom { r  } { k  } z ^k \ $,$( 1 - z ) ^r = \sum _{ k \geq 0  } ( - 1 ) ^k \binom { r  } { k  } z ^k \ $.</li>
</ol>
<p>证明根据二项式定理.</p>
<ol>
<li>$\cfrac { 1  } { 1 - z ^m  } = \sum _{ n \geq 0  } [ n | m ] z ^n \ $.</li>
</ol>
<p>证明显然.</p>
<ol>
<li>$\cfrac { 1  } { ( 1 - z ) ^{ n + 1  }  } = \sum _{ k \geq 0  } \binom { n + k  } { n  } z ^k , n \in \mathbb { N  } \ $,$\cfrac { z ^n  } { ( 1 - z ) ^{ n + 1  }  } = \sum _{ k \geq 0  } \binom { k  } { n  } z ^k , n \in \mathbb { N  } \ $</li>
</ol>
<p>直接使用二项式定理展开$( 1 - z ) ^{ - n - 1  } $,可以得到:</p>
<script type="math/tex; mode=display">
( 1 - z ) ^{ - n - 1  } = \sum _{ k \geq 0  } ( - 1 ) ^k \binom { - n - 1  } { k  } z ^k</script><p>反转上指标并使用对称恒等式得到上式.此外上式还有两个特殊形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { 1  } { ( 1 - z ) ^2  } & = \sum _{ n \geq 0  } ( n + 1 ) z ^n \\
\cfrac { z  } { ( 1 - z ) ^2  } & = \sum _{ n \geq 0  } nz ^n 
\end{aligned}</script><p>根据$( 1 ) $求导即可得到此式.</p>
<ol>
<li><p>$e ^z = \sum _{ k \geq 0  } \cfrac { z ^k  } { k !  } \ $.</p>
</li>
<li><p>$\ln ( \cfrac { 1  } { 1 - z  } ) = \sum _{ n \geq 1  } \cfrac { 1  } { n  } z ^n $.</p>
</li>
<li><p>$\ln ( 1 + z ) = \sum _{ k \geq 0  } ( - 1 ) ^k \cfrac { z ^{ k + 1  }  } { k + 1  } \ $.</p>
</li>
</ol>
<p>可以使用积分或泰勒展开证明.</p>
<ol>
<li>$\frac { 1 - \sqrt { 1 - 4 x  }  } { 2 x  } = \sum _{ k \geq 0  } \frac { \binom { 2 k  } { k  }  } { k + 1  } x ^k $.</li>
</ol>
<p>也即卡特兰数$C _k $的生成函数,证明考虑:</p>
<script type="math/tex; mode=display">
xC ^2 + 1 = C</script><p>然后得到两个根,带入$x = 0 $舍掉一个.</p>
<h3><span id="指数生成函数egf">指数生成函数(EGF)</span></h3><p><a href="https://zhuanlan.zhihu.com/p/53079223">https://zhuanlan.zhihu.com/p/53079223</a></p>
<p>序列$\{ a \} $的指数生成函数定义为形式幂级数$\hat F ( x ) = \sum a _n \frac { x ^n  } { n !  } $.注意$[ x ^n ] \hat F ( x ) = a _n $.</p>
<h4><span id="基本运算">基本运算</span></h4><p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat F ( x ) \hat G ( x ) & = \sum _{ j \geq 0  } a _j \frac { x ^j  } { j !  } \sum _{ k \geq 0  } b _k \frac { x ^k  } { k !  } \\
& = \sum _{ k \geq 0  } x ^k \sum _{ j = 0  } ^k a _j b _{ k - j  } \frac { k !  } { j ! ( k - j ) !  } \frac { 1  } { k !  } \\
& = \sum _{ k \geq 0  } \frac { x ^k  } { k !  } \sum _{ j = 0  } ^k a _j b _{ k - j  } \binom { k  } { j  } 
\end{aligned}</script><p>即$\lang \sum _{ i = 0  } ^n \binom { n  } { i  } a _i b _{ n - i  } \rang $的EFG.</p>
<p>注意到有一个特例是$x \hat F ( x ) $就是$\lang \binom { n  } { n - 1  } a _i \rang $的EGF.</p>
<h4><span id="封闭式">封闭式</span></h4><ol>
<li>$e ^x = \sum _{ k \geq 0  } \frac { x ^k  } { k !  } $</li>
</ol>
<p>直接泰勒展开就可以得到</p>
<ol>
<li>$e ^{ px  } = \sum _{ k \geq 0  } p ^k \frac { x ^k  } { k !  } $</li>
</ol>
<p>换元后可以得到.一个经典特例是$e ^{ - x  } = \sum _{ k \geq 0  } ( - 1 ) ^k \frac { x ^k  } { k !  } $.</p>
<ol>
<li>$\frac { e ^x + e ^{ - x  }  } { 2  } = \sum _{ k \geq 0  } [ 2 | k ] \frac { x ^k  } { k !  } $.</li>
</ol>
<p>显然.</p>
<ol>
<li>$( 1 + x ) ^n = \sum _{ k \geq 0  } n ^{ \underline { k  }  } \frac { x ^k  } { k !  } $.</li>
</ol>
<p>做二项式定理就显然了.</p>
<ol>
<li><p>$\ln ( 1 + x ) = \sum _{ k \geq 1  } ( - 1 ) ^{ k - 1  } ( k - 1 ) ! \frac { x ^k  } { k !  } $.</p>
</li>
<li><p>$\ln ( 1 - x ) = \sum _{ k \geq 1  } ( k - 1 ) ! \frac { x ^k  } { k !  } $.</p>
</li>
</ol>
<p>都可以通过泰勒展开证明.</p>
<h4><span id="exp的组合意义">EXP的组合意义</span></h4><p>我们设$F _k ( n ) $为$n $个有标号元素划分成$k $个非空无序集合的情况,$f _i $为$i $个元素组成一个集合的时候,其上特定组合结构的数量(就是一个一个只和$| S | $有关的定义在集合上的函数),有:</p>
<script type="math/tex; mode=display">
F _k ( n ) = \frac { n !  } { k !  } \sum _{ \sum _{ i = 1  } ^k a _i = n  } \prod _{ j = 1  } ^k \frac { f _{ a _j  }  } { a _j !  }</script><p>设$\hat { F  } ( x ) = \sum _{ n \geq 0  } f _n \frac { x ^n  } { n !  } $,再设:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat G _k ( x ) & = \sum _{ n \geq 0  } F _k ( n ) \frac { x ^n  } { n !  } \\
& = \sum _{ n \geq 0  } x ^n \frac { 1  } { k !  } \sum _{ \sum _{ i = 1  } ^k a _i = n  } \prod _{ j = 1  } ^k \frac { f _{ a _j  }  } { a _j !  } \\
& = \sum _{ n \geq 0  } \frac { 1  } { k !  } \sum _{ \sum _{ i = 1  } ^k a _i = n  } \prod _{ j = 1  } ^k \frac { f _{ a _j  } x ^{ a _j  }  } { a _j !  } \\
& = \frac { 1  } { k !  } \hat F ^k ( x ) 
\end{aligned}</script><script type="math/tex; mode=display">
\sum _{ k \geq 0  } \hat G _k ( x ) = \exp \hat F ( x )</script><p>或者直接递推:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F _k ( x ) & = \sum _{ i = 1  } ^{ n - k + 1  } \binom { n  } { i  } F _{ k - 1  } ( n - i ) f _i \frac { 1  } { k  } \\

\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
\hat G _k ( x ) & = \sum _{ n \geq 0  } \frac { x ^n  } { n !  } F _k ( n ) \\
& = \sum _{ n \geq 0  } \frac { x ^n  } { n !  } \sum _{ i = 1  } ^{ n - k + 1  } \binom { n  } { i  } F _{ k - 1  } ( n - i ) f _i \frac { 1  } { k  } \\
& = \frac { 1  } { k  } \sum _{ n \geq 0  } \frac { x ^n  } { n !  } \sum _{ i = 1  } ^{ n - k + 1  } \binom { n  } { i  } F _{ k - 1  } ( n - i ) f _i \\
& = \frac { 1  } { k  } \hat G _{ k - 1  } ( x ) \hat F ( x ) \\
& = \frac { 1  } { k !  } \hat F ^k ( x ) 
\end{aligned}</script><p>简而言之,$[ x ^n ] \hat F ( x ) $是将$n $个有标号的元素放到同一个无序集合的方案数,而$[ x ^n ] \exp \hat F ( x ) $是将$n $个有标号的元素分成若干个无编号的非空无序集合的方案数.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1poj3734">Example1(POJ3734)</span></h5><p>对于红黄色砖块,其选取方案为$\{ 1 , 0 , 1 , 0 , \cdots \} $,对应的EGF是$\frac { e ^x + e ^{ - x  }  } { 2  } $.</p>
<p>对于蓝绿色砖块,选取方案是$e ^x $.</p>
<p>乘起来有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat F ( x ) & = ( \frac { e ^x + e ^{ - x  }  } { 2  } ) ^2 e ^{ 2 x  } \\
& = \frac { ( e ^{ 2 x  } + 2 + e ^{ - 2 x  } ) e ^{ 2 x  }  } { 4  } \\
& = \frac { e ^{ 4 x  } + 2 e ^{ 2 x  } + 1  } { 4  } \\
& = \frac { 1  } { 4  } + \sum _{ k \geq 0  } \frac { 4 ^i + 2 ^{ i + 1  }  } { 4  } \frac { x ^i  } { i !  } 
\end{aligned}</script><p>于是有$[ x ^n ] \hat F ( x ) = 4 ^{ n - 1  } + 2 ^{ n - 1  } $.</p>
<h5><span id="example2圆排列">Example2(圆排列)</span></h5><p>长度为$n $的排列数的指数生成函数是$\hat P ( x ) = \sum _{ n \geq 0  } \frac { n ! x ^n  } { n !  } = \frac { 1  } { 1 - x  } $.</p>
<p>长度为$n $的圆排列的指数生成函数是$\hat Q ( x ) = \sum _{ n \geq 0  } \frac { ( n - 1 ) ! x ^n  } { n !  } = \frac { x ^n  } { n  } = - \ln ( 1 - x ) = \ln \frac { 1  } { 1 - x  } $.</p>
<p>于是有$\exp \hat Q ( x ) = \hat P ( x ) $.</p>
<p>这个怎么理解呢?考虑一个排列可以分成若干个置换环,而一个集合能形成的置换环数量显然就是圆排列.</p>
<h5><span id="example3错排数">Example3(错排数)</span></h5><p>从置换环的角度考虑,错排是指置换环中不存在自环的排列,也就是说不存在长度为$1 $的置换环,其EGF显然是$\sum _{ n \geq 2  } \frac { x ^n  } { n  } = - \ln ( 1 - x ) - x $,错排数的EGF对其取$\exp $即可.</p>
<h5><span id="example4点带编号无向连通图计数">Example4(点带编号无向连通图计数)</span></h5><p>考虑如果$n $个点带编号的无向连通图的EGF是$\hat F ( x ) $,那么$n $个点带标号无向图的EGF就是$\exp \hat F ( x ) $,后者直接计数,前者对后者做一次$\ln $就好.</p>
<h5><span id="example5不动点计数">Example5(不动点计数)</span></h5><p>求有多少个映射$f : \{ 1 , 2 , \cdots , n \} \mapsto \{ 1 , 2 , \cdots , n \} $满足$f \circ f \circ \cdots \circ f $(共$k $个$f $)$= f \circ f \circ \cdots \circ f $(共$k - 1 $个$f $).</p>
<p>考虑将$i \rightarrow f _i $,这等价于对深度不超过$k $的基环树(环的长度为$1 $)计数,等价于对深度不超过$k $的有根树计数.注意到删去根节点后等价于对深度不超过$k - 1 $的有根树计数,因此$\hat F _k ( x ) = x \exp \hat F _{ k - 1  } ( x ) $.</p>
<h5><span id="example6cf891elust">Example6([CF891E]Lust)</span></h5><p>假设$k $次操作后$a _i $减少了$b _i $,实际上要求的就是$\prod _{ i = 1  } ^n a _i - \prod _{ i = 1  } ^n ( a _i - b _i ) $.</p>
<p>考虑对所有情况下的$\prod _{ i = 1  } ^n ( a _i - b _i ) $求和,注意到$k $次操作,使得$i $出现$b _i $次的方案数是$\frac { k !  } { \prod _{ i = 1  } ^n b _i !  } $.直接设$a _j $的EGF是</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat F _{ j  } ( x ) & = \sum _{ i \geq 0  } ( a _j - i ) \frac { x ^i  } { i !  } \\
& = \sum _{ i \geq 0  } a _j \frac { x ^i  } { i !  } - \sum _{ i \geq 1  } \frac { x ^i  } { ( i - 1 ) !  } \\
& = a _j e ^x - xe ^x & = ( a _j - x ) e ^x 
\end{aligned}</script><p>答案就是$[ x ^k ] \prod _{ j = 1  } ^n \hat F _j ( x ) $.</p>
<h5><span id="example7">Example7</span></h5><h3><span id="狄利克雷生成函数dgf">狄利克雷生成函数(DGF)</span></h3><p>对于序列$f _n $,定义其DGF为$\tilde { F  } ( x ) = \sum _{ i \geq 1  } \frac { f _i  } { i ^x  } $.注意到若$f $是积性函数,那么$\tilde { F  } ( x ) = \prod _{ p \in prime  } \sum _{ i \geq 0  } \frac { f _{ p ^i  }  } { p ^{ ix  }  } \ $.</p>
<h4><span id="基本运算">基本运算</span></h4><p>对于两个序列$f , g $,其DGF之积对应的是两者的狄利克雷卷积序列的DGF:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\tilde { F  } ( x ) \tilde { G  } ( x ) & = \sum _{ i  } \sum _{ j  } \frac { f ( i ) g ( j )  } { ( ij ) ^x  } \\
& = \sum _{ i  } \frac { 1  } { i ^x  } \sum _{ d | i  } f ( d ) g ( \frac { i  } { d  } ) 
\end{aligned}</script><h4><span id="封闭式">封闭式</span></h4><ol>
<li>$\epsilon ( x ) = [ x = 1 ] $.</li>
</ol>
<p>显然为$\tilde { E  } ( x ) = 1 $.</p>
<ol>
<li>$I ( x ) = 1 $.</li>
</ol>
<p>其封闭式是黎曼函数$\zeta ( x ) $,事实上,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\zeta ( x ) & = \prod _{ i \geq 1  } \frac { 1  } { i ^x  } \\
& = \prod _{ p \in prime  } \sum _{ i \geq 0  } \frac { 1  } { p ^{ ix  }  } \\
& = \prod _{ p \in prime  } \frac { 1  } { 1 - p ^{ - x  }  } 
\end{aligned}</script><ol>
<li>$\mu ( n ) $.</li>
</ol>
<p>其DGF为$\tilde { M  } ( x ) = \prod _{ p \in prime  } ( 1 - p ^{ - x  } ) $.注意到$\zeta ( x ) \tilde { M  } ( x ) = 1 , \tilde { M  } ( x ) = \frac { 1  } { \zeta ( x )  } $.</p>
<ol>
<li>$id ( n ) = n $.</li>
</ol>
<p>有$\tilde { ID  } ( n ) = \prod _{ i \geq 1  } \frac { i  } { i ^x  } = \prod _{ i \geq 1  } \frac { 1  } { i ^{ x - 1  }  } = \zeta ( x - 1 ) $.</p>
<ol>
<li>$I _k ( n ) = n ^k $.</li>
</ol>
<script type="math/tex; mode=display">
\tilde { I _k  } ( x ) = \prod _{ i \geq 1  } \frac { 1  } { i ^{ x - k  }  } = \zeta ( x - k )</script><ol>
<li>$\varphi ( n ) $.</li>
</ol>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\tilde { \Phi  } ( x ) & = \prod _{ p \in prime  } ( 1 + \frac { p - 1  } { p ^x  } + \frac { p ( p - 1 )  } { p ^{ 2 x  }  } + \cdots ) \\
& = \prod _{ p \in prime  } \frac { 1 - p ^{ - x  }  } { 1 - p ^{ 1 - x  }  } \\
& = \tilde { \Phi  } ( x ) & = \frac { \zeta ( x - 1 )  } { \zeta ( x )  } 
\end{aligned}</script><p>也注意到$\tilde { \Phi  } ( x ) I ( x ) = \zeta ( x - 1 ) = \tilde { ID  } ( x ) $.</p>
<ol>
<li>$\sigma _k ( n ) = \sum _{ d | n  } d ^k $.</li>
</ol>
<p>注意到$\sigma _k ( n ) = I _k ( n ) * I _0 ( n ) $,也就是说$\tilde { S  } ( x ) = \zeta ( x - k ) \zeta ( x ) $.</p>
<ol>
<li>$u ( n ) = | \mu ( n ) | $.</li>
</ol>
<p>$\tilde { u  } ( n ) = \frac { \zeta ( n )  } { \zeta ( 2 n )  } $.</p>
<h4><span id="example">Example</span></h4><h5><span id="example1luogup3768">Example1(luoguP3768)</span></h5><p>考虑对于$f ( n ) = n ^2 \varphi ( n ) $构造积性函数$g ( n ) , h ( n ) $使得$f * g = h $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\tilde { F  } ( x ) & = \prod _{ p \in prime  } ( 1 + \sum _{ k \geq 1  } \frac { p ^{ 3 k - 1  } ( p - 1 )  } { p ^{ kx  }  } ) \\
& = \prod _{ p \in prime  } \frac { 1 - p ^{ 2 - x  }  } { 1 - p ^{ 3 - x  }  } & = \frac { \zeta ( x - 3 )  } { \zeta ( x - 2 )  } 
\end{aligned}</script><p>也就是$f * I _2 = I _3 $.</p>
<h3><span id="阶乘的扩展定义">阶乘的扩展定义</span></h3><p>对于复数的阶乘,我们通常定义:</p>
<script type="math/tex; mode=display">
\cfrac { 1  } { z !  } = \lim _{ n \rightarrow + \infin  } \binom { n + z  } { z  } n ^{ - z  }</script><p>同时我们定义$\Gamma ( z + 1 ) = z ! $,有:$( - z ) ! \Gamma ( z ) = \cfrac { \pi  } { \sin ( \pi z )  } $.</p>
<p>这样我们还可以定义广义阶乘幂:</p>
<script type="math/tex; mode=display">
\begin{aligned}
z ^{ \underline { w  }  } & = \cfrac { z !  } { ( z - w ) !  } \\
z ^{ \overline { w  }  } & = \cfrac { \Gamma ( z + w )  } { \Gamma ( z )  } 
\end{aligned}</script><p>通过以上我们还可以有二项式系数的定义:</p>
<script type="math/tex; mode=display">
\binom { z  } { w  } = \lim _{ \zeta \rightarrow z , \omega \rightarrow w  } \cfrac { \zeta !  } { \omega ! ( \zeta - \omega ) !  }</script><h3><span id="超几何级数">超几何级数</span></h3><h4><span id="超几何函数">超几何函数</span></h4><p>我们定义超几何函数$F ( a _1 , . . . , a _m ; b _1 , . . . b _n ; z ) = F \left ( \begin{array}{ r |  } a _1 , . . . , a _m \ b _1 , . . . , b _n \end{array} z \right ) = \sum _{ k \geq 0  } \cfrac { z ^k \prod _{ i = 1  } ^m a _i ^{ \overline { k  }  }  } { k ! \prod _{ i = 1  } ^n b _i ^{ \overline { k  }  }  } $.</p>
<p>许多生成函数都可以写成超几何函数的形式.</p>
<p>值得一提的是,如果我们直接定义类似$\cfrac { 0  } { 0  } = 1 $之类的式子,可以发现当$z = 0 $时任意超几何函数总是$= 1 $.</p>
<p>值得一提的是,我们通常直接忽略超几何函数中的任何特殊情况,例如分母为$0 $或者哪里出现了正无穷.如同生成函数中我们不关心式子带入一个数后是否收敛而只关心是否两边存在一种对应的转化.如果你想去探究超几何函数中的各种情况,那请去翻那本巨大的、黑糊糊的、作者默认你精通高等数学的、你在第五章看到的恒等式作者在第七章才给出证明的《具体数学》,而不是看我这个弱智写的笔记.笔者看这一段的时候已经被作者的”严谨”态度整疯了.该证明的一拖再拖不该证明的可以一句话带过的逼逼逼逼.仿佛这本书就是写给那些已经会了所有东西只是来使自己已经学会的东西更加体系化的以及拿来查阅各种恒等式的工具书.</p>
<h4><span id="特殊的超几何函数">特殊的超几何函数</span></h4><h5><span id="合流超几何函数">合流超几何函数</span></h5><p>我们通常把形如$M ( a ; b ; z ) = F \left ( \begin{array}{ r |  } a \ b \end{array} z \right ) = \sum _{ k \geq 0  } \cfrac { z ^k a ^{ \overline { k  }  }  } { b ^{ \overline { k  }  } k !  } $的函数称为合流超几何函数.</p>
<p>不难发现我们有:</p>
<script type="math/tex; mode=display">
F \left ( \begin{array}
{ r |  } 1 \\
1 
\end{array} z \right ) = e ^z</script><p>也即常见生成函数中的$( 6 ) $.</p>
<h5><span id="高斯超几何函数">高斯超几何函数</span></h5><p>我们把形如$F \left ( \begin{array}{ r |  } a , b \ c \end{array} z \right ) = \sum _{ k \geq 0  } \cfrac { z ^k a ^{ \overline { k  }  } b ^{ \overline { k  }  }  } { c ^{ \overline { k  }  } k !  } $的函数称为高斯超几何函数.</p>
<p>下面是几种常见的高斯超几何函数形式:</p>
<ol>
<li>$F \left ( \begin{array}{ r |  } 1 , 1 \ 1 \end{array} z \right ) = \cfrac { 1  } { 1 - z  } $.</li>
</ol>
<p>即常见生成函数$( 1 ) $.</p>
<ol>
<li>$F \left ( \begin{array}{ r |  } - a , 1 \ 1 \end{array} - z \right ) = ( 1 + z ) ^a $.</li>
</ol>
<p>即常见生成函数$( 2 ) $.</p>
<ol>
<li>$F \left ( \begin{array}{ r |  } a , 1 \ 1 \end{array} z \right ) = \cfrac { 1  } { ( 1 - z ) ^a  } $.</li>
</ol>
<p>即常见生成函数$( 4 ) $.</p>
<ol>
<li>$F \left ( \begin{array}{ r |  } 1 , 1 \ 2 \end{array} - z \right ) = \cfrac { \ln ( 1 + z )  } { z  } $.</li>
</ol>
<p>即常见生成函数$( 7 ) $.</p>
<h4><span id="超几何级数的应用">超几何级数的应用</span></h4><p>我们先考虑改写超几何级数的形式:</p>
<p>$F \left ( \begin{array}{ r |  } a _1 , . . . , a _m \ b _1 , . . . , b _n \end{array} z \right ) = \sum _{ k \geq 0  } t _k , t _k = \cfrac { z ^k \prod _{ i = 1  } ^m a _i ^{ \overline { k  }  }  } { k ! \prod _{ i = 1  } ^n b _i ^{ \overline { k  }  }  } $.</p>
<p>不难发现$t _0 = 1 $,而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { t _{ k + 1  }  } { t _k  } & = \cfrac { z ^{ k + 1  }  } { z ^k  } \cfrac { k !  } { ( k + 1 ) !  } \cfrac { \prod _{ i = 1  } ^m a _i ^{ \overline { k + 1  }  }  } { \prod _{ i = 1  } ^m a _i ^{ \overline { k  }  }  } \cfrac { \prod _{ i = 1  } ^n b _i ^{ \overline { k  }  }  } { \prod _{ i = 1  } ^n b _i ^{ \overline { k + 1  }  }  } \\
& = \cfrac { \prod _{ i = 1  } ^m ( k + a _i )  } { \prod _{ i = 1  } ^n ( k + b _i )  } \cfrac { z  } { k + 1  } 
\end{aligned}</script><p>换句话说,$\cfrac { t _{ k + 1  }  } { t _k  } $是关于$k $的一个有理函数.而根据代数基本定理,任意$k $的有理函数在$\mathbb { C  } $内都可以分解为以上的形式(如果缺少$k + 1 $项则需要上下同时乘以$k + 1 $以补上).</p>
<p>换句话说,对于一个无穷级数$\sum _{ k \geq 0  } t _k $,我们先将$\cfrac { t _{ k + 1  }  } { t _k  } $表示回超几何函数,设为$F $.</p>
<p>那么有:$\sum _{ k \geq 0  } t _k = t _0 F $.</p>
<p>好,接下来请把脑子扔了,不要纠结某一个公式按理来说只能作用于正整数而在这里直接将它套在了复数域上.你只需要知道数学家非常厉害通过扩展一些东西的定义(大部分是阶乘和$\Gamma $函数的定义)来使这些公式全部成立.But who cares,只要我们能用就行了.我又不是数竞人,这些麻烦的要死我直观上根本无法接受的定义交给数竞老哥证明得了.反正信竞更多依赖离散数学,大不了我们直接默认所有的数都是自然数.</p>
<h5><span id="example">Example</span></h5><p>求证:$\sum _{ k \leq n  } \binom { r + k  } { k  } = \binom { r + n + 1  } { n  } \Leftrightarrow F \left ( \begin{array}{ r |  } 1 , - n \ - n - r \end{array} 1 \right ) = \cfrac { r + n + 1  } { r + 1  } , n \in \mathbb { N  } \ $.</p>
<p>首先考虑:</p>
<script type="math/tex; mode=display">
\sum _{ k \leq n  } \binom { r + k  } { k  } = \sum _{ k \geq 0  } \binom { r + n - k  } { n - k  }</script><p>有了这个无穷级数,我们可以直接将二项式系数用阶乘形式展开,于是得到:</p>
<script type="math/tex; mode=display">
\binom { r + n  } { n  } F \left ( \begin{array}
{ r |  } 1 , - n \\
- n - r 
\end{array} 1 \right ) = \binom { r + n + 1  } { n  }</script><p>两边同时除以$\binom { r + n  } { n  } $得到上式.</p>
<h5><span id="二项式系数与超几何函数">二项式系数与超几何函数</span></h5><p>通过范德蒙德卷积,不难验证:</p>
<script type="math/tex; mode=display">
F \left ( \begin{array}
{ r |  } a , b \\
c 
\end{array} 1 \right ) = \cfrac { \Gamma ( c - a - b ) \Gamma ( c )  } { \Gamma ( c - a ) \Gamma ( c - b )  } , - b \in \mathbb { N  }</script><p>这个公式的一个特例是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F \left ( \begin{array}
{ r |  } a , - n \\
c 
\end{array} 1 \right ) & = \cfrac { ( c - a ) ^{ \overline { n  }  }  } { c ^{ \overline { n  }  }  } & = \cfrac { ( a - c ) ^{ \underline { n  }  }  } { ( - c ) ^{ \underline { n  }  }  } , n \in \mathbb { N  } \\
\sum _{ k \geq 0  } \cfrac { a ^{ \overline { k  }  } ( - n ) ^{ \overline { k  }  }  } { c ^{ \overline { k  }  } k !  } & = \cfrac { ( c - a ) ^{ \overline { n  }  }  } { c ^{ \overline { n  }  }  } & = \cfrac { ( a - c ) ^{ \underline { n  }  }  } { ( - c ) ^{ \underline { n  }  }  } , n \in \mathbb { N  } \\

\end{aligned}</script><p>这个公式几乎囊括了所有的基本二项式求和公式:上指标求和,平行求和,范德蒙德卷积……几乎只要是我们推出的由两个及以下项的乘积求和的二项式系数相关的式子都可以使用这个式子.</p>
<p>那么如果我们要三项相乘或更多,我们有Saalschütz恒等式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F \left ( \begin{array}
{ r |  } a , b , - n \\
c , a + b - n - c + 1 
\end{array} 1 \right ) & = \cfrac { ( c - a ) ^{ \overline { n  }  } ( c - b ) ^{ \overline { n  }  }  } { c ^{ \overline { n  }  } ( c - a - b ) ^{ \overline { n  }  }  } & = \cfrac { ( a - c ) ^{ \underline { n  }  } ( b - c ) ^{ \underline { n  }  }  } { ( - c ) ^{ \underline { n  }  } ( a + b - c ) ^{ \overline { n  }  }  } , n \in \mathbb { N  } \\

\end{aligned}</script><p>事实上,《具体数学》上给出了大量的超几何级数的应用以及各种技巧,但是笔者的智商已经理解不了接下来的内容了.考虑到大部分时候上述两个超几何级数恒等式已经足够解决绝大部分问题,如果考到更加困难的求和技巧,笔者相信别人也不会做,于是笔者决定摆烂.</p>
<h3><span id="求微分方程">求微分方程</span></h3><h4><span id="example1luogu4931">Example1(luogu4931)</span></h4><p>二项式反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans _k & = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \binom { i  } { k  } \binom { n  } { i  } \binom { n  } { i  } i ! ( 2 n - 2 i ) ! 2 ^i \\
& = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \frac { 1  } { k ! ( i - k ) !  } \frac { n !  } { ( n - i ) !  } \frac { n !  } { ( n - i ) !  } ( 2 n - 2 i ) ! 2 ^i \\
& = ( n ! ) ^2 \frac { 2 ^k  } { k !  } \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \frac { 1  } { ( i - k ) !  } \binom { 2 n - 2 i  } { n - i  } 2 ^{ i - k  } \\
& = ( n ! ) ^2 \frac { 2 ^k  } { k !  } \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } 
\end{aligned}</script><p>注意到后者只与$n - k $有关,不妨设其为$f _{ n  } = \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } $,预处理一下就可以做到$O ( n ^2 + nT ) $.</p>
<p>加强版咋做?我们继续看看式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = ( n ! ) ^2 \frac { 2 ^k  } { k !  } f _{ n - k  } \\
f _{ n  } & = \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } 
\end{aligned}</script><p>注意到$f $是一个卷积的形式,设其生成函数为$F _n $,$g _n = \frac { ( - 2 ) ^n  } { n !  } , h _n = \binom { 2 n  } { n  } $,我们自然有$F = GH $.</p>
<p>考虑$G $和$H $的生成函数形式,先看$G $,显然用泰勒展开:</p>
<script type="math/tex; mode=display">
G = \sum _{ n \geq 0  } \frac { ( - 2 x ) ^n  } { n !  } = e ^{ - 2 x  }</script><p>再看$H $,是卡特兰数的生成函数,有:</p>
<script type="math/tex; mode=display">
H = \frac { 1  } { \sqrt { 1 - 4 x  }  }</script><p>这下简单了,答案是:</p>
<script type="math/tex; mode=display">
( n ! ) ^2 \frac { 2 ^k  } { k !  } [ x ^{ n - k  } ] \frac { e ^{ - 2 x  }  } { \sqrt { 1 - 4 x  }  }</script><p>现在看$F $,平方一下有:</p>
<script type="math/tex; mode=display">
( 1 - 4 x ) F ^2 = e ^{ - 4 x  }</script><p>两边求导:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- 4 F ^2 + ( 1 - 4 x ) 2 F \times F ' & = - 4 e ^{ - 4 x  } \\
- 4 F ^2 + ( 1 - 4 x ) 2 F \times F ' & = - 4 ( 1 - 4 x ) F ^2 \\
( 2 - 8 x ) F ' & = 16 xF \\

\end{aligned}</script><p>得到了一个线性递推形式,更进一步地:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ( i + 1 ) f _{ i + 1  } - 8 if _i & = 16 f _{ i - 1  } \\
if _i & = 4 ( i - 1 ) f _{ i - 1  } + 8 f _{ i - 2  } 
\end{aligned}</script><p>技术总结一下:其实就是你想要得到一个递推式,然后注意到这玩意要写成微分方程的形式,所以开始往那边凑.</p>
<h3><span id="生成函数的应用">生成函数的应用</span></h3><h4><span id="求解递归关系">求解递归关系</span></h4><p>我们假设已经有了$R ( z ) = \sum _{ k \geq 0  } g _k z ^k $,并且$R ( z ) = \cfrac { P ( z )  } { Q ( z )  } $,其中$P ( z ) $和$Q ( z ) $都是多项式,我们想要找到一种方式求解$[ z ^n ] R ( z ) $.</p>
<p>考虑有理函数$S ( z ) = \sum _{ k = 1  } ^m \cfrac { a _k  } { 1 - \rho _k z  } \ $,不难发现$[ z ^n ] S ( z ) = \sum _{ k = 1  } ^m a _k \rho _k ^n \ $.</p>
<p>那么可以证明,只要$Q ( z ) = 0 $无重根并且无零根,那么就存在一组系数满足$S ( z ) = R ( z ) $.</p>
<p>我们这么定义”反射”运算,若$Q ( z ) = \sum _{ k = 0  } ^m q _k z ^k \ $,则其反射多项式为$Q ^R ( z ) = \sum _{ k = 0  } ^m q _k z ^{ m - k  } \ $.</p>
<p>若$Q ( z ) = q _0 \prod _{ k = 1  } ^m ( 1 - \rho _k z ) $,则显然有$Q ^R ( z ) = q _0 \prod _{ k = 1  } ^m ( z - \rho _k ) \ $.</p>
<p>那么显然这里求出来的这组数$\rho $就是$S ( z ) $中的那组$\rho $.</p>
<p>而我们有$a _k = \cfrac { - \rho _k P ( \cfrac { 1  } { \rho _k  } )  } { Q ‘ ( \rho _k )  } $.</p>
<h4><span id="example1">Example1</span></h4><p>已知$n ! = \sum _{ k  } \binom { n  } { k  } g _{ n - k  } , n \in \mathbb { N  } \ $,求$g _n $.</p>
<p>首先两边同时除以$n ! $并将组合数用阶乘形式展开,我们有:</p>
<script type="math/tex; mode=display">
1 = \sum _{ k  } \cfrac { g _{ n - k  }  } { k ! ( n - k ) !  } .</script><p>如果我们令$D ( z ) = \sum _{ k \geq 0  } \cfrac { g _{ k  }  } { k !  } z ^k $,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cfrac { 1  } { 1 - z  } & = e ^z D ( z ) \\
D ( z ) & = \cfrac { 1  } { 1 - z  } e ^{ - z  } \\
D ( z ) & = ( \sum _{ k \geq 0  } z ^k ) ( \sum _{ k \geq 0  } ( - 1 ) ^k \cfrac { z ^k  } { k !  } ) \\
[ z ^n ] D ( z ) & = \sum _{ k = 0  } ^n \cfrac { ( - 1 ) ^k  } { k !  } 
\end{aligned}</script><p>于是$g _n = n ! \sum _{ k = 0  } ^n \cfrac { ( - 1 ) ^k  } { k !  } \ $.</p>
<h4><span id="example2qoj5169-夹娃娃">Example2([QOJ5169] 夹娃娃)</span></h4><p>首先设$F _i ( x ) $为第$i $家的生成函数,这个是显然可以快速预处理出来的.令$M = 520 $.</p>
<p>问题在于每次询问的时候求出答案呢?</p>
<p>这里有一个套路:我们在一开始就暴力做点值,最后拿拉格朗日插值求答案.中间大概把能预处理的都预处理一下.最后的问题在于:</p>
<p>第一,预处理点值的时候,一共有$n $个多项式,最高次数是$M $,因此一共要插入$nM $个值,又要处理每个后缀,复杂度来到$O ( n ^2 M ^3 ) $.这个问题是好解决的.我们只需要在带入点值的时候做一个后缀继承一类的东西,复杂度就可以来到$O ( n ^2 M ^2 ) $.</p>
<p>第二,询问的时候需要找到所有对应的点值并暴力乘起来,复杂度来到$O ( n ^2 Mq ) $.但$n $如此小,我们可以用指数级别的复杂度来优化,我们考虑预处理一下$2 ^n $的答案,复杂度来到$O ( nM 2 ^n q ) $.但是这个更不太行.那怎么办呢?我们把这个指数级别的东西分块一下.预处理复杂度来到$O ( \frac { n  } { B  } B 2 ^B MnM ) $,单次询问复杂度来到$O ( \frac { n  } { B  } Mnq ) $.但这个预处理复杂度好像还是有点艰难.不过注意到如果做一个剪枝优化:如果总共的喜欢的店的个数乘以$k $要大于$m $,就直接输出$0 $.预处理的时候块内部也做一个剪枝,然后发现就能过了(牛逼).</p>
<p>第三,拉格朗日插值的时候需要$O ( ( nM ) ^2 q ) $的复杂度,不过由于点值可以自己控制,这个复杂度可以轻松降到$O ( nMq ) $.</p>
<h4><span id="example3十二省联考-2019-皮配">Example3([十二省联考 2019] 皮配)</span></h4><p>首先注意到题目等价于规定一个阵营和一个排序的人数上下界.</p>
<p>我们可以将这四位导师分别记为$xy , y , x , 1 $,这样最后判断幂在一个区间内的$x $和$y $前面的系数就行.</p>
<p>注意到如果没有学校有偏好,将生成函数卷起来后得到的答案就是$\prod ( x ^{ s _i  } y ^{ s _i  } + x ^{ s _i  } ) + \prod ( y ^{ s _i  } + 1 ) = ( \prod ( x ^{ s _i  } + 1 ) ) ( \prod ( y ^{ s _i  } + 1 ) ) $.也就是$x $和$y $是互相独立的,我们可以分开算.</p>
<p>对于那些有偏好的学校,我们暴力算就行.复杂度不会高于$O ( mk ^2 s ) $.最后两部分合并一下.</p>
]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>计算几何</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="二维计算几何">二维计算几何</span></h2><p>参考:<a href="https://www.luogu.com.cn/blog/command-block/ji-suan-ji-he-suan-fa-hui-zong">https://www.luogu.com.cn/blog/command-block/ji-suan-ji-he-suan-fa-hui-zong</a>.</p>
<p>这一部分比较常用,知识点也比较简单,会主要聚焦于写法.</p>
<h3><span id="基本函数">基本函数</span></h3><h4><span id="eps">eps</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-10</span></span><br></pre></td></tr></table></figure>
<p>浮点数计算存在误差,因此大部分时候不能直接进行大小是否相等的判断,我们需要通过规定精度来减少这种误差.</p>
<h4><span id="sign">sign</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sign</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;eps&amp;&amp;-x&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;eps)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用于判断一个浮点数是正数还是负数.</p>
<h4><span id="myabs">myabs</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">myabs</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(x)==<span class="number">-1</span>)<span class="keyword">return</span> -x;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用来求绝对值.</p>
<h4><span id="mysqr">mysqr</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">mysqr</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用来求平方.</p>
<h4><span id="pointvector">Point/Vector</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="type">double</span> x,y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="type">double</span> X,<span class="type">double</span> Y)&#123;</span><br><span class="line">x=X;y=Y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;<span class="comment">//判断到原点的距离</span></span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">que</span><span class="params">()</span></span>&#123;<span class="comment">//判断点的象限</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(x)== <span class="number">1</span>&amp;&amp;<span class="built_in">sign</span>(y)== <span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(x)==<span class="number">-1</span>&amp;&amp;<span class="built_in">sign</span>(y)== <span class="number">1</span>)<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(x)==<span class="number">-1</span>&amp;&amp;<span class="built_in">sign</span>(y)==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> +(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> -(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> *(<span class="type">const</span> <span class="type">double</span> &amp;c,<span class="type">const</span> Point &amp;A)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(c*A.x,c*A.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> *(<span class="type">const</span> Point &amp;A,<span class="type">const</span> <span class="type">double</span> &amp;c)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(c*A.x,c*A.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">inline</span> Point <span class="keyword">operator</span> /(<span class="type">const</span> Point &amp;A,<span class="type">const</span> <span class="type">double</span> &amp;c)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(A.x/c,A.y/c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dist</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> std::<span class="built_in">sqrt</span>(<span class="built_in">mysqr</span>(A.x-B.x)+<span class="built_in">mysqr</span>(A.y-B.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>存储基本的点的信息.也可以看作一个二维向量.</p>
<h4><span id="向量内积">向量内积</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="type">double</span> <span class="keyword">operator</span> *(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B)&#123;</span><br><span class="line"><span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是$\vec { a  } \cdot \vec { b  } = | \vec { a  } | | \vec { b  } | \cos \theta = x _a x _b + y _a y _b $.也就等于$\vec { a  } $在$b $上的投影与$\vec { b  } $的模长的乘积.</p>
<p>内积可以用来判断夹角:</p>
<ol>
<li><p>如果$\vec { a  } \cdot \vec { b  } = 0 $,则说明$\vec { a  } \bot \vec { b  } $.</p>
</li>
<li><p>如果$\vec { a  } \cdot \vec { b  } &gt; 0 $,则说明$\vec { a  } $和$\vec { b  } $正方向的夹角小于$90 \degree $.</p>
</li>
<li><p>如果$\vec { a  } \cdot \vec { b  } &lt; 0 $,则说明$\vec { a  } $和$\vec { b  } $正方向的夹角大于$90 \degree $.</p>
</li>
</ol>
<p>两个向量同时旋转相同角度,其内积结果不变.</p>
<h4><span id="向量叉积">向量叉积</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="keyword">operator</span> ^(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B)&#123;</span><br><span class="line"><span class="keyword">return</span> A.x*B.y-B.x*A.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是$\vec { a  } \times \vec { b  } = x _a y _b - y _a x _b $.也就等于$\vec { a  } , \vec { b  } $两个向量张成的平行四边形(有向)的面积.</p>
<p>叉积可以用来判断方向:</p>
<ol>
<li><p>如果$\vec { a  } \times \vec { b  } = 0 $,说明二者共线.</p>
</li>
<li><p>如果$\vec { a  } \times \vec { b  } &lt; 0 $,说明从$\vec { a  } $到$\vec { b  } $的方向是顺时针.</p>
</li>
<li><p>如果$\vec { a  } \times \vec { b  } &gt; 0 $,说明从$\vec { a  } $到$\vec { b  } $的方向是逆时针.</p>
</li>
</ol>
<h4><span id="向量旋转">向量旋转</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入Point内部</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">rotate</span><span class="params">(<span class="type">double</span> theta)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> st=std::<span class="built_in">sin</span>(theta),<span class="type">double</span> ct=std::<span class="built_in">cos</span>(theta);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(x*ct-A.y*st,A.x*st+A.y*ct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是将这个竖向量乘左乘旋转矩阵$\begin{bmatrix}\cos \theta &amp; - \sin \theta \ \sin \theta &amp; \cos \theta \end{bmatrix} $.</p>
<h4><span id="line">Line</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>&#123;</span><br><span class="line">Point a,b;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">len</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dist</span>(a,b);<span class="comment">//计算线段长度,直线和射线基本没用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onl0</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Line &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>((A-L.a)^(A-L.b))==<span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//判断点是否在直线上</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">onl2</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Line &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">sign</span>((A-L.a)^(A-L.b))==<span class="number">0</span>)&amp;&amp;</span><br><span class="line">(<span class="built_in">sign</span>(A.x-std::<span class="built_in">min</span>(L.a.x,L.b.x))&gt;=<span class="number">0</span>)&amp;&amp;</span><br><span class="line">(<span class="built_in">sign</span>(A.x-std::<span class="built_in">max</span>(L.a.x,L.b.x))&gt;=<span class="number">0</span>)&amp;&amp;</span><br><span class="line">(<span class="built_in">sign</span>(A.y-std::<span class="built_in">min</span>(L.a.y,L.b.y))&gt;=<span class="number">0</span>)&amp;&amp;</span><br><span class="line">(<span class="built_in">sign</span>(A.y-std::<span class="built_in">max</span>(L.a.y,L.b.y))&lt;=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//判断点是否在线段上</span></span><br></pre></td></tr></table></figure>
<p>用来维护直线/射线/线段的基本信息.</p>
<h4><span id="判断线段相交">判断线段相交</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isinter</span><span class="params">(<span class="type">const</span> Line &amp;L1,<span class="type">const</span> Line &amp;L2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(std::<span class="built_in">max</span>(L1.a.x,L1.b.x)&lt;std::<span class="built_in">min</span>(L2.a.x,L2.b.x))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(std::<span class="built_in">max</span>(L2.a.x,L2.b.x)&lt;std::<span class="built_in">min</span>(L1.a.x,L1.b.x))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(std::<span class="built_in">max</span>(L1.a.y,L1.b.y)&lt;std::<span class="built_in">min</span>(L2.a.y,L2.b.y))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(std::<span class="built_in">max</span>(L2.a.y,L2.b.y)&lt;std::<span class="built_in">min</span>(L1.a.y,L1.b.y))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(((L1.a-L2.b)^(L2.a-L2.b))*((L1.b-L2.b)^(L2.a-L2.b))&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(((L2.a-L1.b)^(L1.a-L1.b))*((L2.b-L1.b)^(L1.a-L1.b))&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前四行被称为快速排斥实验,后两行被称为跨立实验,也就是相交的两线段,对于其中一个线段而言,它的两个端点必然在另一个线段的两侧.但我们注意到共线线段也会通过跨立实验,因此拿快速排斥实验来判掉这种情况.</p>
<p>注意,线段交点不同于直线交点,两条共线的交点是有可能在端点上的.这个需要特判一下.</p>
<p>当然一般判断线段是否相交可以直接求直线交点,然后判断在不在线段上.</p>
<h4><span id="求直线交点">求直线交点</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Point <span class="title">inter</span><span class="params">(<span class="type">const</span> Line &amp;L1,<span class="type">const</span> Line &amp;L2)</span></span>&#123;</span><br><span class="line"><span class="type">double</span> ls=(L1.b-L1.a)^(L2.a-L1.a);</span><br><span class="line"><span class="type">double</span> rs=(L1.b-L1.a)^(L2.b-L1.a);</span><br><span class="line"><span class="keyword">return</span> L2.a+(L2.b-L2.a)*ls/(ls-rs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原理在于,画一下$x _{ L _1  } , x _{ L _2  } , y _{ L _1  } , y _{ L _2  } $围成的四边形,计算面积后用等高不等底计算.注意$ls $和$rs $所代表的面积一正一负(不一定谁是正),因此需要减一下.</p>
<h4><span id="点到线的最短距离">点到线的最短距离</span></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disl0</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Line &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">myabs</span>(((L.a-A)^(L.b-A))/<span class="built_in">dis</span>(L.a,L.b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">disl2</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Line &amp;L)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>((A-L.a)*(L.b-L.a))&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">dist</span>(A,L.a);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>((A-L.b)*(L.a-L.b))&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">dist</span>(A,L.b);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">disl0</span>(A,L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直线好做,直接算垂线段长度,用面积除以底长.</p>
<p>线段用点积判一下夹角即可.</p>
<h4><span id="凸多边形面积">凸多边形面积</span></h4><p>利用叉乘,任取平面上一点$O $,则$S = \frac { 1  } { 2  } \sum _{ i = 1  } ^n \overrightarrow { OP _i  } \times \overrightarrow { OP _{ i + 1  }  } $.证明的话考虑分$O $在内部和$O $在外部两种情况分类讨论.注意此时的$P $必须逆时针排列.</p>
<p>另外有皮克定理:在一个平面直角坐标系内,以整点为顶点的简单多边形(任两边不交叉),它内部整点数为$a $,它的边上(包括顶点)的整点数为$b $,则它的面积$S = a + \frac { b  } { 2  } - 1 $.</p>
<h3><span id="基本算法">基本算法</span></h3><h4><span id="排序算法">排序算法</span></h4><h5><span id="极角排序">极角排序</span></h5><p>定义原点$O $并建立坐标系,所有点按照和$O $所连直线与$x $轴正方向的夹角排序.</p>
<p>极角排序通常使用叉乘来实现,因为叉乘可以快速计算两个向量的方向.但是注意到需要先判断象限,再判断叉乘.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point A,Point B)</span></span>&#123;<span class="comment">//判断A能否在B前面</span></span><br><span class="line">A=A-O,B=B-O;<span class="comment">//O=(0,0)的时候可以省略</span></span><br><span class="line"><span class="keyword">if</span>(A.<span class="built_in">qua</span>()!=B.<span class="built_in">qua</span>())&#123;</span><br><span class="line"><span class="keyword">return</span> A.<span class="built_in">qua</span>()&lt;B.<span class="built_in">qua</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(A^B)==<span class="number">0</span>)<span class="keyword">return</span> A.x&lt;B.x;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(B^A)==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5><span id="水平序排序">水平序排序</span></h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Point A,Point B)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sign</span>(A.x-B.x)==<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">sign</span>(A.y-B.y)==<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>(A.x-B.x)==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是$x $相同比$y $,否则比$x $.</p>
<h4><span id="二维凸包">二维凸包</span></h4><h5><span id="定义">定义</span></h5><p>包住平面上某个点集的周长最小的简单多边形,一定是凸多边形.</p>
<h5><span id="实现">实现</span></h5><p>用水平序排序,然后从左往右扫一遍得到上凸壳,从右往左扫一遍得到下凸壳.</p>
<p>用一下以下函数:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">anticlock</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B,<span class="type">const</span> Point &amp;C)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>((A-B)^(B-C))==<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isline</span><span class="params">(<span class="type">const</span> Point &amp;A,<span class="type">const</span> Point &amp;B,<span class="type">const</span> Point &amp;C)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sign</span>((A-B)^(B-C))==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>前者判断是否$ABC $三点是一个上凸的(注意$ABC $三点横坐标应该不降).后者判断三点共线.</p>
<h4><span id="旋转卡壳">旋转卡壳</span></h4><h5><span id="定义">定义</span></h5><p>定义凸包上的对踵点对,也就是拿两条平行直线卡着凸包转,这两条直线会卡住凸包的两个点,这些点对组成的集合就是对踵点对集合.</p>
<h5><span id="实现">实现</span></h5><p>逆时针枚举边,然后看对面有什么被卡住了.由于凸包的凸性,在边逆时针转的时候,另一边的对踵点也会逆时针转.只要找到距离这条边所在直线最远的点即可.但这样的点可能有俩.可以简单特判,也可以加上微小随机扰动量使得这种情况可以忽略.</p>
<h4><span id="闵可夫斯基和">闵可夫斯基和</span></h4><p>一般只讨论凸包的闵可夫斯基和.</p>
<h5><span id="定义">定义</span></h5><p>两个区域$A , B $的闵可夫斯基和定义为$\{ a + b \mid a \in A , b \in B \} $.</p>
<h5><span id="实现">实现</span></h5><p>事实上,新的区域所形成的凸包,一定是原本$A , B $的凸包的边按照某种顺序连接起来得到的结果.</p>
<p>我们考虑旋转一下$A , B $,使得$B $有一条边成为最右边的直上直下的一条边,然后考虑答案区域的最右边的边,这条边一定是$B $这个边加上$A $的最右边的点.这样这条边必定还在最终的凸包上.就算$A $最右边的是一条边,你也会发现最终的凸包最右边也一定是由$A $的这条边和$B $的这条边拼起来的.</p>
<p>显然,逆时针转一遍整个凸壳,将每条边改为向量(按照逆时针转的方向)然后极角排序,最后顺次链接就是答案.</p>
<h4><span id="半平面交">半平面交</span></h4><h5><span id="定义">定义</span></h5><p>定义半平面为满足$ax + by + c &gt; 0 $或$ax + by + c \geq 0 $的点对$( x , y ) $组成的集合,感性理解就是一条直线的一侧.</p>
<h5><span id="实现">实现</span></h5><p>首先直线不好描述左右侧,我们把直线改成向量,这样方便描述左右侧.并不妨假设所有的向量所表示的半平面在向量的左侧.如果两条向量方向相同,则取更靠左的那一条,也就是所在直线截距更大的那个,另一个直接删了就是了.当然你不想删可以把那个废物放前面,这样根据下面的操作过程中它会被弹掉.</p>
<p>我们这么实现:按照上面的顺序一个一个插入,维护一个单调队列.如果前两条向量的交点不在当前这条向量的控制范围,不难发现上一条向量是废物,弹掉它.这样做到最后,队首和队尾可能都有一些废物向量,把它们判掉弹掉即可.</p>
<h2><span id="三维计算几何">三维计算几何</span></h2><p>这一部分知识点比较困难,而几乎用不到,因此只讲简单知识点,就当是高中立体几何知识补档!</p>
<h3><span id="基本概念">基本概念</span></h3><h4><span id="直线">直线</span></h4><p>使用直线的方向向量$\vec { s  } = ( n , m , p ) $和直线上一点$M _0 = ( x _0 , y _0 , z _0 ) $.那么方程显然为:</p>
<script type="math/tex; mode=display">
\frac { x - x _0  } { n  } = \frac { y - y _0  } { m  } = \frac { z - z _0  } { p  }</script><p>如果换元,我们还有参数方程:</p>
<script type="math/tex; mode=display">
\begin{cases}
x = x _0 + nt \\
y = y _0 + mt \\
z = z _0 + pt 
\end{cases}</script><h4><span id="平面">平面</span></h4><p>使用平面上的一点$P _0 ( x _0 , y _0 , z _0 ) $和该平面的法向量$\vec { n  } $来表示一个平面,不妨设$\vec { n  } = ( A , B , C ) $,则该平面的方程显然为:</p>
<script type="math/tex; mode=display">
A ( x - x _0 ) + B ( y - y _0 ) + C ( z - z _0 ) = 0</script><p>如果我们令$D = - ( Ax _0 + By _0 + Cz _) $,那么平面方程为:</p>
<script type="math/tex; mode=display">
Ax + By + Cz + D = 0</script><h4><span id="夹角">夹角</span></h4><h5><span id="两直线夹角">两直线夹角.</span></h5><p>直接求方向向量的夹角,然后取正值.</p>
<p>对于方向向量分别是$\vec { s _1  } = ( n _1 , m _1 , p _1 ) , \vec { s _2  } = ( n _2 , m _2 , p _2 ) $,也就有$\varphi = \arccos ( \frac { | \vec { s  } _1 \cdot \vec { s  } _2 |  } { | \vec { s  } _1 | | \vec { s  } _2 |  } ) \ $.</p>
<h5><span id="直线与平面的夹角">直线与平面的夹角</span></h5><p>同样使用向量,不妨设方向向量$\vec { s  } = ( n , m , p ) $,法向量$\vec { f  } = ( a , b , c ) $,那么$\varphi = \arcsin ( \frac { | \vec { s  } \cdot \vec { f  } |  } { | \vec { s  } | | \vec { f  } |  } ) $.</p>
<p>另外,由上面这个式子,不难得到一些特殊情况下的判定标准:</p>
<ol>
<li><p>若直线与平面平行,则$am + bn + cp = 0 $.</p>
</li>
<li><p>若直线与平面垂直,则$\frac { a  } { m  } = \frac { b  } { n  } = \frac { c  } { p  } $.注意这里分母可能除以$0 $,我们实际上应该是三个形如$a = mt $的参数方程,这里简化了.</p>
</li>
</ol>
<h4><span id="交点">交点</span></h4><p>联立方程硬解.</p>
<h3><span id="基本定理">基本定理</span></h3><p>参考:<a href="https://zhuanlan.zhihu.com/p/401766934">https://zhuanlan.zhihu.com/p/401766934</a></p>
<h4><span id="三余弦定理最小角定理">三余弦定理(最小角定理)</span></h4><p>这个定理说明直线与平面的夹角,是所有包含直线的平面与这个平面形成的夹角中最小的那一个.并且偏移量决定了差距.</p>
<h4><span id="三正弦定理最大角定理">三正弦定理(最大角定理)</span></h4><p>这个定理说明二面角是另一个平面上的直线与平面的夹角中最大的那个,并且偏移量决定了差距.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>平邑一中集训作业</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E5%B9%B3%E9%82%91%E4%B8%80%E4%B8%AD%E9%9B%86%E8%AE%AD%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="反悔贪心">反悔贪心</span></h3><h3><span id="扫描线">扫描线</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6940">https://www.luogu.com.cn/problem/P6940</a></p>
<p>首先发现,从上往下扫行,然后对于每个右下角匹配一个列最近的左上角是最优秀的.所以拿set维护上述过程.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3268">https://www.luogu.com.cn/problem/P3268</a></p>
<p>这题比较厉害,直接扫,然后维护每个圆当前与这条线的两个交点,注意到这些交点的顺序是固定的,于是可以拿set维护.</p>
<h3><span id="二分图hall定理">二分图HALL定理</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_arc076_d">https://www.luogu.com.cn/problem/AT_arc076_d</a></p>
<p>根据Hall定理,我们只要找到一个子集的人,使得人数与它们的区间的并所包含的椅子数量之差最大,这个最大值就是答案.而它们区间的并显然是同样类型的区间,也就是中间扣去一段.考虑枚举中间扣去的那一段是啥,就可以快速算答案.这玩意可以扫描线维护.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF981F">https://www.luogu.com.cn/problem/CF981F</a></p>
<p>一眼丁真,鉴定为二分+Hall定理.</p>
<p>这题真正的难点在于如何check.考虑我们现在有了若干个区间$[ l , r ] $,每个整数点上都有一个人.然后要check.那就必须满足$r _j - l _i \geq j - i $,这意味着$r _j - j \geq l _i - i $,然后就做完了.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3488">https://www.luogu.com.cn/problem/P3488</a></p>
<p>比较简单,考虑如果最后找的若干个区间是分开的,那它们必然其中有一个区间自己就不合法.因此找到这个区间就行,然后每个位置减去$k $,用线段树维护区间小子段和判断加上$k \times d $是否小于$0 $.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF103E">https://www.luogu.com.cn/problem/CF103E</a></p>
<p>这题比较厉害啊.首先猜到要用网络流.</p>
<p>然后注意到选的集合$= $选的数字等价于不选的集合$+ $选的数字$= n $.考虑最小割.先将边权全部取反,这样变成求最大权值,</p>
<p>然后集合连权值加上一个极大值$M $,单点连极大值$M $.这样割掉一个单点意味着选这个单点,割掉一个集合意味着不选这个集合.由于存在完美匹配,因此一定会跑出答案.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_arc106_e">https://www.luogu.com.cn/problem/AT_arc106_e</a></p>
<p>首先答案显然不会超过$2 nk $,考虑二分,这样每一天会有哪些人来就知道了.然后对着上面的信息做高维前缀和就可以知道对于一个人的集合,它会来哪些天.这样就可以check.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_agc037_d">https://www.luogu.com.cn/problem/AT_agc037_d</a></p>
<p>考虑最后$C \rightarrow D $显然需要把该放的位置归位,这样我们的$a $里面存的完全可以是它应该在第几行这个信息.</p>
<p>再考虑$B \rightarrow C $,显然只需要保证每列的$a $互不相同,这一步就可以满足上面的要求.</p>
<p>于是,$A \rightarrow B $只需要保证每列的$a $互不相同.这个可以使用网络流实现.</p>
<p>那么,如何证明一定有解呢?这是一张正则二分图,根据Hall定理推论,一定存在完美匹配.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_agc029_f">https://www.luogu.com.cn/problem/AT_agc029_f</a></p>
<p>这题好牛啊.发现如果几个集合的并的点数过少,那么一定无解.因为怎么连都会连出环来.这直接将整个题的思路引向Hall定理.</p>
<p>考虑直接做二分图匹配.左边是点右边是集合,然后连边.</p>
<p>那么根据Hall定理一定存在$n - 1 $的匹配,并且恰好有一个点没被匹配到.我们干脆删掉这个点,最后再加回来.事实上理论上来说我删掉哪个点都应该存在完美匹配,我们先只删一个.然后从$r $开始不断dfs找到一条遍历所有边的交错树,对着交错树构造就行.</p>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1519F">https://www.luogu.com.cn/problem/CF1519F</a></p>
<p>首先注意到,只要任意一个宝箱集合需要的钥匙集合的权值大于等于自己,那Bob就输了.这类似Hall定理.我们把钥匙和宝箱都拆点,然后判断拆点后的图是否存在完美匹配.求完美匹配可以使用状压.</p>
<h3><span id="轮廓线dp">轮廓线dp</span></h3><p>这个板块好像没啥说的,因为思维难度远低于代码难度.而且思路都比较直接.</p>
<p>放一下我做的题.</p>
<h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5056">https://www.luogu.com.cn/problem/P5056</a></p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P2289">https://www.luogu.com.cn/problem/P2289</a></p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3886">https://www.luogu.com.cn/problem/P3886</a></p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P1933">https://www.luogu.com.cn/problem/P1933</a></p>
<h3><span id="广义串并联图">广义串并联图</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6790">https://www.luogu.com.cn/problem/P6790</a></p>
<p>比较简单,首先这个图这么简单,那它大概率是个广义串并联图.感性理解一下,$n \geq 4 $的时候肯定是存在度数较小的边的,并且你在合并的过程中它也一直是仙人掌+至多一条边的形状.</p>
<p>然后简单做做.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P8426">https://www.luogu.com.cn/problem/P8426</a></p>
<p>ps:本题选入笔记:图论-广义串并联图/三度化-Example2.</p>
<p>广义串并联图的一个很重要的思想是:我们通过一些手段改变这个图的形态为一个好做的形态,但是答案又和原图相同.</p>
<p>在这个思想的指导下,我们考虑这个题能否进行三度化.不过注意起点和终点简单特判一下,别把他们给删了.这样我们最后如果得到了一个只有起点和终点的图,那就一定是no.</p>
<p>然后如果没有只得到起点和终点呢?对最短路图建DAG,考虑如果$S $和$T $在一个点双中,我们找到两个点$u , v $,使得$u \rightarrow v $,并且$u $的出度至少是$2 $,$v $的入度至少是$2 $,显然只要找到就做完了.现在的问题就在于为啥这条边一定存在.这个考虑找一个入度至少为$2 $的点$v $,找到它的入点$u $,如果$u $的出度不是$2 $,那么$u $也是一个入度至少为$2 $的点.这样往前推一定至少能推到一个点(因为不可能$S $贡献了俩入度).</p>
<p>如何保证$S , T $在一个点双中呢?其实只需要添加一条边$( S , T , dis _{ S \rightarrow T  } ) $就行了.显然加了后不会对答案产生影响.然后不在$S , T $这个边双内的点也没有用了.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://loj.ac/p/3076">https://loj.ac/p/3076</a></p>
<p>这题没啥好说的,小E的集训队论文讲的很清楚.简单来说就是用三度化求出一棵决策树,然后做动态dp.</p>
<h3><span id="动态规划第一期">动态规划第一期</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1810G">https://www.luogu.com.cn/problem/CF1810G</a></p>
<p>ps:本题选入笔记:动态规划-动态规划的优化-反向操作-Example1.</p>
<p>其实这题有一个很自然的容斥做法,但我们先略过.</p>
<p>一般而言先考虑对于每个$k $暴力做.那怎么维护最大前缀和这个东西呢?如果我们从左往右扫,其实是很难维护的.因为我们无法接受加一维以维护它.更进一步为什么无法维护呢?因为你新加一个元素,它是不会影响前面的前缀和的,只会影响一个.这导致你的取$\max $操作很艰难.但如果!我把这个dp反过来,我设$f _{ i , j  } $表示<strong>从后往前</strong>dp到$i $,当前的最大前缀和是多少,这个dp的转移极其简单:</p>
<script type="math/tex; mode=display">
P \times f _{ i , j  } \rightarrow f _{ i - 1 , \max \{ 0 , j + a _{ i - 1  } \}  }</script><p>最后在$f _{ 1 , j  } $处乘上$h _j $.</p>
<p>但是这样是$O ( n ^3 ) $的,怎么办呢?</p>
<p>考虑把这个dp反过来!我们设$g _{ i , j  } $表示如果初始只有$f _{ i , j  } = 1 $,dp到最后的答案是多少.于是只需要:</p>
<script type="math/tex; mode=display">
\begin{gathered}
P \times g _{ i - 1 , \max \{ 0 , j + a _{ i - 1  } \}  } \rightarrow g _{ i , j  } \\

\end{gathered}</script><p>我认真考虑过这个$P $应该乘在哪边.实际上确实应该在左边.原因比较简单,因为答案是一串乘法,你不能把这些$P $变成除法.但还有一个问题是,为什么反向的时候没有把这些反向呢?</p>
<p>原因是这类型dp比较特殊,我们要算的其实是一个类似DAG路径上的信息,因此边权无需改变.</p>
<p>回来简单提下容斥做法,其实是有一个自然的想法是只要这个序列中出现过前缀和为$x $的位置,我们就加上一个$h _x - h _{ x - 1  } $.然后我们要统计的是出现过的,因此用容斥把这个条件删了就行.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_agc061_c">https://www.luogu.com.cn/problem/AT_agc061_c</a></p>
<p>这题纯容斥,首先考虑找到一种统计答案序列而非操作序列的方式:一般而言会选择建立某种双射.考虑一个答案序列可以怎么被操作到:或者说,对于一个答案序列,判断它能否操作到.</p>
<p>注意到序列中第一个元素,肯定是选择左端点比较合理.因为这样它对后面的限制要少一些.那么其实双射方式就呼之欲出了:就是从左往右扫,能取左端点就取左端点.我们就可以对这个操作序列进行计数.</p>
<p>这个操作序列怎么计数呢?考虑这个序列满足啥条件:其实就是能选左边的就不会选右边的,那也就是不可能出现一个空的区间,这个区间没有任何数字.对着这个条件容斥即可.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_arc134_e">https://www.luogu.com.cn/problem/AT_arc134_e</a></p>
<p>这题见过两次了.大概是按部就班一点一点去找条件.</p>
<p>至于考试怎么办,考试打表啊!</p>
<p>下面抄一下演算纸上的结论,注意这些判定条件的优先级从前往后:</p>
<ol>
<li><p>如果序列全$1 $,显然后手获胜.</p>
</li>
<li><p>如果序列不是全$1 $并且存在奇数,选择$m = 2 $,先手获胜.</p>
</li>
<li><p>如果序列全$2 $,显然后手获胜.</p>
</li>
<li><p>如果序列全是偶数并且不全是$4 $的倍数,取$m = 4 $转化为(3),先手获胜.</p>
</li>
<li><p>如果序列全是$4 $的倍数,考虑取$m = 3 $,如果序列中只有$\bmod 3 = 1 $或者只有$\bmod 3 = 2 $的数字,显然先手获胜.不然,如果同时存在,考虑先手取$m = 12 $,序列中就会只剩下$\{ 4 , 8 \} $.此时如果后手取一个奇数,显然会剩下奇数,根据(2)先手获胜;如果后手取一个偶数,讨论一下全部的偶数,都是先手获胜.</p>
</li>
</ol>
<p>综上,除非所有的数字都是$12 $的倍数,不然后手获胜当且仅当序列是$\{ 1 \} , \{ 2 \} , \{ 4 , 8 \} $.</p>
<p>如果所有的数字都是$12 $的倍数,最多只有$16 $个,状压即可.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_abc290_h">https://www.luogu.com.cn/problem/AT_abc290_h</a></p>
<p>显然对于猫来说,它的$d $(定义为左右狗的数量之差,对于狗同理)是一个从左到右先减少再增加的东西.因此一个$O ( n ^4 ) $的dp是简单设计的,也就是$f _{ i , j , k , l  } $表示目前用了$i $只猫,有$j $只放在前面,$i - j $只放在后面,狗同理.</p>
<p>这个怎么优化呢?我们仔细思考,如果要放,是不是最好放的平均一点.因此引出一个结论:那就是一定存在一个分界点,使得左右猫的数量相同,狗的数量也相同.你可能会好奇$n , m $都是奇数怎么办,这种情况下会把中间的两个点当作分界点.如果$n + m $是奇数就找中间的那个点,不然就找中间的那个空格.</p>
<p>这个是怎么证明的呢?我们考虑对于猫来说,先找到能平分猫的分界点.然后考虑这个点左右两侧的狗的数量是否相同(这里先假设狗的数量是偶数,奇数是同理的,只是要多说几步).我们选择狗多的那一边,把这边最靠近分界线的那只狗恰好移过分界线.注意到这样一定更优秀.</p>
<p>那么上面的结论证明了啥呢?证明了整个序列一定可以分成两部分(左右两部分).这有什么用?这去掉了前两维.具体来讲,对于一部分,如果可以填某只猫或某只狗二者之一,一定选择权值较小的先填,这样的话这一对的贡献就会少一些.其实就是把权值转化为每个序列中每一对的贡献.于是这个结论就是对的,我们可以把猫狗放在一起排序来处理第一维.复杂度$O ( n ^3 ) $.</p>
<p>测完样例发现一个问题啊,上面那个结论还真不能简单地拓展到奇数.因为会出现权值相等的情况.对于偶数来讲,权值相等是无所谓的.但是奇数不行.因此我们选择如果$n $是奇数,就挑出最大的那只强行放在中间,$m $同理.</p>
<p>但是,这题被爆标了.存在$O ( n \log n ) $的做法:</p>
<p>注意到,$\sum d $总是一样的.因为这个猫前面的狗会因为它而贡献$1 $,然后这个猫和后面的狗也会贡献$1 $.于是考虑从大到小开始放,优先放中间.然后先把狗堆一边,猫堆另一边,堆不动了再放对边,这样就是满足让$a $较大的$d $较小.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9338">https://www.luogu.com.cn/problem/P9338</a></p>
<p>首先能划分就一定需要是一个合法括号序列.同时这意味着一定可以划分出$N $个合法的序列.</p>
<p>也就是说,我们其实只在乎这个序列最少能划分出多少,并且判断这个数字是否小于等于$K $.那么如何求这个数字呢?</p>
<p>考虑第一个$B $,它一定会和它左边的某个$A $配对,不妨设它左边有$i $个$A $,那么最好的办法显然是这$i $个$A $和后面紧接着的$i $个$B $合并成一个序列.这是为什么呢?因为第一个$B $需要配对,因此它需要在一个序列中,把它删掉后后面的一个$B $也需要配对,而此时它前面的$A $其实都是等价的,于是选择最早的那个,以此类推.</p>
<p>然后题解开始变魔术了.设$f [ x ] $表示第$x $个$B $前有多少个$A $,那我们做的实际上就是$x = 1 $,然后不断做$x : = f [ x ] + 1 $直到$x &gt; n $.发现这样其实顺便把合法括号序列那个条件一起满足了,因为如果不合法一定会跳跳跳跳跳然后死循环.</p>
<p>那么我们的交换操作实际上是啥呢?首先不可能交换两个相同的,那实际上就是给一个$f \pm 1 $,实际上显然不可能给一个$f $减一.</p>
<p>但是这样会出现一个问题是,我们其实并不能选择任意一个$f $进行更改.那怎么办呢?事实上,只要过程中满足$\forall 1 &lt; i \leq n , f _i \geq f _{ i - 1  } $,那我们的修改就一定可以实现.因为这等价于把后面的一个$A $挪前面去了.这样我们一开始进行操作使得整个序列满足$f _i \geq i $.</p>
<p>于是就有了一个$O ( n ^3 ) $的dp,即设$dp _{ i , k  } $表示跳到$i $跳了$k $步的最小花费,每次跳到$j $的话要求把$[ i , n ] $上的所有$f $对$j - 1 $取$\max $.</p>
<p>仔细观察上面的过程,不难发现答案关于$k $是凸的,用wqs二分去掉第二维,于是现在就有了一个$O ( n ^2 \log n ) $的一维dp.</p>
<p>不妨设$sum _x $表示$f _i \leq x $的$f _i $之和,$cnt _x $表示这样的$f _i $的个数,再设$pre _i $为$f $的前缀和.由于$f _i \geq i $,不难发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
dp _i & = dp _j + \\
( i - 1 ) ( cnt _{ i - 1  } - j + 1 ) - sum _{ i - 1  } + pre _{ j - 1  } - val 
\end{aligned}</script><p>其中$val $是wqs二分出来的惩罚量.然后如果能选前面的$i $尽量选靠前的.再就是dp过程中需要记录跳了几步,但是不作为dp的维度而是内容.</p>
<p>显然可以斜率优化,于是复杂度$O ( n \log n ) $.</p>
<h4><span id="第六题">第六题</span></h4><p>考虑Hall定理,设最后的盒子是$x _1 , x _2 , \cdots , x _k $,将它们<strong>从大到小</strong>排序,那么合法当且仅当:</p>
<ol>
<li><p>$\sum x = \sum a $.</p>
</li>
<li><p>$\forall k , \sum _{ i = 1  } ^k x _i \leq \sum _{ i = 1  } ^n \min \{ k , a _i \} $.</p>
</li>
</ol>
<p>为啥是这个方向的Hall定理呢?因为我们肯定要对$x $做一个背包的问题,这个时候肯定是对后面那一个已知的操作会比较好.</p>
<p>然后就直接dp.把$b $从大到小排序,$f _{ i , j , k  } $表示当前考虑前$i $个$b $,选了$j $个,和为$k $是否可行,用bitset优化一下得到$O ( \frac { mS ^2  } { w  } ) $的算法.</p>
<p>但是实际上,考虑到$m $其实是$\sqrt { S  } $级别的,再注意到dp的过程中,$j \leq \frac { S  } { b _i  } $,因此$\sum max _j = O ( S \log S ) $,所以这个算法是$O ( \frac { S ^2 \log S  } { w  } ) $的.</p>
<p>实现可以使用滚动数组.然后压位的话要压掉最后一维.</p>
<p>dp的话是下面这样的:</p>
<script type="math/tex; mode=display">
\begin{gathered}
dp _{ i , j , k  } \rightarrow dp _{ i + 1 , j , k  } \\
dp _{ i , j , k  } \rightarrow dp _{ i , j + 1 , k + b _i  } 
\end{gathered}</script><p>算的时候记得删掉过大的$k $.</p>
<p>看到这种dp可能第一反应是考虑能不能交换dp状态和dp值,但是这个哪一维状态也不是和状态是单调的.</p>
<p>至于构造方案,暴力用堆一个一个做.</p>
<h3><span id="组合数学">组合数学</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_jsc2019_qual_f">https://www.luogu.com.cn/problem/AT_jsc2019_qual_f</a></p>
<p>比较牛.首先千万要看清楚不是每个点的值在$[ L , R ] $之间而是和在$[ L , R ] $之间!</p>
<p>然后考虑后者怎么做.注意到如果是第$M $大等于第$M + 1 $大的话,中间那一段会是一段连续的,这个特别难搞.所以我们考虑求第$M $大不等于第$M + 1 $大,这样前$M $个和后$N - M $个数字其实就分开了.而且因为前后没有相等的数字,我们很容易把它们乱序合并起来.</p>
<p>因此接下来的关键在于把前后分开,假设$a _M = x $,那么前$M $个数字大于等于$x $,后$M $个数字小于$x $.不妨假设此时全局和为$s $,那我们如何解决这个问题呢?</p>
<p>首先较大的那几个可以隔板法做,较小的那几个是个经典容斥:枚举有几个大于等于$x $的,这个数量不会超过$\frac { R  } { x  } $,然后剩下的暴力隔板.</p>
<p>写式子之前考虑上面那个$s $怎么办,总不能暴力枚举,其实写出来也可以用二项式技巧去掉,但是更重要的是,为啥你不转化成和在$[ 0 , R ] $的答案减去和在$[ 0 , L - 1 ] $的答案呢?这下做完了.</p>
<p>于是我们只考虑限制是$[ 0 , R ] $.</p>
<p>这个时候我还在想要把左右两边分开求答案然后卷起来,但是这样还是避免不了枚举一边的和.事实上,我们可以把二者放在一起做容斥.下面式子会给出一个显式的表达.另外就是,有一个很大的问题在于我们如何钦定$a _M = x $,这一点其实是难以做到的.但我们可以钦定$a _M \geq x , a _{ M + 1  } &lt; x $,然后再减去$a _M \geq x + 1 , a _{ M + 1  } &lt; x $.为了方便,我们不妨设$a _M \geq x , a _{ M + 1  } \leq y $的答案是$f ( x , y ) $,然后我们要求的就是$\sum _{ x  } f ( x , x - 1 ) - f ( x + 1 , x - 1 ) $.</p>
<p>接下来写一下$f ( x , y ) $的式子:</p>
<script type="math/tex; mode=display">
f ( x , y ) = \sum _{ i = 0  } \binom { N - M  } { i  } ( - 1 ) ^i \binom { R - Mx - i ( y + 1 ) + N  } { N  }</script><p>乍一看不太能算,实际上注意到$R - Mx - i ( y + 1 ) \geq 0 $,由于$x , y $同级别,这意味着$i $大致是$\frac { R  } { x  } $级别的.于是就是一个调和级数复杂度.</p>
<h4><span id="第二题第三题">第二题/第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1264D2">https://www.luogu.com.cn/problem/CF1264D2</a></p>
<p>直接做的hard version.</p>
<p>首先我们发现,不妨我们最后取出来的串一定是个$( ( ( \cdots ) ) ) $这样的结构.再进一步,我们找到这个结构在原串上的分界点,设其左侧有$s _l $个$( $,右侧有$s _r $个$) $,那么这个串的长度一定形如$\min \{ s _l , s _r \} $,由于随着分界点的右移,$s _l $增大,$s _r $减小,因此一定是它俩相等的时候最优秀.</p>
<p>于是我们考虑枚举分界点,对于每个分界点枚举答案.不妨设左侧有$a _l $个问号,总共有$a $个问问号,答案显然是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k  } k \binom { a _l  } { k - s _l  } \binom { a - a _l  } { k - s _r  } \\
& = \sum _{ k  } ( k - s _l ) \binom { a _l  } { k - s _l  } \binom { a - a _l  } { k - s _r  } + \sum _{ k  } s _l \binom { a _l  } { k - s _l  } \binom { a - a _l  } { k - s _r  } \\
& = a _l \sum _{ k  } \binom { a _l - 1  } { k - s _l - 1  } \binom { a - a _l  } { k - s _r  } + s _l \sum _{ k  } \binom { a _l  } { k - s _l  } \binom { a - a _l  } { k - s _r  } \\
& = a _l \sum _{ k  } \binom { a _l - 1  } { a _l - k + s _l  } \binom { a - a _l  } { k - s _r  } + s _l \sum _{ k  } \binom { a _l  } { a _l - k + s _l  } \binom { a - a _l  } { k - s _r  } \\
& = a _l \binom { a - 1  } { a _l + s _l - s _r  } + s _l \binom { a  } { a _l + s _l - s _r  } 
\end{aligned}</script><p>不过这里有个问题啊,那就是$a = 0 $怎么办,扩域的二项式我其实是不太会算的.于是我特判了$a = 0 $.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_arc146_e">https://www.luogu.com.cn/problem/AT_arc146_e</a></p>
<p>由于相同值域相互间有限制,不妨考虑值域那一维扫一下.</p>
<p>进一步地,我们考虑维护若干个上升的直线,然后每次可以选择把两条直线并起来成为一个峰,或者凭空分裂出两条直线作为一个谷.维护直线数量并且从下往上扫就可以了.</p>
<p>但是你注意一个问题,我们是不能先分裂出两条直线,再把它俩合并起来的.考虑能不能设计一点自适应的东西.当前的直线数量一定是偶数,然后我们每隔一个判断是否要合并,或者直接在一半的空位置上判断是否要分裂就行.更具体地,我们设$f _{ i , j  } $表示当前有$j $个位置能放$i $的答案.显然$j = b _i $,所以这一维看上去是没用的.</p>
<p>但是我们仔细想一想,我们要维护若干条折线.这些折线是有左右端点的,我们需要做的就是要么加入一条折线,要么合并两条折线,这两个操作都会带来一个空位置.而一条不操作的折线会带来两个空位置.其实相当于每个操作减少了一个空位置.不过有一个问题啊,我们只能通过$b _i $得知有多少个空位置,却不知道有多少条折线.事实上空位置数量=折线端点数量+操作次数.也就是说,和dp关系比较大的是折线数量,但我们只能推测出空位置数量.这下这下了.</p>
<p>但是但是但是,我们写一个$O ( n ^2 ) $的dp,$f _{ i , j , 0 / 1 , 0 / 1  } $表示当前做到$i $,有$j $条折线,左端点是否已经选定,右端点是否已经选定.为啥要记录后两维呢?因为这不是环,这是一个排列,最左侧端点和最右侧端点是有可能直接停步的.因此我们还得讨论这个.说实话有点麻烦,所以我们先忽略左右端点,假设它们一直延伸.不妨设$k = cnt _{ merge  } - cnt _{ split  } $,自然有$k = 2 j - b _i $.不放在设$w = cnt _{ split  } , cnt _{ merge  } = k + w $,再设$F ( n , m ) $为将$n $个无编号球放到$m $个有编号盒子(盒子可空)的方案数,不难发现$F ( n , m ) = \binom { n + m - 1  } { m - 1  } $.那我们有:</p>
<script type="math/tex; mode=display">
\begin{gathered}
f _{ i - 1 , j  } \sum _{ w \geq 0  } \binom { j - 1  } { k + w  } F ( w , j - w - k + 1 ) \rightarrow f _{ i , j - k  } \\
f _{ i - 1 , j  } \sum _{ w  } \binom { j - 1  } { k + w  } \binom { j - k  } { j - w - k  } \rightarrow f _{ i , j - k  } \\
f _{ i - 1 , j  } \binom { 2 j - k - 1  } { j  } \rightarrow f _{ i , j - k  } \\

\end{gathered}</script><p>用范德蒙德卷积的时候一定要注意,这个东西是扩域后的二项式,因此一定要在意一下枚举量是否取遍整数,这里是发现如果$w &lt; 0 $,那么后面那个组合数一定是$0 $.</p>
<p>原本其实很怕这个转移,因为觉得很麻烦,但其实写出来就不麻烦了.甚至加两维也是好做的,我们不妨设后两维的和为$t $,就是几个端点是挂的,我们仍然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
b _i & = 2 ( j - k ) + cnt _{ merge  } - cnt _{ split  } - t + \Delta t \\
k & = 2 j - t + \Delta t - b _i 
\end{aligned}</script><p>其中$\Delta t $是决定在这里停步的端点数量,$t $是停步后的端点数量,$j - k $是做完选择后,在$i $处的折线数量,两个$cnt $都是在做选择的<strong>过程中</strong>所做的merge和split的抉择数量.这样我们就完成了转移.</p>
<p>没完没完,差点就寄了.如果左右端点没有确认,那么我们是可以在左边或者右边split的.令$t ‘ = t - \Delta t $,于是重推一下式子:</p>
<script type="math/tex; mode=display">
\begin{gathered}
f _{ i - 1 , j  } \sum _{ w \geq 0  } \binom { j - 1  } { k + w  } F ( w , j - w - k + 1 - t ' ) \rightarrow f _{ i , j - k  } \\
f _{ i - 1 , j  } \sum _{ w  } \binom { j - 1  } { k + w  } \binom { j - k - t '  } { j - w - k - t '  } \rightarrow f _{ i , j - k  } \\
f _{ i - 1 , j  } \binom { 2 j - k - 1 - t '  } { j - t '  } \rightarrow f _{ i , j - k  } \\
f _{ i - 1 , j  } \binom { b _i - 1  } { j - t '  } \rightarrow f _{ i , j - k  } \\

\end{gathered}</script><p>这一步步是怎么加上去的呢?实际上是按照先merge,再slipt,再stop来做的.因为split一定要放在最后,防止split了一个stop的点或者split在了一个merge好了的区间中.</p>
<p>但是这个转移是$O ( n \sum b ) $的,咋办呢?我们本着先冷静再冷静始终冷静的想法,去考虑一下$j $的取值:不难发现在上面的操作过程中,基本都是一个$j $对应一个$j - k $,只有在$t $变化的时候才会增加一个状态,这意味着$O ( \sum cnt _t ) = O ( \sum cnt _j ) $,因此总空间是$O ( n ) $的,于是时间也是$O ( n ) $的,拿map维护一下这个dp就行,时间退化至$O ( n \log n ) $.</p>
<p>再有一个细节就是组合数怎么办,哦,$b $这么小,那没事了.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6276">https://www.luogu.com.cn/problem/P6276</a></p>
<p>首先显然不会破坏环的形态.也就是说,你把所有置换环的长度求出来然后求lcm就是一个排列的阶.这直接启发我们对于每个质数分开求贡献.</p>
<p>更进一步地,我们发现只要排列中有$p ^k $的倍数,我们就直接贡献一个$p $作为答案.因此我们枚举$q = p ^k $并统计有多少个排列至少有长度为$q $的倍数的环.这都至少了,直接容斥就行,我们设当前有$i $个点,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i  } & = \sum _{ q | k  } - f _{ i - k , j - 1  } \binom { i - 1  } { k - 1  } ( k - 1 ) ! \\
& = \sum _{ q | k  } - { ( i - 1 )  } ^{ \underline { k - 1  }  } f _{ i - k , j - 1  } 
\end{aligned}</script><p>$\sum _{ q | i  } - f _i \times ( n - i ) ! \times \binom { n  } { i  } $就是答案.这样复杂度是$O ( \sum ( \frac { n  } { q  } ) ^2 ) = O ( n ^2 ) $,事实上要更少,因为你发现我们只会对某个$q = p ^k $做这个东西.</p>
<p>另外由于模数不确定,我们还要对着每个$i $预处理下降幂,有点难蚌的.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_agc060_d">https://www.luogu.com.cn/problem/AT_agc060_d</a></p>
<p>ps:本题选入笔记:常见套路-组合意义-Example3.</p>
<p>这题听了三遍,直接抄笔记.</p>
<p>不妨设$C _p = \{ i | p _i &gt; p _{ i + 1  } , 1 \leq i &lt; n \} $.</p>
<p>用一下组合意义,注意到答案等于:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ p  } [ S = C _p ] ) ^2</script><p>中间那个地方看上去是经典的计数容斥,我们对着它做容斥:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ p  } [ S = C _p ] ) ^2 = \sum _{ S  } ( \sum _{ S \subseteq T  } \sum _{ p  } ( - 1 ) ^{ | T | - | S |  } [ T \subseteq C _p ] ) ^2</script><p>这个咋做呢?我们考虑用组合意义展开:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S  } ( \sum _{ S \subseteq T  } \sum _{ p  } ( - 1 ) ^{ | T | - | S |  } [ T \subseteq C _p ] ) ^2 \\
& = \sum _{ S  } \sum _{ S \subseteq T _1 , T _2  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) 
\end{aligned}</script><p>注意到$S $屁用没有,直接交换枚举顺序.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S  } \sum _{ S \subseteq T _1 , T _2  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = \sum _{ T _1 , T _2  } 2 ^{ | T _1 \cap T _2 |  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) 
\end{aligned}</script><p>考虑$( \sum _{ p  } [ T _1 \subseteq C _p ] ) $怎么求,注意到这等价于所有$T _1 $中的位置全都被钦定为$&gt; $,而其他位置任意,如果我们设所有以大于号连接的部分的长度为$l _1 , l _2 , . . . , l _k $,那么这里的答案就是$n ! \prod _{ i = 1  } ^k \frac { 1  } { l _i !  } $.</p>
<p>但我们很快发现了难点:$2 ^{ | T _1 \cap T _2 |  } $这个东西是难求的,怎么办呢?</p>
<p>我们考虑一下这个东西的意义:其实也就是在$T _1 $和$T _2 $中都是$&gt; $的位置,这个好像不太好求,因为$&gt; $是很平常的,但如果取补集就不一样了,取补集后意味着都是任意的位置的数量,而我们上面已经发现了:如果有一个位置对前后两个数字的约束是独立的,那我们可以把前后两个位置拆开.于是我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ T _1 , T _2  } 2 ^{ | T _1 \cap T _2 |  } ( - 1 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = \sum _{ T _1 , T _2  } 2 ^{ ( ( n - 1 ) - | T _1 \cup T _2 | ) - ( n - 1 )  } ( - 2 ) ^{ | T _1 | + | T _2 |  } ( \sum _{ p  } [ T _1 \subseteq C _p ] ) ( \sum _p [ T _2 \subseteq C _p ] ) \\
& = 2 ^{ 1 - n  } ( n ! ) ^2 \sum _{ T _1  } ( ( - 2 ) ^{ | T _1 |  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( ( - 2 ) ^{ | T _2 |  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ n - 1 - | T _1 \cup T _2 |  } 
\end{aligned}</script><p>其中$n - 1 - | T _1 \cup T _2 | $意味着均不在$T _1 $和$T _2 $中的位置的数量.为了给每一段连续的$&gt; $都分配权值,我们进行一个细小的修改:</p>
<script type="math/tex; mode=display">
2 ^{ - 1 - n  } ( n ! ) ^2 \sum _{ T _1  } ( ( - 2 ) ^{ | T _1 | + 1  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( ( - 2 ) ^{ | T _2 | + 1  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ n - 1 - | T _1 \cup T _2 |  }</script><p>写到这里应该就能发现,接下来必然要对$n - 1 - | T _1 \cup T _2 | $做整体操作.那我们再这么搞可能就很难受,我们采取这样的方式:对$T _1 $和$T _2 $求补集,这样它们的含义就变成了除了集合中的元素,剩下的全部被钦定为了$&gt; $,我们自然有:</p>
<script type="math/tex; mode=display">
\begin{gathered}
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ | T _1 \cap T _2 |  } \\

\end{gathered}</script><p>这里已经很显然了,我们大概要做一个不断加段的做法,那此时$| T _1 \cap T _2 | $这个限制就显得尤其强,如果只是$S \subseteq T _1 , T _2 $就会好做很多:我们可以钦定$S $作为分界线,然后把两边的东西卷起来.因此我们暴力拆开后面的式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) 2 ^{ | T _1 \cap T _2 |  } \\
& = 2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ S  } \sum _{ S \subseteq T _1  } ( \frac { 1  } { ( - 2 ) ^{ | T _1 | + 1  }  } \frac { 1  } { \prod l _{ 1 , i  } !  } ) \sum _{ S \subseteq T _2  } ( \frac { 1  } { ( - 2 ) ^{ | T _2 | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) \\

\end{aligned}</script><p>令$f ( T ) = \sum _{ S \subseteq T  } ( \frac { 1  } { ( - 2 ) ^{ | T | + 1  }  } \frac { 1  } { \prod l _{ 2 , i  } !  } ) \ $,则原式即:</p>
<script type="math/tex; mode=display">
2 ^{ 1 + n  } ( n ! ) ^2 \sum _{ S  } ( \sum _{ S \subseteq T  } f ( T ) ) ^2</script><p>考虑下面这个东西怎么求:</p>
<script type="math/tex; mode=display">
\sum _{ S  } ( \sum _{ S \subseteq T  } f ( T ) ) ^2</script><p>注意到,如果我们把每一段($[ T _i , T _{ i + 1  } ) $)的贡献求和,那么$f ( T ) $相当于这些和乘起来,那么$( \sum _{ S \subseteq T  } f ( T ) ) ^2 $就是这些和的平方乘起来.换句话说,我们自然有$ans _n = \sum _{ m  } ans _{ n - m  } g ^2 _{ m  } $,其中$g _m $表示长度为$m $的一段的贡献之和.而$g _{ n  } = \sum _m g _{ n - m  } \frac { 1  } { - 2 m !  } $.二者都可以使用分治FFT或多项式求逆解决.更进一步地,$h _i = \frac { 1  } { - 2 i !  } , G = \frac { 1  } { 1 - H  } , F = \frac { 1  } { 1 - G  } $.</p>
<p>这题还有一个做法:tyy的变魔术做法.</p>
<p>还是容斥,考虑将$( &gt; , &gt; ) $容斥掉,这样我们有若干种对:$2 ( &lt; , &lt; ) , 1 ( e , e ) , - ( e , &lt; ) , - ( &lt; , e ) $,然后我们发现两个序列联系得太紧了,我们考虑分配系数:$&lt; \rightarrow \sqrt { 2  } $,$e \rightarrow - \frac { 1  } { \sqrt { 2  }  } $,但是这样发现$( e , e ) $算错了,你把剩下的补上就行.你会发现这个式子和上面我们推的是等价的,但是变魔术.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1188E">https://www.luogu.com.cn/problem/CF1188E</a></p>
<p>首先发现肯定不可能所有颜色都点过,那么至少有一个颜色没点过.</p>
<p>然后呢?考虑操作序列和答案序列是否一一对应,事实上确实是这样,因为至少有一个颜色没点过,因此可以找到下降最多的那个颜色,这样就知道了总共操作过程.然后由每个颜色减少的次数,就可以知道每种颜色操作的次数.接下来就只需要对于每种操作次数判断是否能在全程非负的前提下做完.</p>
<p>一个显然的必要条件是,不妨设$l _i $为第$i $种颜色操作次数,$a _i + l _i k \geq \sum l $.但是操作过程中有可能有负数,这个怎么办呢?注意到为了让$a $不变负数,我们必须要让它在$a _i + 1 $时刻前完成至少一次操作,在$a _i + k + 1 $时刻前完成至少两次操作……</p>
<p>注意到只需要满足第一个条件就行,因为后面的条件只需要把当前所有需要做的人排个序,挨个做.显然就一定会满足条件.根据Hall定理,从前往后判断每一时刻是不是能填满前面的每个人,并将它和$\max a $取$\min $得到$maxt $,这就是$\sum l $的最大值.不难发现只要$\sum l \leq maxt $就一定有解.枚举$t $计算每个$a $需要的次数,剩下的次数随意分配,注意要保证$\min l = 0 $,要减去$\min l \geq 1 $的情况.</p>
<p>事实上啊,只要我们得知了前一个要求条件然后枚举$t $就行,时刻维护着复杂度就对,根本不用管后面的东西.</p>
<h3><span id="二项式反演">二项式反演</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P1595">https://www.luogu.com.cn/problem/P1595</a></p>
<p>弱智题.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://darkbzoj.cc/problem/4665">https://darkbzoj.cc/problem/4665</a></p>
<p>直接容斥,用dp出前$i $个人,钦定$j $个人拿到了自己的糖果的方案数.然后容斥起来就行.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4859">https://www.luogu.com.cn/problem/P4859</a></p>
<p>ps:本题选入笔记:容斥与反演-容斥-Example3.</p>
<p>首先可以用dp+双指针得到$f _i $表示勒令$i $对满足条件的方案数.把$k $的定义改为恰好$k $对满足条件的显然是同强度的.</p>
<p>我们接下来仍然考虑容斥,首先,我们需要找出全集$U $,以及刻画$U $中元素的$P _i $(条件).</p>
<p>等一下,这个好像不好刻画?</p>
<p>我们先回归一下容斥的本质:考虑每个元素的贡献.注意到恰好$a $对的方案会被恰好$b $对的方案计算$\binom { b  } { a  } $次.我们再考虑一种方式理解容斥:我们一步一步把正确的答案消出来:简单来说,我第一步让所有恰好为$k $的方案贡献为$1 $,其它的可能也有贡献,但我们忽略他们.第二步让所有恰好为$k + 1 $的方案贡献为$0 $,第三步以此类推.于是这个题,我们考虑也这么做:这样第一步令$ans = f _k $,第二步除去其中被多算的$k + 1 $,这一步令$ans - = \binom { k + 1  } { k  } f _{ k + 1  } $.这个时候,我们再考虑$k + 2 $的贡献:它将在$f _k $时贡献$\binom { k + 2  } { k  } $次,在$f _{ k + 1  } $时贡献$- \binom { k + 2  } { k + 1  } \binom { k + 1  } { k  } = - \binom { k + 2  } { k  } \binom { 2  } { 1  } $次,那它现在的贡献还有:$- \binom { k + 2  } { k  } $次.以此类推,可以得到$ans = \sum _{ i = k  } ^n f _i ( - 1 ) ^{ i - k  } \binom { i  } { k  } $.</p>
<p>等一下,这也太麻烦了,就不能从集合的角度分析嘛?</p>
<p>冷静一下,如果我们要做容斥,我们必须考虑每个元素<strong>单独</strong>的贡献,但是在这个题中,每个元素并没有单独的贡献,而是整个集合需要满足性质才能贡献.也就是说,我们无法分析每个$P _i $.而考虑集合就需要将集合分类,从而使用二项式反演.</p>
<p>换句话说,这个定义在集合上的函数并不满足可加性.</p>
<p>换句话说,我们要用容斥,就一定要刻画$P _i $,因为只有这个时候,我们才能通过分析满不满足$P _i $的解集的交并来实现.</p>
<p>再换句话说,大部分的所谓的容斥其实都和集合<strong>没啥关系</strong>,我们做容斥就是需要逐个考虑贡献,把它们贡献全都杀成$1 / 0 $就行.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://darkbzoj.cc/problem/2839">https://darkbzoj.cc/problem/2839</a></p>
<p>简单二项式反演.(埋下伏笔)</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://codeforces.com/gym/101933/problem/K">https://codeforces.com/gym/101933/problem/K</a></p>
<p>考虑如果用小于等于$k $种是好计算的(设为$f _k $),显然$f _k = k ( k - 1 ) ^{ n - 1  } $,对着做二项式反演.</p>
<p>一开始想直接拿$f _k - f _{ k - 1  } $,实际上不行,因为颜色之间是有区别的.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6478">https://www.luogu.com.cn/problem/P6478</a></p>
<p>这个题面真你妈逆天.</p>
<p>发现我们要求恰好$k $个,自然的想法是想到钦定$k $个,不妨假设钦定$k $个的答案是$f _k $,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _k & = \sum _{ i = k  } ^n \binom { i  } { k  } ans _i \\
ans _k & = \sum _{ i = k  } ^n \binom { i  } { k  } ( - 1 ) ^{ i - k  } f _i 
\end{aligned}</script><p>至于$f $怎么求,你直接dp,设$dp _{ i , j  } $表示当前在$i $,子树内部选了$j $对祖先后代,那我们就知道目前子树内还有多少可以和$i $配对.合并是个树形背包.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1228E">https://www.luogu.com.cn/problem/CF1228E</a></p>
<p>ps:本题选入笔记:容斥与反演-反演-二项式反演-Example3.</p>
<p>不妨设至多有$i $行$j $列最小值为$1 $的答案是$f _{ i , j  } $,恰好有$i $行$j $列最小值为$1 $的答案是$g _{ i , j  } $,注意到:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>令$h _{ n , m  } = \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ n , j  } \ $,则$f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } h _{ i , m  } \ $,而$f _{ n , m  } = k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $.做两次二项式反演得到$g $.</p>
<p>写到这里发现一个问题(其实是我发现问题后把上面原本写错的给改了),为啥$f _{ n , m  } \ne \binom { N  } { n  } \binom { M  } { m  } k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $呢?我们写成子集反演形式看看:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ S , T  } & = \sum _{ s \subseteq S  } \sum _{ t \subseteq T  } g _{ s , t  } \\
f _{ S , T  } & = \sum _{ s \subseteq S  } h _{ s , T  } \\
h _{ S , T  } & = \sum _{ t \subseteq T  } g _{ S , t  } \\

\end{aligned}</script><p>做子集反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ S , T  } & = k ^{ | S | \times | T |  } ( k - 1 ) ^{ NM - | S | | T |  } \\
h _{ S , T  } & = \sum _{ s \subseteq S  } ( - 1 ) ^{ | s | - | S |  } f _{ s , T  } \\
g _{ S , T  } & = \sum _{ t \subseteq T  } ( - 1 ) ^{ | t | - | T |  } h _{ S , t  } 
\end{aligned}</script><p>把集合改成集合大小就可以发现问题所在:</p>
<p>换句话说,$g _{ n , m  } $本身就包含了所有$| S | = n , | T | = m $的情况的和,并且在组合数$\binom { m  } { j  } $那里就找到了唯一确定的$f _{ s , t  } $,因此$f _{ n , m  } $是唯一确定的.这意味着这里$f $的$n , m $并非集合之和,而是已经确定的集合的大小.</p>
<p>啥?这和我平常接触的二项式反演不一样啊?不说别的,第四题(BZOJ2839)的式子是这样的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _i & = 2 ^{ 2 ^{ n - i  }  } \binom { n  } { i  } \\
f _k & = \sum _{ i = k  } ^n \binom { i  } { k  } g _i \\
g _k & = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \binom { i  } { k  } f _i 
\end{aligned}</script><p>冷静一下,二项式反演的公式肯定没错,那也就一定是下面这几句出现了问题:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>这个问题其实非常显然,我们的$g _{ i , j  } $定义为所有$| S | = i , | T | = j $的答案之和.$f $也是这么定义的,那这个式子就是错的,应该写成:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { N - i  } { n - i  } \sum _{ j = 0  } ^m \binom { M - j  } { m - j  } g _{ i , j  }</script><p>这样才是在不确定的那些行列中选择组合数,而不是在确定的那些行列中选.</p>
<p>但这样又有一个问题,就是这个题的特殊性,这个题要求$g _{ N , M  } $,那此时$g $怎么定义不应该是一样的吗?</p>
<p>当然不一样,二项式反演讲究统一性,所有的定义必须遵循一个统一的原则,不然如果什么样子的函数都能反演,那一般的反演就不是一个需要解方程才能完成的东西了.</p>
<p>回到第四题,再看一遍这个式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _k & = \sum _{ i = k  } ^n \binom { i  } { k  } g _i \\

\end{aligned}</script><p>这个定义式就非常良性,$g $是已知的集合,$f $是未知的集合.我们乘上组合数就可以得到对于$f $来说已知的集合.因此这个就非常正确.</p>
<p>回到这个题上,为什么我们最后把$f $的定义改成$f _{ n , m  } = k ^{ nm  } ( k - 1 ) ^{ NM - nm  } $就对了呢?</p>
<p>再看看这个式子:</p>
<script type="math/tex; mode=display">
f _{ n , m  } = \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  }</script><p>这个式子的右边在干这样一件事:那就是在已知$n $行$m $列的集合的前提下,从中选出$i $行$j $列并求$g $.那么你从哪知道的$n $行$m $列呢?你得组合数啊!</p>
<p>所以,实际上的$f $是这样的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ n , m  } & = \binom { N  } { n  } \binom { M  } { m  } \sum _{ i = 0  } ^n \binom { n  } { i  } \sum _{ j = 0  } ^m \binom { m  } { j  } g _{ i , j  } \\
f _{ n , m  } & = \binom { N  } { n  } \binom { M  } { m  } k ^{ nm  } ( k - 1 ) ^{ NM - nm  } 
\end{aligned}</script><p>好麻烦啊,能不能避免这种需要进一步思考集合意义的问题呢?</p>
<p>考虑二项式反演的第二个形式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( n ) & = \sum _{ k = n  } ^N C _n ^k g ( k ) \Leftrightarrow g ( n ) & = \sum _{ k = n  } ^N ( - 1 ) ^{ k - n  } C _n ^k f ( k ) \\

\end{aligned}</script><p>不难发现这个式子无论怎么写,前后都一定是从已知集合中选东西.绝对不会出现上面的问题.</p>
<p>因此,我们重新写一下这个题的相关式子,考虑直接正难则反,设$f ‘ _{ i , j  } $为至少有$i $行$j $列不满足条件的方案数,自然有$f ‘ _{ i , j  } = f _{ N - i , M - j  } $.你发现此时一定有:</p>
<script type="math/tex; mode=display">
f ' _{ n , m  } = \sum _{ i = n  } ^N \binom { i  } { n  } \sum _{ j = m  } ^M \binom { j  } { m  } g ' _{ i , j  }</script><p>最后答案就是$g ‘ _{ 0 , 0  } $.</p>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF997C">https://www.luogu.com.cn/problem/CF997C</a></p>
<p>和上一题差不多,不妨设$g _{ n , m  } $表示恰好有$n $行$m $列同色的答案,$f _{ i , j  } $为钦定$i $行$j $列同色的答案,自然有:</p>
<script type="math/tex; mode=display">
g _{ n , m  } = \sum _{ i = n  } ^N ( - 1 ) ^{ i - n  } \binom { N  } { i  } \binom { i  } { n  } \sum _{ j = m  } ^N ( - 1 ) ^{ j - m  } \binom { N  } { j  } \binom { j  } { m  } f _{ i , j  }</script><p>可以求出$g _{ 0 , 0  } $然后再拿全集减一下.</p>
<p>我们求一下$g _{ 0 , 0  } $:</p>
<script type="math/tex; mode=display">
g _{ 0 , 0  } = \sum _{ i = 0  } ^N ( - 1 ) ^{ i  } \binom { N  } { i  } \sum _{ j = 0  } ^N ( - 1 ) ^{ j  } \binom { N  } { j  } f _{ i , j  }</script><p>注意到$[ i = 0 \lor j = 0 ] $的时候算的挺特殊的,因此先把那些算掉,我们就只需要算下面这个东西:</p>
<script type="math/tex; mode=display">
3 \sum _{ i = 1  } ^N ( - 1 ) ^{ i  } \binom { N  } { i  } \sum _{ j = 1  } ^N ( - 1 ) ^{ j  } \binom { N  } { j  } 3 ^{ ( N - i ) ( N - j )  }</script><p>看后面那一块:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ j = 1  } ^N ( - 1 ) ^{ j  } \binom { N  } { j  } { ( 3 ^{ ( N - i )  } )  } ^{ ( N - j )  } \\
& = ( - 1 ) ^{ [ N \ne 0 \pmod { 2  } ]  } \sum _{ j = 1  } ^N ( - 1 ) ^{ N - j  } \binom { N  } { N - j  } { ( 3 ^{ ( N - i )  } )  } ^{ ( N - j )  } 
\end{aligned}</script><p>再看后面那一块:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ j = 1  } ^N ( - 1 ) ^{ N - j  } \binom { N  } { N - j  } { ( 3 ^{ ( N - i )  } )  } ^{ ( N - j )  } \\
& = \sum _{ j = 0  } ^{ N - 1  } ( - 1 ) ^j \binom { N  } { j  } { ( 3 ^{ N - i  } )  } ^{ j  } \\
& = \sum _{ j = 0  } ^{ N  } ( - 1 ) ^j \binom { N  } { j  } { ( 3 ^{ N - i  } )  } ^{ j  } - ( - 1 ) ^N { ( 3 ^{ N - i  } )  } ^N \\
& = ( 1 - 3 ^{ N - i  } ) ^N - ( - 1 ) ^N { ( 3 ^{ N - i  } )  } ^N 
\end{aligned}</script><p>这样就做完了.</p>
<h4><span id="第九题">第九题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4491">https://www.luogu.com.cn/problem/P4491</a></p>
<p>直接二项式反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _k & = \sum _{ i = k  } ^{ m  } ( - 1 ) ^{ i - k  } \binom { m  } { i  } \binom { i  } { k  } \binom { n  } { iS  } \frac { ( iS ) !  } { ( S ! ) ^i  } ( m - i ) ^{ n - iS  } \\
& = \sum _{ i = k  } ^{ m  } ( - 1 ) ^{ i - k  } \frac { m !  } { ( m - i ) !  } \frac { 1  } { k ! ( i - k ) !  } \frac { n !  } { ( n - iS ) !  } \frac { 1  } { ( S ! ) ^i  } ( m - i ) ^{ n - iS  } 
\end{aligned}</script><p>令$tag = m ! n ! $,自然有:</p>
<script type="math/tex; mode=display">
\frac { k ! f _k  } { tag  } = \sum _{ i = k  } ^m \frac { ( - 1 ) ^{ i - k  }  } { ( i - k ) !  } \frac { ( m - i ) ^{ n - iS  }  } { ( m - i ) ! ( n - iS ) ! ( S ! ) ^i  }</script><p>注意到枚举量即$i , k , i - k $,是一个卷积的形式,更进一步地,我们设$F _k = \frac { k ! f _k  } { tag  } , g _{ i  } = \frac { ( - 1 ) ^i  } { i !  } , h _i = \frac { ( m - i ) ^{ n - iS  }  } { ( m - i ) ! ( n - iS ) ! ( S ! ) ^i  } \ $.自然有:</p>
<script type="math/tex; mode=display">
F _k = g _{ i - k  } h _i</script><p>再设$g _k = G _{ m - k  } , G _k = g _{ m - k  } $,自然有:</p>
<script type="math/tex; mode=display">
F _k = G _{ m - i + k  } h _i</script><p>ntt即可.</p>
<h4><span id="第十题第十一题">第十题/第十一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4931">https://www.luogu.com.cn/problem/P4931</a></p>
<p>ps:本题选入笔记:多项式与生成函数-生成函数-求微分方程</p>
<p>二项式反演:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans _k & = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \binom { i  } { k  } \binom { n  } { i  } \binom { n  } { i  } i ! ( 2 n - 2 i ) ! 2 ^i \\
& = \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \frac { 1  } { k ! ( i - k ) !  } \frac { n !  } { ( n - i ) !  } \frac { n !  } { ( n - i ) !  } ( 2 n - 2 i ) ! 2 ^i \\
& = ( n ! ) ^2 \frac { 2 ^k  } { k !  } \sum _{ i = k  } ^n ( - 1 ) ^{ i - k  } \frac { 1  } { ( i - k ) !  } \binom { 2 n - 2 i  } { n - i  } 2 ^{ i - k  } \\
& = ( n ! ) ^2 \frac { 2 ^k  } { k !  } \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } 
\end{aligned}</script><p>注意到后者只与$n - k $有关,不妨设其为$f _{ n  } = \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } $,预处理一下就可以做到$O ( n ^2 + nT ) $.</p>
<p>加强版咋做?我们继续看看式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = ( n ! ) ^2 \frac { 2 ^k  } { k !  } f _{ n - k  } \\
f _{ n  } & = \sum _{ i = 0  } ^{ n  } \frac { ( - 2 ) ^{ i  }  } { i !  } \binom { 2 n - 2 i  } { n - i  } 
\end{aligned}</script><p>注意到$f $是一个卷积的形式,设其生成函数为$F _n $,$g _n = \frac { ( - 2 ) ^n  } { n !  } , h _n = \binom { 2 n  } { n  } $,我们自然有$F = GH $.</p>
<p>考虑$G $和$H $的生成函数形式,先看$G $,显然用泰勒展开:</p>
<script type="math/tex; mode=display">
G = \sum _{ n \geq 0  } \frac { ( - 2 x ) ^n  } { n !  } = e ^{ - 2 x  }</script><p>再看$H $,是一个类似卡特兰数的生成函数,有:</p>
<script type="math/tex; mode=display">
H = \frac { 1  } { \sqrt { 1 - 4 x  }  }</script><p>这下简单了,答案是:</p>
<script type="math/tex; mode=display">
( n ! ) ^2 \frac { 2 ^k  } { k !  } [ x ^{ n - k  } ] \frac { e ^{ - 2 x  }  } { \sqrt { 1 - 4 x  }  }</script><p>现在看$F $,平方一下有:</p>
<script type="math/tex; mode=display">
( 1 - 4 x ) F ^2 = e ^{ - 4 x  }</script><p>两边求导:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- 4 F ^2 + ( 1 - 4 x ) 2 F \times F ' & = - 4 e ^{ - 4 x  } \\
- 4 F ^2 + ( 1 - 4 x ) 2 F \times F ' & = - 4 ( 1 - 4 x ) F ^2 \\
( 2 - 8 x ) F ' & = 16 xF \\

\end{aligned}</script><p>得到了一个线性递推形式,更进一步地:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 ( i + 1 ) f _{ i + 1  } - 8 if _i & = 16 f _{ i - 1  } \\
if _i & = 4 ( i - 1 ) f _{ i - 1  } + 8 f _{ i - 2  } 
\end{aligned}</script><p>技术总结一下:其实就是你想要得到一个递推式,然后注意到这玩意要写成微分方程的形式,所以开始往那边凑.</p>
<h4><span id="第十二题">第十二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5339">https://www.luogu.com.cn/problem/P5339</a></p>
<p>简单题,不妨设当前这个序列中不同颜色的分别有$a , b , c , d $个(区别于题面中的$A , B , C , D $),自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ans & = \sum _{ k = 0  } ^n ( - 1 ) ^k \binom { k  } { 0  } \binom { n - 3 k  } { k  } \frac { ( n - 4 k ) !  } { ( a - k ) ! ( b - k ) ! ( c - k ) ! ( d - k ) !  } \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^k \binom { n - 3 k  } { k  } \frac { ( n - 4 k ) !  } { ( a - k ) ! ( b - k ) ! ( c - k ) ! ( d - k ) !  } 
\end{aligned}</script><p>然后对最后那个东西做背包就行.</p>
<h4><span id="第十三题">第十三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5400">https://www.luogu.com.cn/problem/P5400</a></p>
<h3><span id="字符串算法">字符串算法</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P7114">https://www.luogu.com.cn/problem/P7114</a></p>
<p>调和级数加哈希,简单题,场切了.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3526">https://www.luogu.com.cn/problem/P3526</a></p>
<p>注意到一个事实:如果这个字符串存在长度为$k $的周期,等价于存在长度为$len - k $的border,证明是显然的.</p>
<p>考虑从小周期开始向大周期确定,首先可以用KMP求出所有前缀的最大border,然后就可以得到整个字符串的所有border.换句话说,我们实际上是在一步一步确定整个字符串的若干前缀的最大border.</p>
<p>考虑border理论,设$q $为最小周期,如果$2 q \leq n $,也就是原串能写成$tt \cdots t ‘ $的形式.我们不妨先求$tt ‘ $对应的答案,然后在前面拼$t $.根据$\leq \frac { n  } { 2  } $的border构成等差序列的结论,这样显然是正确的.</p>
<p>如果$2 q &gt; n $,此时必定有$s = tat $,其中$t $是border.考虑递归求解$t $,然后就只需要找到一个$a $满足条件,最小的$a $是全$0 $,能放的话肯定放,不然我们就放一个$0 \cdots 01 $.</p>
<p>为什么这样一定是对的呢?我们考虑什么时候全$0 $不合法:</p>
<ol>
<li><p>新增一个长度$l $的border,$l \leq | t | + | a | $:考虑$l $的最后一段是一段全$0 $,也就必然意味着$t $的最后一段是全$0 $,这么不断推下去就可以说明整个序列都是全$0 $,此时放上$0 \cdots 01 $必定合法.</p>
</li>
<li><p>新增一个长度$l $的border,$l &gt; | t | + | a | $:不妨设当前的$l $是最大的那个(最小的无意义,因为需要保证$| l | &gt; | t | $),此时最短周期必然是$d = 2 | t | + | a | - l $.由于$| t | + | a | $也是周期并且二者之和$\leq n $,因此必然有$d | ( | t | + | a | ) $.把$ta $按照$d $长度划分.如果$d \geq | a | $必有该串是全$0 $串,不然考虑此时$d = | b | + | a | $,$b $是$t $的一段后缀.考虑此时的周期必然$&lt; | b | + | a | $,首先不可能等于,如果大于的话可以平移一格.不妨假设周期比$| b | - | a | $少了$w $,那么此时必定有$b $的前$w $个字符是$0 $,但是由于$0 \cdots 01 $后面第一个$b $也往前平移了$w $格,因此它的第$w $个字符必定是$1 $,这就保证了$0 \cdots 0 1 $必定合法.</p>
</li>
</ol>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6623">https://www.luogu.com.cn/problem/P6623</a></p>
<p>考虑怎么维护所有点权值$+ 1 $后的结果.一个自然的想法是,如果前$[ 0 , k - 1 ] $位都是$1 $,或者说$v \equiv - 1 \pmod { 2 ^k  } $,那加一后会让第$k $位取反.所以我们设$t _{ i , j , k  } $表示$i $的子树内,$\bmod 2 ^k $的结果为$j $的权值的数量.发现这个非常容易维护,用启发式合并可以做到$O ( n \log ^2 n ) $.</p>
<p>考虑这个权值的变化其实比较有规律,因为是树上的距离的差.我们考虑把距离这个东西做树上差分,设$v _i = c _i + dis ( i , 1 ) $,我们要找到子树内部满足条件的其实就是在找满足:</p>
<script type="math/tex; mode=display">
\begin{aligned}
v _i - dis ( x , 1 ) - 1 & \equiv - 1 \pmod { 2 ^k  } \\
v _i & \equiv dis ( x , 1 ) \pmod { 2 ^k  } 
\end{aligned}</script><p>也就是说我们每次对这个桶中要找的元素很固定,用一下colorful tree的trick可以做到$O ( n \log n ) $.</p>
<p>然后然后,这题还有一个无脑做法是,我们倒着建01trie,这样$+ 1 $后可以快速更新.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1535F">https://www.luogu.com.cn/problem/CF1535F</a></p>
<p>我一开始第一反应是对$n \times len \leq 2 \times 10 ^5 $这玩意根号分治,但是麻烦得很.</p>
<p>我们来看我当时想的根号分治部分:首先枚举两个字符串然后判断是好做的.我们来看$n $很大,$len $较小的时候:此时枚举某个串的后缀,并同时枚举其前缀,然后前缀相同的若干个字符是一个trie上的子树,dfn是一个区间,后缀同理,这样就是一个二维数点问题.</p>
<p>冷静看一下上面的过程,你需要判断中间那一段$[ l + 1 , r - 1 ] $是否是单调不降的序列.那如果我们枚举$r $,然后直接看满足单调不降的序列最靠左的$l $是谁,再看$[ 1 , l ] \cup [ r , n ] $相同,这样不就直接做完了嘛?总之,先按照字符不同分类,再按照字典序排序,然后枚举$r $,二分找LCP满足条件的区间,和trie上dfn区间构成一个二维数点,总复杂度$O ( n \times len \log len ) $.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3311">https://www.luogu.com.cn/problem/P3311</a></p>
<p>简单题,ACAM上做数位dp.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1437G">https://www.luogu.com.cn/problem/CF1437G</a></p>
<p>首先肯定可以fail树上树剖,这个做法一眼秒.</p>
<p>然后我看题解发现这个题也可以colorful tree.大概就是你先离线,然后维护时间维的答案,那么所有的修改操作就可以改成将时间在$[ l , r ] $这段的字数答案取$\max $.这个是一个二维的问题.</p>
<p>但是,我们按照colorful tree的思路去搞,每次dfs到一个点的时候,把答案加入线段树,在返回的时候撤销.注意colorful tree其实不用撤销,因为它的信息满足可减性,这题不行.然后就实现了单$\log $做法.可以使用吉司机,但是没必要,因为查询是单点查询,在每个节点上标记永久化然后一路取$\min $就行.</p>
<p>总结一下上面的这个东西是啥啊,就是说,你发现我们查询的内容是到根的一条链的最大值,这个还挺难做的,因为这条链不满足什么区间的性质,但是子树满足,因此想到了我们可以把操作改成对子树取$\min $.但是这个操作不满足可减性,难以消去.</p>
<p>如果不满足可删除性,我们一般要想想它是不是满足可撤销性,显然是满足的.因此自然想到了colorful tree.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1483F">https://www.luogu.com.cn/problem/CF1483F</a></p>
<p>这题可能比较像lxl当时讲的那个支配对问题.我们考虑合法的$( i , j ) $的数量的一个上界.一个自然的发现是,考虑先把所有的串按照长度排个序,然后对于较长的串,去找较小的串是否和它满足条件,一个自然的观察是,对于这个较长的串的每个位置$i $,最多只有一个串是满足条件的$[ 1 , i ] $的后缀.因为如果有多个后缀可以选取最长的那个(注意当$i = len $的时候要选次长的那个,最长的是这个串本身),于是合法的$( i , j ) $数量只有$\sum len $个.首先这些$( i , j ) $是有重复的,不过去重很简单.我们现在需要判定是否统计上了$( i , j ) $和$( k , j ) $使得$i $是$k $的子串,$k $是$j $的子串.不难发现如果有这种情况出现,必然是因为$k $在$j $中的出现位置在某一个$i $之后,但是$k $中又出现了$i $,因此它的左端点必然在$i $之前.我们维护一个单调栈,每次弹出左端点比当前左端点靠右的那些点,这些一定不会贡献答案.</p>
<p>我本来以为这样就做完了,实际上没有,上面的过程出了什么问题呢?我们确实能删掉所有的$( i , j ) $使得存在$( k , j ) $满足$i $是$k $的子串,并且$i $不是$k $的后缀.但是如果是后缀的话我们是有可能删不掉的.</p>
<p>这个问题怎么解决呢?考虑这种事情会发生当且仅当$i $所代表的ACAM的节点是$k $的父亲.于是我们用树状数组维护这个东西,具体来说,从大到小判断$i $是否合法,并且在这个点上$+ 1 $,用树状数组统计子树内部是否有点就行.注意即使被弹出栈的那些字符串,也需要在这个过程中删去它所有的后缀.</p>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1110H">https://www.luogu.com.cn/problem/CF1110H</a></p>
<p>考虑一个暴力的想法是,这个$[ l , r ] $的限制条件其实等价于要求$[ l , r ] $内的所有数字作为子串出现的次数加起来.把所有的这些字符串全部扔进ACAM,然后对着它dp.不妨设$dp _{ i , j  } $表示当前走到$i $节点,然后后面还可以填$j $个位置的答案,自然有:</p>
<script type="math/tex; mode=display">
dp _{ i , j  } = \max \{ dp _{ son , j - 1  } \} + cnt _i</script><p>其中$cnt _i $表示$i $节点是多少子串的endn,构造方案是简单的.</p>
<p>考虑如何优化,注意到dp部分看上去挺优秀的,难搞的是ACAM的建树.我们不能把所有数字全扔进去.这种区间信息看上去就是如果走到当前,后面全填$0 $或者后面全填$9 $都能满足条件,那我们就开摆.更具体地来说,我们发现当前的最靠前的那一位没有用了:以它为开头的一定可以找到一个答案(其实因为填的数位).所以我们直接跳fail把那一位跳掉.</p>
<p>如果说的再形象一点的话就是,我们插入的过程其实很废,对于一些特定的前缀$x $,它的子树内部会形成一个满十叉树.这个是我们无法接受的.来考虑这个东西怎么办,我们一路dfs到叶子后肯定要跳fail,根据ACAM的建树过程,这等价于跳到$x $的fail,因此其实就等价于把$x $这一位(或者后面的几位)跳掉.</p>
<p>但是,如果你顺着这个思路想,你开始逐渐剥掉满十叉树,然后一点一点搞,你会做的巨他妈复杂.</p>
<p>我们完全没有必要只在满十叉树的时候才跳跃.换句话说,如果后面填$len \in [ l , r ] $长度的字符串全部合法,我们就在这里统计答案,然后继续跳son而不是fail.</p>
<p>我们考虑既然这里填$len \in [ l , r ] $都可以,那填$l - 1 $的长度或者填$r + 1 $的长度就不一定能全部合法了.只有后面几位填的满足某种条件才能合法.但是你注意啊,我们并不在左端点统计答案,而是在这个串填到某一位(可能是最后一位),然后后面都可以随便填的时候,才统计这里的答案,不一定跳fail.而我们跳fail的时候,会删去若干个前缀字符,这些答案会随着fail链一路传过来.还有一个问题是,如果我们跳fail跳到了被删去的虚拟节点怎么办?这种情况压根不会有贡献:这个被删去的虚拟节点的贡献会被传到它的某个祖先上,然后早早地贡献掉.我们跳到的fail应该是第一个不是虚拟节点的位置.因此这里也不会被更新答案.</p>
<p>这样整个题就是简单的了.</p>
<h4><span id="第九题">第九题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4218">https://www.luogu.com.cn/problem/P4218</a></p>
<p>首先有一个$O ( n ^2 ) $的暴力是,我们暴力在$SAM $上跑一遍所有的串.我们考虑怎么优化这个东西.</p>
<p>树上路径,想到点分治,我们考虑对于一个分治中心$x $,求出所有经过它的路径.这个怎么求呢?我们考虑先求出所有$u \rightarrow x $的路径,以及所有$x \rightarrow v $的路径,假设前者的终点为$p $,后者的起点为$p $,那我们可以在$p $节点统计答案.但是发现$u \rightarrow x $这个东西需要往前加字符,不过这个好做,首先往前加字符等价于在parent tree上跳儿子,而所有的儿子前面的第一个字符肯定是不同的,我们处理出$son _{ x , c  } $表示在$x $这个节点,往前加一个字符$c $会到哪个节点.当然这个你实在不行把串反过来也行.</p>
<p>以及为了不让$u $和$v $在同一棵子树内,我们需要对其做容斥.不难发现每次操作和每次容斥的复杂度都是$O ( m + size ) $的.总复杂度$O ( n \log n + nm ) $,好像不太行.</p>
<p>冷静一下,我们把$siz $较小的那些拿上面的暴力处理掉,这样就只有$siz $较大的那些会有用了.这个复杂度怎么证明呢?我们考虑点分树.不妨假设它是一棵二叉树(其它的情况是类似的).</p>
<p>考虑将它的第$B $层以下的树全部暴力,这里一共有$2 ^{ B  } $棵树,每棵复杂度是$O ( 2 ^{ 2 ( \log n - B )  } ) $的.</p>
<p>它的第$B $层以上的跑上面的点分树,这里一共有$2 ^B $个节点,每个节点要跑一次$O ( n + m ) $的做法.</p>
<p>平衡一下复杂度,设$B = \frac { \log n  } { 2  } $,此时复杂度$O ( ( n + m ) \sqrt { n  } ) $.</p>
<h3><span id="动态规划第二期">动态规划第二期</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9318">https://www.luogu.com.cn/problem/P9318</a></p>
<p>不合法的情况如此方便,因为两边直接独立了,因此直接考虑二项式反演,设$f _k $表示恰好有$k $个裂缝,$g _k $表示钦定有$k $个裂缝,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g _k & = \sum _{ i = k  } ^w \binom { i  } { k  } f _i \\
f _k & = \sum _{ i = k  } ^w \binom { i  } { k  } ( - 1 ) ^{ i - k  } g _i \\
ans & = f _0 & = \sum _{ i = 0  } ^w ( - 1 ) ^{ i  } g _i 
\end{aligned}</script><p>考虑设一个高为$h $,长为$k $的段随便填的方案数,显然就是每一层都随便填的方案数,也就是$w _k = ( F _k ) ^h ( w _0 = 0 ) $,其中$F _k $是斐波那契数列的第$k $项,那么$g _i $就是这玩意做卷积.更具体地,我们设$g _{ i , j  } $表示目前长度为$j $,分成了$i $段的答案,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g _{ i , j  } & = \sum _{ k < j  } g _{ i - 1 , k  } w _{ j - k  } \\
G _i & = W ^i 
\end{aligned}</script><p>这个生成函数形式其实没啥用,因为模数是$10 ^9 + 7 $.上述dp的复杂度是$O ( n ^3 ) $的.</p>
<p>冷静一下不要魔怔,我们考虑别二项式反演,直接补集转化,这样就只需要知道最靠前的裂缝.换句话说,我们设$f _i $表示当前考虑到前$i $列,然后没有裂缝的方案数,不难发现$f _n = w _n - \sum _{ k = 1  } ^{ n - 1  } f _k w _{ n - k  } $.这样就是$O ( w ^2 ) $的.</p>
<p>冷静一下,注意到$wh $有限制,因此复杂度应该要和$wh $有关,考虑对于一个联通的块的答案,你的最右侧一定不是平的,应该是有凹凸的.我们设$f _{ i , j  } $表示当前dp完了前$i $列,在第$i + 1 $列凸出来了$j $个位置.转移的话考虑凹的位置填什么,如果填$2 $就往后再凸一格,如果填$1 $就没啥事.具体地:</p>
<script type="math/tex; mode=display">
f _{ n , m  } \binom { h - m  } { k  } \rightarrow f _{ n + 1 , k  } , k \in [ 0 , h - m ]</script><p>这个dp的复杂度为$O ( wh ^2 ) $.注意到这两个dp的复杂度不同,于是分治,不妨设$N = wh $,</p>
<p>第一个dp的复杂度是$O ( \frac { N ^2  } { h ^2  } ) $,第二个dp的复杂度是$O ( Nh ) $,当$h \leq N ^{ \frac { 1  } { 3  }  } $的时候使用第二个dp,不然使用第一个,复杂度$O ( N ^{ \frac { 4  } { 3  }  } ) $.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1250D">https://www.luogu.com.cn/problem/CF1250D</a></p>
<p>最重要的观察在于,这题等价于保留最多的区间,使得若其中某两个区间有交,那么它们必定颜色相同,但是同时需要满足一些形如某个区间只能染某种颜色的限制条件.原因很简单,首先原题的意思自然是找到染色方式,使得满足与其有交的区间颜色必定和它相同.那么对于一个满足条件的区间,如果与它有交的区间不满足条件,我们把那个区间删了这个区间也不会不满足条件.于是合法的不会变成不合法,接下来需要说明不合法的不会变成合法.首先是原本已经确定了颜色的区间,这个限制好做.然后是如果一个区间没有确定颜色,那它不能被包括在多个确定了的区间.这等价于,我们对于与右端点相交的所有无色区间全部作为新的右端点来更新.这样后面选的时候就不会错误更新右端点了.</p>
<p>或者我们换一个更清晰的描述,我们现在想要得到一些极长的段,使得这些段两两不交,并且与这些段相交的区间都是一个颜色.那么被完全包含在这个段内的区间显然就是答案,我们要最大化这个.</p>
<p>然后上面形成若干限制条件,但是这个在下面的dp中是好处理的.不过有个细节是,如果有两个相邻的连续段(不一定紧邻)的颜色相同,那么我们上一个区间的后面拖着的无色区间是不必对此产生影响的.这怎么办呢?特判一下同色.</p>
<p>这样的dp就很好设计了,更具体地,设$f _{ r , k  } $表示目前$[ 1 , r ] $,包含$r $的那个区间颜色是$k $,最多能保留多少个区间.自然有:</p>
<script type="math/tex; mode=display">
[ l , r ] = k \Rightarrow f _{ r , k  } \leftarrow cnt _{ l , r , k  } + \max _{ i = 0  } ^{ l - 1  } f _{ i , k '  }</script><p>设$g _{ i  } = \max _{ k  } f _{ i , k  } $,我们有:</p>
<script type="math/tex; mode=display">
[ l , r ] = k \Rightarrow f _{ r , k  } \leftarrow cnt _{ l , r , k  } + \max _{ i = 0  } ^{ l - 1  } g _{ i  }</script><p>对于$g _i $做前缀$\max $,这样就只需要枚举$r , k $.复杂度$O ( n ^2 c ) $.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1158F">https://www.luogu.com.cn/problem/CF1158F</a></p>
<p>考虑如何判断一个串的密度,不妨设它密度为$P $,我们从左往右找到第一个位置,使得前缀的密度为$1 $,那么显然这个位置的后缀的密度是$P - 1 $,如果小了,那么这个第一个位置所代表的那个数字开头的子序列就不全.如果多了,那显然可以构造出密度至少为$P + 1 $的子序列.由上面这个描述,我们发现一个密度为$P $的序列一定可以分成$P $个子段,使得每个子段都出现了$[ 1 , c ] $中所有的数字.更进一步地,我们如果不是划分,那么$P $中一定存在$P $个互不相交的子段,使得每个子段都出现了$[ 1 , c ] $中所有的数字并且每个子段最后的那个元素只出现了一次.顺便我们还可以发现$p \leq \frac { n  } { c  } $.</p>
<p>由上面,我们可以发现一个状压dp,也就是设$dp _{ i , j , S  } $表示当前走到$i $,前面的密度为$j $,然后如果在后面全出现了$S $中的数字,那么密度会变大$1 $.这样给出了一个$\frac { n ^2  } { c  } 2 ^c $的做法.</p>
<p>质数感觉不太行啊,考虑考虑dp,上面的形式看上去就很好dp,设$dp _{ i , j  } $表示当前在$i $然后密度是$j $的方案数,再设$f _{ l , r  } $表示在$[ l , r ] $中选出一个子序列,$r $必选且$a _r $只出现了一次的方案数.不妨设$T _i $表示$i $在这个区间出现的次数,不难发现$f _{ l , r  } = \prod _{ i \ne a _r  } ( 2 ^{ T _i  } - 1 ) $.这个只需要枚举$l $扫$r $就可以$O ( n ^2 ) $算.自然有转移:</p>
<script type="math/tex; mode=display">
dp _{ i , j  } = \sum _{ k < i  } dp _{ k , j - 1  } f _{ k + 1 , i  }</script><p>不过吧这么转移有一个小问题,那就是我们的$dp _{ i , j  } $必须是最后一段以$i $结尾.那么我们最后统计答案还要算上最后的那一段没有选出$[ 1 , c ] $的答案.不过这个也好算.</p>
<p>但是还有一个方式,那就是从后往前dp,然后每次放这么一段,对dp取一个后缀和来转移.</p>
<p>总之,这个dp的复杂度是$O ( \frac { n ^3  } { c  } ) $的.取$c = \log n $为两个复杂度的边界,这样总复杂度是$O ( n ^2 \log n ) $.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1175G">https://www.luogu.com.cn/problem/CF1175G</a></p>
<p>显然设$f _{ i , j  } $为前$j $个划分了$i $段,自然有:</p>
<script type="math/tex; mode=display">
f _{ i , j  } = \min _{ k < j  } \{ f _{ i - 1 , k  } + ( j - k ) \max _{ l = k + 1  } ^j a _l \}</script><p>第一反应是决策单调性,可惜没有.</p>
<p>不过后面那个形式很简单,我们暴力一点维护这个东西.用单调栈维护出当前哪些后缀的最大值相等,不妨记这个最大值为$m $.我们改成刷表更新:</p>
<script type="math/tex; mode=display">
f _{ i - 1 , k  } + ( j - k ) \max _{ l = k + 1  } ^j a _l \rightarrow f _{ i , j  }</script><p>对于每层$i $从左往右扫$k $,然后维护单调栈,然后对于每个点,它对右边的贡献在$\max _{ l = k + 1  } ^j a _l $不变的情况下,就是一条稳定的一次函数.但是这样还有一个问题,就是我们如何快速求出一个区间的所有的直线.这个的话,我们考虑对于不同的$\max _{ l = k + 1  } ^j a _l $,求出最小的$f _{ i - 1 , k  } - k \max _{ l = k + 1  } ^j a _l $,这相当于一个凸包,然后用斜率为$m $的直线来切点.然后合并两个凸包可以启发式合并,用链表维护队列.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9312">https://www.luogu.com.cn/problem/P9312</a></p>
<p>首先观察到我们可以限制手上的灯笼能照亮的海拔是一段区间,因为我们可以先选择不断扩张,而不是提前买,等到了需要用的时候再买就行.</p>
<p>一个自然的想法是$f _{ s , l , r  } $表示以$s $为起点,当前能走到的海拔高度是$[ l , r ] $.为什么需要记录$s $呢?因为可能有不同的区间走出来的海拔高度都是$[ l , r ] $.那我们设$f _{ l , r  } $为当前海拔最低的那个灯编号是$l $,最高的那个编号是$r $.然后我们要知道的就是$f _{ s , s  } $.然后按照区间从大到小dp.这样有一个$O ( k ^3 ) $的做法.</p>
<p>考虑如何优化,不妨假设当前新买的灯笼是第$u $个,那么我们分情况讨论一下:</p>
<ol>
<li><p>$f _{ i , u  } + c _u \rightarrow f _{ i , j  } $.这种情况需要保证$u $能买的地方在$i , j $的控制区域里,并且需要满足$u $的区间和$i , j $的区间是相交的.这种情况上也就是需要$u $的下界小于等于$j $的上界.这个比较好处理,我们从大到小枚举$j $,等$f _{ i , u  } $不合法的时候把它删了就是了.</p>
</li>
<li><p>$f _{ u , u  } + c _u \rightarrow f _{ i , j  } $.和上面是类似的.</p>
</li>
</ol>
<p>也就是说,我们现在唯一最需要搞定的就是怎么让$u $能买的地方在$i , j $的控制区域里,不难发现这是一个看上去比较典的线段树维护dp.</p>
<p>事实上有一种更简单的写法,不妨设$L , R $为实际控制的海拔范围,$S , T $为实际控制的山峰范围,我们先把转移仔细写一下:</p>
<ol>
<li><p>$f _{ l , u  } + c _u \rightarrow f _{ l , r  } ( R _u &gt; R _r \geq L _u \land u \in [ S _l , T _r ] ) $.</p>
</li>
<li><p>$f _{ u , r  } + c _u \rightarrow f _{ l , r  } ( L _u &lt; L _l \leq R _u \land u \in [ S _l , T _r ] ) $.</p>
</li>
<li><p>$f _{ u , u  } + c _u \rightarrow f _{ l , r  } ( L _u &lt; L _l \leq R _u \land R _u &gt; R _r \geq L _u \land u \in [ S _l , T _r ] ) $.</p>
</li>
</ol>
<p>按照$L $从小到大枚举,按照$R $从大到小枚举,那上面的所有转移都是无后效性的.</p>
<p>注意到第三种转移没有意义,我们可以直接改写成:</p>
<ol>
<li><p>$\min \{ f _{ l , u  } , f _{ u , u  } \} + c _u \rightarrow f _{ l , r  } ( R _u &gt; R _r \geq L _u \land u \in [ S _l , T _r ] ) $.</p>
</li>
<li><p>$\min \{ f _{ u , r  } , f _{ u , u  } \} + c _u \rightarrow f _{ l , r  } ( L _u &lt; L _l \leq R _u \land u \in [ S _l , T _r ] ) $.</p>
</li>
</ol>
<p>原因在于,我们其实只想要让$u $与$l , r $所代表的区间相交,这个比较重要,其它的都不重要.就算转移是错误的,那样转移一定不优秀.</p>
<p>此刻对于(1)我们想知道的就是固定$l $的情况下,按照$R $从大到小枚举的贡献,以及对称情况,不难发现这个用堆也是能做的.也就是在$l $相同的前提下,如果$R _i &lt; R _j &lt; R _k $,如果$k $不能贡献到$j $,那么$k $必然不能贡献到$i $,这就保证了堆的正确性.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P8294">https://www.luogu.com.cn/problem/P8294</a></p>
<p>毛估估的话就是设$f _{ x , s , t  } $表示在断开$x $到父亲这条边时,$x $的值来自子树内的点$s $,然后从父亲换下来的值将要去子树内的$t $.不难发现$( x , s , t ) $合法当且仅当$x = lca ( s , t ) $,这样状态数就是$O ( n ^2 ) $的.</p>
<p>来细细写一写转移:</p>
<p>首先,如果$cnt _{ son  } = 0 $,显然$f _{ x , x , x  } = d _x $.</p>
<p>如果$cnt _{ son  } = 1 $,不妨设其儿子是$u $,不难发现此时必有$s _x = x \lor t _x = x $,讨论一下:</p>
<p>若$s _x = x $,那么之间换出去就行,然后因为要一路换下去:</p>
<script type="math/tex; mode=display">
f _{ x , x , t _x  } \leftarrow f _{ u , s _u , t _x  } + d _x</script><p>反之,那么要先把$s _x $换到$x $这里,然后再换出去,此时有:</p>
<script type="math/tex; mode=display">
f _{ x , s _x , x  } \leftarrow f _{ u , s _x , t _u  } + d _x + d _{ s _x  } ( dep _{ s _x  } - dep _{ x  } )</script><p>注意到上述复杂度均为$O ( n ^2 ) $.因为枚举一下$( s _u , t _x ) $或$( s _x , t _u ) $就可以确定$u $,而$x $是$u $的父亲,自然也可以确定.</p>
<p>这个式子已经给了我们启发了,剩下的类似.有时间再补这个题吧,太精神污染了.</p>
<h3><span id="数据结构">数据结构</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1648D">https://www.luogu.com.cn/problem/CF1648D</a></p>
<p>不妨设$f _i $表示从$( 1 , 1 ) $走到$( 2 , i ) $的最大收益,显然求出这个后再拼一下第三行的后缀和就是答案.我们枚举覆盖$( 2 , i ) $的区间是$k $,此时必然需要满足$l _k \leq i \leq r _k $.</p>
<p>不妨设$sum $表示每一行的前缀和,$sufsum $表示第三行的后缀和,注意到转移:</p>
<script type="math/tex; mode=display">
\begin{gathered}
- c _k + \max _{ l _k - 1 \leq j < i \leq r _k  } \{ f _j \} \rightarrow f _i \\
- c _k + \max _{ l _k \leq j \leq i \leq r _k  } \{ sum _{ 1 , j  } - sum _{ 2 , j - 1  } \} \rightarrow f _i 
\end{gathered}</script><p>这个东西即使我们枚举$k , i $,然后数据结构优化$j $来转移它也是艰难的.那咋办呢?我们考虑我们枚举$k $的原因是,我们需要保证$i \leq r _k $.如果我们钦点$i = r _k $,那我们上面的枚举就只有一维了.也就是需要保证$i $右边的点一定走不到,这样我们上面的转移仍然是正确的.至于计算答案,一个反应是把这个$f $做一下后缀$\max $.但其实不对!因为你往后多走点可能多吃到了一点$a $.</p>
<p>那么怎么处理这个东西呢?考虑如果当前选的这个区间不是最后一个区间,那我从后面的$r $走到前面的一个$i $再拐到第三行去,显然只会有第二行的一段和的差别,我们把这个差别统计进去就行.但是如果只开了一个区间,也就是从第一行拐下来没到结尾直接拐下第三行了,那么第一行的贡献也要减去.我们可以把$f _{ i  } $改成$f _{ i , 0 / 1  } $来解决这种问题.</p>
<p>于是吧,我们就有了下面这个转移:</p>
<script type="math/tex; mode=display">
\begin{gathered}
- c _k + \max _{ l _k - 1 \leq j < r _k  } \{ f _{ j , 0  } , f _{ j , 1  } \} \rightarrow f _{ r _k , 1  } \\
- c _k + \max _{ l _k \leq j \leq r _k  } \{ sum _{ 1 , j  } - sum _{ 2 , j - 1  } \} \rightarrow f _{ r _k , 0  } 
\end{gathered}</script><p>然后怎么贡献答案呢?首先你不能往左走太多,至少不能超过最后选的那个区间.事实上我们发现最后一定只有一个区间的右端点超过了拐点.因为选择的所有区间一定没有包含关系,而右端点可以对拐点取$\min $.因此我们枚举当前最靠右的那个区间$k $,以及最后拐到第三行的点$i $,自然有:</p>
<script type="math/tex; mode=display">
\begin{gathered}
- c _k + \max _{ l _k - 1 \leq j < r _k  } \{ f _{ j , 0  } , f _{ j , 1  } \} + \max _{ j < i \leq r _k  } \{ sum _{ 2 , i  } + sufsum _{ i  } \} \rightarrow ans \\
- c _k + \max _{ l _k \leq j \leq i \leq r _k  } \{ sum _{ 1 , j  } - sum _{ 2 , j - 1  } + sum _{ 2 , i  } + sufsum _i \} \rightarrow ans 
\end{gathered}</script><p>要统计所有$j &lt; i $或者$j \leq i $的点对的答案在线段树上都是好做的.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9371">https://www.luogu.com.cn/problem/P9371</a></p>
<p>考虑如何判断$x $是否是这个区间的中位数:我们把大于$x $的记作$1 $,小于$x $的记作$- 1 $,$x $记作$0 $,如果区间和的绝对值小于等于$x $的出现次数,那么$x $满足条件.</p>
<p>我们先扫值域,这样修改每个点的取值的总复杂度均摊.对于每一个权值$v $,枚举权值是$v $的一个点作为这个区间中最靠左的$v $,然后考虑找到最大的右端点使得合法,而由于确定了最靠左的$v $,我们其实是不在乎这个区间左端点是啥的,只要包含这个点就行,不妨设这个点为$l $.</p>
<p>接下来在每个点记录以这个点的为结尾的所有后缀和(要求左端点小于等于$l $)的集合.不难发现,这个集合一定是一段区间,因为每个值只有可能是$\pm 1 $或$0 $.于是我们要维护的就是这些点的最大后缀和以及最小后缀和,然后判断这个值与$x $的大小关系.用线段树维护这两个东西的$\max $和$\min $,能往右跳就往右跳.</p>
<p>有个细节是我们需要保证这些后缀和的左端点小于等于$l $,这其实等价于直接求$l $这里的最小后缀和以及最大后缀和,然后在每个点上只需要存这个点与$l $这段区间和即可,这个在$l $的移动过程中是好维护的.</p>
<p>至于最大后缀和的合并是简单的.</p>
<p>写起来发现上面那个东西其实不太好搞啊,我们考虑改改描述,上面等价于将每个区间改成最小后缀和$- x $出现次数,以及最大后缀和$+ x $出现次数,然后只需要判断这个区间是否包含$0 $.好像还是不太好做???</p>
<p>冷静一下,注意到相邻两个位置的最大后缀和相差不超过$1 $,这意味着我们可以维护一段区间的所有区间的并,这必定还是一个区间.然后判断这个并是否包含$0 $,这个就方便线段树上二分了.至于我们的修改操作,无非是以下几种操作:</p>
<ol>
<li><p>对于每个$l $以及它的一对后缀和,在线段树上找到最靠右的一个叶子使得这个区间在加上这对后缀和更改后包含$0 $.</p>
</li>
<li><p>在更改当前处理的值$v $的时候,将所有点的值恢复为前缀和.</p>
</li>
<li><p>在更改当前处理的值$v $的时候,将某些点的值置为$- 1 $,将某些点的值置为$0 $.</p>
</li>
</ol>
<p>显然都好做.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P7220">https://www.luogu.com.cn/problem/P7220</a></p>
<p>ps:本题选入笔记:常见套路-二进制分组-Example1</p>
<p>先考虑没有插入怎么做,注意到所有的线会扫出一个空白区域:这个空白区域由一条折线围成,而所有的点都在折线外或在折线上,更进一步地,在折线外的点没有动,就是初始位置.</p>
<p>这启发我们分开维护,每次扫线的时候更新折线,把该扔进来的扔进来,由于折线上的点$( x , y ) $,随着$x $的增大$y $不增,因此是简单维护的,用一下平衡树就行.</p>
<p>问题在于如何维护插入点.考虑求出所有能影响到一个询问的区间,把它们扔到线段树上,然后就可以用线段树分治维护这个东西.具体来说,我们在线段树上dfs,每次遇到一个区间,把该搞得全部搞完,然后这个点的位置就留在这里了,在后面dfs到其它的区间后再改.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9168">https://www.luogu.com.cn/problem/P9168</a></p>
<p>场上写了$48 pts $,简单来说就是对于每个$m $,从下往上合并,然后当某一个时刻某棵子树内人数大于子树大小,就把最菜的那几个给删了.根据Hall定理,这样做显然是正确的.</p>
<p>接下来看怎么优化,首先第一反应肯定是线段树分治,这样我们只需要做加入和撤销,就不需要做删除了.撤销总是好做的.</p>
<p>那么只有加入怎么做呢?这个点能造成的影响无非是以下几种:</p>
<ol>
<li><p>它被加入,没有别的点被删除.</p>
</li>
<li><p>它被加入,另一个点被删除.</p>
</li>
<li><p>它没有被加入.</p>
</li>
</ol>
<p>注意到(1)发生当且仅当这个点到根的路径上没有节点是满节点,这个判一下就行.</p>
<p>然后考虑(2),(3),淘汰必然会发生,并且必定是在离插入点最近的那个满的祖先.</p>
<p>这样的话我们需要实现的就是两件事:</p>
<ol>
<li><p>对于一个点,找到离他最近的满的祖先.</p>
</li>
<li><p>查询子树内部点的最小值.</p>
</li>
<li><p>支持在点上插入和删除.</p>
</li>
</ol>
<p>这三个操作显然都可以用树剖维护.算上线段树分治,这样就是$O ( n \log ^3 n ) $.</p>
<p>不过吧,我们需要说明一件事情:那就是为啥选择子树内最小的那个点一定是优秀的.我们可以简单举个例子来反对这个直觉:如果有两个点权值相同,一个点是另一个点的祖先,那显然选择祖先会优秀一点,因为这个祖先对下面子树的限制要小一些.</p>
<p>我们可以这么干:我们在一开始那个暴力中这么规定:每次满员了之后,删掉权值最小的,权值相同的则按照编号删.对于一个子树$x $,假设它所有儿子的子树都合法了,并且它需要删,此时:</p>
<ol>
<li><p>如果我们之前想删的那个点已经死了,那就完事了.</p>
</li>
<li><p>如果我们之前想删的那个点没死,注意到我们接下来插入的点一定排序比当时想删它的时候只大不小,那此时必然还要删掉它.</p>
</li>
</ol>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF464E">https://www.luogu.com.cn/problem/CF464E</a></p>
<p>之前做过,就是最短路.但是我们要实现高精度加法和高精度比较大小,注意到加上一个$2 ^x $在二进制上的体现是某段$1 $变成$0 $,某一个$0 $变成$1 $,这个可以用主席树实现.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1801E">https://www.luogu.com.cn/problem/CF1801E</a></p>
<p>简单题,考虑暴力显然是直接大力并查集,而并查集的操作其实是不多的:一次有用的并查集操作必定是会让连通块个数减少$1 $,因此操作均摊.于是考虑二分+哈希找到第一个有用的并查集操作.这就必然要求我们快速求出一条路径的哈希值.考虑哈希是可以差分的,因此处理每个点到根的哈希值(注意要维护两个方向)即可.每改变一个点就把子树内全部更改一下,这样就做完了.使用启发式合并可以做到$O ( n \log ^2 n ) $.</p>
<p>不过发现这个过程只有区间加法和单点查询,可以使用树状数组.</p>
<p>然后就卡了一晚上常数.事实上这题存在二进制分组做法:我们发现我们要做的无非是将两段直上直下的序列,然后定义它们对应数字相等.我们可以将一个点到它的$2 ^k $级祖先所形成的这么一段拆成一段,这样就可以直接倍增然后处理.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF702F">https://www.luogu.com.cn/problem/CF702F</a></p>
<p>典典典.考虑维护人的平衡树,然后每次check一个衬衫.注意到它会把大于等于它的人给减去这个值.我们考虑将这个splay分裂开来,然后对大于等于它的那些点打个减法tag,再与小于它的那个分裂出去的树合并起来.但是splay无法支持快速合并两棵无大小关系的树(ye不能启发式合并,因为以后还要裂开),我们考虑当前衬衫的价格是$v $,将所有人分成$[ 0 , v ) , [ v , 2 v ) , [ 2 v , + \infty ) $,三个部分,第一个部分不用管,第二个部分减去$v $后变成第一个部分,我们把它们暴力插入第一个部分.第三个部分直接打tag并合并,由于第二个部分的暴力插入会使得权值减半,因此总复杂度$O ( n \log ^2 n ) $.</p>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6072">https://www.luogu.com.cn/problem/P6072</a></p>
<p>考虑对于每一条边,求出以这条边为界限,两边的最大值然后加起来,显然就是答案.</p>
<p>还有一点是,一条路径$x - y $的权值可以表示为$dep _x \oplus dep _y $,这就启发我们用01trie维护最大异或值.</p>
<p>现在相当于求出$f _x $表示$x $的子树内的答案,再求出$g _x $表示$x $的子树外的答案.这个怎么求呢?首先$f _x $可以启发式合并01trie.</p>
<p>对于$g _x $,也很好做.你考虑求出全局最大的那条路径,显然只要分割点不在这条路径上,就会选取它.反之的话,就是两条路径往下dfs,这个直接暴力做01trie就是$O ( n \log w ) $.</p>
<p>做到这里我们冷静一下看看$f $,注意到只有临近上面我们说的那条链的$f $,或者是就在这条链上的$f $.我们只需要求出这些$f $,因为再往下也没啥用,这样就能让总复杂度变成$O ( n \log w ) $.</p>
<h3><span id="图论">图论</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4768">https://www.luogu.com.cn/problem/P4768</a></p>
<p>典中典,求kruskal重构树,以及$1 $到所有点的最短路即可.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1408G">https://www.luogu.com.cn/problem/CF1408G</a></p>
<p>首先你需要发现,一个点集内部的边全部小于它与外界相连的边,那么如果我们从小到大加边,那么必然有一个时刻是这个点集成为了一个和外界分离的团.因此,考虑从小到大加边,并考虑kruskal重构树的结构,我们就可以将这个过程展现在树上.并且这个过程等价于区间合并.因此我们的问题转化为了有若干区间,选取若干不交的区间覆盖全集的方案数,简单的.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9167">https://www.luogu.com.cn/problem/P9167</a></p>
<p>我们设题面中的$t $座城市是关键城市,根据题面,断掉这$t $座城市之间的边,会使得图分裂成若干个大小相差至多为$k $的连通块.我们不妨认为在一个连通块中,关键城市控制着里面的所有点,那么被不同城市控制的点一定没有边相连.如果此时图是树的话我们已经做完了,无非是要在树上划分点集.反之,我们考虑dfs树,维护出点双意义下的$dfn , low $.注意到一个连通块必定在dfs树上也是连通块.</p>
<p>那么一个点能作为关键点,当且仅当它在dfs树上的某些子树所组成的城市都被控制,这个可以通过$low $来判断.枚举连通块大小,并设$dp _{ i , j  } $表示$i $子树上部还有$j $个城市没决定被控制,这样就可以dp.注意到第二维有用的信息不多,这样就可以优化到$O ( n \sqrt { n  } ) $.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/P9170">https://www.luogu.com.cn/problem/P9170</a></p>
<p>先看Bob,先把$| T | = 1 $的选了,然后删掉.不断做这个过程直到所有的$| T | = 2 $,此时将这两个点之间连一条边,那就会形成一张图.对于每个连通块,若$| E | &gt; | V | $,则必然无解.其它的情况必然有解,这就解决了第一个问题.</p>
<p>不过其实没必要删$| T | = 1 $,直接连自环就行.</p>
<p>对于Alice,考虑以下几种情况:</p>
<ol>
<li><p>$| S \land T | = 0 $,显然Alice选啥都没用.</p>
</li>
<li><p>$| S \land T | = 1 $,此时Alice必然选那个和Bob有交的.</p>
</li>
<li><p>$| S \land T | = 2 $,此时Alice可以选择其中一个.</p>
</li>
</ol>
<p>这样的话,Alice就已经确定了一些东西,而不确定另一些东西.Alice必然是要让Bob能选的最小情况最大,我们考虑再讨论一下:</p>
<ol>
<li><p>$| E | = | V | $,此时连通块是一个基环树.那么除了环以外的点一定都选好了.如果是自环那么怎么选都行.反之,环上有两种选择方式(就是一个点会在哪条边上被选).考虑对于两种方式,Alice已经确定必选的数量分别是$c _1 , c _2 $,而Alice现在还可以选的个数是$c $,我们也就是要选取$i $,最大化$\min \{ c _1 + i , c _2 + c - i \} $,显然取$c _1 + i = c _2 + c - i , i = \lfloor \frac { c _2 + c - c _1  } { 2  } \rfloor $,注意如果$i $要对$0 $取$\max $,对$c $取$\min $.</p>
</li>
<li><p>$| E | = | V | - 1 $,此时连通块是一棵树,并且有一个点不会被选择.不妨设$f _i $表示$i $这个点不会被选的方案数,那Alice对于一条边的定向,会让这条边其中一侧的子树的$f $整体$+ 1 $.这个看上去极其熟悉.典中典套路是,考虑两条边选择使得$V _1 , V _2 $分别加了$1 $,如果$V _1 \cap V _2 = \emptyset $,同时取反这两条边的选择,一定不劣.于是选择的边会让加$1 $的点集两两有交.枚举交集中的一个点$x $,则所有边的选择全部确定:每条边都选择深度较低的那个点.仔细考虑此时,Bob的最优选择是啥.如果Bob选择了一个点$y $,那么$f _y $显然是$f _x $减去$x $到$y $的路径上Alice能选的数量加上Alice只有一种选择,并且在这里为反向选择的数量.我们要最大化这个东西,也就是最小化$x $到$y $的路径上Alice能选的数量,其实也就是最小化一棵树的深度,这个是方便dp的.</p>
</li>
</ol>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF235D">https://www.luogu.com.cn/problem/CF235D</a></p>
<p>这个形式看上去极其复杂,考虑简单化一下:我们考虑对当前图选一个分治中心,对答案的贡献是$| G | $,不难发现,这相当于每个点贡献了一次.进一步地,这等价于对于每个点,判断它会在多少个点作为分治重心的时候,仍然在那个点所在的连通块中.</p>
<p>如果原图是树,这等价于对于$u , v $,$u $是$( u , v ) $路径上第一个被删除的点的概率,这等价于$\frac { 1  } { len  } $.这样树的情况就做完了.</p>
<p>考虑基环树怎么做:如果两个点$( u , v ) $之间路径唯一,那上面做的显然还是对的.反之,我们有公式$P ( A \lor B ) = P ( A ) + P ( B ) - P ( A \land B ) $,因此你把这两条路径求出来,加起来,减去它们同时发生的概率即可.注意同时发生的概率不是$P ( A ) P ( B ) $,因为这两件事不独立,事实上应该是这两条路径的点集并的大小分之一.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4429">https://www.luogu.com.cn/problem/P4429</a></p>
<p>如果图不连通可以对于每个块分开考虑,下面只考虑图连通的情况:</p>
<p>显然,如果图不是二分图一定无解.</p>
<p>其次,我们注意到孤立点和一度点一定都可以删去,前者显然,后者是因为与它相邻的那个点的颜色如果确定,那它一定有一种和它选不一样的方法.这样当前所有点的度数$\geq 2 $.</p>
<p>接下来,青鱼说得好,我们把很多比较能看出来有解的情况判掉,剩下的就是无解.</p>
<ol>
<li>偶环一定有解.</li>
</ol>
<p>如果偶环上的颜色全都一样,那直接二分图染色.不然,一定存在相邻的两个点$x , y $使得$x $有一种颜色,$y $没有,直接让$x $染这种颜色,$x - y $这条边就没用了,断掉,然后顺着$x $平推过去,一定有解.</p>
<p>妈的,剩下的不会了,先咕着.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1672G">https://www.luogu.com.cn/problem/CF1672G</a></p>
<p>发现个事情:如果当前所有行和所有列的异或值都是$0 $,那么我们可以每次选取四个点然后点击,这样这四个点会改变,而其它点都不改变,从左上开始一直点相邻的四个点,这样最后左上角的$( n - 1 ) ( m - 1 ) $的矩阵就全空,而由于每行每列$1 $的个数都是偶数,这个过程不改变这个性质,因此最后一定全图是空的.</p>
<p>而由于最后的状态是全空,因此在变化过程中总有一个时刻使得每行每列异或值为$0 $.</p>
<p>考虑异或的过程,如果$n $是偶数,那么这么一次异或会使得除了一列以外的所有列都异或上$1 $.如果$n $是奇数,则会使得全局异或上$1 $.</p>
<p>现在我们来讨论一下$n , m $的奇偶性(对称情况可以反转,不讨论):</p>
<ol>
<li><p>$n , m $均为偶数.只考虑第一行,从第二列开始,如果当前这一列和第一列不一样就把它操作掉.这样最后所有列的异或值都相同.如果最后是全$1 $,我们把第一行轮着点一遍,这样每一列都被点了$m - 1 $次,而行的奇偶性不变.也就是说,此时无论怎么填都是有解的.行再一样做</p>
</li>
<li><p>$n $是奇数,$m $是偶数.此时必须要求所有列的异或值相同.每一行如何做可以(1)一样使得每一行异或值都是$0 $.枚举所有列是$0 $还是是$1 $,留一个?来调整,剩下的?随便选.</p>
</li>
<li><p>都是奇数,此时要求所有行和所有列的奇偶性分别相同.枚举这四种奇偶性情况,然后将$? $看成连在横坐标和纵坐标之间的边.那也就相当于确定了每个点的度数,然后问有多少种选边方式.典中典.对于每个连通块,求出一棵生成树,然后剩下的边随便选,用生成树一路调整上去.注意这要求所有点的度数之和是偶数,也就是至少得是一张合法的图.</p>
</li>
</ol>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/AT_arc117_f">https://www.luogu.com.cn/problem/AT_arc117_f</a></p>
<p>考虑求出前缀和,此时要满足条件,不妨设全局和为$x $,此时必然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\forall 0 & \leq i & < n , s _{ i + n  } - s _i & \geq a _i \\
\forall n & \leq i & < 2 n , x - ( s _{ i  } - s _{ i - n  } ) & \geq a _i , s _i - s _{ i - n  } & \leq x - a _i \\
\forall 0 & \leq i & < 2 n , s _i & \leq s _{ i + 1  } 
\end{aligned}</script><p>注意上面的限制条件限制住了$s _{ i + n  } - s _{ i  } $的上下界,我们不妨设它的上下界分别为$l $和$r $.但是这俩需要知道$x $才能求出来,于是不妨二分$x $.</p>
<p>贪心地构造,考虑每次要求$s _{ i + n  } $尽可能地小,于是如果$l _i \leq s _{ i - 1 + n  } - s _{ i - 1  } \leq r _i $,我们就继承前面的答案.反之,如果$l _i &gt; s _{ i - 1 + n  } - s _{ i - 1  } $,我们就提升$s _{ i + n  } = s _{ i - 1  } + l _i $,$r $同理.这样走到最后一定是最小的,只需要满足$s _{ n - 1  } \leq s _n \land s _{ 2 n - 1  } \leq x $即可.</p>
<p>但是你发现个事情,我们前面一直在保证$s $尽可能小,却没有保证$s _{ n - 1  } \leq s _n $.我们怎么处理这里的$s _n $呢?考虑再次二分,每次找到最小的$s _n $满足前一个条件.那我们就需要说明两件事情:</p>
<ol>
<li><p>满足前一个条件的$s _n $满足单调性.</p>
</li>
<li><p>$s _n $越小,越有可能满足第二个条件.</p>
</li>
</ol>
<p>先来说(2),这个比较显然.因为如果$s _n $在前面较小不满足的话,我们可以在后面某个地方给提升得大一点,显然由于$s _n $的提升比较自由,这个是可以做到的.</p>
<p>再来看(1),如果一个$s _n $满足条件,我们把这个$s _n $增大$1 $.考虑将前面的所有$s _{ 0 \cdots n - 1  } $全部提升$1 $,这样所有的差都不变,因此仍然满足条件.</p>
<p>冷静总结一下这个题,其实就是我们首先要发现很多可二分的性质:</p>
<ol>
<li>$s _{ 2 n  } $可二分.</li>
</ol>
<p>这个是显然的,放更多显然不会更劣.但是我们要在这个基础上找到一种方法,使得如果当前二分的值合法,一定能构造出一组答案.我们发现如果没有$s _{ n  } \geq s _{ n - 1  } $这个限制,一切都是好做的:因为我们可以贪心地使得当前的$s $最小.</p>
<ol>
<li>$s _n $可二分.</li>
</ol>
<p>这个是怎么发现的呢?因为我们发现我们勒令$s _n $是啥,似乎对这个贪心过程没有啥影响.如果$s _n $过小,上面的贪心过程就会在$s _n \geq s _{ n - 1  } $这里判出错.如果$s _n $过大,则会在$s _{ 2 n - 1  } \leq s _{ 2 n  } $上判错.这意味着$s _n $可能需要是一个区间才合法.接下来就是去证明它确实是一个区间是合法的,并且证明我们的贪心过程能在这个贪心过程中正确地check.</p>
<h3><span id="线性代数">线性代数</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P1224">https://www.luogu.com.cn/problem/P1224</a></p>
<p>首先显然的一点是,我们把它搞成一个矩阵$A $,然后拿$A \times A ^T $.注意到如果最后的答案矩阵存在$0 $就有解,这个解就是$B _{ i , j  } = 0 $的那对$( i , j ) $.到这里已经可以猜到,这题不是什么正经题,应该要搞一些随机化东西.</p>
<p>想起来之前那个经典判断$A \times B = C $的题,就是随机几个向量然后乘起来.这个我们想想能不能类似做.</p>
<p>先考虑$k = 2 $,如果$A \times A ^T $是全$1 $矩阵,那么我们随机一个向量去乘它,得到的向量每一位必然都是这个向量所有数字之和.不难发现如果这个向量每一位差别足够大就可以check,这就提供了一个$O ( nd ) $的做法,不过我们实现肯定造不出差别足够大的向量,因此可以多check几次.然后如果第$i $行不满足条件,一定存在一组$( i , j ) $作为答案,枚举$j $即可.</p>
<p>再考虑$k = 3 $,这个有点难搞.实际上是一个牛逼发现:$1 ^2 \equiv 2 ^2 \equiv 1 \pmod { 3  } $.因此我们考虑将$B $矩阵的每一位平方后与一个向量相乘.考虑$\sum _{ j  } B _{ i , j  } ^2 r _j = \sum _{ j  } B _{ i , j  } r _j B ^T _{ j , i  } $,考虑构造矩阵$R $,使得$R _{ i , i  } = r _i , R _{ i , j  } = 0 , i \ne j $,不难发现$( BR ) _{ i , j  } = B _{ i , j  } R _{ j , j  } $,于是$( BRB ^T ) _{ i , i  } = \sum _{ j  } B _{ i , j  } R _{ j , j  } B ^T _{ j , i  } $.接下来我们只要check $BRB ^T $的对角线即可.然后$B ^T = ( AA ^T ) ^T = { A ^T  } ^T A ^T = AA ^T $.于是有:</p>
<script type="math/tex; mode=display">
BRB ^T = AA ^T RAA ^T</script><p>考虑$A $是一个$n \times d $的矩阵,$A ^T $是一个$d \times n $的矩阵.不妨假设我们已经算出了$A ^T RA $,那这里是好算的,因为$( ABC ) _{ i , i  } = \sum _{ j , k  } A _{ i , k  } B _{ k , j  } C _{ j , i  } $,这里可以$O ( nd ^2 ) $地check每一个位置.</p>
<p>那我们现在面临的问题就是如何去求出来$A ^T RA $.注意到$RA $是一个$n \times d $的矩阵,因此如果知道$RA $,$A ^T ( RA ) $是好求的.我们现在需要求出$RA $.由于$R $是对角线矩阵,$( RA ) _{ i , j  } = R _{ i , i  } A _{ i , j  } $,这样就可以$O ( nd ) $求.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6772">https://www.luogu.com.cn/problem/P6772</a></p>
<p>典中典,首先如果是边权的话有个经典dp:设$dp _{ i , x  } $表示当前经过了$i $条边,目前在$x $点的最优答案,自然有转移:</p>
<script type="math/tex; mode=display">
dp _{ i , x  } = \max \{ dp _{ i - 1 , y  } + val _{ y \rightarrow x  } \}</script><p>这是一个经典的$\{ \max , + \} $矩阵,可以矩阵加速.</p>
<p>这个题不是边权,但是点权可以改成入边的边权,只不过起点需要特判.</p>
<p>还有一个问题是边权不是$1 $,拆边的话复杂度太高,考虑拆点,每个点拆成五个,然后只有最后一个点才会连出边,剩下的按照距离出边的距离连到前面的点.</p>
<p>至于美食节,一个想法是直接矩阵加速到那一天,然后把对应的点加上美食节的权值,继续做完每个美食节即可.但这样复杂度是$O ( kN ^3 \log T ) $的.</p>
<p>冷静一下,预处理出矩阵的二的次幂,这样就是$O ( kN ^2 \log T + N ^3 \log T ) $.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6125">https://www.luogu.com.cn/problem/P6125</a></p>
<p>简单题,建ACAM,然后对于每个人求答案.枚举每个人,对于每个点,设$p _i $为以它为起点,最后这个人胜利的概率,做高斯消元即可.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3706">https://www.luogu.com.cn/problem/P3706</a></p>
<p>ps:本题选入笔记:概率与期望-概率生成函数-Example3.</p>
<p>把上面的东西给形式化一下,不妨设$g _i $表示进行了$i $步还未结束的概率,$f _{ k , i  } $为进行了$i $步恰好第$k $个人胜利的概率,$F , G $是它们的生成函数,我们自然有:</p>
<ol>
<li><p>$1 + xG ( x ) = \sum _k F _k ( x ) + G ( x ) $.</p>
</li>
<li><p>$( \frac { 1  } { 2  } x ) ^L G ( x ) = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 0  } ^{ L - 1  } ( \frac { 1  } { 2  } x ) ^i [ A _k ^{ ( L - i )  } = { A _j  } _{ ( L - i )  } ] $.</p>
</li>
</ol>
<p>第一个式子的用处在于带入$x = 1 $,发现$\sum _{ k  } F _k ( 1 ) = 1 $.</p>
<p>把(2)化简一下,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x ^L G ( x ) & = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 0  } ^{ L - 1  } ( \frac { 1  } { 2  } x ) ^{ i - L  } [ A _k ^{ ( L - i )  } & = { A _j  } _{ ( L - i )  } ] \\
x ^L G ( x ) & = \sum _{ j = 1  } ^n F _j ( x ) \sum _{ i = 1  } ^{ L  } ( \frac { 1  } { 2  } x ) ^{ - i  } [ A _k ^{ ( i )  } & = { A _j  } _{ ( i )  } ] 
\end{aligned}</script><p>带入$x = 1 $,有:</p>
<script type="math/tex; mode=display">
G ( 1 ) = \sum _{ j = 1  } ^n F _j ( 1 ) \sum _{ i = 1  } ^{ L  } 2 ^i [ A _k ^{ ( i )  } = { A _j  } _{ ( i )  } ]</script><p>不难发现对于不同的$k $,(2)的右边不同,而左边一定相同,这样就给出了$n $个等式,算上(1)一共有$n + 1 $个等式,可以算出$G ( 1 ) , F _{ 1 \cdots n  } ( 1 ) $这$n + 1 $个未知数.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3292">https://www.luogu.com.cn/problem/P3292</a></p>
<p>首先第一反应是树剖+线段树上合并线性基,轻松做到$O ( q \log ^2 n \log ^2 v ) $.</p>
<p>但是过不太去!注意到$n $要小一点,考虑离线点分治.记录下从分治中心到每个点的线性基,这样只需要做$q $次线性基合并,复杂度是$O ( q \log ^2 v + n \log n \log v ) $.</p>
<p>不过如果你做过CF1100F,那这题就是上个树.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4151">https://www.luogu.com.cn/problem/P4151</a></p>
<p>典中典,注意到一个值异或两遍就会没掉.我们考虑随便求一条$S \rightarrow T $的路径,然后再求出来所有的环上的异或值.我们发现我们可以走到一个简单环上,走一圈再原路返回,这样答案只会异或上简单环的异或值.对这个东西用线性基就行.</p>
<p>至于这个东西的正确性,首先考虑$S \rightarrow T $唯一的情况,这样的话你如果要扩展就必须走环.不然,则$S \rightarrow T $有边在环上,只要溜达一圈就行.</p>
<p>接下来的问题在于找简单环.我们直接dfs,就可以找到一部分环.但是其实是没有找到全部的环的.但是没关系,在dfs的过程中,dfs树不可能有横插边,也就是所有找到的的环不在树上的边一定是反走边.而没有找到的环可能是若干个反走边拼起来的.这必然意味着它可以由那些反走边所代表的环拼起来:原因比较简单,考虑从上往下遍历这个没找到的环,那么每条边一定被经过了两次:下去一次,上来一次.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6178">https://www.luogu.com.cn/problem/P6178</a></p>
<p>板子题</p>
<h4><span id="第八题">第八题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4455">https://www.luogu.com.cn/problem/P4455</a></p>
<p>板子题</p>
<h4><span id="第九题">第九题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4336">https://www.luogu.com.cn/problem/P4336</a></p>
<p>简单题,无脑矩阵树定理+容斥.复杂度$O ( 2 ^n n ^3 ) $.</p>
<h4><span id="第十题">第十题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5807">https://www.luogu.com.cn/problem/P5807</a></p>
<p>板子题</p>
<h4><span id="第十一题">第十一题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF917D">https://www.luogu.com.cn/problem/CF917D</a></p>
<p>一眼二项式反演.不妨设$f _i $表示钦定$i $条边已经选上了的答案.显然:</p>
<script type="math/tex; mode=display">
ans _k = \sum _{ i \geq k  } ( - 1 ) ^{ i - k  } \binom { i  } { k  } f _i</script><p>对于$f _i $,考虑Prufer序列的推论:$k $个大小分别为$s _1 , s _2 , \cdots , s _k $的连通块,任意加边使得连通块成树的方案数是$n ^{ k - 2  } \prod s $.于是考虑dp,不妨设$dp _{ x , i , j  } $表示当前$x $为根的子树内部,当前$x $所在连通块的大小是$i $的方案数,这样可以做到$O ( n ^3 ) $.</p>
<p>看了看题解发现可以做到$O ( n ^2 ) $.简单来说就是考虑$\prod s $的组合意义,是在每个连通块内选一个点的方案数.那我们可以用$f _{ i , j , 0 / 1  } $表示当前$i $子树内选了$j $个点,然后$i $所在连通块内是否选点了的方案数.</p>
<h3><span id="计算几何">计算几何</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P2742">https://www.luogu.com.cn/problem/P2742</a></p>
<p>板子题.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3829">https://www.luogu.com.cn/problem/P3829</a></p>
<p>简单题,注意到圆弧之和一定是一个圆,因此把角上的四个点拿出来做凸包即可.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4196">https://www.luogu.com.cn/problem/P4196</a></p>
<p>板子题.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3256">https://www.luogu.com.cn/problem/P3256</a></p>
<p>板子题.甚至</p>
<h4><span id="第五题第六题第七题">第五题/第六题/第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/P1742">https://www.luogu.com.cn/problem/P1742</a></p>
<p><a href="https://www.luogu.com.cn/problem/P2533">https://www.luogu.com.cn/problem/P2533</a></p>
<p><a href="https://www.luogu.com.cn/problem/P4288">https://www.luogu.com.cn/problem/P4288</a></p>
<p>三个题全是一样的.</p>
<p>大概是这么做的啊,就是说我们增量构造,每次对于前$i $个点的最小覆盖圆,考虑$i + 1 $个点在不在圆上.如果在就忽略,不在的话,那它必然是新圆的一个卡着边的点.考虑再找到另两个卡着边的点,我们暴力枚举这两个点.并且计算出所有的圆,挑选面积最大的那个.事实上,可以直接每次更新圆,直到这个圆包含了前$i + 1 $个点,显然总会遇到,然后之后就不会更新这个圆了.</p>
<p>这个写法导致了复杂度正确.具体来说,考虑一个点成为卡着圆边界的点的概率是$\frac { 3  } { n  } $,这三层循环的调用次数分别是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T _3 ( n ) & = O ( n ) \\
T _2 ( n ) & = O ( n ) + \sum _{ i = 1  } ^n \frac { 3  } { i  } T _3 ( i ) \\
T _1 ( n ) & = O ( n ) + \sum _{ i = 1  } ^n \frac { 3  } { i  } T _2 ( n ) 
\end{aligned}</script><p>显然$T _1 ( n ) = O ( n ) $.</p>
<h4><span id="第九题">第九题</span></h4><p><a href="https://www.luogu.com.cn/problem/P2287">https://www.luogu.com.cn/problem/P2287</a></p>
<p>枚举三个点,然后判断这三个点所在平面是否是三维凸包的一个面.注意四点共面就完蛋了,因此每个点加上一个随机扰动量.这个量首先得在eps范围内显著体现出来,其次还不能对答案影响太大.这个题是直接给了一个小于$10 ^{ - 10  } $的扰动量,然后因为没有判相等操作,直接用了c++的浮点数比较.</p>
<h4><span id="第十题">第十题</span></h4><p><a href="https://www.luogu.com.cn/problem/P1452">https://www.luogu.com.cn/problem/P1452</a></p>
<p>板子题.</p>
<h4><span id="第十一题">第十一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6247">https://www.luogu.com.cn/problem/P6247</a></p>
<p>板子题.</p>
<h4><span id="第十二题">第十二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3187">https://www.luogu.com.cn/problem/P3187</a></p>
<p>旋转卡壳的时候维护三个边界就行.</p>
<h3><span id="网络流建图">网络流建图</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF103E">https://www.luogu.com.cn/problem/CF103E</a></p>
<p>Hall引理的时候做过.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF311E">https://www.luogu.com.cn/problem/CF311E</a></p>
<p>发现变$0 $变$1 $这个操作可逆,不妨先把所有位置都变成$1 $.</p>
<p>接下来考虑把若干个$1 $变成$0 $.不难发现:一个全$0 $的要求合法$\Rightarrow $所有包含位置都是$0 $\Leftrightarrow$所 有 包 含 位 置 都 不 是 $1$\Rightarrow $包含这些的全$1 $要求不合法.这是一个最大权闭合子图问题.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF884F">https://www.luogu.com.cn/problem/CF884F</a></p>
<p>直接费用流,考虑左边每个点是字母,然后连到右边的点上,拆一下点保证对应的位置不会有相同字母.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF802C">https://www.luogu.com.cn/problem/CF802C</a></p>
<p>牛逼题,考虑我们不好搞这个丢弃的东西,因为你也不知道你留下来的是谁.因此我们考虑如果一本书不在当天丢弃,那就一定会对下本书产生贡献,我们把它当成将书卖出.</p>
<p>也就是说,考虑将每一天建点,上面这个过程保证了我们每一天的书都会买,这就保证了最大流量.</p>
<p>将每一天建点并以流量为$k - 1 $的边相连(因为下一天必须买书),然后如果这本书要留着,就在前一天卖掉.</p>
<p>但是这样需要保证,我们卖书的时候必定在前面没有丢弃这本书,拆点维护,用一个点同时维护当天丢弃和卖书两种操作即可.</p>
<p>点数是$2 n $的,边数有拆点的$n $条,连接相邻两天的$n $条,卖出的和丢弃的共$2 n $条,这样总共是$4 n $条边.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF786E">https://www.luogu.com.cn/problem/CF786E</a></p>
<p>一眼最小割,然后线段树+树剖优化建图.注意这样是$O ( n \log ^2 n ) $的建图,我们把树剖跳topn的过程建一个点,这样就是$O ( n \log n ) $的建图.</p>
<p>考虑点数,原图有$n $个点,线段树是$2 n $个点,树剖只会贡献$n $个点,点数是$4 n $的.</p>
<p>考虑边数,注意到一个点会连$2 \log n $条边到树剖上,在最后一下会连$\log n $个点到线段树上,因此总边数是$2 n + 3 m \log n \leq 10 ^6 $,但是显然远远跑不满.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1139E">https://www.luogu.com.cn/problem/CF1139E</a></p>
<p>第一反应是二分答案,然后拿网络流二分图匹配check,这样复杂度是$O ( n ^2 \sqrt { n  } \log n ) $的.</p>
<p>事实上注意删人后答案只减不增,因此复杂度$O ( n ^2 \sqrt { n  } ) $.</p>
<p>但是这样过不去,考虑把删除改成增加,这样就可以在残留网络上跑,然后就能过了.</p>
<h4><span id="第七题">第七题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1061E">https://www.luogu.com.cn/problem/CF1061E</a></p>
<p>考虑每个问题,其实是形如要保证子树内有一定数量的点不能选.也就是这个限制要和修建港口抢城市.</p>
<p>但是不同的限制可能限制了同一城市,我们发现深度更浅的那个限制数量可以减去深度较深的限制数量,毕竟较深的满足较浅的也就满足了.</p>
<p>但是这个思路建图好像有点不太对.因为两个树的港口是通用的,那考虑让一个限制是入,另一个限制是出.换句话说,让一个限制被源点流,另一个限制流向汇点,中间是树节点,源点连出去的边有一个权值,跑费用流.</p>
<p>注意到每个点只会被连一次,因此边数大概是$2 n $级别,点数是$3 n $级别.</p>
<p>总之这种网络流题,主要还是要考虑谁连着源点,谁连着汇点.这个题我一开始以为是限制连源点,然后城市连汇点,发现做不了,那就两种限制分别连源点和汇点.</p>
<h3><span id="交互题练习">交互题练习</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5875">https://www.luogu.com.cn/problem/P5875</a></p>
<p>这是广义串并联图嘛?好像显然不是.</p>
<p>但是仍然有性质,如果没有点权的话,注意到(1)一定会选新加入的点,(3)也一定会选新加入的点,(2)则一定要么两者都选要么都不选.</p>
<p>现在有点权,考虑把新加入的点删了,不妨设新加入的点为$i $,主持人为$x $,自然有:</p>
<ol>
<li><p>$a _i \rightarrow ans , a _x : = \max \{ 0 , a _x - a _i \} $.</p>
</li>
<li><p>$a _x : = a _x + a _i $.</p>
</li>
<li><p>$a _x : = \max \{ a _x , a _i \} $.</p>
</li>
</ol>
<p>不难发现每一步操作做完后,答案都不会改变.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3641">https://www.luogu.com.cn/problem/P3641</a></p>
<p>牛逼题.</p>
<p>考虑答案最小是什么,根据鸽笼原理,显然是$B = \lceil \frac { a _n - a _1  } { n - 1  } \rceil $.</p>
<p>所以我们按照值域每$B $长度分块,然后考虑答案不可能出现在块内,也就是块内的点对不可能贡献答案,答案只有可能由上一个数字(也就是上一个查询到的$mx $)和当前块的$mn $贡献.这样一开始的贡献是$n + 1 $,中间问了$n - 1 $次,总共涉及到了$n - 2 $个数字,这样就做完了.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P3777">https://www.luogu.com.cn/problem/P3777</a></p>
<h5><span id="sub1">Sub1</span></h5><p>minValue是好求的,我们考虑选取$\{ 1 , 0 , \cdots , 0 \} $,这样的话对手必然放弃一个,被放弃的那个就是最小的.</p>
<h5><span id="sub2">Sub2</span></h5><p>一个显然的想法是,如果我们一开始全选$1 $,那么对手一定会选取$[ 51 , 100 ] $中的所有数字.</p>
<p>然后呢?我们接下来考虑继续在$[ 51 , 100 ] $这些数字中找到最大的.我们肯定要让它们全选$2 $,这样对方可能会放弃一些这个区间中较小的数字,然后去选取$[ 1 , 50 ] $中较大的一些.持续这个过程,发现正好需要四次操作.</p>
<h5><span id="sub3">Sub3</span></h5><p>考虑结合sub1和sub2,我们不妨询问$\{ x , x , 0 , 0 , \cdots \} $,这样直觉上总是存在一个$x $使得前两个数字有一个被放弃.</p>
<p>事实上也确实.考虑前两个数字中较小的那一个,设为$v $,当$\sum _{ i = x  } ^{ 2 x  } i = \frac { 3 x ( x + 1 )  } { 2  } \geq v $的时候,显然它就会被放弃,对于这个最小的$x $,会发现两个数字中较大的那个(设为$w ) $一定不会被放弃,因为如果它被放弃了,一定是因为$w \leq x - 1 $,而我们知道$\frac { ( 3 x - 3 ) x  } { 2  } &lt; v &lt; w \leq x - 1 $,又因为$x \geq 1 $,因此显然不成立.</p>
<p>二分这个$x $,由于$v _{ \max  } = 99 $,发现$x \in [ 1 , 8 ] $,直接二分需要四次.</p>
<p>然后有个牛逼做法是,考虑每个$x $能控制一个区间的$v $,发现$x = 7 $的那个区间全部被覆盖了两次,因此不用选取$x = 7 $.</p>
<h5><span id="sub4">Sub4</span></h5><p>这个简单,不难发现只需要在$B _i = B _j = 100 $,那么对手就必然需要在这两者中选一个留下来,这样我们就可以比较任意两个位置的大小,使用stable_sort即可.</p>
<h5><span id="sub5">Sub5</span></h5><p>一种想法是sub4+sub3,但过不去.</p>
<p>冷静思考,注意到sub2,我们其实是知道了某些位置在哪个权值区间的.对着这个分治下去,这样实现了划分区间的功能,按理说应该是会有$2 n - 1 $个节点.</p>
<p>冷静一下,$l = r $的叶子节点是不用计算的,因此刚好玩了$n - 1 $次.</p>
<p>现在唯一的问题是,我们怎么找到一个$w $,使得这个区间内我都选$w $后,然后这个区间一定会被划分呢?考虑$sub 3 $告诉我们如果$r - l + 1 \leq 12 $一定有解,考虑$( r , 100 ] $的数字肯定要被选,那对方只剩下$r $个石子,不妨直接令$w = \lfloor \frac { r  } { r - l + 1  } \rfloor + 1 $,注意到这个区间一定选不满.并且由于$r - l + 1 &gt; 12 $,因此你会发现前面即使全选了也有剩余.</p>
<p>实际的写法选择了直接枚举$w $,然后判断是否合法.</p>
<h4><span id="第四题">第四题</span></h4><p><a href="https://www.luogu.com.cn/problem/P4373">https://www.luogu.com.cn/problem/P4373</a></p>
<p>这怎么做!考虑分块.(这谁想得到啊)</p>
<p>不妨设$f _i $表示$[ i , i + k - 1 ] $的最小值,我们先求出来$f _{ 0  } , f _{ B  } , f _{ 2 B  } , \cdots $的值.这个怎么求呢?考虑一个值什么时候有用:如果它比队列末尾优秀肯定有用,不然只有它是$B $的倍数,它才有可能有用.我们只去维护这两种情况,就可以做到$O ( \sqrt { n  } ) $的空间.</p>
<p>然后考虑剩下的$( iB , ( i + 1 ) B ) $这些答案怎么求.不难发现这些的$f $一定大于等于$f _{ iB  } $并且小于等于$f _{ ( i + 1 ) B  } $.如果直接对这个做单调队列空间还是不足,但我们发现做单调队列的时候,会被弹出的只有$[ f _{ iB  } , ( i + 1 ) B ) $这些数字,剩下的只要右端点卡到它,就一定不会被弹出.因此只需要对前面这个东西做单调队列,直到做到$f _{ ( i + 1 ) B  } $出现,那我们就停下来,把前面该输出的答案全部输出.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5473">https://www.luogu.com.cn/problem/P5473</a></p>
<p>考虑异或能实现的是判断奇偶性,具体来说,我们很容易判断一个点到一个集合内部点的奇偶性.考虑这样其实已经能$O ( n ) $找到一个点了:我们每修改一个前缀,然后check所有不在这个前缀内的点,这样就可以知道它俩是有边的.</p>
<p>这个过程能不能二分呢?好像不能,那我们随机化.</p>
<p>换句话说,我们random_shuffle一下序列,然后分治,每次把左侧的点全部点亮,然后看右侧的点有没有发生变化.如果发生了,则说明左侧的点到右侧的点的边的数量是奇数,递归下去处理,就可以至少连一条边,把这条边删了继续做.</p>
<p>然后发现这么写有个$L _c = 0 $的$B $包过不去啊,那个包可以考虑我们对于一个点$x $,二分$[ 0 , x - 1 ] $中谁是它的父亲.不难发现如果把$[ 0 , k ] $这个前缀全部modify掉,并且它父亲在里面,那它当前状态一定是$1 $.用整体二分解决这个问题.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/P6541">https://www.luogu.com.cn/problem/P6541</a></p>
<p>考虑动态点分树.每次找到一对点$x , y $,$x $已知,$y $未知,然后explore(x,y).如果得到的是未知的点,那就不断操作直到得到$y $.</p>
<p>反之,考虑得到了$z $,由于$z $已知,因此$z $在我们的点分树上.不妨从$z $暴力向上跳到$x $,这样就可以知道$y $在$x $的哪个方向,往那个方向的点分树儿子走一步即可.</p>
<p>至于动态点分树怎么做,替罪羊重构即可.</p>
<p>至于链,我们每次随机一个没有搞定的点,走过去即可.期望的错误次数是$O ( \log n ) $的.</p>
<h3><span id="模拟退火">模拟退火</span></h3><h4><span id="第一题">第一题</span></h4><p><a href="https://www.luogu.com.cn/problem/P2503">https://www.luogu.com.cn/problem/P2503</a></p>
<p>考虑如果要求有序划分,可以直接写一个dp.</p>
<p>因此我们考虑每次交换几个位置,然后当成有序的跑dp,用这个来模拟退火.</p>
<h4><span id="第二题">第二题</span></h4><p><a href="https://www.luogu.com.cn/problem/P2538">https://www.luogu.com.cn/problem/P2538</a></p>
<p>随机交换两个城市的状态即可.如果为了复杂度更好一点可以要求交换的城市状态必然不同.</p>
<h4><span id="第三题">第三题</span></h4><p><a href="https://www.luogu.com.cn/problem/P5544">https://www.luogu.com.cn/problem/P5544</a></p>
<p>这题退火退半天退不出来,但是爬山直接过了.</p>
<p>这是为啥呢?原因在于,这题我们既然要对坐标进行跳跃,很有可能大部分坐标的答案都是$0 $.这就必然导致了我们一开始可能跳到了很远的地方,但是由于一直是$0 $,因此不断地跳过去.很难蚌.</p>
<p>而爬山不会有这种问题.</p>
<p>有没有什么改良的方式?一种是改变估价函数,通过精细实现估价函数导致其估价为连续实数函数,这样退火的效果就会好很多.</p>
<p>总的来说,退火失败的地方在于它一开始跳跃得太远了.而由于前几次操作我们跳出去的概率很大,因此极难得到答案.对于这种跳跃性不确定的题,反而你发现爬山不会拘束于局部最优解,而是会跳出去的.这也就是爬山在这题表现极其良好的原因.</p>
<p>有没有什么更优秀的方式呢?我们考虑先爬几次山,爬到一个好地方,然后以这个位置开始退火往旁边跳.</p>
<h4><span id="第五题">第五题</span></h4><p><a href="https://www.luogu.com.cn/problem/P7218">https://www.luogu.com.cn/problem/P7218</a></p>
<p>考虑一个显然的贪心是,直接枚举每个$W $,能放就放.</p>
<p>考虑把一开始所有能放的$W $全拿出来作为一个操作序列,然后用模拟退火打乱.</p>
<h4><span id="第六题">第六题</span></h4><p><a href="https://www.luogu.com.cn/problem/CF1105E">https://www.luogu.com.cn/problem/CF1105E</a></p>
<p>不妨考虑满足某个人要求,就一定要在一段时间内全是它的id.也就是说如果两个人都抢了一段时间,那这两个人不能同时选择.</p>
<p>这也就是一个最大团问题,模拟退火解决一下.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>范畴论初步</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E8%8C%83%E7%95%B4%E8%AE%BA%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="基础集合论">基础集合论</span></h2><h3><span id="映射">映射</span></h3><p>设$A , B $为两个集合,$\varphi $称为从$A $到$B $的一个<strong>映射</strong>,如果对于任意$a \in A $,$\exists b \in B , b = \varphi ( a ) $.此时$b $称为$a $在$\varphi $下的像,$a $称为$b $在$\varphi $下的原像或反像.一般地,这个定义可以拓展到$S \subseteq A $,$\varphi ( S ) = \{ \varphi ( a ) \mid a \in S \} $,定义$\varphi ^{ - 1  } ( T ) = \{ a | \varphi ( a ) \in T , a \in S \} $.</p>
<p>如果$\forall a _1 , a _2 \in A , a _1 \ne a _2 , \varphi ( a _1 ) \ne \varphi ( a _2 ) $,称$\varphi $是<strong>单射</strong>.</p>
<p>如果$\forall b \in B , \exists a \in A , \varphi ( a ) = b $.称$\varphi $为<strong>满射</strong>.</p>
<p>如果$\varphi $既是单射又是满射,称其为<strong>双射</strong>或<strong>一一映射</strong>.</p>
<p>如果$A = B $,我们又称$\varphi $为一个<strong>变换</strong>.</p>
<p>设$f : A \rightarrow B , g : B \rightarrow A $,那么:</p>
<ol>
<li><p>如果$g \circ f = id _A $,称$g $是$f $的一个<strong>左逆</strong>,不难发现$f $存在左逆当且仅当$f $是单射.</p>
</li>
<li><p>如果$f \circ g = id _B $,称$g $是$f $的一个<strong>右逆</strong>,不难发现$f $存在右逆当且仅当$f $是满射.</p>
</li>
<li><p>如果$g $既是$f $的左逆又是$f $的右逆,则称$g $为$f $的<strong>逆</strong>,不难发现$f $存在逆当且仅当$f $是双射,并且逆唯一.</p>
</li>
</ol>
<h3><span id="二元运算与二元关系">二元运算与二元关系</span></h3><p>集合$A , B $的<strong>笛卡尔积</strong>或<strong>直积</strong>是指$A $的元素与$B $的元素构成的有序对的集合,即$A \times B = \{ ( a , b ) \mid a \in A , b \in B \} $.可以推广到多元对.</p>
<p>集合$A $上的一个<strong>二元运算</strong>是由$A \times A $到$A $的一个映射.对于定义在$U $上的一个二元运算,不妨用$+ $来表示,集合$A , B \subseteq U $的<strong>闵可夫斯基和</strong>定义为$A + B = \{ a + b \mid a \in A , b \in B \} $.OI中常见的如取背包等算法,其实就是在做闵和后去除或合并若干点.</p>
<p>集合$A $上的一个<strong>二元关系</strong>$R $定义为$A \times A $的一个子集(可以理解为满足二元关系的解集),如果$( a _1 , a _2 ) \in R $,就称$a _1 , a _2 $有关系$R $,记作$a _1 Ra _2 $,注意这里有序.</p>
<p>如果$R $满足以下三个性质:</p>
<ol>
<li><p>反身性:$\forall a \in A , aRa $.</p>
</li>
<li><p>对称性:$a _1 Ra _2 \Leftrightarrow a _2 Ra _1 $.</p>
</li>
<li><p>传递性:$a _1 Ra _2 , a _2 Ra _3 \Leftrightarrow a _1 Ra _3 $.</p>
</li>
</ol>
<p>则称$R $是一个<strong>等价关系</strong>,不难发现满足等价关系的元素构成了若干个集合,称作<strong>等价类</strong>.等价关系通常记作$\sim $.</p>
<p>如果将等价关系的(2)改作:</p>
<ol>
<li>反对称性:$a _1 Ra _2 , a _2 Ra _1 \Leftrightarrow a _1 = a _2 $.</li>
</ol>
<p>则称$R $是一个<strong>偏序关系</strong>,具有某种偏序关系的集合称为<strong>偏序集</strong>,如果任意两个元素都存在偏序关系,称作<strong>全序集</strong>.如果一个全序集的任意一个子集存在最小元,则称其为<strong>良序集</strong>.</p>
<p>偏序关系通常记作$\leq $.</p>
<h4><span id="保序映射">保序映射</span></h4><p>对于映射$f : A \rightarrow B $,如果$\forall a , a ‘ \in A , a \leq a ‘ \Rightarrow f ( a ) \leq f ( a ‘ ) $,则称其为保序的.</p>
<h4><span id="dilworth定理">Dilworth定理</span></h4><p>对于偏序集$( A , R ) $来说,定义:</p>
<ol>
<li><p>链:$A ‘ \subseteq A , \forall x , y \in A ‘ , [ xRy \lor yRx ] = 1 $.</p>
</li>
<li><p>反链:$A ‘ \subseteq A , \forall x , y \in A ‘ , [ xRy \lor yRx ] = 0 $.</p>
</li>
<li><p>链覆盖:挑出最少数量的链,使得其可重复覆盖了所有点.</p>
</li>
</ol>
<p>Dilworth定理是说:一个偏序集的最长反链等于最小链覆盖.</p>
<p>考虑数学归纳,$| A | \leq 3 $显然成立.</p>
<p>当$| A | &gt; 3 $时,如果存在一个点和其它任何点都没有偏序关系,那显然把它删掉就可以数学归纳.</p>
<p>反之,设其最长反链数为$d $,下面证明其最小链覆盖也是$d $.</p>
<p>考虑取一条尽可能长的链$A ‘ $,设其中最大的为$M $,最小的为$m $(如果有多个就任取一个).</p>
<p>考虑$T = A \setminus A ‘ $,如果$T $中的最长反链数小于$d $,则数学归纳成立.</p>
<p>反之,则一定可以取出一个反链$S $,使得$S \cap A ‘ = \emptyset $.考虑设$A ^{ +  } = \{ x | x \in A \land \exists s \in S , sRx \} $,$A ^{ -  } = \{ x | x \in A \land \exists s \in S , xRs \} $.不难发现$m $一定不在$| A ^{ +  } | $中,不然取出的那条链$A ‘ $可以更长.同理$M $一定不在$| A ^{ -  } | $中,也即$| A ^+ | , | A ^- | &lt; | A | $.</p>
<p>我们又发现$A ^+ \cup A ^- = A $,原因是如果一个点不在这两个集合中,一定可以添加到最长反链中.</p>
<p>我们还发现由于偏序关系的反身性,$S \subseteq A ^{ +  } \cap A ^{ -  } $.</p>
<p>由数学归纳,$A ^+ $和$A ^- $中的最小链覆盖均为$d $,并且一个以$S $中元素开头,一个以$S $中元素结尾,我们把它俩拼起来就是一个大小为$d $的新的大小为$d $的链覆盖.而且显然不会有更优的结果了.</p>
<h4><span id="商集">商集</span></h4><p>考虑定义一种等价关系$\sim $,我们可以在此基础上定义商集$A / \sim = \{ [ a ] | a \in A \} $,其中$[ a ] $是$a $所在的等价类.</p>
<p>商群有一个很漂亮的应用是,通过$\mathbb { N  } $来定义$\mathbb { Z  } $.(默认加法和乘法都存在幺元,结合律,消去律,交换律,分配律)</p>
<p>这个是怎么做呢?考虑定义一种等价关系$\sim $,$( n , m ) \sim ( n ‘ , m ‘ ) $当且仅当$n + m ‘ = m + n ‘ $.虽然我们手上没有加法逆元和乘法逆元,但我们有加法和乘法的消去律,这样可以验证该等价关系满足反身性,传递性,对称性.</p>
<p>然后我们将$\mathbb { N  } / \sim $定义为整数,更确切地,对于任意一组$( n , m ) $其代表的就是$n - m $这个整数.</p>
<p>容易定义加法:$( n , m ) + ( n ‘ , m ‘ ) = ( n + n ‘ , m + m ‘ ) $,乘法$( n , m ) \times ( n ‘ , m ‘ ) = ( mm ‘ + nn ‘ , mn ‘ + m ‘ n ) $.也可以定义大小关系$( n , m ) \leq ( n ‘ , m ‘ ) \Leftrightarrow n + m ‘ \leq m + n ‘ $.</p>
<p>不过由于我们定义的是等价类,所以还要证明这样的定义是良定义的,这个是容易验证的.</p>
<p>还有相反数,定义$- ( n , m ) = ( m , n ) $即可,容易验证二者之和处于$( 0 , 0 ) $这个等价类,也容易验证相反数唯一.</p>
<p>同理可以用$\mathbb { Z  } $构造$\mathbb { Q  } $,构造二元组$\mathbb { Z  } \times \mathbb { N  } _+ $,定义$( r , s ) \sim ( r ‘ , s ‘ ) \Leftrightarrow rs ‘ = r ‘ s $,容易验证其满足等价关系的性质.实际上其对应的就是$\frac { r  } { s  } $这个有理数,对着构造四则运算即可.</p>
<h3><span id="zfc公理体系">ZFC公理体系</span></h3><h4><span id="外延公理">外延公理</span></h4><p>$A = B \Leftrightarrow ( A \subset B ) \land ( B \subset A ) $.</p>
<h4><span id="配对公理">配对公理</span></h4><p>对于任意元素$a , b $,存在集合$\{ a , b \} $.特别地,当$a = b $的时候存在集合$\{ a \} $.</p>
<p>值得一提的是可以将数对$( a , b ) $定义为$\{ \{ a \} , \{ a , b \} \} $,下面的幂集公理说明了数对属于$2 ^{ 2 ^{ A \cup B  }  } , a \in A , b \in B $.</p>
<h4><span id="分离公理模式">分离公理(模式)</span></h4><p>对于一个集合$A $,和一个性质$P $,若$\alpha $满足性质$P $则称$P ( \alpha ) $.那么存在集合:</p>
<script type="math/tex; mode=display">
\{ x | x \in A \land P ( x ) \}</script><p>注意全体集合并不构成集合(ZFC公理体系不提供一种方式生成全体集合的集合),因此分离公理避免了罗素悖论.</p>
<p>之所以称为模式,是因为其对于每个性质$P $都构造了相应的公理.</p>
<h4><span id="并集公理">并集公理</span></h4><p>允许将集合取并.</p>
<h4><span id="幂集公理">幂集公理</span></h4><p>一个集合的所有子集构成一个新的集合(可以记作$2 ^A $).</p>
<h4><span id="无穷公理">无穷公理</span></h4><p>称满足以下性质的集合为归纳集:</p>
<ol>
<li><p>$\emptyset \in A $.</p>
</li>
<li><p>若$\alpha \in A $,则$\{ \alpha \} \cup \alpha \in A $.</p>
</li>
</ol>
<p>则归纳集存在.</p>
<h4><span id="替换公理模式">替换公理(模式)</span></h4><p>对于集合$A $和一种定义在集合$A $上的映射$F $,存在集合$A ‘ $使得$x \in A ‘ \Leftrightarrow x = F ( a ) , a \in A $.</p>
<p>用替换公理可以证明映射也是一种集合,并且从$A \rightarrow B $的所有映射可以构成集合,可以记作$B ^A $.</p>
<h4><span id="正则公理">正则公理</span></h4><p>对任何非空集合$A $,存在$a \in A $使得$\forall a ‘ \in A $,$a ‘ \notin a $,也就是$a \cap A = \emptyset $.</p>
<h4><span id="选择公理">选择公理</span></h4><p>说对于任何一族非空集$A $,总能从其中的每个集合$a $选出一个元素.</p>
<p>选择公理独立于其它的集合公理,一些数学家好像还不愿意承认选择公理.</p>
<p>选择公理等价于另外两个命题:Zorn引理和良序定理.</p>
<h5><span id="zorn引理">Zorn引理</span></h5><p>如果$X $上的一个偏序关系$\leq $,满足其每条链$A $都存在上界($\exists x \in X , \forall a \in A , x \geq a $),那么$X $存在极大元$( \exists x \in X , \forall a \in X , a \geq x \Rightarrow a = x ) $.</p>
<p>Zorn引理可以证明选择公理,简单来说就是定义偏序关系$( A ‘ ‘ , g ‘ ‘ ) \leq ( A ‘ , g ‘ ) $当且仅当$A ‘ ‘ \subseteq A ‘ $并且$\forall x \in A ‘ ‘ , g ‘ ‘ ( x ) = g ‘ ( x ) $.这样拿出来的极大元就是我们需要的$A \rightarrow g ( A ) $.</p>
<h5><span id="良序定理">良序定理</span></h5><p>所有的集合都可以被良序排列,或者说都存在一种偏序,使得其任意子集都是良序集.</p>
<p>良序定理的证明要用的Zorn引理,即考虑所有的二元对$( S , R ) $组成的集合,其中满足$S $对于偏序关系$R $来说是良序的,我们定义两个二元对$a , b $满足$a \leq b $当且仅当它们的$R $相等并且$S _a \subseteq S _b $.现在取出一个全序的子集并找到其中最大的集合(也就是其它所有集合的并)$( S , R ) $,注意到如果$S $是全集则证毕,如果不是,则取一个全集中不在$S $的元素$x $接到$S $的后面得到了一个更大的集合,这就产生了矛盾,具体细节过程可以参考下面关于集合基数的全序性的证明.</p>
<p>良序定理可以证明选择公理,因为只需每个集合选最小的元素再用替换公理模式换掉就行了.</p>
<h3><span id="集合的基数">集合的基数</span></h3><p>如果存在单射$\varphi : A \rightarrow B $,则称$| A | \leq | B | $.如果存在双射,则称$| A | = | B | $.</p>
<p>如果使用选择公理的话,可以说明如果存在满射$\varphi : A \rightarrow B $,则称$| A | \geq | B | $.</p>
<p>值得一提的是这种偏序关系是全序的,这个怎么证明呢?</p>
<p>考虑现在有$A , B $两个集合,接下来我们证明一定存在一个从$A $到$B $的映射,且其要么为单射要么为满射.</p>
<p>我们记$X $为所有$A $的子集到$B $的单射组成的集合,并且我们定义这样一种偏序关系:若$f : A _f \rightarrow B , g : A _g \rightarrow B , A _f \subseteq A _g , \forall a \in A _f , f ( a ) = g ( a ) $.</p>
<p>这样的话,我们不妨取出$X $的一个全序的子集$I $,显然其存在上界.</p>
<p>根据Zorn引理,$X $存在极大元$g : A _g \rightarrow B $,此时我们开始讨论:</p>
<p>如果$A _g = A $,那么找到了一个单射$g : A \rightarrow B $.</p>
<p>反之,如果$A _g \subsetneq A $,考虑如果$g ( A _g ) = B $,也就是找到了一个满射;反之,考虑取$a ‘ \in A \setminus A _g , b ‘ \in B \setminus g ( A _g ) $,在$g $的基础上加上映射$a ‘ \mapsto b ‘ $,这是一个比$g $还要大的元,不符合Zorn引理.</p>
<h4><span id="cantor-bernstein定理">Cantor-Bernstein定理</span></h4><p>如果$| A | \leq | B | \land | B | \leq | A | $,则$| A | = | B | $.</p>
<p>不妨设$f : A \rightarrow B , g : B \rightarrow A $我们考虑一个感性的做法:考虑将这个东西画成二分图,然后要找它的完美匹配.我们不妨先把不同的连通块拆开,你会发现大部分的图都可以用$f , f ^{ - 1  } $来构造双射,只有一种除外:那就是以一个$B $中节点开始不断延伸的无限的,我们在这里使用$g , g ^{ - 1  } $来构造即可.</p>
<p>如果要把上面的东西写成形式化的东西,我们可以这么写:取$C _0 = B \setminus f ( A ) $,$C _n = f ( g ( C _{ n - 1  } ) ) $,那么对于$C = \cup _{ n \geq 0  } C _n $,使用$g , g ^{ - 1  } $构造双射,剩下的使用$f , f ^{ - 1  } $构造双射.</p>
<h4><span id="可数无穷与不可数无穷">可数无穷与不可数无穷</span></h4><p>我们称集合$A $是<strong>可数</strong>的,当且仅当$| A | = | \mathbb { N  } | $.</p>
<p>我们可以发现可数个可数集合的并一定可数,因为你可以把这些位置全排列起来然后绕着数.</p>
<p>这样就可以发现,首先整系数多项式方程有可数个,因此整系数多项式方程的根也有可数个,我们将这些数称作代数数,其它实数称为超越数.</p>
<p>这又有一个结论是说,代数数对四则运算构成域.</p>
<p>首先一个代数数的加法逆元和乘法逆元(只要不是$0 $)肯定一定是代数数,你只需要对着原方程改一改就可以构造出新方程.</p>
<p>幺元肯定也是存在的,因为$1 $和$0 $显然都是代数数.</p>
<p>我们接下来看两个代数数$x , y $.考虑如何构造$x + y $作为根的方程.</p>
<p>下面是qyc老师给的做法,直接考虑有方程:</p>
<script type="math/tex; mode=display">
\begin{aligned}
X & = \sum _{ k = 0  } ^n a _k x ^k & = 0 \\
Y & = \sum _{ k = 0  } ^m b _k y ^k & = 0 
\end{aligned}</script><p>对于加法,考虑:$( x + y ) ^0 , ( x + y ) ^1 , \cdots $,这些东西,先把它们对$X $取膜再对$Y $取膜,得到的一定是$nm $维的,只需要取$nm + 1 $个就会出现线性相关.乘法同理考虑$( xy ) ^0 , ( xy ) ^1 , \cdots $即可.</p>
<p>值得一提的是,$| \mathbb { R  } | = 2 ^{ | \mathbb { N  } |  } $.这个是怎么构造的呢?只需要证明$[ 0 , 1 ] $上的实数和自然数集合能一一对应就可以了对吧,考虑将这些实数写成二进制下的形式,然后如果$k $在取出的自然数子集中,那么小数点后第$k + 1 $位为$1 $否则为$0 $,这样就构造了一组映射.</p>
<p>不过其实这样做有一点小问题,那就是$0 . 1 = 0 . 0111 \cdots $,但这两个数字对应的集合并不相等.然而会出问题的点的个数是可数无穷个,因此其实差一下也没什么问题.如果或者可以反复来一下证明$| \mathbb { R  } | \leq 2 ^{ | \mathbb { N  } |  } $并且$| \mathbb { R  } | \geq 2 ^{ | \mathbb { N  } |  } $,用上面的构造就行.</p>
<h2><span id="简单范畴论">简单范畴论</span></h2><h3><span id="范畴">范畴</span></h3><p>一个<strong>范畴</strong>$\mathcal { C  } $应当包含以下:</p>
<ol>
<li><p>一个类$\rm { Ob  } ( \mathcal { C  } ) $,其元素称作$\mathcal { C  } $的<strong>对象</strong>.</p>
</li>
<li><p>对于$X , Y \in \rm { Ob  } ( \mathcal { C  } ) $指定一个集合$\text { Hom  } _{ \mathcal { C  }  } ( X , Y ) $,称作$\mathcal { C  } $中从$X $到$Y $的<strong>态射</strong>.</p>
</li>
</ol>
<p>对于态射来说,其还应当具有以下特点:</p>
<ol>
<li><p>对于$X \in \text { Ob  } ( \mathcal { C  } ) $存在其到自身的<strong>恒等态射</strong>$\text { id  } _X \in \text { Hom  } _{ \mathcal { C  }  } ( X , X ) $.</p>
</li>
<li><p>态射间可以进行合成,换言之存在<strong>合成映射</strong>$\circ : \text { Hom  } _{ \mathcal { C  }  } ( Y , Z ) \times \text { Hom  } _{ \mathcal { C  }  } ( X , Y ) \to \text { Hom  } _{ \mathcal { C  }  } ( X , Z ) , ( g , f ) \mapsto g \circ f $.</p>
</li>
</ol>
<p>另外,合成映射还应当满足:</p>
<ol>
<li><p><strong>结合律</strong>:对于$\mathcal { C  } $中的态射$h , g , f $,如果合成有意义,那么$h ( gf ) = ( hg ) f $.</p>
</li>
<li><p><strong>单位元</strong>:对于$f \in \text { Hom  } _{ \mathcal { C  }  } ( X , Y ) $,$f \circ \text { id  } _X = f = \text { id  } _Y \circ f $.</p>
</li>
</ol>
<p>由上得知恒等态射的唯一性,因为如果存在两种恒等态射,必定有$\text { id  } _X = \text { id  } _X \text { id ‘  } _X = \text { id ‘  } _X $.</p>
<p>在此基础上可以定义所谓<strong>交换图表</strong>,意味着态射的合成是所谓殊途同归的.例如,如果下面这个图表是交换的:</p>
<script type="math/tex; mode=display">
\xymatrix { R \ar [r ] ^u \ar [d ] _x & S \ar [d ] ^v \\
T \ar [r ] _y & U  }</script><p>这意味着$yx = vu $.</p>
<p>必须要指出的是,我们这里范畴所包含的对象并不是单指某一特定元素,而也有可能是某一数学结构(例如集合).</p>
<p>特别地,如果:</p>
<ol>
<li><p>如果对于$f \in \text { Hom  } ( X , Y ) $,$\exists g \in \text { Hom  } ( Y , X ) $使得$gf = \text { id  } _X $,那么称$g $是$f $的一个<strong>左逆</strong>,称$f $是<strong>左可逆</strong>的或者是<strong>单态射</strong>.同理可以定义<strong>右逆</strong>以及所谓<strong>满态射</strong>.</p>
</li>
<li><p>如果$f $左右均可逆,易见左右逆相等,记作$f ^{ - 1  } $,易见$f ^{ - 1  } $可逆而且$( f ^{ - 1  } ) ^{ - 1  } = f $.此时称$f $是<strong>同构</strong>的.</p>
</li>
</ol>
<p>同构还有以下性质:</p>
<ol>
<li><p>$( \text { id  } _X ) ^{ - 1  } = \text { id  } _X $.</p>
</li>
<li><p>如果$f $和$g $均为同构并且合成有意义,那么$gf $是同构并且$( gf ) ^{ - 1  } = f ^{ - 1  } g ^{ - 1  } $.</p>
</li>
</ol>
<p>于是在此基础上追加定义:</p>
<ol>
<li><p>自同态幺半群:$\text { End  } _{ \mathcal { C  }  } ( X ) = \text { Hom  } _{ \mathcal { C  }  } ( X , X ) $.</p>
</li>
<li><p>自同构群:$\text { Aut  } _{ \mathcal { C  }  } ( X ) = ( \text { End  } _{ \mathcal { C  }  } ( X ) ) ^\times $.</p>
</li>
</ol>
<p>如此起名的原因是由抽象代数知识见到$\text { End  } $对二元运算$\circ $构成幺半群,$\text { Aut  } $则构成群.</p>
<p>我们还可以定义所谓<strong>子范畴</strong>.称$\mathcal { C  } ‘ $是$\mathcal { C  } $的子范畴当且仅当:</p>
<ol>
<li><p>$\text { Ob  } ( \mathcal { C  } ‘ ) \subseteq \text { Ob  } ( \mathcal { C  } ) $.</p>
</li>
<li><p>$\forall X , Y \in \text { Ob  } ( \mathcal { C  } ‘ ) $都有$\text { Hom  } _{ \mathcal { C  } ‘  } ( X , Y ) \subseteq \text { Hom  } _{ \mathcal { C  }  } ( X , Y ) $.</p>
</li>
<li><p>$\forall X \in \text { Ob  } ( \mathcal { C  } ‘ ) $,$\text { id  } _X = \text { id  } _X ‘ $.</p>
</li>
<li><p>态射在$\mathcal { C  } ‘ $中的合成运算应从$\mathcal { C  } $中继承而来.</p>
</li>
</ol>
<p>特别地,如果$\forall X , Y \in \text { Ob  } ( \mathcal { C  } ‘ ) , \text { Hom  } ( X , Y ) _{ \mathcal { C  } ‘  } = \text { Hom  } _{ \mathcal { C  }  } ( X , Y ) $,则称$\mathcal { C  } ‘ $是$\mathcal { C  } $的一个全子范畴.</p>
<h3><span id="泛性质初步">泛性质初步</span></h3><p>如果$\mathcal { C  } $是一个范畴,其中有一个元素$X \in \mathrm { Ob  } ( \mathcal { C  } ) $,如果$\forall Y \in \mathrm { Ob  } ( { \mathcal { C  }  } ) $,$| \mathrm { Hom  } _{ \mathcal { C  }  } ( X , Y ) | = 1 $,则称它是始(initial)的.类似地,如果对于$Y \in \mathrm { Ob  } ( \mathcal { C  } ) $,$\forall X \in \mathrm { Ob  } ( \mathcal { C  } ) $,$| \mathrm { Hom  } _{ \mathcal { C  }  } ( X , Y ) | = 1 $,则称$Y $是终(terminal)的.</p>
<p>现在我们有以下结论:</p>
<ol>
<li><p>如果$X , X ‘ \in \mathrm { Ob  } ( \mathcal { C  } ) $都是initial的,则存在一个唯一的同构$a : X \cong X ‘ $.</p>
</li>
<li><p>如果$Y , Y ‘ \in \mathrm { Ob  } ( \mathcal { C  } ) $都是terminal的,则存在一个唯一的同构$b : Y \cong Y ‘ $.</p>
</li>
</ol>
<p>二者均是显然的,请自行检验.</p>
<p>这个结论是泛性质方法的基础.</p>
<h3><span id="函子">函子</span></h3><p>我们定义从$\mathcal { C  } ‘ $到$\mathcal { C  } $的<strong>函子</strong>$F $需要有以下性质:</p>
<ol>
<li><p>$\forall X \in \text { Ob  } ( \mathcal { C  } ‘ ) $,指定一个$\mathcal { C  } $中的对象$FX $.或记作$F : \text { Ob  } ( \mathcal { C  } ‘ ) \to \text { Ob  } ( \mathcal { C  } ) $.</p>
</li>
<li><p>$\forall X , Y \in \text { Ob  } ( \mathcal { C  } ‘ ) $,对于态射$f : X \to Y $指定一个$\mathcal { C  } $中的对象$Ff $.或记作$F : \text { Hom  } _\mathcal { C  } ‘ ( X , Y ) \to \text { Hom  } _\mathcal { C  } ( FX , FY ) $.</p>
</li>
</ol>
<p>上述对态射的函子还应当满足以下性质:</p>
<ol>
<li><p>$\forall g , f \in \text { Hom  } _{ \mathcal { C  } ‘  } $,它们的合成有意义,则$F ( gf ) = F ( g ) F ( f ) $.</p>
</li>
<li><p>$\forall X \in \text { Ob  } ( \mathcal { C  } ‘ ) $,$F ( \text { id  } _X ) = \text { id  } _{ FX  } $.</p>
</li>
</ol>
<p>我们一般也将上述函子记作$F : \mathcal { C  } ‘ \to \mathcal { C  } $.这当然意味着函子是可以合成的并仍然满足结合律.</p>
<p>既然$F $可以在某种程度上看作映射,我们当然还可以引出以下定义:</p>
<ol>
<li><p>如果$\forall T \in \text { Ob  } ( \mathcal { C  } ) , \exists X \in \text { Ob  } ( \mathcal { C  } ‘ ) $使得$T \cong FX $,则称$F $是<strong>本质满</strong>的.</p>
</li>
<li><p>如果$\forall X , Y \in \text { Ob  } ( \mathcal { C  } ‘ ) $,$F : \text { Hom  } _{ \mathcal { C  } ‘  } ( X , Y ) \to \text { Hom  } _{ \mathcal { C  }  } ( FX , FY ) $均为单射,则称$F $是<strong>忠实</strong>的.如果均为满射,则称其为<strong>全</strong>的.如果均为双射,则称其为<strong>全忠实</strong>的.</p>
</li>
</ol>
<p>回忆到Haskell语言中对函子的定义:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line"><span class="title">fmap</span> :: (a-&gt;b)-&gt;f a-&gt; f b</span><br><span class="line">(&lt;$) :: b -&gt; f a -&gt; f b</span><br><span class="line">(&lt;$) = fmap.const</span><br><span class="line">(&lt;$&gt;) :: <span class="type">Functor</span> f =&gt; (a-&gt;b)-&gt;f a -&gt; f b</span><br><span class="line">(&lt;$&gt;) = fmap</span><br></pre></td></tr></table></figure>
<p>回忆到Haskell语言中对函子的要求:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">fmap</span> id == id</span><br><span class="line"><span class="title">fmap</span> (f.g)==(fmap f).(fmap g)</span><br></pre></td></tr></table></figure>
<p>容易见到其类似性.</p>
<p>函子的类型很多,比如最平凡的一类函子是所谓<strong>忘却函子</strong>.但我们在这里着重提所谓$\text { Hom  } $函子,其是Haskell语言中Curring化的基础:</p>
<p>对于范畴$\mathcal { C  } $以及其对象$X $,我们定义函子$\text { Hom  } _{ \mathcal { C  }  } ( X , \cdot ) : \mathcal { C  } \to Set $,它映对象$Y $为集合$\text { Hom  } _{ \mathcal { C  }  } ( X , Y ) $,映态射$f : Y \to Z $为映射$\text { Hom  } _{ \mathcal { C  }  } ( X , \cdot ) f : \text { Hom  } _{ \mathcal { C  }  } ( X , Y ) \to \text { Hom  } _{ \mathcal { C  }  } ( X , Z ) , h \mapsto f \circ h $.</p>
<p>同理可以定义函子$\text { Hom  } _{ \mathcal { C  }  } ( \cdot , X ) $.</p>
<p>对于函子$\text { Hom  } _{ \mathcal { C  }  } ( X , \cdot ) $,我们可以一窥其在Haskell中的具体定义:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) a) <span class="keyword">where</span></span></span><br><span class="line"><span class="comment">-- fmap :: (b-&gt;c)-&gt;(a-&gt;b)-&gt;(a-&gt;c)</span></span><br><span class="line"><span class="title">fmap</span> fbc fab = fbc.fab</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> ((-&gt;) a) <span class="keyword">where</span></span></span><br><span class="line"><span class="comment">-- pure :: c-&gt;(a-&gt;c)</span></span><br><span class="line"><span class="comment">-- &lt;*&gt; :: (a-&gt;(b-&gt;c))-&gt;(a-&gt;b)-&gt;(a-&gt;c)</span></span><br><span class="line"><span class="title">pure</span> tb = \ta -&gt; tb</span><br><span class="line">(&lt;*&gt;) fabc fab = \ta -&gt; ((fmap (fabc ta) fab) ta)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line"><span class="comment">-- (&gt;&gt;=) :: (r-&gt;a)-&gt;(a-&gt;(r-&gt;b))-&gt;(r-&gt;b)</span></span><br><span class="line">(&gt;&gt;=) fra farb = \tr -&gt; ( farb (fra tr) tr )</span><br></pre></td></tr></table></figure>
<h3><span id="范畴实例">范畴实例</span></h3><h4><span id="kleisli范畴">Kleisli范畴</span></h4><p>简单理解Kleisli范畴的话就是,我们被允许给一个元素进行如下的操作:</p>
<ol>
<li><p>加上修饰.</p>
</li>
<li><p>合并修饰.</p>
</li>
</ol>
<p>Kleisili范畴在Haskell里的具体表现就是Monad.</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line"><span class="title">fmap</span>        :: (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line">(&lt;$)        :: a -&gt; f b -&gt; f a</span><br><span class="line">(&lt;$)        =  fmap . const</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span></span><br><span class="line"><span class="title">pure</span> :: a -&gt; f a</span><br><span class="line">(&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span></span><br><span class="line"><span class="title">return</span> :: a -&gt; m a</span><br><span class="line"><span class="title">return</span> = pure</span><br><span class="line"><span class="title">join</span> :: m(m a)-&gt; m a</span><br><span class="line">(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line"><span class="title">ma</span> &gt;&gt;= f = join (fmap f ma)</span><br><span class="line">(&gt;&gt;) :: m a -&gt; m b -&gt; m b</span><br><span class="line"><span class="title">m</span> &gt;&gt; k = m &gt;&gt;= \_ -&gt; k</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>递归式与和式</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E9%80%92%E5%BD%92%E5%BC%8F%E4%B8%8E%E5%92%8C%E5%BC%8F/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="汉诺塔问题">汉诺塔问题</span></h3><p>三个柱子,$n $个面积互不相等的有孔圆盘一开始按照面积从上往下以此增大的顺序套在其中一个柱子上.</p>
<p>现在每次可以将某根柱子顶端的圆盘移动到另一根柱子顶端,要求这根柱子原本没有圆盘或者柱子顶端圆盘面积大于该圆盘.</p>
<p>求最小移动次数,使得所有圆盘移动到另一根柱子上.</p>
<p>不妨令$T _n $表示答案,显然$T _0 = 0 , T _1 = 1 $.</p>
<p>而我们一定可以找到一种方案,使得前$n - 1 $个圆盘先移动到其中一根柱子上,然后将最下面的圆盘移动到目标柱子,最后再把$n - 1 $个圆盘移动到目标柱子.由于这是一个可行解而不一定是最优解,我们有:$T _n \leq 2 T _{ n - 1  } + 1 $.</p>
<p>而如果我们要移动最大的圆盘,一定要保证前n-1个圆盘已经移走到一根柱子上.因此一定有:$2 T _{ n - 1  } + 1 \leq T _n $.于是有$T _n = 2 T _{ n - 1  } + 1 $.</p>
<h4><span id="example1具体数学12">Example1(《具体数学》1.2)</span></h4><p>汉诺塔问题,所有圆盘一开始均在最左边的塔A上,要将他们全都移动到最右边的塔C上,不允许在二塔之间直接移动,求最小操作次数.</p>
<h4><span id="solution-1">Solution 1</span></h4><p>考虑设$T _n $为n个圆盘时的最小操作次数.假设已知$T _{ n - 1  } $,我们考虑如何移动.</p>
<p>首先因为不能直接在AC之间移动,因此一定是先要把最大的圆盘移动到中间塔上,这一步要求先把所有圆盘移动到C上,然后需要再把这些圆盘移动回A上,因此,显然有:$T _{ n  } = 3 T _{ n - 1  } + 2 , T _0 = 0 $.</p>
<p>考虑如何求该式子的封闭形式,令$W _n = T _n + 1 $,显然有$W _n = 3 W _{ n - 1  } , W _0 = 1 $,显然$W _n = 3 ^n $,有$T _n = 3 ^n - 1 $.</p>
<p>注意到$T _n $刚好是三根柱子上所有合法排列的数量,并且这个过程中不可能出现某两个时刻的情况是相同的,因此1.3也可以证明.</p>
<h4><span id="example2具体数学14">Example2(《具体数学》1.4)</span></h4><p>汉诺塔问题,问是否存在一种符合规则的初始摆放方式,使得将其全部移动到其中一根柱子所用次数小于等于$2 ^n - 1 $.</p>
<h4><span id="solution-2">Solution 2</span></h4><p>不存在.</p>
<p>证明方式类似原初问题的证明,考虑最大的那个圆盘是否到达终点.如果到达则可以去掉它,用数学归纳证明不存在;如果还未到达,同样用数学归纳得到不等式.</p>
<h4><span id="example3具体数学110">Example3(《具体数学》1.10)</span></h4><p>汉诺塔问题,但是移动圆盘时只能从A移动到B,从B移动到C,从C移动到A.一开始所有圆盘都在A,求将它们全部移动到B的最小操作次数,以及将他们从B移动回A的最小操作次数.</p>
<h4><span id="solution-3">Solution 3</span></h4><p>令$Q _n $为将n个圆盘从A移动到B的最小操作次数,令$R _n $为将n个圆盘从B移动回A的最小操作次数.</p>
<p>先考虑边界情况,$Q _0 = 0 , R _0 = 0 $.</p>
<p>我们考虑,由于柱子间在移动过程中是无区别的,因此$Q _n $的实质是将n个圆盘移动到它的下一个柱子的最小操作次数,$R _n $的实质是将n个圆盘移动到它的上一个柱子的最小操作次数.</p>
<p>在将最大的圆盘移动到下一根柱子前,一定要先把上面的圆盘全部移动到上一根柱子上,最后再移动回来.</p>
<p>显然有$Q _n = 2 R _{ n - 1  } + 1 , 1 \leq n $.</p>
<p>在将最大的圆盘移动到上一根柱子前,一定要先把他移动到下一根柱子上,这个步骤要求我们把其他的圆盘移动到上一根柱子上.在这之后,我们又要把所有圆盘放到上一根柱子上来让最大圆盘到目标柱子,最后再移动回来.</p>
<p>有$R _n = R _{ n - 1  } + 1 + Q _{ n - 1  } + 1 + R _{ n - 1  } = Q _n + Q _{ n - 1  } + 1 , 1 \leq n $.</p>
<h4><span id="example4具体数学111">Example4(《具体数学》1.11)</span></h4><p>汉诺塔问题,但是每种大小的圆盘有两个,且其中一个可以摆放在另一个的上面.</p>
<p>a.如果相同圆盘无区别,求最小操作次数.</p>
<p>b.如果相同圆盘有区别,且最后需要还原原本二者的上下顺序,求最小操作次数.</p>
<h4><span id="solution-4">Solution 4</span></h4><p>a.仍然令$T _n $为n对圆盘的最小操作次数,显然$T _n = 2 T _{ n - 1  } + 2 , T _0 = 0 $,可解得$T _n = 2 ^{ n + 1  } - 2 $.</p>
<p>b.令$Q _n $为n对圆盘的最小操作次数,观察a问题,我们可以发现a问题转移之后,只有最下面的两个圆盘会交换顺序.而如果我们在b问题中只关注最下层两个圆盘的顺序,我们发现$Q _n = T _{ n - 1  } + 1 + T _{ n - 1  } + 1 + T _{ n - 1  } + 1 + T _{ n - 1  } = 4 T _{ n - 1  } + 3 = 2 ^{ n + 2  } - 5 $.</p>
<p>我们进行了四次a操作,那么次下面两个圆盘自然就顺序与原本相同了,因此这里的$Q _n $就是答案.</p>
<h4><span id="example5具体数学112">Example5(《具体数学》1.12)</span></h4><p>类似Problem11,但第$i $大的圆盘有$k _i $个.</p>
<h4><span id="solution-5">Solution 5</span></h4><p>无区别,只是$T _n = 2 T _{ n - 1  } + k _n , T _0 = 0 $.</p>
<p>如果求封闭形式的话,显然有$T _n = \sum _{ i = 1  } ^n 2 ^{ n - i  } k _i $.</p>
<h3><span id="递归式的封闭形式">递归式的封闭形式</span></h3><p>在上述问题中，我们已经有了以下式子：</p>
<p>$T _n = 2 T _{ n - 1  } + 1 , n &gt; 0 , T _0 = 0 $.</p>
<p>如果$n $很大，那么一步一步去计算是很复杂的，现在我们想知道一种更为快速的求出$T _n $的方法.</p>
<p>换句话说，我们想要把$T _n $表示为只与n有关的式子，我们称其为该递归式的封闭形式.</p>
<h4><span id="寻找循环节">寻找循环节</span></h4><h5><span id="example具体数学18">Example(《具体数学》1.8)</span></h5><p>解递归式:$Q _n = \begin{cases}\alpha &amp; n = 0 \ \beta &amp; n = 1 \ \frac { ( 1 + Q _{ n - 1  } )  } { Q _{ n - 2  }  } &amp; n &gt; 1 \end{cases} $,保证$\forall n , Q _n &gt; 0 $.</p>
<h5><span id="solution">Solution</span></h5><p>注意到$Q _2 = \frac { \beta + 1  } { \alpha  } , Q _3 = \frac { \beta + \alpha + 1  } { \beta \alpha  } , Q _4 = \frac { 1 + \alpha  } { \beta  } , Q _5 = \alpha , Q _6 = \beta $.</p>
<p>显然该递归式存在长度为$5 $的循环节.</p>
<h4><span id="数学归纳法">数学归纳法</span></h4><p>观察T序列的前几项，可以发现似乎有$T _n = 2 ^n - 1 $.</p>
<p>现在我们来证明它：</p>
<p>1.该公式对于$n = 0 $成立，显然可验证.</p>
<p>2.若该公式对$n = k $时成立，那该公式必然对$n = k + 1 $成立.</p>
<p>因为有$T _{ k + 1  } = 2 T _k + 1 = 2 \times 2 ^k + 2 - 1 = 2 ^{ k + 1  } - 1 $.</p>
<p>以上过程被称为数学归纳法.</p>
<h5><span id="example具体数学19">Example(《具体数学》1.9)</span></h5><p>求证:$\prod _{ i = 1  } ^n x _i \leq ( \frac { \sum _{ i = 1  } ^n x _i  } { n  } ) ^n , \forall i \in N _+ , 1 \leq i \leq n , 0 \leq x _i $.</p>
<h5><span id="solution">Solution</span></h5><p>使用反向归纳法.</p>
<p>1.$n = 2 $时,即基本不等式,显然成立.</p>
<p>2.若该式子对$n = k $时成立,则该式子对n=2k时也成立.</p>
<p>不妨令$A _1 = \sqrt [k ] { \prod _{ i = 1  } ^k x _i  } , B _1 = \sqrt [k ] { \prod _{ i = k + 1  } ^{ 2 k  } x _i  } , A _2 = ( \frac { \sum _{ i = 1  } ^k x _i  } { k  } ) , B _2 = ( \frac { \sum _{ i = k + 1  } ^{ 2 k  } x _i  } { k  } ) $,显然有$A _1 \leq A _2 , B _1 \leq B _2 $.</p>
<p>同时有$( \frac { A _2 + B _2  } { 2  } ) \geq \sqrt { A _2 B _2  } \geq \sqrt { A _1 B _1  } $.</p>
<p>3.若该式子对$n = k $时成立,则该式子对$n = k - 1 $的时候也成立.</p>
<p>令$x _k = \frac { \sum _{ i = 1  } ^{ k - 1  } x _i  } { k - 1  } $,有$x _k \prod _{ i = 1  } ^{ k - 1  } x _i \leq ( x _k ) ^k $.</p>
<p>则显然$n = k - 1 $时也成立.</p>
<p>由1和2,我们知道了对于n是二的整数次幂的情况,该公式成立,由3,我们又可以知道该公式对于任意一个存在比他大的二的整数次幂的数成立,因此该公式成立.</p>
<h4><span id="换元">换元</span></h4><p>考虑令$U _n = T _n + 1 $,显然有:$T _n + 1 = 2 T _{ n - 1  } + 2 $.即$U _n = 2 U _{ n - 1  } $,显然$U _n = 2 ^n $,则$T _n = 2 ^n - 1 $.</p>
<p>这个做法可以做掉所有形如$a _{ n + 1  } = pa _n + q $的递归式.我们有:</p>
<script type="math/tex; mode=display">
a _{ n + 1  } + \frac { q  } { p - 1  } = p ( a _n + \frac { q  } { p - 1  } )</script><p>换元做掉这个式子.</p>
<h4><span id="转化和式">转化和式</span></h4><p>考虑递归式$a _n T _n = b _n T _{ n - 1  } + c _n $.如果我们能找到一个不为0的求和因子$s _n $并满足$s _n b _n = s _{ n - 1  } a _{ n - 1  } $.那么我们两面同时乘以$s _n $,显然有：$s _n a _n T _n = s _{ n - 1  } a _{ n - 1  } T _{ n - 1  } + c _n s _n $.</p>
<p>令$S _n = s _n a _n T _n $.显然有$S _n = s _0 a _0 T _0 + \sum _{ i = 1  } ^n s _i c _i $,则$T _n = \frac { S _n  } { s _n a _n  } $.</p>
<p>而我们也会发现$s _n = \frac { \prod _{ i = 1  } ^{ n - 1  } a _i  } { \prod _{ i = 1  } ^n b _i  } $.</p>
<h5><span id="example1快速排序时间复杂度">Example1(快速排序时间复杂度)</span></h5><p>结论:排序$n $个数时,其期望复杂度满足:</p>
<script type="math/tex; mode=display">
C _n = \begin{cases}
0 & n = 0 , 1 \\
n + 1 + \frac { 2  } { n  } \sum _{ i = 0  } ^{ n - 1  } C _k & n > 1 
\end{cases}</script><p>不妨考虑两边同时乘以$n $,有 $nC _n = n ^2 + n + 2 \sum _{ i = 0  } ^{ n - 1  } C _i , n &gt; 1 $ .</p>
<p>显然也有$( n - 1 ) C _{ n - 1  } = ( n - 1 ) ^2 + n - 1 + 2 \sum _{ i = 0  } ^{ n - 2  } C _i , n &gt; 2 $.</p>
<p>二式相消,有$nC _n - ( n - 1 ) C _{ n - 1  } = 2 n + 2 C _{ n - 1  } , n &gt; 2 $.</p>
<p>而同时有$C _2 = 3 $.即:$nC _n = ( n + 1 ) C _{ n - 1  } + 2 n , n &gt; 2 $,可以使用转化和式的方法,两边乘以$\frac { 1  } { n ( n + 1 )  } $解决.</p>
<h5><span id="example2">Example2</span></h5><p>已知$a _1 = 1 $,$a _n = \sqrt { S _n  } + \sqrt { S _{ n - 1  }  } $,求$a _n $.</p>
<p>注意到$a _n = S _n - S _{ n - 1  } $,则有$\sqrt { S _n  } - \sqrt { S _{ n - 1  }  } = 1 $,于是$\sqrt { S _n  } = n $,$S _n = n ^2 $,$a _n = 2 n - 1 $.</p>
<h4><span id="成套方法">成套方法</span></h4><p>如果我们有</p>
<p>\alpha &amp; n=1\\</p>
<p>2f(\frac n 2)+\beta &amp; n=2k,k\in \mathbb{N_+}\\</p>
<p>2f(\frac {n-1}2)+\gamma &amp;n=2k+1,k\in \mathbb{N_+}</p>
<p>\end{cases}</p>
<p>其中$n = 2 ^m + l $且$2 ^m \leq n &lt; 2 ^{ m + 1  } $.</p>
<p>该如何求出$f ( n ) $的封闭形式呢?</p>
<p>由于所有的未知数都是以加法运算连接,显然有$f ( n ) = A ( n ) \alpha + B ( n ) \beta + C ( n ) \gamma $,而有$A 、 B 、 C $互不影响且$\alpha \beta \gamma $与$ABC $无关.</p>
<p>那无论$\beta $和$\gamma $的取值如何,$A ( n ) $都不会受到影响,我们考虑$\beta = \gamma = 0 $的特殊情况,此时显然有$A ( n ) = 2 ^m $.</p>
<p>接下来,我们考虑取$\alpha \beta \gamma $的特殊值,去得到ABC之间的关系.</p>
<p>例如，当$f ( n ) = 1 $时，由递推式可知$\alpha = 1 , \beta = \gamma = - 1 $,那么有$A ( n ) - B ( n ) - C ( n ) = f ( n ) = 1 $.</p>
<p>同理，$f ( n ) = n $时，可知$\alpha = 1 , \beta = 0 , \gamma = 1 $,此时有$A ( n ) + C ( n ) = f ( n ) = n $.</p>
<p>显然可以通过解方程求得$B ( n ) $和$C ( n ) $.</p>
<p>这个方法显然是通用方法,式子仅仅是例子,事实上,只要我们能证明$ABC $互不影响且$\alpha \beta \gamma $与$ABC $无关,我们就可以使用这个方法.</p>
<p>这个东西的原理是什么呢?显然是因为其中存在一个线性无关性对吧.</p>
<h4><span id="线性递推">线性递推</span></h4><p>一个常系数的$k $阶线性递推关系形如:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = P _n + \sum _{ i = 1  } ^k c _i a _{ n - i  } , n & \geq k \\
a _0 & = C _0 , a _1 & = C _1 , . . . , a _{ k - 1  } & = C _{ k - 1  } 
\end{aligned}</script><p>当$P = 0 $时,称作齐次线性递推.</p>
<h5><span id="特征方程">特征方程</span></h5><p>我们称方程$r ^k = \sum _{ i = 1  } ^k c _i r ^{ k - i  } $是该递推关系的特征方程,方程的解叫做该递推关系的特征根.</p>
<h5><span id="二阶线性齐次递推">二阶线性齐次递推</span></h5><p>若其特征方程有两个不同的根$r _1 $和$r _2 $,那么存在两个常数$\alpha _1 $和$\alpha _2 $,满足$a _n = \alpha _1 r _1 ^n + \alpha _2 r _2 ^n $.</p>
<p>若其特征方程有两个相同的根$r $,那么存在两个常数$\alpha _1 $和$\alpha _2 $,满足$a _n = \alpha _1 r ^n + \alpha _2 nr ^n $.</p>
<p>先考虑前者的证明,首先考虑对于$n = 0 $或者$n = 1 $的情况,我们考虑求出一组$\alpha _1 $和$\alpha _2 $来满足:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C _0 & = \alpha _1 + \alpha _2 \\
C _1 & = \alpha _1 r _1 + \alpha _2 r _2 
\end{aligned}</script><p>若$r _1 \ne r _2 $,可以解得:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\alpha _1 & = \cfrac { C _1 - C _0 r _2  } { r _1 - r _2  } \\
\alpha _2 & = C _0 - \alpha _1 
\end{aligned}</script><p>接下来考虑数学归纳:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = c _1 a _{ n - 1  } + c _2 a _{ n - 2  } \\
& = c _1 ( \alpha _1 r _1 ^{ n - 1  } + \alpha _2 r _2 ^{ n - 1  } ) + c _2 ( \alpha _1 r _1 ^{ n - 2  } + \alpha _2 r _2 ^{ n - 2  } ) \\
& = \alpha _1 ( c _1 r _1 ^{ n - 1  } + c _2 r _1 ^{ n - 2  } ) + \alpha _2 ( c _1 r _2 ^{ n - 1  } + c _2 r _2 ^{ n - 2  } ) \\
& = \alpha _1 r _1 ^n + \alpha _2 r _2 ^n 
\end{aligned}</script><p>接下来考虑后者,首先我们有$\Delta = c _1 ^2 + 4 c _2 = 0 $,考虑初始条件:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C _0 & = \alpha _1 \\
C _1 & = \alpha _1 r + \alpha _2 r \\

\end{aligned}</script><p>接下来我们考虑数学归纳:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = c _1 a _{ n - 1  } + c _2 a _{ n - 2  } \\
& = c _1 ( \alpha _1 r ^{ n - 1  } + \alpha _2 nr ^{ n - 1  } - \alpha _2 r ^{ n - 1  } ) + c _2 ( \alpha _1 r ^{ n - 2  } + \alpha _2 nr ^{ n - 2  } - 2 \alpha _2 r ^{ n - 2  } ) \\
& = a _n - c _1 \alpha _2 r ^{ n - 1  } - 2 c _2 \alpha _2 r ^{ n - 2  } 
\end{aligned}</script><p>我们接下来只需证明$c _1 r + 2 c _2 = 0 $即可.根据方程,不难发现$r = \cfrac { c _1  } { 2  } $,根据$\Delta = 0 $,自然得证.</p>
<h5><span id="更一般的情况">更一般的情况</span></h5><p>直接在复数域上定义$f _k ( x ) = \{ n ^k x ^n \} _{ n = 0  } ^\infty $,此时我们规定$0 ^0 = 1 $.特别地,当$x = 0 $的时候,定义$f _k ( x ) $的第$k $项是$1 $,其余项是$0 $.在此基础上定义线性映射$T : ( a _n ) _{ n = 0  } ^\infty \mapsto ( a _{ n + 1  } ) _{ n = 0  } ^\infty $,立刻见到:$( T - x ) ^{ k + 1  } f _k ( x ) = 0 , ( T - x ) ^k f _k ( x ) \ne 0 $.原因只需简单数学归纳.而此还可以引出$f _0 ( x ) , f _1 ( x ) , \cdots $线性无关.</p>
<p>在此基础上观察线性递推$a _{ n + d  } = c _{ d - 1  } a _{ n + d - 1  } + \cdots + c _0 a _n $,不妨取$G ( x ) = x ^d - c _{ d - 1  } x ^{ d - 1  } - \cdots - c _0 $,立刻应当见到如果$a $是$G $的根并且重数为$e ( a ) $,那么$f _{ 0  } ( x ) , \cdots , f _{ e ( a ) - 1  } ( a ) $都在$\ker f ( T ) $中.这恰好是该线性递推空间的维数个.我们需要说明它们线性无关,不妨反证,假设出现了形如$\sum _j w _i f _i ( y ) = \sum _j w _j f _j ( x ) $的情况,此时对右边直接操作若干次$( T - x ) $就可以把右边全部消成$0 $,在对着左边消几次就可以使得左边只留下最高次项,这个时候发现最高次项是消不掉的,原因是将每一个位置看作关于$n $的多项式右边的$( T - x ) $是不会改变左边这边的每一个位置多项式的$\deg $,这当然意味着不可能消干净.</p>
<h6><span id="再再进一步">再再进一步</span></h6><p>我们都知道矩阵加速:也就是$\vec { x  } _{ k + 1  } = A \vec { x  } $,$\vec { x  } _{ n  } = A ^n \vec { x  } _0 $.而我们又知道CH定理:$p ( A ) = 0 $,我们用多项式取膜,有$A ^n = p ( A ) F ( A ) + G ( A ) = G ( A ) $,这就是解.</p>
<h3><span id="约瑟夫问题">约瑟夫问题</span></h3><p>考虑n个人围成一圈,从第一个人开始,每隔一个人就杀掉一个人.如10个人围成一圈时,杀人的顺序是$2 , 4 , 6 , 8 , 10 , 3 , 7 , 1 , 9 $.问最后幸存下来的人编号.</p>
<p>首先一定有J(1)=1.考虑第一遍杀掉n号或者n-1号之后,对整个圆圈进行重新编号.</p>
<p>那么当人数是偶数时,我们有$J ( 2 n ) = 2 J ( n ) - 1 $;当人数是奇数时,我们杀掉一号,然后有$J ( 2 n + 1 ) = 2 J ( n ) + 1 $.</p>
<p>整理得到:</p>
<script type="math/tex; mode=display">
J ( n ) = \begin{cases}
1 & n = 1 \\
2 J ( \frac { n  } { 2  } ) - 1 & n = 2 k , k \in \mathbb { N _+  } \\
2 J ( \frac { n - 1  } { 2  } ) + 1 & n = 2 k + 1 , k \in \mathbb { N _+  } 
\end{cases}</script><p>仍然可以使用数学归纳，如果令$n = 2 ^m + l 且 2 ^m \leq n &lt; 2 ^{ m + 1  } $.</p>
<p>有$J ( n ) = 2 l + 1 $.</p>
<p>要是注意力没有那么集中怎么办呢?考虑到这个东西显然和取膜有着不可分割的关系,我们不妨从$0 $开始编号:</p>
<script type="math/tex; mode=display">
J ( n ) = \begin{cases}
0 & n = 1 \\
2 J ( \frac { n  } { 2  } ) & n = 2 k , k \in \mathbb { N _+  } \\
2 J ( \frac { n - 1  } { 2  } ) + 2 & n = 2 k + 1 , k \in \mathbb { N _+  } 
\end{cases}</script><p>这下相信$J ( n ) $是多少就很显然了,将$n $写成二进制的形式,这个就相当于把首位$1 $抹去然后在末尾加个$0 $.</p>
<h4><span id="example具体数学115">Example(《具体数学》1.15)</span></h4><p>求约瑟夫问题中最后一名被杀死的人的编号.</p>
<h4><span id="solution">Solution</span></h4><p>显然有:</p>
<script type="math/tex; mode=display">
J ( n ) = \begin{cases}
2 & n = 2 \\
1 & n = 3 \\
2 J ( \frac { n  } { 2  } ) - 1 & n = 2 k + 2 , k \in \mathbb { N _+  } \\
2 J ( \frac { n - 1  } { 2  } ) + 1 & n = 2 k + 3 , k \in \mathbb { N _+  } 
\end{cases}</script><p>从$0 $开始编号,自然有:</p>
<script type="math/tex; mode=display">
J ( n ) = \begin{cases}
1 & n = 2 \\
0 & n = 3 \\
2 J ( \frac { n  } { 2  } ) & n = 2 k + 2 , k \in \mathbb { N _+  } \\
2 J ( \frac { n - 1  } { 2  } ) + 2 & n = 2 k + 3 , k \in \mathbb { N _+  } 
\end{cases}</script><p>显然$J ( n ) $也可以用二进制表达其形式.</p>
<h2><span id="和式">和式</span></h2><h3><span id="和式的基本运算">和式的基本运算</span></h3><p>分配律:</p>
<script type="math/tex; mode=display">
\sum _{ i \in S  } ca _i = c \sum _{ i \in S  } a _i</script><p>一般分配律:</p>
<script type="math/tex; mode=display">
\sum _{ i  } \sum _{ j  } a _{ i  } b _j = ( \sum _{ i  } a _i ) ( \sum _j b _j )</script><p>结合律:</p>
<script type="math/tex; mode=display">
\sum _{ i \in S  } ( a _i + b _i ) = \sum _{ i \in S  } a _i + \sum _{ i \in S  } b _i</script><p>交换律:</p>
<script type="math/tex; mode=display">
\sum _{ i \in S  } a _i = \sum _{ p ( i ) \in S  } a _{ p ( i )  }</script><p>交换求和顺序:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i  } \sum _{ j  } a _{ i , j  } [ P ( i , j ) ] & = \sum _{ j  } \sum _{ i  } a _{ i , j  } [ P ( i , j ) ] \\
\sum _{ i = 1  } ^n \sum _{ j = i  } ^n a _{ i , j  } & = \sum _{ j = 1  } ^n \sum _{ i = 1  } ^j a _{ i , j  } 
\end{aligned}</script><h3><span id="和式的封闭形式">和式的封闭形式</span></h3><h4><span id="交换顺序法">交换顺序法</span></h4><h5><span id="example1等差数列求和">Example1(等差数列求和)</span></h5><p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^n ( ai + b ) & = \sum _{ i = 0  } ^n ( a ( n - i ) + b ) \\
2 S _n & = \sum _{ i = 0  } ^n ( an + 2 b ) & = an ( n + 1 ) + 2 b ( n + 1 ) \\
S _n & = ( n + 1 ) ( \frac { an  } { 2  } + b ) 
\end{aligned}</script><h5><span id="example2切比雪夫单调不等式">Example2(切比雪夫单调不等式)</span></h5><p>令$S = \sum _{ 1 \leq i &lt; j \leq n  } ( a _j - a _i ) ( b _j - b _i ) = \sum _{ 1 \leq j &lt; i \leq n  } ( a _j - a _i ) ( b _j - b _i ) $.</p>
<p>考虑恒等式$[ 1 \leq j &lt; i \leq n ] + [ 1 \leq i &lt; j \leq n ] = [ 1 \leq j , i \leq n ] - [ 1 \leq i = j \leq n ] $.</p>
<p>那么我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 S & = \sum _{ 1 \leq i , j \leq n  } ( a _j - a _i ) ( b _j - b _i ) - \sum _{ 1 \leq i = j \leq n  } ( a _j - a _i ) ( b _j - b _i ) \\
& = \sum _{ 1 \leq i , j \leq n  } ( a _j - a _i ) ( b _j - b _i ) \\
& = 2 n \sum _{ i = 1  } ^n a _i b _i - 2 ( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) \\
( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) & = n \sum _{ i = 1  } ^n a _i b _i - \sum _{ 1 \leq i < j \leq n  } ( a _j - a _i ) ( b _j - b _i ) 
\end{aligned}</script><p>显然有以下式子:</p>
<p>(\sum_{i=1}^na_i)(\sum_{j=1}^nb_j)\geq n\sum_{i=1}^na_ib_i，\forall i&lt;j，a_i\leq a_j且b_i\geq b_j\\</p>
<p>上式被称为切比雪夫单调不等式.</p>
<p>值得一提的是,切比雪夫单调不等式其实是排序不等式的一个特化版本.</p>
<h5><span id="example3拉格朗日恒等式">Example3(拉格朗日恒等式)</span></h5><p>证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ 1 \leq j < k \leq n  } ( a _j b _k - a _k b _j ) ^2 & = ( \sum _{ i = 1  } ^n a _i ^2 ) ( \sum _{ i = 1  } ^n b _i ^2 ) - ( \sum _{ i = 1  } ^n a _i b _i ) ^2 \\

\end{aligned}</script><p>有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ 1 \leq j < k \leq n  } ( a _j b _k - a _k b _j ) ^2 \\
2 S _n & = \sum _{ j = 1  } ^n \sum _{ k = 1  } ^n ( a _j b _k - a _k b _j ) ^2 \\
& = \sum _{ j = 1  } ^n \sum _{ k = 1  } ^n ( a _j ^2 b _k ^2 - 2 a _j a _k b _j b _k + a _k ^2 b _j ^2 ) \\
& = 2 ( \sum _{ i = 1  } ^n a _i ^2 ) ( \sum _{ i = 1  } ^n b _i ^2 ) - 2 ( \sum _{ i = 1  } ^n a _i b _i ) ^2 
\end{aligned}</script><h4><span id="扰动法">扰动法</span></h4><h5><span id="example1等比数列求和">Example1(等比数列求和)</span></h5><script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^n ax ^i \\
& = a + \sum _{ i = 1  } ^n ax ^i \\
& = a + x \sum _{ i = 0  } ^{ n - 1  } ax ^i \\
& = a + xS _{ n - 1  } 
\end{aligned}</script><p>而$S _{ n - 1  } + ax ^n = S _n = a + xS _{ n - 1  } $,有$S _n + ax ^{ n + 1  } = a + xS _n , S _n = a \frac { x ^{ n + 1  } - 1  } { x - 1  } $，其中$x \ne 1 $.</p>
<h5><span id="example2平方和公式">Example2(平方和公式)</span></h5><p>如果直接对该公式使用扰动法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^n i ^2 & = \sum _{ i = 0  } ^{ n - 1  } i ^2 + n ^2 \\
& = \sum _{ i = 1  } ^n ( i - 1 ) ^2 + n ^2 \\
& = S _n - 2 \sum _{ i = 1  } ^n i + n + n ^2 
\end{aligned}</script><p>我们无法得到$S _n $的封闭形式,但我们发现我们得到了$\sum _{ i = 1  } ^n i $的封闭形式.</p>
<p>那以此类推,我们设$W _n = \sum _{ i = 0  } i ^3 $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
W _n & = \sum _{ i = 0  } ^{ n - 1  } i ^3 + n ^3 \\
& = \sum _{ i = 1  } ^n ( i - 1 ) ^3 + n ^3 \\
& = \sum _{ i = 1  } ^n i ^3 - 3 \sum _{ i = 1  } ^n i ^2 + 3 \sum _{ i = 1  } ^n i - n + n ^3 \\
& = W _n - 3 S _n + 3 \frac { n + n ^2  } { 2  } - n + n ^3 \\
S _n & = \frac { n + n ^2  } { 2  } - \frac { n - n ^3  } { 3  } \\
& = \frac { n + 3 n ^2 + 2 n ^3  } { 6  } \\
& = \frac { n ( 1 + 3 n + 2 n ^2 )  } { 6  } \\
& = \frac { n ( 2 n + 1 ) ( n + 1 )  } { 6  } 
\end{aligned}</script><h5><span id="example3具体数学220">Example3(《具体数学》2.20)</span></h5><p>令$H _n = \sum _{ k = 1  } ^n \frac { 1  } { k  } $,求$\sum _{ i = 0  } ^n H _i $.</p>
<h5><span id="solution3">Solution3</span></h5><p>不妨考虑$\sum _{ i = 0  } ^n iH _{ i  } $的值.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 0  } ^n iH _{ i  } & = \sum _{ i = 1  } ^n [ ( i - 1 + 1 ) H _{ i - 1  } + 1 ] \\
& = n + \sum _{ i = 0  } ^{ n - 1  } H _i + \sum _{ i = 0  } ^{ n  } iH _i - nH _n \\
\sum _{ i = 0  } ^{ n - 1  } H _i & = n ( H _n - 1 ) \\
\sum _{ i = 0  } ^n H _i & = ( n + 1 ) ( H _{ n + 1  } - 1 ) \\

\end{aligned}</script><h5><span id="example4具体数学221">Example4(《具体数学》2.21)</span></h5><p>求$S _n = \sum _{ i = 0  } ^n ( - 1 ) ^{ n - i  } , T _n = \sum _{ i = 0  } ^n ( - 1 ) ^{ n - i  } i , U _n = \sum _{ i = 0  } ^n ( - 1 ) ^{ n - i  } i ^2 $.</p>
<h5><span id="solution-4">Solution 4</span></h5><script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 1  } ^{ n  } ( - 1 ) ^{ n - i  } + ( - 1 ) ^n \\
- S _{ n - 1  } + 1 & = ( - 1 ) ^n + \sum _{ i = 0  } ^{ n - 1  } ( - 1 ) ^{ n - 1 - i  } \\
- S _{ n - 1  } + 1 & = ( - 1 ) ^n + S _{ n - 1  } \\
S _{ n - 1  } & = \frac { 1 - ( - 1 ) ^n  } { 2  } \\
S _n & = \frac { 1 + ( - 1 ) ^n  } { 2  } 
\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
T _{ n  } & = \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } i \\
- T _{ n - 1  } + n & = \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } ( i - 1 ) + \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } \\
- T _{ n - 1  } + n & = \sum _{ i = 0  } ^{ n - 1  } ( - 1 ) ^{ n - i - 1  } i + \sum _{ i = 0  } ^n ( - 1 ) ^{ n - i  } - ( - 1 ) ^n \\
- T _{ n - 1  } + n & = T _{ n - 1  } + S _n - ( - 1 ) ^n \\
n - \frac { 1 - ( - 1 ) ^n  } { 2  } & = 2 T _{ n - 1  } \\
T _n & = \frac { 1  } { 2  } ( n + 1 + \frac { - 1 - ( - 1 ) ^n  } { 2  } ) & = \frac { 1  } { 2  } ( n + \frac { 1 - ( - 1 ) ^n  } { 2  } ) 
\end{aligned}</script><script type="math/tex; mode=display">
\begin{aligned}
U _n & = \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } i ^2 \\
- U _{ n - 1  } + n ^2 & = \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } ( i - 1 + 1 ) ^2 \\
- U _{ n - 1  } + n ^2 & = \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } ( i - 1 ) ^2 + 2 \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } ( i - 1 ) + \sum _{ i = 1  } ^n ( - 1 ) ^{ n - i  } \\
- U _{ n - 1  } + n ^2 & = \sum _{ i = 0  } ^{ n - 1  } ( - 1 ) ^{ n - i - 1  } i ^2 + 2 \sum _{ i = 0  } ^{ n - 1  } ( - 1 ) ^{ n - i - 1  } i + \sum _{ i = 0  } ^{ n - 1  } ( - 1 ) ^{ n - i - 1  } \\
- U _{ n - 1  } + n ^2 & = U _{ n - 1  } + 2 T _{ n - 1  } + S _{ n - 1  } \\
2 U _{ n - 1  } & = n ^2 - 2 T _{ n - 1  } - S _{ n - 1  } \\
2 U _{ n - 1  } & = n ^2 - ( n - \frac { 1 - ( - 1 ) ^n  } { 2  } ) - \frac { 1 - ( - 1 ) ^n  } { 2  } \\
2 U _{ n - 1  } & = n ^2 - n \\
U _n & = \frac { n ( n + 1 )  } { 2  } 
\end{aligned}</script><h4><span id="转化为递归式">转化为递归式</span></h4><p>考虑和式$S _n = \sum _{ i = 0  } ^n f ( i ) = S _{ n - 1  } + f ( n ) \ $，显然是递归式形式.</p>
<p>因此递归式所可以使用的方法同样可以在和式中使用.</p>
<h5><span id="example1具体数学213">Example1(《具体数学》2.13)</span></h5><p>求$\sum _{ i = 0  } ^n ( - 1 ) ^i i ^2 \ $.</p>
<h5><span id="solution1">Solution1</span></h5><p>令$S ( n ) = \sum _{ i = 0  } ^n ( - 1 ) ^i i ^2 = S ( n - 1 ) + ( - 1 ) ^n n ^2 $,考虑使用成套方法.</p>
<p>不妨令$S ( n ) = S ( n - 1 ) + ( - 1 ) ^n ( \alpha + \beta n + \gamma n ^2 ) = \alpha A ( n ) + \beta B ( n ) + \gamma C ( n ) $.</p>
<p>令$S ( n ) = ( - 1 ) ^n n , 可 以 解 得 \alpha = - 1 , \beta = 2 , \gamma = 0 $,有$( - 1 ) ^n n = - A ( n ) + 2 B ( n ) $.</p>
<p>令$S ( n ) = ( - 1 ) ^n n ^2 , 可 以 解 得 \alpha = 1 , \beta = - 2 , \gamma = 2 $,有$( - 1 ) ^n n ^2 = A ( n ) - 2 B ( n ) + 2 C ( n ) $.</p>
<p>显然可解得$2 C ( n ) = ( - 1 ) ^n n ^2 + ( - 1 ) ^n n , C ( n ) = ( - 1 ) ^n \frac { n ( n + 1 )  } { 2  } $.</p>
<p>而原式中,$S ( n ) = C ( n ) = ( - 1 ) ^n \frac { n ( n + 1 )  } { 2  } $.</p>
<h5><span id="example2具体数学219">Example2(《具体数学》2.19)</span></h5><p>有$2 T _n = nT _{ n - 1  } + 3 n ! , T _0 = 5 $,求$T _n $.</p>
<h5><span id="solution-2">Solution 2</span></h5><p>令$s _n = \frac { 2 ^{ n - 1  }  } { n !  } $,两边同时乘以$s _n $,有$\frac { 2 ^n  } { n !  } T _n = \frac { 2 ^{ n - 1  }  } { ( n - 1 ) !  } T _{ n - 1  } + 3 \times 2 ^{ n - 1  } \ $.</p>
<p>令$S _n = \frac { 2 ^n  } { n !  } T _n $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = S _{ n - 1  } + 3 \times 2 ^{ n - 1  } \\
& = 5 + 3 \sum _{ i = 0  } ^{ n - 1  } 2 ^i \\
& = 5 + 3 \times 2 ^{ n + 1  } - 3 \\
& = 3 \times 2 ^{ n  } + 2 \\
T _n & = 3 n ! + \frac { n !  } { 2 ^{ n - 1  }  } 
\end{aligned}</script><h4><span id="转化为积分形式">转化为积分形式</span></h4><h5><span id="example1平方和公式">Example1(平方和公式)</span></h5><p>考虑先求出一个近似解,然后再求误差.</p>
<p>考虑函数$f ( x ) = x ^2 $,显然$\int _0 ^n x ^2 dx = \frac { n ^3  } { 3  } \sim S _n \ $.</p>
<p>接下来,我们考虑求得二者之间的误差,设$E _n = S _n - \frac { n ^3  } { 3  } \ $,对其使用扰动法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E _n & = S _n - \frac { n ^3  } { 3  } \\
& = S _{ n - 1  } + n ^2 - \frac { ( n - 1 + 1 ) ^3  } { 3  } \\
& = S _{ n - 1  } + n ^2 - \frac { ( n - 1 ) ^3  } { 3  } - ( n - 1 ) ^2 - ( n - 1 ) - \frac { 1  } { 3  } \\
& = E _{ n - 1  } + n ^2 - n ^2 + 2 n - 1 - n + 1 - \frac { 1  } { 3  } \\
& = E _{ n - 1  } + n - \frac { 1  } { 3  } 
\end{aligned}</script><p>这样就得到了递归式,可以求得封闭形式.</p>
<p>还有一种方法是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E _n & = S _n - \int _0 ^n x ^2 dx \\
& = \sum _{ k = 1  } ^n ( k ^2 - \int _{ k - 1  } ^k x ^2 dx ) \\
& = \sum _{ k = 1  } ^n ( k ^2 - \frac { k ^3 - ( k - 1 ) ^3  } { 3  } ) \\
& = \sum _{ k = 1  } ^n ( k - \frac { 1  } { 3  } ) 
\end{aligned}</script><p>这是一个简单的和式.而$S _n = E _n + \frac { n ^3  } { 3  } \ $,显然也可以求得.</p>
<h5><span id="example2某浙江高考题">Example2(某浙江高考题)</span></h5><p>已知$a _1 = 1 , a _{ n + 1  } - a _n = - \frac { 1  } { 3  } a _n ^2 $,估计$a _n $的值.</p>
<p>考虑构造一个函数$f ( n ) $使得$f ( n ) \approx a _n $,那我们就可以将$a _{ n + 1  } - a _n \approx f _n $.</p>
<p>这个第一眼看上去就很有道理,而事实上也确实很有道理,原因是根据拉格朗日中值定理,$\exists x _0 \in [ n , n + 1 ] , f ‘ ( x _0 ) = f ( n + 1 ) - f ( n ) $,而对于增长率变化不大的函数,直接认为$f ‘ ( x _0 ) = f ‘ ( n ) $是有理可循的!</p>
<p>然后,原式子就变成了一个微分方程了,带入$f ( 1 ) = 1 $解得$f ( n ) = \frac { 3  } { n + 2  } $.这个精度已经足够选出来原本的放缩题的答案了.</p>
<p>令$a _n = \frac { 3  } { n + 2  } - b _n $,带入化简,得到$\{ b _n \} $的递推式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 3  } { n + 3  } - b _{ n + 1  } & = ( \frac { 3  } { n + 2  } - b _n ) ( 1 - \frac { 1  } { n + 2  } + \frac { b _n  } { 3  } ) \\
b _{ n + 1  } - \frac { 3  } { n + 3  } & = ( b _n - \frac { 3  } { n + 2  } ) ( \frac { n + 1  } { n + 2  } + \frac { b _n  } { 3  } ) \\
b _1 & = 0 , b _{ n + 1  } & = \frac { b _n ^2  } { 3  } + \frac { n  } { n + 2  } b _n + \frac { 3  } { ( n + 2 ) ^2 ( n + 3 )  } 
\end{aligned}</script><p>算到这里,我们可以很轻易使用数学归纳法算出$b _n \leq \frac { 1  } { 4 n  } $,这个精度已经挺不错的了,但是也让人觉得很不满意,因为这个误差项怎么和估计项是同阶的啊.</p>
<p>然后我开始估计了一下这个$b _n $的阶,因为我其实没学过什么高超的高数技巧,所以我使用了OI的一些技巧来估计,不妨假设$b _n ^2 &lt; &lt; b _n $:</p>
<p>那么这个$b _n $是$O ( \frac { \ln n  } { n ^2  } ) $级别的.</p>
<p>如何理解这个级别?考虑别乱动$b _n $的系数,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
b _{ n + 1  } & = \frac { n  } { n + 2  } b _n + \frac { 1  } { n ( n + 1 ) ( n + 2 )  } \\
( n + 1 ) ( n + 2 ) b _{ n + 1  } & = n ( n + 1 ) b _n + \frac { 1  } { n  } \\
g ( n ) & = n ( n + 1 ) b _n , g ' ( n ) & = \frac { 1  } { n  } , g ( n ) & = \ln n \\
b _n & = \frac { \ln n  } { n ^2  } 
\end{aligned}</script><p>这警戒我们以后乱估计的时候千万别把$O ( n ^{ \epsilon  } ) $和$O ( 1 ) $搞混了,警钟长鸣.</p>
<p>这个时候大概估计一下会发现$b _n \leq \frac { 3 \ln n  } { n ( n + 1 )  } $.</p>
<h4><span id="展开和收缩">展开和收缩</span></h4><h5><span id="example1平方和公式">Example1(平方和公式)</span></h5><p>我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ k = 1  } ^n k ^2 \\
& = \sum _{ k = 1  } ^n \sum _{ i = 1  } ^k k \\
& = \sum _{ i = 1  } ^n \sum _{ k = i  } ^n k \\
& = \sum _{ i = 1  } ^n \frac { 1  } { 2  } ( i + n ) ( n - i + 1 ) \\
& = \sum _{ i = 1  } ^n \frac { 1  } { 2  } ( in - i ^2 + i + n ^2 - ni + n ) \\
& = \frac { 1  } { 2  } ( \sum _{ i = 1  } ^n i - \sum _{ i = 1  } ^n i ^2 + n ^3 + n ^2 ) \\
& = \frac { 1  } { 4  } n ( n + 1 ) - \frac { 1  } { 2  } S _n + \frac { n ^3 + n ^2  } { 2  } 
\end{aligned}</script><p>整理得到$S _n $.</p>
<h5><span id="example2具体数学214">Example2(《具体数学》2.14)</span></h5><p>求$\sum _{ i = 1  } ^n i 2 ^i \ $.</p>
<h5><span id="solution-2">Solution 2</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n i 2 ^i & = \sum _{ i = 1  } ^n \sum _{ j = 1  } ^i 2 ^i \\
& = \sum _{ j = 1  } ^n \sum _{ i = j  } ^n 2 ^i \\
& = \sum _{ j = 1  } ^n ( 2 ^{ n + 1  } - 2 ^j ) \\
& = n 2 ^{ n + 1  } - ( 2 ^{ n + 1  } - 2 ) \\
& = ( n - 1 ) 2 ^{ n + 1  } + 2 
\end{aligned}</script><h5><span id="example3具体数学215">Example3(《具体数学》2.15)</span></h5><p>求$\sum _{ i = 1  } ^n i ^3 \ $.</p>
<h5><span id="solution-3">Solution 3</span></h5><script type="math/tex; mode=display">
\begin{aligned}
S ( n ) & = \sum _{ i = 1  } ^n i ^3 \\
& = \sum _{ i = 1  } ^n \sum _{ j = 1  } ^i i ^2 \\
& = \sum _{ j = 1  } ^n \sum _{ i = j  } ^n i ^2 \\
& = \sum _{ j = 1  } ^n ( \frac { n ( n + 1 ) ( 2 n + 1 )  } { 6  } - \frac { ( j - 1 ) j ( 2 j - 1 )  } { 6  } ) \\
& = \frac { n ^2 ( n + 1 ) ( 2 n + 1 )  } { 6  } - \frac { 1  } { 3  } S ( n ) + \frac { n ( n + 1 ) ( 2 n + 1 )  } { 12  } - \frac { n ( n + 1 )  } { 12  } \\
S ( n ) & = \frac { n ^2 ( n + 1 ) ^2  } { 4  } 
\end{aligned}</script><h5><span id="exampleex">ExampleEX</span></h5><p>求$\sum _{ i = 1  } ^n iq ^i ( q \ne 1 ) $.</p>
<h5><span id="solutionex">SolutionEX</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n iq ^i & = \sum _{ j = 1  } ^n \sum _{ i = j  } ^n q ^i \\
& = \sum _{ j = 1  } ^n \frac { q ^j - q ^{ n + 1  }  } { 1 - q  } \\
& = \frac { 1  } { q - 1  } \sum _{ j = 1  } ^n ( q ^{ n + 1  } - q ^j ) \\
& = \frac { 1  } { q - 1  } ( nq ^{ n + 1  } - \frac { q ^{ n + 1  } - q  } { q - 1  } ) \\

\end{aligned}</script><h5><span id="exampleex2">ExampleEX2</span></h5><p>求$\sum _{ i = 1  } ^n ( ai + b ) q ^{ i - 1  } ( q \ne 1 ) $.</p>
<h5><span id="solutionex2">SolutionEX2</span></h5><p>令$A = \frac { a  } { q - 1  } , B = \frac { b - A  } { q - 1  } $,答案为$( An + B ) q ^n - B $.</p>
<h4><span id="有限微积分">有限微积分</span></h4><h5><span id="移位算子">移位算子</span></h5><p>定义移位算子$E $，使得$Ef ( x ) = f ( x + 1 ) $.</p>
<h5><span id="差分算子">差分算子</span></h5><p>定义差分算子$\Delta f ( x ) = f ( x + 1 ) - f ( x ) $，类似于无限微积分中的D算子.</p>
<p>另外,不难发现有$\Delta = E - 1 $.</p>
<h5><span id="逆差分算子">逆差分算子</span></h5><p>定义逆差分算子$\Sigma $,可以得到有限微积分的基本定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ( x ) & = \Delta f ( x ) \Leftrightarrow \sum g ( x ) \delta x & = f ( x ) + C \\

\end{aligned}</script><p>这里的$\Sigma $又被称为不定和式,是差分等于$g $的一个函数类.</p>
<p>值得一提的是,这里的$C $与无限微积分中的$C $有一定区别,这里的$C $可以是满足$p ( x ) = p ( x + 1 ) $的任意一个函数而不非得是常数函数.</p>
<h5><span id="定和式">定和式</span></h5><p>如果$g ( x ) = \Delta f ( x ) $,那么有$\sum \nolimits _{ a  } ^b g ( x ) \delta x = f ( x ) | ^{ b  } _a = f ( b ) - f ( a ) \ $.</p>
<p>值得一提的是,如果$a \leq b $,显然有$\sum \nolimits _{ a  } ^b g ( x ) \delta x = \sum _{ x = a  } ^{ b - 1  } g ( x ) \ $.</p>
<p>但如果$a &gt; b $,那么$\sum \nolimits _{ a  } ^b g ( x ) \delta x = - \sum \nolimits _b ^a g ( x ) \delta x \ $.</p>
<p>事实上,我们一定有:$\sum \nolimits _a ^b g ( x ) \delta x + \sum \nolimits _b ^c g ( x ) \delta x = \sum \nolimits _a ^c g ( x ) \delta x \ $.</p>
<h5><span id="一些基本的公式">一些基本的公式</span></h5><p>类比无限微积分中的$D ( x ^m ) = mx ^{ m - 1  } $，有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta ( x ^{ \underline { m  }  } ) & = mx ^{ \underline { m - 1  }  } \\
\sum mx ^{ \underline { m - 1  }  } \delta x & = x ^{ \underline { m  }  } + C , m \ne 0 \\
\\

\end{aligned}</script><p>类比无限微积分中的$D ( \ln x ) = \frac { 1  } { x  } $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta ( H ( x ) ) & = x ^{ \underline { - 1  }  } & = \frac { 1  } { x + 1  } \\
\sum x ^{ \underline { - 1  }  } \delta x & = H ( x ) + C \\
\\

\end{aligned}</script><p>类比无限微积分中的$D ( e ^x ) = e ^x $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta ( 2 ^x ) & = 2 ^x , \sum 2 ^x \delta x & = 2 ^x + C \\
\Delta ( c ^x ) & = ( c - 1 ) c ^x , \sum c ^x \delta x & = \frac { c ^x  } { c - 1  } + C , c \ne 1 \\
\Delta ( c ^{ \underline { x  }  } ) & = \frac { c ^{ \underline { x + 2  }  }  } { c - x  } , \sum \frac { c ^{ \underline { x + 2  }  }  } { c - x  } \delta x & = c ^{ \underline { x  }  } + C , c - x \ne 0 \\

\end{aligned}</script><p>根据组合数公式,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta ( \binom { x  } { k  } ) & = \binom { x  } { k - 1  } \\
\sum \binom { x  } { k - 1  } \delta x & = \binom { x  } { k  } + C 
\end{aligned}</script><h6><span id="example平方和公式">Example(平方和公式)</span></h6><p>我们有:$k ^2 = k ^{ \underline { 2  }  } + k ^{ \underline { 1  }  } \ $.</p>
<p>那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _{ n - 1  } & = \sum _{ i = 0  } ^{ n - 1  } i ^2 \\
& = \sum _{ i = 0  } ^{ n - 1  } ( i ^{ \underline { 2  }  } + i ^{ \underline { 1  }  } ) \\
& = \sum \nolimits _{ 0  } ^n x ^{ \underline { 2  }  } \delta x + \sum \nolimits _{ 0  } ^n x ^{ \underline { 1  }  } \delta x \\
& = \frac { n ^\underline { 3  }  } { 3  } + \frac { n ^{ \underline { 2  }  }  } { 2  } 
\end{aligned}</script><p>整理即可得到封闭形式.</p>
<p>值得一提的是:</p>
<p>与前面的方法不同，这里没有使用三次的二项式公式，而是使用了二次的斯特林公式负责将一般幂转化为下降幂.</p>
<h5><span id="高阶差分">高阶差分</span></h5><p>考虑一阶差分是$\Delta f ( x ) = f ( x + 1 ) - f ( x ) $,那么二阶差分就是$\Delta ^2 f ( x ) = f ( x + 2 ) - 2 f ( x + 1 ) + f ( x ) $.</p>
<p>类似地,我们可以通过归纳法证明$\Delta ^n f ( x ) = \sum _{ k  } \binom { n  } { k  } ( - 1 ) ^{ n - k  } f ( x + k ) \ $.</p>
<p>事实上有一种更简单的证明方法,由于$\Delta = E - 1 $,于是$\Delta ^n = ( E - 1 ) ^n = \sum _{ k  } \binom { n  } { k  } ( - 1 ) ^{ n - k  } E ^k \ $,由于$E ^k f ( x ) = f ( x + k ) $,即可证明原式.</p>
<p>另外,不难发现如果$f ( x ) $是一个关于$x $的$d $次多项式,那么$\Delta f ( x ) $是一个$d - 1 $次多项式.同理,$\Delta ^d f ( x ) $会是一个常数而$\Delta ^{ d + 1  } f ( x ) $会是$0 $,这个发现引出了牛顿级数.</p>
<h6><span id="exampleyloi2020灼">Example([yLOI2020]灼)</span></h6><p>首先不难发现对于一个位置,有意义的只有相邻的两个虫洞,设这两个位置分别为$x _1 , x _2 $.</p>
<p>不难写出期望转移式子:$f _i = \cfrac { 1  } { 2  } ( f _{ i - 1  } + f _{ i + 1  } ) + 1 $,并且$f _{ x _1  } = f _{ x _2  } = 0 $.</p>
<p>接下来如何做呢?</p>
<p>我们先对第一个式子进行变形:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _i & = \cfrac { 1  } { 2  } ( f _{ i - 1  } + f _{ i + 1  } ) + 1 \\
2 f _i & = f _{ i - 1  } + f _{ i + 1  } + 2 \\
f _i - f _{ i - 1  } & = f _{ i + 1  } - f _i + 2 \\
\Delta f _{ i - 1  } & = \Delta f _{ i  } + 2 \\
\Delta f _i - \Delta f _{ i - 1  } & = - 2 \\
\Delta ^2 f _{ i - 1  } & = - 2 
\end{aligned}</script><p>$f $的二阶差分是常数,也就是说$f $是二次多项式,不难求得其二次项系数为$- 1 $又知道两个零点,显然可以得到$f $的表达式.</p>
<h5><span id="牛顿级数">牛顿级数</span></h5><p>令$f ( x ) = \sum _{ 0 \leq i \leq d  } a _i x ^i \ $.而由于有斯特林数可以进行幂和下降幂的转换,则我们可以将其改写为$f ( x ) = \sum _{ 0 \leq i \leq d  } b _i x ^{ \underline { i  }  } \ $.</p>
<p>我们设$c _i = i ! b _i $,于是有:$f ( x ) = \sum _{ 0 \leq i \leq d  } c _i \binom { x  } { i  } \ $.</p>
<p>也就是说,任何多项式都可以表示为二项式系数的倍数之和,我们称这样的展开式为$f ( x ) $的牛顿级数.</p>
<p>于是不难发现有:$\Delta ^n f ( x ) = \sum _{ 0 \leq i \leq d  } c _i \binom { x  } { i - n  } \ $.如果我们令$x = 0 $,则有:$\Delta ^n f ( 0 ) = \begin{cases}c _n &amp; n \leq d \ 0 &amp; n &gt; d \end{cases} $.那么牛顿级数的另一种表示即:$f ( x ) = \sum _{ 0 \leq i \leq d  } \Delta ^i f ( 0 ) \binom { x  } { d  } \ $.</p>
<p>另外,如果我们展开一下$c _n = \Delta ^n f ( 0 ) $,我们可以得到公式:</p>
<p>$\sum _{ k  } \binom { n  } { k  } ( - 1 ) ^k ( \sum _{ 0 \leq i \leq n  } c _i \binom { k  } { i  } ) = ( - 1 ) ^n c _n , n \in \mathbb { N  } \ $.</p>
<p>如果我们将多项式还原,由于$a _n = b _n $,有:</p>
<p>$\sum _{ k  } \binom { n  } { k  } ( - 1 ) ^k ( \sum _{ 0 \leq i \leq n  } a _i k ^i ) = ( - 1 ) ^n n ! a _n , n \in \mathbb { N  } \ $.</p>
<p>另外,如果$x \in \mathbb { N  } $,那么我们有:$f ( x ) = \sum _{ 0 \leq k  } \Delta ^k f ( 0 ) \binom { x  } { 0  } $,根据多项式推理法,这个公式对$\forall x \in \mathbb { Z  } $都成立.</p>
<p>于是我们可以类似泰勒级数写出无限牛顿级数:</p>
<script type="math/tex; mode=display">
g ( a + x ) = \sum _{ 0 \leq k  } \cfrac { \Delta ^k g ( a )  } { k !  } x ^{ \underline { k  }  }</script><h6><span id="example">Example</span></h6><p>求$\sum _{ k  } \binom { n  } { k  } \binom { r - sk  } { n  } ( - 1 ) ^k , n \in \mathbb { N  } \ $.</p>
<p>如果我们令$f ( k ) = \binom { r - sk  } { n  } = \sum _{ 0 \leq i \leq n  } a _i k ^i \ $,不难发现$a _n = \cfrac { ( - 1 ) ^n s ^n  } { n !  } $,于是显然原式$= s ^n $.</p>
<h5><span id="分部求和法则abel求和法">分部求和法则(Abel求和法)</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\Delta ( uv ) & = u ( x + 1 ) v ( x + 1 ) - u ( x ) v ( x ) \\
& = u ( x + 1 ) v ( x + 1 ) - u ( x ) v ( x + 1 ) + u ( x ) v ( x + 1 ) - u ( x ) v ( x ) \\
& = v ( x + 1 ) \Delta u + u ( x ) \Delta v & = Ev \Delta u + u \Delta v \\

\end{aligned}</script><p>两边取不定和，即可得到分部求和法则:</p>
<p>$\sum u \Delta v = uv - \sum Ev \Delta u \ $.</p>
<p>分部求和用一般和式表达如下,下式又被称为Abel求和法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = l  } ^{ r - 1  } ( a _{ i + 1  } - a _i ) b _i & = a _r b _r - a _l b _l - \sum _{ i = l  } ^{ r - 1  } a _{ i + 1  } ( b _{ i + 1  } - b _i ) \\
\sum _{ i = l  } ^{ r - 1  } ( \Delta a _i ) b _i & = a _r b _r - a _l b _l - \sum _{ i = l  } ^{ r - 1  } a _{ i + 1  } ( \Delta b _i ) 
\end{aligned}</script><p>对于$l = 0 , r = n , a _0 = b _0 = 0 $的特殊情况,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 0  } ^{ n - 1  } ( \Delta a _i ) b _i & = a _n b _n - \sum _{ i = 0  } ^{ n - 1  } a _{ i + 1  } ( \Delta b _i ) \\
\sum _{ i = 1  } ^n a _i ( b _{ i + 1  } - b _i ) & = a _n b _n - \sum _{ i = 0  } ^{ n - 1  } ( \Delta a _i ) b _i 
\end{aligned}</script><p>取两组数列$\alpha , \beta $,并令$\sum _{ i = 1  } ^n \beta _i = B _i $,立刻有:</p>
<script type="math/tex; mode=display">
\sum _{ i = 1  } ^n \alpha _i \beta _i = \alpha _n B _n - \sum _{ i = 1  } ^{ n - 1  } ( \alpha _{ i + 1  } - \alpha _i ) B _i</script><h6><span id="example1">Example1</span></h6><p>求$\sum _{ k = 0  } ^n k 2 ^k \ $.</p>
<p>根据分部求和法则，我们有:</p>
<p>$\sum x 2 ^x \delta x = x 2 ^x - \sum 2 ^{ x + 1  } \delta x = x 2 ^x - 2 ^{ x + 1  } + C \ $.</p>
<p>改为定和式形式，显然有:</p>
<p>$\sum _{ k = 0  } ^n k 2 ^k = \sum \nolimits _0 ^{ n + 1  } x 2 ^x \delta x = ( n + 1 ) 2 ^{ n + 1  } - 2 ^{ n + 2  } + 2 = ( n - 1 ) 2 ^{ n + 1  } + 2 \ $.</p>
<h6><span id="example2">Example2</span></h6><p>求$\sum _{ k = 0  } ^{ n - 1  } kH _k \ $.</p>
<p>令$u ( x ) = H _x , v ( x ) = \frac { 1  } { 2  } x ^{ \underline { 2  }  } \ $.</p>
<p>带入分部求和法则，显然有:</p>
<p>$\sum xH _x \delta x = \frac { x ^\underline { 2  }  } { 2  } H _x - \frac { x ^\underline { 2  }  } { 4  } + C \ $.</p>
<p>带入即可求出原式$= \frac { n ^\underline { 2  }  } { 2  } ( H _n - \frac { 1  } { 2  } ) \ $.</p>
<h6><span id="example3具体数学223">Example3(《具体数学》2.23)</span></h6><p>求$\sum _{ i = 1  } ^n \frac { 2 i + 1  } { i ( i + 1 )  } \ $.</p>
<h6><span id="solution-3">Solution 3</span></h6><p>令$u = ( 2 n + 1 ) , v = - \frac { 1  } { i  } $,则$\Delta u = 2 , \Delta v = \frac { 1  } { i ( i + 1 )  } $.</p>
<p>根据分部求和法则,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n \frac { 2 i + 1  } { i ( i + 1 )  } & = ( 2 n + 3 ) \times ( - \frac { 1  } { n + 1  } ) + 3 - \sum _{ i = 1  } ^n ( - \frac { 2  } { i + 1  } ) \\
& = - \frac { 2 n + 3  } { n + 1  } + 2 H _n + \frac { n + 3  } { n + 1  } & = 2 H _n - \frac { n  } { n + 1  } 
\end{aligned}</script><h6><span id="problem-4具体数学224">Problem 4(《具体数学》2.24)</span></h6><p>求$\sum _{ i = 0  } ^{ n - 1  } \frac { H _k  } { ( k + 1 ) ( k + 2 )  } \ $.</p>
<h6><span id="solution-4">Solution 4</span></h6><p>令$u = H _n , v = - \frac { 1  } { n + 1  } , \Delta u = \frac { 1  } { n + 1  } , \Delta v = \frac { 1  } { ( n + 1 ) ( n + 2 )  } \ $.</p>
<p>根据分部求和法则,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 0  } ^{ n - 1  } \frac { H _k  } { ( k + 1 ) ( k + 2 )  } & = - \frac { H _n  } { n + 1  } - \sum _{ i = 0  } ^{ n - 1  } ( - \frac { 1  } { ( i + 2 ) ( i + 1 )  } ) \\
& = - \frac { H _n  } { n + 1  } + \sum _{ i = 0  } ^{ n - 1  } ( \frac { 1  } { i + 1  } - \frac { 1  } { i + 2  } ) \\
& = - \frac { H _n  } { n + 1  } + H _n - ( H _n - 1 + \frac { 1  } { n + 1  } ) \\
& = 1 - \frac { H _n + 1  } { n + 1  } 
\end{aligned}</script>]]></content>
      <categories>
        <category>具体数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心与构造</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E8%B4%AA%E5%BF%83%E4%B8%8E%E6%9E%84%E9%80%A0/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="贪心">贪心</span></h2><h3><span id="排除不优策略">排除不优策略</span></h3><h5><span id="example1cf1612e">Example1(CF1612E)</span></h5><p>先把期望写开,我们发现如果选择了$t $个消息$a _1 , a _2 , . . . , a _t $,那么答案就是$\sum [ \exists j , m _i = a _j ] \cfrac { \min ( t , k _i )  } { t  } $.显然如果$t $固定,那么每个$a _j $的贡献是独立的.于是只需要枚举$t $然后取贡献最大的.</p>
<p>但是,如果$t &gt; \max \{ k _i \} $,这个时候$t - 1 $的答案是$t - 1 $个数之和除以$t - 1 $,$t $的答案是这$t - 1 $个数之和加上另一个更小的数除以$t $,而前者肯定比后者大,于是不用再进一步枚举.</p>
<p>于是复杂度$O ( n \max \{ k _i \} ) $.</p>
<h5><span id="example2cf1592f1">Example2(CF1592F1)</span></h5><p>首先,二操作和三操作一定没有用,因为它们都可以用两次一操作代替.</p>
<p>再注意到四操作是可能有用的,因为我们拿一操作模拟四操作需要四金币的代价,而用一个四操作只需要三个金币.但是,由于拿一操作模拟四操作的时候,需要全局做一遍一操作,所以如果有两个四操作,模拟的时候两遍全局操作就可以抵消.因此,我们模拟两次四操作只需要六个金币的代价.换句话说,我们如果要用到四操作,只会使用一次或零次.</p>
<p>首先区间异或可以差分($b _{ i , j  } = a _{ i , j  } \oplus a _{ i + 1 , j  } \oplus a _{ i , j + 1  } \oplus a _{ i + 1 , j + 1  } $)后转化为四个点的异或操作,而由于一操作操作了左上角的矩阵,所以它实际上是对三个在原矩阵外的点和一个在矩阵内的点操作.我们注意到如果矩阵内已经全都是$0 $了,那么矩阵外不可能是$1 $,也就是原矩阵也全都是$0 $了.</p>
<p>枚举一下最后的操作是啥即可,另外注意到这一步操作必须把四个点全部变成$0 $才有用,不然还需要拿一操作去补,就不如直接用一操作.</p>
<h5><span id="example3cf1592f2">Example3(CF1592F2)</span></h5><p>首先注意到,如果我们对$( x , y ) $使用操作四,那我们不可能再对一个$( x , i ) $使用操作四,不然我们就可以用四次操作一代替这两次操作四.</p>
<p>再通过上面的分析,注意到只有$b _{ x , y  } , b _{ n , y  } , b _{ x , m  } $都是$1 $的时候才会使用四操作,不然,如果我们使用四操作,必然会再需要一个一操作来补,这样就是至少三个金币的代价.而由于这四个点中最多只有三个$1 $,所以一定不如直接用一操作来的划算.不然,如果三个都是$1 $,那么用了就一定不亏,因为无论如何也需要三次一操作,而就算我们用完后$b _{ n , m  } $变成$1 $了,再不行也可以使用一次$1 $操作来补全.</p>
<p>因此我们现在想要选尽可能多的三操作,满足两两操作不在同一行或同一列,这显然是一个二分图匹配问题.换句话说,如果$b _{ x , y  } , b _{ n , y  } , b _{ x , m  } $都是$1 $,我们就把$x $到$y $连一条边,然后做二分图匹配,显然是最优的.</p>
<h5><span id="example4cf1666e">Example4(CF1666E)</span></h5><p>先想一下别的东西怎么求.</p>
<p>如果我们要求最大值最小或者最小值最大怎么办?我们可以二分后贪心,而显然它们的差就是一个答案的下界,问题在于这个下界是否可以取到.</p>
<p>我们冷静一下,发现在可能的方案中,第$i $条线段的右端点的位置一定是一段连续的区间.</p>
<p>设$f _i $表示第$i $个分界点可能的最小值,$g _i $表示第$i $个分界点可能的最大值.假设我们目前二分的最大值要小于等于$mx $,最小值要大于等于$mn $,那么我们有转移:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _{ i + 1  } & = \max \{ a _{ i + 1  } , f _i + mn \} \\
g _{ i + 1  } & = \min \{ a _{ i + 2  } , g _i + mx \} \\

\end{aligned}</script><p>注意到$f $与$g $的转移是无关的,而显然对于第$i $个分界点,它可以取$[ f _i , g _i ] $中一个数,一定存在一个取法使得答案能取到下界.</p>
<p>为啥呢?只需让$ans _{ i  } $表示第$i $条分界线是啥,那么我们$ans _i $是可以取$[ ans _{ i + 1  } - mx , ans _{ i + 1  } - mn ] $中的任何一个数字的,我们将其和上面求出的$[ f _i , g _i ] $求一下交集.如果交集为空,说明要么$ans _{ i + 1  } - mn &lt; f _i , f _{ i + 1  } &lt; ans _{ i + 1  } &lt; f _i + mn $,这是不可能的.另一种情况同理不可能,这就保证了一定可以取到答案.一定能使极差$\leq mx - mn $.</p>
<h5><span id="example52022zrtg十连测day7-palindrome">Example5(2022zrtg十连测day7 Palindrome)</span></h5><p>首先注意到同种字符的相对顺序不可能改变.于是最后的回文串是哪个字符对应哪个字符就可以确定.</p>
<p>这样我们的问题转化为现在有若干个点对$( l , r ) $,我们想给每一个点对赋值:$a _l = i , a _r = n - i + 1 $(注意如果$n $是奇数,那么中心点应该是$a _{ mid  } = \frac { n + 1  } { 2  } $),然后使整个序列逆序对数尽可能小.</p>
<p>接下来讨论一下两个点对$( l _1 , r _1 ) $,$( l _2 , r _2 ) $之间的三种可能的关系:不交,包含,相交且不包含.会发现若$l $小则让$a _l $尽可能小就是最优的.</p>
<h5><span id="example623省选10连测-day9-c">Example6(23省选10连测 day9 C)</span></h5><p>强强题.</p>
<p>首先发现这个$\pm 1 $操作很奇怪.我们不妨这么考虑:设最后的答案序列为$b $,那么答案其实就是$\sum | b _i - a _i | $.这实际上是什么呢?实际上是数轴上$a _i $和$b _i $之间的距离.既然这样,那么我们同时反转$a $和$b $,这等价于翻转数轴,答案应该是不变的.这说明什么呢?如果我挑一个$a $,将它和$x $同时反转,那么答案不变.这么做后我们可以直接清空所有$a $的最高位,只剩下$x $可能有最高位.</p>
<p>那$x $的最高位一定会让若干$a $往上变成它.注意到最多只会有一个$a $会向上满足$x $的最高位.证明的话同样考虑取反,如果有两个$a $满足$a _i \oplus b _i $和$a _j \oplus b _j $这一位是$1 $,我们仍然考虑数轴,有$| not ( b _i ) - a _i | \leq | a _i - b _i | $,这由$a _i \oplus b _i $最高位是$1 $导出.因此两个都取反一定不劣.</p>
<p>再考虑,我们会让哪个$a $上去满足呢?自然的想法是取代价最小的那个,因为就算它不是,这里自然地有一个待悔贪心:其它的$a $可以再变成它.</p>
<p>于是就做完了.</p>
<h5><span id="example7异或粽子">Example7(异或粽子)</span></h5><h5><span id="example8">Example8()</span></h5><h3><span id="带悔贪心">带悔贪心</span></h3><h5><span id="example1">Example1</span></h5><p>给定一个数组,给出若干次操作$[ l , r , k ] $表示可以将$a [ l \cdots r ] $减一进行至多$k $次,要求操作过程中数组时刻非负,求最大能做出的操作次数.</p>
<p>这题的做法是,我们每次遇到一个左端点,就将所有以它为左端点的区间全部操作,并把这些区间按照右端点为关键字扔进堆里.每次遇到一个地方的值变成了负的,就从堆中找右端点最大的区间杀掉.容易发现这样是正确的.</p>
<p>为啥能想到带悔贪心呢?主要是因为我们发现不同的区间会彼此影响,而且有一个限制性的长期条件.因此先不管这个条件,最后再通过调整堆将这个条件调整至合法.</p>
<h5><span id="example2">Example2</span></h5><p>给定一个序列,每次可以选择相邻的两个数,使其中一个$- 1 $,另一个$- 2 $,求使得整个序列都小于等于$0 $的最小操作次数.</p>
<p>我们明确一下带悔贪心的基本条件:</p>
<ol>
<li><p>首先,贪心是需要保证局部最优性的,并且需要保证不考虑全局的前提下,求局部最优解就是全局最优解的一部分.按我的理解,贪心是和dp一样需要有无后效性的,你前面的决策做了就是做了,带悔贪心只能改变后面的决策的形态,而不能改变前面的决策.</p>
</li>
<li><p>不同的操作之间会彼此影响,并且我们在不看全局的状态的前提下,无法第一时间确定当前对后面最优影响的操作是啥.通常情况下,感觉带悔贪心的每个操作会影响的操作是有限的.</p>
</li>
<li><p>感觉能做带悔贪心的好像很多都可以设计一个复杂度更高的dp.不过这个似乎很合理,因为(2)告诉我们它能影响的操作大概率是不多的.</p>
</li>
</ol>
<p>我们看这个题,第一点基本随便编个贪心都可以满足:就是先不断做$( - 2 , - 1 ) $,最后不够了再加个$( - 1 , - 2 ) $补一下.而第二点呢?显然每个地方的操作只会影响前后两个位置接下来的操作(当然,被影响到的位置有可能继续影响别人).</p>
<p>那么为什么能想到带悔贪心呢?其实只要发现有的时候$( - 1 , - 2 ) + ( - 1 , - 2 ) $比$( - 2 , - 1 ) $更优秀就自然能引到带悔贪心了.</p>
<p>好,现在我们仍然是做那个看上去就不太对的贪心:先不断做$( - 2 , - 1 ) $,最后不够了再加个$( - 1 , - 2 ) $补一下.我们通过样例以及其它栗子发现:有的时候$( - 1 , - 2 ) + ( - 1 , - 2 ) $比$( - 2 , - 1 ) $更优秀,这启发我们:能不能在做后面位置的时候将前面的$( - 2 , - 1 ) $变成$( - 1 , - 2 ) + ( - 1 , - 2 ) $呢?注意这里我们不能直接换:带悔贪心要求我们不能改变前面操作的状态.因此我们引入一个操作:如果当前前面存在一个$( - 2 , - 1 ) $操作,那么我可以在这个位置进行一个$( 0 , - 3 ) $操作.显然$( 0 , - 3 ) + ( - 2 , - 1 ) = ( - 1 , - 2 ) + ( - 1 , - 2 ) $.我们完成了反悔的操作!</p>
<p>但是,我们直接认为$( - 1 , - 2 ) $不可能反悔的原因是:它是一个补位操作,一个位置只有可能进行一次,这玩意不可能能反悔.可现在不一样了,我们的操作序列中有了两个$( - 1 , - 2 ) + ( - 1 , - 2 ) $,怎么办呢?你当然可以对着这个操作再观察怎么反悔,但事实上有更高效的思路:我们直接考虑$( - 3 , 0 ) $怎么反悔.这个看上去很疑惑:我们为了使$( - 2 , - 1 ) $变成$( - 1 , - 2 ) + ( - 1 , - 2 ) $而引入了一个新操作,这个新操作在原序列中是不存在的:它甚至有个很奇怪的限制条件:必须在前面存在$( - 2 , - 1 ) $的时候才可以发动.那为什么我们可以直接考虑它如何反悔呢?</p>
<p>先看第一个问题:$( - 3 , 0 ) $这个技能的发动是有前提条件的:前面必须有$( - 2 , - 1 ) $才可以.但你注意我们是在贪心啊,我们很清楚每个地方用了几个$( - 2 , - 1 ) $,也很清楚每个地方用了几个$( - 3 , 0 ) $.</p>
<p>再看第二个问题:这个新操作为何能反悔呢?其实第一个问题解决这个问题也就解决了,由于贪心,我们知道了巨大多的信息,这个信息量是dp不能比的.因此这个条件如果dp的话看上去需要多记一维,但是贪心完全不用.</p>
<p>我们可以根据类似上面的操作迅速编出它怎么反悔:$( - 3 , 0 ) \rightarrow ( - 1 , - 2 ) + ( - 2 , - 1 ) = ( - 3 , 0 ) + ( 0 , - 3 ) $,或者$( - 3 , 0 ) \rightarrow ( - 1 , - 2 ) + ( - 1 , - 2 ) + ( - 1 , - 2 ) = ( - 3 , 0 ) + ( 0 , - 3 ) + ( 0 , - 3 ) $.</p>
<p>最后遇到一个点,能用$( 0 , - 3 ) $就用$( 0 , - 3 ) $,不够用的再补齐.这个原因也很简单:如果我们在这里不用$( - 3 , 0 ) $而用其它的代替的话,你会发现无论如何都等价于$( - 3 , 0 ) $然后后面再反悔.</p>
<p>再总结一下这个题中包含的带悔贪心:</p>
<p>这个带悔贪心包含若干个操作,这些操作之间可以<strong>互相转化</strong>,使得在前面进行的一个操作可以和在后面进行的一个操作一起,等价于前面进行了另一个操作.如同最经典的带悔贪心的模型,我们每次进行一个操作后,都会加入若干个可以进行的操作(在这个题中,一开始就在每个位置加入了无穷多的$( - 2 , - 1 ) $和$( - 1 , - 2 ) $的操作)(写一下代码就会发现,我们其实记录下了每个位置插入了多少个可行的$( - 3 , 0 ) $操作).这些操作构成一个封闭的东西,使得反悔任意一个操作的反悔操作本身都可以使用若干操作表示出来.</p>
<h3><span id="寻找下界并证明">寻找下界并证明</span></h3><h5><span id="example1eer1代价">Example1([EER1]代价)</span></h5><p>给你一个长度为$n $的序列$a $,保证$a _1 = a _n = 1 $.每次你可以选择一个$i ( 1 &lt; i &lt; n ) $将$a _i $删去并付出$a _{ i - 1  } a _i a _{ i + 1  } $的代价.删去$a _i $后序列两端会接起来,求删成两个$1 $的最小代价.</p>
<p>首先注意到,如果有一个$1 &lt; i &lt; n $满足$a _i = 1 $,那这个点最后删显然更优秀:如果我们把它删了,不仅肯定比最后删它劣(最后删它只需要$1 $的代价),还有可能使原本能和它相邻的点这次和一个更大的数相邻了,显然不优秀.因此整个序列被若干个$1 $所划分.接下来我们只考虑中间所有数$\geq 2 $的情况.</p>
<p>再思考一个事实:当$a , b \geq 2 $时,一定有$ab \geq a + b $.而考虑每两个相邻的点一定会被乘起来扔进答案,也就是说答案下界一定是$\sum _{ i = 2  } ^{ n - 2  } a _i a _{ i + 1  } + \min _{ i = 2  } ^{ n - 1  } { a _i  } $.注意到这个下界是可以构造出来的:找到每一段最小的点然后从左/右挨个删点即可.</p>
<h5><span id="example2loj3318">Example2(loj3318)</span></h5><p>首先考虑:给出一个排列,从原排列换到它的最小步数一定是它的逆序对数.因为我们可以每次找到应当被放到边界的点,然后不断把它换过去.</p>
<p>考虑现在构造$a $数组,每次对于还没选的最大值,显然要扔到尽可能靠后的位置,然后不断递归处理.</p>
<h5><span id="example3">Example3</span></h5><p>给定一张图,每个点上有一个权值$a _i $,我们每次可以删掉一个点以及其所有连边,代价是所有相邻的点的权值和.求删光图的最小代价.</p>
<p>首先注意到答案一共要更新边数次,不妨考虑边.</p>
<p>一条边可能对答案有两种贡献,也就是与它相邻的两个点的点权.它会对答案贡献后删的那个点的点权.显然所有边取最小值时是一个下界.这个下界是可以构造出来的:我们按照点权从大往小删即可.</p>
<h5><span id="example4uoj280题目难度排序">Example4([UOJ280]题目难度排序)</span></h5><p>先考虑$a _i $互不相同,那可以每次选一个最大的数,满足它加进去后整个集合的中位数$\leq $还没选的数的最小的数.注意到这里一定能构造出合法解,且如果选了另一个数一定更劣.</p>
<p>那如果可能存在$a _i $相同呢,我们先按照大小排序,然后选出一对小于等于所有数的中位数的$( a _i , a _{ i + 1  } ) $,然后这么选:$a _i , a _{ i + 1  } , a _n , a _{ i - 1  } , a _{ n - 1  } , a _{ i - 2  } . . . $,一直到左边全部被填完,然后按照互不相同的方法填.</p>
<p>首先这么做一定是合法解,因为中位数会在$a _i $上震荡.其次这么做为什么是最优解呢?我们考虑一开始如果选了另一对大于中位数的相等的数,那一定不合法,因为最后会剩一些小数,会把这些东西震荡到一个更小的中位数.而如果一开始选了一个单点,接下来一定要不断选更大的点,这样比它小的数就没法加进去了.而等左边全部被填完后,由于这个时候中位数已经没有办法保持不变了,所以必定接下来要增大,而中位数不断增大只能按照互不相同的方法填.</p>
<h5><span id="example5cf1098deels">Example5([CF1098D]Eels)</span></h5><p>首先,我们猜测:我们一开始先让最小的两个互相吃,可能是最优秀的.接下来我们尝试证明这个猜测.</p>
<p>首先,对于一个不危险的操作来说,假设这次操作的两个数是$a $和$b $,其中$2 a &lt; b $.我们尝试判断一下这个操作满足什么条件.这个时候,注意到如果$b $之前吃过别的鱼,假设是$c $和$d $(不妨假设$d \geq c $),有$b = c + d $,由鸽笼原理,发现$d &gt; a $.这意味着:如果$a $都没被操作掉,那么$d $必不可能被操作掉,这也就是说$b $不可能出现.因此$b $在这次操作前一定没有吃过别的鱼.那互相残杀的鱼的重量就都一定小于$b $,且$a $就是所有一开始小于$b $的鱼的和.</p>
<p>我们按照鱼的重量从小到大排序,你会发现一次不危险操作涉及到的鱼一定是一条满足自己大于比自己小的所有鱼的重量和的两倍的鱼,我们称其为大鱼,也就是$w _i &gt; 2 \sum _{ j = 1  } ^{ i - 1  } w _j $,我们对此计数就可以完成一次操作.</p>
<p>那么问题又来了,这个东西一定是最小的吗?</p>
<p>我们考虑一个事实:我们要最小化不危险操作的数量,但很明显的一点是:每只大鱼都必须经过一次不危险操作才能变成一只更大的鱼,当然,如果它选择自杀,那么吃掉它的那只鱼会继承它的地位,在不死的情况下仍然要进行至少一次不危险操作才能变成更大的鱼,因此这显然是一个下界.而又可以构造出答案.</p>
<p>那么如何多组询问呢?首先发现大鱼不会很多,最多$\log w $个,我们考虑一下这个两倍的用处,我们按照值域$[ 1 , 1 ] , [ 2 , 2 ] , [ 3 , 4 ] , [ 5 , 8 ] , . . . , [ 2 ^{ k - 1  } + 1 , 2 ^k ] $将鱼分成若干组,不难发现大鱼只有可能是每个区间中最小的数字,因为不然,那么这个区间中最小的数字乘以二一定比它自己大.这个东西就很好维护了.</p>
<h5><span id="example6称球游戏">Example6(称球游戏)</span></h5><p>给定$n $个球(其中有一个次品球,重量和其它球不一样)和一架天平,求最少通过多少次操作才能找到这个球.</p>
<p>我们通过这个游戏来引入信息论和判定树作为一个构造下界的工具.</p>
<p>首先引入一套语言体系来简化文字:</p>
<ol>
<li><p>$S $表示标准球.</p>
</li>
<li><p>$&lt; A , B &gt; $表示称量集合$A $和集合$B $,$&lt; A , B &gt; = 0 $表示平衡,$&lt; A , B &gt; = A $表示$A $较重,$&lt; A , B &gt; = B $表示$B $较重.</p>
</li>
</ol>
<h6><span id="信息论">信息论</span></h6><p>如果一个随机变量$x $有$n $种取值,出现概率分别为$p _1 , p _2 , \cdots , p _n $,则其熵为$H ( x ) = f ( p _1 , p _2 , \cdots , p _n ) = \sum { C p _i \ln \frac { 1  } { p _i  }  } $,$C $为正整数,通常取$1 $.(事实上这里的定义与真正的信息论的定义有一定的差别,不过原理是类似的,这里简化了一些.)</p>
<p>定理1:在得到关于随机变量$x $的一个熵为$h $的信息后,$x $的熵会减少$h $.</p>
<p>定理2:当一个随机变量的各种取值概率相等时,它的熵最大.</p>
<p>用信息论估计一下称球游戏的上界,如果我们已知次品轻重,由于一共有$n $个球,每个球等概率成为次品,因此总熵是$\ln n $,每称一次能得到的信息有三种:平衡,左边重,右边重,因此称一次能得到的熵是$\ln 3 $,也就是说我们至少要猜$\frac { \ln n  } { \ln 3  } = \log _3 n $次.如果我们不知道次品的轻重,那么至少要猜$\frac { \ln 2 n  } { \ln 3  } = \log _3 2 n $次.</p>
<p>这就是称球游戏的信息论下界,接下来我们要做的无非就是证明这个下界能否取得到.</p>
<h6><span id="判定树">判定树</span></h6><p>我们考虑将称量的决策树建立出来,每个叶子节点表示我们得到的答案,每个非叶子节点代表一次称量,每个非叶子节点有三个儿子,分别表示如果称量的结果是左偏/右偏/平衡时,接下来的策略.显然判定树的深度就是最坏情况下称量的次数.</p>
<p>$n $个叶子的树的最小深度是$\lceil \log _3 n \rceil $,这得出和信息论一样的下界估计(信息论的结论好像就是拿哈夫曼树证明的,不太懂).</p>
<h6><span id="子问题1已知次品重量">子问题1(已知次品重量)</span></h6><p>不妨假设$f ( n ) $表示有$n $个球的最少次数,注意到$f ( 3 ) = 1 $.</p>
<p>根据信息论,$f ( n ) \geq \lceil \log _3 n \rceil $,下面证明等号成立:</p>
<p>首先考虑证明$f ( 3 ^m ) = m $,$m = 1 $时已经得证.$m &gt; 1 $时,考虑将所有球分成等数量的三份,称量其中两份.由于已知次品重量,这一次就可以找到次品在哪一份中,因此$f ( 3 ^m ) \leq f ( 3 ^{ m - 1  } ) + 1 $.综合信息论下界$f ( 3 ^m ) \geq m $,我们不难得出以上结论.至于$n \ne 3 ^m $的情况,我们类似这个过程按照$n \bmod 3 $的值讨论一下即可,于是有$f ( n ) \leq f ( \lceil \frac { n  } { 3  } \rceil ) + 1 $.</p>
<h6><span id="子问题2不知次品轻重已有一个标准球需知道次品轻重">子问题2(不知次品轻重,已有一个标准球,需知道次品轻重)</span></h6><p>根据信息论下界,$f ( n ) \geq \lceil \log _3 2 n \rceil $.</p>
<p>比起上面的问题,这个问题在于:如果我们称量不平衡,是不知道次品球在两堆中的哪一堆的.但我们思考到:虽然我们不知道在哪一堆,但我们得到了一个额外的信息:如果它在哪一堆,它的重量我们也就知道了.</p>
<p>下面证明引理:</p>
<p><strong>引理</strong></p>
<p>有两堆球,第一堆有$n $个球,第二堆有$m $个,已知其中有一个次品,并且次品如果在第一堆中只可能是重球,在第二堆中只可能是轻球.设此时的称量次数是$g ( n , m ) $,则$g ( n , m ) = \lceil \log _3 ( n + m ) \rceil $.</p>
<p>先证明信息论下界,不难发现仍然是$g ( n , m ) = \lceil \log _3 ( n + m ) \rceil $.</p>
<p>首先不难发现,$g ( 1 , 0 ) = g ( 0 , 1 ) = 0 , g ( 1 , 1 ) = g ( 2 , 0 ) = g ( 0 , 2 ) = 1 $.</p>
<p>仍然使用数学归纳,假设$n + m &lt; k ( k \geq 3 ) $的时候成立,我们接下来证明$n + m = k $的时候仍然成立.</p>
<p><strong>情况1</strong></p>
<p>若$n = 3 p , m = 3 q $,我们将$n $分成等数量的三堆:$A _1 , B _1 , C _1 $,将$m $分成等质量的三堆$A _2 , B _2 , C _2 $.</p>
<p>接下来称量$\lang A _1 + A _2 , B _1 + B _2 \rang $.</p>
<ol>
<li><p>如果$\langle A _1 + A _2 , B _1 + B _2 \rang = 0 $,那么答案在$C _1 \cup C _2 $中,此时有$g ( n , m ) = g ( \frac { n  } { 3  } , \frac { m  } { 3  } ) + 1 $.</p>
</li>
<li><p>如果$\lang A _1 + A _2 , B _1 + B _2 \rang = A _1 + A _2 $,由于若次品在$A _2 $中,那么它不可能是重球,因此次品不可能在$A _2 $中,同理不可能在$B _1 $中,只可能在$A _1 \cup B _2 $中,此时有$g ( n , m ) = g ( \frac { n  } { 3  } , \frac { m  } { 3  } ) + 1 $.</p>
</li>
<li><p>$\lang A _1 + A _2 , B _1 + B _2 \rang = B _1 + B _2 $,同理.</p>
</li>
</ol>
<p>此时数学归纳成立.</p>
<p><strong>情况2</strong></p>
<p>$n = 3 p + 1 , m = 3 q + 2 $.此时我们将第一堆分成$A _1 ( p ) , B _1 ( p ) , C _1 ( p + 1 ) $,将第二堆分成$A _2 ( q + 1 ) , B _2 ( q + 1 ) , C _2 ( q ) $,然后$\lang A _1 + A _2 , B _1 + B _2 \rang $,接下来和情况1一样,于是有$g ( n , m ) = \max \{ g ( p , q + 1 ) , g ( p + 1 , q ) \} = \lceil \log _3 \frac { n + m  } { 3  } \rceil + 1 $.</p>
<p>同理,当$n , m \bmod 3 $的值是其它组合的时候,也都可以类似操作.引理得证.</p>
<p>由此引理得证.</p>
<p>回到原问题,进行数学归纳,我们继续来讨论$n \bmod 3 $的值.</p>
<p><strong>情况1</strong></p>
<p>当$n = 3 p $时,直接分成$A ( p ) , B ( p ) , C ( p ) $,然后$\lang A , B \rang $.如果平衡则接下来需要$f ( p ) = \lceil \log _3 2 p \rceil $次,不然根据引理,需要$\lceil \log _3 ( p + p ) \rceil $次,因此$f ( n ) = \lceil \log _3 2 p \rceil + 1 = \lceil \log _3 6 p \rceil = \lceil \log _3 2 n \rceil $.</p>
<p><strong>情况2</strong></p>
<p>当$n = 3 p + 1 $时,一种自然的想法是分成$A ( p + 1 ) , B ( p ) , C ( p ) $,但是这种想法是错误的!我们考虑判定树,这种情况下,所有的叶子被分成了$2 p + 2 , 2 p , 2 p $,这显然是不优秀的.正确的做法是分成$A = \{ S , 1 , \cdots p \} , B = \{ p + 1 , \cdots 2 p + 1 \} , C = \{ 2 p + 2 , \cdots 3 p + 1 \} $.由于存在标准球,此时如果$\lang A , B \rang = A  or  B $,那么转化成$g ( p , p + 1 ) = \lceil \log _3 ( 2 p + 1 ) \rceil $,不然转化成$f ( p ) = \lceil \log _3 2 p \rceil $.</p>
<p>剩下的情况也都类似,该问题解决.</p>
<h6><span id="子问题3不知次品轻重无标准球需知道次品轻重">子问题3(不知次品轻重,无标准球,需知道次品轻重)</span></h6><p>考虑在第一次称量后,无论结果如何都会得到一个标准球,因此后面的问题都等价于子问题2,只需考虑第一次操作.再思考一下不难发现,在子问题2中,只有$n \bmod 3 = 1 $的时候才会需要用到标准球,因此只有这里需要多一步.拟合一下函数,可以得到该问题$f ( n ) = \lceil \log _3 ( 2 n + 2 ) \rceil $.</p>
<h6><span id="子问题4不知次品轻重已有一个标准球无需知道次品轻重">子问题4(不知次品轻重,已有一个标准球,无需知道次品轻重)</span></h6><p>这个问题复杂一些,而且难以估计下界.但我们可以用一下最优化dp来估计下界.</p>
<p>首先假设有无穷个标准球,我们每次将$a $个球放左边,$b $个球放右边,$a \leq b $,在左边补上$b - a $个标准球.</p>
<ol>
<li><p>如果天平不平衡,转化为引理问题(因为此时找到次品是谁必然知道它的轻重),因此需要$\lceil \log _3 ( a + b ) \rceil + 1 $步.</p>
</li>
<li><p>如果天平平衡,需要$f ( n - a - b ) + 1 $步.</p>
</li>
</ol>
<p>我们有$f ( n ) = \min _{ a , b  } \{ \max \{ f ( n - a - b ) , \lceil \log _3 ( a + b ) \rceil \} \} + 1 $.</p>
<p>注意到接下来的步数只与$a + b $有关,取$b - a \leq 1 $,于是一个标准球已经够用了.</p>
<p>构造方程后手算几项,注意到$f ( n ) = \lceil \log _3 ( 2 n - 1 ) \rceil $.</p>
<p>接下来归纳法就简单了,只需要对于$n \bmod 3 $的余数讨论一下,然后再讨论一下$a $的取值即可.</p>
<h5><span id="example7ucup-3rd-stage-8-h">Example7(Ucup 3rd Stage 8 H)</span></h5><p>每次可以询问一个区间,交互库返回这个区间中的次大元素所在位置,求$n $所在位置.要求询问次数$\leq \lceil 1 . 5 \log _2 n \rceil $,询问区间总长度$\leq 3 n $.</p>
<p>一个自然的想法是先问一下全局次大值,然后二分,但这样询问区间总长度就会爆掉.</p>
<p>因此考虑设$T ( n ) $表示长度为$n $的,已知次大值(并且次大值)的最小次数.我们考虑每次判断一下最大值在哪边,因此把这个区间拆成两半,然后询问一下次大值所在的那一半,这样就可以判断最大值在不在那一半.</p>
<p>那么我们当然有方程$T ( n ) = \min _{ m &lt; n  } \{ \max \{ T ( m ) + 1 , T ( n - m ) + 2 \} \} $.</p>
<p>当然有$m _n \leq m _{ n + 1  } $,于是直接dp即可.</p>
<h3><span id="exchange-arguments">Exchange Arguments</span></h3><h4><span id="模型1">模型1</span></h4><p>给定$n $个元素$x _1 , . . . , x _n $,以及一个定义域为这些元素的序列,定义域为有序集合的函数$F $.求出对于所有的$n $阶排列$p $,表达式$F ( \{ x _{ p _1  } , x _{ p _2  } , . . . , x _{ p _n  } \} ) $最小值.</p>
<p>事实上会发现一些NPC问题也可以直接转化为这个模型,但是并无贪心解.我们接下来考虑这个模型内哪些问题是有贪心解的.</p>
<h5><span id="example1国王游戏">Example1(国王游戏)</span></h5><p>给定$n $个二元正整数对$( a _i , b _i ) $,将它们按照任意顺序排成一列.定义排成一列的代价为每个二元组的$a $乘上序列中这个二元组之后的所有二元组的$b $之和的总和,求最小代价.$n , a _i , b _i \leq 10 ^6 $.</p>
<p>转化为上面的形式,也即:$F ( \{ ( a _1 , b _1 ) , . . . , ( a _n , b _n ) \} ) = \sum _{ 1 \leq i &lt; j \leq k  } a _i b _j $.</p>
<p>考虑调整法,令排列$( q _1 , . . . , q _n ) = ( p _1 , . . . , p _{ i - 1  } , p _{ i + 1  } , p _i , p _{ i + 2  } , . . . , p _n ) $.则:</p>
<script type="math/tex; mode=display">
F ( \{ ( a _{ p _1  } , b _{ p _1  } ) , . . . , ( a _{ p _n  } , b _{ p _n  } ) \} ) - F ( \{ ( a _{ q _1  } , b _{ q _1  } ) , . . . , ( a _{ q _n  } , b _{ q _n  } ) \} ) = a _{ p _i  } b _{ p _{ i + 1  }  } - a _{ p _{ i + 1  }  } b _{ p _i  }</script><p>因而如果$a _{ p _i  } b _{ p _{ i + 1  }  } - a _{ p _{ i + 1  }  } b _{ p _i  } &gt; 0 $,则$F ( \{ ( a _{ p _1  } , b _{ p _1  } ) , . . . , ( a _{ p _n  } , b _{ p _n  } ) \} ) &gt; F ( \{ ( a _{ q _1  } , b _{ q _1  } ) , . . . , ( a _{ q _n  } , b _{ q _n  } ) \} ) $,也就是说$( p _1 , . . . , p _n ) $不是最优解.因此只有满足$\forall 1 \leq i &lt; n $,$\cfrac { a _{ p _i  }  } { b _{ p _i  }  } \leq \cfrac { a _{ p _{ i + 1  }  }  } { b _{ p _{ i + 1  }  }  } $可能是最优解.</p>
<p>如果一个$p $满足这样的性质,则所有$\cfrac { a  } { b  } $相等的数在排列中一定是连续的一段.而根据式子,这样的排列交换$\cfrac { a  } { b  } $相等的两个位置,是不会使答案改变的.因此直接按照$\cfrac { a  } { b  } $排序即可.</p>
<p>我以前所使用的调整法大概是先构造一个贪心策略,然后证明这个策略改变后一定不优秀或更劣.但是这样对于多峰函数会卡在一个局部最优解上而找不到全局最优解.但是,如果我们说不满足这个条件的一定不是最优解(可以使用调整得到更优解),我们再证明满足这个条件(即调整过程DAG的终止点)的都是最优解,继续做下去,就是很严谨的.</p>
<p>换句话说,我们要用调整法,就一定要证明调整过程中的DAG的零出度点是最优解.</p>
<h5><span id="模型通解">模型通解</span></h5><p>设给出的元素的集合为$S $,定义$S $上的一种二元比较关系$\leq $,将所有元素按照比较关系排序.在上一个问题中,不难发现以下性质:</p>
<ol>
<li><p>强完全性:$\forall a , b \in S $,$a \leq b \lor b \leq a = 1 $.</p>
</li>
<li><p>传递性:$\forall a , b , c \in S $,$a \leq b , b \leq c \Rightarrow a \leq c $.</p>
</li>
<li><p>$\forall a , b \in S $,如果$a \leq b $,则对于任意一个包含$\{ a , b \} $作为子段的元素序列$\{ s _1 , . . . , s _{ k - 1  } , a , b , s _{ k + 2  } , . . . , s _n \} $和$\{ s _1 , . . . , s _{ k - 1  } , b , a , s _{ k + 2  } , . . . , s _n \} $都有:$F ( \{ s _1 , . . . , s _{ k - 1  } , a , b , s _{ k + 2  } , . . . , s _n \} ) \leq F ( \{ s _1 , . . . , s _{ k - 1  } , b , a , s _{ k + 2  } , . . . , s _n \} ) $.</p>
</li>
</ol>
<p>问题满足以上性质,那么我们按照这种二元比较关系对元素排序后的答案一定是最优的.原因在于,首先这种操作构成DAG,而定义$\leq $后自然也就定义了$= $,所以DAG的零出度点自然是最优解点.</p>
<p>分析题目时,应该先分析第三条性质得到$\leq $的定义,然后判断是否符合前两条性质.</p>
<h5><span id="example2">Example2</span></h5><p>给定$n $个包含小写字符的字符串$s _1 , . . . , s _n $,找到一个$n $阶排列$p $,将$s _{ p _1  } , s _{ p _2  } , . . . , s _{ p _n  } $顺序拼接得到$S $,使$S $的字典序最小.</p>
<p>令$s \leq t $当且仅当$s + t $的字典序$\leq $t+s</p>
<p>此时我们注意到:$s + t $的字典序小于等于$t + s $的字典序当且仅当$s ^{ \infty  } \leq t ^{ \infty  } $.原因是:不妨设$s $的长度$\leq t $的长度.若$s $不是$t $的前缀,那显然只需比较$t $的前缀和$s $的字典序即可,此时上面两个条件等价;若$s $是$t $的前缀,则我们需要比较$t $的前缀和$t $的后缀,注意到$t $的前缀还是$s $,于是需要比较$s $和$t $的后缀.类似可得.</p>
<p>于是这题可以使用后缀数组求任意两个字符串的后缀的最长公共前缀实现.</p>
<h5><span id="example3">Example3</span></h5><p>有$n $个箱子,第$i $个箱子有重量$w _i $和承载量$v _i $,$( w _i , v _i &gt; 0 ) $,将它们堆成一列使得每一个箱子上面的箱子总重量都不大于它的承载量.</p>
<p>考虑最大化$\min _{ i = 1  } ^n \{ v _i - \sum _{ j = 1  } ^{ i - 1  } w _j \} $,并判断是否$\geq 0 $.</p>
<p>我们令$b _i = - ( v _i + w _i ) , a _i = - v _i $,则我们要最大化$\min \{ \sum _{ j = 1  } ^{ i - 1  } b _i - \sum _{ j = 1  } ^i a _i \} $.</p>
<p>我们接下来将证明所有形如这样的题的通法.</p>
<p>首先,定义$x \leq y $当且仅当$F ( \{ x , y \} ) \leq F ( \{ y , x \} ) $,那么对于两个元素$( a _1 , b _1 ) , ( a _2 , b _2 ) $,显然$( a _1 , b _1 ) \leq ( a _2 , b _2 ) $当且仅当$\min \{ - a _1 , b _1 - a _1 - a _2 \} \geq \min \{ - a _2 , b _2 - a _1 - a _2 \} $.接下来我们证明这样的定义是满足性质的.</p>
<p>对于性质(3),显然成立,因为交换两个相邻位置不会对前面或后面产生影响,而前后对于这两个位置的影响也都可以抵消.</p>
<p>性质(1)显然成立.</p>
<p>再分析一下这个式子,这相当于不等式左边的两个元素都大于等于右边的最小值.我们讨论一下两种情况:</p>
<ol>
<li><p>都大于等于第一个元素,则相当于$a _1 \leq a _2 \land b _1 - a _1 \geq 0 $.</p>
</li>
<li><p>都大于等于第二个元素,则相当于$b _1 \geq b _2 \land b _2 - a _2 \leq 0 $.</p>
</li>
</ol>
<p>可能这里后面和$0 $比较没有移项来得简洁.但是,相减的两项是同一个元素的两项,我们显然把它俩放在一类是更优秀的.</p>
<p>注意到需要对$b - a $的符号进行讨论:</p>
<ol>
<li><p>若$sgn ( b _1 - a _1 ) &gt; sgn ( b _2 - a _2 ) $,则不等式成立.</p>
</li>
<li><p>若$sgn ( b _1 - a _1 ) = sgn ( b _2 - a _2 ) = 1 $,则不等式成立当且仅当$a _1 \leq a _2 $.</p>
</li>
<li><p>若$sgn ( b _1 - a _1 ) = sgn ( b _2 - a _2 ) = 0 $,则不等式成立.</p>
</li>
<li><p>若$sgn ( b _1 - a _1 ) = sgn ( b _2 - a _2 ) = - 1 $,则不等式成立当且仅当$b _1 \geq b _2 $.</p>
</li>
</ol>
<p>这四条中(2)和(4)的证明是显然的,(3)则是因为此时$b _1 = a _1 $,$b _2 = a _2 $,两条件必有一真.(1)则是因为此时满足$b _1 - a _1 &gt; b _2 - a _2 \land sgn ( b _1 - a _1 ) \geq 0 \land sgn ( b _2 - a _2 ) \leq 0 $.也就有$a _2 - a _1 &gt; b _2 - b _1 \land b _1 \geq a _1 \land b _2 \leq a _2 $.怎么着都能成立.</p>
<p>由此发现,对于$sgn ( b - a ) $相同的类,内部排序是一定满足传递性的.</p>
<p>但是不同类之间并没有满足传递性,因此我们把排序条件修正为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( a _1 , b _1 ) & \leq ( a _2 , b _2 ) \\
\Updownarrow \\
( sgn ( b _1 - a _1 ) & > sgn ( b _2 - a _2 ) ) \\
\lor ( sgn ( b _1 - a _1 ) & = sgn ( b _2 - a _2 ) \land F ( \{ 1 , 2 \} ) & \leq F ( \{ 2 , 1 \} ) 
\end{aligned}</script><h4><span id="模型2">模型2</span></h4><p>给定$n $个元素$x _1 , . . . , x _n $,以及一个定义域为这些元素的序列,值域为有序集合的函数$F $.求出对于给定整数$k $,所有的$n $阶排列$p $的长度为$k $的子序列,表达式$F ( \{ x _{ p _1  } , x _{ p _2  } , . . . , x _{ p _k  } \} ) $最小值.</p>
<p>如果$k = n $,则就是模型1.不然,我们考虑先选出一个大小为$k $的子集,然后使用模型1.不难发现,我们最后取出的$\{ x _{ p _1  } , x _{ p _2  } , . . . , x _{ p _k  } \} $一定是$n = k $时最优解的一个子序列.这在一些情况下可以降低问题的难度.</p>
<h5><span id="example">Example</span></h5><p>有$n $个物品,第$i $个物品有非负费用$c _i $和价值$v _i $,两个人进行如下博弈:</p>
<ol>
<li><p>第一个人要么选择一个物品,付出$c _i $的代价;要么选择结束游戏.</p>
</li>
<li><p>第二个人可以选择删除这个物品,这会使博弈回到第一步,且第一个人付出的代价不会消失(这个操作最多可以进行$k $次);也可以选择不操作,此时第一个人获得$v _i $的收益,博弈结束.</p>
</li>
<li><p>第一个人的总收益为收益减去付出的所有代价,第一个人希望最大化收益,第二个人希望最小化收益.$( n \leq 1 . 5 \times 10 ^5 , k \leq 9 ) $</p>
</li>
</ol>
<p>注意到第一个人要么一开始就结束游戏,要么连续选择$k + 1 $个,然后收益为$\min _{ i = 1  } ^{ k - 1  } \{ v _{ x _i  } - \sum _{ j = 1  } ^i c _{ x _j  } \} $(如果第一个人把一个收益很大的放在最后选,那第二个人可以直接结束游戏防止他选到).注意到这和模型1的Example3是类似的,于是我们可以先排序,然后dp出子序列,复杂度$O ( n \log n + nk ) $.</p>
<h2><span id="构造">构造</span></h2><h3><span id="增量构造">增量构造</span></h3><h5><span id="example1">Example1</span></h5><p>平面上有$n $条直线,将整个平面划分成若干部分.求证:这些部分可以黑白染色使得两个边相邻的部分颜色不相同,并给出构造方案.</p>
<p>考虑数学归纳,现在已经有$n $条直线的答案,求$n + 1 $条直线的答案.我们将直线加到这个平面上,并将在这条直线其中一边的部分颜色全部取反.</p>
<h5><span id="example2">Example2</span></h5><p>给定若干个角度$a _1 , \cdots , a _n \in \{ 90 \degree , 270 \degree \} $,要求构造一个$n $边形(边必须平行于坐标轴),使得其内角依次是$a _1 , \cdots , a _n $.</p>
<p>首先有解条件显然是判定它们的和是否是$180 \degree ( n - 2 ) $.</p>
<p>注意到相邻的$90 \degree $和$270 \degree $无非是在原序列上修修改改,这个可以一起合并起来.不断合并就做完了.</p>
<h5><span id="example3cf1770h">Example3(CF1770H)</span></h5><p>呃,简单来说就是把边界往里缩,每次找左上和右上的四个点做匹配,然后剩下的缩进去.</p>
<p>原题解的那个图特别清晰.</p>
<h5><span id="example4abc232h">Example4(ABC232H)</span></h5><p>放在这个模块下就好想了,剥一行一列就行.最后可能会剩个边界情况,简单讨论.</p>
<h3><span id="找中间状态">找中间状态</span></h3><p>常见于操作可逆,想要让$S \rightarrow T $.这个时候可以找一个中间状态$A $,让$S \rightarrow A , T \rightarrow A $.</p>
<h5><span id="example1">Example1</span></h5><p>坐标系上每个整点有个灯,初始只有$( X , 0 ) $亮着,每次把$( x , y ) $,$( x , y + 1 ) $,$( x + 1 , y ) $状态反转,给出终止状态,求初始亮的点的坐标,保证有解且唯一解.</p>
<p>$n \leq 10 ^5 $,坐标的绝对值均$\leq 10 ^{ 17  } $.</p>
<p>首先我们发现,如果我们上面有若干个亮点,我们一定能把他们全杀了,变到下面,但下面的亮点没办法处理.怎么办呢?</p>
<p>一个想法是,我们将所有的亮点全都推到一条直线$y = - inf $,然后比对.我们注意到$( X , 0 ) $向下推的过程类似一个组合数递推的过程,由经典公式$\binom { S  } { T  } \equiv [ T \subseteq S ] \bmod 2 $可知,我们取$inf = 2 ^{ 63  } - 1 $即可.然后最后在这条线上一定是有一个区间是$1 $,我们需要找到区间左端点,我们选择在直线上随便找到一个$1 $,由于$inf $很大,大于$10 ^{ 17  } $,因此这一步是好找的.然后最后二分+算贡献就可以找到左端点.</p>
<p>这个题有个改版,$n \leq 10 ^4 $,但是初始点可能是$( X , Y ) $.</p>
<p>这个题怎么做呢?类似上面的,我们考虑找到两个点$( j , - inf ) $和$( k , - inf ) $是亮的,并且他们分别是最靠左的和最靠右的,然后我们就能反解出$X $和$Y $.而上述条件满足当且仅当$[ j - X \subseteq Y + inf ] $.</p>
<p>如果我们随便找一个点$( p , - inf ) $满足条件,那我们接下来只需要枚举$w $,判断$( p - 2 ^w , - inf ) $是否是亮的,这样就能找到最靠左的,同理可以找到最靠右的.</p>
<p>那么怎么找到这个点呢?我们二分,每次判断一个区间$[ l , r ] $中是否有亮的.这个是难以判断的,但是好判断的是,这个区间中亮的灯的数量是奇数还是偶数.因此我们拿这个判断就行,有奇数就去奇数,两个都是偶数随便去一个.</p>
]]></content>
      <categories>
        <category>OI</category>
      </categories>
      <tags>
        <tag>OI</tag>
      </tags>
  </entry>
  <entry>
    <title>被地球创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E5%9C%B0%E7%90%83%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>大家高中都学过开普勒三定律对吧!下面我们来证明它们是对的.</p>
<p>由于难度不太一样,我们微调一下顺序.</p>
<h3><span id="开普勒第二定律">开普勒第二定律</span></h3><p>根据角动量守恒,当然有$\vec { r  } \times \vec { p  } = C $为定值.又根据机械能守恒,其在某一个点的机械能应该为$- \frac { GmM  } { r  } + \frac { p ^2  } { 2 m  } $.</p>
<p>先考虑证明开普勒第二定律,取一段极小时间$\text { d  } t $,考虑掠过的面积应该是$\text { d  } S = \frac { 1  } { 2  } \vec { r  } \times ( \vec { r  } + \text { d  } \vec { r  } ) = \frac { 1  } { 2  } \vec { r  } \times \text { d  } \vec { r  } $,于是掠面速度$V = \frac { \text { d  } S  } { \text { d  } t  } = \frac { 1  } { 2 m  } \vec { r  } \times \vec { p  } $是一个常数.</p>
<h3><span id="开普勒第三定律">开普勒第三定律</span></h3><p>那么$T = \frac { S  } { V  } = \frac { 2 m \times ab \pi  } { \vec { r  } \times \vec { p  }  } = mab \frac { 2 \pi  } { C  } $.</p>
<p>那么$\frac { T ^2  } { a ^3  } = \frac { 4 \pi ^2 m ^2 b ^2  } { aC ^2  } $.</p>
<p>根据机械能守恒,当然应该有在近日点和远日点机械能相等,那自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- \frac { GmM  } { a + c  } + \frac { C ^2  } { 2 m ( a + c ) ^2  } & = - \frac { GmM  } { a - c  } + \frac { C ^2  } { 2 m ( a - c ) ^2  } \\
m ^2 & = C ^2 \frac { a  } { b ^2 GM  } 
\end{aligned}</script><p>带入得到$\frac { T ^2  } { a ^3  } = \frac { 4 \pi ^2  } { GM  } $是一个定值.</p>
<h3><span id="开普勒第一定律">开普勒第一定律</span></h3><p>我们知道圆锥曲线的极坐标方程是:</p>
<script type="math/tex; mode=display">
r ( \theta ) = \frac { ep  } { 1 - e \cos \theta  }</script><p>其中$e $是离心率,$p $是准焦距(焦点到准线的距离).</p>
<p>后面不会了,开摆!</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被小船创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E5%B0%8F%E8%88%B9%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>众所周知,高中物理有一道很经典的分解速度的题:</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1t04v0mr.png" alt></p>
<p>物理老师在上课讲这个题的时候,将速度分解为两个正交的速度,这两个速度的矢量和就是原速度.</p>
<p>乍一看好像非常合理,然而随即大家可能就会见到这个题:</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/c3ajz7jb.png" alt></p>
<p>其中中间的物体下落的速度为$v $,这个时候沿绳子分解速度的时候,两个分速度应该均是$v \cos \theta $,而这个时候两个速度的矢量和并不是原速度啊!</p>
<p>老师讲到这里的时候,往往会说这是因为:”速度的分解和力的分解并不一样.”但你可能会疑问:同样是矢量的分解,为什么会不一样呢?</p>
<p>先提前给出我的思考:在这个滑轮组模型中,我们做的操作并不是将原速度分解为了这两个速度,这两个速度也并非由原速度一下分解出来的,而分别只是原速度分解出的速度的一部分.</p>
<hr>
<p>先看这个最经典的模型:</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/1t04v0mr.png" alt></p>
<p>不妨设高度差为$h $,此时绳子长度为$L $,物体距离墙的距离为$x $.</p>
<p>有勾股定理:</p>
<p>$L ^2 = h ^2 + x ^2 $,注意到此时$h $是一个常量.</p>
<p>两边对$t $求导,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 Lv _L & = 2 xv _x \\
v _L & = \frac { x  } { L  } v _x & = v _x \cos \theta 
\end{aligned}</script><p>此时的另一个分速度自然是$v _h = v _x \sin \theta $.在物理课上,物理老师会这么解释这种分解:</p>
<p>$v _L $这个速度提供了绳子缩短的速度,而$v _h $提供了绳子转动的速度.</p>
<p>那么这个$v _h $听上去应该是此时绳子与物体接触点的转动的线速度对吧.也就是说角速度应该是$\omega = \frac { v _h  } { L  } = \frac { h  } { L ^2  } v _x $,令绳子与转轴夹角为$\alpha , \sin \alpha = \frac { x  } { L  } $而我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\omega & = \frac { \text { d  } \alpha  } { \text { d  } t  } \\
& = \frac { \text { d  } \alpha  } { \text { d  } \sin \alpha  } \frac { \text { d  } \sin \alpha  } { \text { d  } t  } \\
& = \frac { 1  } { \frac { \text { d  } \sin \alpha  } { \text { d  } \alpha  }  } \frac { \text { d  } \sin \alpha  } { \text { d  } t  } \\
& = \frac { 1  } { \cos \alpha  } \frac { v _x L - v _L x  } { L ^2  } \\
& = \frac { h  } { L ^2  } v _x 
\end{aligned}</script><p>这就证明了$v _h $的确是线速度,这也与我们直观感受相当匹配.</p>
<hr>
<p>解释完上面这个分解的正确性,我们又要开始考虑了:那么为什么力和速度的分解不一样呢?</p>
<p>有一个很形象的比喻,那就是如果两个人同时以速度$v $的速度拉一个物体,这个物体的速度是$v $;但如果两个人同时以力$F $拉一个物体,这个物体的受力是$2 F $.</p>
<p>这是为什么呢?动量定理实际上将力在时间上的积累与动量等价起来了对吧,由于速度并非是动量,因此自然像力那样叠加.这么思考也许是正确的:两个受力均为$F $的物体的合力是$2 F $,两个速度均为$v $的物体合速度为$v $,两个动量均为$p $的速度相同的物体合动量为$2 p $.</p>
<p>或者换而言之,力的作用之间是有牛顿第三定律作保证的,这就可以让力在物体间存在一种类似传递的效果.但是速度并没有这种效果,速度并非是外界对物体做出的改变,而是物体的性质本身.</p>
<p>从这个角度,我们回到滑轮的那个题,我们就可以明白为什么要这么分解了:原因很简单,这两个沿绳的速度并不是一次分解分解出来的,而是让原本的速度先沿其中一个绳分解为两个速度,一个是沿绳的速度$v \cos \theta $,另一个是提供绳转动的线速度$v \sin \theta $.</p>
<p>而速度是不能叠加的,因此右边也做这个操作,这就使得沿绳的分速度均为$v \cos \theta $.</p>
<hr>
<p>回看开头的那个滑轮题,这题其实还有个很好玩的地方:那就是C的动能最大点可不是C的受力平衡点:原因很简单,C的受力平衡点由于滑轮作用仍然存在角速度上的加速度.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被炮弹创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E7%82%AE%E5%BC%B9%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>高中物理的时候有这么一个题,然后今天刚好信物讲到了,顺手来总结一下.</p>
<p>先来个简单版本:我从一个点打炮弹,目标与我的距离为$x $,且目标比我高$h $,问以什么样的角度打出炮弹能使得击中目标并且初速度最小.</p>
<p>我们当然会第一反应认为这是一个很简单的问题,考虑$t = \frac { x  } { v _0 \cos \theta  } $,因为我们很容易写出方程:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x \frac { \sin \theta  } { \cos \theta  } - \frac { gx ^2  } { 2 v _0 ^2 \cos ^2 \theta  } & = h \\
\frac { 1  } { v _0 ^2  } & = \frac { 1  } { gx ^2  } ( x \sin ( 2 \theta ) - h \cos ( 2 \theta ) - h ) \\
\frac { 1  } { v _0 ^2  } & = \frac { 1  } { gx ^2  } ( \sqrt { x ^2 + h ^2  } \sin ( 2 \theta - \varphi ) - h ) , \varphi & = \arctan ( \frac { h  } { x  } ) 
\end{aligned}</script><p>只需要对后面那个东西用辅助角公式就可以了对吧,非常简单啊!</p>
<p>然而,我们稍微改下题面:</p>
<p>我从一个高度为$h $的点打炮弹,初速度确定为$v _0 $,问以什么样的角度打炮弹能打得最远.</p>
<p>这有啥区别啊,只需要改个正负号就行了是吧,让我们看看:</p>
<script type="math/tex; mode=display">
\frac { 1  } { v _0 ^2  } = \frac { 1  } { gx ^2  } ( x \sin ( 2 \theta ) + h \cos ( 2 \theta ) + h )</script><p>这下发现问题了,这个$x $根本拿不出来啊.</p>
<p>重新按部就班,发现只能用求根公式得到$x $的表达式,更进一步地,我们有:</p>
<script type="math/tex; mode=display">
x = \frac { v _0 \cos \theta ( v _0 \sin \theta + \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  } )  } { g  }</script><p>怎么办呢?yth老师给出了一个想法是使用柯西不等式,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x & = \frac { v _0 \cos \theta ( v _0 \sin \theta + \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  } )  } { g  } \\
& = \frac { v _0 \sin \theta v _0 \cos \theta + v _0 \cos \theta \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  }  } { g  } \\
& \leq \frac { 1  } { g  } ( v _0 \sqrt { v _0 ^2 + 2 gh  } ) 
\end{aligned}</script><p>当且仅当$v _0 ^2 \cos ^2 \theta = v _0 \sin \theta \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  } , \frac { 1  } { \tan ^2 \theta  } = \frac { 2 gh  } { v _0 ^2  } + 1 $的时候取等.</p>
<p>还有一种策略是考虑对隐函数求导然后令$\frac { \text { d  } x  } { \text { d  } \theta  } = 0 $,这样得到情况会和我们一开始的初始问题得到的答案相等,也就是当$\tan ( 2 \theta ) = - \frac { x  } { h  } $的时候$x $会取极限.这也很好理解,因为我们如果当前的速度没有用到极限打到最远,总能调整使得得到一个更小的速度打到当前的距离,因此距离还有提高的空间.</p>
<p>有没有更聪明一点的办法呢?</p>
<p>我们注意到初速度是定值,根据机械能守恒定律,末速度的大小一定是个定值,我们考虑:</p>
<script type="math/tex; mode=display">
\vec { v  } = \vec { v  } _0 + \Delta \vec { v  }</script><p>通过机械能守恒定律可以算出$| \vec { v  } | = \sqrt { v _0 ^2 + 2 gh  } $.</p>
<p>注意到$\vec { v  } $和$\vec { v  } _0 $的水平方向分速度是相同的.然后有一个天才的想法是,考虑上述那个向量式的三角形法则,设那个三角形的面积为$S $,注意到$\Delta \vec { v  } = gt $,而$x = v _0 \cos \theta t = \frac { 2 S  } { g  } \leq \frac { v _0 \sqrt { v _0 ^2 + 2 gh  }  } { g  } $,也就是面积最大的时候应该是$\vec { v  } _0 $和$\vec { v  } $夹角为$\frac { \pi  } { 2  } $的时候.</p>
<p>直接从形式上来看:</p>
<script type="math/tex; mode=display">
\frac { v _0 \sin \theta v _0 \cos \theta + v _0 \cos \theta \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  }  } { g  }</script><p>我们知道正交分解的时候从结果上来说可以作分方向的动能定理,因此初速度是$( v _0 \cos \theta , v _0 \sin \theta ) $,末速度是$( v _0 \cos \theta , - \sqrt { v _0 ^2 \sin ^2 \theta + 2 gh  } ) ) $,因此$x = \frac { \vec { v  } \times \vec { v  } _0  } { g  } $.</p>
<p>这个想法过于震惊了,以至于我在之后多次回忆起这个题,想去找到初速度与末速度叉积的物理意义.但直到如今我也没有完全理解这个做法.</p>
<p>写到这发现没活整了,顺便在这写一下另一个斜抛题:</p>
<p>抛射质量为$m $的小球,抛射倾角为$\theta $,初速度大小为$v _0 $,所受空气阻力$\vec { F  } $与速度$\vec { v  } $的关系为$\vec { F  } = - k \vec { v  } $,其中$k $为固定系数,求小球在空气中运行的轨迹曲线.</p>
<p>考虑$\frac { \text { d  } \vec { v  }  } { \text { d  } t  } = \vec { a  } = \frac { \vec { F  } + \vec { G  }  } { m  } = \frac { 1  } { m  } ( - k \vec { v  } + m \vec { g  } ) $.</p>
<p>于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\text { d  } \vec { v  } & = \frac { 1  } { m  } ( - k \vec { v  } + m \vec { g  } ) \text { d  } t \\
\int _{ \vec { v  } _0  } ^{ \vec { v  }  } \text { d  } \vec { v  } & = \int _{ 0  } ^t \frac { 1  } { m  } ( - k \vec { v  } + m \vec { g  } ) \text { d  } t \\
\vec { v  } & = \frac { - k \vec { x  }  } { m  } + \vec { g  } t + \vec { v  } _0 \\
\begin{cases}
\frac { \text { d  } x  } { \text { d  } t  } = \frac { - kx  } { m  } + v _0 \cos \theta \\
\frac { \text { d  } y  } { \text { d  } t  } = \frac { - ky  } { m  } + v _0 \sin \theta + gt 
\end{cases} 
\end{aligned}</script><p>对于第一个式子,令$w = \frac { - kx  } { m  } + v _0 \cos \theta $我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { - m  } { k  } \frac { \text { d  } w  } { \text { d  } t  } & = w \\
\frac { - m  } { k  } \int _{ v _0 \cos \theta  } ^{ w  } \frac { \text { d  } w  } { w  } & = \int _{ 0  } ^t \text { d  } t \\
\ln ( \frac { \frac { - kx  } { m  } + v _0 \cos \theta  } { v _0 \cos \theta  } ) & = \frac { - k  } { m  } t \\
\frac { - kx  } { mv _0 \cos \theta  } + 1 & = e ^{ \frac { - k  } { m  } t  } \\
x & = \frac { mv _0 \cos \theta  } { k  } ( 1 - e ^{ - \frac { k  } { m  } t  } ) 
\end{aligned}</script><p>同理解出$y = \frac { m  } { k  } ( ( v _0 \sin \theta + \frac { mg  } { k  } ) ( 1 - e ^{ - \frac { k  } { m  } t  } ) - gt ) $.</p>
<p>综上参数方程是:$\begin{cases}x = \frac { mv _0 \cos \theta  } { k  } ( 1 - e ^{ - \frac { k  } { m  } t  } ) \ y = \frac { m  } { k  } ( ( v _0 \sin \theta + \frac { mg  } { k  } ) ( 1 - e ^{ - \frac { k  } { m  } t  } ) - gt ) \end{cases} $.</p>
<p>轨迹方程是:$y = ( v _0 \sin \theta + \frac { mg  } { k  } ) \frac { x  } { v _0 \cos \theta  } + \frac { mg  } { k  } \ln ( 1 - \frac { kx  } { mv _0 \cos \theta  } ) $.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被兔子创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E5%85%94%E5%AD%90%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>没想到这个系列博客都出到第三节了.</p>
<p>之所以起这么个名字,是因为下面要开搞的数列很像真理元素的<a href="https://www.bilibili.com/video/BV1B7411W7LB">这个视频</a>.但其实下面的操作和这个视频并没有什么关系.</p>
<p><del>而且其实理论上,这篇博客的名字应该叫《被qyc创飞了(1)》</del></p>
<p>前天,qyc给我发了一个<a href="https://www.luogu.com/article/5gal95wp">博客</a>,里面提供了一种非常厉害的估计数列的方法.我一看就觉得超级厉害啊,因为这个题我之前也做过然后被爆杀了,而竟然可以拿科技秒掉.</p>
<p>大概讲一下qyc的神仙操作:</p>
<p>$a _1 = 1 , a _{ n + 1  } - a _n = - \frac { 1  } { 3  } a _n ^2 $</p>
<p>考虑构造一个函数$f ( n ) $使得$f ( n ) \approx a _n $,那我们就可以将$a _{ n + 1  } - a _n \approx f _n $.</p>
<p>这个第一眼看上去就很有道理,而事实上也确实很有道理,原因是根据拉格朗日中值定理,$\exists x _0 \in [ n , n + 1 ] , f ‘ ( x _0 ) = f ( n + 1 ) - f ( n ) $,而对于增长率变化不大的函数,直接认为$f ‘ ( x _0 ) = f ‘ ( n ) $是有理可循的!</p>
<p>@Minuses在知乎上找到了这个东西的<a href="https://zhuanlan.zhihu.com/p/342641401">系统理论</a>.<del>但是我没有看</del>.</p>
<p>然后,原式子就变成了一个微分方程了,带入$f ( 1 ) = 1 $解得$f ( n ) = \frac { 3  } { n + 2  } $.这个精度已经足够选出来原本的放缩题的答案了.</p>
<p>但是我不满意!具体数学上教过我们可以用数列估计误差项,那现在我们来考虑一下它的误差项吧!</p>
<p>令$a _n = \frac { 3  } { n + 2  } - b _n $,带入化简,得到$\{ b _n \} $的递推式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 3  } { n + 3  } - b _{ n + 1  } & = ( \frac { 3  } { n + 2  } - b _n ) ( 1 - \frac { 1  } { n + 2  } + \frac { b _n  } { 3  } ) \\
b _{ n + 1  } - \frac { 3  } { n + 3  } & = ( b _n - \frac { 3  } { n + 2  } ) ( \frac { n + 1  } { n + 2  } + \frac { b _n  } { 3  } ) \\
b _1 & = 0 , b _{ n + 1  } & = \frac { b _n ^2  } { 3  } + \frac { n  } { n + 2  } b _n + \frac { 3  } { ( n + 2 ) ^2 ( n + 3 )  } 
\end{aligned}</script><p>算到这里,我们可以很轻易使用数学归纳法算出$b _n \leq \frac { 1  } { 4 n  } $,这个精度已经挺不错的了,但是也让人觉得很不满意,因为这个误差项怎么和估计项是同阶的啊.</p>
<p>然后我开始估计了一下这个$b _n $的阶,因为我其实没学过什么高超的高数技巧,所以我使用了OI的一些技巧来估计,不妨假设$b _n ^2 &lt; &lt; b _n $:</p>
<p>$b _{ n + 1  } = O ( 1 ) b _n + O ( \frac { 1  } { n ^3  } ) $.</p>
<p>那么$b _n $应该是$O ( \frac { 1  } { n ^2  } ) $级别的对吧!然后我就开始算,算了一晚上也没放出来一个式子,相当自闭.</p>
<p>晚上回家咨询了一下汪神wzm,得知了这个$b _n $是$O ( \frac { \ln n  } { n ^2  } ) $级别的,这下白算一晚上了.</p>
<p>如何理解这个级别?考虑别乱动$b _n $的系数,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
b _{ n + 1  } & = \frac { n  } { n + 2  } b _n + \frac { 1  } { n ( n + 1 ) ( n + 2 )  } \\
( n + 1 ) ( n + 2 ) b _{ n + 1  } & = n ( n + 1 ) b _n + \frac { 1  } { n  } \\
g ( n ) & = n ( n + 1 ) b _n , g ' ( n ) & = \frac { 1  } { n  } , g ( n ) & = \ln n \\
b _n & = \frac { \ln n  } { n ^2  } 
\end{aligned}</script><p>这警戒我们以后乱估计的时候千万别把$O ( n ^{ \epsilon  } ) $和$O ( 1 ) $搞混了,警钟长鸣.</p>
<p>这个时候大概估计一下会发现$b _n \leq \frac { 3 \ln n  } { n ( n + 1 )  } $.</p>
<p>但是如果你尝试带入数学归纳,会发现完全做不动.怎么办呢?</p>
<p>在这个问题被搞出来后两个周,我妈的一位同事给出了纯文化课的牛逼做法,下面来介绍一下这个做法并且终结此题:</p>
<p>首先换元,上面等价于下面这个数列放缩:</p>
<script type="math/tex; mode=display">
a _1 = \frac { 1  } { 3  } , a _{ n + 1  } = - a _n ( a _n - 1 )</script><p>观察形式,注意到$a _n ( a _n - 1 ) $这个东西很像一个类似裂项的东西,因此两边取倒数,自然有:</p>
<script type="math/tex; mode=display">
\frac { 1  } { a _{ n + 1  }  } - \frac { 1  } { a _n  } = \frac { 1  } { 1 - a _n  }</script><p>考虑$0 &lt; a _n \leq \frac { 1  } { 3  } $,于是我们有下面这个不等式:</p>
<script type="math/tex; mode=display">
1 < \frac { 1  } { a _{ n + 1  }  } - \frac { 1  } { a _n  } \leq \frac { 3  } { 2  }</script><p>两边求和有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n & \leq \frac { 1  } { a _{ n + 1  }  } - 3 & \leq \frac { 3  } { 2  } n \\
\frac { 2  } { 3 ( n + 1 )  } & \leq a _n & \leq \frac { 1  } { n + 2  } 
\end{aligned}</script><p>仔细观察下面这个式子:</p>
<script type="math/tex; mode=display">
\frac { 1  } { a _{ n + 1  }  } - \frac { 1  } { a _n  } = \frac { 1  } { 1 - a _n  }</script><p>我们上面的操作实质上是使用这个式子将$0 &lt; a _n \leq \frac { 1  } { 3  } $这个放缩给缩紧了,所以我们再用一次这个式子再紧一遍.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { a _{ n + 1  }  } - \frac { 1  } { a _n  } & \leq \frac { 1  } { 1 - \frac { 1  } { n + 2  }  } & = \frac { n + 2  } { n + 1  } & = 1 + \frac { 1  } { n + 1  } \\

\end{aligned}</script><p>两边求和自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { a _{ n + 1  }  } - 3 & \leq n + \sum _{ k = 2  } ^{ n + 1  } \frac { 1  } { k  } & \leq n + \ln ( n + 1 ) \\
a _n & \geq \frac { 1  } { n + 2 + \ln n  } 
\end{aligned}</script><p>这个界甚至比我们给出的界还要紧.而且似乎继续迭代可以得到更紧的解!相当牛逼!</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被摆球创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E6%91%86%E7%90%83%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>今晚学弟问了我这么一个问题:</p>
<p>对于一个圆锥摆,设其绳上拉力为$T $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T \sin \theta & = m \omega ^2 \sin \theta L \\
T & = m \omega ^2 L 
\end{aligned}</script><p>那么问题来了:当小球自然下垂的时候,$T = mg $,但是$\omega = 0 $,左边不等于右边???</p>
<p>怎么处理这个问题呢?</p>
<hr>
<p>下面是我个人的想法啊,不一定正确.</p>
<p>冷静一下,$\omega = \frac { v  } { r  } $,我们的确能确认自然下垂的时候$v = 0 $,但由于$r $也是$0 $,我们没道理判定$\omega = 0 $.</p>
<p>那么我们把角速度换成线速度就有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T \sin \theta & = m \frac { v ^2  } { \sin \theta L  } \\
T \sin ^2 \theta & = \frac { mv ^2  } { L  } 
\end{aligned}</script><p>这样极限情况下两边就相等了(均为$0 $).</p>
<hr>
<p>或者说我们还可以这么干:</p>
<p>考虑$T = \frac { mg  } { \cos \theta  } $,所以$\omega ^2 = \frac { g  } { L \cos \theta  } $,注意到其实$\omega $是随着小球下落而单调递减的,但是不可能减到$0 $.</p>
<hr>
<p>另一个想法是:考虑先放一个实体圆锥(可提供支持力),让球在圆锥上转圈,然后逐渐加速到支持力$N = 0 $,此时小球会飘起来.我们观察一下这个式子是啥:</p>
<p>考虑引入离心力,只需要让离心力,重力,支持力和拉力四力平衡即可,设绳子与竖直方向的夹角为$\theta $,作正交分解后立刻有:</p>
<script type="math/tex; mode=display">
\begin{cases}
N \cos \theta = T \sin \theta - m \omega ^2 L \sin \theta \\
N \sin \theta = mg - T \cos \theta 
\end{cases}</script><p>替换掉其中的$N $,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
mg \cos \theta - T \cos ^2 \theta & = T \sin ^2 \theta - m \omega ^2 L \sin ^2 \theta \\
T & = mg \cos \theta + m \omega ^2 L \sin ^2 \theta 
\end{aligned}</script><p>考虑$T $和$\omega ^2 $的函数关系,小球从在圆锥摆上的状态到飘起来的状态应该是连续的两段直线,注意到当$\theta \rightarrow 0 $的时候,它俩的关系是$T = mg $的平行于$\omega ^2 $轴的直线,这段直线会一直延伸到$\omega $的最低点,也就是$\omega = \sqrt { \frac { g  } { L  }  } $的点然后再转上去.</p>
<hr>
<p>如果这个文章就这么结束还是有点无聊,不如让我们来看个类似的问题:</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/k0eufkm2.png" alt></p>
<p>先来看第一问:</p>
<p>设水平向左为正方向,设小球相对于滑块的水平速度为$v _1 $,滑块速度为$v _2 $.</p>
<p>水平方向动量守恒,当然有$m ( v _1 - v _2 ) = Mv _2 $.</p>
<p>此时小球的总速度应该为$v = \sqrt { ( v _1 - v _2 ) ^2 + ( \frac { v _1 \sin \theta  } { \cos \theta  } ) ^2  } = v _2 \sqrt { ( \frac { M  } { m  } ) ^2 + \frac { ( M + m ) ^2 \sin ^2 \theta  } { m ^2 \cos ^2 \theta  }  } $.</p>
<p>小球和滑块的总机械能守恒,当然有:$\frac { 1  } { 2  } mv ^2 + \frac { 1  } { 2  } Mv _2 ^2 = mgR \cos \theta $.</p>
<p>两式联立,解得:$v _2 = \sqrt { \frac { 2 m ^2 gR \cos \theta  } { ( Mm + M ^2 ) + ( M + m ) ^2 \tan ^2 \theta  }  } = \sqrt { \frac { 2 m ^2 gR \cos ^3 \theta  } { ( m + M ) ( M + m \sin ^2 \theta )  }  } $.</p>
<p>看上去只是麻烦而已,也没那么难嘛.</p>
<p>再来看第二问:</p>
<p>考虑$a _n = \frac { ( \frac { v _1  } { \cos \theta  } ) ^2  } { R  } = \frac { v _2 ^2 ( M + m ) ^2  } { m ^2 R \cos ^2 \theta  } = \frac { 2 g ( M + m ) \cos \theta  } { M + m \sin ^2 \theta  } $,</p>
<p>而滑块的水平加速度大小应该是$a ‘ = - \frac { N \sin \theta  } { M  } $,那么惯性力$F ‘ = - a ‘ m = \frac { mN \sin \theta  } { M  } $.</p>
<p>而$a _n m = N - mg \cos \theta + F ‘ \sin \theta $,$\frac { M + m \sin ^2 \theta  } { M  } N = ma _n + mg \cos \theta = \frac { 2 gm ( M + m ) \cos \theta  } { M + m \sin ^2 \theta  } + mg \cos \theta = mg \cos \theta ( \frac { 3 M + 2 m + m \sin ^2 \theta  } { M + m \sin ^2 \theta  } ) $,整理得到$N = Mm \cos \theta ( \frac { 3 M + 3 m - m \cos ^2 \theta  } { ( M + m \sin ^2 \theta ) ^2  } ) $.方向沿半径方向朝向圆心.</p>
<p>这里就要用惯性力了.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被火车创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E7%81%AB%E8%BD%A6%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>为啥这篇文章总是传不上去???</p>
<p>为啥这篇文章总是传不上去???</p>
<p>事情是这样的,几天前,我们班被出了这么一道物理思考题(为表述方便略有简化).</p>
<p>有一辆以$v _0 $行驶的质量超级大的火车,上面站了一个质量为$m $的人随火车一起运动.突然，这个人相对于火车以$\Delta v $的速度向前平跳(也就是说此时他相对于地面的速度为$v _0 + \Delta v $),求这个人做这个起跳需要多少能量.</p>
<p>注意这里火车质量很大,所以火车在此人跳跃过程中始终以$v _0 $速度前进.</p>
<p>我看到这个题觉得很简单啊,肯定是$\frac { m  } { 2  } ( ( v _0 + \Delta v ) ^2 - v _0 ^2 ) $.然后发现答案竟然是$\frac { m  } { 2  } ( \Delta v ) ^2 $.</p>
<p>下面是我们物理课代表给出的解释:</p>
<p>虽然人的动能变化确实是$\frac { m  } { 2  } ( ( v _0 + \Delta v ) ^2 - v _0 ^2 ) $,但是在他起跳的过程中,火车对他是有一个力的.而且,因为火车在运动,所以虽然起跳的时候人相对于火车没有运动,但这个力的作用点相对于地面竟然是运动着的!</p>
<p>因此,不妨设这个力为$F $,注意这里的$F $不一定是常数,而是一个关于时间$t $的函数,我们自然有:$W = \int _{ t _0  } ^{ t _1  } Fx \text { d  } t $,注意到作用点的速度恒为$v _0 $,因此$W = v _0 \int _{ t _0  } ^{ t _1  } F \text { d  } t = v _0 \Delta p = v _0 \Delta vm $,把这个加上后恰好得出答案.</p>
<p>这时我意识到这个事情其实就等价于任何惯性参考系参考下能量都是守恒的.所以我们直接以火车为参考系,立即得出答案.</p>
<p>但是为啥呢?而且我总觉得上面那个力的分析非常诡异,因为我总感觉起跳是瞬间的,这个力理论上不应该做功啊.</p>
<p>通过在网上海量搜索后,我大概找到了这么两种理解方式啊.</p>
<p>第一种是,我们冷静一下.如果没有外力干扰,那么火车其实<strong>并不能匀速前进</strong>.设火车质量为$M $,当人的速度为$v _0 + \Delta v $的时候,根据动量守恒,火车的速度应该为$v _0 - \frac { m  } { M  } \Delta v $.</p>
<p>注意这个时候不能以火车为参考系了,因为火车不再是惯性参考系了,所以我们加入一个以$v _0 $匀速前进的青蛙作为新的参考系.不难发现在青蛙参考系和在地面参考系下,火车和人的系统的动能增量是相等的,都是$\frac { 1  } { 2  } ( m ( \Delta v ) ^2 + M ( \frac { m  } { M  } \Delta v ) ^2 ) $.</p>
<p>然后,因为火车质量非常非常非常大,我们注意到$\lim _{ M \rightarrow + \infty  } \frac { m  } { M  } \Delta v = 0 $,完活.</p>
<p>但是这个过程别说还是进行了近似估计了,就是和现实也不符啊.你火车肯定要有动力来源使得其能进行匀速直线运动.但是这个理解方式的优越性在于,它试图将火车和人视作一个系统来观察,这个角度下我们完全不要去管二者分别的动能了,而是直接分析系统动能.</p>
<p>所以我反思了一下为什么我觉得一开始的那个做法很奇怪,我注意到对人做功的力同时一定对火车作负功,那么也就是一定还有一个对火车作正功的外力,这个力同时也是整个系统的外力.</p>
<p>对这个施加在火车上的外力进行完全一样的分析,就可以得到相同的答案.</p>
<p>或者更一般地,我们来证明惯性参考系下的所需要的能量恒定:</p>
<p>我们已知:</p>
<script type="math/tex; mode=display">
\int _{ t _0  } ^{ t _1  } Fv \ \text { d  } t = \frac { m  } { 2  } ( v _1 ^2 - v _0 ^2 ) + \Delta E</script><p>要证:</p>
<script type="math/tex; mode=display">
\int _{ t _0  } ^{ t _1  } F ( v - v _w ) \ \text { d  } t = \frac { m  } { 2  } ( ( v _1 - v _w ) ^2 - ( v _0 - v _w ) ^2 ) + \Delta E</script><p>而注意到:</p>
<script type="math/tex; mode=display">
\int _{ t _0  } ^{ t _1  } F ( v - v _w ) \ \text { d  } t = \int _{ t _0  } ^{ t _1  } F ( v ) \ \text { d  } t - \int _{ t _0  } ^{ t _1  } Fv _w \ \text { d  } t = \frac { m  } { 2  } ( v _1 ^2 - v _0 ^2 ) - v _w m ( v _1 - v _0 ) + \Delta E</script><p>这就证明了该结论!</p>
<p><del>不过这个做法虽然相当理性但是一点都不直观啊,为什么两个平方竟然可以在这里线性加减,我其实还是没找到更加易于理解的方式啊,如果有大佬知道可以联系我一下qwq</del></p>
<p>哦哦我突然瞎想出了一个相当简洁的方式啊,就是我们不难注意到只要满足动量守恒以及做功的方程$W = Fx $,我们很自然可以推导出动能差的表达式,而这两个基础的表达式都是线性的,因此动能差也一定与选取哪个惯性参考系无关!</p>
<p>换句话说,这个动能差的表达式中的平方是我们积分积出来的,但是积分是可以加减的!</p>
<hr>
<p>在大半夜和Querainy 和Minuses 深入交流之后,我发现上面的过程还是太感性理解了,我们来添加一些细节.</p>
<p>首先,Minuses 提供了在宏观下动量定理和牛二等价的证明(他原本的形式用的全是向量,但是我比较懒,所以换成一维情况了):</p>
<script type="math/tex; mode=display">
F \ \text { d  } t = m \ \text { d  } v</script><script type="math/tex; mode=display">
F = \frac { \text { d  } v  } { \text { d  } t  } m = am</script><p>然后,他又提供了只要有牛顿第二定律和$W = Fx $的定义,我们就可以推导惯性参考系下动能定理的证明:</p>
<script type="math/tex; mode=display">
F = m \frac { \text { d  } v  } { \text { d  } t  }</script><script type="math/tex; mode=display">
F \text { d  } x = m \frac { \text { d  } v  } { \text { d  } t  } \text { d  } x = mv \ \text { d  } v</script><script type="math/tex; mode=display">
W = \int _{ t _0  } ^{ t _1  } F \text { d  } x = m \int _{ t _0  } ^{ t _1  } v \text { d  } v = \frac { 1  } { 2  } m ( v _1 ^2 - v _0 ^2 )</script><p>Minuses 无敌,可让天下一先.</p>
<hr>
<p>Querainy提出我之前的说法是错误的,因为在不同参考系下牛顿第二定律的确不会有影响,但是$W = Fx $是受到了影响的.例如在上面的例子中,如果以火车为参考系,那么火车与人之间的力对人是没有做功的.但是以地面为参考系,那么这个力因为作用点在变所以是做功了的.</p>
<p>然而这个做功的改变在上面的积分形式中就可以发现,由于速度的改变导致平方项不能完美消除,因此这个做功的改变会抵消切换参考系(伽利略变换)带来的<strong>动能形式的改变</strong>.</p>
<p>这个自我修正bug看上去相当诡异,但是一想到动能定理本身就是从$W = Fx $和牛顿第二定律推导出来的,因此有自洽性也非常合理.</p>
<p>追根溯源看上面整个问题,我们会发现,如果我们换参考系然后看动能,动能的变化量的确是不一样的.</p>
<p>但是问题在于,我们在意的不是动能的变化量,而是我引起这个变化需要外加多少能量.如果我引起这个变化所需要外加的能量不变,那么就仍然满足能量守恒定律.</p>
<p>如果我们换参考系,动能的变化量改变,但是同时原本不做功的力也会随之进行做功.事实上由于力的作用点最多只在一个惯性参考系下才是静止的,因此换参考系几乎一定会引起力的做功.</p>
<hr>
<p>所以我们其实还可以再举一个类似的例子:</p>
<p>考虑一个劲度系数为$k $的弹簧连在地上,上面放了一个重物$M $,我们来观察一下这个东西.</p>
<p>不妨取<strong>重物放上弹簧后的平衡位置</strong>为重力势能和弹性势能的零点,设弹簧原长位置相对于此位置距离为$x _0 $,此时当然有$kx _0 = Mg $那考虑系统的弹性势能:</p>
<script type="math/tex; mode=display">
E _{ p 1  } = \frac { k  } { 2  } ( x - x _0 ) ^2 - \frac { k  } { 2  } ( x _0 ) ^2 = \frac { k  } { 2  } x ^2 - kx _0 x</script><p>重力势能:</p>
<script type="math/tex; mode=display">
E _{ p 2  } = Mgx</script><p>那么总势能当然是:</p>
<script type="math/tex; mode=display">
E _p = \frac { 1  } { 2  } kx ^2 - kx _0 x + Mgx = \frac { 1  } { 2  } kx ^2</script><hr>
<p>时隔不知道多长时间,现在我们来证明柯尼希定理:质点系在参考系$A $中的总动能等于质点系在质心系中的动能与质心在参考系$A $中的动能之和.</p>
<p>不妨设质心系下质点系的总动能为$E _{ kS  } $,参考系$A $下的总动能为$E _{ kA  } $,质心相对于$A $参考系的速度为$\vec { v  } _C $,我们当然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E _{ kS  } & = \frac { k  } { 2  } \sum m _i ( \vec { v  } _i - \vec { v  } _C ) ^2 \\
& = E _{ kA  } + \frac { k  } { 2  } ( M \sum ( \vec { v  } _C ) ^2 - 2 \sum m _i \vec { v  } _i \vec { v  } _C ) \\
& = E _{ kA  } + \frac { k  } { 2  } ( M \sum ( \vec { v  } _C ) ^2 - 2 ( \vec { v  } _C ) ^2 \sum m _i ) \\
& = E _{ kA  } - \frac { k  } { 2  } M ( \vec { v  } _C ) ^2 
\end{aligned}</script><p>那这就给出了一个更强的结论,而且这里的质心参考系甚至不需要是惯性系.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被蝴蝶创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E8%9D%B4%E8%9D%B6%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>事情是这样的,很久很久很久以前,我做了一个圆锥曲线压轴题,大概就是椭圆$x $轴上蝴蝶定理硬算题给我整傻眼了.今天我闲的没事乱想突然意识到椭圆可以仿射变换到圆来解决,那么圆肯定有很优美的做法了吧!</p>
<p>然而我瞪了半天也没看出来,没办法最后拿联消判韦把圆的结论搓出来了.</p>
<p>这个时候我又想看看其它的圆锥曲线,发现双曲线好像有点不太会,因为我不是很懂双曲线的内部是啥,然后我发现抛物线的蝴蝶定理更加优美.</p>
<p>所以我就把这一坨东西出了思考题,下面是整理.</p>
<h3><span id="约定">约定</span></h3><p>下文称$A , B , C $三点满足蝴蝶定理,当且仅当A,B,C三点都在圆锥曲线内部,并且过A的直线与圆锥曲线交于$P , Q $两点,$PB , QB $分别与圆锥曲线交于$P ‘ , Q ‘ $两点,而且$P ‘ Q ‘ $恒过$C $点.</p>
<h3><span id="抛物线">抛物线</span></h3><h4><span id="定理1">定理1</span></h4><p>对于任何一条抛物线$y ^2 = 2 px $以及与其内部一点$A ( a , 0 ) $,过$A $点与抛物线相交的两个点的横坐标之积等于$a ^2 $.</p>
<p>证明:联立即可.</p>
<h4><span id="定理2">定理2</span></h4><p>对于任何一条抛物线$y ^2 = 2 px $以及其内部的三点$A ( a , 0 ) , B ( b , 0 ) , C ( c , 0 ) $,三点满足蝴蝶定理当且仅当$b ^2 = ac $.</p>
<p>证明:由定理1,我们有:</p>
<p>x_Qx_{Q’}=b^2\\x_{P’}x_{Q’}=c^2\end{cases}</p>
<p>简单解一下就可以.</p>
<h4><span id="定理3">定理3</span></h4><p>对于任何一条抛物线$y ^2 = 2 px $以及其内部的两点$A ( x _a , y _a ) , B ( x _b , y _b ) $,要么存在一个点$C $使得$A , B , C $三点满足蝴蝶定理,要么$P ‘ Q ‘ $的斜率恒定.</p>
<p>证明:</p>
<h5><span id="引理">引理</span></h5><p>如果一条动直线$Ax + By + C = 0 $中,$A , B , C $满足一次方程$pA + qB + C = 0 $,那么这条直线肯定过定点$( p , q ) $.</p>
<p>而如果可以找到一个参数$t $,使得可以做到将$A , B , C $分别表示为$f ( t ) , g ( t ) , h ( t ) $的形式,其中$f , g , h $都是关于$t $的一次函数或常函数,那么这条直线要么过定点,要么斜率恒定.</p>
<p>对于$P ‘ Q ‘ $这条直线,这个$t $相当好找,可以是$k _{ PQ  } $,可以是$y _P y _Q $,可以是$y _P + y _Q $,然后带入简单检验一下即可.</p>
<h3><span id="圆">圆</span></h3><h4><span id="定理坎迪定理">定理(坎迪定理)</span></h4><h5><span id="特例">特例</span></h5><p>对于任何一个圆$x ^2 + y ^2 = r ^2 $以及其内部三点$A ( a , 0 ) , B ( b , 0 ) , C ( c , 0 ) $,若三点满足蝴蝶定理,当且仅当$( a + c ) ( b ^2 + r ^2 ) = 2 b ( ac + r ^2 ) $.</p>
<h5><span id="通解">通解</span></h5><p>对于任何一个圆,我们有下图(图源自百度百科)</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ah1ipl9o.png" alt></p>
<p>那么$\frac { 1  } { GP  } - \frac { 1  } { HP  } = \frac { 1  } { AP  } - \frac { 1  } { BP  } $.</p>
<p><del>该定理的几何/代数证明好像都略麻烦,笔者决定开摆</del></p>
<p>@Querainy 牛逼,下面给出他提供的曲线系<a href="https://www.luogu.com.cn/blog/uakioi/qu-xian-xi">证明</a>:</p>
<p>我们尝试把这个做法拓展到坎迪定理上.</p>
<p>照葫芦画瓢,设圆心为$( x _0 , y _0 ) $,得到$( CE , DF ) : ( 1 + \lambda k _1 k _2 ) x ^2 - 2 x _0 x + x _0 ^2 + y _0 ^2 - r ^2 = 0 $.</p>
<p>此时,$| AB | = \sqrt { r ^2 - y _0 ^2  } $,$| AP | = | AB | - x _0 , | BP | = | AB | + x _0 $,$\frac { 1  } { AP  } - \frac { 1  } { BP  } = \frac { 2 x _0  } { r ^2 - y _0 ^2 - x _0 ^2  } $.</p>
<p>而$\frac { 1  } { GP  } - \frac { 1  } { HP  } = - \frac { y _1 + y _2  } { y _1 y _2  } = \frac { 2 x _0  } { r ^2 - y _0 ^2 - x _0 ^2  } $.</p>
<p>笔者后来思考了一下为什么这个是二次曲线系啊.</p>
<p>我们考虑求过四个定点的二次曲线系,不妨假设这些二次曲线均为$Ax ^2 + By ^2 + Cxy + Dx + Ey + F = 0 $\\</p>
<p>带入四个定点坐标,就可以得到关于$( A , B , C , D , E , F ) $的四个方程.不妨先假设这四个方程线性无关.那么就有两个自由元,那么方程的任何一个解,就可以表示为两组线性无关的特解的线性组合.</p>
<p>注意到两个二次曲线线性相关,当且仅当它们是同一条曲线,这就证明了二次曲线系的正确性!</p>
<p>那么怎么证明这四个方程线性无关呢,不太会啊,这次真摆了.</p>
<h3><span id="椭圆">椭圆</span></h3><h4><span id="定理1">定理1</span></h4><p>对于任何一个椭圆$\frac { x ^2  } { r ^2  } + \frac { y ^2  } { d ^2  } = 1 ( r &gt; d ) $以及其内部三点$A ( a , 0 ) , B ( b , 0 ) , C ( c , 0 ) $,若三点满足蝴蝶定理,当且仅当$( a + c ) ( b ^2 + r ^2 ) = 2 b ( ac + r ^2 ) $.</p>
<p>证明:</p>
<p>注意到圆的坎迪定理的特例,然后发现我们如果将椭圆的纵轴拉长使其成为一个圆,换言之就是对椭圆进行仿射变换,那么$A , B , C $三点坐标不变并且仍然满足蝴蝶定理.</p>
<h3><span id="其它">其它</span></h3><p>众所周知,极点极线有一个经典内切四边形结论,其实也就是所谓的完全四边形啊.</p>
<p>给张图,</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9uzi7mgg.png" alt></p>
<p>其中$G , D , H , A $成调和点列.</p>
<p>我们冷静一下,注意到$( AF , AE ) $就是一个二次曲线,而且$F , C , B , E $是二次曲线上四个点,所以这个还可以用曲线系方程来证明这四个点成调和点列,非常有实力.</p>
<p>当然,为了应对文化课,我们有更加简单的证明完全四边形调和点列的做法:</p>
<p>不妨设$d = \frac { BC  } { EF  } $,令$\vec { e  } = \vec { AE  } , \vec { f  } = \vec { AF  } $,则$\vec { AD  } = \lambda _1 \vec { e  } + \mu _1 d \vec { f  } = \lambda _2 d \vec { e  } + \mu _2 \vec { f  } $,对比系数得到两个方程,再加上$\mu _1 + \lambda _1 = 1 , \mu _2 + \lambda _2 = 1 $,立刻解出结论.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>文化课数学导论</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E6%96%87%E5%8C%96%E8%AF%BE%E6%95%B0%E5%AD%A6%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<span id="more"></span>
<h2><span id="概统导论">概统导论</span></h2><h3><span id="习惯的更改">习惯的更改</span></h3><p>这一部分主要是和组合相关,文化课中的组合内容有一些很奇怪的形式,比如竞赛中为了避免巨量的字母符号所带来的丑陋形式,会将$C _{ n  } ^k $写作$\binom { n  } { k  } $,而文化课中不允许此类更改,再者文化课中将$C _{ n  } ^k a ^{ n - k  } b ^k $称作二项式的第$k + 1 $项(从第$1 $项开始编号),此等同样是一个需要改正的习惯.</p>
<h3><span id="从线性角度审视">从线性角度审视</span></h3><p>首先我们有$E ( aX + b ) = aE ( X ) + b , D ( aX + b ) = a ^2 D ( X ) $.</p>
<p>我们都知道期望满足线性可加,也就是$E ( X _1 + X _2 ) = E ( X _1 ) + E ( X _2 ) $,这很好理解,因为期望从一开始定义就是所有情况下的答案的加和,因此根据我们的加法交换律和结合律就可以导出上面的式子.</p>
<p>我们还知道期望的乘法在相互独立的条件下是可以直接乘的,也就是若$X _1 $和$X _2 $相互独立,$E ( X _1 X _2 ) = E ( X _1 ) E ( X _2 ) $,同样是拆期望那个式子,使用乘法分配律得到.</p>
<p>而方差在相互独立的条件下同样是线性可加的,也就是只要$X _1 $和$X _2 $相互独立,$D ( X _1 + X _2 ) = D ( X _1 ) + D ( X _2 ) $.从形式上证明是好证明的,我们考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
D ( X _1 + X _2 ) & = E ( ( X _1 + X _2 ) ^2 ) - E ^2 ( X _1 + X _2 ) \\
& = E ( X _1 ^2 ) + E ( 2 X _1 X _2 ) + E ( X _2 ^2 ) - E ^2 ( X _1 + X _2 ) \\
& = E ( X _1 ^2 ) + 2 E ( X _1 ) E ( X _2 ) + E ( X _2 ^2 ) - ( E ( X _1 ) + E ( X _2 ) ) ^2 \\
& = E ( X _1 ^2 ) - E ^2 ( X _1 ) + E ( X _2 ^2 ) - E ^2 ( X _2 ) \\
& = D ( X _1 ) + D ( X _2 ) 
\end{aligned}</script><p>或者你也可以卷积然后求导啊!</p>
<p>如何从感性上理解这一点呢?很遗憾,笔者暂时没有想出从感性上理解的方式.从感觉上来讲,笔者比较相信这和独立变量以及正交性有关,查询相关资料得到了协方差的概念,也就是当两个变量独立的时候协方差为$0 $,不然$D ( X _1 + X _2 ) $要再加上两倍的协方差.笔者的能力也就到此了.</p>
<p>对于数据统计部分,我们会发现它在做的其实都是一个套路:将数据放在均值的两侧,也就是减去均值,这样新的值的均值为$0 $,并且缩放权值,使得方差恰好为$1 $.这个做法在正态分布那里就已经展示了它的强大.这是下面概统的极重要的思想,似乎被称作”标准化”.如果我们痴迷于这个思想,就会发现概统的一切复杂的公式的目的只有两个:让误差均值为$0 $的前提下,使得方差最小.</p>
<h3><span id="分布列">分布列</span></h3><h4><span id="两点分布">两点分布</span></h4><p>直接写的话也就是$P ( X ) = \begin{cases}p &amp; X = 1 \ 1 - p &amp; X = 0 \ 0 &amp; other \end{cases} $,事实上这么写可能不太严谨,因为两点分布的$X = 1 $和$X = 0 $两个事件互为对立,但笔者仍然选择这种形式来写,因为看着舒服.</p>
<p>考虑概率生成函数,自然是$G ( x ) = ( 1 - p ) + px $.由此式子轻松推得$E ( x ) = G ‘ ( 1 ) = p , D ( x ) = E ( x ^2 ) - E ^2 ( x ) = G ‘ ‘ ( 1 ) + G ‘ ( 1 ) - ( G ‘ ( 1 ) ) ^2 = p - p ^2 = p ( 1 - p ) $.</p>
<p>这里非要炫技用一下概率生成函数是因为笔者快忘了这玩意怎么用了,这个东西在下面几乎不会再用到了.</p>
<h4><span id="二项式分布">二项式分布</span></h4><p>所谓$n $重伯努利试验,也就是$n $次两点分布的累计,满足$P ( X = k ) = C _{ n  } ^k ( 1 - p ) ^{ n - k  } p ^k $,我们关注两个事情,也就是二项式分布的$E ( X ) = np , D ( X ) = np ( 1 - p ) $,也就是将两点分布的均值与方差给拆开单独累加了.</p>
<h4><span id="超几何分布">超几何分布</span></h4><p>所谓不放回取球,考虑目前有$N $个数字,有$M $个是$1 $,剩下$N - M $个是$0 $,取出$n $次,取出了$m $个$1 $的概率.简单组合一下得到此概率为$\frac { C _{ M  } ^m C _{ N - M  } ^{ n - m  }  } { C _{ N  } ^n  } \ $,注意这里必须保证$n \leq N $.</p>
<p>由范德蒙德卷积得知,$\sum _{ m  } C _{ M  } ^m C _{ N - M  } ^{ n - m  } = C _{ N  } ^n $,因此该分布列所有情况之和为$1 $.</p>
<p>考虑其均值,从感性上讲必定是$\frac { nM  } { N  } $.</p>
<p>从理性上讲,首先可以吸收恒等式+范德蒙德卷积,其次可以概率生成函数.</p>
<p>结合来讲,考虑每一个事件:它必然形如$01101 $之类的,表示每一次取出时拿到的球.不难发现对于事件的全集,我们交换前两个球,仍然唯一对应到了事件的全集.也就是说取出的顺序并不重要,第一次取得到$1 $的概率,和第二次取得到$1 $的概率完全相等,这必然意味着两次的期望相等.</p>
<p>方差是$n \frac { N ( N - M ) ( N - n )  } { N ^2 ( N - 1 )  } $,不太想管这个东西了.</p>
<h4><span id="正态分布">正态分布</span></h4><p>前面的分布大都是离散的,而正态分布是连续函数,因此我们写$f ( x ) = \frac { e ^{ - \frac { ( x - \mu ) ^2  } { 2 \sigma ^2  }  }  } { \sigma \sqrt { 2 \pi  }  } \ $,是不是看着非常震撼!其中的方差是$\sigma ^2 $,期望是$\mu $.本着闲着没事干的原则,我们来彻底冷静一下剖析整个正态分布函数:</p>
<p>众所周知,标准正态分布满足$\sigma = 1 , \mu = 0 $,此时的函数也就是$f ( x ) = \frac { e ^{ - \frac { x ^2  } { 2  }  }  } { \sqrt { 2 \pi  }  } $.一个好奇是,你凭啥说所有情况下的概率之和为$1 $,事实上这其实是因为$g ( x ) = e ^{ - x ^2  } $的积分是$\sqrt { \pi  } $,不会求这个积分.</p>
<p>观察$g ( x ) = e ^{ - x ^2  } $这个函数,你会发现它其实是想要模拟一个钟形曲线,也就是中间部分要更高,两边要更低.如果只是这样,我们完全可以用函数$e ^{ - | x |  } $模拟,但这样的曲线并不圆滑,中间有个小突起,这是因为绝对值本身的分段函数性质,因此直接把上面那个东西换成平方得到一个更圆滑的曲线,如果想要这个曲线横向放缩,则对横坐标使用变换,这就是$\sigma $的由来,将$x \rightarrow \sigma x $,也就是在$x $那里除去一个$\sigma $.而对这个曲线进行横向移动,也就是将$x \rightarrow x - \mu $.</p>
<p>这也就引出所谓的$3 \sigma $原则了,同样是积分.</p>
<h3><span id="成对数据的统计">成对数据的统计</span></h3><h4><span id="样本相关系数">样本相关系数</span></h4><p>对于若干数据$( x _i , y _i ) $,我们先进行标准化,也就是减去均值后再除以方差,这样做使得$x , y $分别的均值为$0 $,方差为$1 $.下面默认已经标准化过了.</p>
<p>不妨构造$n $维向量$\vec { x  } = ( x _1 , x _2 , \cdots , x _n ) , \vec { y  } = ( y _1 , y _2 , \cdots , y _n ) $,考虑它们的点乘$\vec { x  } \cdot \vec { y  } $,不难发现由于方差为$1 $,因此$| \vec { x  } | = | \vec { y  } | = \sqrt { n  } $,因此它们的点乘为$n \cos \theta $,设$r = \frac { \vec { x  } \cdot \vec { y  }  } { n  } = \cos \theta $.</p>
<p>如果$\exists k $,$\forall i , y _i = kx _i $,此时必有$| r | = 1 $,因此我们断言(为啥呢?其实是不太理解的啊)当$| r | $越靠近$1 $的时候,$x , y $之间的线性关系越强.</p>
<h4><span id="最小二乘法">最小二乘法</span></h4><p>我们在上面的角度审视中提出了一个观点:在满足均值为$0 $的前提下,使得方差最小.由此我们审视所谓的一元线性回归方程:$Y = bx + a + e , E ( e ) = 0 , D ( e ) = \sigma ^2 $.</p>
<p>现在我们要做的就是,已知若干组数据$( x _i , y _i ) $,去构造一组$a , b $满足上面的条件.不妨令$e _i = y _i - ( bx _i + a ) $,若$\sum e _i = 0 $,必有$a = \bar { y  } - b \bar { x  } $,带入解得当$\sigma $最小的时候,$b = \frac { \sum _{ i  } ( x _i - \bar { x  } ) ( y _i - \bar { y  } )  } { \sum _{ i  } ( x _i - \bar { x  } ) ^2  } \ $.</p>
<p>提出质疑:为啥这里不需要对数据进行标准化呢?</p>
<p>因为标准化没有用,我们的目的是找到那个$b $使得$\sigma $最小,标准化说到底只是为了保证$\sigma = 1 $的工具,没有必要在这里标准化.</p>
<h4><span id="独立性检验">独立性检验</span></h4><p>使用卡方分布,懒得去学细节了.</p>
<p>独立性检验其实是依赖于这么一件事实:那就是如果两个事件独立,我们得知$P ( AB ) = P ( A ) P ( B ) $,那么我们反推,如果我们在现实中的估计中,发现$P ( AB ) $和$P ( A ) P ( B ) $差的太大,那么我们就认定其没有独立性.</p>
<p>接下来不妨设在测试过程中估算出:$P ( 00 ) = \frac { a  } { n  } , P ( 01 ) = \frac { b  } { n  } , P ( 10 ) = \frac { c  } { n  } , P ( 11 ) = \frac { d  } { n  } $.那么$P ( A = 0 ) P ( B = 0 ) = \frac { ( a + b ) ( a + c )  } { n ^2  } $.我们计算它与$P ( 00 ) $的差,平方后除以$P ( A = 0 ) P ( B = 0 ) $然后做四遍求和化简,得到$\chi ^2 = \frac { n ( ad - bc ) ^2  } { ( a + b ) ( a + c ) ( c + d ) ( b + d )  } $.</p>
<p>这有什么用呢?通过牛逼数学家的计算,我们可以认为如果独立性成立,那么$P ( \chi ^2 \geq x _\alpha ) = \alpha $.或者给出我们经验上的准则:</p>
<p>选取一个较小的$\alpha $,并得知其对应的$x _\alpha $,如果$\chi ^2 \geq x _\alpha $,推断独立性不成立,犯错的概率是$\alpha $.反之断言其独立性成立,犯错的概率不可知,肯定$\alpha $越大犯错的概率越小.</p>
<h2><span id="函数导论">函数导论</span></h2><h3><span id="常用对数表">常用对数表</span></h3><ol>
<li><p>$\ln 2 = 0 . 693 $.</p>
</li>
<li><p>$\ln 3 = 1 . 099 $.</p>
</li>
<li><p>$\ln 5 = 1 . 609 $.</p>
</li>
<li><p>$\ln 0 . 1 = - 2 . 303 $.</p>
</li>
<li><p>$\ln 0 . 5 = - 0 . 693 $.</p>
</li>
</ol>
<h3><span id="常用指数表">常用指数表</span></h3><ol>
<li><p>$e = 2 . 718 $.</p>
</li>
<li><p>$e ^2 = 7 . 389 $.</p>
</li>
<li><p>$e ^3 = 20 . 086 $.</p>
</li>
<li><p>$e ^5 = 148 . 413 $.</p>
</li>
<li><p>$e ^{ 0 . 1  } = 1 . 105 $.</p>
</li>
<li><p>$e ^{ 0 . 5  } = 1 . 649 $.</p>
</li>
<li><p>$e ^\pi = 23 . 147 $.</p>
</li>
</ol>
<h3><span id="基本函数的图像及性质">基本函数的图像及性质</span></h3><h4><span id="fxxex">$f(x)=xe^x$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\xe^x.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = ( x + 1 ) e ^x $,$x = - 1 $的时候,取最小值$- \frac { 1  } { e  } $.</p>
<p>另外$\lim _{ x \rightarrow - \infty  } f ( x ) = 0 \ $.</p>
<hr>
<h4><span id="fxxln-x">$f(x)=x\ln x$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\xlnx.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = 1 + \ln x , x = \frac { 1  } { e  } $的时候,有最小值$- \frac { 1  } { e  } $.</p>
<p>另外$\lim _{ x \rightarrow 0 ^{ +  }  } f ( x ) = 0 \ $.</p>
<hr>
<h4><span id="fxfracexx">$f(x)=\frac{e^x}{x}$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\e^xdivx.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = \frac { e ^x ( x - 1 )  } { x ^2  } , x = 1 $的时候,有极小值$e $.</p>
<p>另外$\lim _{ x \rightarrow - \infty  } f ( x ) = 0 \ $.</p>
<hr>
<h4><span id="fxfracln-xx">$f(x)=\frac{\ln x}{x}$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\lnxdivx.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = \frac { 1 - \ln x  } { x ^2  } , x = e $的时候,有极大值$\frac { 1  } { e  } $.</p>
<p>另外$\lim _{ x \rightarrow + \infty  } f ( x ) = 0 \ $.</p>
<hr>
<h4><span id="fxx-ln-x">$f(x)=x-\ln x$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\xminuslnx.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = 1 - \frac { 1  } { x  } , x = 1 $的时候,有最小值$1 $.</p>
<hr>
<h4><span id="fxfracxex">$f(x)=\frac{x}{e^x}$</span></h4><h5><span id="图像">图像</span></h5><p><img src="F:\Studying Materials\学习资料（ymh）\OI资料\笔记\基本函数的图像\xdive^x.png" alt></p>
<h5><span id="极值与极限">极值与极限</span></h5><p>$f ‘ ( x ) = \frac { 1 - x  } { e ^x  } , x = 1 $的时候,有最大值$\frac { 1  } { e  } $.</p>
<p>另外$\lim _{ x \rightarrow + \infty  } f ( x ) = 0 \ $.</p>
<h3><span id="预处理函数">预处理函数</span></h3><h4><span id="分离对数">分离对数</span></h4><h5><span id="example">Example</span></h5><p>令$f ( x ) = ( 2 + x + ax ^2 ) \ln ( x + 1 ) - 2 x $,已知$x = 0 $是极大值点,求$a $.</p>
<p>考虑分离对数后操作多项式,我们显然可找到$0 &lt; t &lt; 1 , 2 + t + at ^2 &gt; 0 , 2 - t + at ^2 &gt; 0 $,下面只考虑$x \in [ - t , t ] $.此时$f ( x ) = ( 2 + x + ax ^2 ) ( \ln ( x + 1 ) - \frac { 2 x  } { 2 + x + ax ^2  } ) $.</p>
<p>考虑令$g ( x ) = \ln ( x + 1 ) - \frac { 2 x  } { 2 + x + ax ^2  } $,由于$f ( 0 ) = 0 $,只需证明$g ( x ) \leq 0 , x \in [ - t , t ] $即可.</p>
<p>而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ' ( x ) & = \frac { 1  } { x + 1  } - \frac { 4 - 2 ax ^2  } { ( 2 + x + ax ^2 ) ^2  } \\
& = \frac { x ^2 ( a ^2 x ^2 + 4 ax + 6 a + 1 )  } { ( x + 1 ) ( 2 + x + ax ^2 )  } \\
\text { sign  } ( g ' ( x ) ) & = \text { sign  } ( a ^2 x ^2 + 4 ax + 6 a + 1 ) 
\end{aligned}</script><p>则$a ^2 0 ^2 + 4 a 0 + 6 a + 1 = 0 $,$a = - \frac { 1  } { 6  } $.验证一下.</p>
<h4><span id="消去指数">消去指数</span></h4><h5><span id="example">Example</span></h5><p>令$f ( x ) = e ^x - \ln ( x + 1 ) + ax ^3 - x ^2 - 1 $,若$\forall x \in ( - 1 , 1 ) , f ( x ) \geq 0 $,求$a $.</p>
<p>$f ( 0 ) = 0 $,于是上面的条件等价于$0 $是$( - 1 , 1 ) $的最小值点.</p>
<p>考虑$f ‘ ( x ) = e ^x - \frac { 1  } { x + 1  } + 3 ax ^2 - 2 x $,则$f ‘ ( 0 ) = 0 $恒成立.</p>
<p>讨论$g ( x ) = 1 + e ^{ - x  } ( 3 ax ^2 - 2 x - \frac { 1  } { x + 1  } ) $的正负,看$g ‘ ( x ) = \frac { x ( - 3 ax ^3 + 2 x ^2 + ( 9 a + 2 ) x + 6 a - 1 )  } { ( x + 1 ) ^2 e ^x  } $.</p>
<p>接下来的讨论是简单的.</p>
<h3><span id="消元法">消元法</span></h3><h4><span id="变化条件">变化条件</span></h4><h5><span id="example">Example</span></h5><p>已知$x + 2 y = 1 $,求$x ^2 + y ^2 $的最小值.</p>
<p>直接令$x = 1 - 2 y $,带入即可.</p>
<h4><span id="变化所求">变化所求</span></h4><h5><span id="example">Example</span></h5><p>已知$x ^2 + y ^3 = 2 $,求$x + y $的最小值.</p>
<p>这个的话不妨设其最小值为$C $,有$x + y \geq C $,移项得到$y \geq C - x $,两边三次方然后带入.</p>
<h3><span id="换元法">换元法</span></h3><h4><span id="普通参数方程">普通参数方程</span></h4><h5><span id="example">Example</span></h5><p>已知$x ^2 + y ^2 - xy = 1 $,求$x + y $的最小值.</p>
<p>这个的话大概是这样,我们找到一个$t $,使得$x = f ( t ) , y = g ( t ) $,然后换元.</p>
<p>比如这个题,你就可以凑成$( x - \frac { y  } { 2  } ) ^2 + ( \frac { \sqrt { 3  }  } { 2  } y ) ^2 = 1 $,然后做三角换元.</p>
<h4><span id="齐次化构造">齐次化构造</span></h4><h5><span id="example1对数平均不等式">Example1(对数平均不等式)</span></h5><p>求证$\sqrt { ab  } &lt; \frac { a - b  } { \ln a - \ln b  } &lt; \frac { a + b  } { 2  } $.</p>
<p>两边证明方式类似,这里只证明右半边,下面的证明的每一步均为充要的,因而可以倒退.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { a - b  } { \ln a - \ln b  } & < \frac { a + b  } { 2  } \\
\frac { a - b  } { a + b  } & < \frac { \ln \frac { a  } { b  }  } { 2  } \\
\frac { \frac { a  } { b  } - 1  } { \frac { a  } { b  } + 1  } & < \frac { \ln \frac { a  } { b  }  } { 2  } 
\end{aligned}</script><p>换元,令$t = \frac { a  } { b  } $,然后下面大力求导.</p>
<h5><span id="example2">Example2</span></h5><p>已知函数$f ( x ) = 3 \ln x - ax $,若$x _1 &lt; x _2 $是$f ( x ) $的两个零点,求证$f ‘ ( \frac { x _1 + 3 x _2  } { 4  } ) &lt; 0 $.</p>
<p>我们来分析已知,我们目前知道的是:</p>
<script type="math/tex; mode=display">
\begin{cases}
3 \ln x _1 = ax _1 \\
3 \ln x _2 = ax _2 
\end{cases}</script><p>我们想要知道的是:$\frac { 12  } { x _1 + 3 x _2  } &lt; a $.</p>
<p>这就是整个题全部的部分,和前面的函数其实一点关系都没太有.那么这个东西怎么搞呢?我们先把$a $给换掉,事实上我们根据前面的方程有$a = \frac { 3 \ln \frac { x _2  } { x _1  }  } { x _2 - x _1  } $.</p>
<p>于是我们只需要证明:$\frac { x _1 + 3 x _2  } { 4  } &gt; \frac { x _2 - x _1  } { \ln \frac { x _2  } { x _1  }  } $,这是一个很显然的齐次化形式.</p>
<h5><span id="example3">Example3</span></h5><p>已知函数$f ( x ) = \ln x - ax $,其有两个零点$x _1 \ne x _2 $,求证$x _1 x _2 &gt; e ^2 $.</p>
<p>同样分析已知,我们得到的是:</p>
<script type="math/tex; mode=display">
\begin{cases}
\ln x _1 = ax _1 \\
\ln x _2 = ax _2 
\end{cases}</script><p>通过简单线代知识我们知道,如果我们想把这两个条件同时用上,我们最好先相加再相减,这样这一步推下来就是充要的:</p>
<script type="math/tex; mode=display">
\begin{cases}
\ln x _2 - \ln x _1 = a ( x _2 - x _1 ) \\
\ln x _2 + \ln x _1 = a ( x _2 + x _1 ) 
\end{cases}</script><p>这里先把所求变形一下,我们把它改成$\ln x _1 + \ln x _2 &gt; 2 $.</p>
<p>发现了什么?这个东西等价于$a ( x _2 + x _1 ) &gt; 2 $,至此,我们用上了第二个式子,并且将其蕴含到了答案中.</p>
<p>接下来用第一个式子代换$a $即可.</p>
<h5><span id="example4">Example4</span></h5><p>已知$f ( x ) = x ^2 + axe ^x - ae ^{ 2 x  } $有三个不同的零点$x _1 &lt; x _2 &lt; x _3 $,求$a $的范围,并求证$( 1 - \frac { x _1  } { e ^{ x _1  }  } ) ^2 ( 1 - \frac { x _2  } { e ^{ x _2  }  } ) ( 1 - \frac { x _3  } { e ^{ x _3  }  } ) = 1 $.</p>
<p>考虑两边同时除以$e ^{ 2 x  } $,这样得到$g ( x ) = ( \frac { x  } { e ^x  } ) ^2 + a \frac { x  } { e ^x  } - a $,令$t = \frac { x  } { e ^x  } $得到$g ( t ) = t ^2 + at - a = 0 $.</p>
<p>考察$g ( t ) = 0 $的两根$t _1 &lt; t _2 $,根据韦达定理,首先需要满足$\Delta = a ^2 + 4 a &gt; 0 \Rightarrow a &gt; 0 $,然后$t _1 + t _2 = - a , t _1 t _2 = - a $.</p>
<p>接下来考察函数$\frac { x  } { e ^x  } $,这个函数图像我们很熟悉,如果想要最后有三个零点,又因为$t _1 , t _2 $中必有一负,因此$t _2 \in ( 0 , \frac { 1  } { e  } ) $.由此立得$0 &lt; a &lt; \frac { 1  } { e ( e - 1 )  } $.</p>
<p>接下来考虑后面那个东西,其实就是简单韦达定理,随便做做.</p>
<h4><span id="同构化构造">同构化构造</span></h4><h5><span id="example1">Example1</span></h5><p>若$x &gt; 0 $时,$ax ( e ^{ ax  } + 1 ) \geq 2 ( x ^2 + 1 ) \ln x $恒成立,求$a $取值范围.</p>
<p>一般这种题先判$a $的正负,注意到$x &gt; 1 $的时候右边恒大于$0 $,因此$a &gt; 0 $.</p>
<p>观察这个式子,发现形式似乎很相似,更进一步地,我们把常数$2 $放进$\ln $,自然有:$ax ( e ^{ ax  } + 1 ) \geq ( x ^2 + 1 ) \ln x ^2 $.</p>
<p>考虑令$t _1 = ax , t _2 = \ln x ^2 $,则:</p>
<script type="math/tex; mode=display">
t _1 ( e ^{ t _1  } + 1 ) \geq t _2 ( e ^{ t _2  } + 1 )</script><p>接下来分析函数$f ( x ) = x ( e ^x + 1 ) $的单调性,就可以得到$a \geq \frac { 2  } { e  } $.</p>
<h3><span id="不等式相关">不等式相关</span></h3><h4><span id="基本不等式相关">基本不等式相关</span></h4><h5><span id="方程角度的审视">方程角度的审视</span></h5><p>我们曾经下过这么一个论断:即对于有一个方程限制的双变量,求另一个式子的最值,我们是可以有一套机械化方法探路的.具体而言,这个方法基于大部分情况下,我们只需要两个二元方程就可以得到确定的(唯一或者唯二或者常数个)原本的两个变量的值.</p>
<p>于是我们设一个常数来表示其中一个方程,另一个方程自然是题目给出的限制条件,我们只需要把所求转化为对于这个常数的限制就好了.</p>
<p>如果我们再去仔细揣摩这个过程,我们会发现一些更有趣的事情:即只要我们能做到”降次”这件事,我们似乎一定存在方程的解.这可能类似于所谓的齐次化构造$\frac { m  } { n  } = k $.</p>
<p>那这意味着什么呢?在绝大多数情况下我们拿到的方程都是非齐次的方程,这给了我们机会去降次.</p>
<p>我们给出一个例题:</p>
<h5><span id="example">Example</span></h5><p>已知$n , m &gt; 0 , 2 m + n = nm $,求$n + m + \sqrt { n ^2 + m ^2  } $的最小值.</p>
<p>这个题有一个方式是观察到$n , m , \sqrt { n ^2 + m ^2  } $是直角三角形的三条边然后使用三角换元.但我们接下来会给出一个更加厉害的做法:</p>
<p>我们想要知道它的最小值,就是想要证明下面这个不等式并且证明等号成立:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n + m + \sqrt { n ^2 + m ^2  } & \geq k \\
\Leftarrow \sqrt { n ^2 + m ^2  } & \geq k - n - m \\

\end{aligned}</script><p>如果$n + m \geq k $,那么不等式显然成立,下面只需要证明$n + m &lt; k $的情况:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sqrt { n ^2 + m ^2  } & \geq k - n - m \\
\Leftarrow n ^2 + m ^2 & \geq ( k - ( n + m ) ) ^2 \\
\Leftarrow k ^2 + ( n + m ) ^2 - 2 k ( n + m ) & \leq n ^2 + m ^2 \\
\Leftarrow k ^2 + 2 nm - 2 k ( n + m ) & \leq 0 \\
\Leftarrow k ^2 + n ( 2 - 2 k ) + m ( 4 - 2 k ) & \leq 0 \\
\Leftarrow k ^2 & \leq n ( 2 k - 2 ) + m ( 2 k - 4 ) 
\end{aligned}</script><p>变形方程得到$\frac { 2  } { n  } + \frac { 1  } { m  } = 1 $,使用这个式子来降次:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ( 2 k - 2 ) + m ( 2 k - 4 ) & = 6 k - 8 + \frac { n  } { m  } ( 2 k - 2 ) + \frac { m  } { n  } ( 4 k - 8 ) \\

\end{aligned}</script><p>要严谨一点的话我们需要证明$4 k - 8 \geq 0 $,$k \geq 2 $.这非常简单,因为$k \geq n + m &gt; 3 $.</p>
<p>这就足够了么?不需要证明存在一个$w = \frac { n  } { m  } $使得带入到原方程中有解么?这个其实是显然易证的.</p>
<p>那么:</p>
<script type="math/tex; mode=display">
n ( 2 k - 2 ) + m ( 2 k - 4 ) \geq 6 k - 8 + 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  }</script><p>这个等号可以取到,也就是说,只要满足:</p>
<script type="math/tex; mode=display">
k ^2 \leq 6 k - 8 + 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  }</script><p>那么这个$k $就是一个下界,特别地,如果满足:</p>
<script type="math/tex; mode=display">
k ^2 = 6 k - 8 + 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  }</script><p>那么这个$k $就是一个下确界,也就是我们想要求的最小值.</p>
<p>事情还没有解决(即使这个时候你已经能猜到$k = 10 $是一个解了),接下来我们必须求出一个$k $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
k ^2 & = 6 k - 8 + 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  } \\
k ^2 - 6 k + 8 & = 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  } \\
( k - 4 ) ( k - 2 ) & = 2 \sqrt { 8 ( k - 1 ) ( k - 2 )  } \\
\sqrt { k - 2  } & = \frac { 2 \sqrt { 8 ( k - 1 )  }  } { k - 4  } 
\end{aligned}</script><p>我们看上去走投无路了对么?其实不然,你发现这个式子两边的次是不等的,我们可以使用它降次!换言之,把这个$\sqrt { k - 2  } $带入到上面去!</p>
<script type="math/tex; mode=display">
\begin{aligned}
( k - 4 ) ( k - 2 ) & = 2 \sqrt { 8 ( k - 1 )  } \frac { 2 \sqrt { 8 ( k - 1 )  }  } { k - 4  } \\
( k - 4 ) ( k - 2 ) & = \frac { 32 ( k - 1 )  } { k - 4  } \\

\end{aligned}</script><p>我想你这个时候又会发现我们走投无路了,但稍微思考一下就会发现,这个方程一定没有常数项(或者说$k = 0 $是这个方程的一个解).</p>
<p>这样得到了一个二次方程,我们自然可以解出$k = 10 $.</p>
<h4><span id="泰勒展开">泰勒展开</span></h4><h5><span id="抽象函数的泰勒展开">抽象函数的泰勒展开</span></h5><script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = \sum _{ k \geq 0  } \frac { f ^{ ( k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k \\
f ( x ) & = \sum _{ k \geq 0  } \frac { f ^{ ( k )  } ( 0 )  } { k !  } x ^k \\

\end{aligned}</script><h5><span id="常用泰勒展开公式">常用泰勒展开公式</span></h5><ol>
<li><p>$\frac { 1  } { 1 - x  } = \sum _{ k \geq 0  } x ^k = 1 + x + x ^2 + \cdots \ $.</p>
</li>
<li><p>$e ^x = \sum _{ k \geq 0  } \frac { x ^k  } { k !  } = 1 + x + \frac { 1  } { 2 !  } x ^2 + \cdots \ $.</p>
</li>
<li><p>$\ln ( 1 + x ) = \sum _{ k \geq 1  } ( - 1 ) ^{ k - 1  } \frac { x ^k  } { k  } = x - \frac { 1  } { 2  } x ^2 + \frac { 1  } { 3  } x ^3 + \cdots \ $.</p>
</li>
</ol>
<h4><span id="极值点偏移">极值点偏移</span></h4><h5><span id="example1">Example1</span></h5><p>已知函数$f ( x ) = \ln x - ax $,其有两个零点$x _1 \ne x _2 $,求证$x _1 x _2 &gt; e ^2 $.</p>
<p>极值点偏移的形式,应该是形如$g ( x ) = a $有两个解$x _1 , x _2 $,然后使得$x _1 + x _2 $满足一定条件.因此我们先变形条件:</p>
<script type="math/tex; mode=display">
\begin{cases}
\frac { \ln x _1  } { x _1  } = a \\
\frac { \ln x _2  } { x _2  } = a 
\end{cases}</script><p>也就是目前我们构造出了函数$g ( x ) = \frac { \ln x  } { x  } $,观察$g ( x ) $图像立得$x _1 + x _2 &gt; 2 e $.</p>
<p>我们发现,$x _1 x _2 \leq \frac { ( x _1 + x _2 ) ^2  } { 4  } $,这个形式看上去非常正确!但是问题在于,我们好像不太能去变形不等式了,怎么办呢?</p>
<p>考虑对着我们要证明的东西去搞,极值点偏移可以解决相加性问题,因此我们变形所求为$\ln x _1 + \ln x _2 &lt; 2 $,然后令$t _1 = \ln x _1 , t _2 = \ln x _2 $,带入立有:</p>
<script type="math/tex; mode=display">
\begin{cases}
\frac { t _1  } { e ^{ t _1  }  } = a \\
\frac { t _2  } { e ^{ t _2  }  } = a 
\end{cases}</script><p>而$g ( x ) = \frac { x  } { e ^x  } $恰好也是满足$x _1 + x _2 &gt; 2 $的这么一个函数!于是我们就解决了问题.</p>
<h5><span id="example2">Example2</span></h5><p>$f ( x ) = x ( 1 - \ln x ) $,$b \ln a - a \ln b = a - b $,求证$2 &lt; \frac { 1  } { a  } + \frac { 1  } { b  } &lt; e $.</p>
<p>首先变形条件得到$b ( 1 + \ln a ) = a ( 1 + \ln b ) $,得到$f ( \frac { 1  } { a  } ) = f ( \frac { 1  } { b  } ) $,左半部分就是经典极值点偏移.</p>
<p>那么右半部分怎么做呢?我们来考虑:</p>
<p>$f ‘ ( x ) = - \ln x $,其在$( 0 , 1 ) \uparrow , ( 1 , + \infty ) \downarrow $,考察极值点偏移,我们想要证明$\frac { 1  } { b  } &lt; e - \frac { 1  } { a  } $,我们就想办法把$\frac { 1  } { b  } $和$e - \frac { 1  } { a  } $扔到同一个区间里,而它们确实同在$( 1 , + \infty ) $这个区间内.</p>
<p>比较有启发性的是,你发现$\frac { 1  } { b  } , e - \frac { 1  } { a  } $和$\frac { 1  } { a  } , e - \frac { 1  } { b  } $这两对必有一对在同一个区间内部.</p>
<p>现在我们就可以套路化了:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { b  } & < e - \frac { 1  } { a  } \\
f ( \frac { 1  } { a  } ) & = f ( \frac { 1  } { b  } ) & > f ( e - \frac { 1  } { a  } ) 
\end{aligned}</script><p>对着上面那个函数证明即可.</p>
<h5><span id="example3">Example3</span></h5><p>$f ( x ) = e ^{ x - 1  } - ax $在$( 0 , 2 ) $有两个零点$x _1 , x _2 $,求证$x _1 x _2 &gt; \frac { 1  } { a  } $.</p>
<p>首先要证明$a $的范围啊,我们不加证明地给出:$a \in ( 1 , \frac { e  } { 2  } ) $,并且$( - \infty , 1 + \ln a ) \downarrow , ( 1 + \ln a , + \infty ) \uparrow $.</p>
<p>这个其实差不多啊,简单来说就是首先列方程:</p>
<script type="math/tex; mode=display">
\begin{cases}
ax _1 = e ^{ x _1 - 1  } \\
ax _2 = e ^{ x _2 - 1  } 
\end{cases}</script><p>我们知道,一般双变量的问题加法会比较好做(原理是加法便于看单调区间),因此现在我们有两条路可走:要么变化所求,两边取$\ln $,要么变化已知.</p>
<p>我们发现如果变化所求,我们还得对已知两边取$\ln $,这也太麻烦了,不如直接变化已知.具体地,我们把已知的式子相乘就可以得到$x _1 x _2 $和$x _1 + x _2 $之间的关系,带下来就可以了.然后观察单调区间做极值点偏移.最后的式子应该形如$0 &lt; f ( 2 + \ln a - x _2 ) $,也就是$0 &lt; ae ^{ 1 - x _2  } - a ( 2 + \ln a - x _2 ) $.</p>
<p>但是这样有一个问题,我们把$f $带进去,你会发现最后我们的式子同时带有$a , x _2 $,这个就难做了,咋办呢?考虑拿$ax _2 = e ^{ x _2 - 1  } $操作一下把$a $消掉就好了.</p>
<h4><span id="切割线放缩">切割线放缩</span></h4><h5><span id="基本的切割线不等式">基本的切割线不等式</span></h5><ol>
<li><p>$e ^x \geq x + 1 $.</p>
</li>
<li><p>$\frac { x - 1  } { x  } \leq \ln x \leq x - 1 $.</p>
</li>
</ol>
<p>乍一看非常平凡,事实上有一些不平凡的推论:</p>
<ol>
<li>$\ln ( n + 1 ) &lt; \sum _{ k = 1  } ^n \frac { 1  } { k  } $.</li>
</ol>
<p>考虑$\ln ( \frac { n + 1  } { n  } ) &lt; \frac { 1  } { n  } $,左右两边分别求和得到上面的式子.</p>
<ol>
<li>$\ln n &gt; \sum _{ k = 2  } ^n \frac { 1  } { k  } , n &gt; 1 $.</li>
</ol>
<p>这个怎么证明呢?考虑左右取负,也就是需要证明$\ln \frac { 1  } { n  } &lt; - \sum _{ k = 2  } ^n \frac { 1  } { k  } $.</p>
<p>考虑$\ln ( \frac { n - 1  } { n  } ) \leq - \frac { 1  } { n  } $,两边求和得到上式.</p>
<ol>
<li>$\sum _{ k = 1  } ^n ( \frac { k  } { n  } ) ^n &lt; \frac { e  } { e - 1  } $.</li>
</ol>
<p>考虑$n \ln ( \frac { k  } { n  } ) \leq k - n $,也就有$( \frac { k  } { n  } ) ^n \leq e ^{ k - n  } $,两边求和得到上式.</p>
<h5><span id="一般的切割线放缩">一般的切割线放缩</span></h5><h6><span id="example1">Example1</span></h6><p>设$f ( x ) = x \ln x $,若$f ( x ) = b $有两个实数根$x _1 , x _2 ( x _1 &lt; x _2 ) $,求证:$be + 1 &lt; x _2 - x _1 &lt; \frac { e ^{ - 3  } + 2 + 3 b  } { 2  } $.</p>
<p>注意到$f ( x ) $下凸,考虑求出两条切线,那么这两条切线与$y = b $的交点之差要大于等于$x _2 - x _1 $,两条割线交点之差要小于等于$x _2 - x _1 $.</p>
<p>先求好求的割线,一般而言,我们考虑边界情况,也就是$b \rightarrow - \frac { 1  } { e  } $的情况,为了让这种情况有解,我们的割线必过$( \frac { 1  } { e  } , - \frac { 1  } { e  } ) $.</p>
<p>考虑直接选取$( 0 , 0 ) $和$( 1 , 0 ) $作为另外两个点,这两条割线就是$x = - y $和$x = ( e - 1 ) y + 1 $.做差立得上面的式子.</p>
<p>那么后半边怎么证明呢?我们考虑一个想法是:这题既然出出来了,它必然不可能是虚的.因此我们要找的切点不可能过于离谱.</p>
<p>另外一个事实是,我们考虑如果我们找到了一条切线,那么由于不等式的右边是定值,我们肯定想要让令一条切线稍微平均一下,使得$( x _2 - x _1 ) _{ \max  } $尽可能地小对吧!</p>
<p>我们不妨设我们要找的两个切点,一个横坐标是$u $,另一个是$v $,其中$v &lt; \frac { 1  } { e  } &lt; u $,那么两条切线分别是:</p>
<script type="math/tex; mode=display">
\begin{cases}
x = \frac { y - f ( u )  } { f ' ( u )  } + u \\
x = \frac { y - f ( v )  } { f ' ( v )  } + v 
\end{cases}</script><p>那么,现在我们要做的就是找到一组$( u , v ) $,使得:</p>
<script type="math/tex; mode=display">
\frac { b - f ( u )  } { f ' ( u )  } + u - \frac { b - f ( v )  } { f ' ( v )  } - v = \frac { e ^{ - 3  } + 2 + 3 b  } { 2  }</script><p>感觉很难搞啊,我们不妨让$u = 1 $,自然有:</p>
<script type="math/tex; mode=display">
\frac { ( f ' ( v ) - 1 ) b + f ( v ) - vf ' ( v )  } { f ' ( v )  } = \frac { e ^{ - 3  } + 3 b  } { 2  }</script><p>然后我们凑系数,上面的式子,我们大胆猜测:</p>
<script type="math/tex; mode=display">
\begin{cases}
\frac { f ' ( v ) - 1  } { f ' ( v )  } = \frac { 3  } { 2  } \\
\frac { f ( v ) - vf ' ( v )  } { f ' ( v )  } = \frac { e ^{ - 3  }  } { 2  } 
\end{cases}</script><p>考虑让$f ‘ ( v ) = - 2 $,则$v = e ^{ - 3  } $,带入发现正好适配.</p>
<h4><span id="凹凸性反转">凹凸性反转</span></h4><h5><span id="example1">Example1</span></h5><p>求证:$\forall x \in ( 0 , + \infty ) , \ln x + 1 &gt; \frac { 1  } { e ^{ x + 1  }  } - \frac { 2  } { e ^2 x  } $.</p>
<p>这个式子看上去就很震撼,那么我们该怎么处理呢?</p>
<p>我们知道常数项在导数中是好处理的,而且我们通过强大的注意力,发现右边那个式子如果乘以$x $,他就是一个凸函数了,而左边也是有凹凸性的.</p>
<p>因此我们变形为$x \ln x + x &gt; \frac { x  } { e ^{ x + 1  }  } - \frac { 2  } { e ^2  } $,然后证明左边的最小值$\geq $右边的最大值.</p>
<h4><span id="比较大小">比较大小</span></h4><p>接下来以一个题为例,介绍一下几种估算/严谨的比较大小方式.</p>
<h5><span id="example1">Example1</span></h5><p>已知$a = 0 . 1 e ^{ 0 . 1  } , b = \frac { 1  } { 9  } , c = - \ln 0 . 9 $,求比较$a , b , c $的大小关系.</p>
<h6><span id="二阶导数">二阶导数</span></h6><p>我们上面声明过了二次导数可以判断极值类型,我们用这个方式来计算$a $和$c $的大小关系.</p>
<p>构造函数$f ( x ) = xe ^x + \ln ( 1 - x ) $,则$f ( 0 . 1 ) &gt; 0 \Rightarrow a &gt; c $.</p>
<p>考察$f ( 0 ) = 0 $,$f ‘ ( 0 ) = 0 $,$f ‘ ‘ ( 0 ) = 4 &gt; 0 $,则$f ( 0 ) = 0 $是一个极小值点,并在接下来有着增大的趋势.因此我们可以估算$f ( 0 . 1 ) &gt; 0 $.</p>
<h6><span id="估算定积分">估算定积分</span></h6><p>考察$a $和$b $的大小关系,不妨设$f ( x ) = ( 1 - x ) e ^{ 1 - x  } - \frac { 1  } { 10 x  } $,则$f ( 0 . 9 ) &lt; 0 \Rightarrow b &gt; a $.</p>
<p>注意到$f ( 1 ) = - \frac { 1  } { 10  } $,$f ‘ ( 1 ) = - \frac { 9  } { 10  } $,考虑估算一下积分,那么$f ( 0 . 9 ) \approx f ( 1 ) - f ‘ ( 1 ) 0 . 1 = - \frac { 1  } { 100  } &lt; 0 $.</p>
<p>你可能会觉得这个$- \frac { 1  } { 100  } $,是不是不太能那么肯定地估算啊.但是实际上,我们考察$f ‘ ( x ) = ( x - 2 ) e ^{ 1 - x  } + \frac { 1  } { 10 x ^2  } $,这个东西在$[ 0 . 9 , 1 ] $上直觉上平均值是大于$- \frac { 9  } { 10  } $的,这样就有道理多了(真的么).</p>
<h6><span id="泰勒展开">泰勒展开</span></h6><p>上面提过了,这里略过.</p>
<h6><span id="正经做法">正经做法</span></h6><p>接下来开抄标答.</p>
<p>令$f _a ( x ) = xe ^x , f _b ( x ) = \frac { x  } { 1 - x  } , f _c ( x ) = - \ln ( 1 - x ) $.</p>
<p>这样当$x = 0 . 1 $的时候所有的数字都被正确表示了.</p>
<p>比较$a , b $:</p>
<p>考虑它们都有乘除项,考虑使用对数把乘除改为加减,立有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
y & = \ln ( a ) - \ln ( b ) & = x + \ln ( 1 - x ) \\
y ' & = 1 - \frac { 1  } { 1 - x  } & = \frac { - x  } { 1 - x  } 
\end{aligned}</script><p>注意到$x = 0 $的时候$y = 0 $,又注意到其在$( 0 , 0 . 1 ) $上单减,这样立有$a &lt; b $.</p>
<p>比较$a , c $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
y & = a - c & = xe ^x + \ln ( 1 - x ) \\
y ' & = ( x + 1 ) e ^x - \frac { 1  } { 1 - x  } & = \frac { ( 1 + x ) ( 1 - x ) e ^x - 1  } { 1 - x  } \\

\end{aligned}</script><p>注意到$x = 0 $的时候$y = 0 $,又注意到其在$( 0 , 0 . 1 ) $上单增,这样立有$a &gt; c $.</p>
<p>经验教训:在构造函数的时候,你一定要找一些简单一点的函数来构造,<strong>最好不要带有系数</strong>.</p>
<h2><span id="数列导论">数列导论</span></h2><h3><span id="递归式的求解">递归式的求解</span></h3><h4><span id="特征根法">特征根法</span></h4><p>一个常系数的$k $阶线性递推关系形如:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = P _n + \sum _{ i = 1  } ^k c _i a _{ n - i  } , n & \geq k \\
a _0 & = C _0 , a _1 & = C _1 , . . . , a _{ k - 1  } & = C _{ k - 1  } 
\end{aligned}</script><p>当$P = 0 $时,称作齐次线性递推.</p>
<h5><span id="特征方程">特征方程</span></h5><p>我们称方程$r ^k = \sum _{ i = 1  } ^k c _i r ^{ k - i  } $是该递推关系的特征方程,方程的解叫做该递推关系的特征根.</p>
<h5><span id="二阶线性齐次递推">二阶线性齐次递推</span></h5><p>若其特征方程有两个不同的根$r _1 $和$r _2 $,那么存在两个常数$\alpha _1 $和$\alpha _2 $,满足$a _n = \alpha _1 r _1 ^n + \alpha _2 r _2 ^n $.</p>
<p>若其特征方程有两个相同的根$r $,那么存在两个常数$\alpha _1 $和$\alpha _2 $,满足$a _n = \alpha _1 r ^n + \alpha _2 nr ^n $.</p>
<p>先考虑前者的证明,首先考虑对于$n = 0 $或者$n = 1 $的情况,我们考虑求出一组$\alpha _1 $和$\alpha _2 $来满足:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C _0 & = \alpha _1 + \alpha _2 \\
C _1 & = \alpha _1 r _1 + \alpha _2 r _2 
\end{aligned}</script><p>若$r _1 \ne r _2 $,可以解得:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\alpha _1 & = \cfrac { C _1 - C _0 r _2  } { r _1 - r _2  } \\
\alpha _2 & = C _0 - \alpha _1 
\end{aligned}</script><p>接下来考虑数学归纳:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = c _1 a _{ n - 1  } + c _2 a _{ n - 2  } \\
& = c _1 ( \alpha _1 r _1 ^{ n - 1  } + \alpha _2 r _2 ^{ n - 1  } ) + c _2 ( \alpha _1 r _1 ^{ n - 2  } + \alpha _2 r _2 ^{ n - 2  } ) \\
& = \alpha _1 ( c _1 r _1 ^{ n - 1  } + c _2 r _1 ^{ n - 2  } ) + \alpha _2 ( c _1 r _2 ^{ n - 1  } + c _2 r _2 ^{ n - 2  } ) \\
& = \alpha _1 r _1 ^n + \alpha _2 r _2 ^n 
\end{aligned}</script><p>接下来考虑后者,首先我们有$\Delta = c _1 ^2 + 4 c _2 = 0 $,考虑初始条件:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C _0 & = \alpha _1 \\
C _1 & = \alpha _1 r + \alpha _2 r \\

\end{aligned}</script><p>接下来我们考虑数学归纳:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = c _1 a _{ n - 1  } + c _2 a _{ n - 2  } \\
& = c _1 ( \alpha _1 r ^{ n - 1  } + \alpha _2 nr ^{ n - 1  } - \alpha _2 r ^{ n - 1  } ) + c _2 ( \alpha _1 r ^{ n - 2  } + \alpha _2 nr ^{ n - 2  } - 2 \alpha _2 r ^{ n - 2  } ) \\
& = a _n - c _1 \alpha _2 r ^{ n - 1  } - 2 c _2 \alpha _2 r ^{ n - 2  } 
\end{aligned}</script><p>我们接下来只需证明$c _1 r + 2 c _2 = 0 $即可.根据方程,不难发现$r = \cfrac { c _1  } { 2  } $,根据$\Delta = 0 $,自然得证.</p>
<h5><span id="更一般的情况">更一般的情况</span></h5><p>在上面做$k = 2 $的时候,我们已经发现了这个问题的棘手.甚至动用了求根公式.那有没有什么办法能让这个方法拓展到更高维呢?我们引入线性代数.</p>
<h6><span id="重定义向">重定义向</span></h6><p>由于《线性代数》一书的作者与笔者使用字母习惯略有差异,为了防止出错,下面一律使用原书的使用习惯,可能会与前面的定义不尽相同.</p>
<p>给定$a _0 , . . . , a _n $,其中$a _0 \ne 0 $,对于所有的$k \in \mathbb { N  } $,若有下列式子成立:</p>
<script type="math/tex; mode=display">
a _0 y _{ k + n  } + a _1 y _{ k + n - 1  } + \cdots + a _n y _k = z _k</script><p>则称为一个$n $阶线性差分方程(或递归关系).为了简化,通常取$a _0 = 1 $.若$\{ z _k \} $是零序列,则称其是一个齐次线性方程.</p>
<h6><span id="引入矩阵">引入矩阵</span></h6><p>我们注意到,对于齐次差分方程而言,如果不给定$y _0 , \cdots y _{ n - 1  } $,只是构造一组满足条件的$y $的话,自然的想法是令$y _k = r ^k $.其中$r $是辅助方程$a _0 r ^{ n  } + a _1 r ^{ n - 1  } + \cdots + a _n = 0 $的一个根.</p>
<p>注意到如果我们将上面的内容看作是$T : \{ y _k \} \mapsto \{ z _k \} $这样一个映射,这显然是一个线性变换.这意味着齐次方程$a _0 y _{ k + n  } + a _1 y _{ k + n - 1  } + \cdots + a _n y _k = 0 $的解集就是$T $的核,设为$H $,不难发现只要给定$y _0 , \cdots y _{ n - 1  } $,这个解就唯一确定,将它们看作自由变量,这意味着$\dim H = n $.</p>
<p>还没完,注意到我们解方程可以解出$n $个根,如果这$n $个根互不相同,这意味着它们必然线性无关.这样的话我们就可以轻松求得所有的解集,就算给定了$y _0 , \cdots y _{ n - 1  } $,我们也可以用解集的基通过线性组合拟合出来答案.</p>
<p>至于如果这$n $个根有重根的话怎么办,我们发现这可能拟合失败.根据上面的经验,我们发现我们需要找到另外几组线性无关的$\mathbb { R  } ^k $的向量来拟合.</p>
<p>最后,如果对于非齐次线性递推的答案,可能就需要猜根了.总之需要猜出总共$n $个线性无关的根,然后拟合初值.我们如此做:对于一个出现了$m $次的根$r $,我们注意到$r ^k , kr ^k , \cdots , k ^{ m - 1  } r ^k $都是满足条件的解,且他们线性无关.这个结论是怎么得到的呢?</p>
<p>首先,我们注意到如果初始条件成立,我们只要错位相减就可以做数学归纳,也就是说我们需要证明初始条件成立,下面以$kr ^k $作为例子,即证明:</p>
<script type="math/tex; mode=display">
a _0 nr ^n + a _1 ( n - 1 ) r ^{ n - 1  } + \cdots + a _1 r = 0</script><p>是满足条件的.</p>
<p>用一下简单的生成函数技巧,如果有两个$r $作为根,必然意味着原方程形如$( y - r ) ^2 P $,其中$P $是一个关于$y $的多项式.</p>
<p>我们把它写开:$( y ^2 - 2 ry + r ^2 ) P = 0 $,然后我们用$kr ^k $去代替$r ^k $,不难发现代替后右边还是个多项式,而左边变成了$0 $,这意味着这个根一定可行.</p>
<p>对于更高次的问题,只需要用二项式定理解决一下就行.</p>
<p>不过!我们可以用导数解决这个问题:我们对原方程两边求导.</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _0 r ^{ n + k  } + a _1 r ^{ n + k - 1  } + \cdots + a _1 r ^k & = 0 \\
a _0 ( n + k ) r ^{ n + k - 1  } + a _1 ( n + k - 1 ) r ^{ n + k - 2  } + \cdots + a _1 kr ^{ k - 1  } & = 0 \\
a _0 ( n + k ) r ^{ n + k  } + a _1 ( n + k - 1 ) r ^{ n + k - 1  } + \cdots + a _1 kr ^{ k  } & = 0 \\

\end{aligned}</script><p>这样我们就可以数学归纳解决.</p>
<p>另外,我们注意一个问题:$( ( y - r ) ^2 P ) ‘ = ( y - r ) ( ( y - r ) P ) ‘ + ( y - r ) ‘ ( y - r ) P = ( y - r ) [ ( y - r ) ‘ P + ( ( y - r ) P ) ‘ ] $,$r $一定是这个方程的一个根,高次是同理的.</p>
<h6><span id="再进一步">再进一步</span></h6><p>我们注意到齐次差分方程一定能写成$\vec { x  } _k = A \vec { x  } _{ k - 1  } $的形式.如果我们取$A $的特征向量的线性组合作为$\vec { x  } _0 $,不难发现一定是满足条件的.</p>
<p>更进一步,如果我们定义元素和为$1 $的向量为概率向量,由概率向量组成的矩阵为概率矩阵,那么确定了初始向量的齐次差分方程最后一定会收敛到一个值.证明的话直接求通项然后去求极限即可.</p>
<h6><span id="再再进一步">再再进一步</span></h6><p>我们都知道矩阵加速:也就是$\vec { x  } _{ k + 1  } = A \vec { x  } $,$\vec { x  } _{ n  } = A ^n \vec { x  } _0 $.而我们又知道CH定理:$p ( A ) = 0 $,我们用多项式取膜,有$A ^n = p ( A ) F ( A ) + G ( A ) = G ( A ) $,这就是解.</p>
<h3><span id="数列中的求和问题">数列中的求和问题</span></h3><h4><span id="和式的基本运算">和式的基本运算</span></h4><p>分配律:$\ \sum _{ i \in S  } ca _i = c \sum _{ i \in S  } a _i \ $.</p>
<p>结合律:$\ \sum _{ i \in S  } ( a _i + b _i ) = \sum _{ i \in S  } a _i + \sum _{ i \in S  } b _i $.</p>
<p>交换律:$\sum _{ i \in S  } a _i = \sum _{ p ( i ) \in S  } a _{ p ( i )  } $,其中$p $是$S $集合的重新排列.</p>
<p>交换求和顺序:</p>
<ol>
<li><p>$\sum _{ i  } \sum _{ j  } a _{ i , j  } [ P ( i , j ) ] = \sum _{ j  } \sum _{ i  } a _{ i , j  } [ P ( i , j ) ] $.</p>
</li>
<li><p>$\sum _{ i = 1  } ^n \sum _{ j = i  } ^n a _{ i , j  } = \sum _{ j = 1  } ^n \sum _{ i = 1  } ^j a _{ i , j  } $.</p>
</li>
</ol>
<p>一般分配律:$\sum _{ i  } \sum _{ j  } a _{ i  } b _j = ( \sum _{ i  } a _i ) ( \sum _j b _j ) $.</p>
<h4><span id="交换顺序法">交换顺序法</span></h4><h6><span id="example1等差数列求和">Example1(等差数列求和)</span></h6><p>等差数列求和：</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^n ( ai + b ) & = \sum _{ i = 0  } ^n ( a ( n - i ) + b ) \\
2 S _n & = \sum _{ i = 0  } ^n ( an + 2 b ) & = an ( n + 1 ) + 2 b ( n + 1 ) \\
S _n & = ( n + 1 ) ( \frac { an  } { 2  } + b ) 
\end{aligned}</script><h6><span id="example2切比雪夫单调不等式">Example2(切比雪夫单调不等式)</span></h6><p>令$S = \sum _{ 1 \leq i &lt; j \leq n  } ( a _j - a _i ) ( b _j - b _i ) = \sum _{ 1 \leq j &lt; i \leq n  } ( a _j - a _i ) ( b _j - b _i ) $.</p>
<p>考虑恒等式$[ 1 \leq j &lt; i \leq n ] + [ 1 \leq i &lt; j \leq n ] = [ 1 \leq j , i \leq n ] - [ 1 \leq i = j \leq n ] $.</p>
<p>那么我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 S & = \sum _{ 1 \leq i , j \leq n  } ( a _j - a _i ) ( b _j - b _i ) - \sum _{ 1 \leq i = j \leq n  } ( a _j - a _i ) ( b _j - b _i ) \\
& = \sum _{ 1 \leq i , j \leq n  } ( a _j - a _i ) ( b _j - b _i ) \\
& = 2 n \sum _{ i = 1  } ^n a _i b _i - 2 ( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) \\

\end{aligned}</script><p>又有$( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) = n \sum _{ i = 1  } ^n a _i b _i - \sum _{ 1 \leq i &lt; j \leq n  } ( a _j - a _i ) ( b _j - b _i ) $,显然有以下式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) & \leq n \sum _{ i = 1  } ^n a _i b _i , \forall i & < j , a _i & \leq a _j \land b _i & \leq b _j \\
( \sum _{ i = 1  } ^n a _i ) ( \sum _{ j = 1  } ^n b _j ) & \geq n \sum _{ i = 1  } ^n a _i b _i , \forall i & < j , a _i & \leq a _j \land b _i & \geq b _j \\

\end{aligned}</script><p>上式被称为切比雪夫单调不等式.</p>
<h6><span id="example3拉格朗日恒等式">Example3(拉格朗日恒等式)</span></h6><p>即$\sum _{ 1 \leq j &lt; k \leq n  } ( a _j b _k - a _k b _j ) ^2 = ( \sum _{ i = 1  } ^n a _i ^2 ) ( \sum _{ i = 1  } ^n b _i ^2 ) - ( \sum _{ i = 1  } ^n a _i b _i ) ^2 \ $.</p>
<p>令$S _n = \sum _{ 1 \leq j &lt; k \leq n  } ( a _j b _k - a _k b _j ) ^2 \ $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 S _n & = \sum _{ j = 1  } ^n \sum _{ k = 1  } ^n ( a _j b _k - a _k b _j ) ^2 \\
& = \sum _{ j = 1  } ^n \sum _{ k = 1  } ^n ( a _j ^2 b _k ^2 - 2 a _j a _k b _j b _k - a _k ^2 b _j ^2 ) \\
& = 2 ( \sum _{ i = 1  } ^n a _i ^2 ) ( \sum _{ i = 1  } ^n b _i ^2 ) - 2 ( \sum _{ i = 1  } ^n a _i b _i ) ^2 
\end{aligned}</script><h4><span id="扰动法">扰动法</span></h4><h6><span id="example1等比数列求和">Example1(等比数列求和)</span></h6><script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^n ax ^i \\
& = a + \sum _{ i = 1  } ^n ax ^i \\
& = a + x \sum _{ i = 0  } ^{ n - 1  } ax ^i \\
& = a + xS _{ n - 1  } 
\end{aligned}</script><p>而$S _{ n - 1  } + ax ^n = S _n = a + xS _{ n - 1  } $,有$S _n + ax ^{ n + 1  } = a + xS _n , S _n = a \frac { x ^{ n + 1  } - 1  } { x - 1  } $，其中$x \ne 1 $.</p>
<h6><span id="example2平方和公式">Example2(平方和公式)</span></h6><p>$S _n = \sum _{ i = 0  } ^n i ^2 $.</p>
<p>如果直接对该公式使用扰动法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ i = 0  } ^{ n - 1  } i ^2 + n ^2 \\
& = \sum _{ i = 1  } ^n ( i - 1 ) ^2 + n ^2 \\
& = S _n - 2 \sum _{ i = 1  } ^n i + n + n ^2 
\end{aligned}</script><p>我们无法得到$S _n $的封闭形式,但我们发现我们得到了$\sum _{ i = 1  } ^n i $的封闭形式.</p>
<p>那以此类推，我们设$W _n = \sum _{ i = 0  } i ^3 $</p>
<script type="math/tex; mode=display">
\begin{aligned}
W _n & = \sum _{ i = 0  } ^{ n - 1  } i ^3 + n ^3 \\
& = \sum _{ i = 1  } ^n ( i - 1 ) ^3 + n ^3 \\
& = \sum _{ i = 1  } ^n i ^3 - 3 \sum _{ i = 1  } ^n i ^2 + 3 \sum _{ i = 1  } ^n i - n + n ^3 \\
& = W _n - 3 S _n + 3 \frac { n + n ^2  } { 2  } - n + n ^3 \\
S _n & = \frac { n + n ^2  } { 2  } - \frac { n - n ^3  } { 3  } \\
& = \frac { n + 3 n ^2 + 2 n ^3  } { 6  } \\
& = \frac { n ( 1 + 3 n + 2 n ^2 )  } { 6  } \\
& = \frac { n ( 2 n + 1 ) ( n + 1 )  } { 6  } 
\end{aligned}</script><h4><span id="展开和收缩">展开和收缩</span></h4><h6><span id="example1平方和公式">Example1(平方和公式)</span></h6><script type="math/tex; mode=display">
\begin{aligned}
S _n & = \sum _{ k = 1  } ^n k ^2 \\
& = \sum _{ k = 1  } ^n \sum _{ i = 1  } ^k k \\
& = \sum _{ i = 1  } ^n \sum _{ k = i  } ^n k \\
& = \sum _{ i = 1  } ^n \frac { 1  } { 2  } ( i + n ) ( n - i + 1 ) \\
& = \sum _{ i = 1  } ^n \frac { 1  } { 2  } ( in - i ^2 + i + n ^2 - ni + n ) \\
& = \frac { 1  } { 2  } ( \sum _{ i = 1  } ^n i - \sum _{ i = 1  } ^n i ^2 + n ^3 + n ^2 ) \\
& = \frac { 1  } { 4  } n ( n + 1 ) - \frac { 1  } { 2  } S _n + \frac { n ^3 + n ^2  } { 2  } 
\end{aligned}</script><p>整理得到$S _n $.</p>
<h6><span id="example2">Example2</span></h6><p>求$\sum _{ i = 1  } ^n i ^3 \ $.</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( n ) & = \sum _{ i = 1  } ^n i ^3 \\
& = \sum _{ i = 1  } ^n \sum _{ j = 1  } ^i i ^2 \\
& = \sum _{ j = 1  } ^n \sum _{ i = j  } ^n i ^2 \\
& = \sum _{ j = 1  } ^n ( \frac { n ( n + 1 ) ( 2 n + 1 )  } { 6  } - \frac { ( j - 1 ) j ( 2 j - 1 )  } { 6  } ) \\
& = \frac { n ^2 ( n + 1 ) ( 2 n + 1 )  } { 6  } - \frac { 1  } { 3  } S ( n ) + \frac { n ( n + 1 ) ( 2 n + 1 )  } { 12  } - \frac { n ( n + 1 )  } { 12  } \\
S ( n ) & = \frac { n ^2 ( n + 1 ) ^2  } { 4  } 
\end{aligned}</script><h5><span id="problme3">Problme3</span></h5><p>求$\sum _{ i = 1  } ^n iq ^i ( q \ne 1 ) $.</p>
<h5><span id="solution3">Solution3</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n iq ^i & = \sum _{ j = 1  } ^n \sum _{ i = j  } ^n q ^i \\
& = \sum _{ j = 1  } ^n \frac { q ^j - q ^{ n + 1  }  } { 1 - q  } \\
& = \frac { 1  } { q - 1  } \sum _{ j = 1  } ^n ( q ^{ n + 1  } - q ^j ) \\
& = \frac { 1  } { q - 1  } ( nq ^{ n + 1  } - \frac { q ^{ n + 1  } - q  } { q - 1  } ) \\

\end{aligned}</script><h5><span id="problemex2">ProblemEX2</span></h5><p>求$\sum _{ i = 1  } ^n ( ai + b ) q ^{ i - 1  } ( q \ne 1 ) $.</p>
<h5><span id="solutionex2">SolutionEX2</span></h5><p>令$A = \frac { a  } { q - 1  } , B = \frac { b - A  } { q - 1  } $,答案为$( An + B ) q ^n - B $.</p>
<h4><span id="有限微积分">有限微积分</span></h4><h5><span id="移位算子">移位算子</span></h5><p>定义移位算子$E $，使得$Ef ( x ) = f ( x + 1 ) $.</p>
<h5><span id="差分算子">差分算子</span></h5><p>定义差分算子$\Delta f ( x ) = f ( x + 1 ) - f ( x ) $，类似于无限微积分中的D算子.</p>
<p>另外,不难发现有$\Delta = E - 1 $.</p>
<h5><span id="逆差分算子">逆差分算子</span></h5><p>定义逆差分算子$\Sigma $,可以得到有限微积分的基本定理:</p>
<p>$g ( x ) = \Delta f ( x ) \Leftrightarrow \sum g ( x ) \delta x = f ( x ) + C \ $</p>
<p>这里的$\Sigma $又被称为不定和式,是差分等于$g $的一个函数类.</p>
<p>值得一提的是,这里的$C $与无限微积分中的$C $有一定区别,这里的$C $可以是满足$p ( x ) = p ( x + 1 ) $的任意一个函数而不非得是常数函数.</p>
<h5><span id="定和式">定和式</span></h5><p>如果$g ( x ) = \Delta f ( x ) $,那么有$\sum \nolimits _{ a  } ^b g ( x ) \delta x = f ( x ) | ^{ b  } _a = f ( b ) - f ( a ) \ $.</p>
<p>值得一提的是,如果$a \leq b $,显然有$\sum \nolimits _{ a  } ^b g ( x ) \delta x = \sum _{ x = a  } ^{ b - 1  } g ( x ) \ $.</p>
<p>但如果$a &gt; b $,那么$\sum \nolimits _{ a  } ^b g ( x ) \delta x = - \sum \nolimits _b ^a g ( x ) \delta x \ $.</p>
<p>事实上,我们一定有:$\sum \nolimits _a ^b g ( x ) \delta x + \sum \nolimits _b ^c g ( x ) \delta x = \sum \nolimits _a ^c g ( x ) \delta x \ $.</p>
<h5><span id="一些基本的公式">一些基本的公式</span></h5><p>类比无限微积分中的$D ( x ^m ) = mx ^{ m - 1  } $，有:</p>
<p>\Delta(x^{\underline{m}})=mx^{\underline{m-1}}，\sum mx^{\underline{m-1}}\delta x=x^{\underline{m}}+C，m\ne 0\\</p>
<p>\\</p>
<p>类比无限微积分中的$D ( \ln x ) = \frac { 1  } { x  } $，有:</p>
<p>令H(x)=\sum_{i=1}^x\frac{1}{i}\\\Delta(H(x))=x^{\underline{-1}}，\sum x^{\underline{-1}}\delta x =H(x)+C\\</p>
<p>\\</p>
<p>类比无限微积分中的$D ( e ^x ) = e ^x $,有:</p>
<p>$\Delta ( 2 ^x ) = 2 ^x ， \sum 2 ^x \delta x = 2 ^x + C \ $</p>
<p>$\Delta ( c ^x ) = ( c - 1 ) c ^x ， \sum c ^x \delta x = \frac { c ^x  } { c - 1  } + C , c \ne 1 \ $</p>
<p>$\Delta ( c ^{ \underline { x  }  } ) = \frac { c ^{ \underline { x + 2  }  }  } { c - x  } , \sum \frac { c ^{ \underline { x + 2  }  }  } { c - x  } \delta x = c ^{ \underline { x  }  } + C , c - x \ne 0 \ $.</p>
<p>根据组合数公式,有:</p>
<p>$\Delta ( \binom { x  } { k  } ) = \binom { x  } { k - 1  } \ $.</p>
<h6><span id="example1">Example1</span></h6><p>仍然考虑平方和公式：</p>
<p>我们有:$k ^2 = k ^{ \underline { 2  }  } + k ^{ \underline { 1  }  } \ $.</p>
<p>那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _{ n - 1  } & = \sum _{ i = 0  } ^{ n - 1  } i ^2 \\
& = \sum _{ i = 0  } ^{ n - 1  } ( i ^{ \underline { 2  }  } + i ^{ \underline { 1  }  } ) \\
& = \sum \nolimits _{ 0  } ^n x ^{ \underline { 2  }  } \delta x + \sum \nolimits _{ 0  } ^n x ^{ \underline { 1  }  } \delta x \\
& = \frac { n ^\underline { 3  }  } { 3  } + \frac { n ^{ \underline { 2  }  }  } { 2  } 
\end{aligned}</script><p>整理即可得到封闭形式.</p>
<p>值得一提的是:</p>
<p>与前面的方法不同，这里没有使用三次的二项式公式，而是使用了二次的斯特林公式负责将一般幂转化为下降幂.</p>
<h5><span id="分部求和法则abel求和法">分部求和法则(Abel求和法)</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\Delta ( uv ) & = u ( x + 1 ) v ( x + 1 ) - u ( x ) v ( x ) \\
& = u ( x + 1 ) v ( x + 1 ) - u ( x ) v ( x + 1 ) + u ( x ) v ( x + 1 ) - u ( x ) v ( x ) \\
& = v ( x + 1 ) \Delta u + u ( x ) \Delta v & = Ev \Delta u + u \Delta v \\

\end{aligned}</script><p>两边取不定和，即可得到分部求和法则:</p>
<p>$\sum u \Delta v = uv - \sum Ev \Delta u \ $.</p>
<p>分部求和用一般和式表达如下,下式又被称为Abel求和法:</p>
<p>$\sum _{ i = l  } ^{ r - 1  } ( a _{ i + 1  } - a _i ) b _i = a _r b _r - a _l b _l - \sum _{ i = l  } ^{ r - 1  } a _{ i + 1  } ( b _{ i + 1  } - b _i ) \ $.</p>
<h6><span id="example1">Example1</span></h6><p>求$\sum _{ k = 0  } ^n k 2 ^k \ $.</p>
<p>根据分部求和法则，我们有:</p>
<p>$\sum x 2 ^x \delta x = x 2 ^x - \sum 2 ^{ x + 1  } \delta x = x 2 ^x - 2 ^{ x + 1  } + C \ $.</p>
<p>改为定和式形式，显然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^n k 2 ^k \\
& = \sum \nolimits _0 ^{ n + 1  } x 2 ^x \delta x \\
& = ( n + 1 ) 2 ^{ n + 1  } - 2 ^{ n + 2  } + 2 \\
& = ( n - 1 ) 2 ^{ n + 1  } + 2 \\

\end{aligned}</script><h6><span id="example2">Example2</span></h6><p>求$\sum _{ k = 0  } ^{ n - 1  } kH _k \ $.</p>
<p>令$u ( x ) = H _x , v ( x ) = \frac { 1  } { 2  } x ^{ \underline { 2  }  } \ $.</p>
<p>带入分部求和法则，显然有:</p>
<p>$\sum xH _x \delta x = \frac { x ^\underline { 2  }  } { 2  } H _x - \frac { x ^\underline { 2  }  } { 4  } + C \ $.</p>
<p>带入即可求出原式$= \frac { n ^\underline { 2  }  } { 2  } ( H _n - \frac { 1  } { 2  } ) \ $.</p>
<h6><span id="example3">Example3</span></h6><p>求$\sum _{ i = 1  } ^n \frac { 2 i + 1  } { i ( i + 1 )  } \ $.</p>
<p>令$u = ( 2 n + 1 ) , v = - \frac { 1  } { i  } $,则$\Delta u = 2 , \Delta v = \frac { 1  } { i ( i + 1 )  } $.</p>
<p>根据分部求和法则,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 1  } ^n \frac { 2 i + 1  } { i ( i + 1 )  } & = ( 2 n + 3 ) \times ( - \frac { 1  } { n + 1  } ) + 3 - \sum _{ i = 1  } ^n ( - \frac { 2  } { i + 1  } ) \\
& = - \frac { 2 n + 3  } { n + 1  } + 2 H _n + \frac { n + 3  } { n + 1  } \\
& = 2 H _n - \frac { n  } { n + 1  } 
\end{aligned}</script><h6><span id="example4">Example4</span></h6><p>求$\sum _{ i = 0  } ^{ n - 1  } \frac { H _k  } { ( k + 1 ) ( k + 2 )  } \ $.</p>
<p>令$u = H _n , v = - \frac { 1  } { n + 1  } , \Delta u = \frac { 1  } { n + 1  } , \Delta v = \frac { 1  } { ( n + 1 ) ( n + 2 )  } \ $.</p>
<p>根据分部求和法则,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ i = 0  } ^{ n - 1  } \frac { H _k  } { ( k + 1 ) ( k + 2 )  } & = - \frac { H _n  } { n + 1  } - \sum _{ i = 0  } ^{ n - 1  } ( - \frac { 1  } { ( i + 2 ) ( i + 1 )  } ) \\
& = - \frac { H _n  } { n + 1  } + \sum _{ i = 0  } ^{ n - 1  } ( \frac { 1  } { i + 1  } - \frac { 1  } { i + 2  } ) \\
& = - \frac { H _n  } { n + 1  } + H _n - ( H _n - 1 + \frac { 1  } { n + 1  } ) \\
& = 1 - \frac { H _n + 1  } { n + 1  } 
\end{aligned}</script><h3><span id="基础数论在数列中的应用">基础数论在数列中的应用</span></h3><h5><span id="example">Example</span></h5><p>令$A = \{ 2 n - 1 | n \in \mathbb { N  } _{ +  } \} , B = \{ 3 n - 1 | n \in \mathbb { N  } _{ +  } \} $.求$A \cap B $,以及$A \cup B $的最小的一百项之和.</p>
<p>对于前者,我们知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a \in A \Leftrightarrow a & \equiv - 1 \pmod { 2  } \\
b \in B \Leftrightarrow b & \equiv - 1 \pmod { 6  } \\

\end{aligned}</script><p>所以$A \cap B = \{ 6 n - 1 | n \in \mathbb { N  } _{ +  } \} $.</p>
<p>而同理,$x \in A \cup B \Leftrightarrow x \equiv - 1 / - 2 / - 3 / - 5 \pmod { 6  } $.于是后者是简单的.</p>
<h3><span id="构造双射在数列中的应用">构造双射在数列中的应用</span></h3><p>设$A = \{ x | x = 2 n - 1 , n \in \mathbb { N  } _+ \} , B = \{ x | x = 2 ^n , n \in \mathbb { N  } _+ \} $,现在将$A \cup B $中的元素排序并提取成一个数列$a $,求使得$S _n &gt; 12 a _n $最小的正整数$n $.</p>
<p>写出数列,它长这样:</p>
<script type="math/tex; mode=display">
\begin{matrix}
1 & 2 \\
3 & 4 \\
5 & 7 & 8 \\
9 & 11 & 13 & 15 & 16 \\
& & \cdots 
\end{matrix}</script><p>不妨设$n $在第$r $行$c $列,显然$( r , c ) $和$n $构成双射.</p>
<p>那么我们现在无非有两个思路:要么找到一个方式使得对于给定的$n $能快速表达$( r , c ) $,要么反之.显然反之比较简单.</p>
<p>考虑设前$k $行共有$W _k $个数,不难发现$W _{ k + 1  } = W _k + 2 ^{ k - 1  } + 1 , W _k = 2 ^{ k - 1  } + k $.</p>
<p>显然,对于$( r , c ) $来说,它对应的$n $就是$W _{ r - 1  } + c $.</p>
<p>令$SR _{ r  } $为前$r $行数字之和,不难发现$SR _r = 2 ^{ r + 1  } - 2 + ( 2 ^{ r - 1  } ) ^2 $.</p>
<p>接下来考虑找到这个最小的$n $,显然$r \ne 1 $,接下来只考虑$r \geq 2 $的情况.</p>
<p>那么我们可以轻松写出$S _n $和$a _n $的表达式,下面直接给出:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & = SR _{ r - 1  } + \sum _{ k = 1  } ^c ( 2 ^{ r - 1  } + 2 k - 1 ) - [ c & = 2 ^{ r - 2  } + 2 ] \\
S _n & = 2 ^r - 2 + 4 ^{ r - 2  } + 2 ^{ r - 1  } c + c ^2 - [ c & = 2 ^{ r - 2  } + 1 ] \\
a _n & = 2 ^{ r - 1  } + 2 c - 1 - [ c & = 2 ^{ r - 2  } + 1 ] 
\end{aligned}</script><p>讨论一下$[ c = 2 ^{ r - 2  } + 1 ] $这个判定式取$0 $还是取$1 $,这样就做完了.</p>
<h3><span id="不等式放缩在数列中的应用">不等式放缩在数列中的应用</span></h3><h2><span id="几何导论">几何导论</span></h2><h3><span id="三角相关">三角相关</span></h3><h4><span id="三角恒等变换">三角恒等变换</span></h4><h5><span id="两角和差公式">两角和差公式</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sin ( A + B ) & = \sin A \cos B + \sin B \cos A \\
\sin ( A - B ) & = \sin A \cos B - \sin B \cos A \\
\cos ( A + B ) & = \cos A \cos B - \sin A \sin B \\
\cos ( A - B ) & = \cos A \cos B + \sin A \sin B \\
\tan ( A + B ) & = \frac { \tan A + \tan B  } { 1 - \tan A \tan B  } \\
\tan ( A - B ) & = \frac { \tan A - \tan B  } { 1 + \tan A \tan B  } 
\end{aligned}</script><h5><span id="倍角公式">倍角公式</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\tan ( 2 A ) & = \frac { 2 \tan A  } { 1 - \tan ^2 A  } \\
\sin ( 2 A ) & = 2 \sin A \cos A \\
\cos ( 2 A ) & = \cos ^2 A - \sin ^2 A & = 2 \cos ^2 A - 1 & = 1 - 2 \sin ^2 A 
\end{aligned}</script><h5><span id="半角公式">半角公式</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sin ( \frac { A  } { 2  } ) & = \pm \sqrt { \frac { 1 - \cos A  } { 2  }  } \\
\cos ( \frac { A  } { 2  } ) & = \pm \sqrt { \frac { 1 + \cos A  } { 2  }  } \\
\tan ( \frac { A  } { 2  } ) & = \frac { \sin A  } { 1 + \cos A  } & = \frac { 1 - \cos A  } { \sin A  } & = \pm \sqrt { \frac { 1 - \cos A  } { 1 + \cos A  }  } 
\end{aligned}</script><h5><span id="和差化积">和差化积</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sin A + \sin B & = 2 \sin ( \frac { A + B  } { 2  } ) \cos ( \frac { A - B  } { 2  } ) \\
\sin A - \sin B & = 2 \cos ( \frac { A + B  } { 2  } ) \sin ( \frac { A - B  } { 2  } ) \\
\cos A + \cos B & = 2 \cos ( \frac { A + B  } { 2  } ) \cos ( \frac { A - B  } { 2  } ) \\
\cos A - \cos B & = - 2 \sin ( \frac { A + B  } { 2  } ) \sin ( \frac { A - B  } { 2  } ) \\
\tan A + \tan B & = \frac { \sin ( A + B )  } { \cos A \cos B  } 
\end{aligned}</script><p>值得一提的是,如果你对和差化积特别熟悉,你不难发现下面这个式子:</p>
<script type="math/tex; mode=display">
\sin ^2 A - \sin ^2 B = \sin ( A - B ) \sin ( A + B )</script><p>如果细看会发现,这其实就是和差化积与二倍角公式并用得到的推论,但实际上用处远比和差化积要多.</p>
<h5><span id="积化和差">积化和差</span></h5><script type="math/tex; mode=display">
\begin{aligned}
\sin A \sin B & = - \frac { 1  } { 2  } [ \cos ( A + B ) - \cos ( A - B ) ] \\
\cos A \cos B & = \frac { 1  } { 2  } [ \cos ( A + B ) + \cos ( A - B ) ] \\
\sin A \cos B & = \frac { 1  } { 2  } [ \sin ( A + B ) + \sin ( A - B ) ] \\
\cos A \sin B & = \frac { 1  } { 2  } [ \sin ( A + B ) - \sin ( A - B ) ] 
\end{aligned}</script><h5><span id="万能公式">万能公式</span></h5><p>令$w = \tan \frac { A  } { 2  } $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin A & = \frac { 2 w  } { 1 + w ^2  } \\
\cos A & = \frac { 1 - w ^2  } { 1 + w ^2  } \\
\tan A & = \frac { 2 w  } { 1 - w ^2  } 
\end{aligned}</script><p>当然,这个所谓的万能公式其实一点用都没有,因为我们有更强大的公式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cos ( x ) & = \frac { e ^{ ix  } + e ^{ - ix  }  } { 2  } \\
\sin ( x ) & = \frac { e ^{ ix  } - e ^{ - ix  }  } { 2 i  } 
\end{aligned}</script><h5><span id="补充公式">补充公式</span></h5><script type="math/tex; mode=display">
\begin{aligned}
1 + \sin A & = ( \sin \frac { A  } { 2  } + \cos \frac { A  } { 2  } ) ^2 \\
1 - \sin A & = ( \sin \frac { A  } { 2  } - \cos \frac { A  } { 2  } ) ^2 
\end{aligned}</script><h4><span id="周期函数与初等数论">周期函数与初等数论</span></h4><p>我们知道,处理三角中的周期性问题时,需要设一些取值为整数的$k $来解决问题,这引发我们思考:是否可以将初等数论中的模法来解决这一类问题呢?</p>
<h6><span id="example1">Example1</span></h6><p>已知函数$f ( x ) = \sin ( \omega x + \varphi ) , w &gt; 0 $,$f ( - \frac { \pi  } { 6  } ) = 0 , f ( \frac { \pi  } { 2  } ) = - 1 $,求$w $和$\varphi $的表达式.</p>
<p>正确做法应该是强设$k _1 , k _2 $,但我们来使用模法.</p>
<p>必须要注意的一点是,我们这里的$\omega $和$\varphi $都不是整数,这意味着我们必须时刻保证同余式子左侧是整数,也就是在操作的时候不可以使用任何逆元!换句话说,你两边同时做乘法的时候,只可以同时乘以整数,不可以同时乘以分数.</p>
<p>不妨令$\frac { \pi  } { 2  } $为单位$1 $,我们必有以下式子:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- \frac { \omega  } { 3  } + \varphi & \equiv 0 \pmod { 2  } \\
\omega + \varphi & \equiv 3 \pmod { 4  } 
\end{aligned}</script><p>下面推导$\omega $,首先将上面两个式子直接相减,立有:</p>
<script type="math/tex; mode=display">
\frac { 4  } { 3  } \omega \equiv 1 \pmod { 2  }</script><p>对于$\varphi $,考虑类似的做法,将第一个式子乘以$3 $后与第二个式子相加,立有:</p>
<script type="math/tex; mode=display">
4 \varphi \equiv 1 \pmod { 2  }</script><p>这样我们得到的必须满足的条件就有以下几条:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 4  } { 3  } \omega & \equiv 1 \pmod { 2  } \\
4 \varphi & \equiv 1 \pmod { 2  } \\
\omega + \varphi & \equiv 3 \pmod { 4  } 
\end{aligned}</script><h3><span id="向量相关">向量相关</span></h3><h4><span id="旋转模型">旋转模型</span></h4><p>自己瞎起的名字.</p>
<h6><span id="example1">Example1</span></h6><p>已知$AB = 2 , AC = 1 , \angle A = \theta $,$BC $绕$B $点顺时针旋转$\frac { \pi  } { 3  } $得到$BD $,求以$\theta $表示$S _{ \triangle CBD  } $.</p>
<p>先来说文化课做法,我们直接表示$S $,令$\alpha = \angle ABC $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S & = | BD | \sin ( \alpha + \frac { \pi  } { 3  } ) \\

\end{aligned}</script><p>对于这个式子,我们发现如果我们能得到$| BD | \sin ( \alpha ) $和$| BD | \cos ( \alpha ) $就可以解决了对吧.</p>
<p>这两个怎么求得呢?我们发现$BD $是$\alpha $的一条临边.观察正弦定理和余弦定理可知,正弦定理可以帮助我们求出$| BD | \sin \alpha $,余弦定理可以帮助我们求出$| BD | \cos \alpha $.</p>
<p>然而,如果我们再冷静一下,会得到一个更厉害一点的做法:</p>
<p>我们直接建系,立刻可以求出$\overrightarrow { AB  } $和$\overrightarrow { BC  } $的坐标表示,将$\overrightarrow { BC  } $用旋转矩阵转过去,拿叉积算一下两个向量所生成的三角形面积即可.</p>
<p>如果要把这个做法对应到文化课可以拿到分的做法的话,首先叉积可以去掉,改为直接暴力算.至于旋转的话可能需要一些操作例如三角换元之类的.</p>
<h4><span id="爪子模型">爪子模型</span></h4><p>比起套模型,我们来总结一下向量中的两个做题法则:</p>
<ol>
<li><p>如果存在两条不共线向量,已知它们的夹角以及边长,这个题至少可以通过设单位向量暴力运算解决.</p>
</li>
<li><p>如果通篇题目不涉及边长,或者是涉及边长,但所求是角,将某个边长当作$1 $是一定没有问题的,这样可以少掉一个未知量,为将来的做题提供更明确的道路.</p>
</li>
</ol>
<p>直接来看题:</p>
<h6><span id="example1">Example1</span></h6><p>$\triangle ABC $中,$b ^2 = ac $,点$D $在$AC $上且满足$BD = b $,有$\overrightarrow { AD  } = 2 \overrightarrow { DC  } $,求$\cos \angle ABC $.</p>
<p>这题通篇没有提到任何的边长,我们可以直接钦定$c = 1 $,于是有$b ^2 = a $.</p>
<p>考虑我们要求$\cos \angle ABC $,而我们有一条很奇怪的边$BD $,似乎不满足任何性质,我们立刻想到要把它用$\angle ABC $的两条边向量表示,除此之外没有任何别的表示方式.</p>
<p>后面就没有什么了,这题的难点在于后面的解方程过程,但只要你敢让$c = 1 $,后面的解方程极其简单.</p>
<h4><span id="奔驰定理及三角形四心">奔驰定理及三角形四心</span></h4><h5><span id="奔驰定理">奔驰定理</span></h5><p>对于$\triangle ABC $内一点$P $,立有$S _{ \triangle PBC  } \overrightarrow { PA  } + S _{ \triangle PAC  } \overrightarrow { PB  } + S _{ \triangle PAB  } \overrightarrow { PC  } = \vec { 0  } $.</p>
<p>看到的证明都略麻烦,下面给出一个容易理解的证明.</p>
<p>我们物理上学过拉密定理,其实也就是运用三角形法则以及正弦定理.利用拉密定理,令$a = PA , b = PB , c = PC $,我们要证奔驰定理,也就是要证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
bc \sin \alpha \overrightarrow { PA  } + ac \sin \beta \overrightarrow { PB  } + ab \sin \gamma \overrightarrow { PC  } & = \vec { 0  } \\
abc \sin \alpha \frac { \overrightarrow { PA  }  } { a  } + abc \sin \beta \frac { \overrightarrow { PB  }  } { b  } + abc \sin \gamma \frac { \overrightarrow { PC  }  } { c  } & = \vec { 0  } \\
\sin \alpha \frac { \overrightarrow { PA  }  } { a  } + \sin \beta \frac { \overrightarrow { PB  }  } { b  } + \sin \gamma \frac { \overrightarrow { PC  }  } { c  } & = \vec { 0  } \\

\end{aligned}</script><p>考虑$| \frac { \overrightarrow { PA  }  } { a  } | = | \frac { \overrightarrow { PB  }  } { b  } | = | \frac { \overrightarrow { PC  }  } { c  } | = 1 $,后者根据拉密定理显然成立.</p>
<h5><span id="外心">外心</span></h5><p>有正弦定理,$| \overrightarrow { OA  } | = | \overrightarrow { OB  } | = | \overrightarrow { OC  } | = \frac { a  } { 2 \sin A  } $.</p>
<p>考虑三个三角形的面积可以表示为$\frac { r ^2  } { 2  } \sin \theta $,又考虑到圆中的$\theta $是圆心角是圆周角的两倍,立有$\sin ( 2 A ) \overrightarrow { OA  } + \sin ( 2 B ) \overrightarrow { OB  } + \sin ( 2 C ) \overrightarrow { OC  } = \vec { 0  } $.</p>
<p>下面给出一个例题:</p>
<h6><span id="example1">Example1</span></h6><p>在$\triangle ABC $中,$AB = 2 , BC = \sqrt { 10  } , AC = 3 $,若$O $是其外心,且$\overrightarrow { AO  } = p \overrightarrow { AB  } + q \overrightarrow { AC  } $.</p>
<p>先给出我一开始的想法:</p>
<p>在没学奔驰定理之前,我们看到这个外心,第一反应肯定是使用$| OA | = | OB | = | OC | $,也就是这三个长度都是好求的.因此,我们考虑对上面的式子两边平方,得到一个关于$p , q $的方程.但是这样没有解决问题.</p>
<p>考虑我们只用了$| OA | $,用上$| OB | $,这样的话我们两边同时加上$\overrightarrow { BA  } $,就可以得到$p , q $的另一个方程,可以解出两组解,直接舍也可以舍,不然的话根据$| OC | $也可以舍一个解.</p>
<p>但是这样太蠢了啊,我们考虑直接凑奔驰定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\overrightarrow { AO  } & = p \overrightarrow { AB  } + q \overrightarrow { AC  } \\
\vec { 0  } & = ( p + q - 1 ) \overrightarrow { OA  } + p \overrightarrow { OB  } + q \overrightarrow { OC  } 
\end{aligned}</script><p>考察奔驰定理,立有$\frac { p + q - 1  } { \sin ( 2 A )  } = \frac { p  } { \sin ( 2 B )  } = \frac { q  } { \sin ( 2 C )  } $,简单题.</p>
<h6><span id="example2">Example2</span></h6><p>已知相异两点$O , H $分别为$\triangle ABC $的外心和垂心,若$\overrightarrow { OH  } = m ( \overrightarrow { OA  } + \overrightarrow { OB  } + \overrightarrow { OC  } ) $,求$m $.</p>
<p>这题要用到的性质是,我们一定要知道$( \overrightarrow { OB  } + \overrightarrow { OC  } ) \cdot \overrightarrow { BC  } = 0 $,这也是外心的一个很重要的性质.</p>
<p>由此,我们让左边凑出$\overrightarrow { AH  } $,然后两边同时乘以$\overrightarrow { BC  } $就可以解决.注意到最后解方程的时候要么$m = 1 $,要么三角形等边,但是我们声明过$O , H $相异两点.</p>
<h5><span id="重心">重心</span></h5><p>首先重心将中线三等分,这个我竟然一直没细想过怎么证明啊,只是觉得倍长中线肯定能证明.</p>
<p>事实上用不到那么麻烦,你直接连接两个中点,立有中位线,然后以重心为两个三角形的顶点,立有一组对顶角且对边平行的$1 : 2 $的相似.</p>
<p>又考察三条中线将整个三角形分成了六部分,这六部分的面积是相等的.</p>
<p>为啥呢?因为你可以先把三角形分成三部分(也就是每个顶点连到重心),然后将这三部分内部的两个小三角形证明面积相等(因为此时重心是它的顶点,沿着中线连下去就还是这个三角形的中线),再利用上面的三等分结论就显然了啊.</p>
<p>结合奔驰定理,立有若$O $是重心,则必有$\overrightarrow { OA  } + \overrightarrow { OB  } + \overrightarrow { OC  } = \vec { 0  } $.</p>
<p>然后听说有个物理理想实验的理解方式,大概是说这与力矩结合一下就可以得到这是他物理重心的结论,不会.</p>
<h5><span id="垂心">垂心</span></h5><p>若$O $是重心,立有$\overrightarrow { OA  } \cdot \overrightarrow { BC  } = 0 $,将$\overrightarrow { BC  } = \overrightarrow { BO  } + \overrightarrow { OC  } $,立有$\overrightarrow { OA  } \cdot \overrightarrow { OB  } = \overrightarrow { OA  } \cdot \overrightarrow { OC  } = \overrightarrow { OB  } \cdot \overrightarrow { OC  } $.同时顺带证明了三条高交于一点.</p>
<p>根据奔驰定理还有$\overrightarrow { OA  } \tan A + \overrightarrow { OB  } \tan B + \overrightarrow { OC  } \tan C = \vec { 0  } $.</p>
<h5><span id="内心">内心</span></h5><p>根据奔驰定理,立有$a \overrightarrow { OA  } + b \overrightarrow { OB  } + c \overrightarrow { OC  } = \vec { 0  } $.</p>
<h3><span id="立体几何相关">立体几何相关</span></h3><h4><span id="基本概念">基本概念</span></h4><h5><span id="直线">直线</span></h5><p>使用直线的方向向量$\vec { s  } = ( n , m , p ) $和直线上一点$M _0 = ( x _0 , y _0 , z _0 ) $.那么方程显然为:</p>
<script type="math/tex; mode=display">
\frac { x - x _0  } { n  } = \frac { y - y _0  } { m  } = \frac { z - z _0  } { p  }</script><p>如果换元,我们还有参数方程:</p>
<script type="math/tex; mode=display">
\begin{cases}
x = x _0 + nt \\
y = y _0 + mt \\
z = z _0 + pt 
\end{cases}</script><h5><span id="平面">平面</span></h5><p>使用平面上的一点$P _0 ( x _0 , y _0 , z _0 ) $和该平面的法向量$\vec { n  } $来表示一个平面,不妨设$\vec { n  } = ( A , B , C ) $,则该平面的方程显然为:</p>
<script type="math/tex; mode=display">
A ( x - x _0 ) + B ( y - y _0 ) + C ( z - z _0 ) = 0</script><p>如果我们令$D = - ( Ax _0 + By _0 + Cz _) $,那么平面方程为:</p>
<script type="math/tex; mode=display">
Ax + By + Cz + D = 0</script><h5><span id="夹角">夹角</span></h5><h6><span id="两直线夹角">两直线夹角.</span></h6><p>直接求方向向量的夹角,然后取正值.</p>
<p>对于方向向量分别是$\vec { s _1  } = ( n _1 , m _1 , p _1 ) , \vec { s _2  } = ( n _2 , m _2 , p _2 ) $,也就有$\varphi = \arccos ( \frac { | \vec { s  } _1 \cdot \vec { s  } _2 |  } { | \vec { s  } _1 | | \vec { s  } _2 |  } ) \ $.</p>
<h6><span id="直线与平面的夹角">直线与平面的夹角</span></h6><p>同样使用向量,不妨设方向向量$\vec { s  } = ( n , m , p ) $,法向量$\vec { f  } = ( a , b , c ) $,那么$\varphi = \arcsin ( \frac { | \vec { s  } \cdot \vec { f  } |  } { | \vec { s  } | | \vec { f  } |  } ) $.</p>
<p>另外,由上面这个式子,不难得到一些特殊情况下的判定标准:</p>
<ol>
<li><p>若直线与平面平行,则$am + bn + cp = 0 $.</p>
</li>
<li><p>若直线与平面垂直,则$\frac { a  } { m  } = \frac { b  } { n  } = \frac { c  } { p  } $.注意这里分母可能除以$0 $,我们实际上应该是三个形如$a = mt $的参数方程,这里简化了.</p>
</li>
</ol>
<h5><span id="交点">交点</span></h5><p>联立方程硬解.</p>
<h4><span id="基本定理">基本定理</span></h4><p>参考:<a href="https://zhuanlan.zhihu.com/p/401766934">https://zhuanlan.zhihu.com/p/401766934</a></p>
<h5><span id="三余弦定理最小角定理">三余弦定理(最小角定理)</span></h5><p>这个定理说明直线与平面的夹角,是所有包含直线的平面与这个平面形成的夹角中最小的那一个.并且偏移量决定了差距.</p>
<h5><span id="三正弦定理最大角定理">三正弦定理(最大角定理)</span></h5><p>这个定理说明二面角是另一个平面上的直线与平面的夹角中最大的那个,并且偏移量决定了差距.</p>
<h3><span id="圆锥曲线">圆锥曲线</span></h3><h4><span id="约定">约定</span></h4><p>对于所有对称情况结论只讨论一种(其它情况可通过坐标变换得到),但是例题以及做题方法除外.</p>
<p>大部分涉及斜率的存在性问题,统一不予考虑.如果遇到实际例题,只需特别处理那几个特殊情况即可($mx + ny = 1 $需要判断过原点的直线,$y = kx + b $需要判断平行于$y $轴的直线),显然大部分情况下是平凡的.</p>
<h4><span id="椭圆">椭圆</span></h4><h5><span id="定义">定义</span></h5><h6><span id="第一定义">第一定义</span></h6><p>平面内与两定点$F _1 , F _2 $距离之和为常数($&gt; | F _1 F _2 | $)的点轨迹.即:$\{ P \mid | F _1 P | + | F _2 P | = 2 a , F _1 ( - c , 0 ) , F _2 ( c , 0 ) \} $.</p>
<h6><span id="第二定义">第二定义</span></h6><p>平面内一动点到定点与准线($x = \pm \frac { a ^2  } { c  } $)的距离比是常数$e = \frac { c  } { a  } $的点轨迹,即$\{ P \mid \frac { | PF _1 |  } { d _1  } = \frac { | PF _2 |  } { d _2  } = \frac { c  } { a  } = e , F _1 ( - c , 0 ) , F _2 ( c , 0 ) \} $.</p>
<h6><span id="第三定义">第三定义</span></h6><p>平面内一动点到两定点$A _1 ( - a , 0 ) , A _2 ( a , 0 ) $的斜率乘积等于定值$e ^2 - 1 $的轨迹称为椭圆.</p>
<h5><span id="椭圆方程">椭圆方程</span></h5><h6><span id="标准方程">标准方程</span></h6><p>由定义不难得到椭圆的标准方程:$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 ( b ^2 = a ^2 - c ^2 , a &gt; b &gt; 0 ) $.</p>
<h6><span id="一般方程">一般方程</span></h6><p>$nx ^2 + my ^2 = 1 ( n , m \geq 0 ) $,这样设的好处在于如果不知道焦点的位置,仍然可以设方程并进行代数运算,最后判断一下$n $和$m $的大小关系即可.</p>
<h5><span id="椭圆重要元素">椭圆重要元素</span></h5><h6><span id="焦半径">焦半径</span></h6><p>若$P ( x _0 , y _0 ) $,则$| PF _1 | = a + ex _0 $,$| PF _2 | = a - ex _0 $.</p>
<h6><span id="焦点弦">焦点弦</span></h6><p>过$F _1 $的弦$| AB | = 2 a + e ( x _1 + x _2 ) $.</p>
<p>过$F _2 $的弦$| AB | = 2 a - e ( x _1 + x _2 ) $.</p>
<p>注意到焦点弦最短时$x _1 = x _2 $.</p>
<h6><span id="焦点三角形">焦点三角形</span></h6><p>即$\bigtriangleup PF _1 F _2 $,令$\theta = \angle F _1 PF _2 $,有以下性质:</p>
<ol>
<li><p>$C = 2 a + 2 c $.</p>
</li>
<li><p>$S = b ^2 \tan \frac { \theta  } { 2  } = c | y _P | $.</p>
</li>
<li><p>$\cos \theta \geq 1 - 2 e ^2 $(当$P $在短轴上取等).</p>
</li>
<li><p>$| PF _1 | | PF _2 | = \frac { 2 b ^2  } { 1 + \cos \theta  } $.</p>
</li>
</ol>
<h5><span id="example">Example</span></h5><h6><span id="example1">Example1</span></h6><p>已知椭圆$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 $,$P $是椭圆上一点,$\angle F _1 PF _2 $的角平分线交$x $轴于$Q ( \frac { c  } { 4  } , 0 ) $,求离心率取值范围.</p>
<p>注意到$S _{ \bigtriangleup QPF _1  } = \frac { 5  } { 3  } S _{ \bigtriangleup QPF _2  } $,又有$Q $到$PF _1 $和$PF _2 $的距离相等,用等积法,显然$PF _1 = \frac { 5  } { 4  } a , PF _2 = \frac { 3  } { 4  } a $.</p>
<p>然后用三角形不等式做差就行.$2 c &gt; \frac { 1  } { 2  } a , \frac { 1  } { 4  } &lt; e $</p>
<h4><span id="双曲线">双曲线</span></h4><h5><span id="定义">定义</span></h5><h6><span id="第一定义">第一定义</span></h6><p>平面内与两定点$F _1 , F _2 $距离之差为常数($&gt; | F _1 F _2 | $)的点轨迹.即:$\{ P \mid | | F _1 P | - | F _2 P | | = 2 a , F _1 ( - c , 0 ) , F _2 ( c , 0 ) \} $.</p>
<h6><span id="第二定义">第二定义</span></h6><p>平面内一动点到定点与准线($x = \pm \frac { a ^2  } { c  } $)的距离比是常数$e = \frac { c  } { a  } $的点轨迹,即$\{ P \mid \frac { | PF _1 |  } { d _1  } = \frac { | PF _2 |  } { d _2  } = \frac { c  } { a  } = e , F _1 ( - c , 0 ) , F _2 ( c , 0 ) \} $.</p>
<h6><span id="第三定义">第三定义</span></h6><p>平面内一动点到两定点$A _1 ( - a , 0 ) , A _2 ( a , 0 ) $的斜率乘积等于定值$e ^2 - 1 $的轨迹称为双曲线.</p>
<h5><span id="双曲线重要元素">双曲线重要元素</span></h5><h6><span id="焦半径">焦半径</span></h6><p>若$P ( x _0 , y _0 ) , ( x _0 &gt; 0 ) $,则$| PF _1 | = a + ex _0 $,$| PF _2 | = - a + ex _0 $.</p>
<h6><span id="渐近线">渐近线</span></h6><p>$y = \pm \frac { b  } { a  } x $.</p>
<p>如果换个方向的双曲线,事实上就是把双曲线标准方程的等号右边写成$0 $得到的两个直线方程.</p>
<h6><span id="焦点三角形">焦点三角形</span></h6><p>即$\bigtriangleup PF _1 F _2 $,令$\theta = \angle F _1 PF _2 $,有以下性质:</p>
<ol>
<li>$S = \frac { b ^2  } { \tan \frac { \theta  } { 2  }  } $.</li>
</ol>
<h4><span id="抛物线">抛物线</span></h4><h5><span id="定义">定义</span></h5><h6><span id="第一定义">第一定义</span></h6><p>平面内一动点到定点与准线的距离相等的点轨迹.</p>
<h5><span id="抛物线重要元素">抛物线重要元素</span></h5><h6><span id="焦点弦">焦点弦</span></h6><p><del>我曾经以为整理完二项式恒等式后再也不会有同样恐怖的结论群了</del></p>
<p>直线$AB $为过$y ^2 = 2 px ( p &gt; 0 ) $焦点的弦,$A ( x _1 , y _1 ) , B ( x _2 , y _2 ) $,倾斜角为$\theta $,准线与$x $轴交点为$E ( - \frac { p  } { 2  } , 0 ) $,作$AA _1 $,$BB _1 $垂直于准线于$A _1 , B _1 $,则:</p>
<ol>
<li><p>$| AF | = x _1 + \frac { p  } { 2  } $,$| BF | = x _2 + \frac { p  } { 2  } $,$| AB | = x _1 + x _2 + p , \frac { 1  } { | FA |  } + \frac { 1  } { | FB |  } = \frac { 2  } { p  } $.</p>
</li>
<li><p>$| AF | = \frac { p  } { 1 - \cos \theta  } , | BF | = \frac { p  } { 1 + \cos \theta  } , | AB | = \frac { 2 p  } { \sin ^2 \theta  } $.</p>
</li>
<li><p>$x _1 x _2 = \frac { p ^2  } { 4  } $,$y _1 y _2 = - p ^2 $.</p>
</li>
<li><p>$S _{ \bigtriangleup AOB  } = \frac { p ^2  } { 2 \sin \theta  } $.</p>
</li>
<li><p>$k _{ AE  } + k _{ BE  } = 0 $.</p>
</li>
<li><p>$A , O , B _1 $三点共线,$B , O , A _1 $三点共线.</p>
</li>
<li><p>以$AB $为直径的圆与抛物线的准线相切.</p>
</li>
<li><p>以$A _1 B _1 $为直径的圆与$AB $相切.</p>
</li>
<li><p>以$AF $或$BF $为直径的圆与$y $轴相切.</p>
</li>
</ol>
<h4><span id="通用解法">通用解法</span></h4><h5><span id="联立方程">联立方程</span></h5><h6><span id="点参">点参</span></h6><p>不设直线斜率,直接通过设点坐标并且导出直线斜率.</p>
<p>这种做法通常要么不能做,要么能做并且非常简单,需要强大的构造能力.</p>
<p><strong>弦长公式</strong></p>
<p>已知直线$l $上有两点$N ( x _1 , y _1 ) , M ( x _2 , y _2 ) $,这条直线的斜率为$k $,那么$| NM | = \sqrt { 1 + k ^2  } | x _1 - x _2 | = \sqrt { 1 + \frac { 1  } { k ^2  }  } | y _1 - y _2 | $.</p>
<p><strong>点差法</strong></p>
<p>设圆锥曲线上两点$A ( x _1 , y _1 ) , B ( x _2 , y _2 ) $,其中点$M ( x _0 , y _0 ) $,有$2 x _0 = x _1 + x _2 , 2 y _0 = y _1 + y _2 $.</p>
<p>把这两个点带入圆锥曲线方程并做差,可以通过平方差公式消去几项.然后可以表示出直线斜率,大概做做.</p>
<p><strong>垂径定理</strong></p>
<p>已知直线$l $与曲线交于两点$N ( x _1 , y _1 ) , M ( x _2 , y _2 ) $,这条直线的斜率为$k $,$MN $的中点为$P ( x _0 , y _0 ) $,那么:</p>
<ol>
<li><p>在椭圆$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 ( a &gt; b &gt; 0 ) $中,$k \frac { y _0  } { x _0  } = - \frac { b ^2  } { a ^2  } = e ^2 - 1 $.</p>
</li>
<li><p>在双曲线$\frac { x ^2  } { a ^2  } - \frac { y ^2  } { b ^2  } = 1 $中,$k \frac { y _0  } { x _0  } = \frac { b ^2  } { a ^2  } = e ^2 - 1 $.</p>
</li>
<li><p>在抛物线$y ^2 = 2 px ( p &gt; 0 ) $中,$k = \frac { p  } { y _0  } = \frac { x _0  } { p  } $.</p>
</li>
</ol>
<h6><span id="小联立">小联立</span></h6><p>如果题目中有两条直线,它们之间的斜率满足一定关系,那么可以通过把这两个直线的斜率都设出来,然后再添加一个方程来实现.</p>
<p>这个方法的优点在于,有的时候分离出的方程会让原始式子简单很多.</p>
<p>缺点在于,有的时候会让原始式子复杂很多.</p>
<h6><span id="大联立">大联立</span></h6><p>直接设主要直线的方程,然后其它直线均通过主要直线方程导出.</p>
<p>最常用的方法.</p>
<p><strong>齐次化</strong></p>
<p>本质是平移坐标系.</p>
<p>简单来说,如果图中有两条有公共点的直线$PA $,$PB $,我们可以将公共点$P $平移至原点,这样$PA $和$PB $的方程都方便表达.然后设$AB $的方程为$mx + ny = 1 $(注意这个式子不能表示过原点的直线,需要特判).</p>
<p>由于进行了平移,新得到的圆锥曲线方程可能存在一次项和零次项,我们将一次项乘以$mx + ny $,零次项乘以$( mx + ny ) ^2 $,这样就得到了一个齐次式子.将两边同时除以$x ^2 $后就得到了一个和$k = \frac { y  } { x  } $有关的方程.</p>
<p>换句话说,某种意义下,齐次化应该算是点参和大联立的结合体:大部分情况下,能用点参的条件是斜率可以用点坐标轻松表示,而如果点的坐标比较奇怪就没办法表示,而齐次化可以完美解决这个问题.</p>
<p><strong>非对称性韦达定理</strong></p>
<p>大概就是求出一个用一个方程的根表达的式子,然后需要继续化简.</p>
<p>通常的做法是寻找方程的$x _1 x _2 $和$x _1 + x _2 $之间的关系来做.</p>
<p>当然还有一种情况是问形如$\frac { Ax _1 + Bx _2  } { Cx _1 + Dx _2  } $是定值的问题,这个时候一定有$\frac { A  } { C  } = \frac { B  } { D  } $.</p>
<p>还没完,非对称性韦达定理的应用巨多,例如令$w = \frac { x _1  } { x _2  } $,自然有$w + \frac { 1  } { w  } + 2 = \frac { ( x _1 + x _2 ) ^2  } { x _1 x _2  } $.</p>
<p>还比如有$y _2 = ny _1 + m $,我们可以用配凑技巧改写作$( y _2 + w ) = k ( y _1 + w ) $,也就有$\frac { y _2 + w  } { y _1 + w  } = k $,类似上面的做法也可以求.</p>
<p><strong>硬解定理</strong></p>
<p>设直线$y = kx + \varphi $与曲线$\frac { x ^2  } { m  } + \frac { y ^2  } { n  } = 1 $相交于$A ( x _1 , y _1 ) $和$B ( x _2 , y _2 ) $.</p>
<p>那么联立方程是:$( n + mk ^2 ) x ^2 + 2 k \varphi mx + m ( \varphi ^2 - n ) = 0 $.</p>
<p>判别式:$\Delta = 4 mn ( n + mk ^2 - \varphi ^2 ) $.</p>
<p>韦达定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x _1 + x _2 & = \frac { - 2 km \varphi  } { n + mk ^2  } \\
x _1 x _2 & = \frac { m ( \varphi ^2 - n )  } { n + mk ^2  } \\
| x _1 - x _2 | & = \frac { \sqrt { \Delta  }  } { n + mk ^2  } 
\end{aligned}</script><h6><span id="配凑法">配凑法</span></h6><p>参考:<a href="https://zhuanlan.zhihu.com/p/521025768">https://zhuanlan.zhihu.com/p/521025768</a>.</p>
<p>先猜结论,再对着结论构造一个对称式子,从而声明这个式子就是答案.</p>
<p>问题在于咋构造,通常前面的部分还是按部就班来.最后来一步”注意到”来机械降神.</p>
<p>感觉没什么太大用,因为小题直接猜结论,大题按部就班不会太慢.</p>
<h6><span id="应用">应用</span></h6><p><strong>Example1(大联立/点参)</strong></p>
<p>已知抛物线$y ^2 = 4 x $,若$A , B $位于抛物线上$x $轴上方不同的两点,直线$OA , OB $的斜率分别为$k _1 , k _2 $,且满足$k _1 k _2 - 4 = 4 k _1 + 4 k _2 $,求证:$AB $过定点,并求出$k _{ AB  } $的取值范围.</p>
<p>注意到$k _1 $和$k _2 $之间的关系很复杂,这个时候就别惦记你那小联立了,老老实实拿大联立做吧.</p>
<p>设$AB : y = kx + b $,则$A ( x _1 , kx _1 + b ) , B ( x _2 , kx _2 + b ) $,显然$k _1 = k + \frac { b  } { x _1  } , k _2 = k + \frac { b  } { x _2  } $.</p>
<p>直接带入方程,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( k + \frac { b  } { x _1  } ) ( k + \frac { b  } { x _2  } ) - 4 & = 4 ( 2 k + \frac { b  } { x _1  } + \frac { b  } { x _2  } ) \\
k ^2 + kb ( \frac { 1  } { x _1  } + \frac { 1  } { x _2  } ) + \frac { b ^2  } { x _1 x _2  } - 4 & = 8 k + 4 b ( \frac { 1  } { x _1  } + \frac { 1  } { x _2  } ) \\

\end{aligned}</script><p>而直接大联立得到的式子是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k ^2 x ^2 + ( 2 kb - 4 ) x + b ^2 & = 0 \\
\Delta & = 16 - 16 kb & > 0 , kb & < 1 \\
x _1 x _2 & = \frac { b ^2  } { k ^2  } , x _1 + x _2 & = \frac { 4 - 2 kb  } { k ^2  } , \frac { 1  } { x _1  } + \frac { 1  } { x _2  } & = \frac { 4 - 2 kb  } { b ^2  } 
\end{aligned}</script><p>带入,得到$k - b = 4 $,因此过定点$( - 1 , - 4 ) $,与$kb &lt; 1 $联立得到$k &lt; 2 + \sqrt { 5  } $.</p>
<p>还没完,这种题一定要检查一遍条件.注意到$AB $为$x $轴上方两点的性质没用到,这意味着$y _1 y _2 &gt; 0 \land y _1 + y _2 &gt; 0 $,带入方程得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
b ^2 + b ( \frac { 4 - 2 kb  } { k  } ) + b ^2 & > 0 \\
\frac { 4 - 2 kb  } { k  } + 2 b & > 0 
\end{aligned}</script><p>化简得到$\begin{cases}b &gt; 0 \ k &gt; 0 \end{cases} $,解得$k &gt; 4 $,于是$k \in ( 4 , 2 + \sqrt { 5  } ) $.</p>
<p>这啥暴力计算啊…没啥好方法嘛?</p>
<p>首先显然的一点是:由于是在做抛物线,直线方程设成反式肯定会好算很多.<del>(整理到这里才意识到可以设反式,但是懒得改前面的内容了)</del></p>
<p>看上去式子太复杂确实不太可能用小联立做.问题在于,$OA $和$OB $的斜率看上去都很好表示,为何不能用点参做呢?</p>
<p>我们尝试直接用点参:</p>
<script type="math/tex; mode=display">
\begin{aligned}
k _{ OA  } & = \frac { y _1  } { x _1  } , k _{ OB  } & = \frac { y _2  } { x _2  } \\
\frac { y _1 y _2  } { x _1 x _2  } - 4 & = 4 ( \frac { y _1  } { x _1  } + \frac { y _2  } { x _2  } ) \\
16 - 4 y _1 y _2 & = 16 ( y _1 + y _2 ) 
\end{aligned}</script><p>我们毫不费力就导出了用反式之后做的式子,这仿佛在预示我们点参是有用的,让我们继续:</p>
<script type="math/tex; mode=display">
\begin{aligned}
AB : \\
x - x _1 & = ( y - y _1 ) \frac { x 1 - x _2  } { y _1 - y _2  } \\
x - \frac { y _1 ^2  } { 4  } & = ( y - y _1 ) \frac { 1  } { 4  } ( y _1 + y _2 ) \\
x & = \frac { y _1 + y _2  } { 4  } y - \frac { y _1 y _2  } { 4  } \\
x & = \frac { y _1 + y _2  } { 4  } y - 1 + ( y _1 + y _2 ) 
\end{aligned}</script><p>显然过定点$( - 1 , - 4 ) $,并且通过$y _1 $和$y _2 $的关系也很好求斜率的范围.</p>
<p>另外值得一提的是,通常情况下,不要用那个$\frac { x - x _1  } { x _1 - x _2  } = \frac { y - y _1  } { y _1 - y _2  } $的方程直接表示直线,你做抛物线的很重要的一个目标是通过消参来让式子变得更简洁,而不是去硬着头皮算,上面这个直线方程咋消参啊.</p>
<p><strong>Example2(齐次化)</strong></p>
<p>已知椭圆$\frac { x ^2  } { 4  } + y ^2 = 1 $,$P , Q $在椭圆上,$A ( 2 , 0 ) $,$k _{ AP  } k _{ AQ  } = \frac { 1  } { 20  } $,求证:$PQ $过定点.</p>
<p>注意到$A ( 2 , 0 ) $,设$P ( x _1 , y _1 ) , Q ( x _2 , y _2 ) $,$PQ : m ( x - 2 ) + yn = 1 $,那么我们要求的也就是$x - 2 $和$y $之间的关系.</p>
<p>第一步先要把椭圆方程配出来,显然$\frac { x ^2  } { 4  } + y ^2 = 1 \Rightarrow \frac { ( x - 2 ) ^2  } { 4  } + ( x - 2 ) + y ^2 = 0 $.</p>
<p>显然?这咋配的啊.</p>
<p>其实简单来说也就是令$x ‘ = x - 2 , y ‘ = y $,我们有$x = x ‘ + 2 , y = y ‘ $,带入就可以得到关于$x ‘ , y ‘ $的方程,然后再带回$x $和$y $就行.</p>
<p>我们开始推导:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { ( x - 2 ) ^2  } { 4  } + ( x - 2 ) + y ^2 = 0 \\
( x - 2 ) ^2 + 4 ( x - 2 ) + 4 y ^2 = 0 \\
( x - 2 ) ^2 + 4 n ( x - 2 ) ^2 + 4 my ( x - 2 ) + 4 y ^2 = 0 \\
( 4 n + 1 ) ( x - 2 ) ^2 + 4 my ( x - 2 ) + 4 y ^2 = 0 \\
4 n + 1 + 4 m \frac { y  } { x - 2  } + 4 ( \frac { y  } { x - 2  } ) ^2 = 0 \\

\end{aligned}</script><p>令$k = \frac { y  } { x - 2  } $,也就得到了$4 n + 1 + 4 mk + 4 k ^2 = 0 $.用一遍韦达定理,有:$k _1 k _2 = \frac { 4 n + 1  } { 4  } = \frac { 1  } { 20  } , n = - \frac { 1  } { 5  } $.</p>
<p>也就有:$PQ : - \frac { 1  } { 5  } ( x - 2 ) + my = 1 $,显然过定点$( - 3 , 0 ) $.</p>
<p><strong>Example3(小联立)</strong></p>
<p>已知椭圆$\frac { x ^2  } { 9  } + y ^2 = 1 $,$P , Q $是该椭圆上两动点,$M , N $分别为$P , Q $在$x $轴上的射影,而且$k _{ OP  } k _{ OQ  } = - 1 $,记$S = S _{ \bigtriangleup OPM  } + S _{ \bigtriangleup OQN  } $,求$S $的最大值.</p>
<p>出现了两条直线!提问:使用大联立还是小联立.</p>
<p>考虑这么一个事实:大联立的用处应该体现在直线$PQ $很重要的时候,而这个题除了$P , Q $两点以外,和$PQ $半毛钱关系都没有.而且如果使用小联立,那么两个斜率之间的关系也很好表示,因此我们选择小联立.</p>
<p>设$P ( x _1 , y _1 ) , Q ( x _2 , y _2 ) $,$k = \frac { y _1  } { x _1  } , - \frac { 1  } { k  } = \frac { y _2  } { x _2  } $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 S & = | x _1 y _1 | + | x _2 y _2 | \\
& = | x _1 ^2 k - \frac { 1  } { k  } x _2 ^2 | \\

\end{aligned}</script><p>而联立方程,有:</p>
<script type="math/tex; mode=display">
x _1 ^2 = \frac { 1  } { \frac { 1  } { 9  } + k  } , x _2 ^2 = \frac { 1  } { \frac { 1  } { 9  } - \frac { 1  } { k  }  }</script><p>代入计算即可求解.</p>
<p>当然这个题斜率形式很好看,拿点参肯定也是可以做的,但是没啥必要,因为斜率关系很好看.</p>
<p>等一下,大联立真的没啥希望嘛?</p>
<p>确实没啥希望,因为直线$PQ $有两个未知量,我们还需要拿$k _{ OP  } k _{ OQ  } = - 1 $限制它们的关系,不如直接小联立.</p>
<p><strong>Example4(非对称性韦达定理)</strong></p>
<p>已知椭圆$\frac { x ^2  } { 2  } + y ^2 = 1 $,$F ( 1 , 0 ) $,直线$l $过$F $且交椭圆于$A , B $两点.求问:$x $轴上是否存在异于$F $的一点$Q $,使得$\frac { k _{ QA  }  } { k _{ QB  }  } $是定值.</p>
<p>直接设$AB : x = ky + 1 $,$Q ( q , 0 ) $.我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { k _{ QA  }  } { k _{ QB  }  } & = \frac { y _1 ( q - x _2 )  } { y _2 ( q - x _1 )  } \\
& = - \frac { ky _1 y _2 + y _1 - qy _1  } { ky _1 y _2 + y _2 - qy _2  } 
\end{aligned}</script><p>坏了,这咋做.</p>
<p>我们用一下韦达定理得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( k ^2 + 2 ) y ^2 + 2 ky - 1 & = 0 \\
\Delta & = 8 k ^2 + 8 & > 0 \\
y _1 + y _2 & = - \frac { 2 k  } { k ^2 + 2  } \\
y _1 y _2 & = - \frac { 1  } { k ^2 + 2  } \\

\end{aligned}</script><p>注意到$\frac { ( y _1 + y _2 )  } { 2  } = k ( y _1 y _2 ) $,代入,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { k _{ QA  }  } { k _{ QB  }  } & = - \frac { y _1 + y _2 + 2 y _1 - 2 qy _1  } { y _1 + y _2 + 2 y _2 - 2 qy _2  } \\
& = - \frac { ( 3 - 2 q ) y _1 + y _2  } { ( 3 - 2 q ) y _2 + y _1  } 
\end{aligned}</script><p>若是定值,那么就有:$\frac { 3 - 2 q  } { 1  } = \frac { 1  } { 3 - 2 q  } $,解得$q _1 = 1 ( F ) $,$q _2 = 2 ( Q ) $.</p>
<p>所以$Q ( 2 , 0 ) $.</p>
<p><strong>Example5(配凑法)</strong></p>
<p>已知椭圆$\frac { x ^2  } { 4  } + \frac { y ^2  } { 3  } = 1 $,过$F ( - 1 , 0 ) $的直线交椭圆于$M , N $两点,过$M $作直线$x = - 4 $的垂线,垂足为$E $,求证:$EN $过定点.</p>
<p>根据对称原理,显然这个定点一定在$x $轴上.</p>
<p>我们先写大联立的式子:设$MN : x = - 1 + ky $,带入有$( 3 m ^2 + 4 ) y ^2 - 6 my - 9 = 0 $.再设$M ( x _1 , y _1 ) , N ( x _2 , y _2 ) $,自然有:</p>
<script type="math/tex; mode=display">
\begin{cases}
\Delta = 144 k ^2 + 144 \\
y _1 + y _2 = \frac { 6 k  } { 3 k ^2 + 4  } \\
y _1 y _2 = \frac { - 9  } { 3 k ^2 + 4  } 
\end{cases}</script><p>接下来呢,我们想一下我们要求什么:我们要求出$EN $的表达式:形如$y - m = k ( x - n ) $,然后声明$( n , m ) $是定点.</p>
<p>这又意味着啥呢,这意味着在这条直线上,除了那个定点以外,一定有$k = \frac { y - m  } { x - n  } $.而我们现在有两个点$E ( - 4 , y _1 ) $和$N ( x _2 , y _2 ) $,又猜出$m = 0 $,也就是我们要找到一个$n $满足$\frac { y _1  } { - 4 - n  } = \frac { y _2  } { x _2 - n  } $.</p>
<p>我们倒着推:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { y _1  } { - 4 - n  } & = \frac { y _2  } { x _2 - n  } \\
\frac { y _1  } { - 4 - n  } & = \frac { y _2  } { ky _2 - 1 - n  } 
\end{aligned}</script><p>这是啥,这是非对称性韦达定理.</p>
<p>这一步已经可以暴力化简了.但那样还不如直接做呢.所以我们直接选择从非对称性韦达定理的角度推过来.</p>
<p>观察韦达定理的关系式,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
ky _1 y _2 + \frac { 3  } { 2  } ( y _1 + y _2 ) & = 0 \\
( x _2 + \frac { 5  } { 2  } ) y _1 & = - \frac { 3  } { 2  } y _2 \\
y _1 & = \frac { - 3  } { 2  } \frac { y _2  } { x _2 + \frac { 5  } { 2  }  } \\
\frac { y _1  } { - \frac { 3  } { 2  }  } & = \frac { y _2  } { x _2 + \frac { 5  } { 2  }  } \\
\frac { y _1  } { - 4 + \frac { 5  } { 2  }  } & = \frac { y _2  } { x _2 + \frac { 5  } { 2  }  } \\

\end{aligned}</script><p>做到这一步发现要做完了,不难发现$n = \frac { 5  } { 2  } $.</p>
<p>等一下,最后咋就这么巧就凑出来了呢?</p>
<p>因为你都确定了$m = 0 $了,肯定是可以凑出来的,除非它真的不过定点.</p>
<h5><span id="极点极线">极点极线</span></h5><h6><span id="定义">定义</span></h6><p><strong>几何定义</strong></p>
<p><del>感觉这个定义大概率没啥用</del></p>
<p>过不在二次曲线上的一点$P $作直线$l $交二次曲线于$M , N $两点(离$P $近的是$M $),则在$l $上有且只有一点$Q $,使得$| MQ | | NP | = | MP | | NQ | $(即$P , Q , M , N $构成一调和点列).当$l $绕着$P $旋转时,$Q $的轨迹是一条直线$p $(或一部分),这条直线$p $叫做点$P $关于二次曲线的极线,而$P $叫做$p $关于该曲线的极点.</p>
<p>以椭圆为例子,接下来我们声明:$p : \frac { x _0 x  } { a ^2  } + \frac { y _0 y  } { b ^2  } = 1 $.</p>
<p>证明:我有一个绝妙的证法,可惜这里地方太小,写不下.</p>
<p><strong>代数定义</strong></p>
<p>对于不在二次曲线$C : Ax ^2 + Bxy + Cy ^2 + Dx + Ey + F = 0 $上的一点$P ( x _0 , y _0 ) $,我们称它的极线为$p : Axx _0 + B \frac { x _0 y + y _0 x  } { 2  } + Cyy _0 + D \frac { x + x _0  } { 2  } + E \frac { y + y _0  } { 2  } + F = 0 $.</p>
<p>而对于在二次曲线上的点,我们也可以这么定义,不难发现此时极线就是过极点的切线.</p>
<p>证明:我有一个绝妙的证法,可惜这里地方太小,写不下.</p>
<h6><span id="基本性质">基本性质</span></h6><p><strong>性质1(配极原理)</strong></p>
<p>对于同一条二次曲线$C $,如果点$P $的极线经过点$Q $,那么点$Q $的极线经过点$P $.</p>
<p>证明:我有一个绝妙的证法,可惜这里地方太小,写不下.</p>
<p><strong>性质2(配极原理推论)</strong></p>
<p>两点连线的极点是这两点的极线的交点;两直线交点的极线是这两直线的极点的连线.</p>
<p>证明:由性质1,显然.</p>
<p><strong>性质3(极点与极线的位置关系)</strong></p>
<p>ps:对于双曲线而言:我们所说的在内部指的是平面中被双曲线分为的三部分平面中对称的那两部分.抛物线类似.</p>
<ol>
<li><p>设四边形$ABCD $(对边不平行)内接于二次曲线$C $,则对角线交点$P $的极线是两组对边交点的连线.反之同理,若$P $在二次曲线内部,那以这个点为对角线交点的内接四边形对边交点的连线就是它的极线.这告诉我们:若一个点在二次曲线内,那它的极线一定在二次曲线外.反之亦然成立.</p>
</li>
<li><p>若一个点在二次曲线上,那它的极线就是过这个点的二次曲线的切线.</p>
</li>
<li><p>若一个点在二次曲线外,那它的极线就是过这个点向二次曲线作两条切线,这两条切线与二次曲线的交点的连线.</p>
</li>
</ol>
<p>证明:我有一个绝妙的证法,可惜这里地方太小,写不下.</p>
<h6><span id="使用方法">使用方法</span></h6><p>通过极点极线猜结论,然后想办法证明结论.</p>
<p><strong>Example1</strong></p>
<p>已知$\frac { \cos \theta  } { a  } + \frac { \sin \theta  } { b  } = 1 $,求证:$\frac { 1  } { a ^2  } + \frac { 1  } { b ^2  } \geq 1 $.</p>
<p>设直线$l : \frac { x  } { a  } + \frac { y  } { b  } = 1 $,$M ( \cos \theta , \sin \theta ) $,则$M $在$l $上.</p>
<p>又注意到$M $显然是在单位圆上,而$l $是单位圆关于$P ( \frac { 1  } { a  } , \frac { 1  } { b  } ) $的极点.又注意到$l $与单位圆至少有一个交点,因此$P $要么在圆上要么在圆外,得证.</p>
<p><strong>Example2</strong></p>
<p>已知椭圆$\frac { x ^2  } { 4  } + \frac { y ^2  } { 3  } = 1 $,$A _1 ( - 2 , 0 ) , A _2 ( 2 , 0 ) , D ( \frac { 1  } { 2  } , 0 ) $,过$D $的直线交椭圆于$P , Q $两点(不与$A _1 , A _2 $重合).$A _1 P \cap A _2 Q = M $,$A _1 Q \cap A _2 P = N $,设$k _1 = k _{ A _1 P  } , k _2 = k _{ A _1 Q  } $.求证:$k _1 k _2 $是定值,求出这个定值并求出$\bigtriangleup DMN $面积的最小值.</p>
<p>一眼极点极线,通过极点极线知识不难得知$MN : x = 8 $.</p>
<p>我们先来看已知$MN : x = 8 $之后怎么做:</p>
<p>设$P ( x _1 , y _1 ) , Q ( x _2 , y _2 ) $,再设$PQ : x = ky + \frac { 1  } { 2  } $,则:$k _1 k _2 = \frac { y _1  } { x _1 + 2  } \frac { y _2  } { x _2 + 2  } $,不难算出$k _1 k _2 = - \frac { 9  } { 20  } $.</p>
<p>此时$S _{ \bigtriangleup DMN  } = | MN | | 8 - \frac { 1  } { 2  } | \frac { 1  } { 2  } $.不难发现只需求出$| MN | _{ \min  } $即可.而$MN \bot x $轴,所以$| MN | = | y _M - y _N | $.</p>
<p>接下来咋做?第一问求得$k _1 $和$k _2 $的关系不能白求啊!</p>
<p>我们有$A _1 P : x = - 2 + \frac { 1  } { k _1  } y , A _1 Q : x = - 2 + \frac { 1  } { k _2  } y $,带入$x = 8 $,求得$y _M = 10 k _1 , y _N = 10 k _2 $.</p>
<p>于是$| MN | = 10 | k _1 - k _2 | $.注意到$k _1 &gt; 0 \land - k _2 &gt; 0 \land k _1 ( - k _2 ) = \frac { 9  } { 20  } $,显然可以用基本不等式计算,最后得到$S _{ \min  } = \frac { 45 \sqrt { 5  }  } { 2  } $.</p>
<p>好,问题就差一步极点极线的证明了.</p>
<p>这个时候,我们先说出$A _1 Q : x = - 2 + \frac { y _2  } { x _2 + 2  } y , A _2 P : x = 2 + \frac { y _1  } { x _1 - 2  } y $,然后我们声明这两条直线的交点的横坐标一定是$8 $,然后代入验证即可.</p>
<p>好吧我也觉得很无赖,没办法.</p>
<h5><span id="隐函数求导">隐函数求导</span></h5><p>大概是这样的:</p>
<p>拿椭圆举例子,我们假设椭圆方程是$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 $.</p>
<p>我们将$y $看作$x $的函数,对两边求导,自然得到:</p>
<script type="math/tex; mode=display">
\frac { 2 x  } { a ^2  } + \frac { 2 yy '  } { b ^2  } = 0</script><p>这是个方程,你可以解得$y ‘ = - \frac { b ^2 x  } { a ^2 y  } $.而这就是椭圆过$( x , y ) $这一点切线的斜率.用点斜式就可以得到方程.</p>
<p>目前没发现这方法在除了推导切线方程以外有啥用.</p>
<h5><span id="线性变换">线性变换</span></h5><p>大概率没啥用的方法,不过思想还是挺重要的.</p>
<p><del>(好吧我特意写这么一栏只是因为我线代学魔怔了)</del></p>
<p>简单来说就是把一般的图形变成特殊的图形,然后乱做.</p>
<p>线性变换的问题在于角的变化有点随意.不过边长以及斜率的变化都可以控制.</p>
<p><del>不过感觉只有椭圆是迫真有用的东西</del></p>
<h6><span id="旋转矩阵">旋转矩阵</span></h6><p>向量$\vec { b  } = ( x , y ) $逆时针旋转$\theta $后得到的答案是$A \vec { b  } $,其中</p>
<p>\cos\theta,-\sin\theta\\</p>
<p>\sin\theta,\cos\theta</p>
<p>\end{bmatrix} </p>
<p>你要不喜欢矩阵表示也不是不行,那向量$( x , y ) $旋转$\theta $得到$( x ‘ , y ‘ ) $,其中</p>
<p>y’=xsin\theta+ycos\theta</p>
<h6><span id="椭圆转化成圆">椭圆转化成圆</span></h6><p>我们注意到圆的方程是$( x ‘ ) ^2 + ( y ‘ ) ^2 = 1 $,而椭圆的方程形如$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 $.</p>
<p>我们注意到上面的式子等价于:$( \frac { x  } { a  } ) ^2 + ( \frac { y  } { b  } ) ^2 = 1 $.我们将原坐标系中的所有坐标$( x , y ) $全部变成$( \frac { x  } { a  } , \frac { y  } { b  } ) $之后,就得到了一个新的坐标系.在新的坐标系中,我们只需要对着圆做就行.</p>
<p>换成线性代数语言,令$\vec { f  } = ( x , y ) $满足椭圆方程,令$\vec { g  } = ( x ‘ , y ‘ ) $满足圆的方程,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\begin{bmatrix}
\frac { 1  } { a  } , 0 \\
0 , \frac { 1  } { b  } 
\end{bmatrix} \vec { f  } & = \vec { g  } \\

\end{aligned}</script><script type="math/tex; mode=display">
\begin{bmatrix}
a , 0 \\
0 , { b  } 
\end{bmatrix} \vec { g  } = \vec { f  }</script><h6><span id="双曲线转化为反比例函数">双曲线转化为反比例函数</span></h6><p>注意到反比例函数的方程是$x ‘ y ‘ = 1 $,而双曲线的方程是$\frac { x ^2  } { a ^2  } - \frac { y ^2  } { b ^2  } = 1 $.</p>
<p>这个要硬配可能有些抽象.我们拿矩阵导一导.</p>
<p>首先先转化为$x ^2 - y ^2 = 2 $的形式,需要左乘矩阵$\begin{bmatrix}\frac { \sqrt { 2  }  } { a  } , 0 \ 0 , \frac { \sqrt { 2  }  } { b  } \end{bmatrix} $.</p>
<p>然后这个形式和我们所需要的反比例函数的形式只差一步旋转$\frac { \pi  } { 4  } $了.旋转矩阵为</p>
<p>\frac{1}{\sqrt{2}},-\frac{1}{\sqrt{2}}\\</p>
<p>\frac{1}{\sqrt{2}},\frac{1}{\sqrt{2}}</p>
<p>\end{bmatrix}</p>
<p>把两个东西乘起来得到矩阵</p>
<p>\frac{1}{a},-\frac{1}{b}\\</p>
<p>\frac{1}{a},\frac{1}{b}</p>
<p>\end{bmatrix}</p>
<p>验证一下,我们有$x ‘ = \frac { x  } { a  } - \frac { y  } { b  } , y ‘ = \frac { x  } { a  } + \frac { y  } { b  } $.带入反比例函数的方程:</p>
<script type="math/tex; mode=display">
x ' y ' = \frac { x ^2  } { a ^2  } - \frac { y ^2  } { b ^2  } = 1</script><p>对着矩阵求逆一下得到:逆矩阵为</p>
<p>\frac{a}{2},\frac{a}{2}\\</p>
<p>-\frac{b}{2},\frac{b}{2}</p>
<p>\end{bmatrix}</p>
<p>验证一下,我们有$x = \frac { a  } { 2  } ( x ‘ + y ‘ ) , y = \frac { b  } { 2  } ( { y ‘ - x ‘  } ) $,带入双曲线方程得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \frac { x  } { a  } ) ^2 - ( \frac { y  } { b  } ) ^2 & = 1 \\
( x ' + y ' ) ^2 - ( x ' - y ' ) ^2 & = 4 \\
x ' y ' & = 1 
\end{aligned}</script><p>要觉得矩阵部分比较魔怔也可以直接看上面的普通描述.</p>
<h6><span id="抛物线转化为二次函数">抛物线转化为二次函数</span></h6><p>这个比较简单,交换$x , y $即可,小问题.</p>
<h5><span id="极坐标">极坐标</span></h5><p>平面内取一点$O $为极点,引一条射线$Ox $叫做极轴,再选定单位长度和单位角度以及角度正方向,就建立了一个极坐标系.</p>
<p>对于平面上任意一点$M $,令$\rho = | OM | $,$\theta $为以$Ox $为始边,沿角度正方向(一般是逆时针方向)转到$OM $的夹角.那么我们称$( \rho , \theta ) $为$M $的极坐标,其中$\rho $叫做极径,$\theta $叫做极角.</p>
<p>$\rho $有可能取负,我们通常认为$( - \rho , \theta ) = ( \rho , \theta + \pi ) $.</p>
<p>通常情况下默认$0 \leq \theta &lt; 2 \pi , \rho \geq 0 $.如果遇到和直角坐标系结合的问题,通常默认原点为极点,$x $轴正半轴为极轴且二者单位长度相等.下文如无特殊说明均按此建立极坐标.</p>
<p>注意到若$M $在直角坐标系中坐标为$( x , y ) $,在极坐标中坐标为$( \rho , \theta ) $,若$M \ne O $自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x & = \rho \cos \theta , y & = \rho \sin \theta \\
\rho ^2 & = x ^2 + y ^2 , \theta & = \begin{cases}
\frac { \pi  } { 2  } & x = 0 \land y > 0 \\
\frac { 3 \pi  } { 2  } & x = 0 \land y < 0 \\
\arctan ( \frac { y  } { x  } ) & x \ne 0 
\end{cases} 
\end{aligned}</script><p>看到这里,聪明的你可能已经发现了不对劲:那这玩意怎么做坐标系变换呢?这玩意难道能乱乘矩阵嘛?这俩项单位都不一样欸.</p>
<p>别急,你注意到这个东西看上去不太能整什么抽象的坐标系,做的时候直接考虑转化为平面直角坐标系再做.</p>
<h6><span id="圆的极坐标方程">圆的极坐标方程</span></h6><p>显然是$\rho ^2 = r ^2 $.</p>
<p>另外,如果中心在$C ( \rho _0 , \theta _0 ) $,半径为$r $的方程咋求呢?</p>
<p>我们考虑本质是坐标系变换,想都别想先转平面直角坐标系,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
r ^2 & = ( \rho \cos \theta - \rho _0 \cos \theta _0 ) ^2 + ( \rho \sin \theta - \rho _0 \sin \theta _0 ) \\
r ^2 & = \rho ^2 + \rho _0 ^2 - 2 \rho \rho _0 \cos \theta \cos \theta _0 - 2 \rho \rho _0 \sin \theta \sin \theta _0 \\
r ^2 & = \rho ^2 + \rho _0 ^2 - 2 \rho \rho _0 \cos ( \theta - \theta _0 ) 
\end{aligned}</script><p>另外由于$\cos \theta = \cos ( - \theta ) $,这个公式应该不难背.</p>
<h6><span id="直线的极坐标方程">直线的极坐标方程</span></h6><p>过定点$( \rho _1 , \theta _1 ) $,且倾斜角为$\alpha $:$\rho \sin ( \alpha - \theta ) = \rho _1 \sin ( \alpha - \theta _1 ) $.</p>
<p>这个咋推的呢,先换回平面直角坐标系,假设过定点$( x _1 , y _1 ) $,倾斜角为$\alpha $,我们自然有$( x - x _1 ) \sin \alpha = ( y - y _1 ) \cos \alpha $.</p>
<p>于是有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x - x _1 ) \sin \alpha & = ( y - y _1 ) \cos \alpha \\
( \rho \cos \theta - \rho _1 \cos \theta _1 ) \sin \alpha & = ( \rho \sin \theta - \rho _1 \sin \theta _1 ) \cos \alpha \\
\rho \sin ( \alpha - \theta ) & = \rho _1 \sin ( \alpha - \theta _1 ) 
\end{aligned}</script><p>其实本质还是极坐标轴变换,因为过极点的直线是显然的.</p>
<p>我们再来考虑一个:求过定点$( \rho _1 , \theta _1 ) $和$( \rho _2 , \theta _2 ) $的直线方程.</p>
<p>同理的:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x - x _1 ) ( y _2 - y _1 ) & = ( y - y _1 ) ( x _2 - x _1 ) \\
\\
( \rho \cos \theta - \rho _1 \cos \theta _1 ) ( \rho _2 \sin \theta _2 - \rho _1 \sin \theta _1 ) \\
& = ( \rho _2 \cos \theta _2 - \rho _1 \cos \theta _1 ) ( \rho \sin \theta - \rho _1 \sin \theta _1 ) \\
\\
\rho \rho _2 ( \cos \theta \sin \theta _2 - \cos \theta _2 \sin \theta ) \\
+ \rho \rho _1 ( - \cos \theta \sin \theta _1 + \sin \theta \cos \theta _1 ) \\
+ \rho _1 \rho _2 ( - \cos \theta _1 \sin \theta _2 + \cos \theta _2 \sin \theta _1 ) \\
& = 0 \\
\\
\rho \rho _2 \sin ( \theta _2 - \theta ) + \rho \rho _1 \sin ( \theta - \theta _1 ) + \rho _1 \rho _2 \sin ( \theta _1 - \theta _2 ) & = 0 
\end{aligned}</script><p>太丑了吧,甚至不对称?</p>
<p>(网上的资料这一步可以继续往下化简,用一些三角函数知识).</p>
<p>这个故事教给我们:极坐标系下是很难表示一些直线的.</p>
<p>那表示曲线呢?</p>
<h6><span id="圆锥曲线的极坐标方程">圆锥曲线的极坐标方程</span></h6><p>优美的来了!</p>
<p>我们注意到圆锥曲线的一种定义是:到准线距离$d $和到定点距离$r $之比为常数的曲线.令$e = \frac { r  } { d  } $.</p>
<p>假定定点为原点,极轴垂直于准线,$h $为定点到准线的距离,又设曲线上一点为$M ( \rho , \theta ) $,自然有:$r = \rho , d = h + \rho \cos \theta $.</p>
<p>于是有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
e & = \frac { \rho  } { h + \rho \cos \theta  } \\
he + e \rho \cos \theta & = \rho \\
\rho & = \frac { he  } { 1 - e \cos \theta  } 
\end{aligned}</script><p>值得一提的是这玩意不能将圆理解为$e = 0 $的圆锥曲线.</p>
<h5><span id="参数方程">参数方程</span></h5><p>在平面直角坐标系中,曲线上任意一点的坐标$x , y $都是某个变量$t $的函数$\begin{cases}x = f ( t ) \ y = g ( t ) \end{cases} $.</p>
<h6><span id="圆的参数方程">圆的参数方程</span></h6><p>$M ( r \cos \theta , r \sin \theta ) $,其中$\theta $是$\angle OMx $.</p>
<h6><span id="直线的参数方程">直线的参数方程</span></h6><p>$M ( x _0 + t \cos \theta , y _0 + t \sin \theta ) $,其中$\theta $是倾斜角,$t $是参数,$M _0 ( x _0 , y _0 ) $.</p>
<p>注意到$| M _0 M | = | t | $.事实上,设$\vec { e  } = ( \cos \theta , \sin \theta ) $,也就是直线的单位方向向量,则$\overrightarrow { M _0 M  } = t \vec { e  } $.</p>
<h6><span id="椭圆的参数方程">椭圆的参数方程</span></h6><p>$M ( a \cos \theta , b \sin \theta ) $,其中$\theta $称为$M $的离心角.</p>
<p>值得注意的是,这里的$\theta $并非$\angle MOx $,而是将椭圆线性变换回圆后对应点的对应圆心角.</p>
<p><strong>Example1</strong></p>
<p>在椭圆$\frac { x ^2  } { 9  } + \frac { y ^2  } { 4  } = 1 $上求一点$M $,使$M $到直线$x + 2 y - 10 = 0 $的距离最小.</p>
<p>直接令$M = ( 3 \cos \theta , 2 \sin \theta ) $,则$d = \frac { | 3 \cos \theta + 4 \sin \theta - 10 |  } { \sqrt { 5  }  } = | \sqrt { 5  } \sin ( \theta + \varphi ) - 2 \sqrt { 5  } | $,其中$\varphi = \arcsin \frac { 3  } { 5  } $.</p>
<p>于是$d _{ \min  } = \sqrt { 5  } $,此时$\sin ( \theta + \varphi ) = 1 = \sin { \frac { \pi  } { 2  }  } $,那么就有$\theta = \frac { \pi  } { 2  } - \varphi $,$\sin \theta = \cos \varphi = \frac { 4  } { 5  } , \cos \theta = \sin \varphi = \frac { 3  } { 5  } $.</p>
<p>则$M = ( \frac { 9  } { 5  } , \frac { 8  } { 5  } ) $.</p>
<p><strong>Example2</strong></p>
<p>已知椭圆$\frac { x ^2  } { 100  } + \frac { y ^2  } { 64  } = 1 $,有一内接矩阵$ABCD $($AB / / x , BC / / y $),求矩阵最大面积.</p>
<p>直接令$A = ( 10 \cos \theta , 8 \sin \theta ) $,则$S = 20 \cos \theta \times 16 \sin \theta = 160 \sin ( 2 \theta ) $,$S _{ \max  } = 160 $.</p>
<h6><span id="双曲线的参数方程">双曲线的参数方程</span></h6><p>$M ( \frac { a  } { \cos \theta  } , b \tan \theta ) = M ( a \sec \theta , b \tan \theta ) $,其中$\theta $称为$M $的离心角,通常规定$\theta \in [ 0 , 2 \pi ] \land \theta \ne \frac { \pi  } { 2  } \land \theta \ne \frac { 3 \pi  } { 2  } $.</p>
<p>其实本质也就是三角恒等式$\sec ^2 \theta = 1 + \tan ^2 \theta $.</p>
<p><strong>Example1</strong></p>
<p>圆$O : x ^2 + ( y - 2 ) ^2 = 1 $上有一点$P $,双曲线$x ^2 - y ^2 = 1 $上有一点$Q $,求$| PQ | _{ \min  } $.</p>
<p>设$Q ( \sec \theta , \tan \theta ) $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| OQ | ^2 & = \sec ^2 \theta + ( \tan \theta - 2 ) ^2 \\
& = \tan ^2 \theta + 1 ( \tan \theta - 2 ) ^2 \\
& = 2 ( \tan \theta - 1 ) ^2 + 3 
\end{aligned}</script><p>$| OQ | _{ \min  } = \sqrt { 3  } , | PQ | _{ \min  } = \sqrt { 3  } - 1 $.</p>
<p><strong>Example2</strong></p>
<p>求证:等轴双曲线平行于实轴的弦在两顶点所张的角均为直角.</p>
<p>设$P ( a \sec \theta , a \tan \theta ) , Q ( - a \sec \theta , a \tan \theta ) $,则$k _P = \frac { a \tan \theta  } { a \sec \theta - a  } , k _Q = \frac { a \tan \theta  } { - a \sec \theta - a  } $.注意到$k _P \cdot k _Q = - 1 $.</p>
<p><strong>Example3</strong></p>
<p>已知双曲线$\frac { x ^2  } { a ^2  } - \frac { y ^2  } { b ^2  } = 1 $,$A , B $是双曲线同支上相异两点,线段$AB $的垂直平分线与$x $轴相交于点$P ( x _0 , 0 ) $,求证:$| x _0 | &gt; \frac { c ^2  } { a  } = \frac { a ^2 + b ^2  } { a  } $.</p>
<p>设$A ( a \sec \alpha , b \tan \alpha ) , B ( a \sec \beta , b \tan \beta ) $,则中点$M ( \frac { a  } { 2  } ( \sec \alpha + \sec \beta ) , \frac { b  } { 2  } ( \tan \alpha + \tan \beta ) ) $.</p>
<p>于是中垂线方程为$y - \frac { b  } { 2  } ( \tan \alpha + \tan \beta ) ) = - \frac { a ( \sec \alpha - \sec \beta )  } { b ( \tan \alpha - \tan \beta )  } [ x - \frac { a  } { 2  } ( \sec \alpha + \sec \beta ) ] $.</p>
<p>代入$P ( x _0 , 0 ) $,求得$x _0 = \frac { c ^2  } { 2 a  } ( \sec \alpha + \sec \beta ) $.</p>
<p>也就是要比较$| \sec \alpha + \sec \beta | $和$2 $的大小关系,注意到$A , B $同支,所以$| \sec \alpha + \sec \beta | &gt; 2 $.</p>
<h6><span id="抛物线的参数方程">抛物线的参数方程</span></h6><p>$M ( \frac { 2 p  } { \tan ^2 \theta  } , \frac { 2 p  } { \tan \theta  } ) $,其中$\theta $称为$M $的离心角,意义是该点和原点所确定直线的斜率,注意这个参数方程不能表示抛物线顶点.</p>
<p>事实上,我们可以有一个别的参数方程表达:$M ( 2 pk ^2 , 2 pk ) $,这个参数方程可以表示顶点.</p>
<p><strong>Example1</strong></p>
<p>若抛物线$\begin{cases}x = 2 pt ^2 \ y = 2 pt \end{cases} $上有不同两点$M _1 , M _2 $,所对应的参数分别是$t _1 , t _2 $,求直线$M _1 M _2 $所在直线的斜率.</p>
<p>$k _{ M _1 M _2  } = \frac { 2 pt _1 - 2 pt _2  } { 2 pt _1 ^2 - 2 pt _2 ^2  } = \frac { 1  } { t _1 + t _2  } $.</p>
<p><strong>Example2</strong></p>
<p>$A , B $是抛物线$y ^2 = 2 px $上异于顶点的两动点,且$OA \bot OB $,$AB $上有一点$M $满足$OM \bot AB $,求$M $的轨迹方程.</p>
<p>设$M ( x , y ) , A ( 2 pt _1 ^2 , 2 pt _1 ) , B ( 2 pt _2 ^2 , 2 pt _2 ) $,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\overrightarrow { OM  } & = ( x , y ) \\
\overrightarrow { OA  } & = ( 2 pt _1 ^2 , 2 pt _1 ) \\
\overrightarrow { OB  } & = ( 2 pt _2 ^2 , 2 pt _2 ) \\
\overrightarrow { AB  } & = ( 2 p ( t _2 ^2 - t _1 ^2 ) , 2 p ( t _2 - t _1 ) ) 
\end{aligned}</script><p>因为$\overrightarrow { OA  } \bot \overrightarrow { OB  } $,所以$( 2 pt _1 t _2 ) ^2 + ( 2 p ) ^2 t _1 t _2 = 0 $,$t _1 t _2 = - 1 $.</p>
<p>因为$\overrightarrow { AB  } \bot \overrightarrow { OM  } $,又有$k _{ AB  } = \frac { 1  } { t _1 + t _2  } $,所以$k _{ OM  } = - ( t _1 + t _2 ) $,$\frac { y  } { x  } = - ( t _1 + t _2 ) $.</p>
<p>接下来咋做捏?注意到我们好像忘记了$ABM $三点共线的性质,拿向量做这个东西.</p>
<p>$\overrightarrow { AM  } = ( x - 2 pt _1 ^2 , y - 2 pt _1 ) , \overrightarrow { MB  } = ( 2 pt _2 ^2 - x , 2 pt _2 - y ) $.</p>
<p>那么有$( x - 2 pt _1 ^2 ) ( 2 pt _2 - y ) = ( 2 pt _2 ^2 - x ) ( y - 2 pt _1 ) $.</p>
<p>化简得到$x ^2 + y ^2 - 2 px = 0 ( x \ne 0 ) $.</p>
<p>等一下,这咋想到的啊.</p>
<p>首先注意到我们有两个点$A , B $,自然要设出它们的参数方程.然后呢?然后我们发现最后$M $一定和$t _1 , t _2 $有关.但是我们要求的是$M $的方程,其中不能带有$t _1 , t _2 $,因此考虑把$M $的坐标设出来,再用这个坐标表示$t _1 , t _2 $,表示不出来表示$t _1 t _2 , t _1 + t _2 $也可以,然后消掉即可.</p>
<p>当然这题还有一个做法,注意到$M $一定在以$| OA | $为直径的圆上,$B $同理,这两个圆的方程分别为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x ^2 + y ^2 - 2 pt _1 ^2 x - 2 pt _1 y & = 0 \\
x ^2 + y ^2 - 2 pt _2 ^2 x - 2 pt _2 y & = 0 
\end{aligned}</script><p>也就是说,$t _1 , t _2 $是同一个方程的两个根,根据韦达定理自然有$t _1 t _2 = \frac { - ( x ^2 + y ^2 )  } { 2 px  } = - 1 $,于是直接有$x ^2 + y ^2 - 2 px = 0 $.</p>
<p>还没完,注意到$O $一定是一个根,要去掉,所以答案就是$x ^2 + y ^2 - 2 px = 0 ( x \ne 0 ) $.</p>
<p><strong>Example3</strong></p>
<p>已知$A , B , C $是抛物线$y ^2 = 2 px ( p &gt; 0 ) $上的三个点,且$BC $与$x $轴垂直,直线$AB $和$AC $分别与抛物线的轴交于$D , E $两点,求证:抛物线的顶点平分$DE $.</p>
<p>设$A ( 2 pt _1 ^2 , 2 pt _1 ) , B ( 2 pt _2 ^2 , 2 pt _2 ) , C ( 2 pt _2 ^2 , - 2 pt _2 ) $,注意到$AB : y - 2 pt _1 = \frac { 1  } { t _1 + t _2  } ( x - 2 pt _1 ^2 ) $,$AC : t - 2 pt _1 = \frac { 1  } { t _1 - t _2  } ( x - 2 pt _1 ^2 ) $.</p>
<p>可求得$D ( - 2 pt _1 t _2 , 0 ) , E ( 2 pt _1 t _2 , 0 ) $,于是得证.</p>
<h5><span id="蒙日圆">蒙日圆</span></h5><p>参考:<a href="https://zhuanlan.zhihu.com/p/591258689">https://zhuanlan.zhihu.com/p/591258689</a></p>
<h6><span id="定义">定义</span></h6><p>过圆锥曲线外一点作两条互相垂直的切线,那么这一点的轨迹是一个圆,这个圆被称为蒙日圆,又叫外准圆.</p>
<h6><span id="方程">方程</span></h6><p><strong>椭圆的蒙日圆方程</strong></p>
<p>设椭圆为$\frac { x ^2  } { a ^2  } + \frac { y ^2  } { b ^2  } = 1 $,其蒙日圆方程为$x ^2 + y ^2 = a ^2 + b ^2 $.</p>
<p>证明:直接设椭圆上一点就可以导出.</p>
<p><strong>双曲线的蒙日圆方程</strong></p>
<p>设双曲线为$\frac { x ^2  } { a ^2  } - \frac { y ^2  } { b ^2  } = 1 $,其蒙日圆方程为$x ^2 + y ^2 = a ^2 - b ^2 $.</p>
<p>证明:其实注意到椭圆的证明中设$b $是复数也是成立的,自然得证双曲线.</p>
<p>我知道你在想啥,你在想有没有可能一个点向双曲线能做出超过两条切线.事实上根据渐近线的原理这是不可能滴.</p>
<p><strong>抛物线的蒙日圆方程</strong></p>
<p>设抛物线$y ^2 = 2 px $,其蒙日圆方程为$x = - \frac { p  } { 2  } $.</p>
<p>有一说一,直线是半径无穷大的圆.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>被豌豆创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E8%B1%8C%E8%B1%86%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>在YT2S 2021级生2课上有一个著名的open problem,也就是在计算自由交配的时候能否拆开考虑,下面我来尝试写一点自己的理解.</p>
<p>首先来看两个问题(前置条件均为孟德尔第二次杂交实验):</p>
<ol>
<li><p>将F2中双显性植株自由交配,求后代表现型及比例.</p>
</li>
<li><p>将F2中单显性植株(包括两种单显性植株)自由交配,求后代表现型及比例.</p>
</li>
</ol>
<p>为了方便笔者书写,不妨设这两对基因是$A / a $和$B / b $.</p>
<p>先来看第一个问题,双显性植株中应该有:$\frac { 1  } { 9  } AABB , \frac { 2  } { 9  } AABb , \frac { 2  } { 9  } AaBB , \frac { 4  } { 9  } AaBb $.先让第一组基因自由交配,也就是只看$A / a $,我们有$\frac { 1  } { 3  } AA $和$\frac { 2  } { 3  } Aa $,产生$\frac { 2  } { 3  } A $和$\frac { 1  } { 3  } a $配子,得到$AA : Aa : aa = 4 : 4 : 1 $,也就是$A _ : aa = 8 : 1 $.对另一对也这么考虑,最终得到$A _ B _ : A _ bb : aaB _ : aabb = 64 : 8 : 8 : 1 $.</p>
<p>非常合理且简洁对吧,但如果你同样拆开考虑第二个问题,会发现这么做是错误的.</p>
<p>我们生物老师LL老师给出的解释是,单显性植株的个体是$A _ bb $和$aaB _ $,它们的基因型并没有组合的非常彻底,也就是并没有出现$aabb $和$A _ B _ $个体,导致不能乱拆开.</p>
<p>而直觉上感觉这个东西和独立性有关对吧,我们来简单证明一下:</p>
<p>约定$X $是$AA , Aa $或$aa $,$Y $则是$BB , Bb , bb $,那么:$P ( XY ) = P ( Y | X ) P ( X ) $.如果可以拆开,那么$P ( XY ) = P ( X ) P ( Y ) $,于是有:$P ( Y | X ) = P ( Y ) $,也就是这两种基因型互相独立就行,老师说的对啊!</p>
<p>如果只是这样就水了一篇博客非常无聊对吧,能不能证明一点更好玩的结论呢?</p>
<p>考虑设产生四种配子$AB , Ab , aB , ab $的概率分别是$x , y , z , w $,其中$x + y + z + w = 1 $.</p>
<p>使用生成函数技巧,配子法给出的答案应该是:$( x  AB + y  Ab + z  aB + w  ab ) ^2 $,而拆分再乘起来的答案应该是$( ( x + y ) A + ( z + w ) a ) ^2 ( ( x + z ) B + ( y + w ) b ) ^2 $,其中$A , B , a , b $均为形式幂.</p>
<p>如果两边相等,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x \ AB + y \ Ab + z \ aB + w \ ab ) ^2 & = ( ( x + y ) A + ( z + w ) a ) ^2 ( ( x + z ) B + ( y + w ) b ) ^2 \\
( x + y + z + w ) ( x \ AB + y \ Ab + z \ aB + w \ ab ) & = ( ( x + y ) A + ( z + w ) a ) ( ( x + z ) B + ( y + w ) b ) \\

\end{aligned}</script><p>两边展开,就可以知道它的充分必要条件是$P ( ab ) = P ( a ) P ( b ) $,也就是产生$a $和$b $的配子概率是独立的.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>白鸟</title>
    <url>/2025/06/22/%E6%9C%AA%E5%AE%8C%E6%88%90-%E7%99%BD%E9%B8%9F/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="07ea0c3f06cb7dc1ee41b8c3ec288f343edb881871756f20f57b85f06e1ea4c1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未完成</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>薄荷养护日志</title>
    <url>/2025/06/22/%E6%9C%AA%E5%AE%8C%E6%88%90-%E8%96%84%E8%8D%B7%E5%85%BB%E6%8A%A4%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="18065cd6b2a51b08fcf25eef0fc2fd06a1605d122cb000cae279f3bed1928339"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未完成</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>被轮子创飞了</title>
    <url>/2025/06/22/%E6%96%87%E5%8C%96%E8%AF%BE-%E8%A2%AB%E8%BD%AE%E5%AD%90%E5%88%9B%E9%A3%9E%E4%BA%86/</url>
    <content><![CDATA[<span id="more"></span>
<p>2024的烟台一模数学压轴题是一道新定义题,是说证明<a href="https://baike.baidu.com/item/%E6%91%86%E7%BA%BF/5893005">摆线</a>上一点$M ( x _0 , y _0 ) $的切线的倾斜角为$\theta $,求证$\frac { 1 + \cos 2 \theta  } { y _0  } = 1 $.在这个题下选用的参数方程是$x = t - \sin t , y = 1 - \cos t $.</p>
<p>这个怎么做呢?我的文化课同学们纷纷使用强大的隐函数求导技巧把它杀穿了啊.可惜我不会隐函数求导,我只会链式法则.但是我考场只记得链式法则怎么用了而完全忘记了这个东西为啥是对的,所以就有了这篇复健博客.</p>
<p>首先来复习一下微分$\text { d  } y $的定义啊,下面这段抄自我原本的高数笔记:</p>
<p>考察$\Delta y = f ( x _0 + \Delta x ) - f ( x _0 ) $,不妨假设$f ( x ) $在$x _0 $处导数存在,自然有$\lim _{ \Delta x \rightarrow 0  } \frac { \Delta y  } { \Delta x  } = f ‘ ( x _0 ) \ $.考察$\eta ( \Delta x ) = \frac { \Delta y  } { \Delta x  } - f ‘ ( x _0 ) $,显然$\Delta x \rightarrow 0 $时$\eta ( \Delta x ) $是一个无穷小量.</p>
<p>那么,我们自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta y & = f ' ( x _0 ) \Delta x + \eta ( \Delta x ) \Delta x \\
& = f ' ( x _0 ) \Delta x + o ( \Delta x ) , \Delta x \rightarrow 0 
\end{aligned}</script><p>同时,如果我们有这个式子,可以两边同时除以$\Delta x $以证明可导.</p>
<p>这就将一阶导数转化成了无穷小量的形式,我们借此给出微分的定义:</p>
<p>设$y = f ( x ) $在$x _0 $处有定义,假设有一个常数$A $使得$f ( x _0 + \Delta x ) - f ( x _0 ) = A \Delta x + o ( \Delta x ) , \Delta x \rightarrow 0 $,称$f ( x ) $在$x _0 $处<strong>可微</strong>,并把$\text { d  } f = \text { d  } y = A \Delta x $称为$f ( x ) $在$x _0 $处的<strong>微分</strong>,由于后半部分是一个更高阶的无穷小量,我们说微分是函数改变量的线性主要部分.这个时候结合导数极限的定义,就可以得到$\text { d  } y = f ‘ ( x ) \text { d  } x $,$f ‘ ( x ) = \frac { \text { d  } y  } { \text { d  } x  } \ $.这就是我们将导数称作<strong>微商</strong>的原因.</p>
<p>一阶微分具有<strong>形式不变性</strong>.换言之就是,我们在求导的时候是需要选定一个自变量的,当选定的自变量是$y $的时候,根据上面自然会有$z = g ( y ) , \text { d  } z = g ‘ ( y ) \text { d  } y $.</p>
<p>但是当选定的自变量不是$y $的时候,上面的形式是同样成立的.我们下面证明这个结论,令$y = f ( x ) $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
[ g ( f ( x ) ) ] ' & = g ' ( f ( x ) ) f ' ( x ) \\
\text { d  } z & = g ' ( f ( x ) ) f ' ( x ) \text { d  } x \\
\text { d  } z & = g ' ( y ) \text { d  } y \\

\end{aligned}</script><p>必须提出高阶微分不存在形式不变性,换句话说,$z = g ( y ) $的二阶微分的形式不等价于$z = g ( y = f ( x ) ) $的二阶微分,你不能乱换元.</p>
<p>根据上面的操作,我们很自然引出了链式法则,也就是:</p>
<script type="math/tex; mode=display">
\frac { \text { d  } y  } { \text { d  } x  } = \frac { \text { d  } y  } { \text { d  } t  } \frac { \text { d  } t  } { \text { d  } x  } = \frac { \text { d  } y  } { \text { d  } t  } \frac { 1  } { \frac { \text { d  } x  } { \text { d  } t  }  }</script><p>这样上面的题就可以迎刃而解了.</p>
]]></content>
      <categories>
        <category>被文化课创飞了</category>
      </categories>
      <tags>
        <tag>文化课</tag>
      </tags>
  </entry>
  <entry>
    <title>誓</title>
    <url>/2025/06/22/%E6%9C%AA%E5%AE%8C%E6%88%90-%E8%AA%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6e42c90926aa3967443d4d57d44ae2f26898ecae63c5d69c4a17fb76c895c130"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未完成</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>杂草</title>
    <url>/2025/06/22/%E6%9C%AA%E5%AE%8C%E6%88%90-%E6%9D%82%E8%8D%89/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="bec95eee7502ce41f038d22897c85d6893020fdd26b8fd6b70d66a2083d490e5">3bb9165ff5e6bbea951b9b42679dea8a10005ea0aa590a3a442cae26bb5f71e7736cf69313dfb1e949bf85217db3350df41ae8ab3f171251ea176a20cf5be752a083112848789a344000841a0399538694e98f25d1f064365fe410a16b722997555979c946bce8b35ede07072ae0529c3d9adb018f1995413998748b67d6f6fc825f3d73c6a7ea05ace98e47e6bf8d6a65857c5add2bece09e8baae4b6791c4761b256e6858b69c3181573586f1adea7fbfa4bbd860792899c8d0f7832266053ae66b6cac810bb98ac54f6f48757a48c72e9a5165952c649072822dc87562ef1cf0836392a6c56c263bf3e1c20ff81a5dd7001362935adbf774b79afa01b5dc2394c2d43a0972d1b20f5d6ddc7a5c3908e99bb940f3dddfb42baded82afaa91fdec2933c32c035187c7a75e1a77d5e8f411c870700437023b4d7c00250f0117c7c78c740b785bc451e1bdbb5707f17a5f4b75f634ed75bc4339c6c9d1ae82dbe2eb8ffe8addba679f58bda60a6194a12020e9a1f1ce2a5e9a3248b855a2aa1fe393eec64f9e1819cb07a44d0cc7fda2d656f6582383ee0a081e53b27e1c712ff5d3444243f343aade60df0ab9759f92e43c9731fca54f2648533dfdc6c0ba0f0bff804c83da00cc4fb632674a7cb0689518c0da77ebd4e8a4681920c6f1331f56d7a38006df8fe6d763bb52c15b5fd1d2666be18683fdbd90e30a5ded98d7fee928a994235213e21fc305f9e3cd841a639b368205b90d4d239780d751f2e4811f63c9cca35534b42085426fc08eddac8e2a7e25dc16103ca14788b818e6433d563ee0263d7f648ecdc769edf7a26ffadcdf6d6c58f7b5afa811e3ff2012f94b184c3d6d687ed7f88ea2328f072f333f521412bf044ed7b2ab756ec7805c51ff023bb563be56d841fffc120e48646d289fbee7fc66e5f966563ee887883a7e6d6bda84143d658b001236cad903bd9129f76f2540beb6cff97c8e78b3b0437a3478bf9b1f6e665abb8a3dce17623a0da69474da4a5cf48a778f780943a8f0fa30fc7ed5a87e0a4c52de448b87290455bd167044b6279d82129427e49c55d88185bde276a2921e04f10e67405a86b7bc72635c9c683f3f6af62392fa274a3a11e44dabd8777617585c6da93ffa9dc86ed8fbd80ce84b9a4efb1dd618b703f44d11c3dc8f4a57cf98fb542294d4415c4fbb1fcdddcbcb5747e85167acf29e936e918b158eeab84e97d5274c66b688ef0cc6aed6387dcfff49251b82472e2c65ccdddd0f828ac5e56b987acc8e642b32960f955ee29deb822dbdb6c91a1f418c16331914a0480172b5e33cd5a19b3f54a27af30b6511936f984004c7d7e0631f9ff4c71183d2f96ce380ca62d732804633d82ef787d191b0f56d86f7e326228f1d3b333b26fdfabd300e757cd68acee0215c1a0f8ac4b889463932a873cfbcd9e188cccfe93698b40ebd10356e986e293b127a410428ef20bae42fdcfb0e886af890f5801dec1265c9e67008456bb5119184e4366c4b1cf9433d81d274fc1a0094f891ac8f34e522902d01a21e85ddd7b34040b89e5fc770c31e8ca6816df7140038e4aa78975d528cc788c04fd873100d46385d5ba7f32c27f60e42dbc932cd2704bb5fd0457970c449b9a3b13071fd50b5b1aadb6424519977587fa81f9cd6f2bbe81dbf03fd22fcf9ba83f3fb4b2bc0223e68edb4a1a1cfa50fecda6e3ea1eddb25fa3ea44952927297e9e4e6055f479a28d75dbd1fdd56d0fa1136ca6e4d969b8ef00bdc21eeb5c4c9c840644dc24255df3e234c192b1145ee5df4e85ccaef104f6e912d2d9de9e494423cf0142ad0470c82b7949c04be20f1664d9c43dfe17440928b582deff1b4fc96df6c84639c95726eaf9359b5a12e0ef0a7760147aaefdbcf75fad4a79e32ade9a54056ebcd3e59da7f133686ab327dec929f76b28da2bc270614c5476358e28870d9015a5617c9d2f72ce5d1238a6eb236ab5539618f9d7b84b0207d4554f48974ec1d6972c4c73c8c6d20c1917a124d214ae760bd4aa2c732425d226e73ed3bbd640cf5df268fb9a612d5b8edf9da0ac63c905ef9163d1ca383b2b5cbe7149f84dad7f02209364a7108275f5ffffc142ebdfe9b25f264f95423cc7ad61cc392d81baaab7523341527e5adac860385b3f8accebf01f7cf4247d7016a254763b9904ca02ef02e19e5bf7e942bec2e4a96bc8bd5ad55ad554a10c10c6c4a9038c2741615ef3c91dd2821ec616bc9b7d96b9d2effdb51884aaac288ba56b0863ed10480b127a945504e598e1ba0a877e5fd522427bfd7d5077ea53565612040efb1087aee847547e671672edf215b518cd8021f62c10b5571ff99752714fda55fe43972a69770db8b05d770aff1e35f020828a6e0aa433e245075c0105ee8149cd1dc7041c5650a8edd8882b1fe9234bd6047a844ff2521eeb9fbb63c0729512ab14b24a5821739a086fd68749637621a8ca818424051239f487e7b930c4bce58a5414648ab0fe689577a30d969f25a3642c2c9ff7fbd532fa6dce1f6bedf9e4e6c9ed03c1a393800d982728cf89c1a5d20d3379c698c99edd028112147f58148b9cd8e2bf703a1a7f7c26e4b6833129b8596d4f4d58f56b32443f6d0ab69b68d3dbecc14803bb611fb2fb7f8234f45916cb1f3dd594258e874b412f74fcb1a2734b72b46a101ab8ba3aeaf34f97926e3cc5519e46baf066709717049c55dab02e64cfd85c2654dbf16aa6a10602725c822c77ab8c3441e88584633b6930fb069c6c432bb188ff9fe553907b387d0c9ba7ee85a611a3d34a3ed95f50fba1564a120cc1be6b9647d4523cbca9b3007bf2428e6e2d7fcae956bfbd8969363bf28a2d13af2632e09470f5bf45944f044e9128b958cc389e20cdc5abee2725ab3c9043578b22e92b7069cd7de3117c50ac4423c6a8d77fb3997fa955dbb5027ce5c3d7b0efbf67a51849a34e27805f65badf43cd5ab004b77e904f6f0dedef4c1a2d84a9cbc511c6d30f97d2688641e31f50d1dff93388bd214a9ab226b3c238bbb1db17b6a7eabb9ce139d55197b707a181fa4e687c4860f1e07d74b5e436e08599068f04fdfc701cefc825ee9ddd12593586ef34d26e5f4009bd293f24dfc3398d45882fdb86eea60bca3a1cb9bb86d97e03e59b60f8187368a6cfe425b9793a242be34914b8a0f9475530ad967778af56b82b1237629f1bcfabb266e627cef31c10a89f42291032a72c824654f24b711bbcf1f652928f66bdce260a5589c8a618bdd3712e52e46b2f0d8bce0370dabdae2217e2868ab16f04fd8d725946dd813860040a89cc1b86b442432a63b5596af120f51fdf863443ea4bb65b09ed53a9cf0ac6e0eb042f37f201ad1087d098463fe3dfd1d9a22351f759ea2c3b9960cf5a04bf412a44b89118aadb22c5a139bbd66681c048a71a73a2b73f22fafaf1d2fbf07a24dc2ecb1b11a828c3b5f9693399a9c9117028764c8a5b8d7d10c5979b37a43240c952768c6d2c5c896e614b4922d46d23e62bbfe91176b8072113d5c3eed5ee84cefbb633083b64a2c8f1ee1ef48c859aa4a70a6e38efee4e0974bef323b8c4aa5ad2dc870681678b93c288802f79b66afb9b154ac3cdea7ea91b754ea10d70322d1fea58ca4b4c006ef7ff87d142ddb97744135e08485bae3ecf3807aec75c624ef3e016d48d215e4b780351b44312d5b95fd6a88daf4e6afcc298d93ca6f62e97c590cadae130a2a40b93a4e5e98cf679be18171ecba7073aa8c79eab896cb279261243078ace454da745f984e6dcdf82967aa059f6a4815a9b407b75036d61a498860c526b7f0bc7c848c7947a2e15ed552d12c3544ad5abe3a5f4976e02f61ebe997dfeea07626fb8fa21f43fcd7eb2d899a5d503e25106b8b6949f87ad519e9f9da7794116682fb72fe350b5c9445158a17fec89a1a8833d5eed32212accb1bf466b7cefd4b555b8f81476cbe1734ffcc457a08c393912d5b4b90fb9af897ab203a07b50d006a398eca639768b9747d32d6980ca809fe05bdf656ec858537f7ef836941e64a914ca0fdec52ae92a4fe0628aadc515052d59913f1d5caaa8fd80fca4d8185ca0b5a76b1e88beac1fc31fc2a0ac99a1562ea338e6cbf12337e29ed04c28b211923a3c3f7e229d4fe508b151faa5a04feb7840a0ada3ebbdbdcc3d50c8bd08b98b2bac1a6403576c565326a6c1910539cd9432a59f97c708c8d11ba5dff03c4fd487bc1e7deb8b5d2eeee3c82842190475f1ef516ab1fc5b9301aa151ee9b7ae50b120be755ce06ec0549a127e4cd61c4982d2400c57c0e37d239af37ebcef222db623d6a3d02da799b1f29971c93e0406fe850dbca533cce76fc2e2b569f916326b766692ef87197448bb6916de7675d030fd58264615f8741de892393cd58e96c11427662256dc638296f6160ce6170aebe7f2adcfad7c54b8e81149cb7b6b11c12035db75a6e61fa804ee4bb0372ed10f7fbcdd0db2d5f137ee4c9746428394c31914746756bd6abda4160426c956f0aef1f2282fa833c1eafc10e8c8fb9e23fcade9e058cad9edd17397284888e11d45da3ca7f47be7907a7db1a5838c618b84dabb40cbb9416a5204e9e0a0b993239af309da0696fd3432a805c786945f27c5292ad08a71c981c27de9c7bbc33adb7e8fc58bda040babe3f6720f965b23ed7c8bebf103e59841f6c5b545d8cca2baacc256f408eea7cb3326fb9c0f4c78f21fab323060f454298b778669451aceecc4a40b83271bac49129792efd906385868a4fda8afca56d057463406e8849e4d29e58f12d0f590ed9d91702b1d851b4d6af258330743f533a60280cb91db05396e5d0f1f7d56c2184913c183317fdc4edab061368d651bf410c12a346346de18fb5130a91569f906ad2c644fa2dea583f3aae7ec3d8e974834faf371927470d4ed18ec28ee82d5fc1f84645afe593eb5c26f52e308daec34eda46b7e6918da13429e20d07886e885fd74062849050ecf9a6669377470ac9f890f38b1b4c55c83ab9d7b549ee6df88e44fdf7e29f53bb68e7162a7d606ef0cb0151569908537c286e0efa107210ca4592d4ae6018ffe6a09b499e9202813cc04851494f04ee7ede11a8804eafdb7c9d0fdec4282fa24e52894cd0b5108b1f22c2dfbd7cf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未完成</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>解</title>
    <url>/2025/06/22/%E6%9C%AA%E5%AE%8C%E6%88%90-%E8%A7%A3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="42153575d422283d0619cdfd920c9b5272b1b75dba792936f3e811bfb4d514b4">adba944712a73720e1f31df1fce53744b710ed1b1a3097797c0b2a294e64dd7aac8f69693102ccd60b1ee4a04782ebbdfe9e00d54d1bc0f7c984568b717ba2edf03281cf4531b4b169df2cee51b13628b72e7509081db3fc68d4053c7cd017717a4f13becc1c16d8459cb21ff83d9058055e819ba284becb6e512fa03da1a990a1e30cf69a5811ecc0ad663fc7e5e7eff4b3c198d82aabcc76241f560898871531aec02d59e5d31a349855424b5c1b8ae7e285bec74003c9db88a8add9bcde4af2dd85fe4457590641815754dadd6da62c3f73074fe40cd1d6bb592d87faaf4f922ff1424bc9f38806b7c34ad6524a5bca1780e6480d5caa4c19f569dd4616f5cc46a55f2b673bae43d9a4c9161a1cfdf77dae9f89b1a9ad716c0d7bd78f8b2fe5005e0cfb4ff3e2b077956f1431244d0f589d8a5b59d789d4ee2189f90cd4aaf660719cdf9a1dc494c14fe756fd3926f5ec1ca80d1df2308019e85f8d70d0ad8eabe71e9366c1b3377ea84cde9aefa17c0d6cdeb6372eb29b19858b26c4d81512011bfe1dca58306c54e3e4b31b739af0b776607e5b8dfc1a33730c88c27740f8a24bba81c3c1c0d53b1c153dc40ea1861080e40ea42e05a47b2155e46c0b1c9a7244a31ce77be1b68a3e3cd1bad6624f2a7050f1bee4aa10e76b6f54960d7709406aa5b2872c3902fe2a541a401c20794aef88e27ab06fa0768a7f8c06a47e7f04b67431e72727ad71b2344797390bddb56f2e9328f860cb09feef4174db7c1860dc6e442921fa17cbc1eaaea8663806d9f9e27a40186f9d2ae096f437d42314c4581fc565890fc336dbdf6bcfbb99faedf51148bc8f2d027e274d0e32e37941563210ae1c54477842a6588e5c52aec32ba4b53597b96973c1a1e23a980d5d10cc615a5e085f5b1863a553201f822fb7ba22620ce62cb22be3f2bef47964f199303dc0949835982dfe72902489550a6c9aa1604448da4f18a4ba5460db8c01cea4d9307dc303cf9d8624bdedc5064fb090c8a290725b67e810c5381d33645a97235b2e0d74361fcf3a75fb27935e84b26abbfdc9b0535216a34d739da6581b91c12d17c2405cbb4a7288c14bc1a035c59963bdb34b93ecb069c3eab3c1b304c9083873f8e581bec3effcb4839d83e6b8a5ca2fcae71aa808c4cccf7c4da9a241cbd1fc7d957e3a442dc5b8e7e98a856154e20c3831f72bee25ae3171b37b39799533dbf6c92a02b52f174827d7dd748faf4636598875deddbc88305cb67fcdef61b18b64226076b9845e98e0ff0a374d2643569f3ee1addd0e931e732adabbe6d0350ec4bd468d87b103001ddc3eecb0087e899b6bff4fa0c4001a672aba95c761c514b4b132536666b78110b125f7854cb15cdbd5e286548a10788d80ffbdd8687c8cb3c24c7e2d3b39c929399bd2f1519deccf9491917a381049ad3ff1f50a79c13fab8b78d0c9690e67eeda7897c3d748e99edaa991bce70959fefaed127a013cee583d97cc7c2712421624a740ca71de0f7db6bedbd140ffbb3ef8f3c412cc7bd825766383cffe4c8a66cf90881c96bda1c2e585244cde214abb4c17e3ba4ecdf857de616002f7600b5af247a9c9d7eca5fe44f066ab04d99bbe0c0be9d2797d9eeccccfedfe9dd9bd77fd76f7b90b79b203dc2736f6ae468c26cec20ce6d80c98352a72496286b89153dee3c1fc6f2609060cf0f0a62bff4e357e315ecb5675cae419c3f1ab07f1feacac4325d05c29df5ff39650d0f2b7b67f4cb407e4befc1629dc5ee7b61a55e83ca670c37fc92bf00ada07e04ed7cc65ade91037d20dcf30a8c84a8e697d6815a82df56b81de02b1d32409667eb0cd21deb348ee625be182c0959785cdaa2d4fceeabe26</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>未完成</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>一个个慢慢暗淡</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E4%B8%80%E4%B8%AA%E4%B8%AA%E6%85%A2%E6%85%A2%E6%9A%97%E6%B7%A1/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>之前学长跟我提过可能要回ytez宣讲这个事，在那之后我有的时候走在路上就会想：我该讲点什么呢？</p>
<p>坦白而言，我到现在也没有原谅ytez。但我确实对我的学弟们怀有一种莫名其妙的感情。这种感情大概会被几年前的我写长文狠批一顿，原因是这是“毫无原因的集体归属感”。</p>
<p>我记得可能大概一个月前空间里莫名其妙掀起了一阵怀念高中母校的热潮，说真的，我一开始看到这些的第一反应是不理解。我不明白高三有什么可怀念的，ytez有什么值得怀念的。但后来我又渐渐觉得委屈了：我不明白为什么别人可以拥有一个值得怀念的高三。</p>
<p>如果要界定我高三的开始，我觉得毫无疑问是那天晚上班主任找我谈话的时候。我大概高二的时候在博客里写过这么一句话：“当以后迷茫的时候，你要想想：你已经受了这么多苦难，你应当为了那些还在苦难中的人做点什么。”这话直到现在相当的程度上指导我的生活，以至于我大学的一大乐趣就是给过路的游客指路（笑）。但当那天晚上班主任突然嘲讽我是“精致的利己主义者”的时候，怎么说呢，很难形容我当时内心的感受。我不明白为什么反对学校的那些屁用没有的形式主义规章制度就是利己了，我也不明白为什么我会被贴上这样的标签，我更不明白为什么我当时情绪立刻就爆发了，仿佛恼羞成怒了一样。然后我听着他说他从来没见过我这样的学生能考上清北的。我对他说那我就去成为第一个。</p>
<p>我后来果真成了第一个，只是我已经辨认不清那是不是当时的我了。</p>
<p>至于后来搞什么小组连坐制度强迫我就范，至于后来我期末考崩了自己低下了头。我该因此而责备谁呢？当我后来上了大学，即使在宿舍里舍友大声说话都不敢制止（坦白而言，后来经过交流发现舍友只是没意识到我有的时候睡得很早，因为我一夜又一夜地失眠，经常半夜一点下床喝口水，然后出去走一圈上个厕所冷静冷静）的时候，我又该因此说些什么呢？</p>
<p>当我高考完去山外，听到老刘给我作讲座介绍的时候说我“是省队里性格最温和的一个”的时候，我只感觉恍如隔世。</p>
<p>我毫不避讳我对高三、对学校、对班级的厌恶，我到现在都忘不了我们班班长站在讲台上嘲笑有些人思想反动的时候，到现在都忘不了当我反抗学校早读提前的时候，学校一个电话打给了我妈妈，然后我妈妈坐在餐桌上劝我，她说高三只有一年，熬过去就过去了。她说她看班级群里的录像，每次早读宣誓我都低着头不张嘴，她说她从来没看见我举起右拳，但别人都是在举起来的。</p>
<p>我后来写了一篇又一篇的小说，我将自己的人格女性化，我叫自己“莉娃丽尔小姐”，我让“莉娃丽尔小姐”在小说中遭遇背叛、强奸，我让她的希望一次又一次地破灭，我让她被刽子手砍断双脚，我让她一次又一次迎来自己悲惨的结尾。可为什么我还是觉得自己不足够写出自己在高三所经历的一切呢？为什么我写到这里的时候连我经历了什么都有点想不起了，只是觉得胸口好难受呢。</p>
<p>为什么别人都有值得怀念的高三呢。</p>
<p>我的高三当然也有一段时间是幸福的。临近高考的时候，有一天晚上我放学之后走到我曾经待过的高一楼下，我就坐在楼梯上看着前面那条小路，这条路承载了太多太多的回忆了，那是我最意气风发的年纪啊。我突然想起一首歌，那是周存的《你有想去的地方吗》。</p>
<blockquote>
<p>所以我对着竹林，我很想大声喊出来，但我最后还是很小声地念了一句：“你有想去的地方吗？”</p>
<p>但其实根本没什么人，这个时候早就放学了，周围人都走光了。</p>
<p>所以我又站起来，鼓足勇气提高声音喊：“你有想去的地方吗！”</p>
<p>还是没人回应。这时候轮到我不知所措了。</p>
<p>我放下书包，看着远方还亮着的灯，我拼了命大声喊：</p>
<p>“你有想去的地方吗！</p>
<p>你有想见的人吗！”</p>
</blockquote>
<p>我是幸运的，我高考后真的去了我一直想去的地方。</p>
<p>可我再也没见过我想见的人。</p>
<hr>
<p>所以当我见到学弟们的时候，我该对他们说点什么呢？</p>
<p>我一直都觉得给别人提建议是一个相当傲慢的事情，但我其实真的很想说：</p>
<p>我希望大家可以保持自己，我希望大家走过校园里那潭绿色的死水的时候，看完上面漂着的油膜后，抬头看看太阳。</p>
<p>我希望大家都能拥有一个值得回忆的高三。</p>
<blockquote>
<p>我也为你祝福</p>
<p>愿你有一个灿烂的前程</p>
<p>愿你有情人终成眷属</p>
<p>愿你在尘世获得幸福</p>
<p>——海子《面朝大海，春暖花开》</p>
</blockquote>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<span id="more"></span>
<h3><span id="实数">实数</span></h3><p>首先我们拿到了有理数,然后我们按照以下步骤定义无理数:</p>
<p>首先我们注意到有理数是不连续的.问题在于我们要将其中不连续的部分给补上.首先我们应当去发现一下如何去发现有理数中的一个断点:</p>
<p>设$S $是一个全序非空集合,我们找到它的两个非空子集$A , B $,若满足:</p>
<ol>
<li><p>$A \cap B = \emptyset , A \cup B = S $.</p>
</li>
<li><p>$\forall a \in A , b \in B , a &lt; b $.</p>
</li>
<li><p>$A $中无最大元素.</p>
</li>
</ol>
<p>则称这是$S $的一个<strong>分划</strong>,记作$( A | B ) $.接下来我们先考虑$S = \mathbb { Q  } $的情况.</p>
<p>我们注意到一些事,比如说注意到$B $中有可能没有最小元素.举个例子的话,我们令$S = \mathbb { Q  } , A = \{ x | x \leq 0 \lor ( x &gt; 0 \land x ^2 &lt; 2 ) \} $,显然$A $中无最大元素,此时取$B = S \setminus A $,则显然$B $中无最小元素(反证法),假设存在最小元素则可以调整到更小的元素,因为容易证明不存在一个有理数的平方为$2 $.</p>
<p>通过上面的铺垫我们知道,有理数并非连续的,因此如果$B $中有最小元素,则称这是一个<strong>有理分划</strong>;如果$B $中无最小元素,则称这是一个<strong>无理分划</strong>.容易发现有理分划与有理数一一对应.我们将无理分划也去对应到一些数上,这就产生了无理数的定义.只需比较$A $集合的大小包含关系就可以比较两个实数的大小.</p>
<p>那我们还需要做的一件事是去证明无理数也有四则运算法则.不妨直接拿分划去验证四则运算法则:</p>
<ol>
<li><p>加法:对于$( A _c | B _c ) + ( A _d | B _d ) $,我们取$A _{ c + d  } = \{ x + y | x \in A _c , y \in A _d \} $即可.</p>
</li>
<li><p>减法:只需定义加法逆元.如果是无理分划的话,直接把$A , B $中的元素全部取反再交换即可;如果是有理分划的话,需要注意取反再交换后$A $中出现了最大元素,只需要在这里把那个元素给提出来就行.</p>
</li>
<li><p>乘法:两个正数相乘可以直接模仿加法,如果有负数的话就把负号提出来再把绝对值作乘法即可.</p>
</li>
<li><p>除法:只需定义乘法逆元,这个有点麻烦需要判断$A $和$B $哪个集合是同号的,但总之这个是平凡的.</p>
</li>
</ol>
<h4><span id="戴德金分割定理">戴德金分割定理</span></h4><p>对$\mathbb { R  } $的任一分划$( A | B ) $,$B $中必定有最小元素.</p>
<p>这个怎么证明呢?对于分划$( A | B ) $,我们直接取$A ‘ = A \cap \mathbb { Q  } , B ‘ = B \cap \mathbb { Q  } $,不难发现$( A ‘ | B ‘ ) $一定是$\mathbb { Q  } $的一个分划,也就是说$( A ‘ | B ‘ ) $对应了一个实数$x $.</p>
<p>既然如此就可以考虑$x $应该属于哪个集合.我们注意到:如果$x \in A $,那么$x $必定是$A $中的最大元素;如果$x \in B $,那么$x $必定是$B $中的最小元素.</p>
<p>两部分是类似的,只考虑前一部分.考虑反证,如果$\exists y &gt; x , y \in A , x \in A $,那么$A ‘ \subsetneq A _y $,那么$A _y $就一定不是$A $的子集.换言之,$\exists w \in A _y $,$\forall z \in A , w &gt; z $.但我们有$y &gt; w $,这必然意味着$y \notin A $,与假设不符.</p>
<h4><span id="确界存在定理">确界存在定理</span></h4><p>若$M $有上(下)界,则必然有上(下)确界.</p>
<p>设$M $有上界$c $,由于它是一个实数,它应该可以写作$( A _c | B _c ) $的形式.$\forall \alpha \in M , A _\alpha \subset A _c $.</p>
<p>于是我们取$A = \bigcup _{ \alpha \in M  } A _\alpha , B = \mathbb { Q  } \setminus A $,我们来说明$( A | B ) $是一个分划.</p>
<p>首先由于有上界,显然$A , B \ne \emptyset , A \cap B = \emptyset , A \cup B = \mathbb { Q  } $.</p>
<p>如果 $\exists b \in B , a \in A , b &lt; a $,这是不可能的,因为如果$b &lt; a $,那么$b \in A , b \notin B $.</p>
<p>因为所有的$A _\alpha $中都没有最大元素,反证即可说明$A $中无最大元素.</p>
<p>那么$( A | B ) $就是$M $的上确界.</p>
<h6><span id="example1">Example1</span></h6><p>证明对于单增函数$f : [ 0 , 1 ] \rightarrow [ 0 , 1 ] $,$f ( [ 0 , 1 ] ) \subseteq ( 0 , 1 ) $,则$f $与$y = x $一定有交点.</p>
<p>取$A = \{ x | f ( x ) &lt; x \} $,则$1 \in A , A \subseteq [ 0 , 1 ] $.取$a = \inf A $.</p>
<p>此时我们断言$f ( a ) = a $,否则:</p>
<p>如果$f ( a ) &lt; a $,取$\epsilon = a - f ( a ) $,注意到$f ( a - \frac { \epsilon  } { 2  } ) &lt; f ( a ) &lt; a - \frac { \epsilon  } { 2  } $,因此$( a - \frac { \epsilon  } { 2  } ) \in A $,与$a $是下确界矛盾.</p>
<p>如果$f ( a ) &gt; a $,取$\epsilon = f ( a ) - a $.考虑由于$a $是下确界,因此$\exists b \in A , b \in ( a , a + \frac { \epsilon  } { 2  } ) $.那么$b &lt; a + \frac { \epsilon  } { 2  } &lt; f ( a ) &lt; f ( b ) $,这与$b \in A $矛盾.</p>
<h4><span id="阿基米德性质">阿基米德性质</span></h4><p>以下命题等价,任取其一均可作为阿基米德性质:</p>
<ol>
<li><p>$\forall y \in \mathbb { R  } $,$\exists n \in \mathbb { N  } , n &gt; y $.</p>
</li>
<li><p>$\forall x \in \mathbb { R  } _+ , \exists n \in \mathbb { N  } $,$nx &gt; 1 $.</p>
</li>
<li><p>$\{ \frac { 1  } { n  } \} $有聚点.</p>
</li>
<li><p>$\lim _{ n \rightarrow \infty  } \frac { 1  } { n  } $存在.</p>
</li>
<li><p>$\lim _{ n \rightarrow \infty  } \frac { 1  } { n  } = 0 $.</p>
</li>
<li><p>$\lim _{ n \rightarrow \infty  } \frac { 1  } { 2 ^n  } = 0 $.</p>
</li>
</ol>
<p>(1)$\Rightarrow $(2)$\Rightarrow $(3)$\Rightarrow $(4)$\Rightarrow ( 5 ) $是显然的.又考虑$\{ \frac { 1  } { 2 ^n  } \} $是$\{ \frac { 1  } { n  } \} $的子列,所以$( 5 ) \Rightarrow ( 6 ) $.而取一个$\frac { 1  } { 2 ^k  } &lt; \frac { 1  } { | y |  } $即可(6)$\Rightarrow $(1).</p>
<p>阿基米德性质可以由确界存在定理推来,简单来说考虑$x \in \mathbb { R  } _+ , A = \{ nx | nx &lt; 1 \} $.反证,如果$A $是无限集合,那么根据确界存在定理一定存在最小上确界$\alpha \leq 1 $有$\forall n , nx &lt; \alpha , ( n + 1 ) x &lt; \alpha , nx &lt; \alpha - x $,这就说明$\alpha - x $是一个更小的上界,这就矛盾了.</p>
<h3><span id="实数集上的一元函数">实数集上的一元函数</span></h3><h4><span id="性质">性质</span></h4><h5><span id="奇偶性">奇偶性</span></h5><p>首先需要定义域关于原点对称.</p>
<p>然后注意到取$f ( x ) = \frac { f ( x ) + f ( - x )  } { 2  } + \frac { f ( x ) - f ( - x )  } { 2  } $,可将任意定义域关于原点对称的函数写作奇偶函数之和.</p>
<p>事实上,对于一个可以求任意次导数的偶函数$f $,是否总存在一个可以求任意次导数的函数$g $使得$f ( x ) = g ( x ^2 ) $.</p>
<p>这个问题的难点肯定在于$0 $附近对吧.</p>
<p>这个证明要用到泰勒展开.</p>
<script type="math/tex; mode=display">
f ( \sqrt { x  } ) = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( 0 )  } { k !  } x ^\frac { k  } { 2  } + \frac { f ^{ ( n + 1 )  } ( \xi _n )  } { ( n + 1 ) !  } x ^\frac { n + 1  } { 2  }</script><p>两边求导,应该有:</p>
<script type="math/tex; mode=display">
( f ( \sqrt { x  } ) ) ^{ ( t )  } = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( 0 ) \prod \limits _{ i = 0  } ^{ t - 1  } ( \frac { k  } { 2  } - i )  } { k !  } x ^{ \frac { k  } { 2  } - t  } + \frac { f ^{ ( n + 1 )  } ( \xi _n ) \prod \limits _{ i = 0  } ^{ t - 1  } ( \frac { n + 1  } { 2  } - i )  } { ( n + 1 ) !  } x ^{ \frac { n + 1  } { 2  } - t  }</script><p>我们知道$f $任意阶导数存在,所以在闭区间$[ - 1 , 1 ] $上任意阶导数有界.这就意味着,对于固定的$t $.只要取足够大的$n = 2 t + 2 $满足$\frac { n + 1  } { 2  } - t &gt; 1 $,就可以让余项趋于$0 $.</p>
<p>现在来数学归纳,用多项式的特殊情况,假设$g ^{ ( t )  } ( 0 ) = \frac { t !  } { ( 2 t ) !  } f ^{ ( 2 t )  } ( 0 ) $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ^{ ( t + 1 )  } ( 0 ) = \frac { ( f ( \sqrt { x  } ) ) ^{ ( t )  } - \frac { t !  } { ( 2 t ) !  } f ^{ ( 2 t )  } ( 0 )  } { x  } \\
= \cfrac { \sum _{ k = 0  } ^{ 2 t + 2  } \frac { f ^{ ( k )  } ( 0 ) \prod \limits _{ i = 0  } ^{ t - 1  } ( \frac { k  } { 2  } - i )  } { k !  } x ^{ \frac { k  } { 2  } - t  } - \frac { t !  } { ( 2 t ) !  } f ^{ ( 2 t )  } ( 0 )  } { x  } \\
= \cfrac { \sum _{ k = 0  } ^{ 2 t + 2  } \frac { f ^{ ( k )  } ( 0 ) \prod \limits _{ i = 0  } ^{ t - 1  } ( \frac { k  } { 2  } - i )  } { k !  } x ^{ \frac { k  } { 2  }  } - \frac { t !  } { ( 2 t ) !  } f ^{ ( 2 t )  } ( 0 ) x ^t  } { x ^{ 1 + t  }  } \\

\end{aligned}</script><p>一片混乱,考虑一下下面这项:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { f ^{ ( k )  } ( 0 ) \prod \limits _{ i = 0  } ^{ t - 1  } ( \frac { k  } { 2  } - i )  } { k !  } x ^{ \frac { k  } { 2  }  } \\
& = \frac { f ^{ ( k )  } ( 0 ) \prod \limits _{ i = 0  } ^{ t - 1  } ( k - 2 i )  } { k ! 2 ^t  } x ^{ \frac { k  } { 2  }  } \\

\end{aligned}</script><p>这个时候我们注意到,当$k $是奇数的时候应该有$f ^{ ( k )  } ( 0 ) = 0 $,当$k $是偶数并且$k \leq t - 1 $的时候应该有$\prod \limits _{ i = 0  } ^{ t - 1  } ( k - 2 i ) = 0 $,这意味着这个求和最后只会剩下$\frac { f ^{ ( 2 t )  } ( 0 ) t !  } { ( 2 t ) !  } x ^{ t  } + \frac { f ^{ 2 t + 2  } ( 0 ) ( t + 1 ) !  } { ( 2 t + 2 ) !  } x ^{ t + 1  } $,然而前半部分和后面的刚好消掉了,这就数学归纳成立了.</p>
<h5><span id="有界性">有界性</span></h5><h5><span id="单调性">单调性</span></h5><h5><span id="周期性">周期性</span></h5><p>周期函数不一定有最小正周期,比如狄利克雷函数.</p>
<p>还有个思考题:</p>
<p>如果$f , g $是定义域为$R $的最小正周期分别为$T _1 , T _2 $的周期函数,求问:</p>
<ol>
<li><p>若$\frac { T _1  } { T _2  } \in \mathbb { Q  } $,则$f + g $是周期函数.</p>
</li>
<li><p>若$\frac { T _1  } { T _2  } \in \mathbb { R  } \setminus \mathbb { Q  } $,结论如何.</p>
</li>
<li><p>若$f , g $均连续,结论如何.</p>
</li>
</ol>
<p>(1)显然,(3)必定不是周期函数,原因是考虑反证:</p>
<p>如果是的话,必定有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x + T ) + g ( x + T ) & = f ( x ) + g ( x ) \\
f ( x + T ) - f ( x ) & = g ( x ) - g ( x + T ) 
\end{aligned}</script><p>令$h ( x ) = f ( x + T ) - f ( x ) = g ( x ) - g ( x + T ) $,则$h ( x ) $以$T _1 , T _2 $为周期,那么其以$pT _1 + qT _2 $为周期,可逼近这个无理数使得其周期趋近于$0 $,用$h $的连续性,于是$h ( x ) $为常函数,不符题意.</p>
<p>(2)怎么办呢?有没有一种构造方式使得它是周期函数呢?</p>
<p>构造$d _{ p , q  } ( x ) = \begin{cases}1 &amp; \exists m , n \in \mathbb { Z  } , mp + nq = x \ 0 &amp; \forall m , n \in \mathbb { Z  } , mp + nq \ne x \end{cases} $.</p>
<p>取$f ( x ) = d _{ 1 , \sqrt { 2  }  } ( x ) - d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x ) , g ( x ) = d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x ) - d _{ 1 , \sqrt { 3  }  } $,容易见到$f + g $的周期为$1 $,下面证明$f $的最小正周期是$\sqrt { 2  } $,而$g $的最小正周期是$\sqrt { 3  } $.</p>
<p>二者相似,只考虑证明前者,如若存在一个$T $,使得$f ( x ) = f ( x + T ) $,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
d _{ 1 , \sqrt { 2  }  } ( x ) - d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x ) & = d _{ 1 , \sqrt { 2  }  } ( x + T ) - d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x + T ) \\
d _{ 1 , \sqrt { 2  }  } ( x ) - d _{ 1 , \sqrt { 2  }  } ( x + T ) & = d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x ) - d _{ \sqrt { 2  } , \sqrt { 3  }  } ( x + T ) 
\end{aligned}</script><p>取$x = \sqrt { 3  } $得到:</p>
<script type="math/tex; mode=display">
d _{ \sqrt { 2  } , \sqrt { 3  }  } ( \sqrt { 3  } + T ) - d _{ 1 , \sqrt { 2  }  } ( \sqrt { 3  } + T ) = 1</script><p>这就意味着:</p>
<script type="math/tex; mode=display">
\begin{cases}
d _{ \sqrt { 2  } , \sqrt { 3  }  } ( \sqrt { 3  } + T ) = 1 \\
d _{ 1 , \sqrt { 2  }  } ( \sqrt { 3  } + T ) = 0 \\

\end{cases}</script><p>从而$T = n \sqrt { 2  } + m \sqrt { 3  } $,其中$m \ne - 1 $.再取$x = 0 $得到:</p>
<script type="math/tex; mode=display">
d _{ 1 , \sqrt { 2  }  } ( T ) = d _{ \sqrt { 2  } , \sqrt { 3  }  } ( T ) = 1</script><p>这就必然意味着$T = n \sqrt { 2  } $,从而$f $的最小正周期恰好就是$\sqrt { 2  } $.</p>
<h4><span id="基本初等函数">基本初等函数</span></h4><ol>
<li><p>常值函数</p>
</li>
<li><p>指数函数</p>
</li>
<li><p>对数函数</p>
</li>
<li><p>幂函数</p>
</li>
<li><p>三角函数</p>
</li>
<li><p>反三角函数</p>
</li>
</ol>
<p>其中有一些函数的定义其实有一些缺陷,我们将在讨论完连续性后给出.</p>
<h4><span id="初等函数">初等函数</span></h4><p>由基本初等函数经过有限次四则运算和复合得到的函数.</p>
<p>举个逆天例子:</p>
<script type="math/tex; mode=display">
f ( x ) = \begin{cases}
\sqrt { - x  } & x < 0 \\
0 & x \in [ 0 , 1 ] \\
\ln x & x > 1 
\end{cases}</script><p>注意到$f ( x ) = \sqrt { \frac { \sqrt { x ^2  } - x  } { 2  }  } + \ln \frac { x + \sqrt { ( x - 1 ) ^2  } + 1  } { 2  } $.</p>
<h4><span id="代数函数">代数函数</span></h4><p>存在多项式$F ( x , y ) $满足$F ( x , f ( x ) ) \equiv 0 $的函数$f ( x ) $称为代数函数.</p>
<h3><span id="数列极限">数列极限</span></h3><h4><span id="定义">定义</span></h4><p>设$\{ a _n \} $是一个给定的序列,若$\exists l $,$\forall \epsilon &gt; 0 $,$\exists N \in \mathbb { N  } $,$\forall n &gt; N , | a _n - l | &lt; \epsilon $.我们称$l $是这个序列的<strong>极限</strong>,记作$\lim _{ n \rightarrow \infty  } a _n = l \ $.</p>
<h4><span id="性质">性质</span></h4><ol>
<li><p>若数列存在极限,则极限唯一.</p>
</li>
<li><p>有极限的数列有界.</p>
</li>
<li><p>数列的极限可以四则运算.</p>
</li>
<li><p>设序列$\{ a _n \} , \{ b _n \} $有极限并且分别为$l _a , l _b $,若$\exists N \in \mathbb { N  } $,$\forall n &gt; N , a _n \geq b _n $,则$l _a \geq l _b $.</p>
</li>
<li><p>设序列$\{ a _n \} , \{ b _n \} $有极限并且分别为$l _a , l _b $,如果$l _a &gt; l _b $,则$\exists N \in \mathbb { N  } $,$\forall n &gt; N , a _n &gt; b _n $.</p>
</li>
<li><p>夹逼定理:设$\{ a _n \} , \{ b _n \} , \{ c _n \} $是三个序列,且$\exists N _0 , \forall n &gt; n _0 , a _n \leq b _n \leq c _n $.那么如果$\lim _{ n \rightarrow \infty  } a _n = \lim _{ n \rightarrow \infty  } c _n = l \ $,则$\lim _{ n \rightarrow \infty  } b _n = l \ $.</p>
</li>
<li><p>对于原序列,若它有极限$l $,取出它的无穷项子序列,那这个子序列的极限必然也是$l $.(如果一个序列能取出两个无穷项子序列使得极限不相同,那么原序列必然无极限)</p>
</li>
</ol>
<p>大部分的证明都很显然,只需要套用极限定义即可,这里举几个证明为例.</p>
<p>(3):</p>
<p>设序列$\{ a _n \} , \{ b _n \} $有极限并且分别为$l _a , l _b $,则要证$\lim _{ n \rightarrow \infty  } ( a _n \pm b _n ) = l _a \pm l _b \ $,$\lim _{ n \rightarrow \infty  } ( a _n b _n ) = l _a l _b \ $,若$l _b \ne 0 $,$\lim _{ n \rightarrow \infty  } ( \frac { a _n  } { b _n  } ) = \frac { l _a  } { l _b  } \ $.</p>
<p>先证明加减法,取$\frac { 1  } { 2  } \epsilon $然后合并起来就行.</p>
<p>乘法也类似,首先有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
l _a - \epsilon _1 & < a _n & < l _a + \epsilon _1 \\
l _b - \epsilon _2 & < b _n & < l _b + \epsilon _2 
\end{aligned}</script><p>于是自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| a _n b _n - l _a l _b | & = | ( a _n - l _a ) b _n + l _a ( b _n - l _b ) | \\
& \leq | b _n | | a _n - l _a | + | l _a | | b _n - l _b | \\
& < | b _n | \epsilon _1 + | l _a | \epsilon _2 \\
& < | l _b \pm \epsilon _2 | \epsilon _1 + | l _a | \epsilon _2 
\end{aligned}</script><p>不妨令$\epsilon _1 = \epsilon _2 $,尝试构造一组解使得$\forall \epsilon &gt; 0 , \exists \epsilon _1 &gt; 0 $,$| l _b \pm \epsilon _1 | \epsilon _1 + | l _a | \epsilon _1 &lt; \epsilon $.限制一下$\epsilon &lt; 1 , \epsilon _1 &lt; 1 $,取$\epsilon _1 = \frac { \epsilon  } { 1 + | l _b | + | l _a |  } $即可.</p>
<p>接下来证明除法,实际上只需要证明若$l _b \ne 0 $,$\lim _{ n \rightarrow \infty  } ( \frac { 1  } { b _n  } ) = \frac { 1  } { l _b  } \ $.</p>
<p>考虑:$l _b \lim _{ n \rightarrow \infty  } b _n = l _b ^2 &gt; 0 \ $,这意味着当$\exists N _0 , \forall n &gt; N _0 , l _b b _n &gt; 0 \ $,或者更强一点,$\exists N _0 , \forall n &gt; N _0 , l _b b _n &gt; \frac { 1  } { 2  } l _b ^2 \ $.</p>
<p>不妨设$\epsilon ‘ &gt; 0 , \exists N _1 , \forall n &gt; N _1 , | l _b - b _n | &lt; \epsilon ‘ $</p>
<p>取$n &gt; \max ( N _0 , N _1 ) $此时自然有:</p>
<script type="math/tex; mode=display">
| \frac { 1  } { b _n  } - \frac { 1  } { l _b  } | = \frac { | l _b - b _n |  } { | b _n l _b |  } \leq \frac { 2  } { l _b ^2  } \epsilon '</script><p>取$\epsilon ‘ = \frac { l _b ^2  } { 2  } \epsilon $即可得证.</p>
<p>(4):</p>
<p>反证,设$l _a &lt; l _b $,那么取$\epsilon = \frac { l _b - l _a  } { 2  } $,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| a _N - l _a | & < \epsilon \\
a _N & < \frac { l _a + l _b  } { 2  } & < b _N 
\end{aligned}</script><p>这是不可能的.</p>
<h4><span id="单调收敛准则">单调收敛准则</span></h4><p>单调有界无穷数列有极限.</p>
<p>不妨设$\{ a _n \} $是一个单调有界无穷数列(不妨假设其单增,不然可以取反变成单增),且$\forall n , a _n \leq l _a $.</p>
<p>考虑集合$A = \{ x _n | n \in \mathbb { N  } _+ \} $,根据确界存在定理,其一定有上确界.令$a $是它的上确界,我们来证明$a $一定是数列的极限.</p>
<p>由于$a $是上确界,这意味着$\forall \epsilon &gt; 0 , a - \epsilon $不是上确界,所以$\forall \epsilon &gt; 0 $,$\exists N $,$\forall n &gt; N , a - \epsilon &lt; a _n \leq a &lt; a + \epsilon $,这就是极限的定义.</p>
<h4><span id="自然对数的底数">自然对数的底数</span></h4><p>定义$e = \lim _{ n \rightarrow \infty  } ( 1 + \frac { 1  } { n  } ) ^n \ $.如何证明它存在极限呢?考虑单调有界无穷序列必定存在极限,定义$x _n = ( 1 + \frac { 1  } { n  } ) ^n $,于是先证明它有界:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( 1 + \frac { 1  } { n  } ) ^n & = \sum _{ k = 0  } ^n \frac { n ^{ \underline { k  }  }  } { k !  } \frac { 1  } { n ^k  } \\
& < \sum _{ k = 0  } ^n \frac { 1  } { k !  } \\
& < 2 + \sum _{ k = 2  } ^n \frac { 1  } { k ( k - 1 )  } \\
& = 2 + \sum _{ k = 2  } ^n ( \frac { 1  } { k - 1  } - \frac { 1  } { k  } ) & < 3 
\end{aligned}</script><p>接下来证明单调,只需证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sqrt [n + 1 ] { ( 1 + \frac { 1  } { n  } ) ^n  } & < \frac { n + 2  } { n + 1  } \\
\sqrt [n + 1 ] { 1 ( 1 + \frac { 1  } { n  } ) ^n  } & < \frac { 1 + n ( 1 + \frac { 1  } { n  } )  } { n + 1  } 
\end{aligned}</script><p>由均值不等式显然.</p>
<p>如果我们考虑另一个极限$y _n = ( 1 + \frac { 1  } { n  } ) ^{ n + 1  } $,注意到:</p>
<script type="math/tex; mode=display">
\frac { 1  } { y _n  } = ( \frac { n  } { n + 1  } ) ^{ n + 1  } \times 1 < ( \frac { n + 1  } { n + 2  } ) ^{ n + 2  } = \frac { 1  } { y _{ n + 1  }  }</script><p>发现$y _n $单调递减且$y _n &gt; x _n $,并且$\lim _{ n \rightarrow \infty  } y _n - x _n = 0 $,这就意味着二者必然同时趋向于一个常数的两侧,定义为$e = 2 . 7182818284 \cdots $.</p>
<p>这里还可以推出一些结论.因为我们知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x _n & < e & < y _n \\
n \ln ( 1 + \frac { 1  } { n  } ) & < 1 & < ( n + 1 ) \ln ( 1 + \frac { 1  } { n  } ) \\
\frac { 1  } { n + 1  } & < \ln ( n + 1 ) - \ln ( n ) & < \frac { 1  } { n  } \\
H _{ n + 1  } - 1 & < \ln ( n + 1 ) & < H _n 
\end{aligned}</script><p>用这个可以注意到定义$z _n = H _n - \ln n $,这个东西肯定$\geq 0 $且$\leq 1 $,而且注意到$z _{ n + 1  } - z _n = \frac { 1  } { n + 1  } - \ln \frac { n + 1  } { n  } &lt; 0 $,所以单调有界,这个极限就是欧拉常数$\gamma = 0 . 57 \cdots $.</p>
<p>接下来证明$e $是无理数.</p>
<p>考虑$e = \lim _{ n \rightarrow \infty  } ( 1 + \frac { 1  } { n  } ) ^n $,取二项式定理,取$x _k = \sum _{ k = 0  } ^n \frac { n ^{ \underline { k  }  }  } { k ! n ^k  } \leq \sum _{ k = 0  } ^n \frac { 1  } { k !  } = U _n $.</p>
<p>而又注意到$x _n = \sum _{ k = 0  } ^n \frac { n ^{ \underline { k  }  }  } { k ! n ^k  } $,取定一个确定的上界$m \leq n $,则$x _n \geq \sum _{ k = 0  } ^m \frac { n ^{ \underline { k  }  }  } { k ! n ^k  } = y _n $.由于$m $有限,所以当$n \rightarrow \infty $时,$y _n \rightarrow U _n $的前$m $项,此时再令$m \to \infty $,根据夹逼定理,立刻得到$x _n \rightarrow U _n $.换言之,$m $增大引起的误差总可以被后面的$n $的增大抹平.</p>
<p>考虑一下计算误差,设$r _n = e - U _n $,则$r _n = \sum _{ k \geq n + 1  } \frac { 1  } { k !  } = \frac { 1  } { ( n + 1 ) !  } \sum _{ k \geq 0  } \frac { 1  } { ( n + 2 ) ^{ \overline { k  }  }  } &lt; \frac { 1  } { ( n + 1 ) !  } \sum _{ k \geq 0  } \frac { 1  } { ( n + 2 ) ^k  } = \frac { 1  } { ( n + 1 ) !  } \frac { n + 2  } { n + 1  } &lt; \frac { 1  } { n \times n !  } $.</p>
<p>如果$e $是有理数,设$e = \frac { m  } { n  } \in \mathbb { Q  } $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
0 & < r _n & = \frac { m  } { n  } - U _n & < \frac { 1  } { n \times n !  } \\
0 & < m \times ( n - 1 ) ! - U _n \times n ! & < \frac { 1  } { n  } 
\end{aligned}</script><p>这立刻导出矛盾,因为$U _n \times n ! $一定是整数.</p>
<h4><span id="开区间与闭区间">开区间与闭区间</span></h4><p>定义一个集合的内部点:$x , \exists \delta &gt; 0 , ( x - \delta , x + \delta ) \subseteq A $.我们将一个集合的所有内部点组成的集合记作$A ^{ \degree  } $.</p>
<p>这样就可以定义一个集合是内部为空的,就是其没有内部点.反之,如果每个点都是其内部点,那么称其为稠密的.</p>
<p>定义一个集合的边界点:$x , \forall \delta &gt; 0 , ( x - \delta , x + \delta ) \cap A \ne \emptyset , ( x - \delta , x + \delta ) \cap A ^C \ne \emptyset $.</p>
<p>一个集合称为开集合,当且仅当$A = A ^{ \degree  } $.</p>
<p>一个集合称为闭集合,当且仅当对于集合中的任何一个数列,数列极限也存在于这个集合中.</p>
<p>当然也可以用补集来用开集合定义闭集合(补集是开集合的集合是闭集合)或者反之.</p>
<p>由此我们知道开集的并是开集,有限个开集的交是开集;闭集的交是闭集,有限个闭集的并是闭集.</p>
<p>容易发现包含于$A $的所有开集的并是$A ^{ \degree  } $.</p>
<p>我们类似定义$A $的闭包是$\bar { A  } $.</p>
<p>而且容易发现如果$f $是连续函数,那么如果$U $是开集,那么$f ^{ - 1  } ( U ) $(也就是$U $的原像)也是开集.</p>
<h4><span id="区间套定理">区间套定理</span></h4><p>设$I _n = [ a _n , b _n ] \ne \emptyset , I _{ n + 1  } \subseteq I _{ n  } $,则$I = \bigcap _{ n \geq 1  } I _n $存在且是一个非空闭区间.</p>
<p>怎么证明?考虑$a _n $单增,$b _n $单减并且$a _1 \leq a _n \leq b _n \leq b _1 $,所以$a _n $存在极限,不妨设为$l _a $,同理$b _n $也存在极限,设为$l _b $.容易验证$I = [ l _a , l _b ] $.</p>
<p>类似地,设$I _n = ( a _n , b _n ) \ne \emptyset , I _{ n + 1  } \subseteq I _{ n  } $,并且$a _n , b _n $不会从某一项开始往后全都是常数(换言之其极限不等于其每一项,且不会上下波动),则$I = \bigcap _{ n \geq 1  } I _n $存在且是一个非空闭区间.</p>
<p>特别地,当$\lim | b _n - a _n | = 0 $的时候,上述给出一个单点.</p>
<h6><span id="example1">Example1</span></h6><p>设$x _1 = a , x _2 = b , a \ne b , x _{ n + 2  } = \frac { x _{ n + 1  } + x _n  } { 2  } $,问$\lim _{ n \rightarrow \infty  } x _n $是否存在.</p>
<p>可以设$c _n = \min \{ x _n , x _{ n + 1  } \} , d _n = \max \{ x _n , x _{ n + 1  } \} $,讨论$x _{ n + 1  } $和$x _n $的大小关系(二者显然不相等)可以知道$[ c _n , d _n ] $满足区间套定理的条件,又注意到$| I _{ n + 1  } | = | x _{ n + 2  } - x _{ n + 1  } | = \frac { 1  } { 2  } | I _n | $,所以区间长度趋近于$0 $,这样的话$\lim _{ n \rightarrow \infty  } c _n = \lim _{ n \rightarrow \infty  } x _n = \lim _{ n \rightarrow \infty  } d _n $.</p>
<h6><span id="example2">Example2</span></h6><p>设$a _1 &gt; b _1 &gt; 0 $,$a _{ n + 1  } = \frac { a _n + b _n  } { 2  } , b _{ n + 1  } = \sqrt { a _n b _n  } $.求证$a _n , b _n $极限都存在且相等.</p>
<p>还是区间套定理,容易验证满足区间套定理的条件,那么要注意到$| I _{ n + 1  } | = \frac { a _n + b _n  } { 2  } - \sqrt { a _n b _n  } &lt; \frac { a _n + b _n  } { 2  } - b _n = \frac { 1  } { 2  } | I _n | $,所以$\lim _{ n \rightarrow \infty  } | I _n | = 0 $,这就证明了二者存在且相等.</p>
<p>其实先用单调有界数列有极限,再对着递推式两边求下极限就可以了.</p>
<h4><span id="有限覆盖定理">有限覆盖定理</span></h4><p>覆盖:$\Sigma : $由一些开区间组成的集合.若$M \subset \mathbb { R  } $,称$M $被$\Sigma $覆盖,当且仅当$M \subseteq \bigcup _{ \sigma \in \Sigma  } \sigma $.</p>
<p>有限覆盖定理是说,如果$M = [ a , b ] $是一个有界闭区间,且$M $被$\Sigma $覆盖,则一定存在一个$\Sigma $的有限子集$\Sigma _1 $,使得$M $能被$\Sigma _1 $覆盖.</p>
<p>换言之,有界闭区间若能被开区间覆盖,则一定能被有限个开区间覆盖.</p>
<p>反证:如果$M $不能被有限覆盖,那么$[ a , \frac { a + b  } { 2  } ] $和$[ \frac { a + b  } { 2  } , b ] $至少有一个不能被有限覆盖(如果它俩都能那$[ a , b ] $肯定也能).不妨取出二者中任意一个不能被有限覆盖的区间,设为$[ a _1 , b _1 ] $,再进行上面的操作就可以得到$[ a _2 , b _2 ] $,以此类推,如此我们得到了一个满足区间套定理的区间序列而且均不能被有限覆盖,根据区间套定理,可以取出它们交集的那个元素$c $.由于$\{ c \} \in M $,所以$\exists \sigma \in \Sigma , c \in \sigma $.因为$\sigma $是开区间,所以$\exists \epsilon &gt; 0 , [ c - \epsilon , c + \epsilon ] \in \sigma $,而显然可以找到一个$N &gt; 0 $,$\forall n \geq N $,$[ a _n , b _n ] \in [ c - \epsilon , c + \epsilon ] $,这就矛盾了.</p>
<h6><span id="example1">Example1</span></h6><p>证明:有界闭区间上的局部有界(对于每一个点,它都存在一个开区间邻域是有界的)函数是整体有界函数.</p>
<p>设定义域为$[ a , b ] $,考虑$\forall x _0 \in [ a , b ] , \exists \sigma &gt; 0 $,$f $在$( x _0 - \sigma , x _0 + \sigma ) $上有界,注意到设$I _{ x _0  } = ( x _0 - \sigma , x _0 + \sigma ) $,那么$[ a , b ] $一定被$I $这个区间集合开覆盖,那么就能被有限开覆盖,取出那有限个区间对应的值域并起来就行.</p>
<h6><span id="example2">Example2</span></h6><p>证明:有界闭区间上的局部增(对于每一个点,它都存在一个开区间邻域是增的)函数是整体增函数.</p>
<p>证明和上面一样,合并两个开区间的时候找任意一个交集元素即可.</p>
<h4><span id="外测度与零测集">外测度与零测集</span></h4><p>定义<strong>外测度:</strong>对于$E \subseteq \mathbb { R  } $,定义$m ^<em> ( E ) $为$E $的外测度,$m ^</em> ( E ) = \inf \{ ( \sum | I _k | ) \mid \bigcup I _k \supseteq E \} $,也就是找一列区间使得其并起来能包含$E $.</p>
<p>定义<strong>零测集</strong>:外测度为$0 $的集合.容易发现$m ^<em> ( \bigcup E _k ) \leq \sum m ^</em> ( E _k ) $.于是可数个零测集的并仍然是零测集.</p>
<p>如果一个集合的势可数,那它当然是零测集,原因是可以构造$I _n = ( x _n - \delta , x _n + \delta ) , \delta = \frac { 1  } { 2 ^{ n + 1  }  } $.由这个构造$\epsilon _k = \frac { \epsilon  } { 2 ^{ k + 1  }  } $可以说明可数个零测集的并仍然是零测集.</p>
<p>反之,一个集合是零测集不一定代表其可数,例如康托三分集:先把$[ 0 , 1 ) $上扣去$[ \frac { 1  } { 3  } , \frac { 2  } { 3  } ) $,然后再对剩下的线段也做类似的操作,每次扣掉中间一段.算一下每次扣去的长度,发现长度恰好为$1 $,于是当然是零测集.但注意到这对应着一个三进制小数并且每一位只能是$0 , 2 $,那这当然势仍然是$2 ^\mathbb { N  } $,于是不可数.</p>
<h4><span id="vitali覆盖引理">Vitali覆盖引理</span></h4><p>当$E \subseteq R $,称一族区间$\Gamma = \{ I _\alpha \} $是$E $的一个Vitali覆盖,若对$\forall x \in E , \epsilon &gt; 0 $,$\exists I _{ \alpha  } \in \Gamma , | I _\alpha | &lt; \epsilon , x \in I _\alpha $.也就是对于任何一个点都存在足够小的区间把它盖住.</p>
<p>Vitali覆盖引理是说,如果$E $是一个有界集(或者推广到外测度有限的集合),$\Gamma $是$E $的一个Vitali覆盖,则$\forall \epsilon &gt; 0 $,$\Gamma $中可以拿出有限个两两不交的区间$I _j \in \Gamma $,满足$m ^* ( E \setminus ( \bigcup I _j ) ) &lt; \epsilon $.注意这里取区间的方式依赖于$\epsilon $的选取.</p>
<p>取一个开集$G \supseteq E , m ^* ( G ) &lt; \infty $,不妨设$\Gamma $中的每个区间都$\subseteq G $(原因在于Vitali覆盖保证了任意小的区间覆盖,而开集的性质使得总有区间在其中).在此基础上,由于上面的$\Gamma $是任意一个Vitali覆盖,所以我们不妨假设$\Gamma $中的每个区间都是闭区间(也就是把端点加进去,那当然仍然是Vitali覆盖而且更难满足限制,因为闭区间更难以两两不交),这当然仍是可以的.</p>
<p>现在我们归纳取区间,我们任取一个$I _1 \in \Gamma $,开始不断往上添区间.设$I _1 , \cdots , I _k $已经被我们拿到,而且两两不交.</p>
<p>如果此时$E \subseteq \bigcup _{ j = 1  } ^k I _j $,当然直接满足条件.</p>
<p>反之,令$\delta _k = \sup \{ ( | I | ) \mid I \in \Gamma , I \cap I _j = \emptyset , 1 \leq j \leq k \} $.容易发现$\delta _k &lt; \infty $.那我们取$I _{ k + 1  } $使得$\forall 1 \leq j \leq k , I _{ k + 1  } \cap I _j = \emptyset , | I _{ k + 1  } | &gt; \frac { 1  } { 2  } \delta _k $,这当然做得到.</p>
<p>如果一直做下去都没有使得$E \subseteq \bigcup I _j $,那我们就可以拿到一个区间列.接下来我们考虑$\sum | I _k | $,此时由于$I _k $两两不交,当然有$\sum | I _k | \leq m ^* ( G ) &lt; \infty $,那么根据单调收敛准则,$\sum | I _k | $趋于一个极限,于是$| I _k | $当然趋近于$0 $,那么$\delta _k $趋近于$0 $.在此基础上,我们当然可以取一个$N &gt; 0 $,$\forall n \geq N , \sum _{ k \geq n + 1  } | I _k | &lt; \frac { 1  } { 5  } \epsilon $.</p>
<p>此时$\forall x \in E \setminus ( \bigcup _{ k \leq N  } I _k ) $.由于$I _k $均为闭区间,所以$E \setminus ( \bigcup _{ k \leq N  } I _k ) $必定是开区间,这也就是说$x $存在一个小邻域$I ‘ \in \Gamma $并且$I ‘ \subseteq E \setminus ( \bigcup _{ k \leq N  } I _k ) $.那当然有$I ‘ \cap ( \bigcup _{ k \leq N  } I _k ) = \emptyset $,也就是$I ‘ \cap I _k = \emptyset , 1 \leq k \leq N $.由于$| I ‘ | $有限且不为$0 $,而$\delta _n \rightarrow 0 $.一定$\exists n \geq N $,使得$I ‘ \cap ( \bigcup _{ k \leq n  } I _k ) = \emptyset , I ‘ \cap I _{ n + 1  } \ne \emptyset $.发现此时$| I ‘ | \leq \delta _n &lt; 2 | I _{ n + 1  } | $.</p>
<p>此时会出个什么事呢?由于$| I ‘ | &lt; 2 | I _{ n + 1  } | $,所以我们把$I _{ n + 1  } $这个区间扩大五倍(中心不变,半径扩大到原本的五倍)就一定能盖住$I ‘ $.</p>
<p>那会怎么样呢?那$m ^* ( E \setminus ( \bigcup _{ k \leq N  } I _k ) ) \leq 5 \sum _{ k \geq N + 1  } | I _k | &lt; \epsilon $.于是证毕.</p>
<h4><span id="聚点原理">聚点原理</span></h4><p>假设$M $是一个实数集,称$x _0 $是$M $的聚点,当且仅当$\forall \epsilon &gt; 0 $,$( ( x _0 - \epsilon , x _0 ) \cup ( x _0 , x _0 + \epsilon ) ) \cap M \ne \emptyset $,或说,$\forall \epsilon &gt; 0 , ( x _0 - \epsilon , x _0 + \epsilon ) \cap M $是一个无限集.可以理解为,$x _0 $不是一个孤点.</p>
<p>引理:$x _0 $为$M $的聚点,当且仅当$\exists \{ x _n \} \in M \setminus \{ x _0 \} , \lim _{ n \rightarrow \infty  } x _n = x _0 $.充分性显然,必要性的话只需取$\epsilon = 2 ^{ - n  } $然后从上面的交集拿点就行.</p>
<p>聚点原理:有界无穷集$M $必有聚点.</p>
<p>我们可以找一个$I _0 = [ a , b ] , M \subset I _0 $,我们找$[ a , \frac { a + b  } { 2  } ] , [ \frac { a + b  } { 2  } , b ] $,其中至少有一个和$M $的交集为无穷集,我们取其为$[ a _1 , b _1 ] $,不断这么做又会得到一个闭区间套列,交起来得到的那个元素$c $就是聚点,因为$\forall \epsilon &gt; 0 , \exists N &gt; 0 , \forall n \geq N , | b _n - a _n | &lt; \epsilon $,那么$[ a _n , b _n ] \subseteq ( c - \epsilon , c + \epsilon ) $,立刻证毕.</p>
<h4><span id="baire纲定理">Baire纲定理</span></h4><ol>
<li><p>设$\{ F _n \} $是一列内部为空(没有除空集以外的开子集)的闭集,则$\bigcup _{ n = 1  } ^{ \infty  } F _n $内部为空.</p>
</li>
<li><p>设$\{ G _n \} $是一列稠密(补集内部为空)的开集,则$\bigcap _{ n = 1  } ^{ \infty  } G _n $稠密.</p>
</li>
</ol>
<p>(1)(2)等价,下面只证明(1):</p>
<p>反证,假设$F = \bigcup _{ n = 1  } ^{ \infty  } F _n $内部不为空,也就是其存在一个内部开集$( x _0 - \delta _0 , x _0 + \delta _0 ) \subseteq F $.由于$F _1 $是一个闭集,因此$( x _0 - \delta _0 , x _0 + \delta _0 ) \setminus F _1 $当然是一个开集,于是其就存在一个子区间$[ x _1 - \delta _1 , x _1 + \delta _1 ] \subseteq ( x _0 - \delta _0 , x _0 + \delta _0 ) $并且$[ x _1 - \delta _1 , x _1 + \delta _1 ] \cap F _1 = \emptyset $,同理可以找到一列闭区间$\{ [ x _k - \delta _k , x _k + \delta _k ] \} $使得$[ x _k - \delta _k , x _k + \delta _k ] \cap \bigcup _{ j = 1  } ^k F _j = \emptyset $.</p>
<p>容易见到我们可以任意调小$\delta _k $的大小,调整使得$\delta _k &lt; \frac { 1  } { k  } $总成立就得到了一列闭区间套,必然拿到了一个单独的点$\xi $,那么$\xi \in ( x _0 - \delta _0 , x _0 + \delta _0 ) \subseteq F $,然而对于任意区间都有$\xi \notin F _n $,因此$\xi \notin F $,这就导出了矛盾.</p>
<h6><span id="example1">Example1</span></h6><p>证明:如果$f ( x ) $连续,并且$\forall x &gt; 0 , \lim _{ n \rightarrow \infty  } f ( nx ) = 0 $,则$\lim _{ x \rightarrow \infty  } f ( x ) = 0 $.</p>
<p>对于一个$\epsilon &gt; 0 $,考虑构造内部为空的闭集$F _n = \{ x | \forall k \geq n , f ( kx ) \leq \epsilon \} $(为什么这是闭集呢?因为当你设$F _{ n , k  } $满足上述定义,那$F _{ n , k  } $肯定是闭集,然后$F _n $就是上述这些的交,当然也是闭集).容易发现$F _n $的并是$\mathbb { R  } _+ $,那就一定至少有一个闭集内部不为空,我们就可以取出其中的一个区间设为$( a , b ) $,然后用这个区间在若干倍后覆盖后半部分数轴,原因是当$n $足够大的时候,一定有$nb &gt; ( n + 1 ) a $存在.</p>
<h4><span id="致密性定理">致密性定理</span></h4><p>有界无穷数列有收敛的子列.</p>
<p>考虑数列值域$M = \{ x | x = x _n , n \in \mathbb { N  } _+ \} $.</p>
<p>如果$M $是有限集合,那$\exists a $,$I = \{ n | x _n = a \} $是无限集合,把这些数拿出来就是一个无限的常数列.</p>
<p>如果$M $是无限集,那其存在聚点,设$a $为其中一个聚点.则$M _k = ( ( a - \frac { 1  } { k  } , a + \frac { 1  } { k  } ) \setminus \{ a \} ) \cap M , k \in \mathbb { N  } _+ $是个无限集.</p>
<p>那只需要取$x _{ n _k  } $为$M _k $中的某个$x _{ n ‘  } $满足$n ‘ &gt; n _{ k - 1  } $即可,由于这是无限集,所以显然可以取出.拿出来的这个数列显然以$a $为极限.</p>
<h4><span id="柯西收敛准则">柯西收敛准则</span></h4><p>称一个数列为柯西数列,当且仅当$\forall \epsilon &gt; 0 , \exists N &gt; 0 , \forall n , m \geq N , | x _n - x _m | &lt; \epsilon $.</p>
<p>一个数列收敛的充要条件是他是一个柯西数列.</p>
<p>先证必要性:</p>
<p>$\forall \epsilon &gt; 0 , \exists N &gt; 0 , \forall n , m \geq N , | a - x _n | &lt; \frac { \epsilon  } { 2  } , | a - x _m | &lt; \frac { \epsilon  } { 2  } , | x _n - x _m | \leq | x _n - a | + | a - x _m | &lt; \epsilon $.</p>
<p>再证充分性:</p>
<p>考虑取$\epsilon = 1 $,则$\exists N _1 , \forall n \geq N _1 , | x _n - x _{ N _1  } | &lt; 1 $,于是$| x _n | &lt; | x _{ N _1  } | + 1 $,于是$\forall n , | x _n | &lt; \max _{ k = 1  } ^{ N _1  } \{ | x _k | \} + 1 $,于是这个数列有界,那么存在无穷子列有极限$a $.</p>
<p>那么$\forall \epsilon &gt; 0 , \exists N &gt; 0 , \forall n _k , m \geq N , | x _{ n _k  } - x _m | &lt; \epsilon $,其中$\{ x _{ n _k  } \} $以$a $为极限,于是可以取足够远的$x _{ n _k  } $.接下来就是简单说明的环节了.</p>
<p>柯西收敛准则的充分性还可以用上下极限证明:</p>
<p>取$\forall \epsilon &gt; 0 , \exists N , \forall n \geq N , x _n \in ( x _N - \epsilon , x _N + \epsilon ) $,那么上下极限之差$\leq 2 \epsilon $.</p>
<p>于是引出了实数的第二种定义方式:我们定义两个柯西列等价,有$\{ x _n \} \sim \{ y _n \} \Leftrightarrow \lim _{ n \rightarrow \infty  } | x _n - y _n | = 0 $.那么所有有理数组成的柯西列的等价类构成实数集合.不难证明这样定义出来的实数和戴德金分割等价.</p>
<p>这个定义方式只依赖于距离的定义.而且我们可以证明任何一次扩充后得到的空间一定是封闭的.用这个例子就是说你对于一个实数的柯西列,证明它一定收敛到一个实数.那么就可以把这个柯西列的每一个数(作为实数,实际上对应了一个柯西列)中抽出一个数来,然后证明这些数组成的新的柯西列与刚才那个柯西列等价,这样就证明了其封闭性.其实只要第$k $个数把其代表的任意一个柯西列中选第$k $个元素构造即可.</p>
<h4><span id="上下极限">上下极限</span></h4><p>我们推广广义极限,也就是一个数列可以以$+ \infty $或者$- \infty $为极限.这个容易用$\epsilon - N $语言写出来.这样的话我们立刻得到单调数列有极限.</p>
<p>那我们取任意一个数列从某一项往后的上确界$h _n = \sup _{ k \geq n  } \{ x _k \} $和下确界$l _n = \inf _{ k \geq n  } \{ x _k \} $,那么注意到$\{ l _n \} $单调不降,$\{ h _n \} $单调不增,所以二者都存在极限.由此可以定义上下极限,并且任意数列都一定存在上下极限.</p>
<p>注意到$\lim _{ n \rightarrow \infty  } l _n = \sup _{ n \geq 1  } \inf _{ k \geq n  } \{ x _k \} , \lim _{ n \rightarrow \infty  } h _n = \inf _{ n \geq 1  } \sup _{ k \geq n  } \{ x _k \} $,于是$\varliminf _{ n \rightarrow \infty  } x _n = \lim _{ n \rightarrow \infty  } l _n \leq \lim _{ n \rightarrow \infty  } h _n = \varlimsup _{ n \rightarrow \infty  } x _n $.</p>
<p>那么$x _n $存在极限当且仅当$\varlimsup _{ n \rightarrow \infty  } x _n = \varliminf _{ n \rightarrow \infty  } x _n $.</p>
<p>充分性很好证明,只需要使用夹逼定理即可.</p>
<p>必要性也很好说如果极限不是$\infty $,$\forall \epsilon &gt; 0 , \exists N , \forall n \geq N , a - \epsilon &lt; x _n &lt; a + \epsilon $,那么$a - \epsilon &lt; l _n \leq h _n &lt; a + \epsilon $.自然得到两者极限相等.是$\infty $也很好说.</p>
<p>上下极限同样有保序性,相反数有$\varlimsup ( - x ) = - \varliminf x $,但是不能简单的四则运算,而是有$\varliminf x _n + \varliminf y _n \leq \varliminf ( x _n + y _n ) \leq \varlimsup ( x _n + y _n ) \leq \varlimsup x _n + \varlimsup y _n $,我们这里先不讨论出现$\infty - \infty $的情况.</p>
<p>证明的话只需注意到$\inf _{ k \geq n  } x _k + \inf _{ k \geq n  } y _k \leq x _m + y _m , \forall m \geq n $,因此对右边可以取下确界,然后两边一起取极限即可.</p>
<p>另外还有结论是$\varliminf ( x _n + y _n ) \leq \varlimsup x _n + \varliminf y _n $.这个又如何证明呢?只需证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\varliminf ( x _n + y _n ) - \varlimsup x _n & \leq \varliminf y _n \\
\varliminf ( x _n + y _n ) + \varliminf ( - x _n ) & \leq \varliminf y _n \\

\end{aligned}</script><p>于是证毕.</p>
<p>乘法的话需要规定$x _n , y _n &gt; 0 $,然后和加法的不等式形式是类似的(同样先不考虑$0 \times \infty $的情况).</p>
<p>如果$\{ x _n \} , \{ y _n \} $其中一个存在极限,那么上面的不等式就可以取等了(当然仍然不讨论出现$\infty - \infty $和$0 \times \infty $的情况).如果$x _n = y _n &gt; 0 $的话上面的乘法不等式也可以取等,换言之$x _n &gt; 0 $的时候$\varlimsup x _n ^2 = ( \varlimsup x _n ) ^2 $成立.</p>
<h6><span id="example1">Example1</span></h6><p>对于数列$\{ a _n \} $,满足$a _n &gt; 0 $,$a _{ n + 2  } = \frac { 2  } { a _{ n + 1  } + a _n  } $.</p>
<p>求证:</p>
<ol>
<li><p>$\{ a _n \} $有界.</p>
</li>
<li><p>$\lim _{ n \rightarrow \infty  } a _n = 1 $.</p>
</li>
<li><p>$\exists \lambda \in ( 0 , 1 ) , c &gt; 0 $,$\forall n , | a _n - 1 | &lt; c \lambda ^n $.</p>
</li>
<li><p>对所有满足条件的数列,求$\min ( \lambda ) = \frac { \sqrt { 2  }  } { 2  } $.</p>
</li>
</ol>
<p>对于(1),取$M = \max ( \max ( a _1 , a _2 ) , \frac { 1  } { \min ( a _1 , a _2 )  } ) $,数学归纳可证明$a _n \in [ \frac { 1  } { M  } , M ] $.</p>
<p>两边取一下上极限和下极限,立刻得到$1 \leq \overline { a  } \underline { a  } \leq 1 $,于是$\overline { a  } \underline { a  } = 1 $.</p>
<p>后面不会了(乐).</p>
<h4><span id="stolz定理">Stolz定理</span></h4><p>如果$\lim _{ n \rightarrow \infty  } \frac { a _{ n + 1  } - a _n  } { b _{ n + 1  } - b _n  } = A $,并且$\{ b _n \} $单调递增且发散,那么$\lim _{ n \rightarrow \infty  } \frac { a _n  } { b _n  } = A $.</p>
<p>这个怎么证明呢?先取$c _n = a _n - Ab _n $,考虑$\forall \epsilon &gt; 0 , \exists N &gt; 0 , \forall n \geq N $,有:</p>
<script type="math/tex; mode=display">
c _{ n + 1  } - c _n \leq | c _{ n + 1  } - c _n | < \epsilon ( b _{ n + 1  } - b _n )</script><p>两边求和,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c _{ n  } - c _N & < \epsilon ( b _{ n  } - b _N ) \\
\frac { c _n - c _N  } { b _n - b _N  } & < \epsilon \\
\frac { \frac { c _n  } { b _n  } - \frac { c _N  } { b _n  }  } { 1 - \frac { b _N  } { b _n  }  } & < \epsilon 
\end{aligned}</script><p>由于$b _n $发散,对左边取极限就得到$\lim _{ n \rightarrow \infty  } \frac { c _n  } { b _n  } = 0 $,也就证明了原结论.</p>
<p>如果将上述条件改为:</p>
<ol>
<li><p>$\{ b _n \} $单调递减且$\lim b _n = 0 $.</p>
</li>
<li><p>$\lim a _n = 0 $.</p>
</li>
</ol>
<p>上述定理也是成立的.</p>
<p>证明仍然是上面那个过程,只是做一些小修改:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c _{ N  } - c _n & < \epsilon ( b _{ N  } - b _n ) \\
\frac { c _N - c _n  } { b _N - b _n  } & < \epsilon \\
\frac { \frac { c _N  } { b _N  } - \frac { c _n  } { b _N  }  } { 1 - \frac { b _n  } { b _N  }  } & < \epsilon 
\end{aligned}</script><p>两边取极限.</p>
<p>把Stolz定理推广到上下极限上.换言之,当:</p>
<ol>
<li>$\{ b _n \} $单调上升且趋近于无穷.</li>
</ol>
<p>或:</p>
<ol>
<li><p>$\{ b _n \} $单调递减且$\lim b _n = 0 $.</p>
</li>
<li><p>$\lim a _n = 0 $.</p>
</li>
</ol>
<p>此时应当有:</p>
<script type="math/tex; mode=display">
\varliminf \frac { a _{ n + 1  } - a _n  } { b _{ n + 1  } - b _n  } \leq \varliminf \frac { a _n  } { b _n  } \leq \varlimsup \frac { a _n  } { b _n  } \leq \varlimsup \frac { a _{ n + 1  } - a _n  } { b _{ n + 1  } - b _n  }</script><p>上述命题的一个平凡推论是:</p>
<script type="math/tex; mode=display">
\varliminf ( a _{ n + 1  } - a _n ) \leq \varliminf \frac { a _n  } { n  } \leq \varlimsup \frac { a _n  } { n  } \leq \varlimsup ( a _{ n + 1  } - a _n )</script><h3><span id="实数的完备性基本定理">实数的完备性基本定理</span></h3><p>我们将以下定理称作实数的完备性的基本定理:</p>
<ol>
<li><p>戴德金分割定理</p>
</li>
<li><p>确界存在定理</p>
</li>
<li><p>单调收敛准则</p>
</li>
<li><p>闭区间套定理(+阿基米德性质)</p>
</li>
<li><p>有限覆盖定理</p>
</li>
<li><p>聚点原理</p>
</li>
<li><p>致密性定理</p>
</li>
<li><p>柯西收敛准则(+阿基米德性质)</p>
</li>
</ol>
<p>这七条定理(除了3和7,它们需要与阿基米德性质配合使用)全部与戴德金分割定理等价.</p>
<p>我们上面已经论证了其中的部分推导关系,我们在下面声称它们分为若干组推导链条,分别代表了实数的不同性质.</p>
<h3><span id="函数极限">函数极限</span></h3><h4><span id="定义">定义</span></h4><p>函数的极限类型比较多:</p>
<ol>
<li><p>$x $是从一点$a $的右侧趋向于$a $,这时记作$x \rightarrow a + 0 $.</p>
</li>
<li><p>$x $是从一点$a $的左侧趋向于$a $,这时记作$x \rightarrow a - 0 $.</p>
</li>
<li><p>$x $同时从一点$a $的两侧趋向于$a $,这时记作$x \rightarrow a $.</p>
</li>
<li><p>$x $无限制增大,记作$x \rightarrow + \infty $.</p>
</li>
<li><p>$x $无限制减小,记作$x \rightarrow - \infty $.</p>
</li>
<li><p>$| x | $无限制增大,$x $同时增大或减小,记作$x \rightarrow \infty $.</p>
</li>
</ol>
<p>序列极限的定理在函数极限的条件下几乎也全都成立.</p>
<h5><span id="单侧极限">单侧极限</span></h5><p>即$x \rightarrow a + 0 $和$x \rightarrow a - 0 $,这两种是对称的,我们只讨论前一种.</p>
<p>若$\exists l , \forall \epsilon &gt; 0 , \exists \delta &gt; 0 , \forall 0 &lt; x - a &lt; \delta , | f ( x ) - l | &lt; \epsilon $.我们称$l $是$x \rightarrow a + 0 $时$f ( x ) $的<strong>右极限</strong>,记作$\lim _{ x \rightarrow a + 0  } f ( x ) = l \ $,同理可以定义<strong>左极限</strong>.</p>
<h5><span id="双侧极限">双侧极限</span></h5><p>若左右极限都存在且相等,那么双侧极限也存在并且$\lim _{ x \rightarrow a  } f ( x ) = \lim _{ x \rightarrow a + 0  } f ( x ) = \lim _{ x \rightarrow a - 0  } f ( x ) \ $.</p>
<h5><span id="自变量趋于无穷时的极限">自变量趋于无穷时的极限</span></h5><p>设函数$f ( x ) $在$( a , + \infty ) $上有定义,若$\exists l $,$\forall \epsilon , \exists A \geq a , \forall x &gt; A , | f ( x ) - l | &lt; \epsilon $,则记$\lim _{ x \rightarrow + \infty  } f ( x ) = l \ $,同理定义$\lim _{ x \rightarrow - \infty  } $,若二者均存在且相等,定义$\lim _{ x \rightarrow \infty  } = \lim _{ x \rightarrow + \infty  } = \lim _{ x \rightarrow - \infty  } $.</p>
<h4><span id="上下极限">上下极限</span></h4><p>定义去心邻域$U _0 ( x _0 , \delta ) = ( x _0 - \delta , x _0 + \delta ) \setminus \{ x _0 \} $.</p>
<p>定义$\varlimsup _{ x \rightarrow x _0  } f ( x ) = \lim _{ \delta \rightarrow + 0  } \sup _{ x \in U _0 ( x _0 , \delta )  } f ( x ) $,下极限同理.</p>
<p>显然$\lim _{ x \rightarrow x _0  } f ( x ) = A \Leftrightarrow \varlimsup _{ x \rightarrow x _0  } f ( x ) = \varliminf _{ x \rightarrow x _0  } f ( x ) = A $.</p>
<h4><span id="第一可数公理">第一可数公理</span></h4><p>函数极限当然满足四则运算法则,保序性,夹逼定理,单调收敛准则,柯西收敛准则.</p>
<p>事实上函数极限和数列极限满足关系:</p>
<p>$\forall \{ x _n \} \in U _0 ( x _0 ) $,如果$\lim _{ n \rightarrow \infty  } x _n = x _0 $,那么$\lim _{ n \rightarrow \infty  } f ( x _n ) = \lim _{ x \rightarrow x _0  } f ( x ) $,前提是这两个极限都存在.</p>
<p>证明是堆$\delta - \epsilon $语言,不再赘述.</p>
<p>而它们之间关系的本质其实是:$x _0 $处的”任意小邻域”其实可以用某列邻域替代.</p>
<p>我们定义邻域基:一个由$x _0 $的邻域组成的集合$U $,如果对于任意小邻域,$U $中都存在一个邻域比这个邻域更小,那么就称$U $是一个邻域基.$\mathbb { R  } $的特殊之处在于任意一个点都有可数邻域基,这被称为第一可数公理($C _1 $公理).</p>
<p>另外$\mathbb { R  } $是可分的,也就是它存在可数稠密集($\mathbb { Q  } $).</p>
<h4><span id="无穷大量和无穷小量">无穷大量和无穷小量</span></h4><p>如果$x \rightarrow x _0 $时,$f ( x ) $有界,称$f ( x ) = O ( 1 ) $.</p>
<p>如果$x \rightarrow x _0 $的时候,$f ( x ) \rightarrow 0 $,称$f ( x ) = o ( 1 ) $.</p>
<p>如果$f , g = o ( 1 ) $,$\frac { f  } { g  } \rightarrow 1 $,那么称二者为<strong>等价无穷小</strong>;如果$\frac { f  } { g  } = c \ne 0 $,则称二者为同阶无穷小(可记作$f \sim g $);如果$\frac { f  } { g  } = 0 $,则称$f $为$g $的<strong>高阶无穷小</strong>,可记作$f = o ( g ) $.</p>
<p>同阶无穷小在做乘除法的时候是可以替换的.</p>
<p>如果$\frac { f  } { g  } $是有界的,那么可以写作$f = O ( g ) $.</p>
<h6><span id="example1">Example1</span></h6><p>$\lim _{ x \rightarrow 0  } \frac { \sin x  } { x  } = 1 $.</p>
<p>因为其左右对称,考虑取$x \in ( 0 , \frac { \pi  } { 2  } ) $我们有$\sin x &lt; x &lt; \tan x $(用单位元的面积证明).</p>
<p>那么考虑$\frac { \sin x  } { x  } &lt; 1 $,又注意到:</p>
<script type="math/tex; mode=display">
\frac { \sin x  } { x  } > \frac { \sin x  } { \tan x  } = \cos x</script><p>夹逼定理一下就行.</p>
<p>类似可以证明$\lim _{ x \rightarrow 0  } \frac { \tan x  } { x  } = 1 , \lim _{ x \rightarrow 0  } \frac { 1 - \cos x  } { x ^2  } = \frac { 1  } { 2  } , $</p>
<h6><span id="example2">Example2</span></h6><p>$\lim _{ x \rightarrow 0  } \frac { x - \sin x  } { x ^3  } = \frac { 1  } { 6  } $.</p>
<p>下面有个三次方,考虑套用一下三倍角公式,我们知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = \frac { x - \sin x  } { x ^3  } & = \frac { x - ( 3 \sin \frac { x  } { 3  } - 4 \sin ^3 \frac { x  } { 3  } )  } { x ^3  } \\
& = \frac { 3 ( \frac { x  } { 3  } - \sin \frac { x  } { 3  } ) + 4 \sin ^3 \frac { x  } { 3  }  } { ( \frac { x  } { 3  } ) ^3  } \frac { 1  } { 27  } \\
& = \frac { 1  } { 9  } f ( \frac { x  } { 3  } ) + \frac { 4  } { 27  } ( \frac { \sin \frac { x  } { 3  }  } { \frac { x  } { 3  }  } ) ^3 
\end{aligned}</script><p>看上去两边取上下极限就做完了对吧!但是还差一点,因为我们要证明上下极限都不是无穷,起码得说明它有界.</p>
<p>注意到$\frac { x - \sin x  } { x ^3  } &lt; \frac { \tan x - \sin x  } { x ^3  } = \frac { \sin x  } { x  } ( \frac { 1 - \cos x  } { x ^2 \cos x  } ) = \frac { \sin x  } { x  } ( \frac { 2 \sin ^2 \frac { x  } { 2  }  } { x ^2 \cos x  } ) $,这样两边限定一下范围再取上极限可以说明原式上极限有界.</p>
<h6><span id="example3">Example3</span></h6><p>求$\lim _{ x \rightarrow 0  } \frac { \sin x - \tan x  } { x ^3  } $.</p>
<p>考虑$\frac { \sin x - \tan x  } { x ^3  } = \frac { \sin x  } { x  } \frac { 1  } { x ^2  } \frac { \cos x - 1  } { \cos x  } = \frac { \tan x  } { x  } \frac { \cos x - 1  } { x ^2  } = - \frac { 1  } { 2  } $.</p>
<h6><span id="example4">Example4</span></h6><p>$\lim _{ t \rightarrow 0  } \frac { \log _{ a  } ( 1 + t )  } { t  } = \frac { 1  } { \ln a  } $.</p>
<script type="math/tex; mode=display">
\lim _{ t \rightarrow 0  } \frac { \log _{ a  } ( 1 + t )  } { t  } = \log _a \lim _{ t \rightarrow 0  } ( 1 + t ) ^{ \frac { 1  } { t  }  } = \log _a e = \frac { 1  } { \ln a  }</script><h6><span id="example5">Example5</span></h6><p>$\lim _{ t \rightarrow 0  } \frac { a ^t - 1  } { t  } = \ln a $.</p>
<p>令$s = a ^t - 1 $,则原式等于$\lim _{ s \rightarrow 0  } \frac { s  } { \log _a ( s + 1 )  } = \ln a $.</p>
<h6><span id="example6">Example6</span></h6><p>$\lim _{ t \rightarrow 0  } \frac { ( 1 + t ) ^\mu - 1  } { t  } = \mu $.</p>
<p>令$s = ( 1 + t ) ^\mu - 1 $,那么原式等于$\lim _{ t \rightarrow 0 , s \rightarrow 0  } \mu \frac { s  } { \ln ( 1 + s )  } \frac { \ln ( 1 + t )  } { t  } = \mu $.</p>
<h4><span id="连续函数">连续函数</span></h4><p>不妨设$f ( x ) $在$( a , b ) $上有定义,若对于$x _0 \in ( a , b ) $,$f ( x ) $在$x _0 $处有双侧极限且$\lim _{ x \rightarrow x _0  } f ( x ) = f ( x _0 ) $,称其在$x _0 $处<strong>连续</strong>,$x _0 $称为<strong>连续点</strong>,若$\forall x _0 \in ( a , b ) $,$f ( x ) $在$x _0 $处连续,则称其在$( a , b ) $上<strong>连续</strong>.连续性相当于说:取极限和$f $可以交换顺序,换言之$\lim _{ x \rightarrow x _0  } f ( x ) = f ( \lim _{ x \rightarrow x _0  } x ) $.</p>
<p>我们也可以类似上面定义<strong>左连续</strong>和<strong>右连续</strong>,若$f ( x ) $在$[ a , b ] $上有定义,且在$( a , b ) $上连续,在$a $处右连续,在$b $处左连续,称其在$[ a , b ] $上连续.</p>
<p>如果$f ( x ) $在$x _0 $附近有定义且不连续,则称$x _0 $是一个<strong>间断点</strong>,间断点有以下几种:</p>
<ol>
<li><p>如果$\lim _{ x \rightarrow x _0 + 0  } f ( x ) $和$\lim _{ x \rightarrow x _0 - 0  } f ( x ) $都存在但不相等或者不等于$f ( x _0 ) $,则称为<strong>第一类间断点</strong>.如果是后者情况,可以通过修改$f ( x _0 ) $的定义来去掉这个间断点,因而一般被称为<strong>可去间断点</strong>.</p>
</li>
<li><p>反之,如果$\lim _{ x \rightarrow x _0 + 0  } f ( x ) $和$\lim _{ x \rightarrow x _0 - 0  } f ( x ) $至少有一个不存在,则称为<strong>第二类间断点</strong>.</p>
</li>
</ol>
<p>使用单调收敛准则,可证明单调函数没有第二类间断点.并且单调函数的间断点只有可数个(几乎处处连续).</p>
<p>这个怎么证明呢?考虑设$M $是函数$f $的第一类间断点集,取$x \in M , I _x = ( f ( x _0 - 0 ) , f ( x _0 + 0 ) ) $,由于函数单调,所以这些$I _x $两两不交.考虑映射$M \rightarrow \mathbb { Q  } , x \mapsto \min ( I _x \cap \mathbb { Q  } ) $,也就是考虑每一个$I _x $中都有若干个有理数,且互不相交,那么显然这个映射是个单射,$M $可数.</p>
<p>事实上有更强的结论:任意函数的第一类间断点集都是可数的.</p>
<p>设$M $是函数$f $的第一类间断点集,取$M _n = \{ x \in M \mid | f ( x + 0 ) - f ( x - 0 ) | &gt; \frac { 1  } { n  } \} , M ‘ = \{ x \in M | f ( x + 0 ) = f ( x - 0 ) \ne f ( x ) \} $.</p>
<p>注意到$M = ( \bigcup _{ n \geq 1  } M _n ) \cup M ‘ $.</p>
<p>我们定义孤立点:如果$x \in A , \exists \sigma , ( x - \sigma , x + \sigma ) \nsubseteq A $,则称$x $是$A $中的一个孤立点.类似刚才证明可数性,我们每个孤立点都可以取一段邻域,领域中一定存在有理数,所以任意一个集合中的孤立点个数一定是可数的.</p>
<p>又发现所有的$x \in M _n $,$x $都是孤立点,原因很显然因为在$x $的两侧小区间都在趋近于一个极限,所以它们肯定不是第一类间断点.所以所有的$M _n $都是可数集.</p>
<p>那怎么证明$M ‘ $是可数集呢?考虑取$M ‘ _n = \{ x \in M | | f ( x ) - f ( x - 0 ) | &gt; \frac { 1  } { n  } \} $,现在$M ‘ = \bigcup _{ n \geq 1  } M ‘ _n $,而$M ‘ _n $一定是孤立点集,所以$M ‘ $可数.</p>
<p>综上就可以看出$M $是一个可数集.</p>
<p>而第二类间断点则是可以有任意多个,例如对于迪利克雷函数,其处处都是第二类间断点.</p>
<p>由于连续性由极限定义,这意味着在$( a , b ) $上的连续函数的有定义的四则运算必定得到的还是在$( a , b ) $上的连续函数.那么,如果我们对于一个区间$I $,定义$C ( I ) $为所有在$I $上连续的函数组成的集合,$C ( I ) $就是一个线性空间.且不难发现,连续函数的复合仍然是连续函数.这其实对应着$\lim _{ x \rightarrow a  } g ( f ( x ) ) = g ( \lim _{ x \rightarrow a  } f ( x ) ) = g ( f ( a ) ) \ $.</p>
<p>另外,如果一个连续函数有单值反函数,则反函数必连续.</p>
<p>不难证明,所有的初等函数在定义域上都是连续的.</p>
<p>另外:连续周期非常值函数一定有最小正周期.</p>
<p>考虑设正周期的集合是$\{ t \} $,取$T = \inf \{ t \} $.</p>
<p>当$T = 0 $的时候,取一个正周期的数列$\{ t _n \} \rightarrow 0 $,然后$\forall x &lt; y , x _n = x + \lfloor \frac { y - x  } { t _n  } \rfloor t _n , | y - x _n | \leq t _n \rightarrow 0 $,于是$\lim _{ n  } f ( x _n ) = f ( y ) $,而恒有$f ( x ) = f ( x _n ) $于是这是一个常值函数.</p>
<p>反之,则取$\{ t _n \} \rightarrow T , f ( x + T ) = \lim _{ n  } f ( x + t _n ) = f ( x ) $.</p>
<h5><span id="一致连续">一致连续</span></h5><p>假设$f : I \rightarrow \mathbb { R  } $,若$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 , \forall x _1 , x _2 \in I , | x _1 - x _2 | &lt; \delta , | f ( x _1 ) - f ( x _2 ) | &lt; \epsilon $,则称其<strong>一致连续</strong>.一致连续性是一个比连续性强得多的性质,例如$f ( x ) = x ^2 $就不是一致连续的.</p>
<h5><span id="李氏连续">李氏连续</span></h5><p>假设$f : I \rightarrow \mathbb { R  } $,若$\exists L , \forall x _1 , x _2 \in I , | f ( x _1 ) - f ( x _2 ) | \leq L | x _1 - x _2 | $,则称其<strong>李氏连续</strong>.李氏连续当然强于一致连续.</p>
<h4><span id="闭区间下的连续函数">闭区间下的连续函数</span></h4><h5><span id="介值定理零点存在定理">介值定理(零点存在定理)</span></h5><p>设$f ( x ) $在$[ a , b ] $上有定义且连续,$f ( a ) \ne f ( b ) $,则$\forall \eta \in ( f ( a ) , f ( b ) ) , \exists c \in ( a , b ) , f ( c ) = \eta $.这当然等价于$f ( a ) f ( b ) &lt; 0 \Rightarrow \exists c \in ( a , b ) , f ( c ) = 0 $.</p>
<p>考虑取$f ( \frac { a + b  } { 2  } ) $,如果$f ( \frac { a + b  } { 2  } ) = 0 $那就完事了.不然的话考虑$f ( a ) f ( \frac { a + b  } { 2  } ) $和$f ( \frac { a + b  } { 2  } ) f ( b ) $中必定有恰好一个小于$0 $,这当然给出一个闭区间套,不妨设最后套出了一个单点$c $.此时取极限立刻有$0 \geq \lim f ( a _n ) f ( b _n ) = f ( c ) ^2 $,于是$f ( c ) = 0 $.</p>
<p>也有一个存在性证明:反证,如果$\forall x \in [ a , b ] $,$f ( x ) \ne 0 $.那么$\forall x \in [ a , b ] , \exists \delta ( x ) &gt; 0 $,$f $在$( x - \delta ( x ) , x + \delta ( x ) ) $与$f ( x ) $同号.根据有限覆盖定理,我们可以拿出有限个开区间来覆盖整个区间.此时可以将这些开区间排序,相邻两个区间两两有交,自然导出矛盾.</p>
<p>介质定理还有两个推论:</p>
<ol>
<li><p><strong>介值定理的推论1</strong>:设$f ( x ) $在$[ a , b ] $上有定义且连续,那么$[ f ( a ) , f ( b ) ] \subseteq $其值域.</p>
</li>
<li><p><strong>介值定理的推论2</strong>:单调连续函数的反函数仍然是单调连续函数.</p>
</li>
</ol>
<p>推论(1)显然,考虑推论(2)的证明:</p>
<p>考虑对于连续单增函数$f ( x ) \in C ( a , b ) , \alpha = f ( a + 0 ) , \beta = f ( b - 0 ) $.先要证明其存在反函数$\varphi \in C ( \alpha , \beta ) $.</p>
<p>这里有一点小问题是我们要用介值定理要把定义域控制在闭区间,但这当然是好做的,对于任何一个$c \in ( a , b ) $,你一定可以取一个$a _1 , b _1 $使得$f ( a _1 ) &lt; f ( c ) &lt; f ( b _1 ) $,这样$f ( x ) \in C [ a _1 , b _1 ] $.</p>
<p>这样的话容易说明$f $是$( a , b ) \rightarrow ( \alpha , \beta ) $的双射,于是反函数是存在的.反函数的单调性是好证的.</p>
<p>对于反函数的连续性,反证,假设其在某一点$c \in ( \alpha , \beta ) $处不连续,必然意味着$a &lt; \varphi ( c - 0 ) &lt; \varphi ( c + 0 ) &lt; b $.此时容易说明$\varphi ( x ) \in ( a , b ) \setminus ( \varphi ( c - 0 ) , \varphi ( c + 0 ) ) \cup \{ \varphi ( c ) \} $,那只需要取$w \in ( \varphi ( c - 0 ) , \varphi ( c + 0 ) ) \setminus \{ \varphi ( c ) \} $,$\nexists x , \varphi ( x ) = w $,这当然与我们上述结论不符.</p>
<h6><span id="example1">Example1</span></h6><p>对于连续函数$f \in C [ a , b ] , \forall x _0 \in [ a , b ] \setminus \mathbb { Q  } , \varlimsup _{ \Delta x \rightarrow 0 + 0  } \frac { f ( x _0 + \Delta x ) - f ( x _0 )  } { \Delta x  } \geq 0 $,求证:$f $单调递增.</p>
<p>先考虑把条件改成$\forall x _0 \in [ a , b ] $怎么做.</p>
<p>一个想法是反证,如果不单调的话,找一个点使得它的右上导数小于$0 $.最自然的想法是找最大值,但最大值有可能只能证明右上导数$\leq 0 $.所以有一个想法是拿一条稍微斜一点(也就是斜率为较小的负数)的直线去截整个曲线.</p>
<p>下面反证,如果其不单增,总能找到两个点$a ‘ &lt; b ‘ $,使得$f ( a ‘ ) &gt; f ( b ‘ ) $.此时任意取一个$\epsilon _0 &lt; f ( a ‘ ) - f ( b ‘ ) $,然后取一个点$B = ( b ‘ , f ( b ‘ ) + \epsilon _0 ) $.当然可以再取一个$\epsilon &gt; 0 $使得$\epsilon + \epsilon _0 &lt; f ( a ‘ ) - f ( b ‘ ) $,然后取一个点$A = ( a ‘ , f ( b ‘ ) + \epsilon _0 + \epsilon ) $,这样$AB $这条直线确定了一条斜率$k &lt; 0 $的一次函数$g ( x ) $,不妨设$h ( x ) = f ( x ) - g ( x ) $,容易发现$h ( a ‘ ) &gt; 0 , h ( b ‘ ) &lt; 0 $,所以可以取一个变号零点$x _\epsilon = \sup \{ x | h ( x ) \geq 0 , x \in [ a ‘ , b ‘ ] \} $.当$\epsilon $取值不一样的时候当然可以取不同的而且是不可数个$x _\epsilon $,此时可以取出一个无理数$x _0 $,那考虑$\varlimsup _{ \Delta x \rightarrow 0 + 0  } \frac { f ( x _0 + \Delta x ) - f ( x _0 )  } { \Delta x  } = \varlimsup _{ \Delta x \rightarrow 0 + 0  } \frac { h ( x _0 + \Delta x )  } { \Delta x  } + k \leq k &lt; 0 $,这就矛盾了.</p>
<h5><span id="有界定理">有界定理</span></h5><p>设$f ( x ) $在$[ a , b ] $上有定义且连续,$\exists A , B $,$\forall x _0 \in [ a , b ] , A \leq f ( x _0 ) \leq B $.</p>
<p>可以用之前的有限覆盖定理所证明的闭区间上的局部有界函数是有界函数,然后还有另一个证明:</p>
<p>假设无界,则存在一个数列$\{ x _n \} $使得$| f ( x _n ) | \rightarrow + \infty $.由于$\{ x _n \} $是有界数列,其一定有收敛子列$\{ x ‘ _n \} $收敛于$x ‘ $,当然$| f ( x ‘ ) | = \lim _{ n \rightarrow \infty  } | f ( x _n ) | = + \infty $,这当然产生了矛盾.</p>
<p>还有一个闭区间套的证明方式:你考虑每次区间分两半,一定有其中一半是无界的,然后做闭区间套.</p>
<h5><span id="最值定理">最值定理</span></h5><p>设$f ( x ) $在$[ a , b ] $上有定义且连续,$\exists x _1 , x _2 \in [ a , b ] $,$\forall x _0 \in [ a , b ] , f ( x _1 ) \leq f ( x _0 ) \leq f ( x _2 ) $.</p>
<p>考虑先用有界定理得知$f ( x ) \in C [ a , b ] $有界,然后就可以拿到其上下确界$m \leq f ( x ) \leq M $,只需证明其上下确界均能取到就行.</p>
<p>反证,考虑若$M $取不到,那考虑定义$g ( x ) = \frac { 1  } { M - f ( x )  } &gt; 0 $,根据有界定理$g ( x ) $有上界$C $,于是$\frac { 1  } { M - f ( x )  } \leq C \Rightarrow f ( x ) \leq M - \frac { 1  } { C  } $,矛盾.</p>
<p>或者我们知道$M $是上确界则$M - \frac { 1  } { n  } $不是上界,取出$\{ x _n \} $使得$M - \frac { 1  } { n  } &lt; f ( x _n ) \leq M $,那么$\{ x _n \} $必然有收敛子列,设其收敛于$x _0 $,那么根据夹逼定理必然能得到$f ( x _0 ) = M $.</p>
<h5><span id="康托尔定理">康托尔定理</span></h5><p>有界闭区间上的连续函数必然一致连续.</p>
<p>考虑反证,反命题是$\exists \epsilon _0 &gt; 0 , \forall n &gt; 0 , \exists x ‘ _n , x ‘ ‘ _n , | x ‘ _n - x ‘ ‘ _n | &lt; \frac { 1  } { n  } , | f ( x ‘ _n ) - f ( x ‘ ‘ _n ) | \geq \epsilon _0 $.</p>
<p>用致密性定理,取出$\{ x ‘ _n \} $的收敛子列,可以拿到$\{ x ‘ ‘ _n \} $与其对应的数列,二者必然同时收敛于一个值$x _0 $,那么$| f ( x ‘ _n ) - f ( x ‘ ‘ _n ) | = 0 \geq \epsilon _0 $,当然矛盾.</p>
<p>如果是开区间呢?如果$f ( x ) \in C ( a , b ] $,其在开区间$( a , b ] $上一致连续,这需要等价于$\forall x _n \in ( a , b ) , x _n \rightarrow a $,$\{ f ( x _n ) \} $是柯西列(也就是$f ( a + 0 ) $极限存在),由此看出开区间上的一致连续函数必然能延拓称闭区间上的连续函数.</p>
<h4><span id="不动点和周期点">不动点和周期点</span></h4><p>定义$f ( x ) $的<strong>不动点</strong>$\text { fix  } f ( x ) \Leftrightarrow f ( x ) = x $,<strong>周期点</strong>$P _n = \{ x | f ^{ [ n ]  } ( x ) = x \land \forall 0 &lt; m &lt; n , f ^{ [ m ]  } ( x ) \ne x \} $,其中$f ^{ [ n ]  } ( x ) $表示将$f $复合$n $次.</p>
<h5><span id="压缩映照原理">压缩映照原理</span></h5><p>设$f ( x ) $在$[ a , b ] $上有定义并且$f ( [ a , b ] ) \subseteq [ a , b ] $,并且满足$\exists 0 \leq q &lt; 1 , \forall x , y \in [ a , b ] , | f ( x ) - f ( y ) | \leq q | x - y | $,那么$[ a , b ] $上存在唯一的不动点$c $.</p>
<p>任取一个点$x _0 \in [ a , b ] $,考虑$x _{ n + 1  } = f ( x _n ) $,然后尝试判断这个数列的极限,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| x _{ n + 1  } - x _n | & = | f ( x _n ) - f ( x _{ n - 1  } ) | & \leq q | x _n - x _{ n - 1  } | & \leq q ^{ n  } | x _1 - x _0 | \\
| x _{ n + p  } - x _n | & \leq \sum _{ k = 1  } ^p | x _{ n + k  } - x _{ n + k - 1  } | \\
& \leq \sum _{ k = 0  } ^{ p - 1  } q ^{ n + k  } | x _1 - x _0 | & = | x _1 - x _0 | q ^n \frac { 1 - q ^{ p  }  } { 1 - q  } 
\end{aligned}</script><p>所以$\{ x _n \} $是柯西列,其极限存在,取$c = \lim x _n $,容易发现:</p>
<script type="math/tex; mode=display">
| f ( x _n ) - f ( c ) | \leq q | x _n - c |</script><p>两边取极限得知$f ( c ) = c $,于是$c $是一个不动点.如果还存在一个不动点$c ‘ \ne c $,那么:</p>
<script type="math/tex; mode=display">
| c - c ' | = | f ( c ) - f ( c ' ) | \leq q | c - c ' |</script><p>不符.</p>
<h5><span id="李-约克定理">李-约克定理</span></h5><p>对于一个$f ( x ) \in C [ a , b ] $,如果$P _3 \ne \emptyset $,那么$\forall n \in \mathbb { N  } _+ $,$P _n \ne \emptyset $.</p>
<h6><span id="引理一">引理一</span></h6><p>设$J $是实区间,$G : J \rightarrow \mathbb { R  } $是连续函数,$\forall I = [ a , b ] \subseteq G ( J ) $,$\exists Q = [ a ‘ , b ‘ ] \subseteq J , G ( Q ) = I $.</p>
<p>根据介值定理,当然存在一对点$p , q $,$I = [ G ( p ) , G ( q ) ] $.不妨设$p &lt; q $,那么$a ‘ = \sup \{ x \in [ p , q ] | G ( x ) = G ( p ) \} , b ‘ = \inf \{ x \in [ a ‘ , q ] | G ( x ) = G ( q ) \} $即可.</p>
<p>换言之,我们可以拿到一个区间使得它的像正是我们想要的区间.感性理解的话我们可以对一个区间求原像并且原像当然也是一个区间.那我们自然可以对区间进行迭代.这样迭代的区间有什么性质么?</p>
<h6><span id="引理二">引理二</span></h6><p>设$J $是实区间,$F : J \rightarrow J $是连续函数,取一列闭区间$I _n $,满足$\forall n \geq 0 , I _n \subseteq J , I _{ n + 1  } \subseteq F ( I _n ) $.不妨把这种区间列记作$I _0 \Rightarrow I _1 \Rightarrow I _2 \Rightarrow \cdots $.</p>
<p>那么我们可以找到一列闭区间$I _0 = Q _0 \supseteq Q _1 \supseteq Q _2 \cdots $,$\forall n \geq 0 $,有$F ^{ [ n ]  } ( Q _n ) = I _n $.</p>
<p>考虑数学归纳,假设对于$\leq n $的都已经满足,现在有$I _{ n + 1  } \subseteq F ( I _n ) = F ^{ [ n + 1 ]  } ( Q _n ) $,令$G = F ^{ [ n + 1 ]  } $然后用引理一就可以.</p>
<p>这个引理的意义在于,$\{ I _n \} $当然不必是一条链,但是只要其满足一定的性质,我们就可以在它们中找到一条链,也就是每迭代一次都可能会将射出去的那个集合变小,或者是射出需要的集合所需要的初始集合变小.</p>
<p>这个当然也是给我们求原像的机会.我们尝试感性理解一下这个在干什么:</p>
<p>如果一个函数操作完一个区间后会把这个区间变小,那显然我如果想求$F ^{ [ - n ]  } ( I ) $,$n $越大得到的原像就越大对吧.反之,如果会把这个区间变大,那$n $越大得到的原像就越小对吧.</p>
<p>这个讨论显然是不好的,我们得想办法刻画一下这个东西.那当然要在这里蕴含一个$F $本身.</p>
<p>于是用上面的定义会发现,即使$F $会把这个区间扩张到奇怪的大小,只要我们能把它缩回去,那不断取原像的过程照样是可行的.</p>
<h6><span id="引理三">引理三</span></h6><p>设$J $是实区间,$G : J \rightarrow \mathbb { R  } $是连续函数,$I \subseteq J $是闭区间,并且$I \subseteq G ( I ) $或者$G ( I ) \subseteq I $,都可以推出$\exists p \in I , G ( p ) = p $.</p>
<p>只需构造函数$H ( x ) = x - G ( x ) $然后用介值定理即可.</p>
<h6><span id="李-约克定理">李-约克定理</span></h6><p>设$q _3 \in P _3 $,则$F ( q _3 ) , F ( F ( q _3 ) ) \in P _3 $,容易看出,这三个点中必然有一个点$a \in P _3 $,使得$a , b = F ( a ) , c = F ( F ( a ) ) $这三个数单调递增或单调递减.不妨设$a &lt; b &lt; c $.</p>
<p>下面证明对于任意$k &gt; 0 $,存在$k $周期点.</p>
<p>我们接下来取$K = [ a , b ] , L = [ b , c ] $,立刻由介值定理发现$F ( K ) \supseteq L $以及$F ( L ) \supseteq [ a , c ] = K \cup L $.</p>
<p>接下来我们开始构造一列满足引理二的闭区间,我们考虑:</p>
<ol>
<li><p>当$k = 1 $的时候,我们直接取$\forall n , I _n = L $.</p>
</li>
<li><p>当$k &gt; 1 $的时候,取$I _n = \begin{cases}K &amp; n \equiv 0 \pmod { k  } \ L &amp; \text { otherwise  } \end{cases} $</p>
</li>
</ol>
<p>现在我们可以用引理二立刻拿到区间列$\{ Q _n \} $,我们发现$Q _k \subseteq Q _0 = I _0 = I _k = F ^{ [ k ]  } ( Q _k ) $,根据引理三立刻得到$\exists q \in Q _k , F ^{ [ k ]  } ( q ) = q $.</p>
<p>那么这个$q $有没有可能存在更小的周期$d $呢?如果有的话,不妨取其中最小的那个$d $,辗转相除一下自然有$d | k $,那么当然要有$F ^{ [ k ]  } ( q ) = F ^{ [ k - d ]  } ( q ) = q $.</p>
<p>此时我们发现$q \in Q _k \subseteq Q _{ k - d  } $,$q \in I _{ k  } \cap I _{ k - d  } = K \cap L = \{ b \} $,于是$F ^{ [ k ]  } ( q ) = b , F ^{ [ k + 1 ]  } ( q ) = c , F ^{ [ k + 2 ]  } ( q ) = a $.</p>
<p>这说明此时$d = 3 $.</p>
<p>而当$k \geq 4 $的时候,$F ^{ [ k + 2 ]  } ( q ) = a \notin L $,这当然与$I _{ k + 2  } = L $矛盾.</p>
<p>仔细观察一下上面的过程,我们到底依赖于什么东西得到了这个?</p>
<p>首先找到$q $使得$F ^{ [ k ]  } ( q ) = q $这个其实反而并不是最主要的,因为只要$F ( q ) = q $那么显然$F ^{ [ k ]  } ( q ) = q $,真正离谱的是竟然要让这个点在之前从未跳到过$q $.这也是这个证明的最精髓的部分,那就是证明任何一个$d &lt; q $都不是周期.</p>
<p>那我们考虑取一个区间(也就是$K $),在$K $中取一个合法的$q $,然后我们只要找到一个闭区间(也就是$Q _k \subseteq K $),使得它当且仅当复合$k $次的时候才会打到$K $上,在其它时候都得打在$K $的外面(在这里是$L $)上,那自然是可行的了对吧.而数字$3 $恰好完美地给出了这个构造.</p>
<p>如果我们再总结一下上面的过程,我们需要找到两个区间$K , L $,找到一个$Q _k \subseteq K $,使得$F ^k ( Q _k ) $可以打到$K $上但是对于$d &lt; k $,$F ^d ( Q _k ) $打到$L $上.于是根据引理三其存在$k $周期点,但是几乎不可能存在$d $周期点(这里就需要简单判断一下$L \cap K $的部分了)</p>
<p>这样的$K $和$L $怎么构造呢?如果我们构造$F ( K ) $打到$L $上,$F ( L ) $打到$K $上显然是吧不合理的,那就可以一个打到另一个,另一个打到全集上再用引理一缩一下,这个看上去合理多了.这当然就是$F ( K ) \supseteq L $以及$F ( L ) \supseteq [ a , c ] = K \cup L $.</p>
<h5><span id="sharkovskii定理">Sharkovskii定理</span></h5><p>定义如下的一种序关系$\prec $(称为Sharkovskii序):</p>
<script type="math/tex; mode=display">
\begin{gathered}
3 \prec 5 \prec 7 \prec \cdots \\
\prec 2 \times 3 \prec 2 \times 5 \prec \cdots \\
\cdots \\
\prec 2 ^k \times 3 \prec 2 ^k \times 5 \prec \cdots \\
\cdots \\
\cdots \prec 2 ^n \prec 2 ^{ n - 1  } \prec \cdots \prec 4 \prec 2 \prec 1 
\end{gathered}</script><p>对于$f ( x ) \in C [ l , r ] , f : [ l , r ] \rightarrow [ l , r ] $.那么如果$m \prec n , P _m \ne \emptyset \Rightarrow P _n \ne \emptyset $.</p>
<p>(首先发现当然存在不动点)</p>
<p>这咋办呢?我们刚才用了$3 $的最重要的性质就是$3 $个点可以排成有序的一列,如果有类似的引理,那我们就可以尝试推广上面的结论.</p>
<h6><span id="引理">引理</span></h6><p>设$f : I \rightarrow I $是连续函数,$f $有$2 n + 1 $周期点但无更小非一奇数阶周期点,我们取出其一个周期轨$x _0 \rightarrow x _1 \rightarrow \cdots x _{ 2 n  } $,必有以下两者成立其一:</p>
<ol>
<li><p>$x _{ 2 n  } &lt; x _{ 2 n - 2  } &lt; \cdots &lt; x _2 &lt; x _0 &lt; x _1 &lt; \cdots &lt; x _{ 2 n - 3  } &lt; x _{ 2 n - 1  } $.</p>
</li>
<li><p>$x _{ 2 n  } &gt; x _{ 2 n - 2  } &gt; \cdots &gt; x _2 &gt; x _0 &gt; x _1 &gt; \cdots &gt; x _{ 2 n - 3  } &gt; x _{ 2 n - 1  } $.</p>
</li>
</ol>
<p>这个引理怎么证明呢?考虑把周期轨排一下序然后归纳,我们不妨假设排好序后的结果是$y _0 &lt; y _1 &lt; \cdots &lt; y _{ 2 n  } $.</p>
<p>如果引理成立,(第一种情况下)取$I _0 = [ x _0 , x _1 ] $,则$I _0 \Rightarrow I _0 $.容易发现其实只有$I _0 $有这个性质,那我们不妨来看看满足$[ y _k , y _{ k + 1  } ] \Rightarrow [ y _k , y _{ k + 1  } ] $的情况是什么样子的,尝试去满足$[ f ( y _{ k + 1  } ) , f ( y _{ k  } ) ] \supseteq [ y _k , y _{ k + 1  } ] $.这个时候注意到我们可以把所有点分成两类:满足$f ( y _i ) \geq y _{ i + 1  } $(称为$\alpha $类点,容易见到这里也就等价于$f ( y _i ) &gt; y _i $)和$f ( y _i ) \leq y _{ i - 1  } $(称为$\beta $类点)的.那我们就是要找到一个$k $使得$y _k $是$\alpha $类点并且$y _{ k + 1  } $是$\beta $类点.</p>
<p>由于$f ( y _0 ) \geq y _1 , f ( y _{ 2 n  } ) \leq y _{ 2 n - 1  } $,这两类点显然都有,那就一定存在交界的地方,这样我们就可以拿出这个分界的地方记作$I _0 = [ y _k , y _{ k + 1  } ] $,其中$y _k $是$\alpha $类点,$y _{ k + 1  } $是$\beta $类点.</p>
<p>我们不妨定义一个集合$S $的张成区间$A $为$A = [ \inf S , \sup S ] $,那我们现在取$S _0 = \{ y _k , y _{ k + 1  } \} $,设周期轨为$O _f = \{ x _0 , \cdots x _{ 2 n  } \} $,我们递归定义$S _{ k + 1  } = f ( A _k ) \cap O _f $,容易根据上面对$S _0 $的构造发现$S _0 \subsetneq S _1 $,并且$S _k $中因为取了一段极大的区间(但并没有包含所有周期点),所以一定能跳出这个区间(不然这个区间内部就可以自己射自己),所以$S _k \subsetneq S _{ k + 1  } $.</p>
<p>那由此我们当然可以得到一条链:</p>
<script type="math/tex; mode=display">
S _0 \subsetneq S _1 \subsetneq \cdots \subsetneq S _t = O _f</script><p>按理来说应该有$t = 2 n - 1 $(这就会给出每次$S $扩张只会多一个数),让我们先来证明这个结论:</p>
<p>反证,假设$t &lt; 2 n - 1 $,尝试找到一个更小的奇数周期来推出矛盾,不妨尝试找到一个$2 n - 1 $的周期(当然,如果$2 n + 1 = 3 $的话,这个结论我们在李约克定理已经证明了,所以下面假设$2 n + 1 \geq 5 $).</p>
<p>我不说你也知道我要干啥,我们考虑在末尾补$2 n - t - 1 $个$A _t $,并把最后一个缩成$A _0 $,当然有:</p>
<script type="math/tex; mode=display">
A _0 \Rightarrow A _1 \Rightarrow A _2 \Rightarrow \cdots \Rightarrow A _t \Rightarrow A _t \supseteq A _0</script><p>但这样并不太行,因为这些区间的交不是空的,我们起码得把其中的一个区间给挪出去,不妨考虑改掉最后一个$A _t $,试图取一个$l \ne k $使得$[ y _l , y _{ l + 1  } ] \Rightarrow A _0 = [ y _k , y _{ k + 1  } ] $.如果我们结合一下下面的主定理的证明部分,其实我们可以发现这里的$[ y _l , y _{ l + 1  } ] $也就是$I _{ 2 n - 1  } $.</p>
<p>我们上面已经保证了$f ( y _{ k + 1  } ) \leq y _k $,如果有$f ( y _{ k + 2  } ) \geq y _{ k + 1  } $,那当然可以取$l = k + 1 $.也就是如果我们的这一列点类别中出现了$\alpha \beta \alpha $这样的结构就完事了.如果找不到,那说明$f ( y _{ k + 2  } ) \leq y _{ k + 1  } $.我们继续往后找,如果可以遇到第一个$f ( y _i ) \geq y _{ k + 1  } $,那$[ y _{ i - 1  } , y _i ] $自然是满足条件的.如果一直都找不到,说明始终有$f ( y _i ) &lt; y _{ k + 1  } \leq y _{ i - 1  } , i \in [ k + 2 , 2 n ] $,那说明后面全是$\beta $点.</p>
<p>同理如果出现了$\beta \alpha \beta $这样的结构也找到了.不然类似同理,如果一直找不到就说明前面全是$\alpha $点,前面的点始终满足$f ( y _i ) \geq y _{ k + 1  } , i \in [ 0 , k ] $.</p>
<p>这已经推导出了矛盾,因为我们发现前面的点射到后面,后面的点射到前面,问题在于前面有$k + 1 $个点,后面有$2 n - k $个点,于是$k + 1 = 2 n - k \Rightarrow 2 k + 1 = 2 n $,这导出了矛盾.</p>
<p>所以确实可以找到这样的$l \ne k , [ y _l , y _{ l + 1  } ] \Rightarrow [ y _k , y _{ k + 1  } ] $,那我们用上面的区间列自然可以推导出存在一个$2 n - 1 $周期点(或者其因子周期点,不过那也导出矛盾了).</p>
<p>于是$t = 2 n - 1 $,这表示我们拿到的这条链$S _0 \subsetneq S _1 \subsetneq \cdots \subsetneq S _t = O _f $每次只增加一个元素.如果$S _0 $到$S _1 $是只增加了一个元素,当然说明$f ( y _k ) = y _{ k + 1  } $或者$f ( y _{ k + 1  } ) = y _k $.两者的证明是一样的,不妨设$f ( y _k ) = y _{ k + 1  } $.</p>
<p>此时我们取$x _0 = y _k , x _1 = y _{ k + 1  } $,此时其实也可以发现$x _2 &lt; x _0 &lt; x _1 $.并且根据上面的说法,我们知道$A _{ k  } \subsetneq A _{ k + 1  } $,那这个扩张一定是每次在边界上往外跑一个,也就是每次取一个新的迭代出来的结果扔到左边或者扔到右边.</p>
<p>网络上有关于这一点的证明往往是反证,假设不按规则走的话然后去尝试构造三周期点推到矛盾,但我们这里给出另一个证明方法:</p>
<p>考虑由于每次只增大一个数,那么如果我们能证明这一列$y $形如$\alpha \cdots \alpha \beta \cdots \beta $的形式就做完了,这等价于$I _0 $的唯一性.</p>
<p>假设还有另一个区间也满足要求,对于这个新的区间,我们设其是$[ y _l , y _{ l + 1  } ] $,我们再拿一个周期点$y _{ l + 2  } $出来,假设这三个数按照顺序是$a &lt; b &lt; c $,那么根据上面的结论一定有$b \rightarrow c \rightarrow a $或者$b \rightarrow a \rightarrow c $成立,这就说明$b $被夹在了中间.而我们从一个$I _0 $扩张当然是逐步的,会将$x _3 , x _4 \cdots $逐个加入,这必然意味着在$b $加入之前,$a , c $中已经有一个加进去了,但这是不可能的,只有$b $加入后才能把$a , c $给加进去.</p>
<h6><span id="sharkovskii定理">sharkovskii定理</span></h6><p>有了引理就可以开始类比了,不妨假设$x _{ 2 n  } &lt; x _{ 2 n - 2  } &lt; \cdots &lt; x _2 &lt; x _0 &lt; x _1 &lt; \cdots &lt; x _{ 2 n - 3  } &lt; x _{ 2 n - 1  } $.</p>
<p>现在我们要取区间列了,显然有一些奇偶对跳的现象,事实上我们取$I _0 = [ x _0 , x _1 ] , I _{ 2 k - 1  } = [ x _{ 2 k  } , x _{ 2 k - 2  } ] , I _{ 2 k  } = [ x _{ 2 k - 1  } , x _{ 2 k + 1  } ] $显然就是满足条件的.而且这些区间除了端点外完全不相交(而且任意三个区间的交都是空集).这一列一共有$2 n $个区间.我们事实上可以取$J = [ x _{ 0  } , x _{ 2 n - 1  } ] = \bigcup I _{ 2 k  } $放到整个区间的最后.</p>
<p>接下来我们用这些东西去对于多种情况来对跳.</p>
<p><strong>Case1</strong></p>
<p>(假设$2 n + 1 $是最小的非空的非一奇数周期)首先证明$P _{ 2 n + 1  } \ne \emptyset \Rightarrow \forall 0 &lt; k , P _{ k + 2 n  } \ne \emptyset $.</p>
<p>在前面补$k $个$I _0 $,在最后也补一个$I _0 $,构造区间列:</p>
<script type="math/tex; mode=display">
I _0 \Rightarrow I _0 \Rightarrow \cdots \Rightarrow I _0 \Rightarrow I _1 \Rightarrow I _2 \Rightarrow \cdots \Rightarrow I _{ 2 n - 1  } \Rightarrow I _0</script><p>也就是在前面补$I _0 $直到整个区间列的数量为$k + 2 n + 1 $,此时当然存在$x _0 \in Q _{ k + 2 n  } $使得$f ^{ [ k + 2 n ]  } ( x _0 ) = x _0 $,只需证明$\nexists d | ( k + 2 n ) $,$f ^{ [ d ]  } ( x _0 ) = x _0 $即可.这当然好证,因为$d \leq \frac { k + 2 n  } { 2  } \leq \max ( k , 2 n ) $,因为你只需要把它卡在那一堆$I _0 $和$I _k $的分界线上就行.</p>
<p><strong>Case2</strong></p>
<p>(假设$2 n + 1 $是最小的非空的非一奇数周期)接下来我们来证明$P _{ 2 n + 1  } \ne \emptyset \Rightarrow \forall 0 &lt; m , P _{ 2 m  } \ne \emptyset $.</p>
<p>当$2 m &gt; 2 n + 1 $的时候我们已经证完了,接下来考虑$2 m &lt; 2 n + 1 $的情况.</p>
<p>由于$\forall k , I _{ 2 n - 1  } \Rightarrow I _{ 2 k  } $,我们考虑取出$2 m + 1 $个区间列,恰好有:</p>
<script type="math/tex; mode=display">
I _{ 2 n - 2 m  } \Rightarrow I _{ 2 n - 2 m + 1  } \Rightarrow \cdots \Rightarrow I _{ 2 n - 1  } \Rightarrow I _{ 2 n - 2 m  }</script><p>接下来就是简单说明的过程了.</p>
<p><strong>Case3</strong></p>
<p>接下来考虑证明:$P _{ 4  } \ne \emptyset \Rightarrow P _2 \ne \emptyset $.</p>
<p>这个证明就比较无聊了,我们进行暴力讨论,不妨假设$a &lt; b &lt; c &lt; d $,那么:</p>
<ol>
<li>$a \rightarrow b \rightarrow c \rightarrow d \rightarrow a $.</li>
</ol>
<p>此时$[ a , b ] \Rightarrow [ b , c ] \Rightarrow [ c , d ] \Rightarrow [ a , d ] \supseteq [ a , b ] $,于是可证明有三周期点,当然有二周期点.</p>
<ol>
<li>$a \rightarrow b \rightarrow d \rightarrow c \rightarrow a $.</li>
</ol>
<p>此时$[ a , b ] \Rightarrow [ b , d ] \Rightarrow [ c , d ] \Rightarrow [ a , c ] \supseteq [ a , b ] $,于是可证明有三周期点,当然有二周期点.</p>
<ol>
<li>$a \rightarrow c \rightarrow b \rightarrow d \rightarrow a $.</li>
</ol>
<p>此时$[ a , b ] \Rightarrow [ c , d ] \Rightarrow [ a , b ] $,当然有二周期点.</p>
<ol>
<li>$a \rightarrow c \rightarrow d \rightarrow b \rightarrow a $.</li>
</ol>
<p>此时$[ a , c ] \Rightarrow [ c , d ] \Rightarrow [ b , d ] \Rightarrow [ a , b ] \Rightarrow [ a , c ] \supseteq [ b , c ] \Rightarrow [ a , d ] \supseteq [ a , c ] $.于是有五周期点,于是有二周期点.</p>
<ol>
<li>$a \rightarrow d \rightarrow b \rightarrow c \rightarrow a $.</li>
</ol>
<p>此时$[ a , b ] \Rightarrow [ c , d ] \Rightarrow [ a , b ] $,当然有二周期点.</p>
<ol>
<li>$a \rightarrow d \rightarrow c \rightarrow b \rightarrow a $.</li>
</ol>
<p>此时$[ b , c ] \Rightarrow [ a , b ] \Rightarrow [ a , d ] \supseteq [ b , c ] $,于是有二周期点.</p>
<p><strong>Case4</strong></p>
<p>接下来考虑证明:$P _{ 2 ^{ n + 1  }  } \ne \emptyset \Rightarrow P _{ 2 ^n  } \ne \emptyset $.</p>
<p>考虑上面命题等价于$f ^{ [ 2 ^{ n - 1  } ]  } $有四周期点,则其有二周期点.</p>
<p><strong>Case5</strong></p>
<p>接下来考虑证明:$P _{ 2 ^{ n  } p  } \ne \emptyset \Rightarrow P _{ 2 ^n q  } \ne \emptyset $,其中$p , q \in \text { odd  } , p &lt; q $.</p>
<p>考虑$f ^{ [ 2 ^n ]  } $有$p $周期点,当然也就有$q $周期点.</p>
<p><strong>Case6</strong></p>
<p>接下来考虑证明:$P _{ 2 ^{ n  } p  } \ne \emptyset \Rightarrow P _{ 2 ^m q  } \ne \emptyset $,其中$p , q \in \text { odd  } , m &gt; n $.</p>
<p>考虑$f ^{ [ 2 ^n ]  } $有$p $周期点,当然也就有$q 2 ^{ m - n  } $周期点.</p>
<p><strong>Case7</strong></p>
<p>接下来考虑证明:$P _{ 2 ^{ n  } p  } \ne \emptyset \Rightarrow P _{ 2 ^m  } \ne \emptyset $,其中$p \in \text { odd  } $.</p>
<p>选取$N = \max ( n + 1 , m + 1 ) $,则考虑$f ^{ [ 2 ^n ]  } $有$p $周期点,则其有$2 ^{ N - n  } $周期点,$P _{ 2 ^N  } \ne \emptyset $.于是$P _{ 2 ^m  } \ne \emptyset $.</p>
<h3><span id="导数">导数</span></h3><p>设函数$f ( x ) $在一个区间$( a , b ) $上有定义,对于给定的$x _0 \in ( a , b ) $,考虑增量$\Delta x \ne 0 \land x _0 + \Delta x \in ( a , b ) $,则$\Delta y = f ( x _0 + \Delta x ) - f ( x _0 ) $称为关于$\Delta x $的<strong>增量</strong>.若极限$\lim _{ \Delta x \rightarrow 0  } \frac { \Delta y  } { \Delta x  } \ $存在则称这个函数在$x _0 $处<strong>可导</strong>,并称这个值为这个函数在$x _0 $处的<strong>导数</strong>或者<strong>微商</strong>,记作$f ‘ ( x _0 ) $或$\frac { \text { d  } f  } { \text { d  } x  } | _{ x = x _0  } $.同理可以定义出<strong>左导数</strong>和<strong>右导数</strong>.如果某个函数的导数构成一个函数,我们称这个函数为其对应的<strong>导函数</strong>.</p>
<p>显然右可导能推出右连续,左可导能推出左连续.换言之,可导一定连续.</p>
<p>但是连续不一定可导,相当漂亮的一个反例是$f ( x ) = \begin{cases}0 &amp; x = 0 \ x \sin \frac { 1  } { x  } &amp; \text { otherwise  } \end{cases} $,其在零点没有左右导数.</p>
<p>如果$f $的$n - 1 $次导数存在,记作$f ^{ ( n - 1 )  } ( x ) $,如果该函数可导则其导数称作$f ^{ ( n )  } ( x ) $.</p>
<p>如果$f ^{ ( n )  } ( x ) $在$I $上连续,则称$f \in C ^{ n  } ( I ) $.如果其任意阶可导,则称$f \in C ^{ \infty  } ( I ) $.</p>
<p>特别地,如果称一个函数是$\alpha $次可导,即$| f ( x ) - f ( y ) | \leq | x - y | ^\alpha $.其实就是Holder连续.</p>
<h4><span id="导数基本运算">导数基本运算</span></h4><p>导数也可以类似求出四则运算以及复合的法则:</p>
<ol>
<li><p>$[ cf ( x ) ] ‘ = cf ‘ ( x ) $.</p>
</li>
<li><p>$[ f ( x ) \pm g ( x ) ] ‘ = f ‘ ( x ) \pm g ‘ ( x ) $.</p>
</li>
<li><p>$[ f ( x ) g ( x ) ] ‘ = f ‘ ( x ) g ( x ) + g ‘ ( x ) f ( x ) $.</p>
</li>
<li><p>(莱布尼茨公式):$[ f ( x ) g ( x ) ] ^{ ( n )  } = \sum _{ k = 0  } ^n \binom { n  } { k  } f ^{ ( k )  } ( x ) g ^{ ( n - k )  } ( x ) $.</p>
</li>
<li><p>$[ \frac { f ( x )  } { g ( x )  } ] ‘ = \frac { f ‘ ( x ) g ( x ) - g ‘ ( x ) f ( x )  } { g ^2 ( x )  } , g ( x ) \ne 0 $.</p>
</li>
<li><p>$[ g ( f ( x ) ) ] ‘ = g ‘ ( f ( x ) ) f ‘ ( x ) $.</p>
</li>
</ol>
<p>(1)(2)比较平凡.</p>
<p>(3)(4)的证明的话,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { f ( x + \Delta x ) g ( x + \Delta x ) - f ( x ) g ( x )  } { \Delta x  } \\
& = \frac { f ( x + \Delta x ) - f ( x )  } { \Delta x  } g ( x + \Delta x ) + f ( x ) \frac { g ( x + \Delta x ) - g ( x )  } { \Delta x  } 
\end{aligned}</script><p>取一下极限就行.</p>
<p>(5)的话,其实求出$( \frac { 1  } { g ( x )  } ) ‘ $就行了,我们来看:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \frac { 1  } { g ( x )  } ) ' & = \lim _{ \Delta x \rightarrow 0  } \frac { \frac { 1  } { g ( x + \Delta x )  } - \frac { 1  } { g ( x )  }  } { \Delta x  } \\
& = \lim _{ \Delta x \rightarrow 0  } \frac { \frac { g ( x ) - g ( x + \Delta x )  } { g ( x + \Delta x ) g ( x )  }  } { \Delta x  } \\
& = \frac { - g ' ( x )  } { g ^2 ( x )  } 
\end{aligned}</script><p>对于(6),不妨设$f ( x _0 ) = y _0 $.</p>
<p>当$\Delta y \ne 0 $的时候,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lim _{ \Delta y \rightarrow 0  } \frac { g ( y _0 + \Delta y ) - g ( y _0 )  } { \Delta y  } & = g ' ( y _0 ) \\
\lim _{ \Delta y \rightarrow 0  } [ \frac { g ( y _0 + \Delta y ) - g ( y _0 )  } { \Delta y  } - g ' ( y _0 ) ] & = 0 
\end{aligned}</script><p>令$\eta ( \Delta y ) = \frac { g ( y _0 + \Delta y ) - g ( y _0 )  } { \Delta y  } - g ‘ ( y _0 ) = \frac { \Delta z  } { \Delta y  } - g ‘ ( y _0 ) , \Delta y \ne 0 $,那么$\lim _{ \Delta y \rightarrow 0  } \eta ( \Delta y ) = 0 $.</p>
<p>此时有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { \Delta z  } { \Delta x  } & = \frac { \Delta z  } { \Delta y  } \frac { \Delta y  } { \Delta x  } & = \eta ( \Delta y ) \frac { \Delta y  } { \Delta x  } + g ' ( y _0 ) \frac { \Delta y  } { \Delta x  } \\

\end{aligned}</script><p>带上极限,前者为$0 $.</p>
<p>另一种写法是,类似上面的讨论,我们这里有一些无穷小量,而且(除了$\frac { \Delta z  } { \Delta x  } $以外)也不会出现无穷小量之间的除法,用一下当然有,$g ( y + \Delta y ) - g ( y ) = ( g ‘ ( y ) + o ( 1 ) ) \Delta y , f ( x + \Delta x ) - f ( x ) = ( f ‘ ( x ) + o ( 1 ) ) \Delta x $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta z & = ( g ' ( y ) + o ( 1 ) ) \Delta y \\
& = ( g ' ( y ) + o ( 1 ) ) ( f ' ( x ) + o ( 1 ) ) \Delta x \\

\end{aligned}</script><p>两边除一下$\Delta x $两边求极限就行.</p>
<p>不难发现上面的过程等价于啥呢?等价于:</p>
<script type="math/tex; mode=display">
\frac { \text { d  } z  } { \text { d  } x  } = \frac { \text { d  } z  } { \text { d  } y  } \frac { \text { d  } y  } { \text { d  } x  }</script><h4><span id="反函数的导数">反函数的导数</span></h4><p>我们首先声称:如果$x = \varphi ( y ) , \varphi ‘ \ne 0 \Rightarrow $\varphi$有 反 函 数 $f=\varphi^{-1}</p>
<p>然后我们声称:如果$x = \varphi ( y ) \in C ( c , d ) $,并且其严格单调且连续.如果$( x _0 , y _0 ) $处其导数存在,则$f ‘ ( x _0 ) = \frac { 1  } { \varphi ‘ ( f ( x _0 ) )  } $.</p>
<p>这个可以用极限证明,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' ( x _0 ) & = \lim _{ x \rightarrow x _0  } \frac { f ( x ) - f ( x _0 )  } { x - x _0  } \\
& = \lim _{ y \rightarrow y _0  } \frac { y - y _0  } { \varphi ( y ) - \varphi ( y _0 )  } \\
& = \lim _{ y \rightarrow y _0  } \frac { 1  } { \frac { \varphi ( y ) - \varphi ( y _0 )  } { y - y _0  }  } \\
& = \frac { 1  } { \varphi ' ( y _0 )  } 
\end{aligned}</script><p>现在我们证明了反函数有导数,立即有:</p>
<script type="math/tex; mode=display">
f ( g ( x ) ) = x \Rightarrow f ' ( x ) g ' ( f ( x ) ) = 1</script><h4><span id="隐函数求导">隐函数求导</span></h4><p>这里我们不加证明地给出隐函数求导法则,也就是暂且把$y $当成$x $的函数.</p>
<h6><span id="example1">Example1</span></h6><p>举例的话,我们来看方程:</p>
<script type="math/tex; mode=display">
x = y + \epsilon \sin y</script><p>两边对$x $求导:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 & = y ' + y ' \epsilon \cos y \\
y ' & = \frac { 1  } { 1 + \epsilon \cos y  } 
\end{aligned}</script><h4><span id="参数方程的求导">参数方程的求导</span></h4><p>如果$\begin{cases}x = x ( t ) \ y = y ( t ) \end{cases} $,考虑求导$\frac { \text { d  } y  } { \text { d  } x  } $.</p>
<p>这个做法就是反函数+链式法则.当然要保证下面需要的地方导数都不是$0 $.</p>
<p>不妨设$t = t ( x ) $,当然有$y = y ( t ( x ) ) $,那么$\frac { \text { d  } y  } { \text { d  } x  } = y ‘ ( t ( x ) ) t ‘ ( x ) = \frac { y ‘ ( t )  } { x ‘ ( t )  } $.</p>
<h6><span id="example1">Example1</span></h6><p>极坐标的求导:</p>
<script type="math/tex; mode=display">
\begin{cases}
x = r ( \theta ) \cos \theta \\
y = r ( \theta ) \sin \theta 
\end{cases}</script><p>当然$\frac { \text { d  } y  } { \text { d  } x  } = \frac { r ‘ \sin \theta + r \cos \theta  } { r ‘ \cos \theta - r \sin \theta  } = \frac { \tan \theta + \frac { r  } { r ‘  }  } { 1 - \tan \theta \frac { r  } { r ‘  }  } = \tan ( \theta + \arctan ( \frac { r  } { r ‘  } ) ) = \tan \alpha $.</p>
<p>而容易发现$\tan \alpha $其实是切线和$x $轴正半轴的夹角.</p>
<h4><span id="初等函数的导数">初等函数的导数</span></h4><p>下面给出若干初等函数的导数.</p>
<h5><span id="常函数">常函数</span></h5><p>常函数的连续性显然.</p>
<p>导数有:</p>
<script type="math/tex; mode=display">
f ( x ) = c \Rightarrow f ' ( x ) = 0</script><p>证明显然.</p>
<h5><span id="三角函数">三角函数</span></h5><p>三角函数的连续性比较有意思,考虑只需证明$\sin x $连续即可,使用和差化积得到$| \sin x - \sin x _0 | = | 2 \sin \frac { x - x _0  } { 2  } \cos \frac { x + x _0  } { 2  } | \leq 2 | \sin \frac { x - x _0  } { 2  } | \leq | x - x _0 | $.</p>
<p>导数有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin ' ( x ) & = \cos ( x ) \\
\cos ' ( x ) & = - \sin ( x ) 
\end{aligned}</script><p>只给出前者的证明,后者类似,或者换个元做诱导公式也行.</p>
<p>我们有和差化积:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin ( x + \Delta x ) - \sin ( x ) \\
& = 2 \sin ( \frac { \Delta x  } { 2  } ) \cos ( x + \frac { \Delta x  } { 2  } ) 
\end{aligned}</script><p>自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lim _{ \Delta x \rightarrow 0  } \frac { \Delta y  } { \Delta x  } & = \lim _{ \Delta x \rightarrow 0  } \frac { 2 \sin ( \frac { \Delta x  } { 2  } ) \cos ( x + \frac { \Delta x  } { 2  } )  } { \Delta x  } \\
& = \lim _{ \Delta x \rightarrow 0  } \frac { \sin ( \frac { \Delta x  } { 2  } )  } { \frac { \Delta x  } { 2  }  } \cos ( x + \frac { \Delta x  } { 2  } ) \\
& = \cos ( x ) 
\end{aligned}</script><p>进一步,我们可以考虑高阶导数:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \sin x ) ^{ ( n )  } & = \sin ( x + \frac { n \pi  } { 2  } ) \\
( \cos x ) ^{ ( n )  } & = \cos ( x + \frac { n \pi  } { 2  } ) 
\end{aligned}</script><p>而考虑$( \tan x ) ‘ $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \tan x ) ' & = \lim _{ \Delta x \rightarrow 0  } \frac { \frac { \sin ( x + \Delta x )  } { \cos ( x + \Delta x )  } - \frac { \sin x  } { \cos x  }  } { \Delta x  } \\
& = \lim _{ \Delta x \rightarrow 0  } \frac { \sin \Delta x  } { \Delta x  } \frac { 1  } { \cos x \cos ( x + \Delta x )  } \\
& = \frac { 1  } { \cos ^2 x  } 
\end{aligned}</script><h5><span id="反三角函数">反三角函数</span></h5><p>使用反函数的导数公式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\arctan ' ( x ) & = \frac { 1  } { 1 + x ^2  } \\
\arccos ' ( x ) & = \frac { - 1  } { \sqrt { 1 - x ^2  }  } \\
\arcsin ' ( x ) & = \frac { 1  } { \sqrt { 1 - x ^2  }  } 
\end{aligned}</script><p>反三角函数的高阶导数比较困难,我们来看个例子:</p>
<p>考虑$y = \arctan x $,$y ‘ = \frac { 1  } { 1 + x ^2  } = \frac { 1  } { 1 + \tan ^2 y  } = \cos ^2 y $,那么$y ‘ ‘ = - 2 \cos y \sin y \times y ‘ = - \cos ^2 y \sin 2 y $,事实上容易用归纳法证明$y ^{ ( n )  } = ( n - 1 ) ! \cos ^n y \sin ( n ( y + \frac { \pi  } { 2  } ) ) $.</p>
<p>不过还有一种办法,那就是我们考虑$y ‘ = - \frac { 1  } { 2 i  } ( \frac { 1  } { i + x  } + \frac { 1  } { i - x  } ) $,用这个归纳立刻得到$y ^{ ( n )  } = - \frac { ( n - 1 ) !  } { 2 i  } ( ( i - x ) ^{ - n  } - ( - 1 ) ^n ( i + x ) ^{ - n  } ) $.</p>
<p>然而$y = \arcsin x $要麻烦得多.下面我们来看一下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
y ' & = \frac { 1  } { \sqrt { 1 - x ^2  }  } \\
( y ' ) ^2 ( 1 - x ^2 ) & = 1 \\
( 1 - x ^2 ) 2 y ' y ' ' - 2 x ( y ' ) ^2 & \equiv 0 \\
( 1 - x ^2 ) 2 y ' ' - 2 xy ' & \equiv 0 
\end{aligned}</script><p>两边求$n - 2 $次导,利用莱布尼茨公式,化简后得到:</p>
<script type="math/tex; mode=display">
( 1 - x ^2 ) y ^{ ( n )  } + ( 3 - 2 n ) xy ^{ ( n - 1 )  } - ( n - 2 ) ^2 y ^{ ( n - 2 )  } \equiv 0</script><h5><span id="指数函数">指数函数</span></h5><p>我们需要首先拿到指数为有理数的东西.</p>
<p>首先整数次方是有定义的,我们需要拿到形如$f ( x ) = a ^{ \frac { 1  } { x  }  } $的东西,这个考虑取一下反函数即可.然后二者嵌套一下得到形如$a ^{ \frac { q  } { p  }  } $的幂函数,取反一下得到形如$a ^{ - \frac { q  } { p  }  } $的幂函数.</p>
<p>然后要定义无理数指数幂,类似戴德金分割,定义$a ^x = \sup _{ q \leq x , q \in Q  } a ^q $.</p>
<p>当然我们要验证那些指数的运算法则,还有一些单调性(两个无理数之间插入两个有理数就可以拆成单调的,这里还需要讨论一下和$1 $的大小关系),这些当然都是对的.</p>
<p>然后我们就可以拿出指数函数,用反函数定义对数函数.</p>
<p>指数函数的连续性:考虑对于$f ( x ) = a ^x $,$\forall \epsilon &gt; 0 $,$\exists N &gt; 0 , a &lt; ( 1 + \epsilon ) ^N $,此时取$q _1 &lt; x _0 &lt; q _2 $,$q _2 - q _1 &lt; \frac { 1  } { N  } $,这当然能做得到.考虑$a ^{ x _0  } \leq f ( x _0 + 0 ) \leq f ( q _2 ) $,于是$1 \leq \frac { a ^{ q _2  }  } { a ^{ q _1  }  } \leq a ^{ \frac { 1  } { N  }  } \leq 1 + \epsilon $.</p>
<p>先来看最特殊的指数函数:</p>
<script type="math/tex; mode=display">
f ( x ) = e ^x \Rightarrow f ' ( x ) = e ^x</script><p>事实上我们还有:</p>
<script type="math/tex; mode=display">
f ( x ) = a ^x \Rightarrow f ' ( x ) = a ^x \ln a , a > 0</script><p>下面来看下为啥:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' ( x ) & = \lim _{ \Delta x \rightarrow 0  } \frac { a ^{ x + \Delta x  } - a ^x  } { \Delta x  } \\
& = a ^x \lim _{ \Delta x \rightarrow 0  } \frac { a ^{ \Delta x  } - 1  } { \Delta x  } \\
& = a ^x \ln a 
\end{aligned}</script><p>而高阶导数有:</p>
<script type="math/tex; mode=display">
f ( x ) = e ^{ ax  } \Rightarrow f ^{ ( n )  } = a ^n e ^{ ax  }</script><h5><span id="对数函数">对数函数</span></h5><p>先看:</p>
<script type="math/tex; mode=display">
f ( x ) = \log _a ( x ) \Rightarrow f ' ( x ) = \frac { 1  } { x \ln a  }</script><p>证明的话考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' ( x ) & = \lim _{ \Delta x \rightarrow 0  } \frac { \log _a ( 1 + \frac { \Delta x  } { x  } )  } { \Delta x  } \\
& = \lim _{ \Delta x \rightarrow 0  } \frac { \log _a ( 1 + \frac { \Delta x  } { x  } )  } { \frac { \Delta x  } { x  }  } \frac { 1  } { x  } \\
& = \frac { 1  } { x \ln a  } 
\end{aligned}</script><p>再看:</p>
<script type="math/tex; mode=display">
f ( x ) = \ln | x | \Rightarrow f ' ( x ) = \frac { 1  } { x  }</script><p>考虑$f ( x ) = \ln | x | = \frac { 1  } { 2  } \ln x ^2 $.</p>
<p>考虑对数函数的高阶导数:</p>
<script type="math/tex; mode=display">
f ( x ) = \ln x \Rightarrow f ^{ ( n )  } ( x ) = ( - 1 ) ^{ n - 1  } ( n - 1 ) ! x ^{ - n  }</script><h5><span id="幂函数">幂函数</span></h5><p>我们只需要定义$x ^{ \alpha  } = e ^{ \alpha \ln x  } $即可.</p>
<p>导数有:</p>
<script type="math/tex; mode=display">
f ( x ) = x ^\mu \Leftrightarrow f ' ( x ) = \mu x ^{ \mu - 1  }</script><p>证明的话,考虑$x = 0 $的时候根据定义显然,如果$x \ne 0 $,那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' ( x ) & = \lim _{ \Delta x \rightarrow 0  } \frac { ( x + \Delta x ) ^\mu - x ^\mu  } { \Delta x  } \\
& = \lim _{ \frac { \Delta x  } { x  } \rightarrow 0  } \frac { ( 1 + \frac { \Delta x  } { x  } ) ^\mu - 1  } { \frac { \Delta x  } { x  }  } x ^{ \mu - 1  } \\
& = \mu x ^{ \mu - 1  } 
\end{aligned}</script><p>容易发现其高阶导数是:</p>
<script type="math/tex; mode=display">
f ( x ) = x ^\alpha \Rightarrow f ^{ ( n )  } ( x ) = \alpha ^{ \underline { n  }  } x ^{ \alpha - n  }</script><h5><span id="一般初等函数">一般初等函数</span></h5><p>定理:初等函数在其定义域上除了至多一个孤立点集外,可求导并且导函数也是初等函数.</p>
<h4><span id="单调函数的导数">单调函数的导数</span></h4><p>定义右上导数$D ^+ f ( x _0 ) = \varlimsup _{ h \rightarrow 0 + 0  } \frac { f ( x _0 + h ) - f ( x _0 )  } { h  } $,同理定义右下导数$D _+ $,左上导数$D ^{ -  } $,左下导数$D _- $.那么$f ‘ ( x _0 ) $存在的充要条件当然是$D _+ = D ^+ = D _- = D ^- $并且有限.</p>
<p>下面证明单调(不妨设为单增)函数$f : [ a , b ] \rightarrow \mathbb { R  } $几乎处处有导数.</p>
<p>我们接下来尝试证明$E _1 = \{ x \in [ a , b ] \mid D ^+ f ( x ) &gt; D _- f ( x ) \} , E _2 = \{ x \in [ a , b ] \mid D ^- f ( x ) &gt; D _+ f ( x ) \} $两个集合是零测集.此时$E _1 \cup E _2 $就是零测集,而$\mathbb { R  } \setminus ( E _1 \cup E _2 ) $中的点都满足$D ^{ +  } f ( x ) \leq D _- f ( x ) \leq D ^- f ( x ) \leq D _+ f ( x ) \leq D ^+ f ( x ) $,于是它们都相等(可能等于$+ \infty $).</p>
<p>二者类似,我们下面挑选前者进行证明:</p>
<p>考虑设$A _{ r , s  } = \{ x | D ^+ f ( x ) &gt; r &gt; s &gt; D _- f ( x ) \} $,其中$r , s $都是正有理数(因为是单调递增).这当然是可数个集合,所以只需要证明其中任意一个是零测集就可以.我们取$A = A _{ r , s  } $,下面证明$A $是零测集.</p>
<p>反证,先假设$A $不是零测集,$m ^* ( A ) &gt; 0 $且有限(最大是$b - a $).</p>
<p>首先删除$A $中的孤立点集.由于孤立点集是零测集,这当然不会对答案有什么影响,也不会删成空集.这样下面可以直接假设$A $是开集.</p>
<p>根据定义,存在任意小的$h &gt; 0 $使得$\frac { f ( x - h ) - f ( x )  } { - h  } &lt; s \Rightarrow f ( x ) - f ( x - h ) &lt; sh $,那么我们取出这些$I _{ x , h  } = [ x - h , x ] $,并且满足$I _{ x , h  } \subseteq A $.它们当然构成$A $的一个Vitali覆盖.</p>
<p>根据Vitali覆盖引理我们有$\exists I _{ k  } = [ x _k - h _k , x _k ] $两两不交并且满足$m ^<em> ( A \setminus ( \bigcup I _k ) ) &lt; \epsilon $.而考虑$m ^</em> ( A \setminus ( \bigcup I _k ) ) + m ^<em> ( \bigcup I _k ) \geq m ^</em> ( A ) $,不妨令$B = \bigcup I _k $于是我们得到了$m ^<em> ( B ) &gt; m ^</em> ( A ) - \epsilon $.</p>
<p>这里我曾经以为可以直接写$m ^<em> ( B ) = m ^</em> ( A ) $,但实际上是不行的,因为我们$B $的构造依赖于$\epsilon $.</p>
<p>同时由于所有的$I _k \subseteq A $并且两两不交,我们还有$\sum _j h _j \leq m ^<em> ( A ) &lt; ( 1 + \epsilon ) m ^</em> ( A ) $.</p>
<p>而我们发现我们又有$f ( x _j ) - f ( x _j - h _j ) &lt; sh _j $,两边求和就有$\sum f ( x _j ) - f ( x _j - h _j ) &lt; sm ^* ( A ) $.</p>
<p>而接下来考虑$B $,$B $当然仍然是一个开集.对于$\forall y \in B $,当然应该存在一个任意小的$k &gt; 0 $使得$f ( y + k ) - f ( y ) &gt; rk $.取出这些区间$[ y , y + k ] $当然仍然构成$B $的一个Vitali覆盖.类似上面,我们当然有结论$\sum f ( y _j + k _j ) - f ( y _j ) &gt; rm ^<em> ( B ) &gt; r ( m ^</em> ( A ) - \epsilon ) $.但考虑$[ y _j , y _j + k _j ] $一定被包含在某个$[ x _j - h _j , x _j ] $中,又根据函数的单调性,自然可以知道$sm ^<em> ( A ) &gt; \sum f ( x _j ) - f ( x _j - h _j ) \geq \sum f ( y _j + k _j ) - f ( y _j ) &gt; r ( m ^</em> ( A ) - \epsilon ) $.于是$sm ^<em> ( A ) \geq rm ^</em> ( A ) $,这当然导出$m ^* ( A ) = 0 $,与条件不符!</p>
<p>接下来的修补工作是证明$E = \{ x | f ‘ ( x ) = + \infty \} $的集合是零测集.这意味着对于$\forall N &gt; 0 , \exists \Delta x &gt; 0 , f ( x + \Delta x ) - f ( x ) &gt; N \Delta x $,取$[ x , x + \Delta x ] $当然仍然是$E $的一个Vitali覆盖.同样根据Vitali覆盖引理得知$\sum \Delta x &gt; m ^<em> ( E ) - \epsilon $,如果$m ^</em> ( E ) \ne 0 $,做Vitali覆盖后对$f ( x + \Delta x ) - f ( x ) &gt; N \Delta x $左右两边分别求和,左边是有界,上界当然是$f ( b ) - f ( a ) $,但右边无界.这就给出矛盾了.</p>
<p>理解一下上面的过程的话就是,由于该单调函数定义在一个闭区间上,那么这个单调函数应该有某种最值性.这必然会限制其大小,而如果哪里的大小崩坏了导致没有导数,这些地方的外测度一定要是$0 $,不然整体的最值性无法保证.</p>
<h4><span id="李氏连续函数的导数">李氏连续函数的导数</span></h4><p>注意到李氏连续的定义$| f ( x ) - f ( y ) | \leq L | x - y | $,注意到$f ( x ) = f ( x ) - Lx + Lx $.</p>
<p>如果钦定$x &lt; y $,那李氏连续等价于$f ( y ) - f ( x ) \leq | f ( x ) - f ( y ) | \leq L ( y - x ) , f ( y ) - Ly \leq f ( x ) - Lx $,于是$f ( x ) - Lx $是单调降函数,当然几乎处处可导,而$Lx $作为初等函数当然处处可导.</p>
<p>李氏连续几乎等价于导函数有界.</p>
<p>下面我们证明:如果$f ( x ) $在$[ a , b ] $上可导,那么$| f ‘ | \leq L \Leftrightarrow | f ( x _1 ) - f ( x _2 ) | \leq L | x _1 - x _2 | $.</p>
<p>右推左是显然的,除一下然后取极限即可.</p>
<p>左推右也很显然,只需用一下拉格朗日中值定理即可.</p>
<h4><span id="微分">微分</span></h4><p>设$y = f ( x ) $在$x _0 $处有定义,假设有一个常数$A $使得$f ( x _0 + \Delta x ) - f ( x _0 ) = A \Delta x + o ( \Delta x ) , \Delta x \rightarrow 0 $,称$f ( x ) $在$x _0 $处<strong>可微</strong>,并把$\text { d  } f = \text { d  } y = A \Delta x $称为$f ( x ) $在$x _0 $处的<strong>微分</strong>,由于后半部分是一个更高阶的无穷小量,我们说微分是函数改变量的线性主要部分.</p>
<h5><span id="微分与导数微商">微分与导数(微商)</span></h5><p>结合导数极限的定义,就可以得到$\text { d  } y = f ‘ ( x ) \text { d  } x $,$f ‘ ( x ) = \frac { \text { d  } y  } { \text { d  } x  } \ $.这就是我们将导数称作<strong>微商</strong>的原因.换言之,一阶可微一定一阶可导,反之亦然.但容易发现,可微的定义要比可导好得多,可微可以往外拓展到平面等拓扑结构,但可导不行.</p>
<p>一阶微分具有<strong>形式不变性</strong>.换言之就是,我们在求导的时候是需要选定一个自变量的,当选定的自变量是$y $的时候,根据上面自然会有$z = g ( y ) , \text { d  } z = g ‘ ( y ) \text { d  } y $.</p>
<p>但是当选定的自变量不是$y $的时候,上面的形式是同样成立的.我们下面证明这个结论,令$y = f ( x ) $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
[ g ( f ( x ) ) ] ' & = g ' ( f ( x ) ) f ' ( x ) \\
\text { d  } z & = g ' ( f ( x ) ) f ' ( x ) \text { d  } x \\
\text { d  } z & = g ' ( y ) \text { d  } y \\

\end{aligned}</script><p>必须提出高阶微分不存在形式不变性,换句话说,$z = g ( y ) $的二阶微分的形式不等价于$z = g ( y = f ( x ) ) $的二阶微分,你不能乱换元.</p>
<p>一般将高阶微分记作$\frac { \text { d  } ^n y  } { \text { d  } x ^n  } $.</p>
<h4><span id="导函数的性质">导函数的性质</span></h4><h5><span id="费马定理">费马定理</span></h5><p>如果$f ( x ) $在邻域$U ( \xi , \delta ) $上有定义,$\xi $是其的一个极值点,在$\xi $处存在导数,那么$f ‘ ( \xi ) = 0 $.</p>
<p>不妨考虑最大值情况,$f ‘ ( \xi ) = \lim _{ \Delta x \to + 0  } \frac { f ( \xi + \Delta x ) - f ( \xi )  } { \Delta x  } = \lim _{ \Delta x \to - 0  } \frac { f ( \xi + \Delta x ) - f ( \xi )  } { \Delta x  } $,前者$\leq 0 $,后者$\geq 0 $,此时当然$f ‘ ( \xi ) = 0 $.</p>
<h5><span id="罗尔中值定理">罗尔中值定理</span></h5><p>如果$f \in C [ a , b ] $且可导,并且$f ( a ) = f ( b ) $.则$\exists \xi \in ( a , b ) $,$f ‘ ( \xi ) = 0 $.</p>
<p>即:可导函数两个零点间一定有导数的零点.</p>
<p>设$M $为$f [ a , b ] $上的最大值,$m $是最小值,当二者相等即常值函数的时候,当然成立.</p>
<p>当$M &gt; m $的时候,则$M &gt; f ( a ) $和$m &lt; f ( a ) $至少有一个成立.不妨设$f ( M ) &gt; f ( a ) = f ( b ) $.</p>
<p>根据费马定理,这个极值点的导数为$0 $.</p>
<p>由此可以推论:函数的零点数量$| \{ x | f ( x ) = 0 \} | \leq 1 + | \{ x | f ‘ ( x ) = 0 \} | $.</p>
<p>这当然可以推出$n $次多项式至多$n $个实根.</p>
<p>事实上可以证明更强的结论,当$c _i $不全为$0 $的时候,取$n $个不同实数$\lambda _k $,$f ( x ) = \sum _{ i = 1  } ^n c _i x ^{ \lambda _i  } $至多有$n - 1 $个正根.</p>
<p>归纳法,$n = 1 $的时候显然成立.$n - 1 $时成立的话,考虑$f ( x ) = 0 \Leftrightarrow x ^{ - \lambda _n  } f ( x ) = 0 $,而后者有一项是常数项,求导后少一项.</p>
<h5><span id="拉格朗日中值定理">拉格朗日中值定理</span></h5><p>$f \in C [ a , b ] $,并且在$( a , b ) $上可导，$\exists \xi \in ( a , b ) , f ‘ ( \xi ) = \frac { f ( b ) - f ( a )  } { b - a  } $.</p>
<p>考虑先把函数放平,设$g ( x ) = f ( x ) - \frac { f ( b ) - f ( a )  } { b - a  } ( x - a ) - f ( a ) $,容易发现$g ( a ) = g ( b ) = 0 $,根据罗尔中值定理,$\exists \xi , g ‘ ( \xi ) = 0 = f ‘ ( \xi ) - \frac { f ( b ) - f ( a )  } { b - a  } , f ‘ ( \xi ) = \frac { f ( b ) - f ( a )  } { b - a  } $.</p>
<h6><span id="example1">Example1</span></h6><p>证明:如果$f ‘ ( x ) \equiv 0 \Rightarrow f ( x ) \equiv C $.</p>
<p>考虑$\forall x , y , x \ne y $,$\forall \xi , f ‘ ( \xi ) = \frac { f ( y ) - f ( x )  } { y - x  } = 0 \Rightarrow f ( x ) = f ( y ) $.</p>
<h6><span id="example2">Example2</span></h6><p>证明:如果$f ‘ ( x ) \equiv g ‘ ( x ) $,那么$f ( x ) = g ( x ) + C $.</p>
<p>考虑$h ( x ) = f ( x ) - g ( x ) , h ‘ ( x ) \equiv 0 \Rightarrow h ( x ) = C $.</p>
<h6><span id="example3">Example3</span></h6><p>考虑对抛物线用拉格朗日中值定理,设$f ( x ) = px ^2 + qx + r $,则$\frac { f ( b ) - f ( a )  } { b - a  } = \frac { p ( b ^2 - a ^2 ) + q ( b - a )  } { b - a  } = p ( b + a ) + q = f ‘ ( \frac { a + b  } { 2  } ) $.</p>
<p>反过来,如果恒有$\frac { f ( b ) - f ( a )  } { b - a  } = f ‘ ( \frac { a + b  } { 2  } ) $,事实上也可以推出$f ( x ) $是抛物线.</p>
<p>此时我们有$f ( x + y ) - f ( x - y ) = 2 yf ‘ ( x ) $,取$y = 1 $,知道$f ( x ) \in C ^{ \infty  } $,于是可以两边对$y $求两次导数,得到$f ‘ ‘ ( x + y ) - f ‘ ‘ ( x - y ) \equiv 0 $,取$y = x $,这当然意味着$f ‘ ‘ ( x ) $是常函数.</p>
<h5><span id="柯西中值定理">柯西中值定理</span></h5><p>$f , g \in C [ a , b ] $,并且均在$( a , b ) $上可导,其中$g ‘ ( x ) \ne 0 $.则$\exists \xi \in ( a , b ) $,$\frac { f ( b ) - f ( a )  } { g ( b ) - g ( a )  } = \frac { f ‘ ( \xi )  } { g ‘ ( \xi )  } $.</p>
<p>此时注意到$g ( b ) \ne g ( a ) $,原因是根据拉格朗日中值定理,如果$g ( b ) = g ( a ) , \exists \xi \in ( a , b ) , g ‘ ( \xi ) = 0 $,这与$g ‘ ( x ) \ne 0 $矛盾.</p>
<p>令$F ( x ) = f ( x ) ( g ( b ) - g ( a ) ) - g ( x ) ( f ( b ) - f ( a ) ) $.</p>
<p>接下来注意到上述命题等价于$\exists \xi \in ( a , b ) , F ‘ ( \xi ) = 0 $.</p>
<p>而注意到$F ( a ) = f ( a ) g ( b ) - g ( a ) f ( b ) = F ( b ) $,根据罗尔中值定理立刻得到答案.</p>
<p>然而这个东西竟然还能推广,我们有:</p>
<p>如果$f , g , h \in C [ a , b ] $并且在$( a , b ) $上可导,$\exists \xi \in ( a , b ) , $有:</p>
<script type="math/tex; mode=display">
\left | \begin{matrix}
f ' ( \xi ) & g ' ( \xi ) & h ' ( \xi ) \\
f ( a ) & g ( a ) & h ( a ) \\
f ( b ) & g ( b ) & h ( b ) 
\end{matrix} \right | = 0</script><p>证明的话考虑构造:</p>
<script type="math/tex; mode=display">
F ( x ) = \left | \begin{matrix}
f ( x ) & g ( x ) & h ( x ) \\
f ( a ) & g ( a ) & h ( a ) \\
f ( b ) & g ( b ) & h ( b ) 
\end{matrix} \right |</script><p>注意到$F ( a ) = F ( b ) = 0 $.</p>
<h5><span id="广义微分中值定理">广义微分中值定理</span></h5><h6><span id="广义罗尔中值定理">广义罗尔中值定理</span></h6><p>如果$f \in C [ a , b ] $且$\forall x \in ( a , b ) , f ‘ _\pm ( x ) $均存在,并且$f ( a ) = f ( b ) = 0 $.则$\exists \xi \in ( a , b ) $,$f _+ ‘ ( \xi ) f _- ‘ ( \xi ) \leq 0 $.</p>
<p>证明和罗尔中值定理没区别,仍然是找最值.</p>
<h6><span id="广义拉格朗日中值定理">广义拉格朗日中值定理</span></h6><p>如果$f \in C [ a , b ] $且$\forall x \in ( a , b ) , f ‘ _\pm ( x ) $均存在,$\eta = \frac { f ( a ) - f ( b )  } { a - b  } $,则$\exists \xi \in ( a , b ) $,$( f _+ ‘ ( \xi ) - \eta ) ( f _- ‘ ( \xi ) - \eta ) \leq 0 $.</p>
<p>证明差不多,仍然是把函数放平然后用广义罗尔中值定理就行.</p>
<h5><span id="导函数与间断点">导函数与间断点</span></h5><p>导函数不存在第一类间断点.</p>
<p>证明的话,考虑证明当$f ( x ) $在$x _0 $处可导的时候,$\exists x _n &lt; x _0 &lt; y _n $,使得$x _n , y _n \rightarrow x _0 $,并且满足$\lim f ‘ ( x _n ) = \lim f ‘ ( y _n ) = f ‘ ( x _0 ) $.</p>
<p>原因根据拉格朗日中值定理,$\exists x _n \in ( x _0 - \frac { 1  } { n  } , x _0 ) $,$f ‘ ( x _n ) = \frac { f ( x _0 ) - f ( x _0 - \frac { 1  } { n  } )  } { \frac { 1  } { n  }  } $,直接这么取当然就是可行的.</p>
<h5><span id="函数的升降性">函数的升降性</span></h5><p>$f \in C [ a , b ] $并且在$( a , b ) $上可导,$f $单调不减$\Leftrightarrow $f’(x)\geq 0</p>
<p>左推右当然是导数定义,右推左可以用拉格朗日微分中值定理.</p>
<p>另外由于保号性,$f ‘ ( x ) &gt; 0 \Rightarrow f \uparrow $,但反之不成立.</p>
<h5><span id="函数的极值">函数的极值</span></h5><p>若$f $在$( x _0 - \delta , x _0 + \delta ) $上$n - 1 $次可导,$\forall 1 \leq k \leq n - 1 , f ^{ ( k )  } ( x _0 ) = 0 $.而且$f $在$x _0 $处存在$n $阶导数并有$f ^{ ( n )  } ( x _0 ) \ne 0 $.我们有以下结论:</p>
<ol>
<li><p>$n $是奇数的时候,$x _0 $不是极值点.</p>
</li>
<li><p>$n $是偶数且$f ^{ ( n )  } ( x _0 ) &lt; 0 $时,$x _0 $是极大值点.</p>
</li>
<li><p>$n $是偶数且$f ^{ ( n )  } ( x _0 ) &gt; 0 $时,$x _0 $是极小值点.</p>
</li>
</ol>
<p>证明考虑泰勒公式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = f ( x _0 ) + \sum _{ k = 1  } ^n \frac { f ^{ ( k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k + o ( ( x - x _0 ) ^n ) \\
f ( x ) - f ( x _0 ) & = ( x - x _0 ) ^n ( \frac { f ^{ ( n )  } ( x _0 )  } { n !  } + o ( 1 ) ) 
\end{aligned}</script><p>于是取极小邻域并且$n $是偶数的时候$f ( x ) - f ( x _0 ) $和$f ^{ ( n )  } ( x _0 ) $同号,上述命题立见.</p>
<h5><span id="达布定理">达布定理</span></h5><p>也即:导函数拥有介值性.</p>
<p>如果$f $在$[ a , b ] $上可导,$f ‘ ( a ) f ‘ ( b ) &lt; 0 $,那么$\exists \xi \in ( a , b ) , f ‘ ( \xi ) = 0 $.</p>
<p>不妨设$f ‘ ( a ) &gt; 0 &gt; f ‘ ( b ) $,那么$f $在$a $处附近递增,在$b $处附近递减.那我们取一下$f ( \xi ) = \max _{ [ a , b ]  } \{ f ( x ) \} $,那么$\xi \ne a , \xi \ne b $,于是$\xi \in ( a , b ) $,$f ‘ ( \xi ) = 0 $.</p>
<p>那我们加个常数就可以把这个推广到导函数的介值性.</p>
<p>然而这个介值性比连续性弱得多,例如下面这个函数的导函数就在闭区间$[ 0 , 1 ] $上有界但没有最值:</p>
<script type="math/tex; mode=display">
f ( x ) = \begin{cases}
- x ^2 ( 1 + \sin { \frac { 1  } { x  }  } ) & x \ne 0 \\
0 & x = 0 
\end{cases}</script><p>其构造思路是让其在$0 $附近的导数在$( - 1 , 1 ) $上下波动,这样上确界为$1 $,但$0 $处跳出去,所以取不到$1 $.</p>
<p>下面这个函数更极端,其导函数在闭区间$[ 0 , 1 ] $上无界:</p>
<script type="math/tex; mode=display">
f ( x ) = \begin{cases}
x ^2 \sin { \frac { 1  } { x ^2  }  } & x \ne 0 \\
0 & x = 0 
\end{cases}</script><p>其构造思路应当是让其在$0 $处相当厉害地波动.</p>
<h5><span id="函数的凹凸性">函数的凹凸性</span></h5><p>定义一个函数是下凸的,若对$\forall x _1 , x _2 \in I , \forall \lambda \in [ 0 , 1 ] , f ( \lambda x _1 + ( 1 - \lambda ) x _2 ) \leq \lambda f ( x _1 ) + ( 1 - \lambda ) f ( x _2 ) $.</p>
<p>如果一个函数是下凸的,那么其充要条件是$\forall x _1 , x _2 , x _3 \in I $满足$x _1 &lt; x _2 &lt; x _3 $,$\left | \begin{matrix}1 &amp; x _1 &amp; f ( x _1 ) \ 1 &amp; x _2 &amp; f ( x _2 ) \ 1 &amp; x _3 &amp; f ( x _3 ) \end{matrix} \right | \geq 0 $.只需设$x _2 = \lambda x _1 + ( 1 - \lambda ) x _3 $然后简单变形即可.</p>
<p>不妨设$k ( x _1 , x _2 ) = \frac { f ( x _1 ) - f ( x _2 )  } { x _1 - x _2  } $也就是这里的割线斜率.还可以证明如果一个函数是下凸的,那么其充要条件是$\forall x _1 , x _2 , x _3 \in I , x _1 &lt; x _2 &lt; x _3 $,斜率有$k ( x _1 , x _2 ) \leq k ( x _1 , x _3 ) \leq k ( x _2 , x _3 ) $,即所谓三弦引理.这个性质容易证明,而且该性质立刻说明开区间上的有界下凸函数一定是李氏连续函数.这意味着其应当几乎处处可导.另外三弦引理还可以改为$k ( x _1 , x _2 ) \leq k ( x _2 , x _3 ) $,原因是中间项一定是两项的带权平均.</p>
<p>另外显然的是:</p>
<ol>
<li><p>如果$f $可导,那么$f $下凸$\Leftrightarrow $f’</p>
</li>
<li><p>如果$f $可二阶导,那么$f $下凸$\Leftrightarrow $f’’\geq 0</p>
</li>
</ol>
<p>如果$f ( x ) $在$x _0 $附近连续并且在$x _0 $左右小邻域内凸性相反,称其为$f ( x ) $的一个<strong>拐点</strong>.</p>
<p>容易说明$f ‘ ‘ ( x _0 ) = 0 $是拐点的必要条件,原因是拐点处$f ‘ ( x ) $的增减性相反,$x _0 $必定是$f ‘ ( x ) $的极值点.由此还可以套用之前的极值点结论:</p>
<p>若$f $在$( a , b ) $上$n $次可导,$\exists x _0 \in ( a , b ) , \forall 1 \leq k \leq n - 1 , f ^{ ( k )  } ( x _0 ) = 0 $.并且$\forall x \in ( a , b ) , f ^{ ( n )  } ( x ) &gt; 0 $我们有以下结论:</p>
<ol>
<li><p>$n $是奇数的时候,$f ( x ) $是严格单增函数.</p>
</li>
<li><p>$n $是偶数的时候,$f ( x ) $是严格下凸函数.</p>
</li>
</ol>
<p>但上述条件疑似有点过强,能不能放弱一点呢?</p>
<p>可以发现一个在开区间$( a , b ) $上的函数是下凸的充要条件应当是以下条件同时成立:</p>
<ol>
<li><p>$\forall x \in ( a , b ) $,$f ‘ _\pm ( x ) $均存在,并且$f ‘ _- ( x ) \leq f ‘ _+ ( x ) $.</p>
</li>
<li><p>$\forall x _1 , x _2 \in ( a , b ) , x _1 &lt; x _2 $,$f ‘ _+ ( x _1 ) \leq f ‘ _- ( x _2 ) $.</p>
</li>
</ol>
<p>必要性几乎是显然的,只需用三弦引理然后在每个点都卡一下极限就行.</p>
<p>充分性略有麻烦.考虑反证,只需反推三弦引理即可.设其不是凸的,那就$\exists x _1 , x _2 , x _3 \in ( a , b ) , x _1 &lt; x _2 &lt; x _3 , k ( x _1 , x _2 ) &gt; k ( x _2 , x _3 ) $.不妨设$\eta _1 = k ( x _1 , x _2 ) , \eta _2 = k ( x _2 , x _3 ) $那么根据广义拉格朗日中值定理,$\exists \xi _1 \in ( x _1 , x _2 ) , \xi _2 \in ( x _2 , x _3 ) $,使得$( f _+ ‘ ( \xi _1 ) - \eta _1 ) ( f ‘ _- ( \xi _1 ) - \eta _1 ) \leq 0 , ( f _+ ‘ ( \xi _2 ) - \eta _2 ) ( f ‘ _- ( \xi _2 ) - \eta _2 ) \leq 0 $.</p>
<p>立刻得到$f ‘ _+ ( \xi _1 ) \geq \eta _1 \geq f _- ‘ ( \xi _1 ) , f ‘ _+ ( \xi _2 ) \geq \eta _2 \geq f _- ‘ ( \xi _2 ) $,由于$\eta _1 &gt; \eta _2 $,所以$f ‘ _+ ( \xi _1 ) \geq \eta _1 &gt; \eta _2 \geq f ‘ _- ( \xi _2 ) $,但$\xi _1 &lt; \xi _2 $,这就出现了矛盾.</p>
<p>还可以证明下凸函数除了可数个点以外都可导,并且几乎处处有二阶导数.</p>
<p>这个怎么证明呢?考虑由(1)(2),可以发现$f ‘ _+ ( x ) $和$f _- ‘ ( x ) $都是单调函数,那么除了可数个点以外它们均连续,而它们在连续处必定可导,原因是$f _+ ‘ ( x _0 - \epsilon ) \leq f ‘ _- ( x _0 ) \leq f ‘ _+ ( x _0 ) $,夹逼一下就可以了.而这样的话其导数单调,于是处处二阶可导.</p>
<p>由此还可以发现:$f $在开区间$I $上,是下凸的等价于:</p>
<ol>
<li><p>$\forall x _0 \in I , f ‘ _\pm ( x _0 ) $存在.</p>
</li>
<li><p>$\forall x \in I , f ( x ) \geq f ( x _0 ) + f ‘ _\pm ( x _0 ) ( x - x _0 ) $.</p>
</li>
</ol>
<p>必要性:</p>
<p>考虑已知凸函数,只需证明$f ( x ) - f ( x _0 ) \geq f ‘ _\pm ( x _0 ) ( x - x _0 ) $.不妨假设$x &gt; x _0 $(另一方向同理),于是只需证明$\frac { f ( x ) - f ( x _0 )  } { x - x _0  } \geq f ‘ _\pm ( x _0 ) $,用广义拉格朗日微分中值定理立刻得见此成立.</p>
<p>充分性:</p>
<p>任取两点$x _1 , x _2 \in I , x _1 &lt; x _2 $,有$\frac { f ( x _2 ) - f ( x _1 )  } { x _2 - x _1  } \geq f _- ‘ ( x _1 ) $,那么左边那个东西取极限得到$f ‘ _+ ( x _1 ) $,这样就说明了任何一个点都有$f ‘ _+ ( x ) \geq f ‘ _- ( x ) $.</p>
<p>接下来仍然容易得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x _2 ) & \geq f ( x _1 ) + f ' _+ ( x _1 ) ( x _2 - x _1 ) \\
f ( x _1 ) & \geq f ( x _2 ) + f ' _- ( x _2 ) ( x _1 - x _2 ) 
\end{aligned}</script><p>由上述式子立刻得到$f _+ ‘ ( x _1 ) ‘ \leq f _- ‘ ( x _2 ) $.这样就证明了充分性.</p>
<h4><span id="经典不等式">经典不等式</span></h4><h5><span id="琴生不等式">琴生不等式</span></h5><p>如果$f $在区间$I $上是下凸的,则$\forall x _i \in I , \lambda _i \in [ 0 , 1 ] , \sum \lambda _i = 1 $,那么$f ( \sum \lambda _i x _i ) \leq \sum \lambda _i f ( x _i ) $.从几何角度来看,这意味着在$f ( \sum \lambda _i x _i ) $处作的切线位于原函数下方.所以函数如果是上凸的话不等号要反向.</p>
<p>当所有$x _i $均相等的时候显然成立.</p>
<p>不然考虑直接取$x _0 = \sum \lambda _i x _i $,此时发现$x _0 $一定在区间内部.于是我们知道$f ( x _i ) \geq f ( x _0 ) + f ‘ _+ ( x _0 ) ( x _i - x _0 ) $,求和得到$\sum \lambda _i f ( x _i ) \geq f ( x _0 ) + f _+ ‘ ( x _0 ) \sum \lambda _i ( x _i - x _0 ) = f ( x _0 ) $,这样就证毕了.</p>
<p>容易将琴生不等式推广到积分形式,当$\varphi ( x ) $是下凸连续函数的时候,当然有$\varphi ( \int _0 ^1 f \text { d  } x ) \leq \int _0 ^1 \varphi ( f ( x ) ) \text { d  } x $,证明只需对黎曼和求极限.</p>
<h6><span id="example1">Example1</span></h6><p>证明:圆内接$n $边形以正$n $边形面积和周长最大.</p>
<p>不妨设其为单位元,用圆心向顶点连边,会得到一圈圆心角$\alpha _1 , \ldots , \alpha _n $,它们之和应当是$2 \pi $并且范围均在$( 0 , \pi ] $里(原因是圆心肯定得包含在正$n $边形里,不然肯定不算大),此范围内$\sin $是下凸函数,那么$S = \frac { 1  } { 2  } \sum \sin \alpha _i \leq \frac { n  } { 2  } \sin \frac { \sum \alpha _i  } { n  } = \frac { n  } { 2  } \sin \frac { 2 \pi  } { n  } $,$L = 2 \sum \sin \frac { \alpha _i  } { 2  } \leq 2 n \sin \frac { \sum \alpha _i  } { 2 n  } = 2 n \sin \frac { \pi  } { n  } $.</p>
<p>同理还可以证明圆外接$n $边形以正$n $边形面积和周长最小,证明可以考虑取切线然后用$\tan $的凸性.</p>
<h5><span id="均值不等式">均值不等式</span></h5><p>当$x _i &gt; 0 $时:</p>
<script type="math/tex; mode=display">
\frac { n  } { \sum \frac { 1  } { x _i  }  } \leq ( \prod x _i ) ^{ \frac { 1  } { n  }  } \leq \frac { \sum x _i  } { n  }</script><p>取$f ( x ) = \ln x $,$f ( x ) $是上凸的,于是$\ln \frac { \sum x _i  } { n  } \geq \frac { 1  } { n  } \sum \ln x _i $,右边得证,取倒数得到左边.</p>
<h5><span id="柯西-赫尔德不等式">柯西-赫尔德不等式</span></h5><p>当$a _i , b _i &gt; 0 $并且$\frac { 1  } { p  } + \frac { 1  } { q  } = 1 $时,有$\sum a _i b _i \leq ( \sum a _i ^p ) ^{ \frac { 1  } { p  }  } ( \sum b _i ^q ) ^{ \frac { 1  } { q  }  } $.其特例给出柯西不等式.</p>
<p>套用琴生不等式,取$f ( x ) = x ^{ \frac { 1  } { q  }  } , \lambda _i = \frac { a _i ^p  } { \sum _j a _j ^p  } , x _i = \frac { b _i ^q  } { a _i ^p  } $,容易发现$f ( x ) $上凸.</p>
<p>这样就会得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( \sum \lambda _i x _i ) & \geq \sum \lambda _i f ( x _i ) \\
( \sum _i \frac { b _i ^q  } { \sum _j a _j ^p  } ) ^{ \frac { 1  } { q  }  } & \geq \sum _i \frac { a _i b _i  } { \sum _j a _j ^p  } \\

\end{aligned}</script><p>化简一下就可以了.</p>
<p>在这里也可以将此形式拓展到积分形式,注意到当$\frac { 1  } { p  } + \frac { 1  } { q  } = 1 $时,$a ^{ \frac { 1  } { p  }  } b ^{ \frac { 1  } { q  }  } = e ^{ \frac { \ln a  } { p  } + \frac { \ln b  } { q  }  } \leq \frac { a  } { p  } + \frac { b  } { q  } $,原因是琴生不等式.</p>
<p>此时令$F = ( \int _a ^b | f ( x ) | ^p \text { d  } x ) ^{ \frac { 1  } { p  }  } , G = ( \int _a ^b | g ( x ) | ^q \text { d  } x ) ^{ \frac { 1  } { q  }  } $,再令$a = \frac { | f ( x ) | ^p  } { F ^p  } , b = \frac { | g ( x ) | ^q  } { G ^q  } $,根据上面的不等式立刻得到$\frac { | f ( x ) g ( x ) |  } { FG  } \leq \frac { a  } { p  } + \frac { b  } { q  } $,此时做两边积分,注意到$\int a = \int b = 1 $,立刻得到$( \int _a ^b | f ( x ) | ^p \text { d  } x ) ^{ \frac { 1  } { p  }  } ( \int _a ^b | g ( x ) | ^q \text { d  } x ) ^{ \frac { 1  } { q  }  } \geq \int _a ^b | f ( x ) g ( x ) | \text { d  } x $.</p>
<h5><span id="闵可夫斯基minkovski不等式">闵可夫斯基(Minkovski)不等式</span></h5><p>$x _i , y _i \geq 0 , p \geq 1 $,则$( \sum ( x _i + y _i ) ^p ) ^{ \frac { 1  } { p  }  } \leq ( \sum x _i ^p ) ^{ \frac { 1  } { p  }  } + ( \sum y _i ^p ) ^{ \frac { 1  } { p  }  } $.这其实揭示了某种度量下的三角形不等式.</p>
<p>套用琴生不等式,取$f ( x ) = ( 1 - x ^{ \frac { 1  } { p  }  } ) ^p , x \in ( 0 , 1 ) $.求导得到$f ‘ ( x ) = - ( 1 - x ^{ \frac { 1  } { p  }  } ) ^{ p - 1  } x ^{ \frac { 1  } { p  } - 1  } $,再来一次化简得到$f ‘ ‘ ( x ) = ( 1 - \frac { 1  } { p  } ) ( 1 - x ^{ \frac { 1  } { p  }  } ) ^{ p - 2  } x ^{ \frac { 1  } { p  } - 2  } \geq 0 $.于是$f ( x ) $下凸.</p>
<p>取$\lambda _i = \frac { ( x _i + y _i ) ^p  } { \sum _j ( x _j + y _j ) ^p  } $,$u _i = ( \frac { x _i  } { x _i + y _i  } ) ^p $.这样得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( 1 - \frac { ( \sum x _i ^p ) ^{ \frac { 1  } { p  }  }  } { ( \sum _j ( x _j + y _j ) ^p ) ^{ \frac { 1  } { p  }  }  } ) ^p & \leq \sum _i \frac { ( x _i + y _i ) ^p  } { \sum _j ( x _j + y _j ) ^p  } ( \frac { y _i  } { x _i + y _i  } ) ^p \\
( ( \sum ( x _i + y _i ) ^p ) ^{ \frac { 1  } { p  }  } - ( \sum x _i ^p ) ^{ \frac { 1  } { p  }  } ) ^p & \leq \sum y _i ^p 
\end{aligned}</script><p>化简一下就做完了.</p>
<h4><span id="洛必达法则">洛必达法则</span></h4><p>来看几个抽象的问题:</p>
<ol>
<li><p>$\infty - \infty $.</p>
</li>
<li><p>$0 \times \infty $.</p>
</li>
<li><p>$\frac { 0  } { 0  } $.</p>
</li>
<li><p>$\frac { \infty  } { \infty  } $.</p>
</li>
<li><p>$0 ^0 $.</p>
</li>
<li><p>$1 ^\infty $.</p>
</li>
<li><p>$\infty ^0 $.</p>
</li>
</ol>
<p>(1)可以写成$\infty ( 1 - \frac { \infty  } { \infty  } ) $,这样就转化成了(4)和(2).</p>
<p>(2)可以写成$\frac { 0  } { \frac { 1  } { \infty  }  } $,就转化成了(3).</p>
<p>(5)可以写成$e ^{ 0 \ln 0  } $,就转化成了(2).</p>
<p>(6)可以写成$e ^{ \infty \ln 1  } $,就转化成了(2).</p>
<p>(7)可以写成$e ^{ 0 \ln \infty  } $,就转化成了(2).</p>
<p>这样的话我们只需要解决俩问题就行了,也就是$\frac { 0  } { 0  } $和$\frac { \infty  } { \infty  } $.</p>
<h5><span id="00型">0/0型</span></h5><p>如果$f , g $在$U _0 ( a , \delta ) $上可导,$g ‘ ( x ) \ne 0 $,$\lim _{ x \rightarrow a  } f ( x ) = \lim _{ x \rightarrow a  } g ( x ) = 0 $.那么若$\lim _{ x \rightarrow a  } \frac { f ‘ ( x )  } { g ‘ ( x )  } = k \Rightarrow \lim _{ x \rightarrow a  } \frac { f ( x )  } { g ( x )  } = k $.</p>
<p>这个只需要定义$f ( a ) = g ( a ) = 0 $,这样这俩函数就连续了.然后直接跑柯西中值定理就可以对$\frac { f ( x ) - f ( a )  } { g ( x ) - g ( a )  } = \frac { f ‘ ( \xi )  } { g ‘ ( \xi )  } $.</p>
<p>这里可以看出洛必达法则是单向的,因为我们取得$\xi $并不是连续变化的,只是取了一个$\rightarrow 0 $的$\xi $的子列.</p>
<p>而如果$a = \infty $,那就考虑取$t \rightarrow 0 $,然后把$x $换成$\frac { 1  } { t  } $,做复合函数求导即可,结论无差异.</p>
<h5><span id="inftyinfty型">$\infty$/$\infty$型</span></h5><p>如果$f , g $在$U _0 ( a , \delta ) $上可导,$g ‘ ( x ) \ne 0 $,$\lim _{ x \rightarrow a  } g ( x ) = \infty $.那么若$\lim _{ x \rightarrow a  } \frac { f ‘ ( x )  } { g ‘ ( x )  } = k \Rightarrow \lim _{ x \rightarrow a  } \frac { f ( x )  } { g ( x )  } = k $.</p>
<p>这个证明麻烦一点,先来讨论$k \ne \pm \infty $的情况.</p>
<p>考虑$\forall \epsilon &gt; 0 $,$\exists \delta &gt; 0 , \forall \xi \in ( a , a + \delta ) $,应当有$k - \epsilon &lt; \frac { f ‘ ( \xi )  } { g ‘ ( \xi )  } &lt; k + \epsilon $,那么$\forall x \in ( a , a + \delta ) $,取$x _1 = a + \delta $当然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { f ( x ) - f ( x _1 )  } { g ( x ) - g ( x _1 )  } & = \frac { f ' ( \xi )  } { g ' ( \xi )  } \\
\frac { f ( x )  } { g ( x )  } & = \frac { f ' ( \xi )  } { g ' ( \xi )  } ( 1 - \frac { g ( x _1 )  } { g ( x )  } ) + \frac { f ( x _1 )  } { g ( x )  } 
\end{aligned}</script><p>两边取极限就做完了.</p>
<p>当$k = \pm \infty $的时候容易发现上面那个还能用.</p>
<h4><span id="泰勒公式">泰勒公式</span></h4><p>设$f ( x ) $在$x _0 $处有$n $阶导数,则<strong>泰勒公式</strong>声称$x \rightarrow x _0 $时$f ( x ) = \sum _{ k = 0  } ^n f ^{ ( k )  } ( x _0 ) \frac { ( x - x _0 ) ^k  } { k !  } + o ( ( x - x _0 ) ^n ) $,其中$o ( ( x - x _0 ) ^n ) $称作<strong>皮亚诺余项</strong>.特别地,当$x _0 = 0 $的时候,称其为<strong>麦克劳林公式</strong>.</p>
<p>要证明这个式子只需证明$\lim _{ x \rightarrow x _0  } \frac { f ( x ) - \sum _{ k = 0  } ^n f ^{ ( k )  } ( x _0 ) \frac { ( x - x _0 ) ^k  } { k !  }  } { ( x - x _0 ) ^n  } = 0 $.对上下分别用$n - 1 $次洛必达法则后,那么只需要证明$\lim _{ x \rightarrow x _0  } \frac { f ^{ ( n - 1 )  } ( x ) - f ^{ ( n - 1 ) ( x _0 )  }  } { ( x - x _0 )  } - f ^{ ( n )  } ( x _0 ) = 0 $.而这当然就是导数的定义,于是就证毕了.</p>
<h5><span id="拉格朗日余项">拉格朗日余项</span></h5><p>设$f ( x ) $在$( a , b ) $上有$n + 1 $阶导数,并且$f ( x ) \in C ^n [ a , b ] $,泰勒公式有$f ( x ) = \sum _{ k = 0  } ^n f ^{ ( k )  } ( x _0 ) \frac { ( x - x _0 ) ^k  } { k !  } + \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - x _0 ) ^{ n + 1  } $,其中$\xi \in ( x _0 , x ) $.一般将$\frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - x _0 ) ^{ n + 1  } $称作<strong>拉格朗日余项</strong>.</p>
<p>证明的话,考虑对于一个固定的$x $,构造$F ( t ) = f ( x ) - \sum _{ k = 0  } ^n f ^{ ( k )  } ( t ) \frac { ( x - t ) ^k  } { k !  } $,$G ( t ) = ( x - t ) ^{ n + 1  } $.这里之所以固定$x $而移动$x _0 $的原因是,如果反过来固定则求导就不能实现下面的错项相消.不难发现$F ( x ) = G ( x ) = 0 $,此时考虑必定有一个$\xi \in ( x _0 , x ) $满足$\frac { F ‘ ( \xi )  } { G ‘ ( \xi )  } = \frac { F ( x _0 ) - F ( x )  } { G ( x _0 ) - G ( x )  } = \frac { F ( x _0 )  } { G ( x _0 )  } $.</p>
<p>这个时候研究一下他们的导数,注意到$G ‘ ( t ) = - ( n + 1 ) ( x - t ) ^{ n  } $,$F ‘ ( t ) = - \sum _{ k = 0  } ^n f ^{ ( k + 1 )  } ( t ) \frac { ( x - t ) ^k  } { k !  } + \sum _{ k = 1  } ^n f ^{ ( k )  } ( t ) \frac { ( x - t ) ^{ k - 1  }  } { ( k - 1 ) !  } = - f ^{ ( n + 1 )  } ( t ) \frac { ( x - t ) ^n  } { n !  } $.</p>
<p>于是$\frac { F ( x _0 )  } { G ( x _0 )  } = \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } $,$F ( x _0 ) = \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - x _0 ) ^{ n + 1  } $.</p>
<p>下面给出一些常见的泰勒展开公式(其中$0 &lt; \theta &lt; 1 $):</p>
<ol>
<li><p>$e ^x = \sum _{ k = 0  } ^n \frac { x ^k  } { k !  } + \frac { e ^{ \theta x  } x ^{ n + 1  }  } { ( n + 1 ) !  } = 1 + \frac { x  } { 1 !  } + \frac { x ^2  } { 2 !  } + \frac { x ^3  } { 3 !  } + o ( x ^3 ) $.</p>
</li>
<li><p>$\sin x = \sum _{ k = 0  } ^{ n  } \frac { ( - 1 ) ^k x ^{ 2 k + 1  }  } { ( 2 k + 1 ) !  } + ( - 1 ) ^{ n + 1  } \frac { \cos \theta x  } { ( 2 n + 3 ) !  } x ^{ 2 n + 3  } = x - \frac { 1  } { 3 !  } x ^3 + o ( x ^4 ) $.</p>
</li>
<li><p>$\cos x = \sum _{ k = 0  } ^n \frac { ( - 1 ) ^k x ^{ 2 k  }  } { ( 2 k ) !  } + ( - 1 ) ^{ n + 1  } \frac { \cos \theta x  } { ( 2 n + 2 ) !  } x ^{ 2 n + 2  } = 1 - \frac { 1  } { 2 !  } x ^2 + \frac { 1  } { 4 !  } x ^4 + o ( x ^5 ) $.</p>
</li>
<li><p>$\tan x = x + \frac { 1  } { 3  } x ^3 + \frac { 2  } { 15  } x ^5 + o ( x ^6 ) $.</p>
</li>
<li><p>$\ln ( 1 + x ) = \sum _{ k = 1  } ^n \frac { ( - 1 ) ^{ k - 1  } x ^k  } { k  } + ( - 1 ) ^n \frac { x ^{ n + 1  }  } { ( n + 1 ) ( 1 + \theta x ) ^{ n + 1  }  } = x - \frac { 1  } { 2  } x ^2 + \frac { 1  } { 3  } x ^3 + o ( x ^3 ) $.</p>
</li>
<li><p>$( 1 + x ) ^\alpha = \sum _{ k = 0  } ^n \frac { \alpha ^{ \underline { k  }  }  } { k !  } x ^k + \frac { \alpha ^{ \underline { n + 1  }  }  } { ( n + 1 ) !  } ( 1 + \theta x ) ^{ \alpha - n - 1  } x ^{ n + 1  } $.</p>
</li>
</ol>
<h4><span id="解析函数">解析函数</span></h4><p>不妨设$f _n ( x , x _0 ) = \sum _{ k = 0  } ^n f ^{ ( k )  } ( x _0 ) \frac { ( x - x _0 ) ^k  } { k !  } $.我们称$f $在$x _0 $处解析,若$\exists \delta &gt; 0 $,$\lim _{ n \rightarrow \infty  } f _n ( x , x _0 ) = f ( x ) $,也即泰勒展式在一个邻域上可以逼近原函数.</p>
<p>如果其在$( a , b ) $上任何一点都解析,那么称其在$( a , b ) $上解析,记作$f \in C ^\omega ( a , b ) $.</p>
<p>解析函数应当有如下性质:</p>
<ol>
<li><p>$f , g $在$x _0 $处解析,那么$f , g $的四则运算在$x _0 $处也解析.</p>
</li>
<li><p>$f , g $均解析,并且$f \circ g $有意义,那么$f \circ g $也解析.</p>
</li>
<li><p>$f $在$x _0 $处解析,那么$f ^{ - 1  } $在$f ( x _0 ) $处解析.</p>
</li>
<li><p>初等函数基本是解析函数.</p>
</li>
</ol>
<p>对于(1):</p>
<p>$f \pm g $当然是平凡的,至于$fg $和$\frac { f  } { g  } $如何证明解析性,我们回头再说.</p>
<p>对于(2):</p>
<p>回头再说.</p>
<h4><span id="拉格朗日插值">拉格朗日插值</span></h4><p>构造多项式$P _n = \sum _{ i = 0  } ^{ n  } y _i ( \prod _{ j = 0 \land j \ne i  } ^{ n  } \frac { x - x _j  } { x _i - x _j  } ) \ $.显然当$x = x _i $时,该多项式的答案为$y _i $.</p>
<p>用这个在一个$n + 1 $次可导的函数$f \in C ( a , b ) $上打$n + 1 $个点并且取出这个多项式$P _n $,考虑它们的误差.取$\omega ( x ) = \prod _{ k = 0  } ^n ( x - x _k ) $,事实上有:$\exists \xi \in ( a , b ) , f ( x ) = P _n ( x ) + \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } \omega ( x ) $.</p>
<p>取$h ( t ) = f ( t ) - P _n ( t ) $,考虑对于一个固定的$x \ne x _i $,取$g ( t ) = \frac { h ( x )  } { \omega ( x )  } \omega ( t ) - h ( t ) $.注意到$g ( x ) = 0 , g ( x _i ) = 0 $,所以$g $有$n + 2 $个零点,所以$g ^{ ( n + 1 )  } $一定有一个零点,记为$\xi $.</p>
<p>那么我们就有$g ^{ ( n + 1 )  } ( \xi ) = \frac { h ( x )  } { \omega ( x )  } ( n + 1 ) ! - f ^{ ( n + 1 )  } ( \xi ) = 0 $.上述命题就得证了.</p>
<p>那么怎么样能让$\omega ( x ) $这个东西的最大值尽可能小呢?</p>
<p>我们定义所谓$n $次切比雪夫多项式$f $,使得对于任何一个首项为$1 $的多项式$T _n $,$\max _{ ( a , b )  } | T _n | \geq \max _{ ( a , b )  } | f | $.</p>
<p>事实上$[ - 1 , 1 ] $上的切比雪夫多项式可以用递推关系描述:</p>
<script type="math/tex; mode=display">
P _n = \begin{cases}
1 & n = 0 \\
x & n = 1 \\
x ^2 - \frac { 1  } { 2  } & n = 2 \\
xP _{ n - 1  } - \frac { 1  } { 4  } P _{ n - 2  } & \text { otherwise  } 
\end{cases}</script><p>还可以写成$P _n = \frac { 1  } { 2 ^{ n - 1  }  } \cos ( n \arccos x ) $.</p>
<h4><span id="函数的作图">函数的作图</span></h4><h5><span id="渐近线">渐近线</span></h5><p>如果对于一个函数$y = f ( x ) $,存在一条直线$l $使得函数上一点$P ( x , f ( x ) ) $距离原点距离$\to + \infty $的时候,$( x , f ( x ) ) $与$l $的距离$\to 0 $.</p>
<p>大概可以有以下几类渐近线:</p>
<ol>
<li><p>水平渐近线:$f ( + \infty ) = C $或$f ( - \infty ) = C $.</p>
</li>
<li><p>垂直渐近线:$f ( x _0 - 0 ) = \infty $或$f ( x _0 + 0 ) = \infty $.</p>
</li>
<li><p>斜渐近线:$l = kx + b $,那么$\lim _{ x \to + \infty  } \frac { f ( x )  } { x  } = a , \lim _{ x \to \infty  } ( f ( x ) - ax ) = b $.</p>
</li>
</ol>
<h5><span id="作图">作图</span></h5><ol>
<li><p>确定定义域和值域.</p>
</li>
<li><p>研究其奇偶性,周期性.</p>
</li>
<li><p>研究$f ‘ ( x ) = 0 $的根以确定极值点和升降区间.</p>
</li>
<li><p>研究$f ‘ ‘ ( x ) = 0 $的根找出拐点.</p>
</li>
<li><p>求出渐近线.</p>
</li>
</ol>
<h4><span id="牛顿迭代">牛顿迭代</span></h4><p>目的是找到一个函数$f $的零点,尝试取上面任何一点并作切线,找到切线与$x $轴的交点.或者说任取$x _0 $,取$x _{ n + 1  } = x _n - \frac { f ( x _n )  } { f ‘ ( x _n )  } $.</p>
<p>我们需要证明这个做法的正确性,事实上:</p>
<p>如果$f ‘ , f ‘ ‘ $在$[ a , b ] $上非零,$\exists c \in [ a , b ] , f ( c ) = 0 $,那我们取$x _0 \in [ a , b ] $满足$f ( x _0 ) f ‘ ‘ ( x _0 ) &gt; 0 $,那么取$x _{ n + 1  } = x _n - \frac { f ( x _n )  } { f ‘ ( x _n )  } $的数列$\{ x _n \} \rightarrow c $.事实上:</p>
<ol>
<li><p>当$f ‘ f ‘ ‘ &gt; 0 $,$x _n $单调下降趋近于$c $.</p>
</li>
<li><p>当$f ‘ f ‘ ‘ &lt; 0 $,$x _n $单调上升趋近于$c $.</p>
</li>
</ol>
<p>并且$| x _n - c | \sim O ( 2 ^{ - 2 ^n  } ) $.</p>
<p>上述讨论情况有点多,我们下面只讨论其中一种进行证明:</p>
<p>当$f ‘ &gt; 0 , f ‘ ‘ &gt; 0 $的时候,$f $是一个单调上升的下凸函数.容易发现这个数列单调下降并且应当大于$c $,那它就有极限,两边取极限得知$\lim _{ n \to \infty  } f ( x _n ) = 0 $.</p>
<p>接下来看一下逼近速度,泰勒公式展开一下知道$0 = f ( c ) = f ( x _n ) + f ‘ ( x _n ) ( c - x _n ) + \frac { f ‘ ‘ ( \xi )  } { 2  } ( c - x _n ) ^2 $.从上面的结果容易看出$n \geq 1 $的时候,$| x _{ n + 1  } - c | = \frac { | f ( x _n ) + f ‘ ( x _n ) ( c - x _n ) |  } { | f ‘ ( x _n ) |  } = \frac { f ‘ ‘ ( \xi )  } { 2 | f ‘ ( x _n ) |  } ( c - x _n ) ^2 $.前面那个系数是有界的,可以看作一个常数.于是这一次的误差应当是上一次误差的平方级别.</p>
<h3><span id="积分">积分</span></h3><h4><span id="不定积分">不定积分</span></h4><p>如果存在可导函数$F $满足$F ‘ ( x ) = f ( x ) $,则称一个函数$f $是<strong>可积</strong>的,$F ( x ) $是$f ( x ) $的<strong>原函数</strong>,或称其为$f ( x ) $的不定积分.</p>
<p>我们之前已经证明过导数相等的两个函数最多只差一个常数,因此一个函数的原函数是有唯一的$F ( x ) + C $的形式的.</p>
<h5><span id="不定积分的运算">不定积分的运算</span></h5><p>只给出以下两个运算法则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int ( f ( x ) \pm g ( x ) ) \text { d  } x & = \int f ( x ) \text { d  } x \pm \int g ( x ) \text { d  } x \\
\int \alpha f ( x ) \text { d  } x & = \alpha \int f ( x ) \text { d  } x 
\end{aligned}</script><h5><span id="积分表">积分表</span></h5><ol>
<li><p>$\int x ^\alpha \text { d  } x = \frac { x ^{ \alpha + 1  }  } { \alpha + 1  } + C , \alpha \ne - 1 $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { x  } = \ln | x | + C $.</p>
</li>
<li><p>$\int e ^x \text { d  } x = e ^x + C $.</p>
</li>
<li><p>$\int \cos x \text { d  } x = \sin x + C $.</p>
</li>
<li><p>$\int \sin x \text { d  } x = - \cos x + C $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { \cos ^2 x  } = \tan x + C $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { \sin ^2 x  } = - \cot x + C = - \frac { 1  } { \tan x  } + C $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { 1 + x ^2  } = \arctan x + C $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { \sqrt { 1 - x ^2  }  } = \arcsin x + C $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { \sqrt { x ^2 \pm a ^2  }  } = \ln | x + \sqrt { x ^2 \pm a ^2  } | + C $.</p>
</li>
<li><p>$\int \sqrt { a ^2 - x ^2  } \text { d  } x = \frac { 1  } { 2  } ( x \sqrt { a ^2 - x ^2  } + a ^2 \arcsin \frac { x  } { a  } ) + C $.</p>
</li>
<li><p>$\int \sqrt { x ^2 \pm a ^2  } \text { d  } x = \frac { 1  } { 2  } ( x \sqrt { x ^2 \pm a ^2  } \pm a ^2 \ln | x + \sqrt { x ^2 \pm a ^2  } | ) + C $.</p>
</li>
</ol>
<h5><span id="换元法">换元法</span></h5><p>第一换元法:设$\int g ( t ) \text { d  } t = G ( t ) + C $,$w ( x ) $可导,则$\int g ( w ( x ) ) w ‘ ( x ) \text { d  } x = G ( w ( x ) ) + C $.证明只需对右边求导即可.</p>
<p>第二换元法:设$x ( t ) $可导,且有反函数$t ( x ) $,那么如果$\int f ( x ( t ) ) x ‘ ( t ) \text { d  } t = G ( t ) + C $,则$\int f \text { d  } x = G ( t ( x ) ) + C $.</p>
<h6><span id="example1">Example1</span></h6><p>求$I _n = \int \tan ^n x \text { d  } x $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = \int \tan ^{ n - 2  } ( \frac { 1  } { \cos ^2 x  } - 1 ) \text { d  } x \\
& = \int \tan ^{ n - 2  } x ( \text { d  } \tan x ) - I _{ n - 2  } \\
& = \frac { \tan ^{ n - 1  } x  } { n - 2  } - I _{ n - 2  } 
\end{aligned}</script><p>边界条件的话$I _0 = x + C , I _1 = \int \frac { \sin x  } { \cos x  } \text { d  } x = - \int \frac { 1  } { \cos x  } ( \text { d  } \cos x ) = - \ln ( \cos x ) + C $.</p>
<h5><span id="分部积分">分部积分</span></h5><p>我们应当有$( uv ) ‘ = u ‘ v + v ‘ u $,两边积分得到$uv = \int u ‘ v \text { d  } x + \int v ‘ u \text { d  } x $,变形得到$\int v \text { d  } u = uv - \int u \text { d  } v $.</p>
<h6><span id="example1">Example1</span></h6><p>求$I _n = \int \cos ^n x \text { d  } x $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = \int \cos ^{ n - 1  } x ( \text { d  } \sin x ) \\
& = \cos ^{ n - 1  } x \sin x + ( n - 1 ) \int \sin ^2 x \cos ^{ n - 2  } x \text { d  } x \\
& = \cos ^{ n - 1  } x \sin x + ( n - 1 ) \int ( 1 - \cos ^2 x ) \cos ^{ n - 2  } x \text { d  } x \\
& = \cos ^{ n - 1  } \sin x + ( n - 1 ) I _{ n - 2  } - ( n - 1 ) I _n 
\end{aligned}</script><p>整理得到$I _n = \frac { 1  } { n  } \cos ^{ n - 1  } x \sin x + \frac { n - 1  } { n  } I _{ n - 2  } $.</p>
<p>边界条件当然是$I _0 = x + C , I _1 = \sin x + C $.</p>
<h6><span id="example2">Example2</span></h6><p>求$I _n = \int \frac { \text { d  } x  } { \cos ^n x  } $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = \int \frac { \text { d  } \tan x  } { \cos ^{ n - 2  } x  } \\
& = \frac { \tan x  } { \cos ^{ n - 2  } x  } - \int \tan x ( \text { d  } \cos ^{ 2 - n  } x ) \\
& = \frac { \tan x  } { \cos ^{ n - 2  } x  } + ( 2 - n ) \int \cos ^{ - n  } x \sin ^2 x \text { d  } x \\
& = \frac { \tan x  } { \cos ^{ n - 2  } x  } + ( 2 - n ) \int \cos ^{ - n  } x ( 1 - \cos ^2 x ) \text { d  } x \\
& = \frac { \tan x  } { \cos ^{ n - 2  } x  } + ( 2 - n ) I _n - ( 2 - n ) I _{ n - 2  } 
\end{aligned}</script><p>整理得到$I _n = \frac { 1  } { n - 1  } \frac { \tan x  } { \cos ^{ n - 2  } x  } + \frac { n - 2  } { n - 1  } I _{ n - 2  } $.</p>
<h6><span id="example3">Example3</span></h6><p>求$I _{ m , n  } = \int \sin ^m x \cos ( nx ) \text { d  } x $,其中$m &lt; n $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _{ m , n  } & = \int \sin ^m x \cos ( nx ) \text { d  } x \\
& = \frac { 1  } { n  } \int \sin ^m x \text { d  } \sin ( nx ) \\
& = \frac { 1  } { n  } \left ( \sin ^m x \sin ( nx ) - \frac { m  } { n  } \int \sin ( nx ) \sin ^{ m - 1  } x \cos x \text { d  } x \right ) 
\end{aligned}</script><p>然后观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \sin ( nx ) \sin ^{ m - 1  } x \cos x \text { d  } x \\
& = - \frac { 1  } { n  } \int \sin ^{ m - 1  } x \cos x \text { d  } \cos ( nx ) \\
& = - \frac { 1  } { n  } ( \cos ( nx ) \sin ^{ m - 1  } x \cos x - \int \cos ( nx ) ( \text { d  } \sin ^{ m - 1  } x \cos x ) ) 
\end{aligned}</script><p>观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \cos ( nx ) ( \text { d  } \sin ^{ m - 1  } x \cos x ) \\
& = \int \cos ( nx ) ( - \sin ^{ m  } + ( m - 1 ) \sin ^{ m - 2  } x \cos ^2 x ) \text { d  } x \\
& = \int \cos ( nx ) ( ( m - 1 ) \sin ^{ m - 2  } x - m \sin ^m x ) ) \text { d  } x \\
& = ( m - 1 ) I _{ m - 2 , n  } - mI _{ m , n  } 
\end{aligned}</script><p>往回倒腾倒腾,边界条件是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _{ 0 , n  } & = \int \cos ( nx ) \text { d  } x & = \frac { \sin ( nx )  } { n  } + C \\
I _{ 1 , n  } & = \int \sin x \cos ( nx ) \text { d  } x \\
& = \frac { 1  } { 2  } \int ( \sin ( ( n + 1 ) x ) - \sin ( ( n - 1 ) x ) ) \text { d  } x \\
& = \frac { 1  } { 2  } ( \frac { - \cos ( ( n + 1 ) x )  } { n + 1  } + \frac { \cos ( ( n - 1 ) x )  } { n - 1  } ) + C 
\end{aligned}</script><h6><span id="example4">Example4</span></h6><p>求$I _n = \int \frac { \text { d  } x  } { ( x ^2 + a ^2 ) ^n  } $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = \frac { x  } { ( x ^2 + a ^2 ) ^n  } - \int x \text { d  } \frac { 1  } { ( x ^2 + a ^2 ) ^n  } \\
& = \frac { x  } { ( x ^2 + a ^2 ) ^n  } + 2 n \int \frac { x ^2 + a ^2 - a ^2  } { ( x ^2 + a ^2 ) ^{ n + 1  }  } \text { d  } x \\
& = \frac { x  } { ( x ^2 + a ^2 ) ^n  } + 2 nI _{ n  } - 2 a ^2 nI _{ n + 1  } 
\end{aligned}</script><p>边界是$I _1 = \frac { 1  } { a  } \arctan \frac { x  } { a  } + C $.</p>
<h6><span id="example5">Example5</span></h6><p>求$I = \int x \cos ^3 x \text { d  } x $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = \int x \cos ^3 x \text { d  } x & = \int x \cos ^2 x \text { d  } ( \sin x ) \\
& = x \cos ^2 x \sin x - \int \sin x ( \cos ^2 x \text { d  } x - 2 x \cos x \sin x ) \\
& = x \cos ^2 x \sin x + \int \cos ^2 x ( \text { d  } \cos x ) + 2 \int x \cos x \sin ^2 x \text { d  } x \\
& = x \cos ^2 x \sin x + \frac { \cos ^3 x  } { 3  } + 2 \int x \cos x ( 1 - \cos ^2 x ) \text { d  } x \\
& = x \cos ^2 x \sin x + \frac { \cos ^3 x  } { 3  } + 2 \int x \cos x \text { d  } x - 2 I \\
& = x \cos ^2 x \sin x + \frac { \cos ^3 x  } { 3  } + 2 \int x ( \text { d  } \sin x ) - 2 I \\
& = x \cos ^2 x \sin x + \frac { \cos ^3 x  } { 3  } + 2 ( x \sin x + \cos x ) - 2 I + C \\

\end{aligned}</script><p>也就是$3 I = x \cos ^2 x \sin x + \frac { \cos ^3 x  } { 3  } + 2 ( x \sin x + \cos x ) + C $.</p>
<h5><span id="有理分式的不定积分">有理分式的不定积分</span></h5><p>考虑真分式$R ( x ) = \frac { P ( x )  } { Q ( x )  } $,其中$\deg P ( x ) &lt; \deg Q ( x ) $.至于其他分式可以做长除法变成真分式.</p>
<p>定义最简真分式形如$\frac { A  } { ( x - a ) ^m  } , \frac { Bx + C  } { ( x ^2 + px + q ) ^n  } $.</p>
<p>先证明一个引理:实数域上,任何一个多项式可以分解为若干不可约的一次多项式和二次多项式的乘积.</p>
<p>原因是复根一定成对出现,如果$z $是复根,那么$\bar { z  } $一定也是复根,原因是$\overline { zw  } = \bar { z  } \bar { w  } $,对一个多项式两边逐项取共轭就可以发现上述结论.那只需要把成对的复根扔到一个二次多项式里就行.</p>
<p>再证明一个引理:实数上,任何一个真分式都可以转化为若干最简真分式的线性组合.</p>
<p>先拆一次项,如上将$Q ( x ) = ( x - a ) ^m R ( x ) $,其中$R ( a ) \ne 0 $,那我们考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { P ( x )  } { Q ( x )  } - \frac { A _1  } { ( x - a ) ^m  } & = \frac { P ( x ) - A _1 R ( x )  } { ( x - a ) ^m R ( x )  } \\

\end{aligned}</script><p>此时取$A _1 = \frac { P ( a )  } { R ( a )  } $,立刻见到$( x - a ) | ( P ( x ) - A _1 R ( x ) ) $,于是上下至少少一次,这样就可以继续分解了.</p>
<p>再拆二次项,如上将$Q ( x ) = ( x ^2 + px + q ) ^m R ( x ) $,其中$( x ^2 + px + q ) \nmid R ( x ) $,那:</p>
<script type="math/tex; mode=display">
\frac { P ( x )  } { Q ( x )  } - \frac { A _1 x + B _1  } { ( x ^2 + px + q ) ^m  } = \frac { P ( x ) - ( A _1 x + B _1 ) R ( x )  } { ( x ^2 + px + q ) ^m R ( x )  }</script><p>令$T ( x ) = P ( x ) - ( A _1 x + B _1 ) R ( x ) $,类似上面应当要确定$A _1 , B _1 $使得上面那部分是$x ^2 + px + q $的倍数就可以.直接取$x ^2 + px + q $的某个复根$\alpha $,则只需$T ( \alpha ) = 0 $即可,这是两个方程(实部虚部),而我们有两个未知数,理应可以解出答案.具体解得过程其实也可以直接把$P ( x ) $和$R ( x ) $直接先用多项式长除法杀一杀然后剩的部分判一下方程.</p>
<p>这样最后就只需要对拆出来的东西逐项积分就行.意味着有理函数的原函数是初等函数.</p>
<h5><span id="有理三角函数的不定积分">有理三角函数的不定积分</span></h5><p>即$\sin x , \cos x $经过有限步四则运算得到的函数.</p>
<p>我们定义二元有理函数$R ( u , v ) $,那么有理三角函数实际上是$R ( \cos x , \sin x ) $.</p>
<p>下面给出以下命题:</p>
<ol>
<li><p>如果其对于$u $是奇函数,也即$R ( u , v ) = - R ( - u , v ) $,那么$R ( u , v ) = uR _1 ( u ^2 , v ) $,其中$R _1 $是另一个二元有理函数.如果对于$v $是奇函数则同理.</p>
</li>
<li><p>当$R ( - u , - v ) = R ( u , v ) $时,那么$R ( u , v ) = R _1 ( \frac { u  } { v  } , v ^2 ) $.</p>
</li>
</ol>
<p>证明只需要拆做$R ( u , v ) = \frac { P ( u , v )  } { Q ( u , v )  } $,其中$P , Q $是两个多项式,然后只需简单书写即可证明.</p>
<p>对于(1)形式的有理三角函数,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int R ( \cos x , \sin x ) \text { d  } x \\
& = \int \cos xR ( \cos ^2 x , \sin x ) \text { d  } x \\
\\
& = \int R _1 ( 1 - \sin ^2 x , \sin x ) \text { d  } ( \sin x ) \\
& = \int R _1 ( 1 - t ^2 , t ) \text { d  } t 
\end{aligned}</script><p>对于(2)形式的有理三角函数,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int R ( \cos x , \sin x ) \text { d  } x \\
& = \int R _1 ( \cos ^2 x , \tan x ) \text { d  } x \\
\int R _1 ( \frac { 1  } { 1 + \tan ^2 x  } , \tan x ) \text { d  } x \\
& = \int R _1 ( \frac { 1  } { 1 + t ^2  } , t ) \frac { \text { d  } t  } { 1 + t ^2  } 
\end{aligned}</script><p>有了这两种形式后呢?我们注意到任意的有理三角函数都可以表示为以上两种函数之和,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R ( u , v ) \\
& = \frac { R ( u , v ) - R ( - u , v )  } { 2  } \\
+ \frac { R ( - u , v ) - R ( - u , - v )  } { 2  } \\
+ \frac { R ( - u , - v ) + R ( u , v )  } { 2  } 
\end{aligned}</script><p>或者,令$t = \tan \frac { x  } { 2  } $,那么$\sin x = \frac { 2 t  } { 1 + t ^2  } , \cos x = \frac { 1 - t ^2  } { 1 + t ^2  } , \text { d  } x = 2 \frac { \text { d  } t  } { 1 + t ^2  } $.</p>
<h5><span id="无理函数的不定积分">无理函数的不定积分</span></h5><p>我们考虑以下几类无理函数:</p>
<p>第一类是$R ( x , \sqrt [m ] { \frac { ax + b  } { cx + d  }  } ) $的形式.只需做换元$t ^m = \frac { a _1 x + b _1  } { a _2 x + b _2  } $,立刻得到原式其实就是$R ( \frac { b _2 t ^m - b _1  } { a _1 - a _2 t ^m  } , t ) $,并且$\text { d  } x $也可以转化到$\text { d  } t $.</p>
<p>第二类是形如$\int x ^m ( a + bx ^n ) ^p \text { d  } x $,其中$m , n , p \in \mathbb { Q  } $.</p>
<p>令$t = x ^n $,上式就变成了$\frac { 1  } { n  } \int t ^{ \frac { m + 1  } { n  } - 1  } ( a + bt ) ^p \text { d  } t $.令$q = \frac { m + 1  } { n  } - 1 $.我们只需要做$\frac { 1  } { n  } \int t ^q ( a + bt ) ^p \text { d  } t = \frac { 1  } { n  } \int t ^{ p + q  } ( \frac { a + bt  } { t  } ) ^p $.事实上,下面三种情况可以积出来:</p>
<ol>
<li><p>$p \in \mathbb { Z  } $.</p>
</li>
<li><p>$q \in \mathbb { Z  } $.</p>
</li>
<li><p>$p + q \in \mathbb { Z  } $.</p>
</li>
</ol>
<p>其它的都无初等形式.</p>
<p>第三类是形如$R ( x , \sqrt { ax ^2 + bx + c  } ) $,不妨假设$b ^2 - 4 ac \ne 0 , a \ne 0 $.</p>
<ol>
<li><p>$b ^2 - 4 ac &gt; 0 $,则有两个实根$\alpha &gt; \beta $,此时提一下实根就可以知道原式等于$R ( x , ( x - \beta ) \sqrt { \frac { a ( x - \alpha )  } { x - \beta  }  } ) $,这就能做了.</p>
</li>
<li><p>$b ^2 - 4 ac &lt; 0 $,则无实根,不妨假设$a &gt; 0 $.则做$t - \sqrt { a  } x = \sqrt { ax ^2 + bx + c  } $并两边平方就可以反解出$x = \frac { t ^2 - c  } { b + 2 \sqrt { a  } t  } $,原本的积分就变成了关于$t $的有理函数的积分.</p>
</li>
</ol>
<h5><span id="双曲换元">双曲换元</span></h5><p>引入双曲三角函数$\sinh ( x ) = \frac { e ^x - e ^{ - x  }  } { 2  } , \cosh = \frac { e ^x + e ^{ - x  }  } { 2  } $以及$\tanh ( x ) = \frac { \sinh ( x )  } { \cosh ( x )  } $.留意到$\cosh ^2 - \sinh ^2 = 1 $.以及:</p>
<ol>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \sinh ( x ) = \cosh ( x ) $</p>
</li>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \cosh ( x ) = \sinh ( x ) $</p>
</li>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \tanh ( x ) = \frac { 1  } { \cosh ^2 ( x )  } = 1 - \tanh ^2 ( x ) $</p>
</li>
</ol>
<p>应当发现:</p>
<ol>
<li><p>$\sinh ( 2 x ) = 2 \sinh ( x ) \cosh ( x ) $</p>
</li>
<li><p>$\cosh ( 2 x ) = \cosh ^2 ( x ) + \sinh ^2 ( x ) = 2 \cosh ^2 ( x ) - 1 = 1 + 2 \sinh ^2 ( x ) $</p>
</li>
</ol>
<p>另外其反函数应当是:</p>
<ol>
<li><p>$\text { arsinh  } ( x ) = \ln ( x + \sqrt { x ^2 + 1  } ) $</p>
</li>
<li><p>$\text { arcosh  } ( x ) = \ln ( x + \sqrt { x ^2 - 1  } ) $</p>
</li>
</ol>
<p>应当发现:</p>
<ol>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \text { arsinh  } ( x ) = \frac { 1  } { \sqrt { x ^2 + 1  }  } $</p>
</li>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \text { arcosh  } ( x ) = \frac { 1  } { \sqrt { x ^2 - 1  }  } $</p>
</li>
<li><p>$\frac { \text { d  }  } { \text { d  } x  } \text { artanh  } ( x ) = \frac { 1  } { 1 - x ^2  } $</p>
</li>
</ol>
<h6><span id="example1">Example1</span></h6><p>求$I = \int \frac { \text { d  } x  } { \sqrt { x ^2 \pm a ^2  }  } $,其中$a &gt; 0 $.</p>
<p>于是$\int \frac { \text { d  } x  } { \sqrt { x ^2 \pm a ^2  }  } = \ln | x + \sqrt { x ^2 \pm a ^2  } | + C $.</p>
<h6><span id="example2">Example2</span></h6><p>求$I = \int \sqrt { a ^2 - x ^2  } \text { d  } x $.</p>
<p>考虑三角换元,应当小心符号,这里注意到$x \in [ - a , a ] $,因此直接取$x = a \sin t $,$t \in [ - \frac { \pi  } { 2  } , \frac { \pi  } { 2  } ] $,此时$\cos t \geq 0 $恒成立,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = a ^2 \int \cos ^2 t \text { d  } t \\
& = a ^2 \int \frac { 1 + \cos ( 2 t )  } { 2  } \text { d  } t \\
& = \frac { a ^2 t  } { 2  } + \frac { a ^2  } { 4  } \sin ( 2 t ) + C \\
& = \frac { 1  } { 2  } ( x \sqrt { a ^2 - x ^2  } + a ^2 \arcsin \frac { x  } { a  } ) + C 
\end{aligned}</script><h6><span id="example3">Example3</span></h6><p>求$I = \int \sqrt { x ^2 \pm a ^2  } \text { d  } x $.</p>
<p>使用双曲换元,先考虑$\int \sqrt { x ^2 + a ^2  } \text { d  } x $的情况,此时换$x = a \sinh t $,$\cosh t \geq 0 $,根号是平凡开出的,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = a ^2 \int \cosh ^2 t \text { d  } t \\
& = a ^2 \int \frac { 1 + \cosh ( 2 t )  } { 2  } \text { d  } t \\
& = \frac { a ^2 t  } { 2  } + \frac { a ^2  } { 4  } \sinh ( 2 t ) + C \\
& = \frac { 1  } { 2  } ( x \sqrt { x ^2 + a ^2  } + a ^2 \text { arsinh  } \frac { x  } { a  } ) + C 
\end{aligned}</script><p>另一个同理,仍然使用双曲换元,结果是$\frac { 1  } { 2  } ( x \sqrt { x ^2 - a ^2  } + a ^2 \text { arcosh  } \frac { x  } { a  } ) + C $</p>
<h5><span id="椭圆积分">椭圆积分</span></h5><p>以下是几个常见的无初等形式的积分:</p>
<ol>
<li><p>$\int \frac { e ^x  } { x  } \text { d  } x $.</p>
</li>
<li><p>$\int \frac { \text { d  } x  } { \ln x  } $.</p>
</li>
<li><p>$\int \frac { \sin x  } { x  } \text { d  } x $.</p>
</li>
<li><p>$\int \frac { \cos x  } { x  } \text { d  } x $.</p>
</li>
<li><p>$\int e ^{ x ^2  } \text { d  } x $.</p>
</li>
</ol>
<p>另外还有一类椭圆积分也无初等形式:设$R ( x , y ) $是二元有理函数,其中$y = \sqrt { P _3 ( x )  } $或$\sqrt { P _4 ( x )  } $,也即根号下放了个三次或者四次多项式,那么$\int R ( x , y ) \text { d  } x $可能很难有初等形式.这样的积分可以被归结为三类椭圆积分.</p>
<p>首先说明$R ( x , \sqrt { P _3 ( x )  } ) $可以转化,原因是$P _3 ( x ) = 0 $一定有至少一个实数解,任意取出一个设为$\lambda $,则$P _3 ( x ) = ( x - \lambda ) P _2 ( x ) $,令$t ^2 + \lambda = x $,带入可以转化为$R ( t ^2 + \lambda , \sqrt { P _2 ( t ^2 + \lambda )  } ) = R _1 ( t , \sqrt { P _4 ( t )  } ) $.这就意味着其实根号下四次多项式是更本质一些的.</p>
<p>而四次多项式可以分解为$P _4 ( x ) = a ( x ^2 + p _1 x + q _1 ) ( x ^2 + p _2 x + q _2 ) $.不妨假设其无重根(如果有重根的话,那么根号下就可以开出去一部分,那就可积了),设其四个根(可能有复根)分别为$\alpha _1 , \beta _1 , \alpha _2 , \beta _2 $,并且$\alpha _1 , \beta _1 $是上述分解中前半部分的根,特别地,如果这是四个实根,则不妨调整它们的顺序使得$\alpha _1 &gt; \beta _1 &gt; \alpha _2 &gt; \beta _2 $.那么根据韦达定理总有:$p _1 = - ( \alpha _1 + \beta _1 ) , q _1 = \alpha _1 \beta _1 $,后半部分同理.</p>
<p>我们尝试把这两个式子的一次项都去掉,当$p _1 = p _2 $的时候可以直接一起配方令$x = t - \frac { p  } { 2  } $.当$p _1 \ne p _2 $的时候,尝试换元用$t $代替$x $,不妨设$x = \frac { u t + v  } { 1 + t  } $,那么$( x ^2 + p _1 x + q _1 ) = \frac { P _2 ‘ ( t )  } { ( 1 + t ) ^2  } $.为了让其没有一次项应当解以下方程:</p>
<script type="math/tex; mode=display">
\begin{cases}
2 u v + p _1 ( u + v ) + 2 q _1 = 0 \\
2 u v + p _2 ( u + v ) + 2 q _2 = 0 
\end{cases}</script><p>此时可以解出来$\begin{cases}u + v = - \frac { 2 ( q _1 - q _2 )  } { p _1 - p _2  } \ u v = \frac { p _2 q _1 - p _1 q _2  } { p _1 - p _2  } \end{cases} $,为了解出$u , v $是两个实数,应当检验$( u + v ) ^2 - 4 uv \geq 0 $是否成立.带入韦达定理发现左边等于$( \alpha _1 - \alpha _2 ) ( \alpha _1 - \beta _2 ) ( \beta _1 - \alpha _2 ) ( \beta _1 - \beta _2 ) &gt; 0 $.原因是如果是四个实根,则根据假设立刻得到.如果存在复根则配对一下复根也可以立刻得到.</p>
<p>总之,在上面的一系列操作后,我们要研究的形式统一成了$R ( t , y = \sqrt { A ( 1 + m _1 t ^2 ) ( 1 + m _2 t ^2 )  } ) = \frac { a ( t ) + b ( t ) y  } { c ( t ) + d ( t ) y  } = B _1 ( t ) + B _2 ( t ) y $,其中$B _1 ( t ) , B _2 ( t ) $都是$t $的有理函数.前者可以直接积分拆出去,那我们关心的就只剩下后面的$B _2 ( t ) y = \frac { B _2 ( t ) y  } { y  } $的部分.</p>
<p>我们之前已经提过可以将一个函数拆为偶函数和奇函数之和,事实上:</p>
<script type="math/tex; mode=display">
R ( t ) = \frac { R ( t ) + R ( - t )  } { 2  } + \frac { R ( t ) - R ( - t )  } { 2  } = R _1 ( t ^2 ) + tR _2 ( t ^2 )</script><p>那么后者立刻可以换元积分,只剩下前者做不动.剩下的形式是:$\int \frac { R ( t ^2 )  } { \sqrt { A ( 1 + m _1 t ^2 ) ( 1 + m _2 t ^2 )  }  } \text { d  } t $,其中$A $可以先扔出去一些,使得$A = \pm 1 $.而且由于被积函数是偶函数,所以还可以不妨设$t \geq 0 $.由于根号下不能变成二次函数(不然就直接做完了),还不妨设$m _1 \ne m _2 , m _1 \ne 0 , m _2 \ne 0 $.下面开始讨论:</p>
<ol>
<li>$A = 1 $,$m _1 = - h _1 ^2 , m _2 = - h _2 ^2 , h _1 &gt; h _2 &gt; 0 $.</li>
</ol>
<p>此时令$t = \frac { z  } { h _1  } $带入化简变形再扔出去点常数得到原式变化为$\int \frac { R ( z ^2 )  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \text { d  } z $,其中$k = \frac { h _2  } { h _1  } $.</p>
<ol>
<li>$A = 1 $,$m _1 = - h _1 ^2 , m _2 = h _2 ^2 , h _1 &gt; 0 , h _2 &gt; 0 $.</li>
</ol>
<p>此时令$t = \frac { \sqrt { 1 - z ^2  }  } { h _1  } $.扔出去一些常数仍然可以化简成(1)的形式,只是$k = \frac { h _2  } { \sqrt { h _1 ^2 + h _2 ^2  }  } $.</p>
<ol>
<li>$A = 1 , m _1 = h _1 ^2 , m _2 = h _2 ^2 , h _1 &gt; h _2 &gt; 0 $.</li>
</ol>
<p>令$t = \frac { z  } { h _1 \sqrt { 1 - z ^2  }  } $.扔出去一些常数仍然是(1)的形式,只是$k = \frac { \sqrt { h _1 ^2 - h _2 ^2  }  } { h _1  } $.</p>
<ol>
<li>$A = - 1 $,$m _1 = - h _1 ^2 , m _2 = h _2 ^2 , h _1 &gt; 0 , h _2 &gt; 0 $.</li>
</ol>
<p>令$t = \frac { 1  } { h _1 \sqrt { 1 - z ^2  }  } $,还是(1)的形式,只是$k = \frac { h _1  } { \sqrt { h _1 ^2 + h _2 ^2  }  } $.</p>
<ol>
<li>$A = - 1 $,$m _1 = - h _1 ^2 , m _2 = - h _2 ^2 , h _1 &gt; h _2 &gt; 0 $.</li>
</ol>
<p>令$t = \frac { \sqrt { 1 - \frac { h _1 ^2 - h ^2 _2  } { h _1 ^2  } z ^2  }  } { h _2  } $,还是(1),只是$k = \frac { \sqrt { h _1 ^2 - h _2 ^2  }  } { h _1  } $.</p>
<p>这样就全都转化为了$\int \frac { R ( z ^2 )  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \text { d  } z $的形式了.然后把$R ( z ^2 ) $给拆开,那么这个式子就应该是$I _n = \int \frac { z ^{ 2 n  }  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \text { d  } z $和$H _m = \int \frac { \text { d  } z  } { ( z ^2 - a ) ^m \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } $的线性组合,注意这里系数有可能是复数.</p>
<p>此时注意到</p>
<script type="math/tex; mode=display">
\begin{aligned}
( z ^{ 2 n - 3  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } ) ' \\
& = ( 2 n - 3 ) z ^{ 2 n - 4  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } + z ^{ 2 n - 3  } \frac { 2 k ^2 z ^3 - ( k ^2 + 1 ) z  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \\
& = \frac { ( 2 n - 3 ) z ^{ 2 n - 4  } { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } + z ^{ 2 n - 3  } ( 2 k ^2 z ^3 - ( k ^2 + 1 ) z )  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \\
& = \frac { ( 2 n - 1 ) k ^2 z ^{ 2 n  } - ( 2 n - 2 ) ( k ^2 + 1 ) z ^{ 2 n - 2  } + ( 2 n - 3 ) z ^{ 2 n - 4  }  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } 
\end{aligned}</script><p>两边积分得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( 2 n - 1 ) k ^2 I _n - ( 2 n - 2 ) ( k ^2 + 1 ) I _{ n - 1  } + ( 2 n - 3 ) I _{ n - 2  } \\
& = z ^{ 2 n - 3  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } 
\end{aligned}</script><p>上述只要$n $是整数就行,甚至不需要$n $是正的.所以所有的$I _n $,包括负整数$n $,都可以被$I _0 , I _1 $表示.</p>
<p>接下来看$H _m $,当$a = 0 $的时候无非是$H _m = I _{ - m  } $,</p>
<p>接下来注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \frac { z  } { ( z ^2 - a ) ^{ m - 1  }  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } ) ' \\
& = \frac { ( 2 - 2 m ) z ^2 + z ^2 - a  } { ( z ^2 - a ) ^m  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } \\
+ \frac { 2 k ^2 z ^4 - ( k ^2 + 1 ) z ^2  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } \frac { 1  } { ( z ^2 - a ) ^{ m - 1  }  } \\

\end{aligned}</script><p>令$C = \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } $,$W = z ^2 - a $,那么$C ^2 = k ^2 ( W + a ) ^2 - ( k ^2 + 1 ) ( W + a ) + 1 $.上式化简为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
& = \frac { ( 2 - 2 m ) ( W + a ) C ^2  } { W ^m C  } + \frac { C ^2 + 2 k ^2 ( W + a ) ^2 - ( k ^2 + 1 ) ( W + a )  } { W ^{ m - 1  } C  } \\
& = \frac { ( 2 - 2 m ) ( W + a ) ( k ^2 ( W + a ) ^2 - ( k ^2 + 1 ) ( W + a ) + 1 )  } { W ^m C  } \\
+ \frac { 3 k ^2 ( W + a ) ^2 - 2 ( k ^2 + 1 ) ( W + a ) + 1  } { W ^{ m - 1  } C  } 
\end{aligned}</script><p>接下来是繁复的化简,然后两边积分得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { z  } { ( z ^2 - a ) ^{ m - 1  }  } \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  } \\
& = ( 2 m - 2 ) ( - a + ( k ^2 + 1 ) a ^2 - k ^2 a ^3 ) H _m \\
- ( 2 m - 3 ) ( 1 - 2 a ( k ^2 + 1 ) + 3 k ^2 a ^2 ) H _{ m - 1  } \\
+ ( 2 m - 4 ) ( k ^2 + 1 - 3 k ^2 a ) H _{ m - 2  } \\
- ( 2 m - 5 ) k ^2 H _{ m - 3  } 
\end{aligned}</script><p>而注意到$H _0 = I _0 , H _{ - 1  } = I _1 - aI _0 $.</p>
<p>综上,所有的椭圆积分都可以由$I _0 , I _1 , H _1 $表示.也就是椭圆积分可以转化为以下三种积分:</p>
<ol>
<li><p>$\int \frac { \text { d  } z  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } $.</p>
</li>
<li><p>$\int \frac { z ^2 \text { d  } z  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } $.</p>
</li>
<li><p>$\int \frac { \text { d  } z  } { ( 1 + hz ^2 ) \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } $,其中$h $可以是复数.</p>
</li>
</ol>
<p>有意思的是如果令$z = \sin \varphi $,$\text { d  } z = \sqrt { 1 - z ^2  } \text { d  } \varphi $,这样形式就好看了很多.椭圆积分可以用以下的优美形式表示:</p>
<ol>
<li><p>$E ( k , \varphi ) = \int \frac { \text { d  } \varphi  } { \sqrt { 1 - k ^2 \sin ^2 \varphi  }  } $.</p>
</li>
<li><p>$F ( k , \varphi ) = \int \sqrt { 1 - k ^2 \sin ^2 \varphi  }  \text { d  } \varphi $.</p>
</li>
<li><p>$\Pi ( h , k , \varphi ) = \int \frac { \text { d  } \varphi  } { ( 1 + h \sin ^2 \varphi ) \sqrt { 1 - k ^2 \sin ^2 \varphi  }  } $,其中$h $可以是复数.</p>
</li>
</ol>
<p>其中:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int \frac { z ^2 \text { d  } z  } { \sqrt { ( 1 - z ^2 ) ( 1 - k ^2 z ^2 )  }  } & = \int \frac { \sin ^2 \varphi \text { d  } \varphi  } { \sqrt { 1 - k ^2 \sin ^2 \varphi  }  } \\
& = \int ( \frac { 1  } { k ^2 \sqrt { 1 - k ^2 \sin ^2 \varphi  }  } \text { )  } - \frac { 1 - k ^2 \sin ^2 \varphi  } { k ^2 \sqrt { 1 - k ^2 \sin ^2 \varphi  }  } \text { )  } d \varphi \\
& = \frac { E ( k , \varphi )  } { k ^2  } - \frac { F ( k , \varphi )  } { k ^2  } 
\end{aligned}</script><h4><span id="黎曼积分">黎曼积分</span></h4><p>设$f ( x ) $是定义在$[ a , b ] $上的函数,对于区间$[ a , b ] $插入分点$x _i ( i = 0 , 1 , \cdots , n ) $,且有$a = x _0 &lt; x _1 &lt; \cdots &lt; x _n = b $,我们称之为对区间$[ a , b ] $的一种<strong>分割</strong>,并记为$\Delta $.又记$\Delta x _i = x _i - x _{ i - 1  } , i \in [ 1 , n ] $,$\lambda ( \Delta ) = \max \{ \Delta x _i \mid i \in [ 1 , n ] \} $,并定义黎曼和$S _\Delta = \sum _{ i = 1  } ^n f ( \xi _i ) \Delta x _i $.</p>
<p>若存在实数$J $,对$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 $,对于任意分划,只要$\lambda ( \Delta ) &lt; \delta $,都有$| S _\Delta - J | &lt; \epsilon \ $,则称$f ( x ) $在$[ a , b ] $上<strong>黎曼可积</strong>,这个$J $为$f ( x ) $在$[ a , b ] $上的<strong>定积分</strong>,记作$\int _{ a  } ^b f ( x ) \text { d  } x \ $.容易见到定积分唯一,证明无非也是拿$\epsilon $去卡.</p>
<p>对于$[ a , b ] $上的连续函数,定积分实际上就是其与$f ( x ) $围成面积的代数和.</p>
<p>由此可以顺便定义<strong>达布上下和</strong>,即令$m _i = \inf _{ [ x _{ i - 1  } , x _i ]  } f ( x ) , M _i = \sup _{ [ x _{ i - 1  } , x _i ]  } f ( x ) $,并定义<strong>振幅</strong>$w _i = M _i - m _i $,特别地定义$M = \sup ( M _i ) , m = \inf ( m _i ) $.定义$\overline { S  } _\Delta = \sum M _i \Delta x _i , \underline { S  } _{ \Delta  } = \sum m _i \Delta x _i $.</p>
<p>并在此基础上定义上下积分,上积分$\overline { \int _a ^b  } f ( x ) \text { d  } x = \inf \overline { S  } _\Delta , \underline { \int _a ^b  } f ( x ) \text { d  } x = \sup \underline { S  } _\Delta $.上下积分显然都是存在的,我们会在后面证明黎曼可积等价于上下积分相等.</p>
<p>为了方便,我们约定:</p>
<ol>
<li><p>$a = b $,$\int _a ^b f ( x ) \text { d  } x = 0 $.</p>
</li>
<li><p>$a &gt; b $,$\int _a ^b f ( x ) \text { d  } x = - \int _b ^a f ( x ) \text { d  } x $.</p>
</li>
</ol>
<p>下列性质应当是成立的:</p>
<ol>
<li><p>(必要条件)如果一个函数黎曼可积,则它在该闭区间上有界.</p>
</li>
<li><p>对于任意分划任取$\xi $,都有$\underline { S  } _\Delta \leq S _\Delta ( \xi ) \leq \overline { S  } _\Delta $.</p>
</li>
<li><p>$\forall \epsilon &gt; 0 $,$\exists \xi _1 , \xi _2 $,使得$\underline { S  } _\Delta - \epsilon \leq S _\Delta ( \xi _1 ) $,$\overline { S  } _\Delta + \epsilon \geq S _\Delta ( \xi _2 ) $.</p>
</li>
</ol>
<p>再定义所谓加细:如果$\Delta _1 \subseteq \Delta _2 $,那么称$\Delta _2 $是$\Delta _1 $的加细.此时应当有$\overline { S  } _{ \Delta _1  } \geq \overline { S  } _{ \Delta _2  } , \underline { S  } _{ \Delta _1  } \leq \underline { S  } _{ \Delta _2  } $.另外容易注意到如果$| \Delta _2 \setminus \Delta _1 | = k $,那么$0 \leq \overline { S  } _{ \Delta _1  } - \overline { S  } _{ \Delta _2  } \leq k \lambda ( \Delta _1 ) ( M - m ) $,原因是考虑把这些新的断点一个一个加上去,每次加一个会新断开原本的断点,此时最多造成$( M - m ) \Delta x \leq ( M - m ) \lambda ( \Delta _1 ) $的差.注意到此时这些东西似乎全都可以被限制住.</p>
<p>这同样给出了原因:为什么我们会定义上下积分呢?因为随着分点的加多,也就是随着划分的加细,达布上下和会分别单调递减或递增,这样就应当存在一个极限,然而问题在于我们难以在划分上定义序,这样就少了某种极限的方式.然而,我们试图绕开来找到一种确定的能探到极限的方式.</p>
<p>另外的结论是对于任意两个分划$\Delta _1 , \Delta _2 $,总有$\underline { S  } _{ \Delta _1  } \leq \overline { S  } _{ \Delta _2  } $.原因是$\Delta = \Delta _1 \cup \Delta _2 $,立刻见到$\underline { S  } _{ \Delta _1  } \leq \underline { S  } _{ \Delta  } \leq \overline { S  } _\Delta \leq \overline { S  } _{ \Delta _2  } $.这意味着$\overline { \int  } f \geq \underline { \int  } f $.</p>
<p>接下来证明定积分中的<strong>达布定理</strong>,也就是$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 $,$\forall \Delta , \lambda ( \Delta ) &lt; \delta $的时候,$0 \leq \overline { S  } _\Delta - \overline { \int _a ^b  } f ( x ) \text { d  } x \leq \epsilon $.换言之$\lim _{ \lambda ( \Delta ) \to 0  } \overline { S  } _{ \Delta  } = \overline { \int _a ^b  } f ( x ) \text { d  } x $,当然下积分也是同理的.</p>
<p>这个的证明考虑先用上积分的定义,应当存在一个$\Delta ‘ $,满足$0 \leq \overline { S  } _{ \Delta ‘  } - \overline { \int _a ^b  } f ( x ) \text { d  } x \leq \frac { \epsilon  } { 2  } $.不妨设$| \Delta ‘ | = n _0 $,接下来取$\delta &lt; \frac { \epsilon  } { 2 n _0 ( M - m )  } $,那么接下来对于$\forall \Delta , \lambda ( \Delta ) &lt; \delta $的时候,取$\Delta ^<em> = \Delta ‘ \cup \Delta $,根据上面我们证明的步骤,这里最多会多$n _0 $个断点,自然得知$\overline { S  } _{ \Delta  } - \overline { S  } _{ \Delta ^</em>  } \leq n _0 \lambda ( \Delta ) ( M - m ) &lt; \frac { \epsilon  } { 2  } $.</p>
<p>这样的话就可以注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\overline { S  } _\Delta - \overline { \int _a ^b  } f ( x ) \text { d  } x \\
& = ( \overline { S  } _{ \Delta '  } - \overline { \int _a ^b  } f ( x ) \text { d  } x ) - ( \overline { S  } _{ \Delta '  } - \overline { S  } _{ \Delta  } ) \\
& < \frac { \epsilon  } { 2  } - ( \overline { S  } _{ \Delta ^*  } - \overline { S  } _\Delta ) & < \epsilon 
\end{aligned}</script><p>这里可以证明原函数可积的充分必要条件是上下积分相等.</p>
<p>首先证明充分性:当上下积分相等的时候,设其为$J $,取足够小的$\epsilon $,由上知道$\exists \delta &gt; 0 $,使得$J - \epsilon &lt; \underline { S  } _\Delta \leq S _\Delta ( \xi ) \leq \overline { S  } _\Delta &lt; J + \epsilon $,夹逼一下立刻知道其满足.</p>
<p>然后证明必要性:当原函数可积分的时候,只要分点足够密,应当有$J - \epsilon &lt; \underline { S  } _\Delta \leq \underline { \int  } f ( x ) \text { d  } x \leq \overline { \int  } f ( x ) \text { d  } x \leq \overline { S  } _\Delta &lt; J + \epsilon $.</p>
<p>而由于我们可以见到上和与下和应当是错开来的,而如果它们中间能接上自然意味着上下积分相等.因此推论为:如果$f $在闭区间上有界并且$\forall \epsilon , \exists \Delta $使得$0 \leq \overline { S  } _\Delta - \underline { S  } _\Delta \leq \epsilon $,则$f $可积.我们最初拿到的那个定义也可以这么改:只需要存在一个分划而不需要使得任意分划都这么满足.方式就是用我们已经找到的这个去并我们想要限制的那个,然后把限制延后一点使得这些全被限制住.</p>
<p>由上述可以证明闭区间上的连续函数一定是闭区间上的可积函数.原因是闭区间上的连续函数一定是一致连续函数,那么对于一个$\epsilon $,可以找到一个$\delta $控制住区间长度,使得极差$&lt; \epsilon $.此时直接找一个$\Delta $,注意到$\overline { S  } - \underline { S  } = \sum ( M _i - m _i ) \Delta x _i \leq \sum \epsilon \Delta x \leq ( b - a ) \epsilon $,只需取$\epsilon \to 0 $就可以搞定.</p>
<p>还可以证明如果$f $在闭区间上有界并且只有有限个间断点,那么$f $可积.原因也很简单,只需要拿足够小的区间把这有限个间断点盖住,然后外面继续如上操作,间断点处尽可能缩小区间长度来取出其影响.</p>
<p>还可以证明单调函数一定可积,原因是$\overline { S  } - \underline { S  } \leq \delta ( f ( b ) - f ( a ) ) \to 0 $.</p>
<h5><span id="可积性与连续性的关系勒贝格定理">可积性与连续性的关系(勒贝格定理)</span></h5><p>我们还可以进一步探索黎曼可积和连续性的关系,例如,我们可以证明:$\forall f \in R [ a , b ] , \forall \epsilon &gt; 0 , \exists g \in C [ a , b ] \int _a ^b | f ( x ) - g ( x ) | \text { d  } x &lt; \epsilon $.</p>
<p>如何证明呢?感觉上只需要用分段线性函数去逼近一下就可以了对吧.所以我们考虑对于划分$\Delta $,直接把所有的$( x _i , f ( x _i ) ) $连起来形成一个分段线性函数.然后观察此时的$| f - g | $,不妨分段考虑,对于$\int _{ x _{ i - 1  }  } ^{ x _i  } ( f - g ) ( x ) \text { d  } x \leq ( M _i - m _i ) \Delta x _i $,而后者求和之后实际上就是$\overline { S  } - \underline { S  } $,当$f $可积的时候这个当然会趋近于$0 $.</p>
<p>我们还可以证明$f \in R [ a , b ] $的连续点在$[ a , b ] $上稠密,只需要证明$\forall [ \alpha , \beta ] \in R [ a , b ] , \alpha &lt; \beta $,$[ \alpha , \beta ] $这个区间内存在连续点即可.考虑定义一点处的振幅$w _{ f  } ( x _0 ) = \lim _{ \delta \to + 0  } w _f ( x _0 - \delta , x _0 + \delta ) $,这个随着$\delta $缩小当然应当是单调不增的,因此一定有非负极限(但可能是无穷大).我们注意到$f $在$x _0 $处连续的充要条件是$f $在$x _0 $处的振幅为$0 $.必要性和充分性都容易证明.</p>
<p>我们考虑用区间套来找到这个连续点,考虑对于$[ \alpha _0 , \beta _0 ] \in [ a , b ] $,取分划$\Delta _0 $使得$\sum w _i \Delta x _i &lt; \frac { 1  } { 2  } ( \beta _0 - \alpha _0 ) $,并且加细使得$\lambda ( \Delta _0 ) &lt; \frac { 1  } { 2  } ( \beta _0 - \alpha _0 ) $,注意这里的两个$\frac { 1  } { 2  } $其实用处不同,前者是为了让$w _i $足够小,后者是为了让区间长度足够小.此时考虑由于$\sum \Delta x _i = \beta _0 - \alpha _0 $,所以一定存在一个$w _i &lt; \frac { 1  } { 2  } $,拿出这个区间作为$[ \alpha _1 , \beta _1 ] $,则区间长度至少折半,并且只需在上述对$[ \alpha _n , \beta _n ] $时取$\sum w _i \Delta x _i &lt; \frac { 1  } { 2 ^{ n + 1  }  } ( \beta _0 - \alpha _0 ) $就可以使得$w _i $也趋近于$0 $,这样就能用区间套找到一个点使得它是连续点.</p>
<p>事实上可以证明一个函数黎曼可积的充分必要条件是其有界并且几乎处处连续.</p>
<p>为了方便不妨把$f $延拓到整个实轴,令$f ( x ) = \begin{cases}f ( a ) &amp; x \leq a \ f ( b ) &amp; x \geq b \ f ( x ) &amp; \text { otherwise  } \end{cases} $.</p>
<p>下面定义$E _r = \{ x _0 \mid w _f ( x _0 ) \geq \frac { 1  } { r  } \} $.我们考虑证明其是闭集,也就是证明其补集$E _r ^c = \{ x _0 \in ( a , b ) \mid w _f ( x _0 ) &lt; \frac { 1  } { r  } \} $是开集.如果$x _0 \in E _r ^c $,注意到此时$\exists \delta &gt; 0 , w _f ( x _0 - \delta , x _0 + \delta ) &lt; \frac { 1  } { r  } $,那么这必然意味着$x _0 $邻域中的点的振幅也会$&lt; \frac { 1  } { r  } $,这当然意味着其是开集.</p>
<p>令$D $是$f $的间断点集,容易见到$D = \bigcup _{ n = 1  } ^{ \infty  } E _n $,下面只需要证明每个$E _n $都是零测集即可.</p>
<p>先证明必要性:当$f \in R [ a , b ] $时,则$f $有界,现在对于固定的$m $,尝试证明$E _m $是零测的,由达布定理,$\forall \epsilon &gt; 0 $,$\exists \Delta $,使得$\sum w _i \Delta x _i = \overline { S  } _\Delta - \underline { S  } _\Delta &lt; \epsilon $.</p>
<p>观察前者,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\epsilon & > \sum w _i \Delta x _i & = \overline { S  } _\Delta - \underline { S  } _\Delta \\
& = \sum _{ E _m \cap ( x _{ k - 1  } , x _k ) \ne \emptyset  } w _k \Delta x _k + \sum _{ E _m \cap ( x _{ k - 1  } , x _k ) = \emptyset  } w _k \Delta x _k \\
& \geq \frac { 1  } { m  } \sum _{ E _m \cap ( x _{ k - 1  } , x _k ) \ne \emptyset  } \Delta x _k 
\end{aligned}</script><p>因此$m ^* ( E _m ) \leq \sum _{ E _m \cap ( x _{ k - 1  } , x _k ) \ne \emptyset  } \Delta x _k &lt; m \epsilon $,由于$m $一开始就固定,$\epsilon $可以尽量小,所以这意味着$E _m $是零测集.必要性得证.</p>
<p>再证明充分性:当每一个$E _m $都是零测集的时候,$\forall \epsilon &gt; 0 $,取$r \in N _+ , r &gt; \frac { 1  } { \epsilon  } $.此时见到$E _{ r  } ^c $是开集,那它可以写成若干两两不交开区间的并,不妨记作$E _r ^c = \bigcup _{ k = 1  } ^{ \infty  } T _k $.由于此时$E _m $是零测集,这意味着$\sum | T _k | = b - a $.接下来可以取足够大的$n $使得$\sum _1 ^n | T _k | &gt; b - a - \frac { \epsilon  } { 2  } $,接下来取$T _k $的闭子区间$J _k $,使得$\sum _1 ^n | J _k | &gt; b - a - \epsilon $.这里为什么要把开区间再进一步缩成闭区间呢?原因是你这里如果直接用开区间构造分划可能会把端点处给包进去,因此我们不得不设其端点处的一部分值拿到闭区间,这样那些振幅较大的就被舍弃了.</p>
<p>接下来考虑由于每个点$x _0 \in J _k $的$w _f ( x _0 ) &lt; \frac { 1  } { r  } &lt; \epsilon $,必定有其一个小邻域$( x _0 - \delta , x _0 + \delta ) $满足整个邻域的振幅$&lt; \epsilon $,用有限覆盖定理拿出一个开覆盖,然后缩掉这些开覆盖的区间就能拿到一个$J _k $的分划(或者干脆将这些开区间的端点和$J _k $的端点直接当作一个分划),把这些分划全都并起来就得到了一个划分$\Delta $.</p>
<p>此时观察这个划分,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\overline { S  } _\Delta - \underline { S  } _\Delta \\
& = \sum w _k \Delta x _k \\
& = \sum _{ [ x _{ k - 1  } , x _k ] \subseteq \bigcup J _i  } w _k \Delta x _k + \sum _{ [ x _{ k - 1  } , x _k ] \subsetneq \bigcup J _i  } w _k \Delta x _k \\
& < \epsilon ( b - a ) + ( M - m ) \epsilon 
\end{aligned}</script><p>这样就可以使其任意小.</p>
<p>上述证明同样声明了:黎曼可积的充要条件是震荡区间超过某个值的区间长度之和随着细分的增加应当尽可能小.</p>
<p>上述结论立刻能见到比如黎曼函数是黎曼可积的,因为其间断点集就是有理点集,就是零测集.</p>
<h5><span id="可积函数的简单性质">可积函数的简单性质</span></h5><p>不妨设$f , g \in R [ a , b ] $,则:</p>
<ol>
<li><p>$m ( b - a ) \leq \int _a ^b f ( x ) \text { d  } x \leq M ( b - a ) $.</p>
</li>
<li><p>$f \geq 0 $则$\int _a ^b f ( x ) \text { d  } x \geq 0 $.</p>
</li>
<li><p>$\int _{ a  } ^b ( f \pm g ) \text { d  } x = \int _a ^b f \text { d  } x \pm \int _a ^b g \text { d  } x $.</p>
</li>
<li><p>$\int _{ a  } ^b Cf \text { d  } x = C \int _a ^b f \text { d  } x $.</p>
</li>
<li><p>(保序性)$f \geq g $则$\int _a ^b f \text { d  } x \geq \int _a ^b g \text { d  } x $.事实上只要$f \geq g $在一个稠密子集上成立即可.</p>
</li>
<li><p>如果$c \in [ a , b ] $,那么此时$f \in R [ a , c ] , f \in R [ c , b ] $,并且$\int _a ^b f \text { d  } x = \int _a ^c f \text { d  } x + \int _c ^b f \text { d  } x $.</p>
</li>
<li><p>如果$g $是连续函数,那么$g ( f ( x ) ) \in R [ a , b ] $.</p>
</li>
<li><p>$| f | \in R [ a , b ] $,并且$| \int _a ^b f ( x ) \text { d  } x | \leq \int _a ^b | f ( x ) | \text { d  } x $.</p>
</li>
<li><p>如果除了一个有限的点集以外,$g = f $,则$g \in R [ a , b ] $并且$\int _a ^b g \text { d  } x = \int _a ^b f \text { d  } x $.</p>
</li>
<li><p>如果$f \geq 0 , \int _a ^b f \text { d  } x = 0 $,那么$f $在其连续点集合上恒等于$0 $.</p>
</li>
</ol>
<p>(1)(2)是显然的,(3)(4)(5)只需将积分看作黎曼和的极限,(6)的话考虑在$[ a , b ] $上间断点集都是零测的了,那么其子集$[ a , c ] , [ c , b ] $上的间断点集当然也是零测集.</p>
<p>(7)的话考虑一个几乎处处连续的函数在外面套一层连续函数当然也是几乎处处连续的.</p>
<p>(8)的话考虑绝对值函数是连续函数,然后注意到$- | f ( x ) | \leq f ( x ) \leq | f ( x ) | $使用保序性就可以了.</p>
<p>(9)的证明是简单的.但是为什么是有限点集而不是零测集呢?因为如果是无限个点,那么它们不仅会影响自己的连续性,还会影响旁边点的连续性,例如迪利克雷函数.这里可以看出来黎曼函数是有其限制性的,推广到勒贝格积分后会消除这个问题.</p>
<p>(10)的话只需考虑反证法,对于一个连续点$x _0 $,如果$f ( x _0 ) &gt; 0 $,那么周围应当有一个小邻域也大于$0 $,或者干脆用一致连续性取$&gt; \frac { f ( x )  } { 2  } $的一个小邻域,这样就反证完了.</p>
<h5><span id="广义原函数">广义原函数</span></h5><p>对于$f ( x ) : I \to \mathbb { R  } $,称$F ( x ) $为其<strong>广义原函数</strong>,若$\forall c , d \in I , c &lt; d $满足$\frac { F ( d ) - F ( c )  } { d - c  } \in [ \inf _{ [ c , d ]  } f ( x ) , \sup _{ [ c , d ]  } f ( x ) ] $.容易见到原函数一定是广义原函数,原因是拉格朗日中值定理.</p>
<p>应当容易注意到以下命题:</p>
<ol>
<li><p>局部有界函数的广义原函数是局部李氏连续的,故几乎处处有导数.</p>
</li>
<li><p>$f ( x ) $在$x _0 $处连续,$F ( x ) $是$f ( x ) $的广义原函数,则$F ‘ ( x _0 ) $存在并且恰好等于$f ( x _0 ) $.</p>
</li>
</ol>
<p>(1)是显然的.</p>
<p>(2)的证明的话,考虑$| \frac { F ( x ) - F ( x _0 )  } { x - x _0  } - f ( x _0 ) | \leq w _f [ x _0 , x ] $,由于$f ( x _0 ) $连续,那么此时其振幅$w _f [ x _0 , x ] $在$x \to x _0 $时应当趋近于$0 $,使用夹逼定理,于是证毕.</p>
<h5><span id="牛顿-莱布尼茨公式微积分基本定理">牛顿-莱布尼茨公式(微积分基本定理)</span></h5><p>先证明一个引理:如果$f ( x ) \in [ a , b ] $,$F ( x ) $是其广义原函数,那么$\underline { \int _a ^b  } f ( x ) \text { d  } x \leq F ( b ) - F ( a ) \leq \overline { \int _a ^b  } f ( x ) \text { d  } x $.</p>
<p>证明的话,只需证明对于任意分划$\Delta $都有$\underline { S  } _\Delta ( f ) \leq F ( b ) - F ( a ) \leq \overline { S  } _\Delta f ( x ) $.而注意到$F ( b ) - F ( a ) = \sum F ( x _i ) - F ( x _{ i - 1  } ) = \sum \frac { F ( x _i ) - F ( x _{ i - 1  } )  } { x _i - x _{ i - 1  }  } \Delta x _i $.而根据广义原函数的定义,$m _i \leq \frac { F ( x _i ) - F ( x _{ i - 1  } )  } { x _i - x _{ i - 1  }  } \leq M _i $,立刻证毕.</p>
<p>由此显然证明了牛顿-莱布尼茨公式(NL公式):设$f ( x ) \in R [ a , b ] $,并且能找到其一个广义原函数$F ( x ) $,则$F ( b ) - F ( a ) = \int _a ^b f ( x ) \text { d  } x $.</p>
<p>接下来声明一个定理:如果一个函数$f ( x ) \in R [ a , b ] $,它就存在广义原函数,而且不同的广义原函数最多相差一个常数.</p>
<p>先证明存在性,我们注意到变限积分$F ( x ) = \int _a ^x f ( t ) \text { d  } t $显然是$f ( x ) $的广义原函数,而且它是处处连续的,只需套用定义就可以证明.</p>
<p>再证唯一性,设$F _1 ( x ) , F _2 ( x ) $都是$f ( x ) $的广义原函数.根据LN公式,有$F _1 ( x ) - F _1 ( a ) = \int _{ a  } ^x f ( t ) \text { d  } t = F _2 ( x ) - F _2 ( a ) $,立刻有$F _1 ( x ) - F _2 ( x ) = F _1 ( a ) - F _2 ( a ) = C $.</p>
<p>此时回忆到$f ( x ) $在$x _0 $处连续可以推出$F ( x ) $可导,那么反过来是否成立呢?考虑以下经典反例:</p>
<script type="math/tex; mode=display">
\begin{aligned}
F ( x ) & = \begin{cases}
0 & x = 0 \\
x ^2 \sin \frac { 1  } { x  } & \text { otherwise  } 
\end{cases} \\
f ( x ) & = F ' ( x ) & = \begin{cases}
0 & x = 0 \\
2 x \sin \frac { 1  } { x  } - \cos \frac { 1  } { x  } & \text { otherwise  } 
\end{cases} 
\end{aligned}</script><p>但总之可以看到连续函数一定有原函数.</p>
<p>此时回忆到我们曾经定义过左右上下导数$( F _\pm ) ‘ $和$( F ^\pm ) ‘ $.设$f \in R [ a , b ] $,$F $是$f $的广义原函数,不妨直接设$F ( x ) = \int _a ^x f ( t ) \text { d  } t $,那么我们声明$\int _a ^b ( F _\pm ) ‘ \text { d  } x = \int _a ^b ( F ^\pm ) ‘ \text { d  } x = \int _a ^b f ( x ) \text { d  } x $.</p>
<p>四个证明类似,只考虑其中之一$F _+ ‘ $如何证明.取$m _0 = \inf _{ [ c , d ]  } f $,下面令$G ( x ) = F ( x ) - F ( c ) - m _0 ( x - c ) = \int _c ^x ( f ( t ) - m _0 ) \text { d  } t $.当$x \in [ c , d ] $时,容易发现$G ( x ) $单增.既然如此,其任意左右上下导数当然都$\geq 0 $,也就是$( G _+ ) ‘ = ( F _+ ) ‘ - m _0 \geq 0 $.同理如果取$M _0 = \sup _{ [ c , d ]  } f $的话还可以证明$( F _+ ) ‘ \leq M _0 $.</p>
<p>那么就有$w _{ F _+ ‘  } [ c , d ] \leq w _{ f  } [ c , d ] $,我们知道$f $是黎曼可积的,也就是$0 \leq \sum w _{ F _+ ‘  } [ x _{ i - 1  } , x _i ] \Delta x _i \leq \sum w _f [ x _{ i - 1  } , x _i ] \Delta x _i &lt; \epsilon $,此时就可以证明其可积性.</p>
<p>而注意到$f $几乎处处连续,$F $几乎处处可导,并且在$f $的连续点处$f ( x ) = F _+ ‘ $,这个连续点集当然是稠密集,因此它们的积分相等,这样就做完了.</p>
<h6><span id="example1">Example1</span></h6><p>求$\int _a ^b \text { sgn  } ( x ) \text { d  } x $.</p>
<p>注意到$\text { sgn  } ( x ) $的广义原函数是$| x | $,所以$\int _a ^b \text { sgn  } ( x ) \text { d  } x = | b | - | a | $.</p>
<h6><span id="example2黎曼引理">Example2(黎曼引理)</span></h6><p>设$f \in R [ a , b ] , g \in R [ 0 , T ] $并且$g $在$\mathbb { R  } $上以$T $为周期.求证:</p>
<script type="math/tex; mode=display">
\lim _{ \lambda \to \infty  } \int _a ^b f ( x ) g ( \lambda x ) \text { d  } x = \cfrac { \int _0 ^T g ( x ) \text { d  } x  } { T  } \int _a ^b f ( x ) \text { d  } x</script><p>首先注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lim _{ \lambda \to \infty  } \int _a ^b f ( x ) g ( \lambda x ) \text { d  } x \\
& = \lim _{ \lambda \to \infty  } \int _a ^b f ( x ) ( g ( \lambda x ) - \cfrac { \int _0 ^T g ( x ) \text { d  } x  } { T  } + \cfrac { \int _0 ^T g ( x ) \text { d  } x  } { T  } ) \text { d  } x \\

\end{aligned}</script><p>因此可以用$g ( \lambda x ) - \cfrac { \int _0 ^T g ( x ) \text { d  } x  } { T  } $代替$g $,这样就能满足$\int _0 ^T g ( x ) \text { d  } x = 0 $.</p>
<p>接下来只需证明$\lim _{ \lambda \to \infty  } \int _a ^b f ( x ) g ( \lambda x ) \text { d  } x = 0 $,不妨设$| f ( x ) | \leq M , | g ( x ) | \leq M $.</p>
<p>考虑对分划$\Delta $,满足$\sum w _i \Delta x _i \leq \epsilon $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _a ^b f ( x ) g ( \lambda x ) \text { d  } x | \\
& = | \sum \int _{ x _{ i - 1  }  } ^{ x _i  } ( f ( x ) - f ( x _i ) + f ( x _i ) ) g ( \lambda x ) \text { d  } x | \\
& \leq | \sum \int _{ x _{ i - 1  }  } ^{ x _i  } f ( x _i ) g ( \lambda x ) \text { d  } x | + | \sum \int _{ x _{ i - 1  }  } ^{ x _i  } ( f ( x ) - f ( x _i ) ) g ( \lambda x ) \text { d  } x | \\
& \leq \sum | f ( x _i ) | \cdot | \int _{ x _{ i - 1  }  } ^{ x _i  } g ( \lambda x ) \text { d  } x | + M \sum w _i \Delta x _i \\
& \leq M \sum | \int _{ x _{ i - 1  }  } ^{ x _i  } g ( \lambda x ) \text { d  } x | + M \sum w _i \Delta x _i \\
& \leq M \sum | \frac { 1  } { \lambda  } \int _{ \lambda x _{ i - 1  }  } ^{ \lambda x _i  } g ( x ) \text { d  } x | + M \epsilon 
\end{aligned}</script><p>接下来设$G ( x ) = \int _0 ^x g ( t ) \text { d  } t $,由于$g $的周期性,而且其在任何一个长度为$T $的区间上积分为$0 $,所以$| G ( x ) | \leq W $,那么$\forall x , y , | G ( x ) - G ( y ) | \leq 2 W $.</p>
<p>那么上式就$\leq 2 MW \frac { n  } { \lambda  } + M \epsilon $,这里虽然有个无穷大的$n $,但由于$\lambda $可以尽可能大且在$n $之后决定取值,因此这个影响可以被消除.</p>
<p>这个命题的一个平凡推论是$g ( x ) = \sin ( nx ) $:</p>
<script type="math/tex; mode=display">
\lim _{ \lambda \to \infty  } \int _a ^b f ( x ) \sin ( \lambda x ) \mathrm { d  } x = \lim _{ \lambda \to \infty  } \int _a ^b f ( x ) \cos ( \lambda x ) \mathrm { d  } x = 0</script><h6><span id="example3">Example3</span></h6><p>求$\lim _{ n \to \infty  } I _n $,其中$I _n = \frac { 1  } { n ^{ 1 + \alpha  }  } ( \sum _{ k = 1  } ^n k ^\alpha ) = \frac { 1  } { n  } \sum _{ k = 1  } ^n ( \frac { k  } { n  } ) ^\alpha $.</p>
<p>注意到$n \to \infty $的时候,上面就等于$\int _0 ^1 x ^\alpha \text { d  } x = \frac { 1  } { 1 + \alpha  } $.</p>
<h6><span id="example4dirichlet核">Example4(Dirichlet核)</span></h6><p>求$\int _0 ^{ \frac { \pi  } { 2  }  } \frac { \sin ( ( 2 n + 1 ) x )  } { \sin x  } \text { d  } x $.</p>
<p>注意到根据积化和差有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \frac { \pi  } { 2  }  } \frac { \sin ( ( 2 n + 1 ) x )  } { \sin x  } \text { d  } x \\
& = \int _0 ^{ \frac { \pi  } { 2  }  } ( 1 + 2 \sum _k \cos ( 2 kx ) ) \text { d  } x \\
& = \frac { \pi  } { 2  } + 2 \sum _{ k  } \frac { 1  } { 2 k  } \sin ( k \pi ) \\
& = \frac { \pi  } { 2  } 
\end{aligned}</script><h6><span id="example5">Example5</span></h6><p>考虑$f \in \mathbb { R  } $,$\forall a &lt; b $,都有$f \in R [ a , b ] $,已知$f ( x ) = \int _0 ^x f ( t ) \text { d  } t $,求证$f \equiv 0 $.</p>
<p>首先注意到变限积分是李氏连续的,因此$f $当然就是局部李氏连续的,因此自然看出$f $在$\mathbb { R  } $上都是连续的.既然如此,那$f $就在$\mathbb { R  } $上处处可导并且$f ‘ ( x ) \equiv f ( x ) $,同理还可以看出$f $实际上任意阶可导.理应见到$f $应当和$e ^x $有关,凑$g ( x ) = \frac { f ( x )  } { e ^x  } $,则$g ‘ ( x ) = \frac { f ‘ - f  } { e ^x  } \equiv 0 $,这立刻得到$g ( x ) \equiv C $.</p>
<p>然而$g ( 0 ) = f ( 0 ) = 0 $,于是$g \equiv C \equiv 0 $,所以$f \equiv 0 $.</p>
<h5><span id="换元法">换元法</span></h5><p>不妨设$f \in R [ a , b ] , F ‘ = f $,$\varphi ( t ) : [ \alpha , \beta ] \to [ a , b ] $,$\varphi ( \alpha ) = a , \varphi ( \beta ) = b $,并且$\varphi $可导,而且$f ( \varphi ( t ) ) \varphi ‘ ( t ) \in R [ \alpha , \beta ] $,则:</p>
<script type="math/tex; mode=display">
\int _a ^b f ( x ) \text { d  } x = \int _\alpha ^\beta f ( \varphi ( t ) ) \varphi ' ( t ) \text { d  } t</script><p>证明的话,考虑考虑NL公式,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( F ( \varphi ( t ) ) ) ' & = f ( \varphi ( t ) ) \varphi ' ( t ) \\
\int _\alpha ^\beta ( F ( \varphi ( t ) ) ) ' & = \int _\alpha ^\beta f ( \varphi ( t ) ) \varphi ' ( t ) \\
F ( b ) - F ( a ) & = \int _\alpha ^\beta f ( \varphi ( t ) ) \varphi ' ( t ) 
\end{aligned}</script><p>然而回忆到有原函数和是否黎曼可积之间是有区别的,适当调整条件可以得到另一个策略的换元法:不妨设$f \in R [ a , b ] , \varphi ( t ) : [ \alpha , \beta ] \to [ a , b ] $,并且$\varphi ( t ) $单增,$\varphi ( \alpha ) = a , \varphi ( \beta ) = b $,$\varphi $可导并且$\varphi ‘ \in R [ \alpha , \beta ] $,则$f ( \varphi ( t ) ) \varphi ‘ ( t ) \in R [ \alpha , \beta ] $且上述积分仍然成立.</p>
<p>策略是对两边做黎曼和,利用$\varphi $的单调性和一致连续性,可以取$S _{ \Delta  } = \sum f ( \eta _k ) \Delta x _k $,利用中值定理可以写作$S _{ \Delta  } = \sum f ( \varphi ( \xi _k ) ) \varphi ‘ ( \mu _k ) \Delta t _k $.</p>
<p>而另一边的黎曼和$\sigma _{ \Delta ‘  } = \sum f ( \varphi ( \xi _k ) ) \varphi ‘ ( \xi _k ) \Delta t _k $.</p>
<p>只需证明二者之差趋近于$0 $,令$M = \sup | f | , $做差得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum f ( \varphi ( \xi _k ) ) ( \varphi ' ( \xi _k ) - \varphi ' ( \mu _k ) ) \Delta t _k | \\
& \leq M | \sum ( \varphi ' ( \xi _k ) - \varphi ' ( \mu _k ) ) \Delta t _k | \\
& \leq M | \sum w _k \Delta t _k | 
\end{aligned}</script><p>而$\varphi $可积,上述趋近于$0 $.</p>
<p>这些定理都有点诡异,它们会在RS积分处再详细讨论.</p>
<h6><span id="example1">Example1</span></h6><p>求$\int _0 ^{ \frac { \pi  } { 2  }  } \frac { \sin x  } { \sin x + \cos x  } \text { d  } x $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \frac { \pi  } { 2  }  } \frac { \sin x  } { \sin x + \cos x  } \text { d  } x \\
& = \int _0 ^{ \frac { \pi  } { 4  }  } \left ( \frac { \sin x  } { \sin x + \cos x  } + \frac { \sin ( \frac { \pi  } { 2  } - x )  } { \sin ( \frac { \pi  } { 2  } - x ) + \cos ( \frac { \pi  } { 2  } - x )  } \right ) \text { d  } x \\
& = \int _0 ^{ \frac { \pi  } { 4  }  } \frac { \sin x + \cos x  } { \sin x + \cos x  } \text { d  } x \\
& = \frac { \pi  } { 4  } 
\end{aligned}</script><p>其实就是找个点对折.</p>
<h6><span id="example2">Example2</span></h6><p>求$I = \int _0 ^\pi \frac { \theta \sin \theta  } { a + b \cos ^2 \theta  } \text { d  } \theta $,其中$a , b &gt; 0 $.</p>
<p>令$\theta = \pi - \varphi $,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = - \int _\pi ^0 \frac { ( \pi - \varphi ) \sin \varphi  } { a + b \cos ^2 \varphi  } \text { d  } \varphi \\
& = \int _0 ^\pi \frac { ( \pi - \varphi ) \sin \varphi  } { a + b \cos ^2 \varphi  } \text { d  } \varphi \\
& = \pi \int _{ 0  } ^\pi \frac { \sin \varphi  } { a + b \cos ^2 \varphi  } \text { d  } \varphi - I 
\end{aligned}</script><p>移项得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = \frac { \pi  } { 2  } \int _0 ^\pi \frac { - \text { d  } \cos \theta  } { a + b \cos ^2 \theta  } \\
& = \frac { \pi  } { \sqrt { ab  }  } \arctan \sqrt { \frac { b  } { a  }  } 
\end{aligned}</script><h6><span id="example3">Example3</span></h6><p>如果$\forall a &lt; b , f \in R [ a , b ] $,并且$f ( x + y ) = f ( x ) + f ( y ) $恒成立,求证$f ( x ) \equiv f ( 1 ) x $.</p>
<p>固定$x $,对$y $从$[ 0 , 1 ] $积分,得到:</p>
<script type="math/tex; mode=display">
f ( x ) = \int _x ^{ x + 1  } f ( t ) \text { d  } t - \int _0 ^1 f ( y ) \text { d  } y</script><p>而变限积分是局部李氏连续的,所以$f ( x ) $局部连续,所以$f ( x ) $整体连续,立刻得到$f ( x ) $可导,立刻得到其是$C ^\infty $的.</p>
<p>那就可以两边对$x $求导,得到$\forall y , f ‘ ( x + y ) = f ‘ ( x ) $,因此$f ‘ \equiv C $.</p>
<h5><span id="分部积分">分部积分</span></h5><p>设$u , v \in R [ a , b ] $并且均可导,而且$u ‘ , v ‘ \in R [ a , b ] $,则:</p>
<script type="math/tex; mode=display">
( uv ) ' = u ' v + uv '</script><p>从这里能看出$( uv ) ‘ $也是黎曼可积的,那就可以用牛顿莱布尼茨公式两边积分得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b uv ' \text { d  } x & = uv \mid _a ^b - \int _a ^b u ' v \text { d  } x \\
& = \int _a ^b u \text { d  } v & = uv \mid _a ^b - \int _a ^b v \text { d  } u 
\end{aligned}</script><p>这个版本当然是简单的,那能不能上点难度呢?</p>
<p>不妨考虑$f , g \in R [ a , b ] $,那它们的广义原函数可以取为$F ( x ) = \int _a ^x f ( t ) \text { d  } t + A , G ( x ) = \int _a ^x g ( t ) \text { d  } t + B $.</p>
<p>则$\int _a ^b Fg \text { d  } x = FG \mid _a ^b - \int _a ^b Gf \text { d  } x $.</p>
<p>先证明一个引理:</p>
<script type="math/tex; mode=display">
\lim _{ \lambda ( \Delta ) \to 0  } \sum _k ^n f ( \xi _k ) \int _{ x _{ i - 1  }  } ^{ x _i  } g ( t ) \text { d  } t = \int _a ^b f ( x ) g ( x ) \text { d  } x</script><p>证明无非是用黎曼和,设$M = \sup | f | $,直接考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _k ^n f ( \xi ) \int _{ x _{ i - 1  }  } ^{ x _i  } g \mathrm { d  } t - \sum _k ^n \int _{ x _{ i - 1  }  } ^{ x _i  } fg \text { d  } t | \\
& \leq \sum | f ( \xi _k ) | \int _{ x _{ i - 1  }  } ^{ x _i  } | g ( t ) - g ( \xi _k ) | \text { d  } t + | \sum f ( \xi _k ) g ( \xi _k ) \Delta t _k - \int _a ^b f g \text { d  } t | \\
& \leq M \sum w _k ( g ) \text { d  } t + \sum w _k ( fg ) \Delta t _i 
\end{aligned}</script><p>这个当然趋向于$0 $.</p>
<p>使用abel求和法则,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( FG ) \mid _a ^b & = \sum _k ( F ( x _k ) G ( x _k ) - F ( x _{ k - 1  } ) G ( x _{ k - 1  } ) ) \\
& = \sum _k ( F ( x _k ) G ( x _k ) - F ( x _{ k - 1  } ) G ( x _k ) + F ( x _{ k - 1  } ) G ( x _k ) - F ( x _{ k - 1  } ) G ( x _{ k - 1  } ) ) \\
& = \sum _{ k  } ^n G ( x _k ) ( F ( x _k ) - F ( x _{ k - 1  } ) ) + \sum _{ k  } F ( x _{ k - 1  } ) ( G ( x _i ) - G ( x _{ i - 1  } ) ) \\
& = \sum _k G ( x _i ) \int _{ x _{ i - 1  }  } ^{ x _i  } f ( x ) \text { d  } x + \sum _{ k  } ^n F ( x _{ i - 1  } ) \int _{ x _{ i - 1  }  } ^{ x _i  } g ( x ) \text { d  } x 
\end{aligned}</script><p>使用引理就完事了.</p>
<h6><span id="example1">Example1</span></h6><p>求证:</p>
<script type="math/tex; mode=display">
\int _a ^x ( \int _a ^t f ( u ) \text { d  } u ) \text { d  } t = \int _a ^x ( x - t ) f ( t ) \text { d  } t</script><p>令$F ( x ) = \int _a ^t f ( t ) \text { d  } t $,$g ( x ) = 1 , G ( x ) = x - a $就可以直接套用分部积分公式得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
LHS & = \int _a ^x F ( t ) g ( t ) \text { d  } t \\
& = FG \mid _a ^x - \int _a ^x f ( t ) G ( t ) \text { d  } t \\
& = ( x - a ) \int _a ^x f ( t ) \text { d  } t - \int _a ^x f ( t ) ( t - a ) \text { d  } t \\

\end{aligned}</script><p>这样就做完了.</p>
<p>或者设$F ( a ) = 0 $,将上式记作:</p>
<script type="math/tex; mode=display">
\int _a ^x F ( t ) \mathrm { d  } t = \int _a ^x ( x - t ) F ' ( t ) \mathrm { d  } t</script><h6><span id="example2">Example2</span></h6><p>求$I = \int _0 ^{ \frac { \pi  } { 2  }  } \frac { x \sin x \cos x  } { ( a ^2 \cos ^2 x + b ^2 \sin ^2 x ) ^2  } \text { d  } x $,其中$a , b &gt; 0 $.</p>
<p>有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \frac { \pi  } { 2  }  } \frac { x \sin x \cos x  } { ( a ^2 \cos ^2 x + b ^2 \sin ^2 x ) ^2  } \text { d  } x \\
& = \frac { - 1  } { 2 ( b ^2 - a ^2 )  } \int _0 ^{ \frac { \pi  } { 2  }  } x \text { d  } ( \frac { 1  } { a ^2 + ( b ^2 - a ^2 ) \sin ^2 x  } ) \\
& = \frac { - 1  } { 2 ( b ^2 - a ^2 )  } ( \frac { \pi  } { 2 b ^2  } - \int _0 ^{ \frac { \pi  } { 2  }  } \frac { \text { d  } x  } { a ^2 \cos ^2 x + b ^2 \sin ^2 x  } ) \\
& = \frac { 1  } { 2 ( b ^2 - a ^2 )  } ( - \frac { \pi  } { 2 b ^2  } + \int _0 ^{ \frac { \pi  } { 2  }  } \frac { \text { d  } \tan x  } { a ^2 + b ^2 \tan ^2 x  } ) \\
& = \frac { 1  } { 2 ( b ^2 - a ^2 )  } ( - \frac { \pi  } { 2 b ^2  } + \frac { \pi  } { 2 ab  } ) \\
& = \frac { \pi  } { 4 ab ^2 ( a + b )  } 
\end{aligned}</script><h6><span id="example3wallis公式">Example3(Wallis公式)</span></h6><p>求$I _n = \int _0 ^{ \frac { \pi  } { 2  }  } \sin ^n x \text { d  } x $.</p>
<p>换元后直接分部积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = - \int _0 ^{ \frac { \pi  } { 2  }  } \sin ^{ n - 1  } x \text { d  } \cos x \\
& = \int _0 ^{ \frac { \pi  } { 2  }  } \cos x \text { d  } ( \sin ^{ n - 1  } x ) \\
& = ( n - 1 ) \int _0 ^{ \frac { \pi  } { 2  }  } \sin ^{ n - 2  } x ( 1 - \sin ^2 x ) \text { d  } x \\
& = ( n - 1 ) I _{ n - 2  } - ( n - 1 ) I _n \\

\end{aligned}</script><p>于是$I _n = \frac { n - 1  } { n  } I _{ n - 2  } $.</p>
<p>注意到$I _0 = \frac { \pi  } { 2  } , I _1 = 1 $,所以$I _{ 2 m  } = \frac { ( 2 m - 1 ) ! !  } { ( 2 m ) ! !  } \frac { \pi  } { 2  } , I _{ 2 m + 1  } = \frac { ( 2 m ) ! !  } { ( 2 m + 1 ) ! !  } $.</p>
<p>然而注意到$I _n $随着$n $增大而减小,于是应该有$I _{ 2 m + 1  } \leq I _{ 2 m  } \leq I _{ 2 m - 1  } $,展开得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \frac { 1  } { 2 n + 1  } ( \frac { ( 2 n ) ! !  } { ( 2 n - 1 ) ! !  } ) ^2 \\
& \leq \frac { \pi  } { 2  } & \leq \\
\frac { 1  } { 2 n  } ( \frac { ( 2 n ) ! !  } { ( 2 n - 1 ) ! !  } ) ^2 & = b _n 
\end{aligned}</script><p>而$\lim a _n = \lim b _n $,因此$\lim a _n = \lim b _n = \frac { \pi  } { 2  } $.</p>
<h5><span id="泰勒公式的积分余项">泰勒公式的积分余项</span></h5><p>回忆到泰勒公式的余项:</p>
<p>设$f ( x ) $在$a $处有$n $阶导数,则$f ( x ) = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( a )  } { k !  } ( x - a ) ^k + o ( ( x - a ) ^n ) $.</p>
<p>设$f ( x ) $在$( \alpha , \beta ) $上有$n + 1 $阶导数,则$f ( x ) = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( a )  } { k !  } ( x - a ) ^k + \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - a ) ^{ n + 1  } $.</p>
<p>事实上还可以写积分余项,若$f ^{ ( n + 1 )  } \in R [ \alpha , \beta ] $,则$f ( x ) = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( a )  } { k !  } ( x - a ) ^k + \frac { 1  } { n !  } \int _a ^x ( x - t ) ^n f ^{ ( n + 1 )  } ( t ) \text { d  } t $.</p>
<p>首先能写出$f ( x ) = f ( a ) + \int _a ^x f ‘ ( t ) \text { d  } t $,考虑不断展开后面那一项,用分部积分注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^x f ^{ ( m + 1 )  } ( t ) \frac { ( x - t ) ^m  } { m !  } \text { d  } t \\
& = \int _a ^x f ^{ ( m + 1 )  } ( t ) \text { d  } ( - \frac { ( x - t ) ^{ m + 1  }  } { ( m + 1 ) !  } ) \\
& = f ^{ ( m + 1 )  } ( a ) \frac { ( x - a ) ^{ m + 1  }  } { ( m + 1 ) !  } + \frac { 1  } { ( m + 1 ) !  } \int _a ^x ( x - t ) ^{ m + 1  } f ^{ ( m + 2 )  } ( t ) \text { d  } t 
\end{aligned}</script><h6><span id="example1">Example1</span></h6><p>函数$f ( x ) $在$[ a , b ] $上各阶导数存在且非负,求证:</p>
<script type="math/tex; mode=display">
f ( x ) = \sum _{ n = 0  } ^\infty \frac { f ^{ ( n )  } ( a )  } { n !  } ( x - a ) ^n</script><p>其实这个题应该放到幂级数那里,不过确实和积分余项关系更大.分析的话首先会发现要证两边相等一定要搞定余项对吧,但是拉格朗日余项要求对所有的点的任意阶导数都存在一个控制,但这是做不到的,原函数对导函数的控制只能是在一段连续区间上的控制(用NL公式),而做不到对所有单点的控制.因此使用积分余项,一个自然的想法是除了$b $端点以外的误差应该都比$b $处的误差要小,注意到:</p>
<script type="math/tex; mode=display">
\frac { x - t  } { x - a  } \leq \frac { b - t  } { b - a  }</script><p>所以:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R _n ( x ) & = \frac { 1  } { n !  } \int _a ^x f ^{ ( n + 1 )  } ( t ) ( x - t ) ^n \mathrm { d  } t \\
& \leq \frac { ( x - a ) ^n  } { ( b - a ) ^n  } \frac { 1  } { n !  } \int _a ^x f ^{ ( n + 1 )  } ( t ) ( b - t ) ^n \mathrm { d  } t \\
& \leq \frac { ( x - a ) ^n  } { ( b - a ) ^n  } R _n ( b ) 
\end{aligned}</script><p>接下来如果能控制$R _n ( b ) $就万事大吉,发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R _n ( b ) & = \frac { 1  } { n !  } \int _a ^b f ^{ ( n + 1 )  } ( t ) ( b - t ) ^n \mathrm { d  } t \\
& = \frac { 1  } { n !  } \int _a ^b ( b - t ) ^n \mathrm { d  } f ^{ ( n )  } ( t ) \\
& = - \frac { ( b - a ) ^n  } { n !  } f ^{ ( n )  } ( a ) + \frac { 1  } { ( n - 1 ) !  } \int _a ^b ( b - t ) ^{ n - 1  } f ^{ ( n )  } ( t ) \\
& \leq R _{ n - 1  } ( b ) \\
& \leq \cdots & \leq f ( b ) - f ( a ) 
\end{aligned}</script><p>这就搞定了,当$x \in [ a , b ) $的时候,由于$\frac { ( x - a ) ^n  } { ( b - a ) ^n  } \to 0 $而自然完事.而单调函数的端点是随便延拓的,写下来的话,如果端点处不满足则必然端点处不收敛,意味着:</p>
<script type="math/tex; mode=display">
\lim _{ x \to b - 0  } \sum _{ n = 0  } ^\infty \frac { f ^{ ( n )  } ( a )  } { n !  } ( x - a ) ^n = + \infty</script><p>但这不可能,因为左边的恰好是原本收敛的那个函数$x \to b - 0 $处的表现.</p>
<h5><span id="积分第一中值定理">积分第一中值定理</span></h5><p>设$f , g \in R [ a , b ] $并且$g $不变号.不妨设$f $的连续点集为$A $,称它的<strong>本性上界</strong>为$M = \inf _{ x \in A  } ( f ( x ) ) $,同理定义<strong>本性下界</strong>$m $.则$\exists \mu \in [ m , M ] $使得:</p>
<script type="math/tex; mode=display">
\int _a ^b fg ( x ) \text { d  } x = \mu \int _a ^b g ( x ) \text { d  } x</script><p>来证明这个事,不妨设$g ( x ) \geq 0 $.</p>
<p>当$\int _a ^b g ( x ) \text { d  } x = 0 $的时候,此时由于$g ( x ) \geq 0 $,因此$g ( x ) $一定几乎处处为零(否则,存在一个$g $的连续点处不为$0 $,在这个点邻域附近卡一下就能卡掉),那左右两边都等于$0 $.</p>
<p>当$\int _a ^b g ( x ) \text { d  } x &gt; 0 $的时候,由于$mg \leq gf \leq Mg $对于$f $的连续点集$A $成立,而这是个稠密集,立刻见到$\int _a ^b mg \text { d  } x \leq \int _a ^b gf \text { d  } x \leq \int _a ^b Mg \text { d  } x $.于是$\mu = \frac { \int _a ^b f g \text { d  } x  } { \int _a ^b g \text { d  } x  } \in [ m , M ] $.</p>
<p>作为更加常见的版本,当$f \in C [ a , b ] $的时候,$\exists \xi \in ( a , b ) $使得:</p>
<script type="math/tex; mode=display">
\int _a ^b fg ( x ) \text { d  } x = f ( \xi ) \int _a ^b g ( x ) \text { d  } x</script><p>该版本与之前的区别在于要断言$\xi \ne a , \xi \ne b $.使用反证法,在$\int _a ^b g ( x ) \text { d  } x &gt; 0 $的时候,不妨假设$\xi = b $,此时前面$( a , b ) $中不能有和$f ( b ) $相同的,又因为其是连续函数,因此不妨设$( a , b ) $中$f ( x ) $均比$f ( b ) $要小,用极限把端点用保号性卡出来就知道$[ a , b ] $中$f ( x ) \leq f ( b ) $.</p>
<p>由于此时$\int _a ^b g ( x ) \text { d  } x &gt; 0 $,于是一定存在一个$x _0 , g ( x _0 ) &gt; 0 $,并且$x _0 $是一个连续点.此时就存在其一个小邻域都$&gt; \frac { 1  } { 2  } g ( x _0 ) &gt; 0 $,并且这个邻域上的$f ( x ) &lt; f ( b ) $.在这个邻域上立刻可以发现:</p>
<script type="math/tex; mode=display">
\int _a ^b ( M - f ( x ) ) g ( x ) \text { d  } x > 0</script><p>这就有了矛盾.</p>
<h6><span id="example1">Example1</span></h6><p>$f \in R [ 0 , 1 ] $,$f ( + 0 ) $存在,则:</p>
<script type="math/tex; mode=display">
\lim _{ n \to + \infty  } \int _0 ^1 \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x = \frac { \pi  } { 2  } f ( + 0 )</script><p>不妨设$f ( 0 ) = f ( + 0 ) $,因为改变有限个点的取值是不会改变其积分的.</p>
<p>此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^1 \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x \\
& = \int _0 ^{ \frac { 1  } { \sqrt { n  }  }  } \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x + \int _{ \frac { 1  } { \sqrt { n  }  }  } ^{ 1  } \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x 
\end{aligned}</script><p>而考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \frac { 1  } { \sqrt { n  }  }  } \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x \\
& = \mu \int _0 ^{ \frac { 1  } { \sqrt { n  }  }  } \frac { n  } { 1 + n ^2 x ^2  } \text { d  } x \\
& = \mu \arctan \sqrt { n  } \to f ( 0 ) \frac { \pi  } { 2  } 
\end{aligned}</script><p>而后者:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _{ \frac { 1  } { \sqrt { n  }  }  } ^{ 1  } \frac { n f ( x )  } { 1 + n ^2 x ^2  } \text { d  } x | \\
& \leq \sup | f | ( \arctan ( nx ) \mid _{ \frac { 1  } { \sqrt { n  }  }  } ^1 ) \\
& = \sup | f | \arctan ( \frac { n - \sqrt { n  }  } { 1 + n \sqrt { n  }  } ) \to 0 
\end{aligned}</script><p>这样就做完了.这里拆成两部分可能是难以想到的,事实上这么做的意义是使得$\mu \to f ( 0 ) $而放缩,其中这个$nx $的变化量很大,因此可以稍微匀一下变化.</p>
<h6><span id="example2">Example2</span></h6><p>设$f $二阶可导,并且一,二阶导可积,则$\exists \xi \in ( a , b ) $,使得$\int _a ^b f ( x ) \text { d  } x = ( b - a ) f ( \frac { a + b  } { 2  } ) + \frac { ( b - a ) ^3  } { 24  } f ‘ ‘ ( \xi ) $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f ( x ) \text { d  } x \\
& = \int _{ a  } ^{ \frac { a + b  } { 2  }  } f ( x ) \text { d  } x + \int _{ \frac { a + b  } { 2  }  } ^{ b  } f ( x ) \text { d  } x \\
& = \int _0 ^{ \frac { b - a  } { 2  }  } f ( a + t ) \text { d  } t + \int _0 ^{ \frac { b - a  } { 2  }  } f ( b - t ) \text { d  } t \\
& = \int _0 ^{ \frac { b - a  } { 2  }  } f ( a + t ) + f ( b - t ) \text { d  } t \\
& = t ( f ( a + t ) + f ( b - t ) ) \mid _0 ^{ \frac { b - a  } { 2  }  } - \int _0 ^{ \frac { b - a  } { 2  }  } t ( f ' ( a + t ) - f ' ( b - t ) ) \text { d  } t \\
& = ( b - a ) f ( \frac { a + b  } { 2  } ) - \int _0 ^{ \frac { b - a  } { 2  }  } t ( f ' ( a + t ) - f ' ( b - t ) ) \text { d  } t 
\end{aligned}</script><p>前半部分已经完事了,接下来看后半部分,继续分部积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \frac { b - a  } { 2  }  } t ( f ' ( a + t ) - f ' ( b - t ) ) \text { d  } t \\
& = \frac { 1  } { 2  } \int _0 ^{ \frac { b - a  } { 2  }  } ( f ' ( a + t ) - f ' ( b - t ) ) \text { d  } ( t ^2 ) \\
& = \left ( \frac { t ^2  } { 2  } ( f ' ( a + t ) - f ' ( b - t ) ) \right ) \mid _{ 0  } ^{ \frac { b - a  } { 2  }  } - \int _0 ^{ \frac { b - a  } { 2  }  } \frac { t ^2  } { 2  } ( f ' ' ( a + t ) + f ' ' ( b - t ) ) \text { d  } t \\
& = - \int _0 ^{ \frac { b - a  } { 2  }  } \frac { t ^2  } { 2  } ( f ' ' ( a + t ) + f ' ' ( b - t ) ) \text { d  } t \\
& = \mu \int _0 ^{ \frac { b - a  } { 2  }  } \frac { t ^2  } { 2  } \text { d  } t \\
& = \mu \frac { ( b - a ) ^3  } { 48  } 
\end{aligned}</script><p>接下来看$\mu $,$\mu \in [ \inf ( f ‘ ‘ ( a + t ) + f ‘ ‘ ( b - t ) ) , \sup ( f ‘ ‘ ( a + t ) + f ‘ ‘ ( b - t ) ) ] $,由导函数介值性,意味着必然$\exists \xi _1 \in [ 0 , \frac { b - a  } { 2  } ] $使得$\mu = f ‘ ‘ ( a + \xi _1 ) + f ‘ ‘ ( b - \xi _1 ) $.再用一次$2 f ‘ ‘ $的介值性得到$\mu = 2 f ‘ ‘ ( \xi ) , \xi \in ( a + \xi _1 , b - \xi _1 ) \subseteq ( a , b ) $.</p>
<h5><span id="积分第二中值定理">积分第二中值定理</span></h5><p>设$g \in R [ a , b ] , f \geq 0 $,并且$f $单调,则:</p>
<ol>
<li><p>$f $单调递减时,$\exists \xi \in [ a , b ] $,$\int _a ^b f g \text { d  } x = f ( a + 0 ) \int _a ^\xi g ( x ) \text { d  } x $.</p>
</li>
<li><p>$f $单调递增时,$\exists \xi \in [ a , b ] $,$\int _a ^b f g \text { d  } x = f ( b - 0 ) \int _\xi ^b g ( x ) \text { d  } x $.</p>
</li>
<li><p>$\exists \xi \in [ a , b ] $,$\int _a ^b f g \text { d  } x = f ( a + 0 ) \int _a ^\xi g \text { d  } x + f ( b - 0 ) \int _\xi ^b g \text { d  } x $.</p>
</li>
<li><p>在上述基础上,如果$f $不是几乎常值函数,那么上述的$\xi \in ( a , b ) $.</p>
</li>
</ol>
<p>(1)(2)相似,下面只对(1)进行证明:</p>
<p>不妨设$f ( a ) = f ( a + 0 ) , G = \int _a ^x g ( x ) \text { d  } x $是$g $的广义原函数,其满足$G ( a ) = 0 $,不妨设$M = \sup G , m = \inf G $,回忆到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f g \text { d  } x & = \lim _{ \lambda ( \Delta ) \to 0  } \sum _{ i = 1  } ^n f ( x _{ i - 1  } ) \int _{ x _{ i - 1  }  } ^{ x _i  } g \text { d  } x \\
& = \sum _{ i = 1  } ^n f ( x _{ i - 1  } ) ( G ( x _i ) - G ( x _{ i - 1  } ) ) \\
& = f ( x _{ n - 1  } ) G ( x _n ) + \sum _{ i = 1  } ^{ n - 1  } ( f ( x _{ i - 1  } ) - f ( x _{ i  } ) ) G ( x _i ) \\
& \leq f ( a ) M 
\end{aligned}</script><p>在最后一步放缩进行修改就可以改为$\geq f ( a ) m $,而我们已经得知$G $的连续性,因此用介值性就可以解决上述问题.</p>
<p>难点在于(4)如何证明.</p>
<p>当其不是几乎常值函数的时候,应该满足$f ( a + 0 ) &gt; f ( b - 0 ) $.</p>
<p>当$\int _a ^b f g \text { d  } x = 0 $的时候,如果迫不得已必须取端点就应当有$\forall \xi \in ( a , b ) $,都有$\int _a ^\xi g \text { d  } x \ne 0 $,由于其连续导出的介值性那就当然拿到了$G $的保号性.我们上面已经用Abel变换得到了:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f g \text { d  } x & = \sum _{ i = 1  } ^n f ( x _{ i - 1  } ) ( G ( x _i ) - G ( x _{ i - 1  } ) ) \\
& = f ( x _{ n - 1  } ) G ( x _n ) + \sum _{ i = 1  } ^{ n - 1  } ( f ( x _{ i - 1  } ) - f ( x _{ i  } ) ) G ( x _i ) \\

\end{aligned}</script><p>此时考虑取$c , d $使得$a &lt; c &lt; d &lt; b $,并且满足$f ( c ) &gt; f ( d ) $,由于$f $并不是几乎常值函数,这当然可以做到,上式每一项都是$\geq 0 $的,那就可以把区间从$[ a , b ] $重新控制到$[ c , d ] $中.于是此时上式立刻:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f g \text { d  } x \\
& \geq ( f ( c ) - f ( d ) ) \min _{ [ c , d ]  } G ( x ) & > 0 
\end{aligned}</script><p>然而我们假设中$\int _a ^b f g \text { d  } x = 0 $,这样就导出了矛盾.</p>
<p>接下来考虑$\int _a ^b f g \text { d  } x \ne 0 $的情况,如果其迫不得已必须取在端点的话当然要取到右端点此时应该有$\int _a ^b f g \text { d  } x = f ( a ) \int _a ^b g \text { d  } x $.</p>
<p>仍然看上面的Abel变换后的结果,同时按照上面同样的办法取出一个子区间$[ c , d ] $.回忆到为了保证前面都没有能和$G ( b ) $相同的,因此$G ( b ) $必然是前面的最大值.再回忆到$G ( a ) = 0 $,立刻能得到$G ( b ) &gt; \sup _{ [ a , c ]  } G ( x ) $,设后者为$M $,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f g \text { d  } x \\
& = f ( x _{ n - 1  } ) G ( b ) + \sum _{ i = 1  } ^{ n - 1  } ( f ( x _{ i - 1  } ) - f ( x _{ i  } ) ) G ( x _i ) \\
& \leq f ( x _{ n - 1  } ) G ( b ) + M ( f ( a ) - f ( c ) ) + G ( b ) ( f ( c ) - f ( b ) ) \\

\end{aligned}</script><p>这里这个$f ( x _{ n - 1  } ) $很烦,但是当$\lambda ( \Delta ) \to 0 $的时候当然会使得$f ( x _{ n - 1  } ) \to f ( b - 0 ) $,上式变更为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f g \text { d  } x \\
& \leq f ( b ) G ( b ) + M ( f ( a ) - f ( c ) ) + G ( b ) ( f ( c ) - f ( b ) ) \\
& = M ( f ( a ) - f ( c ) ) + G ( b ) f ( c ) \\
& < f ( a ) G ( b ) 
\end{aligned}</script><p>这就导出了矛盾.</p>
<p>最后来看(3),不妨设$f $单减,设$\varphi ( x ) = f ( x ) - f ( b ) \geq 0 $且单减,用(1)的结论得到$\exists \xi \in [ a , b ] $使得$\int _a ^b \varphi g \text { d  } x = \varphi ( a ) \int _a ^\xi g \text { d  } x $.变形后就可以得到原本的式子.单增是同理的.总之,(3)是(1)(2)的一个更为优美的推论.</p>
<h6><span id="example1">Example1</span></h6><p>设$f \in C ^1 [ a , b ] $,并且满足$f ‘ $单调递减,且$f ‘ ( b ) \geq M &gt; 0 $.求证:$| \int _a ^b \cos f ( x ) \text { d  } x | \leq \frac { 2  } { M  } $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b \cos f ( x ) \text { d  } x \\
& = \int _a ^b \frac { f ' \cos f  } { f '  } \text { d  } x \\
& = \frac { 1  } { f ' ( b )  } \int _\xi ^b f ' \cos f \text { d  } x \\
& = \frac { 1  } { f ' ( b )  } ( \sin f ( b ) - \sin f ( \xi ) ) \\

\end{aligned}</script><p>这就完事了.</p>
<h5><span id="有界变差函数">有界变差函数</span></h5><p>对于一个$f : [ a , b ] \to R $的函数,做分划$\Delta : a = x _0 &lt; \cdots &lt; x _n = b $,定义其变差为$V _\Delta = \sum _k | f ( x _i ) - f ( x _{ i - 1  } ) | $,定义其全变差为$V _{ [ a , b ]  } ( f ) = \sup _\Delta V _\Delta $.当全变差为有限的时候,称$f $是有界变差函数.容易见到由介值定理,如果$f $可导而且$f ‘ $可积,则$V _{ [ a , b ]  } ( f ) = \int _a ^b | f ‘ | \mathrm { d  } x $.</p>
<p>应当容易见到,闭区间上的单调函数是有界变差的,且$V _{ | f |  } \leq V _f , V _{ f + g  } \leq V _f + V _g $.</p>
<p>接下来我们来证明:$f $是有界变差函数,当且仅当$f $是两个单调(不一定严格)函数的差.或者更严格一点,可以写成两个单调不减函数的差.另外,作为这个命题的平凡推论,我们知道有界变差函数几乎处处可导,并且有至多可数个间断点,且只有第一类间断点.</p>
<p>充分性显然,下面来看必要性.假设$f $是有界变差的,此时类似积分可以定义一个变上限函数$V _f ( x ) = V _f [ a , x ] $,其显然是单调不降的.</p>
<p>接下来定义$g = V _f ( x ) - f ( x ) $,我们来说明它一定也是单调不减的.</p>
<p>那考虑当$x _2 &gt; x _1 $时,观察$g ( x _2 ) - g ( x _1 ) = V _f ( x _2 ) - V _f ( x _1 ) - ( f ( x _2 ) - f ( x _1 ) ) $.</p>
<p>既然全变差的定义依赖于分划,我们当然可以加分点,自然有$V _f ( x _2 ) - V _f ( x _1 ) = V _{ f , [ x _1 , x _2 ]  } \geq | f ( x _2 ) - f ( x _1 ) | \geq f ( x _2 ) - f ( x _1 ) $.</p>
<p>自然得证.</p>
<p>可应当意识到连续函数不一定是有界变差函数,原因仍然考虑$f ( x ) = \begin{cases}0 &amp; x = 0 \ x \sin \frac { 1  } { x  } &amp; \text { otherwise  } \end{cases} $.在闭区间$[ 0 , 1 ] $上取$x _k = \frac { 1  } { ( k + \frac { 1  } { 2  } ) \pi  } $,这样$\sin \frac { 1  } { x _i  } $的取值正负交替,容易见到出现了调和级数.</p>
<p>然而,稍微加点条件,我们可以证明李氏连续是有界变差的.可以直接套用定义,也可以回忆到$f ( x ) = f ( x ) - Lx + Lx = Lx - ( Lx - f ( x ) ) $.因此导函数有界就一定有界变差.并且此时,可以让其拆出两个不降的可导函数.</p>
<h5><span id="定积分的应用">定积分的应用</span></h5><h6><span id="example1图形证明不等式">Example1(图形证明不等式)</span></h6><p>回忆到我们证明积分形式的柯西不等式的时候,证明了当$\frac { 1  } { p  } + \frac { 1  } { q  } = 1 $时,$a ^{ \frac { 1  } { p  }  } b ^{ \frac { 1  } { q  }  } = e ^{ \frac { \ln a  } { p  } + \frac { \ln b  } { q  }  } \leq \frac { a  } { p  } + \frac { b  } { q  } $.</p>
<p>下面可以用类似的策略理解这个式子,首先等价于证明$ab \leq \frac { a ^p  } { p  } + \frac { b ^q  } { q  } $.原因是考虑设$S _1 = \frac { a ^p  } { p  } , S _2 = \frac { b ^q  } { q  } $,设$f ( x ) = x ^{ p - 1  } $,留意到$f ( x ) $的积分表示出了$S _1 $,而$f ^{ - 1  } ( x ) $恰好表示出了$S _2 $.</p>
<h6><span id="example2参数方程曲线面积">Example2(参数方程曲线面积)</span></h6><p>回忆到换元法,取参数方程$\begin{cases}x = x ( t ) \ y = y ( t ) \end{cases} $,此时不妨假设$x ( \alpha ) = a , x ( \beta ) = b $,且$x ( t ) $单调递增且连续,$x ‘ ( t ) $除有限点外都存在且黎曼可积.那当然应当有:</p>
<script type="math/tex; mode=display">
\int _a ^b f ( x ) \text { d  } x = \int _\alpha ^\beta y ( t ) x ' ( t ) \text { d  } t</script><p>注意到如果反之条件使得$x ( \alpha ) = b , x ( \beta ) = a $,则需要补一个$- 1 $.</p>
<p>由此可见,对于不自交的任意参数方程表示的曲线,直接积分的正负号一抵消,仍然可以求出曲线下方的面积.如果自交,就是要把自交部分的面积减去.顺便而言,简单封闭曲线(例如圆或者椭圆)当然是上述我们所说的特殊情况.</p>
<p>不过对于封闭曲线,由于转一圈会回到同一个点处,使用分部积分得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _\alpha ^\beta y x ' \text { d  } t \\
& = \int _\alpha ^\beta y \text { d  } x \\
& = xy | _a ^b - \int _\alpha ^\beta xy ' \text { d  } t \\
& = - \int _\alpha ^\beta xy ' \text { d  } t 
\end{aligned}</script><p>兼顾一下对称性,可以写作$S = \frac { 1  } { 2  } | \int _\alpha ^\beta ( x ‘ y - y ‘ x ) \text { d  } t | $.由此立刻得到椭圆面积为$ab \pi $.</p>
<h6><span id="example3极坐标的面积">Example3(极坐标的面积)</span></h6><p>设$r = r ( \theta ) , \theta \in [ \alpha , \beta ] , r ( \theta ) \in C ( \alpha , \beta ) $.</p>
<p>此时考虑对$\theta $做划分,取$\Delta : \alpha = \theta _0 &lt; \cdots &lt; \theta _n = \beta $,并取$m _i = \inf _{ [ \theta _{ i - 1  } , \theta _i ]  } r , M _i = \sup _{ [ \theta _{ i - 1  } , \theta _i ]  } $,立刻得到$\frac { 1  } { 2  } m _i ^2 \Delta \theta _i \leq \Delta S _i \leq \frac { 1  } { 2  } \sum M _i ^2 \Delta \theta _i $,这样加密后得到$S = \frac { 1  } { 2  } \int _\alpha ^\beta r ^2 ( \theta ) \text { d  } \theta $.</p>
<h6><span id="example4参数方程曲线的弧长">Example4(参数方程曲线的弧长)</span></h6><p>取参数方程$\begin{cases}x = x ( t ) \ y = y ( t ) \end{cases} $,并且假设$x , y $均连续.首先我们应当定义其”弧长”的含义.</p>
<p>可以使用折线逼近的策略定义弧长.具体而言,直接取分划$\Delta : \alpha = t _0 &lt; \cdots &lt; t _n = \beta $.定义一个点$P _i = ( x ( t _i ) , y ( t _i ) ) $,这样我们当然就得到了若干个点,在这些点上就可以将相邻两个点求出折线,设折线长为$\overline { M _{ i - 1  } M _i  } $.</p>
<p>接下来,称曲线是可求长的,当且仅当取出的折线的上确界是有限的,并将此上确界定义为曲线长.</p>
<p>我们接下来证明,其可求长当且仅当$x ( t ) $和$y ( t ) $都是有界变差的.</p>
<p>先看必要性,任取分划$\Delta : \alpha = t _0 &lt; \cdots &lt; t _n = \beta $.立刻得到$V _\Delta ( x ) = \sum | x _i - x _{ i - 1  } | \leq \sum \overline { M _{ i - 1  } M _i  } $,当然是有界的,对于$y ( t ) $同理.</p>
<p>另外,斜边小于两条直角边的和(三角形不等式),于是充分性也显然.</p>
<p>然而真要实际应用需要稍加条件,即:$x ( t ) , y ( t ) $可导且导函数黎曼可积(说明其导函数有界,为李氏连续函数,那自然是有界变差函数).则弧长为$\int _\alpha ^\beta \sqrt { ( x ‘ ( t ) ) ^2 + ( y ‘ ( t ) ) ^2  } \text { d  } t $.</p>
<p>证明比较容易,考虑勾股定理,$\overline { M _{ i - 1  } M _i  } = \sqrt { ( x ( t _i ) - x ( t _{ i - 1  } ) ) ^2 + ( y ( t _i ) - y ( t _{ i - 1  } ) ) ^2  } $.使用微分中值定理,得到其等于$\Delta t _i \sqrt { ( x ‘ ( \xi _i ) ) ^2 + ( y ‘ ( \eta _i ) ) ^2  } $.这里强行换成一个东西,于是就会得到$\Delta t _i \sqrt { ( x ‘ ( \xi _i ) ) ^2 + ( y ‘ ( \xi _i ) ) ^2  } + w _i $的形式,其中$w _i $恰为两项之差.然后换黎曼和,只需证明后者$w _i $随着加密而趋向于$0 $.而这个根号差可以做分子有理化.具体而言:</p>
<script type="math/tex; mode=display">
\begin{aligned}
w _i & = \Delta t _i \left ( \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \eta _i ) ) ^2  } - \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \xi _i ) ) ^2  } \right ) \\
& = \Delta t _i \frac { y ' ( \eta _i ) ^2 - y ' ( \xi _i ) ^2  } { \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \eta _i ) ) ^2  } + \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \xi _i ) ) ^2  }  } \\
& = \Delta t _i \frac { ( y ' ( \eta _i ) + y ' ( \xi _i ) )  } { \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \eta _i ) ) ^2  } + \sqrt { ( x ' ( \xi _i ) ) ^2 + ( y ' ( \xi _i ) ) ^2  }  } ( y ' ( \eta _i ) - y ' ( \xi _i ) ) \\
& \leq \Delta t _i ( y ' ( \eta _i ) - y ' ( \xi _i ) ) 
\end{aligned}</script><p>最后会得到$\leq \sum \omega _{ y ‘  } \Delta t _i $,立刻得到其趋向于$0 $.顺便还要证明这个是上确界,只需要证明加点后答案增加即可,然后用黎曼积分那一部分的对划分取并的技巧即可.</p>
<p>由此应当能推出直角坐标系下弧长公式,即$l = \int _a ^b \sqrt { 1 + ( f ‘ ( x ) ) ^2  } \text { d  } x $.</p>
<h6><span id="example5极坐标下的弧长公式">Example5(极坐标下的弧长公式)</span></h6><p>此时应当有$x ‘ = r ‘ \cos \theta - r \sin \theta , y ‘ = r ‘ \sin \theta + r \cos \theta $,注意到$( x ‘ ) ^2 + ( y ‘ ) ^2 = r ^2 + ( r ‘ ) ^2 $,于是极坐标下的公式当然是$l = \int _\alpha ^\beta \sqrt { r ^2 + ( r ‘ ) ^2  } \text { d  } \theta $.</p>
<h6><span id="example6等周不等式">Example6(等周不等式)</span></h6><p>求给定长度的闭合曲线能围出的最大面积.</p>
<p>设$\Gamma $是一个周长为$l $的简单可求长闭曲线,其面积为$A $,我们下面证明$A \leq \frac { l ^2  } { 4 \pi  } $.</p>
<p>先考虑$\Gamma $比较光滑的情况,也就是其有导函数且导函数可积.参数方程给出$l = \int _\alpha ^\beta \sqrt { ( x ‘ ) ^2 + ( y ‘ ) ^2  } \text { d  } \theta $而$A = \int _\alpha ^\beta xy ‘ \text { d  } \theta $.注意这里假设曲线是逆时针方向旋转的.</p>
<p>接下来,考虑在原基础上画个圆,这个圆的参数方程横坐标继承自上述$x ( \theta ) $而纵坐标由圆定义为$\bar { y  } = \pm \sqrt { r ^2 - x ^2  } $,这里的$2 r = \sup x - \inf x $.也就是横着的最长距离.为了使得这个圆转起来是合理的,实际上应该找到上述曲线的左右端点然后分段函数定义,我们这里略去此细节.</p>
<p>然后呢,此时观察到应当有$\pi r ^2 = - \int _\alpha ^\beta \bar { y  } x ‘ \text { d  } \theta $,发挥注意力得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 \sqrt { A \pi r ^2  } & \leq A + \pi r ^2 \\
& = \int _\alpha ^\beta ( xy ' + \bar { y  } x ' ) \text { d  } \theta \\
& \leq \int _\alpha ^\beta \sqrt { x ^2 + ( \bar { y  } ) ^2  } \sqrt { y ' ^2 + x ' ^2  } \text { d  } t \\
& = rl 
\end{aligned}</script><p>于是证毕.</p>
<p>那么不光滑怎么办呢?可以用分段光滑函数(比如折线)逼近,这样就行了.</p>
<h6><span id="example7求多面体体积">Example7(求多面体体积)</span></h6><p>体积的定义无非类似面积,用夹逼定理定义任意形状的体积.</p>
<p>考虑对于每个$x $,在$x $那里做截面,设得到的截面面积是$S ( x ) $,那么体积感觉上应当是$V = \int _a ^b S ( x ) \text { d  } x $.</p>
<p>然而这个结论的准确证明可能需要一些重积分知识.我们尝试越级打怪,加一个很神秘的条件:就是两个截面之间一定存在包含关系以及$S ( x ) $是关于$x $连续变化的.然后看看能不能把这个结论证出来.</p>
<p>考虑$x $的范围是$[ a , b ] $,接下来对其作分划$\Delta : a = x _0 &lt; \cdots &lt; x _n = b $.接下来取$\eta _i , \xi _i $满足$S ( \xi _i ) = \max _{ [ x _{ i - 1  } , x _i ]  } S ( x ) , S ( \eta _i ) = \min _{ [ x _{ i - 1  } , x _i ]  } S ( x ) $.此时回忆到包含关系,那么我们拿出来的$\xi _i $和$\eta _i $当然就是包含别人以及被包含的两个截面,以它们为底面积做柱体,留意到此时当然有:</p>
<script type="math/tex; mode=display">
S ( \eta _i ) ( x _{ i  } - x _{ i - 1  } ) \leq V _{ [ x _{ i - 1  } , x _i ]  } \leq S ( \xi _i ) ( x _i - x _{ i - 1  } )</script><p>回忆到假设$S ( x ) $是连续变化的因此黎曼可积,于是这个东西两边其实就是达布上下和,立刻得到积分的结论.</p>
<p>旋转体当然满足以上条件,易见旋转体的体积为$\pi \int _a ^b f ^2 ( x ) \mathrm { d  } x $,参数方程同理.</p>
<h6><span id="example8旋转体的侧面积公式">Example8(旋转体的侧面积公式)</span></h6><p>曲面的面积难以定义,所以我们现在暂时成为物理系学生.下面只考虑旋转体.</p>
<p>对于旋转体来说,先用折线逼近原曲线,然后旋转后得到若干圆台,用圆台的侧面积之和去逼近旋转体的侧面积.</p>
<p>对于$[ a , b ] $,我们先做一个分划$\Delta : a = x _0 &lt; \cdots &lt; x _n = b $,$y _i = f ( x _i ) $.圆台侧面积给出$\Delta S _i = \pi ( y _{ i - 1  } + y _i ) | \overline { M _{ i - 1  } M _i  } | = \pi ( y _{ i - 1  } + y _i ) \sqrt { 1 + ( \cfrac { y _i - y _{ i - 1  }  } { x _i - x _{ i - 1  }  } ) ^2  } \Delta x _i $,利用微分中值定理,就有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _i & = \pi ( y _{ i - 1  } + y _i ) \sqrt { 1 + ( f ' ( \xi _i ) ) ^2  } \Delta x _i \\
& = 2 \pi f ( \xi _i ) \sqrt { 1 + ( f ' ( \xi _i ) ) ^2  } \Delta x _i + ( y _i + y _{ i - 1  } - 2 \pi f ( \xi _i ) ) \sqrt { 1 + ( f ' ( \xi _i ) ) ^2  } \Delta x _i 
\end{aligned}</script><p>加密后第二项可以用振幅控制住,所以答案就是$2 \pi \int _a ^b f ( x ) \sqrt { 1 + ( f ‘ ( x ) ) ^2  } \mathrm { d  } x $.</p>
<p>对于参数方程当然也是平凡的,答案应当是$2 \pi \int _a ^b y \sqrt { 1 + ( \frac { y ‘  } { x ‘  } ) ^2  } x ‘ \mathrm { d  } t = 2 \pi \int _a ^b y \sqrt { ( x ‘ ) ^2 + ( y ‘ ) ^2  } \mathrm { d  } t $,注意这里是按照$x $轴翻转.应当看到由此一段球面上的环的面积就是$2 \pi r \Delta x $.</p>
<h6><span id="example9pi的无理性证明">Example9($\pi$的无理性证明)</span></h6><p>假设$\pi = \frac { p  } { q  } \in \mathbb { Q  } $并且$p \bot q , p , q \in \mathbb { N _+  } $.</p>
<p>考虑设$f _n ( x ) = q ^n x ^n ( p - qx ) ^n $,留意到$\forall 0 \leq i \leq n - 1 $,有$f _n ^{ ( i )  } ( 0 ) = f _n ^{ ( i )  } ( \pi ) = 0 $.</p>
<p>接下来考察$\forall n \leq i \leq 2 n $,此时留意到$f _n ^{ ( i )  } ( 0 ) $和$f _n ^{ ( i )  } ( \pi ) $都应当是整数并且是$n ! $的倍数(是$0 $也是$n ! $的倍数).</p>
<p>考虑积分$I _n = \frac { 1  } { n !  } \int _0 ^\pi f _n ( x ) \sin x \mathrm { d  } x &gt; 0 $.对其狂暴使用分部积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I _n & = \frac { 1  } { n !  } \int _0 ^\pi f _n ( x ) \sin x \mathrm { d  } x \\
& = \frac { 1  } { n !  } \int _0 ^\pi f _n ( x ) \mathrm { d  } ( - \cos x ) \\

\end{aligned}</script><p>不断做分部积分,前面扔出来的项也就是$f _n ^{ ( i )  } ( 0 ) $或者$f _n ^{ ( i )  } ( \pi ) $然后再乘上$\sin , \cos $在$0 , \pi $之类取值的问题.总之,这个东西算出来一定是$n ! $的倍数,前面乘了个$\frac { 1  } { n !  } $,他就一定是整数.又因为其大于$0 $,他就一定$\geq 1 $.</p>
<p>那么矛盾在哪呢?留意到$f _n = ( qx ( p - qx ) ) ^n \leq ( \frac { p  } { 2  } ) ^{ 2 n  } , \sin x \leq 1 $,所以$I _n \leq \frac { 1  } { n !  } ( \frac { p  } { 2  } ) ^{ 2 n  } \pi \to 0 $.</p>
<h6><span id="example10古鲁金第一定理">Example10(古鲁金第一定理)</span></h6><p>躲开微元法,要证明一些东西可以扔进去的话(比如密度函数),应当可以通过”平均密度”的概念用之前那个引理(分部积分那里,步骤是先积分,乘系数,后求和),总之都是平凡的.</p>
<p>考虑一个旋转体,反正用上面那套东西,搞出来质心应当有$\bar { y  } = \frac { \int _\alpha ^\beta y \sqrt { x ‘ ^2 + y ‘ ^2  } \mathrm { d  } t  } { l  } $.移项得到$2 \pi \bar { y  } l = 2 \pi \int _\alpha ^\beta y \sqrt { x ‘ ^2 + y ‘ ^2  } \mathrm { d  } t $.也就是:旋转线转一圈,质心周长乘以曲线的弧长等于侧面积.</p>
<h6><span id="example11古鲁金第二定理">Example11(古鲁金第二定理)</span></h6><p>考虑两条曲线夹起来的部分,也就是设$[ a , b ] $上有$f ( x ) \geq g ( x ) \geq 0 $,那这两条线就会围出一块二维出来.这一块的质心能不能求呢?当然也可以,只不过略有区别,$\bar { x  } = \frac { \int _a ^b x ( f ( x ) - g ( x ) \mathrm { d  } x )  } { S  } $,而$\bar { y  } = \frac { 1  } { 2  } \frac { \int _a ^b ( f ^2 ( x ) - g ^2 ( x ) \mathrm { d  } x )  } { S  } $.移项得到$2 S \bar { y  } = \int _a ^b ( f ^2 ( x ) - g ^2 ( x ) \mathrm { d  } x ) $,也就是旋转面转一圈,质心周长乘以面积等于体积.</p>
<h6><span id="example12转动惯量">Example12(转动惯量)</span></h6><p>定义为$J = \int mr ^2 $.</p>
<p>考虑以$x $轴为旋转轴,先考虑线的情况,无非是分成小段每一段分别处理,对于每一段用长度和密度的乘积来逼质量,关于$x $轴的转动惯量$J = \int _\alpha ^\beta y ^2 ( t ) \rho ( t ) \sqrt { ( x ‘ ( t ) ) ^2 + ( y ‘ ( t ) ) ^2  } \text { d  } t $.</p>
<h6><span id="example13">Example13</span></h6><p>设$F $是所有满足$f \in C ^1 [ 0 , 1 ] \mid f ( 0 ) = 0 , f ( 1 ) = 1 , f ‘ \geq 0 $,$f ‘ $单调不降的函数$f $组成的集合,记$S _f $为$f ( x ) $绕$x $轴转一圈得到的侧面积,求$\sup _{ f \in F  } S _f $和$\inf _{ f \in F  } S _f $.</p>
<p>先猜下确界是$\pi $,上确界是$\sqrt { 2  } \pi $.</p>
<p>先证明下界是对的,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _f & = 2 \pi \int _0 ^1 f \sqrt { 1 + ( f ' ) ^2  } \mathrm { d  } x & \geq 2 \pi \int _0 ^1 f \cdot f ' \mathrm { d  } x \\
& = \pi 
\end{aligned}</script><p>怎么逼近呢?这个当然是直接平的是最优秀的对吧,考虑$f _n ( x ) = x ^n $,发现:</p>
<script type="math/tex; mode=display">
\pi \leq S _{ f _n  } \leq 2 \pi \int _0 ^1 f _n ( 1 + f _n ' ) \mathrm { d  } x = \pi + 2 \pi \int _0 ^1 f _n \mathrm { d  } x = \pi + \frac { 2 \pi  } { n + 1  } \to \pi</script><p>上界怎么搞定呢?考虑肯定是$f ( x ) = x $是最好的,我们下面证明任意一段曲线,如果把曲线拉直就更优秀.</p>
<p>也就是考虑$( 0 , 0 ) $和$( x _0 , f ( x _0 ) ) $的连线$y = \frac { f ( x _0 )  } { x _0  } x $,容易见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ x _0  } y \sqrt { 1 + ( y ' ) ^2  } \mathrm { d  } x \\
& = \int _0 ^{ x _0  } \frac { f ( x _0 )  } { x _0  } x \sqrt { 1 + ( \frac { f ( x _0 )  } { x _0  } ) ^2  } \mathrm { d  } x \\
& = \frac { 1  } { 2  } f ( x _0 ) \sqrt { x _0 ^2 + f ( x _0 ) ^2  } 
\end{aligned}</script><p>只要我们证明:</p>
<script type="math/tex; mode=display">
\int _0 ^x f ( t ) \sqrt { 1 + ( f ' ( t ) ) ^2  } \mathrm { d  } t \leq \frac { 1  } { 2  } f ( x ) \sqrt { x ^2 + f ^2 ( x )  }</script><p>即可.注意到它们在零点的取值相同,因此直接算导数之差,要证:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { 2  } f ' \sqrt { x ^2 + f ^2  } + \frac { x + f \cdot f '  } { 2 \sqrt { x ^2 + f ^2  }  } f - f \sqrt { 1 + ( f ' ) ^2  } & \geq 0 \\
2 f \sqrt { 1 + ( f ' ) ^2  } \sqrt { x ^2 + f ^2  } & \leq ( x ^2 + 2 f ^2 ) f ' + xf 
\end{aligned}</script><p>敢算就敢赢,两边平方得到:</p>
<script type="math/tex; mode=display">
3 f ^2 x ^2 + 4 f ^4 \leq x ^4 ( f ' ) ^2 + 2 x ^3 f \cdot f ' + 2 xf ^3 f '</script><p>注意到下凸函数满足$f ‘ \geq \frac { f  } { x  } $,上述结论刚刚好得证,出这个题的lwg老师真是高人了.</p>
<h5><span id="定积分近似计算">定积分近似计算</span></h5><p>考虑对$\int _a ^b f ( x ) \mathrm { d  } x $做数值近似,将$[ a , b ] $等分,取$x _k = a + \frac { k  } { n  } ( b - a ) $,其中$0 \leq k \leq n $,而$\Delta x = \frac { b - a  } { n  } $,$x _{ k - \frac { 1  } { 2  }  } = \frac { x _k + x _{ k - 1  }  } { 2  } $.</p>
<p>那么用黎曼和逼积分,那么无非三种方式:要么算左端点的函数值,要么算右端点的函数值,要么算中间点的函数值.</p>
<p>问题在于计算误差,我们下面证明,如果$f $一阶可导,则:</p>
<ol>
<li><p>$\int _a ^b f ( x ) \mathrm { d  } x = \frac { b - a  } { n  } \sum _{ k = 1  } ^n y _k - \frac { ( b - a ) ^2  } { 2 n  } f ‘ ( \xi ) $</p>
</li>
<li><p>$\int _a ^b f ( x ) \mathrm { d  } x = \frac { b - a  } { n  } \sum _{ k = 1  } ^n y _{ k - 1  } + \frac { ( b - a ) ^2  } { 2 n  } f ‘ ( \eta ) $</p>
</li>
</ol>
<p>两个是类似的,只证第一个,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f ( x ) \mathrm { d  } x - \frac { b - a  } { n  } \sum _{ k = 1  } ^n y _k \\
& = \sum _{ k = 1  } ^n \int _{ x _{ k - 1  }  } ^{ x _k  } ( f ( x ) - f ( x _k ) ) \mathrm { d  } x \\
& = \sum _{ k = 1  } ^n \int _{ x _{ k - 1  }  } ^{ x _k  } ( f ( x ) - f ( x _k ) ) \mathrm { d  } ( x - x _{ k - 1  } ) \\
& = - \sum _{ k = 1  } ^n \int _{ x _{ k - 1  }  } ^{ x _k  } ( x - x _{ k - 1  } ) f ' ( x ) \mathrm { d  } x \\
& = - \sum _{ k = 1  } ^n f ' ( \xi _k ) \int _{ x _{ k - 1  }  } ^{ x _k  } ( x - x _{ k - 1  } ) \mathrm { d  } x \\
& = - \sum _{ k = 1  } ^n f ' ( \xi _k ) \frac { ( b - a ) ^2  } { 2 n ^2  } \\
& = - \frac { ( b - a ) ^2  } { 2 n  } f ' ( \xi ) 
\end{aligned}</script><p>最后一步是因为求均值也可以用介值定理.</p>
<p>那么在中点估计会怎么样呢?考虑给$f $更好的条件,让$f $二阶可导,则:</p>
<script type="math/tex; mode=display">
\int _a ^b f ( x ) \mathrm { d  } x = \frac { b - a  } { n  } \sum _{ k = 1  } ^n y _{ k - \frac { 1  } { 2  }  } - \frac { ( b - a ) ^3  } { 24 n ^2  } f ' ' ( \xi )</script><p>在$x _{ k - \frac { 1  } { 2  }  } $处做泰勒展开,应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) - f ( x _{ k - \frac { 1  } { 2  }  } ) & = ( x - x _{ k - \frac { 1  } { 2  }  } ) f ' ( x _{ k - \frac { 1  } { 2  }  } ) + \frac { 1  } { 2  } ( x - x _{ k - \frac { 1  } { 2  }  } ) ^2 f ' ' ( \xi _k ) \\

\end{aligned}</script><p>不妨设$m _k \leq f ‘ ‘ ( \xi _k ) \leq M _k $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _{ k - 1  }  } ^{ x _k  } ( f ( x ) - f ( x _{ k - \frac { 1  } { 2  }  } ) ) \mathrm { d  } x & \leq \frac { M _k  } { 2  } \int _{ x _{ k - 1  }  } ^{ x _k  } ( x - x _{ k - \frac { 1  } { 2  }  } ) ^2 \mathrm { d  } x \\
& = M _k \frac { ( b - a ) ^3  } { 24 n ^3  } 
\end{aligned}</script><p>用介值定理就可以求和,原命题自然得证.</p>
<p>而上面的做法是矩形逼近,能不能用梯形逼近呢?用梯形逼近的话其实无非是$\frac { b - a  } { n  } ( \frac { y _0 + y _n  } { 2  } \sum _{ k = 1  } ^{ n - 1  } y _k ) $,然而,对于$f \in C ^2 [ a , b ] $,我们声明:</p>
<script type="math/tex; mode=display">
\int _a ^b f ( x ) \mathrm { d  } x = \frac { b - a  } { n  } ( \frac { y _0 + y _n  } { 2  } \sum _{ k = 1  } ^{ n - 1  } y _k ) - \frac { ( b - a ) ^3  } { 12 n ^2  } f ' ' ( \xi )</script><p>证明当然还是分部积分,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _{ k - 1  }  } ^{ x _k  } f ( x ) \mathrm { d  } x \\
& = \int _{ x _{ k - 1  }  } ^{ x _k  } f ( x ) \mathrm { d  } ( x - x _{ k - 1  } ) \\
& = f ( x _k ) \frac { b - a  } { n  } - \int _{ x _{ k - 1  }  } ^{ x _k  } ( x - x _{ k - 1  } ) f ' ( x ) \mathrm { d  } x \\
& = f ( x _k ) \frac { b - a  } { n  } - \frac { 1  } { 2  } \int _{ x _{ k - 1  }  } ^{ x _k  } f ' ( x ) \mathrm { d  } ( x - x _{ k - 1  } ) ^2 \\
& = f ( x _k ) \frac { b - a  } { n  } - \frac { 1  } { 2  } f ' ( x _k ) ( \frac { b - a  } { n  } ) ^2 + \frac { 1  } { 2  } \int _{ x _{ k - 1  }  } ^{ x _k  } f ' ' ( x ) ( x - x _{ k - 1  } ) ^2 \mathrm { d  } x \\

\end{aligned}</script><p>同理,在上面换$x - x _k $而非$x - x _{ k - 1  } $,就可以得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _{ k - 1  }  } ^{ x _k  } f ( x ) \mathrm { d  } x \\
& = f ( x _{ k - 1  } ) \frac { b - a  } { n  } + \frac { 1  } { 2  } f ' ( x _{ k - 1  } ) ( \frac { b - a  } { n  } ) ^2 + \frac { 1  } { 2  } \int _{ x _{ k - 1  }  } ^{ x _k  } f ' ' ( x ) ( x - x _{ k  } ) ^2 \mathrm { d  } x \\

\end{aligned}</script><p>此时用NL公式,应当能见到把上面两式子相加可以得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _{ k - 1  }  } ^{ x _k  } f ( x ) \mathrm { d  } x \\
& = \frac { f ( x _{ k - 1  } ) + f ( x _k )  } { 2  } \frac { b - a  } { n  } + \frac { 1  } { 4  } \int _{ x _{ k - 1  }  } ^{ x _k  } f ' ' ( x ) ( ( x - x _{ k  } ) ^2 + ( x - x _{ k - 1  } ) ^2 - ( \frac { b - a  } { n  } ) ^2 ) \mathrm { d  } x \\
& = \frac { f ( x _{ k - 1  } ) + f ( x _k )  } { 2  } \frac { b - a  } { n  } + \frac { 1  } { 2  } \int _{ x _{ k - 1  }  } ^{ x _k  } f ' ' ( x ) ( x - x _k ) ( x - x _{ k - 1  } ) \mathrm { d  } x \\
& = \frac { f ( x _{ k - 1  } ) + f ( x _k )  } { 2  } \frac { b - a  } { n  } + \frac { 1  } { 2  } f ' ' ( \xi _k ) \int _{ x _{ k - 1  }  } ^{ x _k  } ( x - x _k ) ( x - x _{ k - 1  } ) \mathrm { d  } x \\
& = \frac { y _{ k - 1  } + y _k  } { 2  } \Delta x - \frac { 1  } { 12  } f ' ' ( \xi _k ) \frac { ( b - a ) ^3  } { n ^3  } 
\end{aligned}</script><p>这样就完事了,接下来对$n $求个和就能得到之前的公式.</p>
<p>接下来是二次曲线逼近.考虑用$( x _{ k - 1  } , y _{ k - 1  } ) , ( x _{ k - \frac { 1  } { 2  }  } , y _{ k - \frac { 1  } { 2  }  } ) , ( x _k , y _k ) $三个点确定一条二次曲线.不妨设这条二次曲线为$Q _k ( x ) = px ^2 + qx + r $.然而,此时观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _{ k - 1  }  } ^{ x _k  } Q _k ( x ) \mathrm { d  } x \\
& = \frac { p  } { 3  } ( x _k ^3 - x _{ k - 1  } ^3 ) + \frac { q  } { 2  } ( x _k ^2 - x _{ k - 1  } ^2 ) + r ( x _k - x _{ k - 1  } ) \\
& = \frac { x _k - x _{ k - 1  }  } { 6  } ( Q _k ( x _k ) + Q _k ( x _{ k - 1  } ) + Q _k ( x _{ k - \frac { 1  } { 2  }  } ) ) \\
& = \frac { b - a  } { 6 n  } ( y _{ k - 1  } + y _k + 4 y _{ k - \frac { 1  } { 2  }  } ) 
\end{aligned}</script><p>这也很合理,观察一下就可以知道这个恰好是在尝试把梯形逼近和中点逼近两种方式尝试约掉后面的误差项系数.</p>
<p>定理是,如果$f \in C ^4 [ a , b ] $,误差项为$- \frac { ( b - a ) ^5  } { 2880 n ^4  } f ^{ ( 4 )  } ( \xi ) $.这就是所谓辛普森积分法.</p>
<h5><span id="广义积分">广义积分</span></h5><p>考虑函数$f : [ a , + \infty ) \to \mathbb { R  } $,如果其$\forall b &gt; a $,$f \in R [ a , b ] $,我们称其<strong>内闭可积</strong>.那我们就定义其广义积分为$\int _a ^{ + \infty  } f \mathrm { d  } x = \lim _{ b \to + \infty  } \int _a ^b f \mathrm { d  } x $,当后者极限存在时.同理当然可以定义区间$( - \infty , b ] $上的广义积分.而如果$\int _0 ^{ + \infty  } f \mathrm { d  } x $和$\int _{ - \infty  } ^0 f \mathrm { d  } x $都收敛,则定义它们的和为$\int _{ - \infty  } ^{ + \infty  } f \mathrm { d  } x $.</p>
<p>称一个函数的<strong>瑕点</strong>为其局部无界的点,则考虑$f : [ a , b ) \to \mathbb { R  } $,其中$b $是$f $的瑕点,且$f $内闭可积,则$\int _a ^b f ( x ) \mathrm { d  } x = \lim _{ A \to b - 0  } \int _a ^A f ( x ) \mathrm { d  } x $,若后者极限存在.瑕积分和上述广义积分并无明显区别,下述也不再区分.</p>
<p>在进一步讨论前,我们应当再仔细研究一下广义积分的收敛性,也就是当什么时候其极限存在呢?我们有以下命题:</p>
<ol>
<li><p>$f ( x ) \geq 0 , x \in [ a , + \infty ) $时,$F ( A ) = \int _a ^A f ( x ) \mathrm { d  } x $单增.那么此时$F ( + \infty ) $存在当且仅当$F ( A ) $有界.</p>
</li>
<li><p>比较原理:$0 \leq f \leq cg , c &gt; 0 $,若$\int _a ^{ + \infty  } g \mathrm { d  } x $收敛,则$\int _a ^{ + \infty  } f \mathrm { d  } x $收敛.该结论可以移植到瑕积分上.</p>
</li>
<li><p>比较原理的推论:$f , g \geq 0 , 0 &lt; c _1 \leq \frac { f  } { g  } \leq c _2 $,则$\int f \mathrm { d  } x , \int g \mathrm { d  } x $收敛性相同.进一步地,如果$f , g \geq 0 $,在趋近于某个瑕点的时候,$\frac { f  } { g  } $趋近于某个非零常数,那它们在这一点的收敛性相同.</p>
</li>
</ol>
<p>(1)是根据单调收敛准则,而(2)则是(1)的推论,只是给出了一个界.</p>
<p>定义函数$f $是<strong>绝对收敛</strong>,当$\int _a ^{ + \infty  } | f | \mathrm { d  } x &lt; \infty $时.而考虑$f = | f | - ( | f | - f ) $,而$0 \leq | f | - f \leq 2 | f | $,所以绝对收敛可以推出收敛,但反之不可.因此,我们将收敛但不绝对收敛的函数称为<strong>条件收敛</strong>.该结论也可以移植到瑕积分上.</p>
<p>接下来,我们有<strong>柯西收敛原理</strong>:$\int _a ^{ + \infty  } f \mathrm { d  } x $收敛的充要条件是对于$\forall \epsilon &gt; 0 , \exists M &gt; a $使得$\forall A &gt; B \geq M $,都有$| \int _{ B  } ^A f \mathrm { d  } x | &lt; \epsilon $.</p>
<p>证明当然无非是函数部分柯西收敛准则的重复应用.</p>
<p>柯西收敛原理推到瑕积分上的话,考虑$F ( x ) = \int _a ^x f ( t ) \mathrm { d  } t $,则瑕积分$\lim _{ t \to b - 0  } F ( t ) $存在当且仅当$\forall \epsilon &gt; 0 $,$\exists \delta &gt; 0 $,当$x _1 , x _2 \in ( b - \delta , b ) $的时候,有$| F ( x _1 ) - F ( x _2 ) | &lt; \epsilon $.</p>
<p>接下来还有<strong>Dirichlet-Abel判别法</strong>,设$f , g : [ a , + \infty ) \to \mathbb { R  } $内闭可积,$f $单调,那有:</p>
<ol>
<li><p>Dirichlet判别法:如果$f ( + \infty ) = 0 $,$G ( A ) = \int _a ^A g \mathrm { d  } x $有界,则$\int _a ^{ + \infty  } fg \mathrm { d  } x $收敛.</p>
</li>
<li><p>Abel判别法:如果$f $有界,$\int _a ^{ \infty  } g \mathrm { d  } x $收敛,则$\int _a ^{ + \infty  } fg \mathrm { d  } x $收敛.</p>
</li>
</ol>
<p>用第二积分中值定理,就有$\int _A ^B f g \mathrm { d  } x = f ( A ) \int _A ^\xi g \mathrm { d  } x + f ( B ) \int _{ \xi  } ^B g \mathrm { d  } x $.用柯西收敛原理则上述两条均为显然.结论当然可以推广到瑕积分上.</p>
<h6><span id="example1">Example1</span></h6><p>设$f $在$( - \infty , + \infty ) $上内闭可积,且$f ( + \infty ) = A , f ( - \infty ) = B $,对于$a &gt; 0 $,求证$\int _{ - \infty  } ^{ + \infty  } \left ( f ( x + a ) - f ( x ) \right ) \mathrm { d  } x $收敛并求其值.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ C  } \left ( f ( x + a ) - f ( x ) \right ) \mathrm { d  } x & = \int _{ a  } ^{ C + a  } f ( x ) \mathrm { d  } x - \int _0 ^C f ( x ) \mathrm { d  } x \\
& = \int _{ C  } ^{ C + a  } f ( x ) \mathrm { d  } x - \int _0 ^a f ( x ) \mathrm { d  } x \\
\to aA - \int _0 ^a f ( x ) \mathrm { d  } x 
\end{aligned}</script><p>另一侧同理为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ - C  } ^{ 0  } \left ( f ( x + a ) - f ( x ) \right ) \mathrm { d  } x & = \int _{ - C + a  } ^{ a  } f ( x ) \mathrm { d  } x - \int _{ - C  } ^0 f ( x ) \mathrm { d  } x \\
& = - \int _{ - C  } ^{ - C + a  } f ( x ) \mathrm { d  } x + \int _0 ^a f ( x ) \mathrm { d  } x \\
\to - aB + \int _0 ^a f ( x ) \mathrm { d  } x 
\end{aligned}</script><p>于是答案是$a ( A - B ) $.</p>
<h6><span id="example2">Example2</span></h6><p>求证:</p>
<script type="math/tex; mode=display">
\int _{ 1  } ^{ + \infty  } \frac { \mathrm { d  } x  } { x ^p  } = \begin{cases}
\lt \infty & p \gt 1 \\
\infty & p \leq 1 
\end{cases}</script><p>显然.</p>
<h6><span id="example3">Example3</span></h6><p>求证:$\int _a ^{ + \infty  } \frac { \sin ^2 x  } { x ^2  } \mathrm { d  } x $收敛.</p>
<p>原因是由比较原理,所以$0 \leq \frac { \sin ^2 x  } { x ^2  } \leq \frac { 1  } { x ^2  } $,立刻知其收敛性.</p>
<h6><span id="example4">Example4</span></h6><p>判断$\int _0 ^{ + \infty  } \frac { x \mathrm { d  } x  } { 1 + x ^4 \sin ^2 x  } $的收敛性.</p>
<p>考虑取$F ( A ) = \int _0 ^A \frac { x \mathrm { d  } x  } { 1 + x ^4 \sin ^2 x  } $,接下来考虑$F ( n \pi ) = \sum _{ k = 1  } ^n U _k $,其中$U _k = \int _{ ( k - 1 ) \pi  } ^{ k \pi  } \frac { x \mathrm { d  } x  } { 1 + x ^4 \sin ^2 x  } $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
U _k & = \int _{ ( k - 1 ) \pi  } ^{ k \pi  } \frac { x \mathrm { d  } x  } { 1 + x ^4 \sin ^2 x  } \\
& \geq \int _{ ( k - 1 ) \pi  } ^{ k \pi  } \frac { x \mathrm { d  } x  } { 1 + ( k \pi ) ^4 \sin ^2 x  } \\
& \geq 2 ( k - 1 ) \pi \int _{ 0  } ^{ \frac { \pi  } { 2  }  } \frac { x \mathrm { d  } x  } { 1 + ( k \pi ) ^4 ( \sin x ) ^2  } \\
& \geq 2 ( k - 1 ) \pi \int _{ 0  } ^{ \frac { \pi  } { 2  }  } \frac { x \mathrm { d  } x  } { 1 + ( k \pi ) ^4 x ^2  } \\
& = \frac { 2 ( k - 1 ) \pi  } { k ^2 \pi ^2  } \arctan ( k ^2 \pi ^2 x ) | _0 ^{ \frac { \pi  } { 2  }  } \\
& \geq \frac { 2 ( k - 1 ) \pi  } { k ^2 \pi ^2  } \arctan ( \frac { \pi ^3  } { 2  } ) \\
& = O ( \frac { 1  } { k  } ) 
\end{aligned}</script><p>这就证完了,必然发散.</p>
<h6><span id="example5">Example5</span></h6><p>$f : ( - \infty , + \infty ) \to \mathbb { R  } $且内闭可积,$p &gt; 0 $,并且$\int _{ - \infty  } ^{ + \infty  } | f | ^p \mathrm { d  } x &lt; \infty $,求证$\lim _{ h \to 0  } \int _{ - \infty  } ^{ + \infty  } \left | f ( x + h ) - f ( x ) \right | ^p \mathrm { d  } x $收敛.</p>
<p>既然$\int _{ - \infty  } ^{ + \infty  } | f | ^p \mathrm { d  } x &lt; \infty $,那么一定存在一个足够大的$A $,使得$\int _{ A  } ^{ + \infty  } | f | ^p \mathrm { d  } x $足够小,不妨取足够大的$A &gt; 0 $使得$\int _{ A - 1  } ^{ + \infty  } | f | ^p \mathrm { d  } x &lt; \epsilon _1 $.</p>
<p>事实上考虑$| u + v | \leq | u | + | v | \leq 2 \max ( | u | , | v | ) $,那么$| u + v | ^p \leq 2 ^p ( | u | ^p + | v | ^p ) $,取$| h | &lt; 1 $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ A  } ^{ + \infty  } \left | f ( x + h ) - f ( x ) \right | ^p \mathrm { d  } x \\
& \leq 2 ^p \int _{ A  } ^{ + \infty  } | f ( x + h ) | ^p \mathrm { d  } x + 2 ^p \int _{ A  } ^{ + \infty  } | f ( x ) | ^p \mathrm { d  } x \\
& = 2 ^p \int _{ A + h  } ^{ + \infty  } | f ( x ) | ^p \mathrm { d  } x + 2 ^p \int _{ A  } ^{ + \infty  } | f ( x ) | ^p \mathrm { d  } x \\
& \leq 2 ^{ p + 1  } \int _{ A - 1  } ^{ + \infty  } | f | ^p \mathrm { d  } x \\
& \leq 2 ^{ p + 1  } \epsilon _1 
\end{aligned}</script><p>同理,另一侧也可以放掉.现在的问题在于$( - A + 1 , A - 1 ) $中间这一段.</p>
<p>考虑用一个线性函数逼近,做分划$\Delta : - A + 1 = x _0 &lt; \cdots &lt; x _n = A - 1 $,取线性函数逼近,策略为$x \in [ x _{ k - 1  } , x _k ] $的时候$g ( x ) = \frac { f ( x _k ) - f ( x _{ k - 1  } )  } { x _k - x _{ k - 1  }  } ( x - x _{ k - 1  } ) + f ( x _{ k - 1  } ) $.接下来考虑对于每一段,设$M _k = \sup _{ [ x _{ k - 1  } , x _k ]  } f , m _k = \inf _{ [ x _{ k - 1  } , x _k ]  } f $,则每一段可以被控制为$M _k - m _k $.我们早在之前就提过黎曼可积的函数可被线性函数逼近,然而疑问是这种逼近能否在$p $次方意义下满足,于是取足够小的划分使得$\sum _{ k = 1  } ^n ( M _k - m _k ) \Delta x _k &lt; \epsilon _2 ^2 $.</p>
<p>接下来常规分治,取$C = \{ 1 \leq k \leq n | M _k - m _k \geq \epsilon _2 \} $而$B = \{ 1 \leq k \leq n | M _k - m _k &lt; \epsilon _2 \} $.见到$\sum _{ k \in C  } \Delta x _k &lt; \epsilon _2 $.不妨设$M = \sup _{ [ - A + 1 , A - 1 ]  } f , m = \inf _{ [ - A + 1 , A - 1 ]  } f $立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ - A + 1  } ^{ A - 1  } \left | f - g \right | ^p \mathrm { d  } x \\
& \leq \sum _{ k  } | M _k - m _k | ^p \Delta x _k \\
& = \sum _{ k \in C  } | M _k - m _k | ^p \Delta x _k + \sum _{ k \in B  } | M _k - m _k | ^p \Delta x _k \\
& \leq | M - m | ^p \epsilon _2 + \epsilon _2 ^p ( 2 A - 2 ) 
\end{aligned}</script><p>这样这里就被限制住了,而考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ - \infty  } ^{ + \infty  } \left | f ( x + h ) - f ( x ) \right | ^p \mathrm { d  } x \\
& \leq \int _{ - \infty  } ^{ + \infty  } 3 ^p \left ( \left | f ( x + h ) - g ( x + h ) \right | ^p + \left | g ( x + h ) - g ( x ) \right | ^p + \left | f ( x ) - g ( x ) \right | ^p \right ) \mathrm { d  } x \\

\end{aligned}</script><p>前后两项都能被上述控制住,只剩中间的$| g ( x + h ) - g ( x ) | ^p $是$O ( h ^p ) $的,只需调整$h $就能控制住.</p>
<h6><span id="example6">Example6</span></h6><p>求证:$\int _1 ^{ + \infty  } \frac { \sin x  } { x  } \mathrm { d  } x $是条件收敛的.</p>
<p>用DA判别法,取$f = \frac { 1  } { x  } $当然趋近于$0 $,而$| \int _1 ^A \sin x \mathrm { d  } x | \leq 2 $,于是收敛.</p>
<p>那接下来就要证明它并非绝对收敛.只需考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _1 ^{ + \infty  } \frac { | \sin x |  } { x  } \mathrm { d  } x \\
& \geq \int _1 ^{ + \infty  } \frac { \sin ^2 x  } { x  } \mathrm { d  } x \\
& = \int _1 ^{ + \infty  } \frac { 1 - \cos ^2 x  } { x  } \mathrm { d  } x 
\end{aligned}</script><p>当然并不绝对收敛.</p>
<p>事实上还可以直接求出来这个积分的值.</p>
<p>接下来考虑$f ( x ) = \begin{cases}0 &amp; x = 0 \ \frac { 1  } { x  } - \frac { 1  } { 2 \sin \frac { x  } { 2  }  } &amp; x \in [ - \pi , \pi ] \setminus \{ 0 \} \end{cases} $.只需泰勒展开就知道它是解析的.回忆到黎曼引理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ \infty  } \frac { \sin x  } { x  } \mathrm { d  } x \\
& = \lim _{ n \to + \infty  } \int _{ 0  } ^{ ( n + \frac { 1  } { 2  } ) \pi  } \frac { \sin x  } { x  } \mathrm { d  } x \\
& = \lim _{ n \to + \infty  } \int _{ 0  } ^{ \pi  } \frac { \sin ( ( n + \frac { 1  } { 2  } ) t )  } { t  } \mathrm { d  } t \\
& = \lim _{ n \to + \infty  } \int _{ 0  } ^{ \pi  } \left ( f ( t ) + \frac { 1  } { 2 \sin \frac { t  } { 2  }  } \right ) \sin ( ( n + \frac { 1  } { 2  } ) t ) \mathrm { d  } t \\
& = \lim _{ n \to + \infty  } \int _{ 0  } ^{ \pi  } \frac { 1  } { 2 \sin \frac { t  } { 2  }  } \sin ( ( n + \frac { 1  } { 2  } ) t ) \mathrm { d  } t \\
& = \lim _{ n \to + \infty  } \int _{ 0  } ^{ \pi  } \left ( \frac { 1  } { 2  } + \sum _{ k = 1  } ^n \cos ( kt ) \right ) \mathrm { d  } t \\
& = \frac { \pi  } { 2  } 
\end{aligned}</script><h6><span id="example7">Example7</span></h6><p>给定$f \in C [ 0 , + \infty ] $,$\int _0 ^{ + \infty  } f ^2 \mathrm { d  } x &lt; + \infty , f ( 0 ) = 0 $,取$g ( x ) = \int _0 ^x f ( t ) \mathrm { d  } t $,求证:$\int _0 ^{ + \infty  } \frac { g ^2 ( x )  } { x ^2  } \mathrm { d  } x \leq 4 \int _0 ^{ + \infty  } f ^2 \mathrm { d  } x $以证明前者存在.</p>
<p>当然是分部积分,用洛必达法则知道$\lim _{ x \to 0  } \frac { g  } { x  } \to 0 $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^A \frac { g ^2  } { x ^2  } \mathrm { d  } x & = \int _0 ^A g ^2 \mathrm { d  } ( - \frac { 1  } { x  } ) \\
& = - \frac { g ^2 ( x )  } { x  } | _0 ^A + \int _0 ^A \frac { 2 gf  } { x  } \mathrm { d  } x \\
& = - \frac { g ^2 ( A )  } { A  } + 2 \int _0 ^A \frac { g  } { x  } f \mathrm { d  } x \\
& \leq 2 ( \int _0 ^A \frac { g ^2  } { x ^2  } \mathrm { d  } x ) ^{ \frac { 1  } { 2  }  } ( \int _0 ^A f ^2 \mathrm { d  } x ) ^{ \frac { 1  } { 2  }  } 
\end{aligned}</script><p>整理一下就做完了.</p>
<h6><span id="example8欧拉积分">Example8(欧拉积分)</span></h6><p>求$\int _0 ^{ + \infty  } \frac { x ^{ p - 1  }  } { 1 + x  } \mathrm { d  } x , 0 &lt; p &lt; 1 $的收敛性和值.</p>
<p>考虑$\frac { x ^{ p - 1  }  } { 1 + x  } $在$x \to 0 $的时候趋近于$x ^{ p - 1  } $,而在$x \to \infty $的时候趋近于$x ^{ p - 2  } $,因此绝对收敛.</p>
<p>难点在于把这个东西求出来.接下来将采取一些不严谨的说法.</p>
<p>考虑$0 \leq x &lt; 1 $的时候,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { x ^{ p - 1  }  } { 1 + x  } & = x ^{ p - 1  } \sum _{ j = 0  } ^\infty ( - x ) ^j \\
& = \sum _{ j = 0  } ( - 1 ) ^j x ^{ p + j - 1  } \\

\end{aligned}</script><p>暂时抛开多余的思量,两边做积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^1 \frac { x ^{ p - 1  }  } { 1 + x  } \mathrm { d  } x & = \sum _{ j = 0  } ( - 1 ) ^j \int _0 ^1 x ^{ p + j - 1  } \mathrm { d  } x \\
& = \sum _{ j = 0  } ( - 1 ) ^j \frac { 1  } { p + j  } 
\end{aligned}</script><p>另一边,其实只需换元,可以发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _1 ^{ + \infty  } \frac { x ^{ p - 1  }  } { 1 + x  } \mathrm { d  } x \\
& = \int _0 ^1 \frac { t ^{ 1 - p  }  } { 1 + t ^{ - 1  }  } \frac { \mathrm { d  } t  } { t ^2  } \\
& = \int _0 ^1 \frac { t ^{ - p  }  } { 1 + t  } \mathrm { d  } t \\
& = \int _0 ^1 \frac { t ^{ 1 - p - 1  }  } { 1 + t  } \mathrm { d  } t \\
& = \sum _{ j = 0  } ^{ \infty  } ( - 1 ) ^j \frac { 1  } { 1 - p + j  } \\
& = \sum _{ j = 0  } ^{ \infty  } ( - 1 ) ^{ j + 1  } \frac { 1  } { p - ( j + 1 )  } \\
& = \sum _{ j = 1  } ^{ \infty  } ( - 1 ) ^{ j  } \frac { 1  } { p - j  } \\

\end{aligned}</script><p>结合起来,答案当然就是$\sum _{ j = - \infty  } ^{ + \infty  } \frac { ( - 1 ) ^j  } { p + j  } $.</p>
<p>我们暂且断言上面那个无穷级数等于$\frac { \pi  } { \sin ( p \pi )  } $,原因是我们权且承认下述级数是正确的:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \sin t  } = \sum _{ j = - \infty  } ^{ + \infty  } \frac { ( - 1 ) ^j  } { p + j \pi  }</script><h6><span id="example9frullani积分">Example9(Frullani积分)</span></h6><p>当$f \in C [ 0 , + \infty ) $,且$\int _0 ^{ + \infty  } \frac { f ( x )  } { x  } \mathrm { d  } x $收敛,求证$\int _0 ^{ + \infty  } \frac { f ( ax ) - f ( bx )  } { x  } \mathrm { d  } x = f ( 0 ) \ln \frac { b  } { a  } $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _A ^{ B  } \frac { f ( ax ) - f ( bx )  } { x  } \mathrm { d  } x \\
& = \int _{ aA  } ^{ aB  } \frac { f ( x )  } { x  } \mathrm { d  } x - \int _{ bA  } ^{ bB  } \frac { f ( x )  } { x  } \mathrm { d  } x \\
& = \int _{ aA  } ^{ bA  } \frac { f ( x )  } { x  } \mathrm { d  } x - \int _{ aB  } ^{ bB  } \frac { f ( x )  } { x  } \mathrm { d  } x \\
& = \int _{ a  } ^{ b  } \frac { f ( Ax )  } { x  } \mathrm { d  } x - \int _{ aB  } ^{ bB  } \frac { f ( x )  } { x  } \mathrm { d  } x \\

\end{aligned}</script><p>前者当$A \to 0 $的时候当然转化为$\int _{ a  } ^{ b  } \frac { f ( 0 )  } { x  } \mathrm { d  } x $,而后者用柯西判准知道趋近于$0 $,立刻完事.</p>
<h6><span id="example10">Example10</span></h6><p>求$I = \int _0 ^{ \frac { \pi  } { 2  }  } \ln ( \sin x ) \mathrm { d  } x $.</p>
<p>考虑$x \to 0 $的时候,$\ln ( \sin x ) \sim \ln x $,而$\int \ln x = x \ln x - x $,因此是绝对收敛的.</p>
<p>那怎么求这个积分呢?考虑一些对称技巧,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = \int _0 ^{ \frac { \pi  } { 2  }  } \ln ( \sin x ) \mathrm { d  } x \\
& = \int _{ \frac { \pi  } { 2  }  } ^{ \pi  } \ln ( \sin x ) \mathrm { d  } x \\
& = \int _{ 0  } ^{ \frac { \pi  } { 2  }  } \ln ( \cos x ) \mathrm { d  } x \\

\end{aligned}</script><p>那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
I & = \frac { 1  } { 2  } \int _0 ^\pi \ln ( \sin x ) \mathrm { d  } x \\
& = \int _0 ^{ \frac { \pi  } { 2  }  } \ln ( \sin 2 t ) \mathrm { d  } t \\
& = \int _0 ^{ \frac { \pi  } { 2  }  } \left ( \ln 2 + \ln ( \sin t ) + \ln ( \cos t ) \right ) \mathrm { d  } t \\
& = \frac { \pi  } { 2  } \ln 2 + 2 I 
\end{aligned}</script><p>所以$I = - \frac { \pi  } { 2  } \ln 2 $.</p>
<h6><span id="example11">Example11</span></h6><p>讨论$\int _0 ^1 \frac { \ln x  } { x ^{ \alpha  }  } , \alpha &gt; 0 $的收敛性.</p>
<p>考虑$x \in ( 0 , 1 ] $的时候,$\frac { \ln x  } { x ^{ \alpha  }  } \leq 0 $,因此其收敛性当然等价于绝对收敛性.取$x \to 0 $的部分,而考虑:</p>
<p>当$0 &lt; \alpha &lt; 1 $,任取一个足够小的$\delta &gt; 0 $使得$0 &lt; \alpha + \delta &lt; 1 $,都可以取足够逼近的$x \to 0 $使得$| \frac { \ln x  } { x ^{ \alpha  }  } | &lt; \frac { 1  } { x ^{ \alpha + \delta  }  } $.于是此时绝对收敛.反之,当$\alpha \geq 1 $的时候,$| \frac { \ln x  } { x ^\alpha  } | &gt; \frac { 1  } { x  } $,此时发散.</p>
<h6><span id="example12">Example12</span></h6><p>讨论$p , q &gt; 0 $,$\int _2 ^{ + \infty  } \frac { \mathrm { d  } x  } { x ^p \ln ^q x  } $的收敛性.</p>
<p>当$p &gt; 1 $的时候,显然$\frac { 1  } { x ^p \ln ^q x  } &lt; \frac { 1  } { x ^p  } $,因此当然绝对收敛.</p>
<p>当$p &lt; 1 $的时候,同Example11,只需放掉$\ln x $就行,因此是发散的.</p>
<p>当$p = 1 $的时候,估计出了点问题,此时做换元$t = \ln x $,则原式变为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ \ln 2  } ^{ + \infty  } e ^{ - t  } e ^{ t  } \frac { 1  } { t ^q  } \mathrm { d  } t \\
& = \int _{ \ln 2  } ^{ + \infty  } \frac { 1  } { t ^q  } \mathrm { d  } t \\

\end{aligned}</script><p>所以当$q &gt; 1 $的时候收敛,当$q \leq 1 $的时候发散.</p>
<h6><span id="example13">Example13</span></h6><p>讨论$I = \int _0 ^{ \frac { \pi  } { 2  }  } \frac { \sin x  } { x ^p  } \mathrm { d  } x $的收敛性.</p>
<p>设$f = \frac { \sin x  } { x  } $,容易见到$f $在$( 0 , \frac { \pi  } { 2  } ) $上是单调递减的,那就应当有:</p>
<script type="math/tex; mode=display">
\frac { 2  } { \pi  } \frac { 1  } { x ^{ p - 1  }  } \leq \frac { \sin x  } { x ^p  } = \frac { \sin x  } { x  } \frac { 1  } { x ^{ p - 1  }  } \leq \frac { 1  } { x ^{ p - 1  }  }</script><p>因此其收敛性等价于$\int _{ 0  } ^{ \frac { \pi  } { 2  }  } \frac { 1  } { x ^{ p - 1  }  } $的收敛性,当$p &lt; 2 $时收敛.</p>
<h6><span id="example14">Example14</span></h6><p>设$f \in C ^2 [ a , + \infty ) $,若$\int _a ^{ + \infty  } f ^2 ( x ) \mathrm { d  } x &lt; + \infty , \int _a ^{ + \infty  } ( f ‘ ‘ ) ^2 ( x ) \mathrm { d  } x &lt; + \infty $,求证$\int _a ^{ + \infty  } ( f ‘ ) ^2 ( x ) \mathrm { d  } x &lt; + \infty $.</p>
<p>此时考虑做分部积分,当然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^x f ( t ) f ' ' ( t ) \mathrm { d  } t & = f ( x ) f ' ( x ) - f ( a ) f ' ( a ) - \int _a ^x ( f ' ( t ) ) ^2 \mathrm { d  } t \\
f ( x ) f ' ( x ) & = f ( a ) f ' ( a ) + \int _a ^x f ( t ) f ' ' ( t ) \mathrm { d  } t + \int _a ^x ( f ' ( t ) ) ^2 \mathrm { d  } t \\

\end{aligned}</script><p>此时回忆到柯西不等式:</p>
<script type="math/tex; mode=display">
( \int _a ^x f ( t ) f ' ' ( t ) \mathrm { d  } t ) \leq ( \int _a ^x f ^2 ( t ) \mathrm { d  } t ) ( \int _a ^x ( f ' ' ( t ) ) ^2 \mathrm { d  } t )</script><p>因此这一项被控制住了,于是我们知道$f ( x ) f ‘ ( x ) $和$\int _a ^x ( f ‘ ( t ) ) ^2 \mathrm { d  } t $收敛性相同.</p>
<p>接下来反证原结论,假设后者并不收敛而是趋近$+ \infty $.那$f ( x ) f ‘ ( x ) \to + \infty $,对其做积分,则:</p>
<script type="math/tex; mode=display">
\int _a ^{ + \infty  } f ( x ) f ' ( x ) \mathrm { d  } x = \int _a ^{ + \infty  } f ( x ) \mathrm { d  } f ( x ) = f ^2 ( x ) - f ^2 ( a )</script><p>因此$f ^2 ( x ) \to + \infty $,这当然与$\int _a ^{ + \infty  } f ^2 ( x ) \mathrm { d  } x &lt; + \infty $相违背.</p>
<h6><span id="example15">Example15</span></h6><p>判断$\int _1 ^{ + \infty  } \tan \left ( \cfrac { \sin x  } { x  } \right ) \mathrm { d  } x $的收敛性.</p>
<p>考虑$\int _1 ^{ + \infty  } \frac { \sin x  } { x  } \mathrm { d  } x $当然是收敛的,而对$\tan \frac { \sin x  } { x  } $做泰勒展开应该和$\frac { \sin x  } { x  } $同阶,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _1 ^{ + \infty  } \tan \left ( \cfrac { \sin x  } { x  } \right ) \mathrm { d  } x \\
& = \int _1 ^{ + \infty  } \frac { \sin x  } { x  } \mathrm { d  } x + \int _1 ^{ + \infty  } \left ( \tan \left ( \cfrac { \sin x  } { x  } \right ) - \frac { \sin x  } { x  } \right ) \mathrm { d  } x \\

\end{aligned}</script><p>前半部分当然收敛,后半部分取绝对值放缩后是$O ( \frac { 1  } { x ^2  } ) $的,当然也收敛.</p>
<h6><span id="example16">Example16</span></h6><p>讨论$\int _1 ^{ + \infty  } \frac { \sin x  } { x ^p  } \arctan x \mathrm { d  } x , p &gt; 0 $的收敛性.</p>
<p>$\int _1 ^{ + \infty  } \frac { \sin x  } { x ^p  } \mathrm { d  } x $收敛,而$\arctan x $单调有界,立刻知道收敛.</p>
<h6><span id="example17">Example17</span></h6><p>讨论$\int _2 ^{ + \infty  } \frac { \cos \sqrt { x  }  } { x ^p \ln x  } \mathrm { d  } x $的收敛性.</p>
<p>当然先做换元$t = \sqrt { x  } $,那么原式变成:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ \sqrt { 2  }  } ^{ + \infty  } \frac { 2 t \cos t \mathrm { d  } t  } { t ^{ 2 p  } \ln t ^2  } \\
& = \int _{ \sqrt { 2  }  } ^{ + \infty  } \frac { \cos t \mathrm { d  } t  } { t ^{ 2 p - 1  } \ln t  } \\

\end{aligned}</script><p>$2 p - 1 &gt; 1 , p &gt; 1 $的时候当然绝对收敛,而$0 \leq 2 p - 1 \leq 1 $的时候用DA判准知道收敛,$2 p - 1 &lt; 0 $的时候当然发散.</p>
<h6><span id="example18磨光核函数">Example18(磨光核函数)</span></h6><p>构造一个$C ^{ \infty  } $的函数$g ( x ) $,满足当$x \leq 0 $的时候,$g ( x ) = 0 $;而当$x \geq 1 $的时候,$g ( x ) = 1 $.也就是你要造一个函数把两段直线焊接起来.</p>
<p>考虑$h ( x ) = \begin{cases}e ^{ - \frac { 1  } { x ^2  }  } &amp; x \ne 0 \ 0 &amp; x = 0 \end{cases} $.这个$h ( x ) $容易检验是$C ^{ \infty  } $的,只需看$0 $点处的可导性即可.</p>
<p>取$H ( x ) = \int _{ - \infty  } ^x h ( t ) h ( 1 - t ) \mathrm { d  } t $.容易见到这函数在$0 $处和$1 $处都无穷阶可导.稍微乘下常数就可以搞定.</p>
<h6><span id="example19">Example19</span></h6><p>$\int _0 ^{ + \inf  } f ( x ) \mathrm { d  } x $收敛,$xf ( x ) $单调,求证:$\lim _{ x \to \inf  } xf ( x ) \ln x = 0 $.</p>
<p>首先容易证明$xf ( x ) $单调递减趋于$0 $.那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ x _0  } ^{ x _0 ^2  } f ( x ) \mathrm { d  } x \\
& = \int _{ x _0  } ^{ x _0 ^2  } f ( x ) \frac { x  } { x  } \mathrm { d  } x \\
& = \int _{ x _0  } ^{ x _0 ^2  } xf ( x ) \mathrm { d  } \ln x \\
& \geq x _0 ^2 f ( x _0 ^2 ) \ln x _0 \\
& = \frac { 1  } { 2  } x _0 ^2 f ( x _0 ^2 ) \ln x _0 ^2 
\end{aligned}</script><p>令$x _0 \to \inf $用柯西准则证毕.</p>
<h6><span id="example20">Example20</span></h6><p>求证:当$\int _a ^b | f | &lt; \infty $的时候,黎曼引理仍然成立.</p>
<p>回忆到黎曼引理要求$f \in R [ a , b ] $,但这里的确可以推广,原因是瑕积分肯定只有有限个瑕点(有无限个瑕点能立刻证明发散),只需要用足够小的区间把这有限个瑕点盖住,用柯西准则就可以证明这部分很小,而外面的部分当然是正常的黎曼引理.</p>
<h4><span id="rs积分">RS积分</span></h4><p>设$\alpha ( x ) : [ a , b ] \to \mathbb { R  } $是一个单调不减的函数,对于有界函数$f ( x ) : [ a , b ] \to \mathbb { R  } $,考虑一个分划$P : a = x _0 &lt; \cdots &lt; x _n = b $,定义$\Delta \alpha _k = \alpha ( x _k ) - \alpha ( x _{ k - 1  } ) \geq 0 $,并定义$M _k = \sup _{ [ x _{ k - 1  } , x _k ]  } f ( x ) , m _k = \inf _{ [ x _{ k - 1  } , x _k ]  } f ( x ) $.在此基础上定义<strong>上和</strong>$U ( P , f , \alpha ) = \sum _{ k = 1  } ^n M _k \Delta \alpha _k $,同理定义<strong>下和</strong>$L ( P , f , \alpha ) = \sum _{ k = 1  } ^n m _k \Delta \alpha _k $.定义<strong>上积分</strong>$\overline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha = \inf _P { U ( P , f , \alpha )  } $,同理定义<strong>下积分</strong>$\underline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha = \inf _P { L ( P , f , \alpha )  } $.那么如果有以下$\overline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha = \underline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha $,称$f $在$[ a , b ] $上关于$\alpha $<strong>RS可积</strong>,记作$f \in { R  } _\alpha [ a , b ] $,而将此值称作$f $关于$\alpha $的RS积分,记作$\int _a ^b f ( x ) \mathrm { d  } \alpha $.</p>
<p>类比黎曼积分那套理论,应当有以下显而易见的性质:</p>
<ol>
<li><p>分划$P ^<em> $如果是$P $的加密,那么$L ( P , f , \alpha ) \leq L ( P ^</em> , f , \alpha ) , U ( P , f , \alpha ) \geq U ( P ^* , f , \alpha ) $.</p>
</li>
<li><p>$L ( P _1 , f , \alpha ) \leq U ( P _2 , f , \alpha ) $.</p>
</li>
<li><p>$\underline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha \leq \overline { \int _{ a  } ^b  } f ( x ) \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f \in { R  } _\alpha $,其充要条件是$\forall \epsilon &gt; 0 $,存在分划$P $使得$0 \leq U ( P , f , \alpha ) - L ( P , f , \alpha ) &lt; \epsilon $.</p>
</li>
</ol>
<p>接下来考虑证明一些性质:</p>
<ol>
<li><p>$f _1 , f _2 \in { R  } _\alpha [ a , b ] $,则$f _1 + f _2 \in { R  } _\alpha [ a , b ] $,并且$\int _a ^b ( f _1 + f _2 ) \mathrm { d  } \alpha = \int _a ^b f _1 \mathrm { d  } \alpha + \int _a ^b f _2 \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] $,则$cf \in { R  } _\alpha [ a , b ] $,并且$\int _a ^b ( cf ) \mathrm { d  } \alpha = c \int _a ^b f \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f _1 , f _2 \in { R  } _\alpha [ a , b ] , f _1 \leq f _2 $,则$\int _a ^b f _1 \mathrm { d  } \alpha \leq \int _a ^b f _2 \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] , c \in [ a , b ] $,那么$f \in { R  } _\alpha [ a , c ] , f \in { R  } _\alpha [ c , b ] $,且$\int _a ^b f \mathrm { d  } \alpha = \int _a ^c f \mathrm { d  } \alpha + \int _c ^b f \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] , | f | \leq M $,则$| \int _a ^b f \mathrm { d  } \alpha | \leq M \left ( \alpha ( b ) - \alpha ( a ) \right ) $.</p>
</li>
<li><p>$f \in { R  } _{ \alpha _1  } [ a , b ] $并且$f \in { R  } _{ \alpha _2  } [ a , b ] $,则$f \in { R  } _{ \alpha _1 + \alpha _2  } [ a , b ] $,并且$\int _a ^b f \mathrm { d  } ( \alpha _1 + \alpha _2 ) = \int _a ^b f \mathrm { d  } \alpha _1 + \int _a ^b f \mathrm { d  } \alpha _2 $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] , c &gt; 0 $.则$f \in { R  } _{ c \alpha  } [ a , b ] $,并且$\int _a ^b f \mathrm { d  } ( c \alpha ) = c \int _a ^b f \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] , m \leq f \leq M , g \in C [ m , M ] $.则$g ( f ( x ) ) \in { R  } _\alpha [ a , b ] $.</p>
</li>
<li><p>$f \in { R  } _\alpha [ a , b ] $,则$| f | \in { R  } _\alpha [ a , b ] $,且$| \int _a ^b f \mathrm { d  } \alpha | \leq \int _a ^b | f | \mathrm { d  } \alpha $.</p>
</li>
<li><p>$f _1 , f _2 \in { R  } _\alpha [ a , b ] $,则$f _1 f _2 \in { R  } _\alpha [ a , b ] $.</p>
</li>
<li><p>如果极限$\lim _{ \lambda ( P ) \to 0  } ( \sum f ( t _k ) \Delta \alpha _k ) , t _k \in [ x _{ k - 1  } , x _k ] $存在,则$f \in { R  } _\alpha [ a , b ] $并且其RS积分就是上述极限.然而,逆命题未必成立.</p>
</li>
</ol>
<p>对于(1),考虑对于分划$P _1 , P _2 $而言:</p>
<script type="math/tex; mode=display">
\begin{aligned}
L ( P _1 , f _1 , \alpha ) + L ( P _2 , f _2 , \alpha ) & \leq L ( P _1 \cup P _2 , f _1 , \alpha ) + L ( P _1 \cup P _2 , f _2 , \alpha ) \\
& \leq L ( P _1 \cup P _2 , f _1 + f _2 , \alpha ) \\
& \leq U ( P _1 \cup P _2 , f _1 + f _2 , \alpha ) \\
& \leq U ( P _1 \cup P _2 , f _1 , \alpha ) + U ( P _1 \cup P _2 , f _2 , \alpha ) & \leq U ( P _1 , f _1 , \alpha ) + U ( P _2 , f _2 , \alpha ) 
\end{aligned}</script><p>对此式子两边同取上下确界可以证明$\forall \epsilon &gt; 0 , U ( P _1 \cup P _2 , f _1 + f _2 , \alpha ) - L ( P _1 \cup P _2 , f _1 + f _2 , \alpha ) &lt; \epsilon $,即可得证(1).</p>
<p>对于(2),显然$U ( P , cf , \alpha ) = cU ( P , f , \alpha ) $,下和同理,于是立即得证.</p>
<p>对于(3),由(1),显然$f _2 \geq f _1 $时,$\int _a ^b ( f _2 - f _1 ) \mathrm { d  } \alpha \geq 0 $,于是$\int _a ^b f _2 \mathrm { d  } \alpha \geq \int _a ^b f _1 \mathrm { d  } \alpha $.</p>
<p>对于(4),考虑既然$f \in R _\alpha [ a , b ] $,那么$\forall \epsilon &gt; 0 $,都应该$\exists P $使得$U _{ [ a , b ]  } ( P , f , \alpha ) - L _{ [ a , b ]  } ( P , f , \alpha ) &lt; \epsilon $,而令$P ‘ = P \cup \{ c \} $,也就是将$c $强行作为一个分点,上式仍然成立,而可以将$P ‘ $拆分为两个部分,不妨记作$P _1 , P _2 $,应该有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
U _{ [ a , b ]  } ( P ' , f , \alpha ) - L _{ [ a , b ]  } ( P ' , f , \alpha ) \\
& = U _{ [ a , c ]  } ( P _1 , f , \alpha ) - L _{ [ a , c ]  } ( P _1 , f , \alpha ) + U _{ [ c , b ]  } ( P _2 , f , \alpha ) - L _{ [ c , b ]  } ( P _2 , f , \alpha ) & < \epsilon 
\end{aligned}</script><p>此二项均为正,因此分别$&lt; \epsilon $,那也就说明了$f \in R _\alpha [ a , c ] $且$f \in R _\alpha [ c , b ] $,并且仍然是钦定$c $为分点就可以见到$\int _a ^b f \mathrm { d  } \alpha = \int _a ^c f \mathrm { d  } \alpha + \int _c ^b f \mathrm { d  } \alpha $.</p>
<p>对于(5),由(3)可以得知:</p>
<script type="math/tex; mode=display">
- \int _a ^b M \mathrm { d  } \alpha \leq \int _a ^b f \mathrm { d  } \alpha \leq \int _a ^b M \mathrm { d  } \alpha</script><p>而由定义立刻见到$\int _a ^b M \mathrm { d  } \alpha = M ( \alpha ( b ) - \alpha ( a ) ) $.</p>
<p>对于(6),考虑$\Delta ( \alpha _1 + \alpha _2 ) _k = \Delta \alpha _1 + \Delta \alpha _2 $,因此$U ( P , f , \alpha _1 + \alpha _2 ) = U ( P , f , \alpha _1 ) + U ( P , f , \alpha _2 ) $.因此证明与(4)无异.</p>
<p>对于(7),只需考虑$\Delta ( c \alpha ) = c \Delta \alpha $,于是$U ( P , f , c \alpha ) = cU ( P , f , \alpha ) $,于是证明与(2)无异.</p>
<p>考虑(8)的证明,由于$g $是闭区间上的连续函数,立刻知道其一致连续.也就是$\forall \epsilon &gt; 0 , \exists 0 &lt; \delta &lt; \epsilon $,使得$| s - t | &lt; \delta $时一定有$| g ( s ) - g ( t ) | &lt; \epsilon $.接下来考虑由于$f \in R _\alpha [ a , b ] $,应当可以取一组划分$P : a = x _0 &lt; \cdots &lt; x _n = b $,使得$U ( P , f , \alpha ) - L ( P , f , \alpha ) &lt; \delta ^2 $.考虑将划分分为两类:$A = \{ 1 \leq k \leq n \mid M _k - m _k &lt; \delta \} $和$B = \{ 1 \leq k \leq n \mid M _k - m _k \geq \delta \} $.这个思路就会和根号分治很像.那接下来考虑定义$M _k ^<em> = \sup _{ [ x _{ k - 1  } , x _k ]  } g ( f ( x ) ) , m _k ^</em> = \inf _{ [ x _{ k - 1  } , x _k ]  } g ( f ( x ) ) $.</p>
<p>那这就会使得当$k \in A $的时候,由于$g $的一致连续性,立刻可以知道$M _k ^<em> - m _k ^</em> \leq \epsilon $.而当$k \in B $的时候,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\delta \sum _{ k \in B  } \Delta \alpha _k & \leq \sum _{ k \in B  } ( M _k - m _k ) \Delta \alpha _k \\
& = U ( P , f , \alpha ) - L ( P , f , \alpha ) & < \delta ^2 
\end{aligned}</script><p>于是$\sum _{ k \in B  } \Delta \alpha _k &lt; \delta $.如此一来:</p>
<script type="math/tex; mode=display">
\begin{aligned}
U ( P , g \circ f , \alpha ) - L ( P , g \circ f , \alpha ) \\
& = \sum _{ k \in A  } ( M _k ^* - m _k ^* ) \Delta \alpha _k + \sum _{ k \in B  } ( M _k ^* - m _k ^* ) \Delta \alpha _k \\
& < \epsilon ( \alpha ( b ) - \alpha ( a ) ) + 2 ( \sup | g | ) \delta \\
& < \epsilon \left ( \alpha ( b ) - \alpha ( a ) + 2 \sup | g | \right ) 
\end{aligned}</script><p>这样就证毕了.</p>
<p>考虑(9)的证明,首先由(8)知道$| f | \in { R  } _\alpha [ a , b ] $.而我们可以说存在$c = \pm 1 $,使得$| \int _a ^b f \mathrm { d  } \alpha | = c ( \int _a ^b f \mathrm { d  } \alpha ) $.而$cf ( x ) \leq | f ( x ) | $,由(3)的保序性得证.</p>
<p>考虑(10)的证明,嵌套函数$g = x ^2 $并利用(9),则我们可以知道如果$f \in { R  } _\alpha [ a , b ] $,那么$f ^2 \in { R  } _\alpha [ a , b ] $.此时观察到$4 f _1 f _2 = ( f _1 + f _2 ) ^2 - ( f _1 - f _2 ) ^2 $,立即得证.</p>
<p>(11)的证明比较显然.(11)直接的逆命题的话有个反例是考虑$f ( x ) = \begin{cases}1 &amp; x \geq 0 \ 0 &amp; x &lt; 0 \end{cases} , \alpha ( x ) = \begin{cases}1 &amp; x &gt; 0 \ 0 &amp; x \leq 0 \end{cases} $.此时会发现$x = 0 $这个点取不取在分划里是重要的,只要不取在分划里,怎么加密也没有用.</p>
<p>接下来当然应当研究一下连续性对RS可积的意义.我们声明:</p>
<ol>
<li><p>如果$f \in C [ a , b ] $,则$f \in { R  } _\alpha [ a , b ] $且对$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 $,并且只要$\lambda ( P ) &lt; \delta $,那么$| \sum f ( t _k ) \Delta \alpha _k - \int _a ^b f \mathrm { d  } \alpha | &lt; \epsilon $,其中$t _k \in [ x _{ k - 1  } , x _k ] $.</p>
</li>
<li><p>(1)中的条件如果改成$f \in R _\alpha [ a , b ] , \alpha \in C [ a , b ] $,结论仍然成立.</p>
</li>
<li><p>如果$f $单调,但是$\alpha $连续,则我们也能证明$f _\alpha \in { R  } _\alpha [ a , b ] $.</p>
</li>
<li><p>作为(3)的推论,如果$f $是有界变差函数,$\alpha $连续,也能证明$f _\alpha \in { R  } _\alpha [ a , b ] $.</p>
</li>
<li><p>如果$[ a , b ] $上的有界函数$f $只有有限个间断点,并且$f $和$\alpha $的间断点集交集为空,则$f \in R _\alpha [ a , b ] $.同时,(1)中的性质仍然成立.</p>
</li>
</ol>
<p>(1)的证明,考虑$\forall \epsilon &gt; 0 $,取$\gamma &gt; 0 $,使得$\left ( \alpha ( b ) - \alpha ( a ) \right ) \gamma &lt; \epsilon $.此时,$f $是闭区间上的连续函数,那它就一定是一致连续的函数.那么$\exists \delta &gt; 0 $,当$| x - y | &lt; \delta $的时候,有$| f ( x ) - f ( y ) | &lt; \gamma $.此时只需考虑$U ( P , f , \alpha ) - L ( P , f , \alpha ) &lt; \epsilon $就做完了.</p>
<p>(2)的证明,考虑既然$f \in R _{ \alpha  } [ a , b ] $,因此一定存在一组分划$P ^<em> $使得$U ( P ^</em> , f , \alpha ) &lt; \int _a ^b f \mathrm { d  } \alpha + \epsilon $.</p>
<p>那么接下来对于任意一组分划$P : a = x _0 &lt; \cdots &lt; x _m = b $,将其分为两组:一组是$A = \{ k \mid \exists i , x _i ^<em> \in ( x _{ k - 1  } , x _k ) \} $,$B = \{ 1 , 2 , \cdots , m \} \setminus A $.也即$B $中的每个区间都被包含在$P ^</em> $的分划中.既然如此,在$B $上的和的部分当然就要$\leq U ( P ^* , f , \alpha ) &lt; \int _a ^b f \mathrm { d  } \alpha + \epsilon $.只要我们能证明$A $能被控制住即可.</p>
<p>而由于$\alpha $连续,其在$[ a , b ] $上绝对连续,可以取足够小的分划使得$\Delta \alpha $足够小.既然如此,$\sum _{ k \in A  } f ( t _k ) \Delta \alpha _k \leq nM \max \{ \Delta \alpha _k \} $,其中$M $是$f $在$[ a , b ] $上的上界,这个立刻可以被$\max \{ \Delta \alpha _k \} $控制住.</p>
<p>(3)的证明,不妨设$f $单调不降,此时考虑取足够大的$n $使得$\frac { \alpha ( b ) - \alpha ( a )  } { n  } ( f ( b ) - f ( a ) ) &lt; \epsilon $.那么由于$\alpha $连续,所以其有介值性,可以通过选取划分使得$\Delta \alpha _k \equiv \frac { \alpha ( b ) - \alpha ( a )  } { n  } ( f ( b ) - f ( a ) ) $,那还是考虑$U ( P , f , \alpha ) - L ( P , f , \alpha ) &lt; \epsilon $即可.</p>
<p>(5)的证明相当平凡,只需用闭区间上的连续函数是一致连续处理间断点即可,在此略过.</p>
<p>于上述基础上进一步拓展,可以拓展到$\alpha $是有界变差的情况.原因是有界变差函数可以表示为两个不降函数的差,不妨设$\alpha ( x ) = \beta ( x ) - \gamma ( x ) $,则我们定义$\int _a ^b f \mathrm { d  } \alpha = \int _a ^b f \mathrm { d  } \beta - \int _a ^b f \mathrm { d  } \gamma $.</p>
<p>这个还要证明是良定的,原因是如果一个有界变差函数能表示成两种情形,有$\beta _1 ( x ) - \gamma _1 ( x ) = \beta _2 ( x ) - \gamma _2 ( x ) $,那么$\beta _1 ( x ) + \gamma _2 ( x ) = \beta _2 ( x ) + \gamma _1 ( x ) $,这两边都是不降函数,那根据$\alpha $部分可以加减的性质就完事了.</p>
<p>既然如此,对拓展的版本进一步寻找性质,不妨设$V ( x ) = V _a ^x \alpha $.</p>
<ol>
<li><p>$f \in C [ a , b ] $且$\alpha $是有界变差,或$f , \alpha $都是有界变差且$f $连续时,$| \int _a ^b f \mathrm { d  } \alpha | \leq \int _a ^b f \mathrm { d  } V $</p>
</li>
<li><p>作为(1)的推论,上述条件时,$| \int _a ^b f \mathrm { d  } \alpha | \leq \sup | f | \times V _a ^b \alpha $</p>
</li>
<li><p>(分部积分):当$\alpha , f $都是有界变差,并且它们有一个是连续的时候,$\int _a ^b f \mathrm { d  } \alpha = f \alpha \mid _a ^b - \int _a ^b \alpha \mathrm { d  } f $.应当见到其实该定理只需要$\alpha , f $有一个是连续就行.</p>
</li>
<li><p>(第一积分中值定理):$f \in C [ a , b ] $且$\alpha $不降,则$\int _a ^b f \mathrm { d  } \alpha = f ( \xi ) \left ( \alpha ( b ) - \alpha ( a ) \right ) $.</p>
</li>
<li><p>(第二积分中值定理):$f $在$[ a , b ] $上单调,$\alpha $是连续有界变差.则$\int _a ^b f \mathrm { d  } \alpha = f ( a ) \left ( \alpha ( \xi ) - \alpha ( a ) \right ) + f ( b ) \left ( \alpha ( b ) - \alpha ( \xi ) \right ) $.</p>
</li>
<li><p>(变量替换公式):如果$f , g \in C [ a , b ] $并且$g $严格增,取$h = g ^{ - 1  } $,$c = g ( a ) , d = g ( b ) $,那么$\int _a ^b f ( x ) \mathrm { d  } x = \int _c ^d f ( h ( y ) ) \mathrm { d  } h ( y ) $.</p>
</li>
<li><p>(和黎曼可积的关系):$f \in R [ a , b ] $,$\alpha $可导并且$\alpha ‘ \in R [ a , b ] $,则$f \in R _\alpha [ a , b ] $,且$\int _a ^b f \mathrm { d  } \alpha = \int _a ^b f \alpha ‘ \mathrm { d  } x $</p>
</li>
</ol>
<p>考虑(1)的证明,由于此时已经可以使用求和来逼近,那不妨考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| S ( P , f , \alpha ) | & = | \sum f ( t _k ) \Delta \alpha _k | \\
& \leq | \sum f ( t _k ) | \cdot | \Delta \alpha _k | \\
& \leq | \sum f ( t _k ) | \Delta V _k 
\end{aligned}</script><p>于是证毕.(2)自是(1)的推论.</p>
<p>(3)的话,当然是Abel求和,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( P , f , \alpha ) & = \sum _{ k = 1  } ^n f ( t _k ) ( \alpha ( x _k ) - \alpha ( x _{ k - 1  } ) ) \\
& = f ( b ) \alpha ( b ) - f ( a ) \alpha ( a ) - \sum _{ k = 1  } ^{ n + 1  } \alpha ( x _{ k - 1  } ) ( f ( t _k ) - f ( t _{ k - 1  } ) ) \\
& = f \alpha | _a ^b - S ( Q , \alpha , f ) 
\end{aligned}</script><p>容易见到$| P | \to 0 $会导致$| Q | \to 0 $,便是显然.</p>
<p>考虑(4),由于$f $是连续的,直接取$f $的上下界并介值定理一下即是显然.</p>
<p>考虑(5),用分部积分公式,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f \mathrm { d  } \alpha & = f ( b ) \alpha ( b ) - f ( a ) \alpha ( a ) - \int _a ^b \alpha \mathrm { d  } f \\
& = f ( b ) \alpha ( b ) - f ( a ) \alpha ( a ) - \alpha ( \xi ) ( f ( b ) - f ( a ) ) 
\end{aligned}</script><p>整理一下即可.</p>
<p>考虑(6),由于连续性,因此对$x $做的划分同样通过一个$h $成为了新的一组划分,而且由于闭区间上的连续函数是一致连续的,这个划分当然也趋近于$0 $,立即见到成立.</p>
<p>对于(7),首先用介值定理得到$\Delta \alpha _k = \alpha ‘ ( \xi _k ) \Delta x _k $,那当然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( P , f , \alpha ) & = \sum f ( t _k ) \Delta \alpha _k \\
& = \sum f ( t _k ) \alpha ' ( t _k ) \Delta x _k + \sum f ( t _k ) ( \alpha ' ( \xi _k ) - \alpha ' ( t _k ) ) \Delta x _k 
\end{aligned}</script><p>而后面那一项绝对值不超过$| \sup f | \sum \omega _{ \alpha ‘  } $,当然趋近于$0 $.</p>
<h3><span id="级数">级数</span></h3><p>对于数列$\{ a _n \} $,定义$S _n = \sum _{ k = 1  } ^n a _k $.如果$\lim _{ n \to \infty  } S _n $存在,则称级数$\sum _{ k = 1  } ^{ \infty  } a _n $<strong>收敛</strong>,记作$S = \sum _{ k  } ^{ \infty  } a _n $,否则如若上述极限不存在,称其<strong>发散</strong>.</p>
<p>容易见到以下性质显然成立,然而逆命题并不总是成立:</p>
<ol>
<li><p>$\sum ^{ + \infty  } a _n = A , \sum ^{ + \infty  } b _n = B $,则$\sum ^{ + \infty  } ( a _n + b _n ) = A + B $.</p>
</li>
<li><p>$\sum ^{ + \infty  } a _n = A $,则$\sum ^{ + \infty  } c a _n = cA $.</p>
</li>
<li><p>结合律:$\sum ^{ + \infty  } a _n = A $,若$\{ n _k \} $是递增正整数序列且$n _0 = 1 $,设$C _k = \sum _{ n = n _{ k - 1  }  } ^{ n _k - 1  } a _n $,则$\sum _k ^{ + \infty  } C _k = A $.</p>
</li>
</ol>
<p>(1)(2)显然,(3)当然是因为原数列收敛立刻能推出其子列收敛.</p>
<p>如果$\sum | a _n | &lt; \infty $,则称此级数<strong>绝对收敛</strong>.考虑$a _n = | a _n | - ( | a _n | - a _n ) $,前后两者都是正项数列而且$| a _n | - a _n \leq 2 | a _n | $,所以绝对收敛当然能推出收敛,而反之不可.将收敛但不绝对收敛的级数称作<strong>条件收敛</strong>.绝对收敛的两个级数之和当然也绝对收敛,乘一个系数后也绝对收敛.</p>
<p>我们有<strong>柯西收敛原理</strong>:$\sum a _n $收敛的充要条件是$\forall \epsilon &gt; 0 $,$\exists N &gt; 0 , \forall m &gt; n \geq N $,$| \sum _{ k = n  } ^m a _k | &lt; \epsilon $.用柯西准则立刻见到如若$\lim _{ n \to \infty  } S _n $收敛则必有$\lim _{ n \to \infty  } a _n = 0 $.但反命题当然不成立.这是相当重要的,正是因为$\lim _{ n \to \infty  } a _n = 0 $,所以我们才总能使用泰勒展开等手段进行估计和放缩.</p>
<p>再还有Abel-Dirichlet判别法,设$a _n $单调,$B _n = \sum _{ k = 1  } ^n b _k $,$B _n $有界,$| B _n | \leq M $:</p>
<ol>
<li><p>引理:$| \sum _{ k = 1  } ^n a _k b _k | \leq M ( | a _1 | + 2 | a _n | ) \leq 2 M ( | a _1 | + | a _n | ) $.</p>
</li>
<li><p>Dirichlet判别法:若$a _n \to 0 $,$B _n $有界,则$\sum a _k b _k $收敛.</p>
</li>
<li><p>Abel判别法:若$B _n $收敛,$a _n $有界,则$\sum a _k b _k $收敛.</p>
</li>
</ol>
<p>(1)的话当然只需使用Abel变换,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 1  } ^n a _k b _k & = \sum _{ k = 1  } ^n a _k ( B _k - B _{ k - 1  } ) \\
& = a _n B _n + \sum _{ k = 1  } ^{ n - 1  } ( a _k - a _{ k + 1  } ) B _k 
\end{aligned}</script><p>则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = 1  } ^n a _k b _k | \\
& \leq | a _n B _n | + \sum _{ k = 1  } ^{ n - 1  } | a _k - a _{ k + 1  } | \cdot | B _k | \\
& \leq M ( | a _1 - a _n | + | a _n | ) \\
& \leq M ( | a _1 | + 2 | a _n | ) 
\end{aligned}</script><p>(2)(3)的话用柯西判准,考虑任意一段求和$| B _{ n + p  } - B _{ n - 1  } | \leq 2 M $,于是:</p>
<script type="math/tex; mode=display">
| \sum _{ k = n  } ^{ n + p  } a _k b _k | \leq 2 M ( | a _n | + 2 | a _{ n + p  } | )</script><p>则属显然.</p>
<p>DA判别法的一个推论是,对于$\sum b _k $和$\sum c _k $来说,如果$\frac { b _k  } { c _k  } $单调有界且不趋于$0 $,那么它们敛散性相同.</p>
<h6><span id="example1">Example1</span></h6><p>求$\sum \frac { \sin ( nx )  } { n  } $的收敛性.</p>
<p>首先当$x = 2 k \pi $的时候当然收敛,否则使用DA判别法,考虑证明$\sum \sin ( nx ) $有界.</p>
<p>用积化和差,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = 1  } ^n \sin ( kx ) | & = \left | \frac { \sum 2 \sin \frac { x  } { 2  } \sin ( kx )  } { 2 \sin ( \frac { x  } { 2  } )  } \right | \\
& = \left | \frac { \sum \cos ( k - \frac { 1  } { 2  } ) x - \cos ( k + \frac { 1  } { 2  } ) x  } { 2 \sin ( \frac { x  } { 2  } )  } \right | \\
& \leq \frac { 1  } { | \sin \frac { x  } { 2  } |  } 
\end{aligned}</script><p>这就完事.</p>
<p>能不能进一步把上面的这个级数求出来呢?考虑欧拉公式,令$z = e ^{ ix  } $,知道$e ^{ inx  } = \cos ( nx ) + i \sin ( nx ) $,所以$\sum \frac { z ^n  } { n  } = - \ln ( 1 - z ) $的虚部就是所求.</p>
<p>而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
- \ln ( 1 - z ) & = - \ln ( 1 - \cos x - i \sin x ) \\
& = - \ln \left ( 2 ( \sin \frac { x  } { 2  } ) ( \sin \frac { x  } { 2  } - i \cos \frac { x  } { 2  } ) \right ) \\
& = - \ln \left ( 2 ( \sin \frac { x  } { 2  } ) e ^{ \frac { x - \pi  } { 2  } i  } \right ) \\
& = - \ln ( 2 \sin \frac { x  } { 2  } ) + \frac { \pi - x  } { 2  } i 
\end{aligned}</script><p>这就顺便解决了$\sum \frac { \cos ( nx )  } { n  } $的情况.</p>
<h6><span id="example2">Example2</span></h6><p>判断$\sum \frac { ( - 1 ) ^n  } { n ^p + ( - 1 ) ^n  } , p &gt; 0 $的收敛性.</p>
<p>观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { ( - 1 ) ^n  } { n ^p + ( - 1 ) ^n  } \\
& = \frac { ( - 1 ) ^n  } { n ^p  } \frac { 1  } { 1 + \frac { ( - 1 ) ^n  } { n ^p  }  } \\
& = \frac { ( - 1 ) ^n  } { n ^p  } \frac { 1 - \frac { ( - 1 ) ^n  } { n ^p  }  } { 1 - \frac { 1  } { n ^{ 2 p  }  }  } \\
& = \frac { ( - 1 ) ^n  } { n ^p - \frac { 1  } { n ^p  }  } - \frac { 1  } { n ^{ 2 p  } - 1  } 
\end{aligned}</script><p>前半部分当然收敛,于是$p \leq \frac { 1  } { 2  } $的时候发散,$\frac { 1  } { 2  } &lt; p \leq 1 $的时候条件收敛.</p>
<h6><span id="example3">Example3</span></h6><p>求$\sum \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p + \sin ( \frac { n \pi  } { 4  } )  } $的敛散性.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p + \sin ( \frac { n \pi  } { 4  } )  } \\
& = \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p  } \frac { 1  } { 1 + \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p  }  } \\
& = \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p  } \left ( 1 - \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p  } + o ( \frac { 1  } { n ^p  } ) \right ) \\
& = \frac { \sin ( \frac { n \pi  } { 4  } )  } { n ^p  } - \frac { \sin ^2 ( \frac { n \pi  } { 4  } )  } { n ^{ 2 p  }  } + o ( \frac { 1  } { n ^{ 2 p  }  } ) 
\end{aligned}</script><p>见到应该是$p \leq \frac { 1  } { 2  } $发散,$\frac { 1  } { 2  } &lt; p \leq 1 $的时候条件收敛,$p &gt; 1 $的时候绝对收敛.</p>
<h4><span id="正项级数">正项级数</span></h4><ol>
<li><p>当$a _n \geq 0 $的时候,$S _n $有界$\Leftrightarrow $S_n</p>
</li>
<li><p>当$0 \leq a _n \leq b _n $,若$\sum ^{ + \infty  } b _n &lt; \infty $,则$\sum ^{ + \infty  } a _n &lt; \infty $.</p>
</li>
<li><p>若$a _n , b _n &gt; 0 $,则若$\varlimsup _{ n \to \infty  } \frac { a _n  } { b _n  } &lt; \infty $,则$\sum ^{ + \infty  } b _n &lt; \infty \Rightarrow \sum ^{ + \infty  } a _n &lt; \infty $.</p>
</li>
<li><p>若$a _n , b _n &gt; 0 $,则若$\varliminf _{ n \to \infty  } \frac { a _n  } { b _n  } &gt; 0 $,则$\sum ^{ + \infty  } b _n = \infty \Rightarrow \sum ^{ + \infty  } a _n = \infty $.</p>
</li>
<li><p>若$a _n $单调递减趋近于$0 $.则$\sum ^{ + \infty  } _n a _n &lt; \infty \Leftrightarrow \sum _{ k  } ^{ + \infty  } 2 ^k a _{ 2 ^k  } &lt; \infty $.</p>
</li>
<li><p>$\sum _{ k = 1  } ^{ + \infty  } \frac { 1  } { n ^p  } $,当$p \leq 1 $的时候发散,而当$p &gt; 1 $的时候收敛.</p>
</li>
<li><p>$\sum _{ k = 2  } ^{ + \infty  } \frac { 1  } { n \ln ^p n  } $,当$p \leq 1 $的时候发散,而当$p &gt; 1 $的时候收敛.</p>
</li>
<li><p>设单调递减连续正函数$f ( x ) $满足$a _n = f ( n ) $,则$\sum _{ k = 1  } ^{ + \infty  } a _k &lt; \infty \Leftrightarrow \int _1 ^{ + \infty  } f ( x ) \mathrm { d  } x &lt; \infty $.</p>
</li>
<li><p>比值判别法:对于$a _n &gt; 0 $,如果$\varlimsup _{ n \to \infty  } \frac { a _{ n + 1  }  } { a _n  } &lt; 1 $,则$\sum a _n &lt; \infty $.</p>
</li>
<li><p>比值判别法:对于$a _n &gt; 0 $,如果$\varliminf _{ n \to \infty  } \frac { a _{ n + 1  }  } { a _n  } &gt; 1 $,则$\sum a _n = \infty $.</p>
</li>
<li><p>根值判别法:对于$a _n &gt; 0 $,设$l = \varlimsup _{ n \to \infty  } ( a _n ) ^{ \frac { 1  } { n  }  } $,如果$l &lt; 1 $,则$\sum a _n &lt; \infty $;若$l &gt; 1 $,则$\sum a _n = \infty $.</p>
</li>
<li><p>对于$a _n &gt; 0 $,如果$\varliminf _{ n \to \infty  } n \ln \frac { a _n  } { a _{ n + 1  }  } &gt; 1 $,则$\sum a _n &lt; \infty $.</p>
</li>
<li><p>对于$a _n &gt; 0 $,如果$\varlimsup _{ n \to \infty  } n \ln \frac { a _n  } { a _{ n + 1  }  } &lt; 1 $,则$\sum a _n = \infty $.</p>
</li>
<li><p>拉贝判别法:对于$a _n &gt; 0 $,若$\varliminf _{ n \to \infty  } n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) &gt; 1 $,则$\sum a _n &lt; \infty $.</p>
</li>
<li><p>拉贝判别法:对于$a _n &gt; 0 $,若$\varlimsup _{ n \to \infty  } n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) &lt; 1 $,则$\sum a _n = \infty $.</p>
</li>
</ol>
<p>(1)当然是单调收敛准则.(2)只是(1)的推论.</p>
<p>(3)(4)只需套用定义即可.</p>
<p>(5)的话,不妨设$S _n = \sum _{ k = 1  } ^n a _k $而$T _n = \sum _{ k = 1  } ^n 2 ^k a _{ 2 ^k  } $考虑当$2 ^k \leq n $的时候,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & \geq \sum _{ j = 1  } ^{ 2 ^k  } a _j \\
& = a _1 + \sum _{ j = 0  } ^{ k - 1  } \sum _{ i = 2 ^j + 1  } ^{ 2 ^{ j + 1  }  } a _i \\
& \geq \frac { 1  } { 2  } T _k 
\end{aligned}</script><p>当$n &lt; 2 ^{ k + 1  } $的时候,则有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n & \leq \sum _{ j = 1  } ^{ 2 ^k  } a _j \\
& = \sum _{ j = 0  } ^{ k - 1  } \sum _{ i = 2 ^j  } ^{ 2 ^{ j + 1  } - 1  } a _i \\
& \leq T _k 
\end{aligned}</script><p>(6)的话,首先$p \leq 1 $的时候$\frac { 1  } { n ^p  } \geq \frac { 1  } { n  } $于是显然,而当$p &gt; 1 $的时候,考虑用(5),观察$\sum 2 ^k \frac { 1  } { 2 ^{ pk  }  } = \sum 2 ^{ ( 1 - p ) k  } $,当然收敛.</p>
<p>(7)的话亦然考虑(5),等价于$\sum 2 ^k \frac { 1  } { 2 ^k k ^p \ln ^p 2  } = \sum \frac { 1  } { k ^p \ln ^p 2  } $,等价于(6)了.这个结论还可以推广到$\sum \frac { 1  } { n \ln n ( \ln \ln n ) ^p  } $,总之都是类似的做法,结论也类似.</p>
<p>(8)的证明只需考虑:</p>
<script type="math/tex; mode=display">
a _{ n + 1  } = f ( n + 1 ) \leq \int _n ^{ n + 1  } f ( t ) \mathrm { d  } t \leq f ( n ) = a _n</script><p>立刻证毕.</p>
<p>而且这个估计还可以更精细,事实上我们可以证明下列极限总是存在:</p>
<script type="math/tex; mode=display">
\lim _{ n \to \infty  } ( \sum _{ k = m  } ^n f ( k ) - \int _m ^n f ( x ) \mathrm { d  } x ) = \alpha</script><p>而且还满足$0 \leq \alpha \leq f ( m ) $.</p>
<p>考虑固定$m $,设$g ( n ) = \sum _{ k = m  } ^n f ( k ) - \int _m ^n f ( x ) \mathrm { d  } x $,用单调收敛准则,我们先证明它单调递减且有下界,注意到:</p>
<script type="math/tex; mode=display">
g ( n ) - g ( n + 1 ) = - f ( n + 1 ) + \int _{ n  } ^{ n + 1  } f ( x ) \mathrm { d  } x \geq 0</script><p>这就证明了其单调递减,而又有:</p>
<script type="math/tex; mode=display">
g ( n ) = \sum _{ k = m  } ^{ n - 1  } \left ( f ( k ) - \int _{ k  } ^{ k + 1  } f ( x ) \mathrm { d  } x \right ) + f ( n ) \geq f ( n ) \geq 0</script><p>因此有下界.同时注意到$g ( m ) = f ( m ) $,因此总有$0 \leq \alpha \leq f ( m ) $成立.</p>
<p>不仅如此,如果$f ( n ) $还满足$\lim _{ x \to \infty  } f ( x ) = 0 $,我们还可以把这个极限收敛的速度求出来.我们有:</p>
<script type="math/tex; mode=display">
| \sum _{ k = m  } ^n f ( k ) - \int _m ^n f ( x ) \mathrm { d  } x - \alpha | \leq f ( n )</script><p>干脆令$l &gt; n $,考虑LHS应该是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = m  } ^n f ( k ) - \int _m ^n f ( x ) \mathrm { d  } x - \alpha \\
& = \sum _{ k = m  } ^n f ( k ) - \int _m ^n f ( x ) \mathrm { d  } x - \left ( \lim _{ l \to \infty  } ( \sum _{ k = m  } ^l f ( k ) - \int _m ^l f ( x ) \mathrm { d  } x ) \right ) \\
& = \lim _{ l \to \infty  } \left ( \int _n ^l f ( x ) \mathrm { d  } x - \sum _{ k = n + 1  } ^l f ( k ) \right ) \\
& = \lim _{ l \to \infty  } \left ( \sum _{ k = n + 1  } ^l ( \int _{ k - 1  } ^k f ( k ) \mathrm { d  } x - f ( k ) ) \right ) \\
& \leq \lim _{ l \to \infty  } \left ( \sum _{ k = n + 1  } ^l ( f ( k - 1 ) - f ( k ) ) \right ) \\
& \leq f ( n ) 
\end{aligned}</script><p>而上式换个方向放缩就可以知道$\geq 0 $,这就搞定.</p>
<p>(9)(10)类似(3)(4),用等比数列控制住即可.</p>
<p>(11)的话,如若$l = \varlimsup _{ n \to \infty  } ( a _n ) ^{ \frac { 1  } { n  }  } $.</p>
<p>当$l &lt; 1 $的时候,取$\epsilon &gt; 0 $使得$l + \epsilon &lt; 1 $,则$\exists N _0 &gt; 0 $,$\forall n \geq N _0 $,$( a _n ) ^{ \frac { 1  } { n  }  } &lt; l + \epsilon $,意味着$a _n &lt; ( l + \epsilon ) ^n $,立刻见到其收敛.</p>
<p>当$l &gt; 1 $的时候,取$\epsilon &gt; 0 $使得$l - \epsilon &gt; 1 $,则存在原数列的一个无穷子列$\{ n _k \} $,使得$a _{ n _k  } &gt; ( l - \epsilon ) ^{ n _k  } \to \infty $,当然发散.</p>
<p>而注意到根据Stolz定理:</p>
<script type="math/tex; mode=display">
\varliminf \frac { a _{ n + 1  }  } { a _n  } \leq \varliminf \sqrt [n ] { a _n  } \leq \varlimsup \sqrt [n ] { a _n  } \leq \varlimsup \frac { a _{ n + 1  }  } { a _n  }</script><p>这就意味着根值判别法理论上严格强于比值判别法.</p>
<p>(12)(13)的证明,考虑当$l = \varliminf _{ n \to \infty  } n \ln \frac { a _n  } { a _{ n + 1  }  } &gt; 1 $的时候,取$\epsilon &gt; 0 , p = l - \epsilon &gt; 1 $,那么就有$\exists N _0 &gt; 0 , \forall n \geq N _0 $,都有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n \ln \frac { a _n  } { a _{ n + 1  }  } & > p \\
\frac { a _n  } { a _{ n + 1  }  } & > e ^{ \frac { p  } { n  }  } & > \left ( ( 1 + \frac { 1  } { n  } ) ^n \right ) ^{ \frac { p  } { n  }  } \\
\frac { a _{ n + 1  }  } { a _n  } & < \cfrac { \frac { 1  } { ( n + 1 ) ^p  }  } { \frac { 1  } { n ^p  }  } 
\end{aligned}</script><p>取$b _n = \frac { 1  } { n ^p  } $,由上见到$a _n &lt; \frac { a _{ N _0  }  } { b _{ N _0  }  } b _n $,这就控制住了.(13)同理.控制$e $的时候改用不等式$e &lt; ( 1 + \frac { 1  } { n - 1  } ) ^n $即可.</p>
<p>(14)(15)仍然类似,设$b _n = n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) $.</p>
<p>当$l = \varliminf _{ n \to \infty  } b _n &gt; 1 $的时候,取$\epsilon &gt; 0 $,$l - \epsilon &gt; 1 $,则$\exists N _0 &gt; 0 , \forall n \geq N _0 $,$b _n &gt; l - \epsilon = l ‘ $.而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { a _n  } { a _{ n + 1  }  } & = 1 + \frac { b _n  } { n  } \\
\ln \frac { a _n  } { a _{ n + 1  }  } & = \ln ( 1 + \frac { b _n  } { n  } ) & > \ln ( 1 + \frac { l '  } { n  } ) \\
\varliminf n \ln \frac { a _n  } { a _{ n + 1  }  } & \geq \varliminf \ln ( 1 + \frac { l '  } { n  } ) ^{ n  } & = l ' & > 1 
\end{aligned}</script><p>这就做完了.(15)同理.</p>
<h6><span id="example1">Example1</span></h6><p>斐波那契数列$f _0 = 0 , f _1 = 1 $,求$\sum \frac { 1  } { f _k  } $的收敛性.</p>
<p>考虑$f _{ n - 1  } \leq 2 f _{ n - 2  } $,所以$f _n = f _{ n - 1  } + f _{ n - 2  } \geq \frac { 3  } { 2  } f _{ n - 1  } \geq ( \frac { 3  } { 2  } ) ^{ n - 1  } $.这就做完了.</p>
<h6><span id="example2">Example2</span></h6><p>假设$0 &lt; a _n $单调递增且有界,求证:$\sum ( 1 - \frac { a _k  } { a _{ k + 1  }  } ) &lt; \infty $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum ( 1 - \frac { a _k  } { a _{ k + 1  }  } ) \\
& = \sum { a _k  } ( \frac { 1  } { a _k  } - \frac { 1  } { a _{ k + 1  }  } ) \\
& \leq \sup { a  } \sum ( \frac { 1  } { a _k  } - \frac { 1  } { a _{ k + 1  }  } ) \\
& \leq \frac { \sup { a  }  } { a _1  } 
\end{aligned}</script><h6><span id="example3">Example3</span></h6><p>求$\sum \frac { 1  } { n ^p - n ^q  } , p &gt; q &gt; 0 $的收敛性.</p>
<p>直接考虑$\lim _{ n \to \infty  } \cfrac { \frac { 1  } { n ^p - n ^q  }  } { \frac { 1  } { n ^p  }  } = 1 $,所以$p \leq 1 $的时候发散,$p &gt; 1 $的时候收敛.</p>
<h6><span id="example4">Example4</span></h6><p>求$\sum \sin \frac { 1  } { n ^2  } $的收敛性.</p>
<p>直接考虑$\lim _{ n \to \infty  } \cfrac { \sin \frac { 1  } { n ^2  }  } { \frac { 1  } { n ^2  }  } = 1 $,所以收敛.</p>
<h6><span id="example5">Example5</span></h6><p>$a _n = ( 1 - \sqrt [3 ] { \frac { n - 1  } { n + 1  }  } ) ^p , p &gt; 0 $,讨论$\sum a _n $的敛散性.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sqrt [3 ] { \frac { n - 1  } { n + 1  }  } & = ( 1 - \frac { 1  } { n  } ) ^{ \frac { 1  } { 3  }  } ( 1 + \frac { 1  } { n  } ) ^{ - \frac { 1  } { 3  }  } \\
& = ( 1 - \frac { 1  } { 3 n  } + O ( \frac { 1  } { n ^2  } ) ) ( 1 - \frac { 1  } { 3 n  } + O ( \frac { 1  } { n ^2  } ) ) \\
& = 1 - \frac { 2  } { 3 n  } + O ( \frac { 1  } { n ^2  } ) 
\end{aligned}</script><p>所以$a _n $和$\frac { 1  } { n ^p  } $同敛散.</p>
<h6><span id="example6">Example6</span></h6><p>求$S _n = \sum _{ k = 1  } ^n \frac { 1  } { \sqrt { k  }  } - 2 \sqrt { n  } $的敛散性.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _{ n + 1  } & = S _{ n + 1  } - S _n \\
& = \frac { 1  } { \sqrt { n + 1  }  } - 2 \sqrt { n + 1  } + 2 \sqrt { n  } \\
& = \frac { 1  } { \sqrt { n + 1  }  } - \frac { 2  } { \sqrt { n + 1  } + \sqrt { n  }  } \\
& = \frac { \sqrt { n  } - \sqrt { n + 1  }  } { \sqrt { n + 1  } ( \sqrt { n + 1  } + \sqrt { n  } )  } \\
& = \frac { - 1  } { \sqrt { n + 1  } ( \sqrt { n + 1  } + \sqrt { n  } ) ^2  } & = O ( - n ^{ - \frac { 3  } { 2  }  } ) 
\end{aligned}</script><p>所以收敛.</p>
<h6><span id="example7">Example7</span></h6><p>求$a _n = \frac { 1  } { \sqrt { n  }  } - \sqrt { \ln ( 1 + \frac { 1  } { n  } )  } $的级数和收敛性.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \frac { 1  } { \sqrt { n  }  } - \sqrt { \ln ( 1 + \frac { 1  } { n  } )  } \\
& = \frac { 1  } { \sqrt { n  }  } - \sqrt { \frac { 1  } { n  } - \frac { 1  } { 2 n ^2  } + o ( \frac { 1  } { n ^2  } )  } \\
& = \frac { 1  } { \sqrt { n  }  } - \frac { 1  } { \sqrt { n  }  } \left ( 1 - \frac { 1  } { 2 n  } + o ( \frac { 1  } { n  } ) \right ) ^{ \frac { 1  } { 2  }  } \\
& = \frac { 1  } { \sqrt { n  }  } - \frac { 1  } { \sqrt { n  }  } \left ( 1 - \frac { 1  } { 4 n  } + o ( \frac { 1  } { n  } ) \right ) \\
& = O ( n ^{ - \frac { 3  } { 2  }  } ) 
\end{aligned}</script><p>所以收敛.</p>
<h6><span id="example8">Example8</span></h6><p>设$\zeta ( a ) = \sum _{ k = 1  } ^{ \infty  } \frac { 1  } { k ^a  } $,求$\lim _{ \sigma \to 0 + 0  } \sigma \zeta ( 1 + \sigma ) $和$\lim _{ \sigma \to 0 + 0  } \left ( \zeta ( 1 + \sigma ) - \frac { 1  } { \sigma  } \right ) $.</p>
<p>取$f ( x ) = \frac { 1  } { x ^{ 1 + \sigma  }  } $,设$F ( x ) = \int _1 ^x f ( t ) \mathrm { d  } t $考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = n + 1  } ^{ \infty  } a _k & \leq F ( + \infty ) - F ( n ) & \leq \sum _{ k = n  } ^{ \infty  } a _k \\
F ( + \infty ) - F ( n + 1 ) & \leq \sum _{ k = n + 1  } ^{ \infty  } a _k & \leq F ( + \infty ) - F ( n ) \\
\frac { 1  } { \sigma  } \frac { 1  } { ( n + 1 ) ^\sigma  } & \leq \sum _{ k = n + 1  } ^{ \infty  } a _k & \leq \frac { 1  } { \sigma  } \frac { 1  } { n ^\sigma  } \\
\frac { 1  } { ( n + 1 ) ^\sigma  } & \leq \sigma \sum _{ k = n + 1  } ^{ \infty  } a _k & \leq \frac { 1  } { n ^\sigma  } 
\end{aligned}</script><p>取$n = 0 $和$n = 1 $得到$1 \leq \sigma \zeta ( 1 + \sigma ) \leq \sigma + 1 $,于是$\lim _{ \sigma \to 0 + 0  } \sigma \zeta ( 1 + \sigma ) = 1 $.</p>
<p>而同理,见到:</p>
<script type="math/tex; mode=display">
\zeta ( 1 + \sigma ) = 1 + \frac { 1  } { 2 ^{ 1 + \sigma  }  } + \cdots + \frac { 1  } { n ^{ 1 + \sigma  }  } + \sum _{ k = n + 1  } ^{ \infty  } \frac { 1  } { k ^{ 1 + \sigma  }  }</script><p>而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + \frac { 1  } { 2 ^{ 1 + \sigma  }  } + \cdots + \frac { 1  } { n ^{ 1 + \sigma  }  } + \frac { 1  } { \sigma  } \frac { 1  } { ( n + 1 ) ^\sigma  } \\
& \leq \zeta ( 1 + \sigma ) & \leq \\
1 + \frac { 1  } { 2 ^{ 1 + \sigma  }  } + \cdots + \frac { 1  } { n ^{ 1 + \sigma  }  } + \frac { 1  } { \sigma  } \frac { 1  } { n ^\sigma  } \\

\end{aligned}</script><p>用上述不等式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + \frac { 1  } { 2 ^{ 1 + \sigma  }  } + \cdots + \frac { 1  } { n ^{ 1 + \sigma  }  } + \frac { 1  } { \sigma  } \left ( \frac { 1  } { ( n + 1 ) ^\sigma  } - 1 \right ) \\
& \leq \zeta ( 1 + \sigma ) - \frac { 1  } { \sigma  } & \leq \\
1 + \frac { 1  } { 2 ^{ 1 + \sigma  }  } + \cdots + \frac { 1  } { n ^{ 1 + \sigma  }  } + \frac { 1  } { \sigma  } \left ( \frac { 1  } { n ^\sigma  } - 1 \right ) \\

\end{aligned}</script><p>两边对$\sigma \to 0 + 0 $取极限,见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 + \frac { 1  } { 2  } + \cdots + \frac { 1  } { n  } - \ln ( n + 1 ) \\
& \leq \varliminf _{ \sigma \to 0 + 0  } ( \zeta ( 1 + \sigma ) - \frac { 1  } { \sigma  } ) & \leq \varlimsup _{ \sigma \to 0 + 0  } ( \zeta ( 1 + \sigma ) - \frac { 1  } { \sigma  } ) & \leq \\
1 + \frac { 1  } { 2  } + \cdots + \frac { 1  } { n  } - \ln ( n ) 
\end{aligned}</script><p>两边对$n $取极限得到$\lim _{ \sigma \to 0 + 0  } \zeta ( 1 + \sigma ) - \frac { 1  } { \sigma  } = \gamma $.</p>
<h6><span id="example9">Example9</span></h6><p>$a _n &gt; 0 $,证明:若$\varlimsup _{ n \to \infty  } a _n ^{ \frac { 1  } { \ln n  }  } &lt; \frac { 1  } { e  } $则收敛.若$\varliminf _{ n \to \infty  } a _n ^{ \frac { 1  } { \ln n  }  } &gt; \frac { 1  } { e  } $则发散.</p>
<p>只证前者,则存在$p &gt; 1 $使得$\varlimsup _{ n \to \infty  } a _n ^{ \frac { 1  } { \ln n  }  } &lt; \frac { 1  } { e ^p  } $,两边取$\ln $就做完了.</p>
<h6><span id="example10">Example10</span></h6><p>$a _n &gt; 0 $,证明:若$\varliminf _{ n \to \infty  } \cfrac { \ln \frac { 1  } { a _n  }  } { \ln n  } &gt; 1 $则收敛.若$\varlimsup _{ n \to \infty  } \cfrac { \ln \frac { 1  } { a _n  }  } { \ln n  } &lt; 1 $则发散.</p>
<p>只证前者,考虑前者等价于$\varlimsup _{ n \to \infty  } \ln a _n ^{ \frac { 1  } { \ln n  }  } &lt; - 1 $,转化为Example9.</p>
<h6><span id="example11">Example11</span></h6><p>数列$\{ a _n \} $恒正,数列$b _n = \frac { a _n  } { a _{ n + 1  }  } - 1 - \frac { 1  } { n  } $的部分和有界,求证$\sum a _n $发散.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { a _n  } { a _{ n + 1  }  } & = 1 + \frac { 1  } { n  } + b _n & \leq e ^{ \frac { 1  } { n  } + b _n  } \\
\frac { a _1  } { a _{ n + 1  }  } & \leq e ^{ \ln n + \gamma + M  } & = cn \\
a _n & \geq \frac { ca _1  } { n  } 
\end{aligned}</script><p>这就搞定.</p>
<h4><span id="交错级数">交错级数</span></h4><p>考虑$\sum ( - 1 ) ^{ n - 1  } a _n $,其中$a _n &gt; 0 $.</p>
<p>Leibniz定理:如果$a _n $单调下降趋近于$0 $,则交错级数收敛.</p>
<p>考虑$S _{ 2 n  } = ( a _1 - a _2 ) + ( a _3 - a _4 ) + \cdots $而$S _{ 2 n + 1  } = a _1 - ( a _2 - a _3 ) - ( a _4 - a _5 ) - \cdots $,所以见到$S _{ 2 n  } $单调上升,$S _{ 2 n + 1  } $单调下降.并且显然$S _{ 2 n  } &lt; S _{ 2 n + 1  } $.而且$S _{ 2 n + 1  } - S _{ 2 n  } = a _{ 2 n + 1  } \to 0 $,所以二者均收敛且极限相同极限相同.</p>
<p>当然,这也只是DA判别法的一个特例.</p>
<p>Leibniz定理还可以如此理解:由于后面的项正负抵消,我们发现:</p>
<script type="math/tex; mode=display">
| \sum _{ k = n  } ^\infty ( - 1 ) ^k a _k | \leq a _n \to 0</script><p>也就是后面的交错都可以被首项控制住.</p>
<h6><span id="example1">Example1</span></h6><p>考虑$\sum ( - 1 ) ^{ n  } \frac { \ln ^2 n  } { n  } $的收敛性.</p>
<p>取$f ( x ) = \frac { \ln ^2 x  } { x  } $,则$f ‘ = \frac { 2 \ln x - \ln ^2 x  } { x ^2  } $,显然当$x $足够大的时候$f ‘ ( x ) &lt; 0 $且$f ( + \infty ) = 0 $,所以原式收敛.</p>
<h6><span id="example2">Example2</span></h6><p>设$a _n &gt; 0 $,求证:若$\varliminf n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) &gt; 0 $,则$\sum ( - 1 ) ^n a _n $收敛.</p>
<p>考虑$n $足够大的时候$\exists \epsilon &gt; 0 $,使得$n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) &gt; \epsilon $,也就是$\frac { a _{ n + 1  }  } { a _n  } &lt; \frac { n  } { n + \epsilon  } &lt; 1 $,这就能证明$a _n $单调递减.下面只需要证明$\lim a _n = 0 $即可.</p>
<p>而考虑取定$N &gt; 0 $,对于$n \geq N $,有$\frac { a _n  } { a _N  } = \prod _{ k = N  } ^{ n - 1  } \frac { a _{ k + 1  }  } { a _{ k  }  } $,$a _N $是定死的,下面只需要证明后面那个乘积趋近于$0 $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ k = N  } ^{ n - 1  } \frac { a _{ k + 1  }  } { a _{ k  }  } \\
& < \prod _{ k = N  } ^{ n - 1  } \frac { n  } { n + \epsilon  } \\
& = \prod _{ k = N  } ^{ n - 1  } \frac { 1  } { 1 + \frac { \epsilon  } { n  }  } \\

\end{aligned}</script><p>然而注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ k = N  } ^{ n - 1  } ( 1 + \frac { \epsilon  } { n  } ) \\
& \geq 1 + \frac { \epsilon  } { N  } + \cdots + \frac { \epsilon  } { n - 1  } \to \infty 
\end{aligned}</script><p>这就完事.</p>
<h6><span id="example3">Example3</span></h6><p>取$f ( x ) = \sum _{ n = 1  } ^\infty \frac { ( - 1 ) ^{ n - 1  }  } { n ^x  } , x \in ( 0 , \infty ) $,求$\sup f $和$\inf f $.</p>
<p>首先显然能搞出$f ( x ) \in C ^\infty ( 0 , + \infty ) $,原因是能证明其和其若干阶导数都内闭一致收敛(用DA判法).</p>
<p>首先交错级数的绝对值要$\leq $首项,所以先猜$\sup f = 1 $.考虑:</p>
<script type="math/tex; mode=display">
f ( x ) = 1 - \sum _{ n = 1  } ^\infty \left ( \frac { 1  } { ( 2 n ) ^x  } - \frac { 1  } { ( 2 n + 1 ) ^x  } \right )</script><p>容易见到只要让$x \to \infty $那就逐项趋近于$0 $.</p>
<p>还有一个问题是$\inf f $.考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^x  } - \frac { 1  } { ( 2 n + 1 ) ^x  } \\
& = \sum _{ n = 1  } ^\infty \int _{ 2 n  } ^{ 2 n + 1  } \frac { x \mathrm { d  } t  } { t ^{ x + 1  }  } \\

\end{aligned}</script><p>这里注意到我们积分的那几段都是$[ 2 n , 2 n + 1 ] $,我们可以把奇数段补上,因为$x &gt; 0 $,所以补的那一段更大,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^\infty \int _{ 2 n  } ^{ 2 n + 1  } \frac { x \mathrm { d  } t  } { t ^{ x + 1  }  } \\
& \leq \frac { 1  } { 2  } \int _1 ^{ + \infty  } \frac { \mathrm { d  } t  } { t ^{ x + 1  }  } & = \frac { 1  } { 2  } 
\end{aligned}</script><p>而$f ( x ) = 1 - \sum _{ n = 1  } ^\infty \left ( \frac { 1  } { ( 2 n ) ^x  } - \frac { 1  } { ( 2 n + 1 ) ^x  } \right ) $,所以$f ( x ) \geq \frac { 1  } { 2  } $.</p>
<p>接下来来证明其能取到,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^x  } - \frac { 1  } { ( 2 n + 1 ) ^x  } \\
& = \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^x  } \left ( 1 - \frac { 1  } { ( 1 + \frac { 1  } { 2 n  } ) ^x  } \right ) \\
& = \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^x  } \left ( \frac { x  } { 2 n  } + O ( \frac { x  } { n ^2  } ) \right ) \\
& = \frac { x  } { 2 ^{ x + 1  }  } \zeta ( x + 1 ) + xO ( 1 ) \\
\to \frac { 1  } { 2  } 
\end{aligned}</script><p>原因是$\lim _{ x \to 0 + 0  } x \zeta ( x + 1 ) \to 1 $,这个结论我们之前搞定过.</p>
<h4><span id="积分判别法">积分判别法</span></h4><p>取$\omega _n = \sup _{ [ n , n + 1 ]  } f - \inf _{ [ n , n + 1 ]  } f \geq 0 $.我们声称若$\sum \omega _n &lt; \infty $,则$\int _1 ^{ \infty  } f ( x ) \mathrm { d  } x $与$\sum f ( n ) $收敛性相同.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 1  } ^n f _k - \int _1 ^{ n + 1  } f ( x ) \mathrm { d  } x \\
& = \sum _{ k = 1  } ^n \int _k ^{ k + 1  } ( f ( k ) - f ( x ) ) \mathrm { d  } x \\

\end{aligned}</script><p>考虑证明右式绝对收敛,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 1  } ^n \int _k ^{ k + 1  } | f ( k ) - f ( x ) | \mathrm { d  } x \\
& \leq \sum _{ k = 1  } ^n \int _k ^{ k + 1  } \omega _k \mathrm { d  } x \\
& = \sum _{ k = 1  } ^{ n + 1  } \omega _k 
\end{aligned}</script><p>这就证毕.</p>
<p>问题又来到如何搞定$\sum \omega _n &lt; \infty $的条件,其实只要有界变差就行了对吧,我们断言:如果$f $可导,$f ‘ $可积且$\int _1 ^{ \infty  } | f ‘ | \mathrm { d  } x &lt; \infty $则$\sum \omega _n &lt; \infty $.</p>
<p>对于$\omega _n $,不妨$[ n , n + 1 ] $的上界在$x _1 $处取到,下界在$x _2 $处取到,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\omega _n & = f ( x _1 ) - f ( x _2 ) \\
& = | \int _{ x _1  } ^{ x _2  } f ' \mathrm { d  } x | \\
& \leq | \int _{ x _1  } ^{ x _2  } | f ' | \mathrm { d  } x | \\
& \leq \int _{ n  } ^{ n + 1  } | f ' | \mathrm { d  } x \\

\end{aligned}</script><p>于是$\sum \omega \leq \int _1 ^{ + \infty  } | f ‘ | \mathrm { d  } x $.</p>
<h6><span id="example1">Example1</span></h6><p>求$\sum \frac { \sin ( n ^\alpha x )  } { n ^\beta  } $的收敛性,其中$\beta &gt; \alpha &gt; 0 , \alpha + \beta &gt; 1 $.</p>
<p>用积分判别法,考虑取$f ( t ) = \frac { \sin ( t ^\alpha x )  } { t ^\beta  } $,考虑:</p>
<script type="math/tex; mode=display">
f ' ( t ) = \frac { x \alpha t ^{ \alpha - 1 + \beta  } \cos ( t ^\alpha x ) - \beta t ^{ \beta - 1  } \sin ( t ^\alpha x )  } { t ^{ 2 \beta  }  }</script><p>逐项观察,都是$O ( \frac { 1  } { t ^{ \beta - \alpha + 1  }  } ) $级别,这样$\int | f ‘ | \mathrm { d  } t $就收敛了.</p>
<p>那就只需要看积分的收敛性,取$s = t ^\alpha $考察:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _1 ^{ \infty  } f ( t ) \mathrm { d  } t & = \int _1 ^{ \infty  } \frac { \sin ( t ^\alpha x )  } { t ^\beta  } \mathrm { d  } t \\
& = \int _1 ^{ \infty  } \frac { \sin ( s x ) \frac { 1  } { \alpha  } s ^{ \frac { 1  } { \alpha  } - 1  }  } { s ^\frac { \beta  } { \alpha  }  } \mathrm { d  } s \\
& = \int _1 ^{ \infty  } \frac { \sin ( s x )  } { \alpha s ^\frac { \beta + \alpha - 1  } { \alpha  }  } \mathrm { d  } s \\

\end{aligned}</script><p>后者用DA判法知道收敛.</p>
<h4><span id="级数的交换顺序">级数的交换顺序</span></h4><p>定义$\mathbb { N  } _+ $的一个重排$f : \mathbb { N  } _+ \to \mathbb { N  } _+ $,当且仅当$f ( 1 ) , f ( 2 ) , \cdots $这个数列中,每个正整数都恰好出现一次.</p>
<p>我们声称正项级数满足:$\sum a _n = \sum a _{ f ( n )  } $.</p>
<p>如何证明呢?</p>
<p>当$\sum a _n &lt; \infty $的时候,考虑设$A _n = \sum _{ k = 1  } ^n a _k , B _n = \sum _{ k = 1  } ^n a _{ f ( k )  } $.考虑取$N _n = \max _{ 1 \leq k \leq n  } f ( k ) $,那就有:</p>
<script type="math/tex; mode=display">
B _n = \sum _{ k = 1  } ^n a _{ f ( k )  } \leq A _{ N _n  } \leq \sum _{ 1  } ^{ \infty  } a _n</script><p>于是$B _n $当然是收敛的,并且$\sum a _{ f ( n )  } \leq \sum a _n $,而如果$a _{ f ( n )  } $是$a _n $的重排,那么反之,$a _n $是$a _{ f ( n )  } $的重排,于是$\sum a _{ f ( n )  } \geq \sum a _n $,这就证明了二者相同.</p>
<p>既如此,如果$\sum a _n $发散的时候,就可以反证法证明$\sum a _{ f ( n )  } $不可能收敛.这样就完成了证明.</p>
<p>下面我们证明,如果$\sum a _n $绝对收敛,换言之$\sum | a _n | &lt; \infty $,那么仍有$\sum a _n = \sum a _{ f ( n )  } $.</p>
<p>考虑取$a _n ^+ = \frac { | a _n | + a _n  } { 2  } , a _n ^- = \frac { | a _n | - a _n  } { 2  } $.那考虑$0 \leq a _n ^+ \leq | a _n | , 0 \leq a _n ^- \leq | a _n | $,所以它们当然都绝对收敛,那当然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum a _n & = \sum ( a _n ^+ - a _n ^- ) \\
& = ( \sum a _n ^+ ) - ( \sum a _n ^- ) 
\end{aligned}</script><p>而后者当然可以随意重排.</p>
<p>那么对于条件收敛呢?我们有<strong>黎曼重排定理</strong>:如果$\sum a _n $条件收敛,则$\forall B \leq A $,其中$A , B \in \mathbb { R  } \cup \{ \pm \infty \} $,则存在重排$f $,令$S _n = \sum _{ k = 1  } ^n a _{ f ( k )  } $,有:</p>
<script type="math/tex; mode=display">
\varliminf S _n = B , \varlimsup S _n = A</script><p>为证明此,考虑设$I _+ = \{ n \in \mathbb { N  } _+ \mid a _n \geq 0 \} = \{ n _1 &lt; n _2 \cdots \} $,$I _- $类似设出.</p>
<p>容易见到首先$\lim a _n \to 0 $,并且$\sum _{ n \in I _+  } a _n = + \infty , \sum _{ n \in I _-  } a _n = - \infty $.</p>
<p>考虑先从$I _+ $里取数,然后不断加加加加加直到超过$A $,由于正的部分相加是正无穷,这当然能做到,然后就继续从$I _- $里取数开始回退,退退退退到$B $之下,再重复上述过程.由于$a _n \to 0 $,这玩意当然会满足条件.</p>
<p>那么如果$A $是正无穷呢?那没关系,我就每次加数的时候变化$A $,第一次个循环令$A = 1 $,第二次令$A = 2 $,以此类推.由此见上述命题的合理性.而且具体的论证过程只需要对这上面写抽象语言就行.</p>
<p>可是,难道一般的级数就真的不能交换顺序了嘛?事实上使用柯西准则,我们可以证明如果重排是局部的,或者说$\exists M &gt; 0 , \forall n , | n - f ( n ) | \leq M &lt; \infty $,换言之交换的距离有上界,那交换后敛散性不变.</p>
<p>这个怎么证明呢?首先如果原级数收敛的话,用柯西准则,因为通项趋于$0 $,所以往外扩张适当有界长度(实际上就是$M $)应当无影响.如果原级数发散的话,如果通项还是不趋于$0 $那当然还是完蛋,否则的话还可以用上面的证明.这就证毕了.</p>
<h6><span id="example">Example</span></h6><p>$a _n &gt; 0 $,当$\sum \frac { 1  } { a _n  } &lt; \infty $的时候,求证$\sum \frac { n  } { \sum _{ k = 1  } ^n a _k  } &lt; \infty $.</p>
<p>首先考虑$\{ a _n \} $单增的情况,如果不单增的话,可以直接对其进行排序.</p>
<p>考虑$\frac { 2 n  } { \sum _{ k = 1  } ^{ 2 n  } a _k  } &lt; \frac { 2 n  } { na _n  } = \frac { 2  } { a _n  } $,同理$\frac { 2 n - 1  } { \sum _{ k = 1  } ^{ 2 n  } a _k  } &lt; \frac { 2 n - 1  } { na _n  } &lt; \frac { 2  } { a _n  } $,于是证毕.</p>
<h4><span id="级数的乘法">级数的乘法</span></h4><p>考虑$( \sum a _j ) ( \sum b _k ) = \sum a _j b _k $,首要的问题在于如何指定后者的求和顺序.</p>
<p>柯西策略是,考虑取$c _n = \sum _{ j + k = n + 1  } a _j b _k $,然后取原式顺序为$\sum c _n $.此好处是可以求解生成函数乘积,$( \sum a _j x ^j ) ( \sum b _k x ^k ) $.</p>
<p>矩形策略是,考虑取$c _n = \sum _{ \max ( j , k ) = n  } a _j b _k $,然后取原式顺序为$\sum c _n $.此好处是它的求和天然是$( \sum _{ j = 1  } ^n a _j ) ( \sum _{ k = 1  } ^n b _k ) $的极限.所以此方法天然有如果$\sum a _j = A , \sum b _k = B $,则$\sum c = AB $.</p>
<p>接下来我们证明,如果$\sum a $和$\sum b $都绝对收敛,那它们的乘积任意排列都是相等的.换言之只要双重指标集合$\{ ( j _i , k _i ) \} = \{ ( j , k ) \} $那就都收敛于同一值.</p>
<p>证明策略类似,取$N _n = \max _{ 1 \leq i \leq n  } ( j _i , k _i ) $,那么当然有:</p>
<script type="math/tex; mode=display">
\sum _{ i = 1  } ^n | a _{ j _i  } b _{ k _i  } | \leq ( \sum _{ j = 1  } ^{ N _n  } | a _{ j  } | ) ( \sum _{ k = 1  } ^{ N _n  } | b _{ k  } | )</script><p>那当然就绝对收敛,再类似之前的可以证明其与顺序无关,这个时候用矩形策略就可以知道最终就收敛于$( \sum a ) ( \sum b ) $.</p>
<p>如果是条件收敛,矩形和当然没问题,仍然收敛,难点当然在于柯西和何时收敛?我们声称:如果$\sum a _n $收敛,$\sum | b _n | &lt; \infty $,也就是一个收敛一个绝对收敛,我们就能推出柯西和是收敛的而且就等于矩形和.</p>
<p>考虑设矩形法的$u _k = \sum _{ \max ( i , j ) = k  } a _i b _j $,柯西法的$c _k = \sum _{ i + j = k + 1  } a _i b _j $,考虑求:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = 1  } ^n u _k - c _k | \\
& = | \sum _{ i _j > n + 1 , i \leq n , j \leq n  } a _i b _j | \\
& \leq \sum _{ i = 2  } ^n | b _i | | \sum _{ j = n - i + 2  } ^n a _j | \\
& = \sum _{ i = 2  } ^N | b _i | | \sum _{ j = n - i + 2  } ^n a _j | + \sum _{ i = N + 1  } ^n | b _i | | \sum _{ j = n - i + 2  } ^n a _j | 
\end{aligned}</script><p>接下来用柯西收敛原理,先取$N $,只要$N $足够大,由于$| \sum _{ j = n - i + 2  } ^n a _j | $当然是有界的,因为$\sum a $收敛,只要$N $足够大,不管$n $如何,$\sum _{ i = N + 1  } ^n | b _i | $用柯西收敛原理就足够小.这样后半项就解决了.</p>
<p>前半项同理,在$N $取定的时候$\sum _{ i = 2  } ^N | b _i | $就取定有界了.而只要在此基础上使得$n $尽可能大,$| \sum _{ j = n - i + 2  } ^n a _j | $用柯西收敛原理就控制住了,于是整体就很小.那就证明了此时柯西和恰好就是矩形和.</p>
<p>一般的柯西和没有这么好的结论,但其实证明可以类似上面,具体地,我们取$A _n = \sum _{ k = 1  } ^n a _k , B _n = \sum _{ k = 1  } ^n b _k $并且$\lim A , \lim B $都存在,取柯西和$c _n = \sum _{ k = 1  } ^n a _k b _{ n - k + 1  } $,我们断言$C _n = \sum _{ k = 1  } ^n c _k $收敛当且仅当极限$\lim _{ n \to \infty  } \sum _{ k = 1  } ^n a _k \sum _{ j = n - k + 1  } ^n b _j $存在.</p>
<p>原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 1  } ^n a _k \sum _{ j = n - k + 1  } ^n b _j \\
& = \sum _{ k = 1  } ^n a _k ( B _n - B _{ n - k  } ) \\
& = B _n A _n - ( \sum _{ k = 1  } ^{ n - 1  } a _k B _{ n - k  } ) \\
& = B _n A _n - C _{ n - 1  } 
\end{aligned}</script><p>这就证毕,而且当然见到只有上述极限为$0 $的时候,柯西和才会有$\lim C = ( \lim A ) ( \lim B ) $.</p>
<h4><span id="无穷乘积">无穷乘积</span></h4><p>对于数列$\{ a _n \} $,设$A _n = \prod _{ k = 1  } ^n a _k $,若$\lim _{ n \to \infty  } A _n $存在且非零,则称$\prod _{ k = 1  } ^{ + \infty  } a _k $收敛.为什么这里要求非零呢?因为我们希望类似无穷和,这里去掉前有限项后,敛散性不变.这就要求我们最好判掉零的情况.如若其极限为$0 $,则仍称其发散,但有的时候发散到零也会有一些性质,到时我们会单独讨论.</p>
<p>既然如此,不妨设$a _n \ne 0 $.有以下性质:</p>
<ol>
<li><p>若$\prod a _n $收敛,则$\lim a _n = 1 $.既然如此,$a _n $从某一项开始就满足$a _n &gt; 0 $.之后不妨干脆设$a _n &gt; 0 $.</p>
</li>
<li><p>$A _n $有非$0 $极限当且仅当$\ln A _n $有极限.</p>
</li>
<li><p>柯西收敛准则:$A _n $有非零极限的必要条件是$\forall \epsilon &gt; 0 , \exists N , \forall N \leq n \leq m $,$| 1 - \prod _{ k = n  } ^m a _k | &lt; \epsilon $.特别地,如果$\forall a _n \ne 0 $,则上式为充要条件.</p>
</li>
</ol>
<p>(1)(2)显然.</p>
<p>(3)的话也比较显然.</p>
<p>总之,既然$\lim a _n \to 1 $,不妨干脆设其为$1 + a _n $,其中$\lim a _n = 0 $,从而原本要研究的$\prod ( 1 + a _n ) $可以转为研究$\sum \ln ( 1 + a _n ) $.</p>
<ol>
<li><p>当$a _n $定号的时候,$\sum \ln ( 1 + a _n ) $和$\sum a _n $的敛散性相同.</p>
</li>
<li><p>当$a _n $不定号的时候,若$\sum a _n ^2 &lt; \infty $,则$\sum \ln ( 1 + a _n ) $和$\sum a _n $的敛散性相同.同理如若$\sum a _n ^2 $发散,则上述两个级数至少一个发散.</p>
</li>
<li><p>$\sum | \ln ( 1 + a _n ) | $和$\sum | a _n | $的敛散性相同.</p>
</li>
</ol>
<p>(1)是因为$\lim \frac { \ln ( 1 + a _n )  } { a _n  } = 1 $.</p>
<p>(2)是因为$a _n - \ln ( 1 + a _n ) $可以被$a _n ^2 $控制住,原因是$a _n \to 0 $,换言之存在$c _1 , c _2 $使得$c _1 x ^2 &lt; a _n - \ln ( 1 + a _n ) &lt; c _2 x ^2 $,只需要对$0 $附近做个简单放缩.既然它们的差收敛,那它们当然敛散性相同.</p>
<p>(3)还是因为$\lim \frac { | \ln ( 1 + x ) |  } { | x |  } = 1 $.</p>
<h6><span id="example1">Example1</span></h6><p>当$| x | &lt; 1 $的时候,求$\prod _{ k = 1  } ( 1 + x ^{ 2 ^{ k - 1  }  } ) $的极限.</p>
<p>容易见到$A _n = \prod _{ k = 1  } ^n ( 1 + x ^{ 2 ^{ k - 1  }  } ) = \frac { 1 - x ^{ 2 ^n  }  } { 1 - x  } $,这样自然就收敛了.</p>
<h6><span id="example2">Example2</span></h6><p>求$\prod _{ k = 1  } \cos \frac { \varphi  } { 2 ^k  } $.</p>
<p>当$\varphi \ne 0 $的时候,考虑$A _n = \prod _{ k = 1  } ^n \cos \frac { \varphi  } { 2 ^k  } = \frac { \sin \varphi  } { 2 ^n \sin \frac { \varphi  } { 2 ^n  }  } $.虽然这里当$\varphi = 2 ^k \pi $的时候会有若干项分母为$0 $,但由于我们可以干脆去掉这前几项,而只看后几项分母均不为$0 $,当然收敛于$\frac { \sin \varphi  } { \varphi  } $.</p>
<p>而$\varphi = 0 $的时候每一项都是$1 $,乘起来仍然收敛.</p>
<h6><span id="example3">Example3</span></h6><p>考虑$\Gamma ( x ) = \frac { 1  } { x  } \prod _{ n = 1  } ^{ \infty  } \frac { ( 1 + \frac { 1  } { n  } ) ^x  } { 1 + \frac { x  } { n  }  } $敛散性,其中$x \ne 0 , - 1 , - 2 , \cdots $.</p>
<p>直接泰勒展开,见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { ( 1 + \frac { 1  } { n  } ) ^x  } { 1 + \frac { x  } { n  }  } \\
& = ( 1 + \frac { x  } { n  } + \frac { x ( x - 1 )  } { 2 n ^2  } + o ( \frac { 1  } { n ^2  } ) ) ( 1 - \frac { x  } { n  } + \frac { x ^2  } { n ^2  } + o ( \frac { 1  } { n ^2  } ) ) \\
& = 1 + \frac { x ( x - 1 )  } { 2 n ^2  } + o ( \frac { 1  } { n ^2  } ) 
\end{aligned}</script><p>这就绝对收敛了.</p>
<p>而我们观察$A _n $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A _n & = \frac { 1  } { x  } \prod _{ k = 1  } ^{ n  } \frac { ( \frac { k + 1  } { k  } ) ^x  } { 1 + \frac { x  } { k  }  } \\
& = \frac { ( n + 1 ) ^x  } { x ( 1 + \frac { x  } { 1  } ) \cdots ( 1 + \frac { x  } { n  } )  } \\
& = ( \frac { n + 1  } { n  } ) ^x \frac { n ! n ^x  } { x ^{ \overline { n + 1  }  }  } \\

\end{aligned}</script><p>于是见到:</p>
<script type="math/tex; mode=display">
\frac { \Gamma ( x + 1 )  } { \Gamma ( x )  } = \lim _{ n \to \infty  } \frac { ( n + 1 ) x  } { x + 1 + n  } = x</script><p>所以$\Gamma ( x + 1 ) = x \Gamma ( x ) $,而且$\Gamma ( 1 ) = 1 $,所以$\Gamma ( n ) = n ! $,这实际上是阶乘函数的一个推广.</p>
<p>而此时有$\Gamma ( x + 1 ) = x \Gamma ( x ) = \prod _{ n = 1  } ^\infty \frac { ( 1 + \frac { 1  } { n  } ) ^x  } { 1 + \frac { x  } { n  }  } $.</p>
<p>而观察这个级数:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\prod _{ n = 1  } ^\infty \frac { e ^{ \frac { 1  } { n  }  }  } { 1 + \frac { 1  } { n  }  } \\
& = \frac { e ^{ 1 + \frac { 1  } { 2  } + \cdots + \frac { 1  } { n  }  }  } { n + 1  } \\
& = \frac { e ^{ \ln n + \gamma + c _n  }  } { n + 1  } \to e ^\gamma 
\end{aligned}</script><p>其中$\gamma $是欧拉常数,误差项$c _n = H _n - \ln n - \gamma \to 0 $.</p>
<p>从而观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
e ^{ \gamma x  } \Gamma ( x + 1 ) \\
& = \prod _{ n = 1  } ^\infty \frac { e ^{ \frac { x  } { n  }  }  } { 1 + \frac { x  } { n  }  } 
\end{aligned}</script><p>从而$\frac { 1  } { \Gamma ( x + 1 )  } = e ^{ \gamma x  } \prod _{ n = 1  } ^\infty ( 1 + \frac { x  } { n  } ) e ^{ - \frac { x  } { n  }  } $.</p>
<p>在此基础上,如若设$b _n = \frac { n ! n ^x  } { x ^{ \overline { n + 1  }  }  } $.容易见到$\lim b _n = \lim A _n = \Gamma ( x ) $,而观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { b _{ n + 1  }  } { b _n  } & = \frac { ( 1 + \frac { 1  } { n  } ) ^{ x + 1  }  } { 1 + \frac { x + 1  } { n  }  } \\
& = 1 + \frac { x ( x + 1 )  } { 2 n ^2  } + o ( \frac { 1  } { n ^2  } ) \\
\to 1 
\end{aligned}</script><p>而且如若$x ( x + 1 ) &gt; 0 $,并且取$n $足够大,则上式大于$1 $,反之上式小于$1 $.因此当$n $足够大的时候$b _n $单调有界(原因是其极限存在).</p>
<p>因此还可以得到结论:$\sum \frac { n ! a _n  } { x ^{ \overline { n + 1  }  }  } $和$\sum \frac { a _n  } { n ^x  } $敛散性相同,其中$x \ne 0 , - 1 , - 2 , \cdots $.原因只是因为这俩的比值恰好是$b _n $单调有界,根据DA判别法知道二者同敛散.</p>
<h6><span id="example4">Example4</span></h6><p>求$\sum _{ n = 1  } ^\infty \frac { ( nx ) ^n  } { n !  } $的收敛性.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\frac { a _{ n + 1  }  } { a _n  } = ( \frac { n + 1  } { n  } ) ^n x \to ex</script><p>根据比值判法,当$| x | &lt; \frac { 1  } { e  } $的时候绝对收敛,而当$| x | &gt; \frac { 1  } { e  } $的时候发散,问题只在于$| x | = \frac { 1  } { e  } $的时候如何.</p>
<p>当$x = \frac { 1  } { e  } $的时候,使用拉贝判法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n ( \frac { a _n  } { a _{ n + 1  }  } - 1 ) & = n ( ( 1 - \frac { 1  } { n + 1  } ) ^n e - 1 ) \\
& = n ( e ^{ n \ln ( 1 - \frac { 1  } { n + 1  } ) + 1  } - 1 ) \\
& = n ( e ^{ n ( - \frac { 1  } { n + 1  } - \frac { 1  } { 2 ( n + 1 ) ^2  } + o ( \frac { 1  } { n ^2  } ) ) + 1  } - 1 ) \\
& = n ( e ^{ \frac { 1  } { n + 1  } - \frac { n  } { 2 ( n + 1 ) ^2  } + o ( \frac { 1  } { n  } )  } - 1 ) \\
& = n ( \frac { 1  } { n + 1  } - \frac { n  } { 2 ( n + 1 ) ^2  } + o ( \frac { 1  } { n  } ) ) \\
\to \frac { 1  } { 2  } & < 1 
\end{aligned}</script><p>所以发散.</p>
<p>当$x = - \frac { 1  } { e  } $的时候,使用DA判法:应当见到$a _n = ( - 1 ) ^n | a _n | $,此时$| a _n | $单调递减且趋于$0 $,用DA判法知道其收敛.</p>
<p>所以条件收敛.</p>
<h6><span id="example5">Example5</span></h6><p>求证$\sum a _n ( x ^2 - 1 ) ( x ^2 - 2 ^2 ) \cdots ( x ^2 - n ^2 ) $对$\forall x \notin \mathbb { Z  } $,其都有相同的敛散性.就是对于一个确定的$\{ a _n \} $,对所有的$x $,要么都收敛,要么都发散.</p>
<p>考虑设$f _n ( x ) = ( x ^2 - 1 ) ( x ^2 - 2 ^2 ) \cdots ( x ^2 - n ^2 ) $,观察到:</p>
<script type="math/tex; mode=display">
\frac { f _n ( x )  } { f _n ( x _0 )  } = \frac { ( x ^2 - 1 ) ( x ^2 - 2 ^2 ) \cdots ( x ^2 - n ^2 )  } { ( x _0 ^2 - 1 ) ( x _0 ^2 - 2 ^2 ) \cdots ( x _0 ^2 - n ^2 )  }</script><p>这当然是个无穷乘积,观察到$\frac { x ^2 - n ^2  } { x _0 ^2 - n ^2  } = 1 + \frac { x ^2 - x _0 ^2  } { x _0 ^2 - n ^2  } = 1 + O ( \frac { 1  } { n ^2  } ) $,所以$\lim _{ n \to \infty  } \frac { f _n ( x )  } { f _n ( x _0 )  } $存在且非零.</p>
<p>而且,当$n $足够大的时候,或者更进一步说$| n | &gt; \max ( | x | , | x _0 | ) $的时候$\frac { f _n ( x )  } { f _n ( x _0 )  } $当然就定号了,而且$\frac { x ^2 - n ^2  } { x _0 ^2 - n ^2  } = 1 + \frac { x ^2 - x _0 ^2  } { x _0 ^2 - n ^2  } $,其与$1 $比较只取决于$x ^2 - x _0 ^2 $,这就意味着$\frac { f _n ( x )  } { f _n ( x _0 )  } $在$n $足够大的时候是单调有界非零的,于是DA判法知道同敛散.</p>
<h6><span id="example6">Example6</span></h6><p>求证$\sin x = x \prod _{ k = 1  } ^{ \infty  } ( 1 - \frac { x ^2  } { k ^2 \pi ^2  } ) $.</p>
<p>先看$\sin x = 0 $的根,假设其根为$u + iv $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin x & = \frac { e ^{ ix  } - e ^{ - ix  }  } { 2 i  } & = 0 \\
e ^{ 2 ix  } & = 1 \\
e ^{ 2 iu - 2 v  } & = 1 \\
| e ^{ 2 iu - 2 v  } | & = 1 \\
e ^{ - 2 v  } & = 1 \\
v & = 0 
\end{aligned}</script><p>所以其只有实根,用多项式理论知道如若$\sin x $的根只有$2 k \pi $,应该有:</p>
<script type="math/tex; mode=display">
\sin x = cx \prod _{ k = 1  } ^{ \infty  } ( 1 - \frac { x ^2  } { k ^2 \pi ^2  } )</script><p>容易见到这个无穷乘积的确收敛,而$x \to 0 $的时候$\frac { \sin x  } { x  } = 1 $,所以$c = 1 $.</p>
<p>那么考虑$\sin x $的泰勒展开,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 - \frac { x ^2  } { 6  } + \cdots & = \prod _{ k = 1  } ( 1 - \frac { x ^2  } { k ^2 \pi ^2  } ) \\
& = 1 - ( \frac { 1  } { \pi ^2  } \sum _k \frac { 1  } { k ^2  } ) x ^2 + \cdots 
\end{aligned}</script><p>这就能知道$\sum _{ k = 1  } ^\infty \frac { 1  } { k ^2  } = \frac { \pi ^2  } { 6  } $.</p>
<p>然而上述的多项式理论还是太过粗糙,下面提供一种更加严谨的证明:</p>
<p>我们有欧拉公式:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \cos x + i \sin x ) ^{ 2 n + 1  } & = \cos ( 2 n + 1 ) x + i \sin ( 2 n + 1 ) x \\

\end{aligned}</script><p>然而左侧可以使用二项式定理展开,有:</p>
<script type="math/tex; mode=display">
( \cos x + i \sin x ) ^{ 2 n + 1  } = \sum \binom { 2 n + 1  } { k  } \cos ^k x ( i \sin x ) ^{ 2 n + 1 - k  }</script><p>容易见到为了贡献虚部,$k $必须是偶数,那此时$\cos ^k x = ( 1 - \sin ^2 x ) ^{ \frac { k  } { 2  }  } $,总之,我们发现应该存在一个$n $次多项式$P _n $,使得:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin ( 2 n + 1 ) x & = ( \sin x ) P _n ( \sin ^2 x ) \\

\end{aligned}</script><p>这个多项式的根应该怎么取呢?考虑当$\varphi _k = \frac { k \pi  } { 2 n + 1  } , 1 \leq k \leq n $的时候,左侧为$0 $,而右侧$\sin \varphi _k $不该为$0 $,更进一步地,$\sin ^2 \varphi _k $两两不同,这就知道它们确实是$P _n $的$n $个根.同时见到$P ( 0 ) = \lim _{ x \to 0  } P _n ( \sin ^2 x ) = 2 n + 1 $,从而我们已经能唯一确定这个有限项多项式$P _n ( x ) = ( 2 n + 1 ) \prod _{ k = 1  } ^n ( 1 - \frac { x  } { \sin ^2 \varphi _k  } ) $.</p>
<p>接下来,将原本上式中的$x $换成$\frac { x  } { 2 n + 1  } $,我们就能得到:</p>
<script type="math/tex; mode=display">
\sin x = ( 2 n + 1 ) \sin ( \frac { x  } { 2 n + 1  } ) \prod _{ k = 1  } ^n ( 1 - \frac { \sin ^2 \frac { x  } { 2 n + 1  }  } { \sin ^2 \varphi _k  } )</script><p>这里已经十分接近我们想要的答案了,但是这个项数和$n $一起增大,策略当然是大小步极限,考虑取:</p>
<script type="math/tex; mode=display">
\begin{aligned}
U _m & = ( 2 n + 1 ) \sin \frac { x  } { 2 n + 1  } \prod _{ k = 1  } ^m ( 1 - \frac { \sin ^2 \frac { x  } { 2 n + 1  }  } { \sin ^2 \varphi _k  } ) \\
V _m & = \prod _{ k = m + 1  } ^n ( 1 - \frac { \sin ^2 \frac { x  } { 2 n + 1  }  } { \sin ^2 \varphi _k  } ) \\

\end{aligned}</script><p>取定$m $,当然总能取足够大的$n $使得$U _m \to x \prod _{ k = 1  } ^m ( 1 - \frac { x ^2  } { k ^2 \pi ^2  } ) $.</p>
<p>而用柯西准则,当$m $足够大的时候,如果能证明$V _m \to 1 $就完事了.我们考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 & \geq V _m & \geq \prod _{ k = m + 1  } ^\infty ( 1 - \frac { \sin ^2 \frac { x  } { 2 n + 1  }  } { \sin ^2 \varphi _k  } ) \\

\end{aligned}</script><p>而回忆到当$\sin ^2 x \leq x ^2 $恒成立,在$x \in [ 0 , \frac { \pi  } { 2  } ] $的时候,$\sin x \geq \frac { 2  } { \pi  } x $也成立,所以:</p>
<script type="math/tex; mode=display">
\begin{aligned}
V _m & \geq \prod _{ k = m + 1  } ^\infty ( 1 - \frac { \sin ^2 \frac { x  } { 2 n + 1  }  } { \sin ^2 \varphi _k  } ) \\
& \geq \prod _{ k = m + 1  } ^\infty ( 1 - \frac { x ^2  } { 4 k ^2  } ) \\

\end{aligned}</script><p>此时回忆到$\prod _{ k = 1  } ^\infty ( 1 - \frac { x ^2  } { 4 k ^2  } ) $是收敛的,所以由柯西准则,当$m $足够大的时候,$\prod _{ k = m + 1  } ^\infty ( 1 - \frac { x ^2  } { 4 k ^2  } ) $趋近于$1 $,这就证毕了.</p>
<h3><span id="函数项数列">函数项数列</span></h3><p>也就是每一项都是一个函数的数列,假设定义域在$I \subseteq \mathbb { R  } $上,写作$\{ f _n ( x ) \} $.此时对于一个固定的$x _0 \in I $,则$\{ f _n ( x _0 ) \} $就是一个普通的数列.当然不一定$I $中的每一个$x _0 $都收敛,我们将<strong>收敛点</strong>的集合称为函数项级数的<strong>收敛域</strong>,其它的点称为<strong>发散点</strong>,发散点组成的集合称为<strong>发散域</strong>.</p>
<p>对于收敛域,直接记$f ( x ) = \lim _{ n \to \infty  } f _n ( x ) $,我们将这里的$f ( x ) $就是这个函数列的<strong>极限函数</strong>.既然有了极限就可以定义级数,也就是可以定义$S _n = \sum _{ k = 1  } ^n f _k ( x ) $,然后取其极限拿到$\sum _{ k = 1  } ^\infty f _n ( x ) = S ( x ) $.</p>
<p>我们要解决的问题大概有以下三个:</p>
<ol>
<li><p>如果$f _n $均是连续的,那么要求什么条件,可以满足$f $连续.也就是两层极限什么时候可以交换顺序.</p>
</li>
<li><p>如果$f _n $均是黎曼可积的,那么要求什么条件,可以满足$f $黎曼可积并且$\lim \int f _n = \int f $,也就是极限和积分什么时候可以交换顺序.</p>
</li>
<li><p>如果$f _n $均可导,那么什么时候$f $也可导,并且$\lim f _n ‘ = f ‘ $,也就是极限和导数什么时候可以交换顺序.</p>
</li>
</ol>
<p>如果不加条件,上述三条全都是不满足的,下述Example会给出若干例子.</p>
<h6><span id="example1">Example1</span></h6><p>取$f _n ( x ) = x ^n , x \in [ 0 , 1 ] $,求其极限函数.</p>
<p>显然$f ( x ) = \begin{cases}1 &amp; x = 1 \ 0 &amp; \text { otherwise  } \end{cases} $,由此可以见到,连续函数的极限函数不一定连续.</p>
<h6><span id="example2">Example2</span></h6><p>取$f _n ( x ) = \begin{cases}1 &amp; ( n ! ) x \in \mathbb { Z  } \ 0 &amp; \text { otherwise  } \end{cases} $,求其极限函数.</p>
<p>显然是迪利克雷函数.</p>
<p>则$f _n ( x ) $只有有限个间断点,容易见到其黎曼可积,然而迪利克雷函数并不黎曼可积.可积函数的极限函数不一定可积.</p>
<h6><span id="example3">Example3</span></h6><p>取$f _n ( x ) = nx ( 1 - x ^2 ) ^n , x \in [ 0 , 1 ] $,求其极限函数.</p>
<p>容易见到$\lim f _n ( x ) = 0 $,也就是这个函数处处收敛到$0 $.</p>
<p>然而,对其求积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^1 f _n ( x ) \mathrm { d  } x & = \int _0 ^1 nx ( 1 - x ^2 ) ^n \mathrm { d  } x \\
& = - \frac { n  } { 2  } \int _0 ^1 ( 1 - x ^2 ) ^n \mathrm { d  } ( 1 - x ^2 ) \\
& = - \frac { n  } { 2 ( n + 1 )  } ( 1 - x ^2 ) ^{ n + 1  } | _0 ^1 \\
& = \frac { n  } { 2 ( n + 1 )  } \to \frac { 1  } { 2  } 
\end{aligned}</script><p>由此见到,极限函数的积分不一定等于积分的极限.极限和积分不一定可交换.</p>
<h6><span id="example4">Example4</span></h6><p>考虑$f _n ( x ) = \begin{cases}2 n ^2 x \ x \in [ 0 , \frac { 1  } { 2 n  } ] \ 2 n ^2 ( x - \frac { 1  } { n  } ) &amp; x \in ( \frac { 1  } { 2 n  } , \frac { 1  } { n  } ] \ 0 &amp; \text { otherwise  } \end{cases} $,也就是这个函数在$\frac { 1  } { 2 n  } $处高度为$n $,底长为$\frac { 1  } { n  } $的一个小三角形.求其极限函数.</p>
<p>对于每一个点,这个函数当然逐点收敛于$0 $.然而也可以见到,这个函数的积分对于每一个$n $来说都是$\frac { 1  } { 2  } $.</p>
<p>再次说明了极限函数的积分不一定等于积分的极限.极限和积分不一定可交换.</p>
<h6><span id="example5">Example5</span></h6><p>考虑$f _n ( x ) = \frac { \sin ( nx )  } { \sqrt { n  }  } $,求其极限函数.</p>
<p>当然逐点收敛于$0 $,然而观察到$f _n ‘ ( x ) = \sqrt { n  } \cos nx $,$f ‘ ( x ) = 0 $.因此,光滑函数列的导数的极限又不一定等于极限的导数.</p>
<h4><span id="一致收敛">一致收敛</span></h4><p>我们称一列函数$\{ f _n ( x ) \} $是<strong>一致收敛</strong>到$f ( x ) $,当且仅当$\forall \epsilon &gt; 0 $,$\exists N = N ( \epsilon ) $,使得当$n \geq N $的时候,$| f ( x ) - f _n ( x ) | &lt; \epsilon , \forall x \in I $.注意这里的$N $不取决于$x $的选取,这就是和极限不同的地方,一致收敛要求整个函数都在逐步地贴向最终的函数.此时,记$f _n ( x ) \rightrightarrows f ( x ) $.还可以定义<strong>内闭一致收敛</strong>的概念,也就是对于一个$I $的任意的子紧集(在$\mathbb { R  } $上表现为有界闭集)都一致收敛.</p>
<p>一致收敛的等价定义当然是,取$M _n = \sup _{ x \in I  } | f _n ( x ) - f ( x ) | $,那么一致收敛等价于$\lim M _n = 0 $.</p>
<p>一致收敛强大的地方在于,对于收敛来说,是取定了$x $再挪动$n $,因此$n $可以控制$x $.然而,一致收敛要求先取定$n $再挪动$x $.这种天然的交换能力赋予了一致收敛的强大.另外还容易见到,当$I $的点集是有限的时候,一定一致收敛.</p>
<p>我们还可以定义<strong>一致有界</strong>的概念,当存在一个上界$M $,使得$\forall n , | f _n | \leq M $恒成立.显然,如果一个函数列一致有界,则极限函数肯定有界.</p>
<p>另外,我们可以见到,如果$f _n \rightrightarrows f $,那么如果$f $有界,则$f _n $一致有界.反之,如果$f _n $有界,则$f _n $一致有界.</p>
<p>考虑前者,是因为:</p>
<script type="math/tex; mode=display">
| f _n | \leq | f _n - f | + | f |</script><p>这俩当然是有界的.</p>
<p>对于后者,考虑反证,假设$f $无界(因为如果有界则前者即可推出),那么:</p>
<script type="math/tex; mode=display">
| f | \leq | f - f _n | + | f _n |</script><p>由于$| f - f _n | $必然需要有界,因此前者无界,后者无论对于哪个$n $来说,必然也得无界.</p>
<p>我们有以下性质:</p>
<ol>
<li><p>$f _n \rightrightarrows f , g _n \rightrightarrows g , x \in I $,则$c _1 f _n + c _2 g _n \rightrightarrows c _1 f + c _2 g , x \in I $.</p>
</li>
<li><p>$f _n \rightrightarrows f , g _n \rightrightarrows g , x \in I $,而且$f , g $有界,则$f _n g _n \rightrightarrows fg , x \in I $.</p>
</li>
<li><p>如果$x \in I $的时候$f _n \rightrightarrows f $,$x \in J $的时候也$f _n \rightrightarrows f $,则当$x \in I \cup J $的时候也有$f _n \rightrightarrows f $.</p>
</li>
</ol>
<p>对于(1),考虑令$M _{ n  } = \sup | f _n - f | , K _n = \sup | g _n - g | $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| ( c _1 f _n + c _2 g _n ) - ( c _1 f + c _2 g ) | \\
& \leq | c _1 | M _n + | c _2 | K _n \to 0 
\end{aligned}</script><p>立刻证毕.</p>
<p>对于(2),经典的做法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n g _n - fg | \\
& = | f _n ( g _n - g ) + g ( f _n - f ) | \\
& \leq | f _n | \cdot | g _n - g | + | g | \cdot | f _n - f | 
\end{aligned}</script><p>而$| f _n | $一致有界,$| g _n | $一致有界得到$| g | $有界,所以上式就被控制住了.</p>
<p>对于(3),只需要把两部分的$\sup $分开算就可以见到仍能被控制住.</p>
<p>这里也有<strong>柯西准则</strong>:对于一列函数$\{ f _n \} $,其一致收敛的充要条件是,$\forall \epsilon &gt; 0 , \exists N , \forall n , m \geq N , | f _n ( x ) - f _m ( x ) | &lt; \epsilon $.</p>
<p>必要性显然,只证充分性,对于此时固定一个确定的$x $,那么$\{ f _n ( x ) \} $就是一个柯西列且存在极限.逐点取极限就可以拿到$f ( x ) = \lim _{ n \to \infty  } f _n ( x ) $.而$| f _n ( x ) - f _m ( x ) | &lt; \epsilon $中只需要让$m \to \infty $就拿到了$| f _n ( x ) - f ( x ) | \leq \epsilon $,这恰好是一致收敛的定义.</p>
<h6><span id="example1">Example1</span></h6><p>求证:$f _n ( x ) = \frac { x  } { 1 + n ^2 x ^2  } $一致收敛.</p>
<p>当然处处收敛于$0 $了,考虑用均值不等式,有$| f _n ( x ) | \leq \frac { | x |  } { 2 n | x |  } = \frac { 1  } { 2 n  } $,这就搞定.</p>
<h6><span id="example2">Example2</span></h6><p>求证:$f _n ( x ) = x ^n , x \in [ 0 , 1 ) $并不一致收敛.</p>
<p>当然处处收敛到$0 $,但是$\sup f _n ( x ) = 1 $,所以并不一致收敛.</p>
<h6><span id="example3">Example3</span></h6><p>取$f _n ( x ) = \frac { 1  } { n  } , g _n ( x ) = x , x \in ( 0 , + \infty ) $,容易见到$f _n \rightrightarrows 0 , g _n \rightrightarrows x $.而且$f _n ( x ) $当然一致有界.然而,$f _n g _n \not \rightrightarrows 0 $.</p>
<h6><span id="example4">Example4</span></h6><p>当$g \in C [ 0 , 1 ] , g ( 1 ) = 0 $,求证:$f _n ( x ) = g ( x ) x ^n \rightrightarrows 0 $.</p>
<p>由于$g $在闭区间上连续,则其必然在闭区间上一致连续.因此$\forall \epsilon &gt; 0 $,取$\delta \in ( 0 , 1 ) $,使得$x \in [ \delta , 1 ] $的时候,$| g ( x ) | &lt; \epsilon $,而取$M = \sup _{ [ 0 , 1 ]  } | g | $,那么$| f _n ( x ) | \leq M \delta ^n + \epsilon $,注意这里的$\delta $不取决于$n $的选取这就搞定.</p>
<h6><span id="example5">Example5</span></h6><p>设$f _n ( x ) = n \left ( \sqrt { x + \frac { 1  } { n  }  } - \sqrt { x  } \right ) , x \in ( 0 , + \infty ) $,判断其收敛性.</p>
<p>容易发现$f _n ( x ) = \frac { 1  } { \sqrt { x + \frac { 1  } { n  }  } + \sqrt { x  }  } \to \frac { 1  } { 2 \sqrt { x  }  } $,因此其收敛.问题在于判断其是否一致收敛.</p>
<p>观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ( x ) - \frac { 1  } { 2 \sqrt { x  }  } | \\
& = \frac { \sqrt { x + \frac { 1  } { n  }  } - \sqrt { x  }  } { 2 \sqrt { x  } \left ( \sqrt { x + \frac { 1  } { n  }  } + \sqrt { x  } \right )  } \\
& = \frac { 1  } { 2 n \sqrt { x  } \left ( \sqrt { x + \frac { 1  } { n  }  } + \sqrt { x  } \right ) ^2  } 
\end{aligned}</script><p>一个策略是直接对此式子求导,但也可以采取另一种分析策略,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sqrt { x + \frac { 1  } { n  }  } & = \sqrt { x  } \left ( 1 + \frac { 1  } { nx  } \right ) ^{ \frac { 1  } { 2  }  } \\
& = \sqrt { x  } \left ( 1 + \frac { 1  } { 2 nx  } + O ( \frac { 1  } { n ^2  } ) \right ) 
\end{aligned}</script><p>所以当$x $足够小的时候可能会出问题,直接取$x = \frac { 1  } { n  } $,误差为:</p>
<script type="math/tex; mode=display">
\frac { 1  } { 2 \sqrt { n  } \left ( \frac { 1 + \sqrt { 2  }  } { \sqrt { n  }  } \right ) ^2  } = O ( \sqrt { n  } )</script><p>这就证明了并非一致收敛.</p>
<h6><span id="example6">Example6</span></h6><p>$[ 0 , 1 ] $上的$f _n ( x ) $满足$\exists L &gt; 0 , \forall x \ne y , | f _n ( x ) - f _n ( y ) | \leq L | x - y | $.并且$\forall x \in [ 0 , 1 ] , f _n ( x ) \to f ( x ) $.求证:$f _n ( x ) \rightrightarrows f ( x ) $.也就是:一致李氏连续的收敛函数列一定一致收敛.</p>
<p>李氏连续意味着我们可以用控制自变量的方式控制因变量.回忆到定义在有限集上的收敛函数列一定是一致收敛的.因此我们选择在数轴上打足够密的点来控制.</p>
<p>具体地,$\forall \epsilon &gt; 0 $,我们将$[ 0 , 1 ] $拆为长度不超过$\frac { \epsilon  } { 3 L  } $的小区间.假设分点是$x _1 , \cdots , x _K $.这当然对于一个$\epsilon $来说是有限个点,我们可以让它们同时趋近于一致收敛,用柯西准则,也就是拿到一个$N $,使得$\forall n , m \geq N $,$| f _n ( x _i ) - f _m ( x _i ) | &lt; \frac { \epsilon  } { 3  } $.</p>
<p>现在$\forall x \in [ 0 , 1 ] , \exists x _i , | x - x _i | &lt; \frac { \epsilon  } { 3 L  } $.于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ( x ) - f _m ( x ) | \\
& \leq | f _n ( x ) - f _n ( x _i ) | + | f _n ( x _i ) - f _m ( x _i ) | + | f _m ( x _i ) - f _m ( x ) | \\
& < \epsilon 
\end{aligned}</script><p>这就搞定.</p>
<h4><span id="函数项级数">函数项级数</span></h4><p>函数项级数上也有柯西准则,也就是函数项级数的一致收敛性等价于$\forall \epsilon , \exists N , \forall n , m \geq N , | \sum _{ k = n  } ^m f _k ( x ) | &lt; \epsilon , \forall x \in I $.</p>
<p>还可以在这里定义<strong>绝对收敛</strong>:也就是$\sum | f _n ( x ) | $收敛.当然仍有绝对收敛推收敛.如果$\sum | f _n ( x ) | $还一致收敛,则称原级数<strong>绝对一致收敛</strong>.注意,这里的绝对一致收敛是定义在$| f _n | $的基础上.也就是说,一个函数既绝对收敛,又一致收敛,但它可能并不绝对一致收敛.然而反之是成立的,如果一个函数绝对一致收敛,可以推出它一致收敛,原因是$\sum | f _n | \geq | \sum f _n | $,用柯西准则就可以得知.</p>
<p>另外,用柯西准则可以见到如果$\sum f _n \rightrightarrows f $,那么$f _n ( x ) \rightrightarrows 0 $.</p>
<h6><span id="example1">Example1</span></h6><p>考虑函数项级数$\sum ( - x ) ^n ( 1 - x ) , x \in [ 0 , 1 ] $.</p>
<p>直接考虑其余项,$R _n ( x ) = \sum _{ k = n + 1  } ^\infty ( - x ) ^k ( 1 - x ) = \frac { ( - x ) ^{ n + 1  } ( 1 - x )  } { 1 + x  } $.此时考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| R _n | & \leq x ^{ n + 1  } ( 1 - x ) \\
& = \frac { 1  } { n + 1  } ( n + 1 ) ( 1 - x ) x ^{ n + 1  } \\
& \leq \frac { 1  } { n + 1  } ( \frac { n + 1  } { n + 2  } ) ^{ n + 2  } \\
& \leq \frac { 1  } { n + 1  } \to 0 
\end{aligned}</script><p>所以该级数一致收敛.</p>
<p>那么是否绝对收敛呢?考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 1  } ^n | ( - x ) ^n ( 1 - x ) | \\
& = \sum _{ k = 1  } ^n ( x ^k - x ^{ k + 1  } ) \\
& = x - x ^{ n + 1  } 
\end{aligned}</script><p>所以当然也绝对收敛到$\begin{cases}x &amp; x \in [ 0 , 1 ) \ 0 &amp; x = 1 \end{cases} $.</p>
<p>可是,它并不是绝对一致收敛的.考虑$\sup _{ [ 0 , 1 )  } | S ( x ) - S _n ( x ) | = \sup _{ [ 0 , 1 )  } | x ^{ n + 1  } | = 1 $.</p>
<h6><span id="example2">Example2</span></h6><p>求$\sum \left ( \cos \frac { \pi x  } { n  } \right ) ^{ n ^3  } $的收敛域.</p>
<p>不妨设$u _n ( x ) = \left ( \cos \frac { \pi x  } { n  } \right ) ^{ n ^3  } $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sqrt [n ] { u _n ( x )  } & = \left ( \cos \frac { \pi x  } { n  } \right ) ^{ n ^2  } \\
& = \left ( 1 - \frac { \pi ^2 x ^2  } { 2 n ^2  } + O ( \frac { 1  } { n ^4  } ) \right ) ^{ n ^2  } \\
& = \exp ( n ^2 \ln \left ( 1 - \frac { \pi ^2 x ^2  } { 2 n ^2  } + O ( \frac { 1  } { n ^4  } ) \right ) ) \\
& = \exp ( n ^2 \left ( - \frac { \pi ^2 x ^2  } { 2 n ^2  } + O ( \frac { 1  } { n ^4  } ) \right ) ) \\
& = \exp ( - \frac { \pi ^2 x ^2  } { 2  } + O ( \frac { 1  } { n ^2  } ) ) \\
\to e ^{ - \frac { \pi ^2 x ^2  } { 2  }  } 
\end{aligned}</script><p>所以最后模拟成了一个等比数列,那收敛域就是$\mathbb { R  } \setminus \{ 0 \} $.</p>
<h5><span id="m判别法">M判别法</span></h5><p>若$| f _n ( x ) | \leq a _n , x \in I $,如果$\sum a _n &lt; \infty $,则$\sum f _n ( x ) $绝对一致收敛.</p>
<p>证明的话,考虑用一般级数可以拿到$\forall \epsilon &gt; 0 , \exists N , \forall n , m \geq N , \sum _{ k = n  } ^m | a _n | &lt; \epsilon $,但又有$\forall x \in I , \sum _{ k = n  } ^m | f _n ( x ) | \leq \sum _{ k = n  } ^m a _k $,这就知道其绝对一致收敛.</p>
<h5><span id="da判别法">DA判别法</span></h5><p>假设$\{ a _n ( x ) \} , \{ b _n ( x ) \} $是两个函数列.对于任意固定的$x \in I $,$\{ a _n ( x ) \} $是一个单调数列.注意这里其实不要求大家都递增或递减,只要对于每一个点都是单调的.而取$B _n ( x ) = \sum _{ k = 1  } ^n b _k ( x ) $.则当:</p>
<ol>
<li><p>Dirichlet判别法:当$a _n ( x ) \rightrightarrows 0 $,$B _n ( x ) $一致有界时,则$\sum a _n b _n $一致收敛.</p>
</li>
<li><p>Able判别法:当$\{ a _n ( x ) \} $一致有界,$B _n ( x ) $一致收敛时,则$\sum a _n b _n $一致收敛.</p>
</li>
</ol>
<p>证明和级数部分完全一样,只需要对于任意的$x $都这么搞即可:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = n + 1  } ^{ n + p  } a _k ( x ) b _k ( x ) | \\
& = | \sum _{ k = n + 1  } ^{ n + p  } a _k ( x ) ( B _{ k  } ( x ) - B _{ k - 1  } ( x ) ) | \\
& = | a _{ n + p  } B _{ n + p  } ( x ) + \sum _{ k = n + 1  } ^{ n + p - 1  } ( a _k ( x ) - a _{ k + 1  } ( x ) ) B _k ( x ) | \\
& \leq M ( a _{ n + 1  } ( x ) + 2 a _{ n + p  } ( x ) ) 
\end{aligned}</script><p>其中$M = \sup _{ 1 \leq i \leq p  } \{ | \sum _{ k = n + 1  } ^{ n + i  } b _k ( x ) | \} $.</p>
<h6><span id="example1">Example1</span></h6><p>当$b _n $单调下降趋近于$0 $的时候,求证:$\sum _{ k = 1  } ^\infty b _n \sin ( nx ) , x \in \mathbb { R  } $一致收敛的充要条件是$b _n = o ( \frac { 1  } { n  } ) $.</p>
<p>先证必要性,设$S _{ n , p  } = \sum _{ k = n  } ^p b _k \sin ( kx ) $.由柯西原理,$\forall \epsilon &gt; 0 , \exists N , \forall n , p \geq N , | S _{ n , p  } | &lt; \epsilon $.此时取$p = 2 n - 1 , x = \frac { \pi  } { 4 n  } $,此时当$n \leq k \leq p $的时候,$\sin ( k \pi ) &gt; \sin \frac { \pi  } { 4  } $,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\epsilon & > | S _{ n , p  } ( x ) | \\
& > nb _{ 2 n  } \sin \frac { \pi  } { 4  } & = \frac { \sqrt { 2  }  } { 2  } n b _{ 2 n  } 
\end{aligned}</script><p>这就搞定了$b _{ 2 n  } = o ( \frac { 1  } { n  } ) $,又因为$b _n $是单调下降的,那当然搞定了.</p>
<p>再证充分性,只要证明在$[ 0 , \pi ] $上一致收敛,由于$\sin ( nx ) $是奇函数,那么在$[ - \pi , 0 ] $上当然也一致收敛,那就搞定了.</p>
<p>设$\mu _n = \max _{ m \geq n  } { mb _m  } $,注意到$\mu _n $单调下降趋近于$0 $.下面开始讨论:</p>
<p>当$x \in [ 0 , \frac { \pi  } { p  } ] $的时候,此时$S _{ n , p  } $中的每一项都同号.自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = n  } ^p b _k \sin ( kx ) & \leq \sum _{ k = n  } ^p b _k kx \\
& \leq \frac { \pi  } { p  } \sum _{ k = n  } ^p b _k k \\
& \leq \frac { \pi  } { p  } ( p - n ) \mu _n \\
& \leq \pi \mu _n 
\end{aligned}</script><p>这就完事.</p>
<p>当$x \in [ \frac { \pi  } { n  } , \pi ] $的时候,和差化积公式给出:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = 1  } ^n \sin ( kx ) | \\
& = \left | \frac { \cos ( k - \frac { 1  } { 2  } ) x - \cos ( k + \frac { 1  } { 2  } )  } { 2 \sin \frac { x  } { 2  }  } \right | \\
& \leq \frac { 1  } { | \sin \frac { x  } { 2  } |  } \\
& < n 
\end{aligned}</script><p>原因是当$\frac { x  } { 2  } \leq \frac { \pi  } { 2  } $的时候,$\sin \frac { x  } { 2  } \geq \frac { 2  } { \pi  } \frac { x  } { 2  } \geq n $.</p>
<p>回忆到Abel变换给出$| S _{ n , p  } | \leq n ( 2 b _n + b _p ) &lt; 3 nb _n \to 0 $.这就搞定.</p>
<p>当$x \in ( \frac { \pi  } { p  } , \frac { \pi  } { n  } ) $的时候,取$m = \lfloor \frac { \pi  } { x  } \rfloor \leq \frac { \pi  } { x  } $.那我们就有:$\frac { \pi  } { m + 1  } \leq x \leq \frac { \pi  } { m  } $.</p>
<p>当$k \in [ n , m ] $的时候,$kx \leq \pi $,那$\sin ( kx ) \leq kx $就成立,那么和上面一样:</p>
<script type="math/tex; mode=display">
| S _{ n , m  } | \leq \pi \mu _n</script><p>当$k \in [ m + 1 , p ] $的时候,此时$\frac { 1  } { | \sin \frac { x  } { 2  } |  } \geq \frac { 1  } { m + 1  } $,因此:</p>
<script type="math/tex; mode=display">
| S _{ m + 1 , p  } | \leq ( m + 1 ) ( 2 b _{ m + 1  } + b _p ) < 3 \mu _{ m + 1  }</script><p>则:</p>
<script type="math/tex; mode=display">
| S _{ n , p  } | \leq | S _{ n , m  } | + | S _{ m + 1 , p  } | < \pi \mu _n + 3 \mu _{ m + 1  }</script><p>这就搞定.</p>
<h4><span id="连续性">连续性</span></h4><p>我们还可以定义<strong>等度连续</strong>的概念:我们说$f _n $等度连续,当$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 $,使得$\forall x , y $,若$| x - y | &lt; \delta $,则$\forall n , | f _n ( x ) - f _n ( y ) | &lt; \epsilon $.其实就是某种一致(函数列)的一致(定义域上)连续.</p>
<p>我们可以证明:如果$f _n ( x ) \in C [ a , b ] $,而且其等度连续,则如果$\lim _{ n \to \infty  } f _n ( x ) = f ( x ) , x \in [ a , b ] $,则$f _n \rightrightarrows f , x \in [ a , b ] $.</p>
<p>证明与前述Example6证明一致李氏连续类似,事实上Example6是这个的一个推论.我们取定$\delta $,使得$| x - y | &lt; \delta $时一定有$\forall n , | f _n ( x ) - f _n ( y ) | &lt; \frac { \epsilon  } { 3  } $,此时再令$n \to \infty $,就有$| f ( x ) - f ( y ) | \leq \frac { \epsilon  } { 3  } $,再取一个分划$\Delta : a = x _0 &lt; \cdots &lt; x _m = b $并要求$\lambda ( \Delta ) &lt; \delta $.</p>
<p>自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ( x ) - f ( x ) | & \leq | f _n ( x ) - f _n ( x _i ) | + | f _n ( x _i ) - f ( x _i ) | + | f ( x _i ) - f ( x ) | \\
& \leq \epsilon 
\end{aligned}</script><p>原因仍是有限点集上的收敛一定是一致收敛.</p>
<p>下面要探索的就是一致连续是否保持了原函数项级数的作用.</p>
<p>先看一个引理:当$x _0 \in [ a , b ] $的时候,如若当$x \in [ a , b ] \setminus \{ x _0 \} $,$f _n ( x ) \rightrightarrows f ( x ) $,已知$\lim _{ x \to x _0  } f _n ( x ) = \alpha _n $存在.则$\lim _{ n \to \infty  } \alpha _n $存在而且$\lim _{ x \to x _0  } f ( x ) = \lim _{ n \to \infty  } \alpha _n $.换言之,$\lim _{ x \to x _0  } \lim _{ n \to \infty  } f _n ( x ) = \lim _{ n \to \infty  } \lim _{ x \to x _0  } f _n ( x ) $.</p>
<p>证明的话,首先要证明$\lim _{ n \to \infty  } \alpha _n $存在,考虑$\forall \epsilon &gt; 0 , \exists N , \forall n , m \geq N $,有$| f _n ( x ) - f _m ( x ) | &lt; \frac { \epsilon  } { 3  } $,取极限知道$| \alpha _n - \alpha _m | \leq \frac { \epsilon  } { 3  } $,这说明$\{ \alpha _n \} $是柯西列,当然收敛.不妨设$\alpha = \lim _{ n \to \infty  } \alpha _n $.</p>
<p>此时有:</p>
<script type="math/tex; mode=display">
| f ( x ) - \alpha | \leq | f ( x ) - f _N ( x ) | + | f _N ( x ) - \alpha _N | + | \alpha _N - \alpha |</script><p>两边一取极限使得$x \to x _0 $,立刻见到$| f ( x ) - \alpha | &lt; \epsilon $.这已经能看出一致连续的强大了.正是因为一致连续可以先固定$N $,我们才可以在这里对$x \to x _0 $取极限.所以这里有一个天然的可交换性.</p>
<p>这个引理的一个推论是:如果$f _n \rightrightarrows f , x \in [ a , b ] $,则对于$x _0 \in [ a , b ] $,如果$f _n ( x ) $在$x _0 $处连续,则$f $也在$x _0 $处连续.原因是既然连续,则$\alpha _n = \lim _{ x \to x _0  } f _n ( x ) = f _n ( x _0 ) $,所以$\lim _{ x \to x _0  } f ( x ) = \lim _{ n \to \infty  } f _n ( x _0 ) = f ( x _0 ) $.这就说明在$x _0 $处连续.更有推论:如果$f _n \in C [ a , b ] , f _n \rightrightarrows f $,则$f \in C [ a , b ] $.从而还可以见到,如果一串连续函数收敛到一个不连续函数,那这肯定也不是一致收敛的.</p>
<p>那么反过来,如果连续函数列收敛到连续函数,能不能推出一致收敛呢?我们事实上有<strong>迪尼定理</strong>:如果$f _n ( x ) \in C [ a , b ] $,当$n &lt; m $的时候,$\forall x \in [ a , b ] , f _n ( x ) \leq f _m ( x ) $,此时如若$f _n \rightarrow f $,而且$f \in C [ a , b ] $,则$f _n \rightrightarrows f $.也就是只要有一定的单调性,我们就可以说一致连续是连续函数列收敛到连续函数的充要条件.</p>
<p>取$R _n ( x ) = f ( x ) - f _n ( x ) \geq 0 $,注意到$\lim _{ n \to \infty  } R ( x ) = 0 $而且$R _n ( x ) $连续且逐点随$n $单调递减,则必有$R _n \to 0 $.如果我们能证明$R _n ( x ) \rightrightarrows 0 $,那就万事大吉.不妨设$M _n = \max _{ x \in [ a , b ]  } R _n ( x ) = R _n ( x _n ) $,那么只要证明$M _n \to 0 $就可以搞定一致收敛.然而$M _n $本身是单调下降的.反证,如果$\lim _{ n \to \infty  } M _n = c &gt; 0 $,此时观察$x _n \in [ a , b ] $,既然如此,$\{ x _n \} $必定有收敛子列,任取一个收敛子列$\{ x _{ n _k  } \} $并假设其收敛到$x _0 $,接下来看:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lim _{ m \to \infty  } R _m ( x _0 ) \\
& = \lim _{ m \to \infty  } \lim _{ x _{ n _k  } \to x _0  } R _m ( x _{ n _k  } ) \\
& \geq \lim _{ m \to \infty  } \lim _{ n _k > m , x _{ n _k  } \to x _0  } R _{ n _k  } ( x _{ n _k  } ) \\
& = \lim _{ x _{ n _k  } \to x _0  } R _{ n _k  } ( x _{ n _k  } ) & > 0 
\end{aligned}</script><p>可这就出事了.于是矛盾,反证成立.</p>
<p>迪尼定理的一个推论是如果$f _n ( x ) \geq 0 $,那么此时$S _n ( x ) = \sum _k ^n f ( x ) $就是逐点单调的了.因此我们可以看到此时$\sum f _n $一致收敛性也就等价于其连续性.</p>
<h6><span id="example1">Example1</span></h6><p>考虑$f _n \geq 0 $,而且$\forall n , f _n $单增的时候,如若$\sum f _n ( x ) \leq M , \forall x \in [ a , b ) $.求证此时$\lim _{ x \to b - 0  } \sum _{ n = 1  } ^\infty f _n ( x ) = \sum _{ n = 1  } ^\infty f _n ( b - 0 ) $.</p>
<p>设$S _n = \sum _k ^n f _k ( x ) $,取定$m $,此时$\forall x \in [ a , b ) $,$S ( x ) \geq S _m ( x ) $.令$x \to b - 0 $,自然有$\sum _{ n = 1  } ^m f _n ( b - 0 ) \leq \lim _{ x \to b - 0  } S ( x ) $.直接令$S ( b - 0 ) = \lim _{ x \to b - 0  } S ( x ) $,这个极限存在,原因是$S ( x ) $是单调的.从而取极限得到$\sum _{ n = 1  } ^\infty f _n ( b - 0 ) \leq S ( b - 0 ) $.</p>
<p>接下来另一个方向,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^m f _n ( x ) & \leq \sum _{ n = 1  } ^m f _n ( b - 0 ) & \leq \sum _{ n = 1  } ^\infty f _n ( b - 0 ) \\
S ( x ) & \leq \sum _{ n = 1  } ^\infty f _n ( b - 0 ) \\
S ( b - 0 ) & \leq \sum _{ n = 1  } ^\infty f _n ( b - 0 ) 
\end{aligned}</script><p>这就搞定.</p>
<h6><span id="example2">Example2</span></h6><p>$f _n $在$[ a , b ] $上可微而且$f _n ‘ \in R [ a , b ] $,若$\forall x \in [ a , b ] , \forall n , | \sum _{ k = 1  } ^n f _k ‘ ( x ) | \leq M $,$\sum f _n ( x ) $在$[ a , b ] $上收敛.求证其在$[ a , b ] $上一致收敛.</p>
<p>容易观察到$\sum f _n ( x ) $一致李氏连续,用之前等度连续的结论就可以做掉.</p>
<h4><span id="可积性">可积性</span></h4><p>如果$f _n \in R [ a , b ] , f _n \rightrightarrows f $,则我们声明$f \in R [ a , b ] $且$\int _a ^b f \mathrm { d  } x = \lim _{ n \to \infty  } \int _a ^b f _n \mathrm { d  } x $.</p>
<p>考虑证明,首先$f _n $是有界的,又因为一致收敛,所以能推出$f $也是有界的.</p>
<p>一个想法是使用勒贝格定理.直接取$K _n $是$f _n $的间断点集,立刻得到$K _n $是零测集.接下来令$K = \bigcup K _n $,那$K $还是零测集(可数个零测集的并),此时对于$\forall x \in [ a , b ] \setminus K $,$\forall n , f _n $都在$x $处连续,那$f $肯定也在$x $处连续,所以$f $的间断点集就一定被包含于零测集$K $,所以黎曼可积.</p>
<p>接下来的问题是是否积分相等,取$M _n = \sup _{ [ a , b ]  } | f - f _n | $,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _a ^b f \mathrm { d  } x - \int _a ^b f _n \mathrm { d  } x | \\
& \leq \int _a ^b | f - f _n | \mathrm { d  } x \\
& \leq \int _a ^b M _n \mathrm { d  } x \\
& = M _n ( b - a ) \to 0 
\end{aligned}</script><p>这就搞定.然而注意到这里需要依赖于$b - a $的有界性.</p>
<p>另一个策略是直接用分划达布和证明$f \in R [ a , b ] $.不妨设$| f _n | \leq M , | f | \leq M $.则$\forall \epsilon &gt; 0 , \exists n $,$| f _n ( x ) - f ( x ) | &lt; \epsilon $.由于$f _n ( x ) \in R [ a , b ] $,可以取定分划$\Delta : a = x _0 &lt; \cdots &lt; x _p = b $,使得$\sum ( M _i - m _i ) \Delta x _i &lt; \epsilon $.</p>
<p>于此,我们取$\bar { M  } _i = \sup _{ [ x _{ i - 1  } , x _i ]  } f ( x ) , \bar { m  } _i $同理.观察到$\forall x \in [ x _{ i - 1  } , x _i ] , f ( x ) \leq f _n ( x ) + \epsilon \leq M _i + \epsilon $,所以一定有$\bar { M  } _i \leq M _i + \epsilon $.对于$\bar { m  } _i $同理.此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum ( \bar { M  } _i - \bar { m  } _i ) \Delta x _i \\
& \leq \sum ( M _i - m _i ) \Delta x _i + 2 \epsilon ( b - a ) \\
& \leq \epsilon ( 1 + 2 ( b - a ) ) 
\end{aligned}</script><p>这就搞定.</p>
<p>事实上这个结论可以更强,可以放弃一致收敛的条件.我们有<strong>控制收敛定理</strong>:假设$f _n \in R [ a , b ] $,而且它们一致有界,$\forall n , \forall x \in [ a , b ] , | f _n | \leq M $.并且$f ( x ) = \lim _{ n \to \infty  } f _n ( x ) \in R [ a , b ] $,则$\int _a ^b f ( x ) \mathrm { d  } x = \lim _{ n \to \infty  } \int _a ^b f _n ( x ) \mathrm { d  } x $.</p>
<p>为证明此,先引入一些相关的定义:</p>
<p>定义<strong>阶梯函数</strong>为分段常值函数,假设$f \in R [ a , b ] $,则我们可以用阶梯函数逼近$f $,具体而言,假设$g $是阶梯函数,并且$g \leq f $,那么我们可以将$g $类似达布下和而分划够细,以使得$\int _a ^b f \mathrm { d  } x = \sup _{ g \leq f , \text { g is a step function  }  } \{ \int _a ^b g ( x ) \mathrm { d  } x \} $.</p>
<p>定义<strong>初等集</strong>:有限个不交区间的并,可以见到其测度$m ( E ) $就是所有不交区间的长度之和.</p>
<p>定义<strong>闭初等集</strong>:有限个不交闭区间的并.</p>
<p>定义<strong>有界闭初等集列</strong>:$A _n $是闭初等集.容易见到,如果$A _n \ne \emptyset $,而且$A _{ n + 1  } \subseteq A _n $,则$\bigcap _{ n = 1  } ^\infty A _n \ne \emptyset $,证明的话只需类似区间套定理,每个$A _n $内取一个点,这个点列是有界的,那它就一定有收敛子列,收敛到的那个点一定被含在每一个$A _n $中.这就搞定.</p>
<p>不妨设$A _n $是有界非空集列,满足$A _{ n + 1  } \subseteq A _n , A _n \ne \emptyset , \bigcap _{ n = 1  } ^\infty A _n = \emptyset $.此时定义$\alpha _n = \sup \{ m ( E ) \mid E \subseteq A _n , \text { E is a closed elementary set  } \} $.我们下面证明$\lim _{ n \to \infty  } \alpha _n = 0 $.</p>
<p>首先显然$\alpha _n $单调递减.如若其不以$0 $为极限,则一定有正下界$\alpha _n &gt; \delta &gt; 0 $.我们可以取$A _n $的闭初等子集$E _n \subseteq A _n $满足$m ( E _n ) &gt; \alpha _n - \frac { \delta  } { 2 ^n  } $.</p>
<p>接下来定义$H _n = \bigcap _{ k = 1  } ^n E _k $,这当然是初等集,此时见到$H _{ n + 1  } \subseteq H _n $.接下来对$A _n \setminus H _n $的任意初等子集$E $,显然:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E & = E \setminus H _n \\
& = E \setminus ( \bigcap _{ k = 1  } ^n E _k ) \\
& = \bigcup _{ k = 1  } ^n ( E \setminus E _k ) 
\end{aligned}</script><p>而$E \subseteq A _n \subseteq A _k $,所以$E _k $和$E \setminus E _k $都是$A _k $的初等子集.所以:</p>
<script type="math/tex; mode=display">
\begin{aligned}
m ( E \setminus E _k ) + m ( E _k ) & \leq \alpha _k \\
m ( E \setminus E _k ) & \leq \frac { \delta  } { 2 ^k  } 
\end{aligned}</script><p>所以$m ( E ) \leq \delta $.如果$H _n = \emptyset $,那么$m ( E ) = \alpha _n $,这就不符.所以$H _n \ne \emptyset $,所以$\bigcap _{ n = 1  } ^\infty H _n \ne \emptyset $,所以$\bigcap A _n \ne \emptyset $.矛盾,这就证明了原本的结论.</p>
<p>接下来考虑$f ( x ) - f _n ( x ) $,当没有一致连续的条件时,可能出现问题的地方在于有的地方两者不一定靠的足够近,想办法让这种地方所占的长度尽可能小就行.</p>
<p>对于$\forall \epsilon &gt; 0 , A _n = \{ x \in [ a , b ] \mid \exists j \geq n , | f _j ( x ) - f ( x ) | \geq \epsilon \} $.容易见到$A _{ n + 1  } \subseteq A _n $,由于$f _n \to f $,所以$\bigcap _{ n = 1  } ^\infty A _n = \emptyset $.引理告诉我们$\alpha _n \to 0 $.既然如此,存在$N $,使得$\forall n \geq N $,$A _n $的任意初等子集$E $都有$m ( E ) &lt; \epsilon $.取$F = [ a , b ] \setminus E $.这其实更像是取$[ a , b ] $的一个分划,因此如果我们在上面取阶梯函数的话,完全可以让阶梯函数所需的那个分划和这个分划并起来,从而完全由上述结果取到阶梯函数,此外我们的$A _n \setminus E $的部分由于落在$F $里而需要被$\epsilon $控制.</p>
<p>此时取阶梯函数$S ( x ) $满足$0 \leq S ( x ) \leq | f ( x ) - f _n ( x ) | $.这个时候看$S ( x ) $的积分:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b S ( x ) \mathrm { d  } x & = \int _E S ( x ) \mathrm { d  } x + \int _F S ( x ) \mathrm { d  } x \\
& \leq 2 M \epsilon + \epsilon ( b - a ) 
\end{aligned}</script><p>这个对任意$S ( x ) $都成立,由于我们之前说的阶梯函数的上界可以逼近原函数,所以这就意味着:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _a ^b f _n ( x ) - f ( x ) \mathrm { d  } x | \\
& \leq \int _a ^b | f _n ( x ) - f ( x ) | \mathrm { d  } x \\
& \leq 2 M \epsilon + \epsilon ( b - a ) 
\end{aligned}</script><p>这就搞定.不过细心的读者也许会注意到一些问题,首先是这里用内测度逼近疑似有点神秘,然而如果用勒贝格测度的定义直接跑其实一眼就能看出来上面的结论.</p>
<p>还有另一个结论:假设$f _n \in R [ a , b ] , | f _n | \leq M $,已知$\lim _{ n \to \infty  } f _n ( x ) = f ( x ) $存在(注意这里并不要求$f ( x ) \in R [ a , b ] $),我们就可以证明$\lim _{ n \to \infty  } \int _a ^b f _n ( x ) \mathrm { d  } x $存在.</p>
<p>考虑$| \int _a ^b f _n \mathrm { d  } x | \leq M ( b - a ) $有界,所以其可以取上下极限操作.令$\overline { F  } = \varlimsup _{ n \to \infty  } \int _a ^b f _n \mathrm { d  } x , \underline { F  } = \varliminf _{ n \to \infty  } \int _a ^b f _n \mathrm { d  } x $.既然如此,就一定存在两列$\{ n _k \} $和$\{ m _k \} $,使得$\overline { F  } = \lim _{ k \to \infty  } \int _a ^b f _{ n _k  } \mathrm { d  } x , \underline { F  } = \lim _{ k \to \infty  } \int _a ^b f _{ m _k  } \mathrm { d  } x $.然而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\overline { F  } - \underline { F  } & = \lim _{ k \to \infty  } \int _a ^b ( f _{ n _k  } - f _{ m _k  } ) \mathrm { d  } x \\
& = \int _a ^b \lim _{ k \to \infty  } ( f _{ n _k  } - f _{ m _k  } ) \mathrm { d  } x & = 0 
\end{aligned}</script><p>这你就可以见到,我们其实可以把这个极限干脆定义成$f $的积分.这实际上就是勒贝格积分.</p>
<h6><span id="example1">Example1</span></h6><p>求证:$\int _0 ^1 \frac { 1  } { x ^x  } \mathrm { d  } x = \sum _{ n = 1  } ^\infty \frac { 1  } { n ^n  } $.</p>
<p>展开:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { x ^x  } & = e ^{ - x \ln x  } \\
& = \sum _{ n \geq 0  } \frac { ( - x \ln x ) ^n  } { n !  } 
\end{aligned}</script><p>容易证明这个函数项级数是一致收敛的,那我们就可以逐项积分,而且积分内可以做多少次分部积分都无所谓(反正是有限逼近无限).</p>
<p>那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^1 \frac { 1  } { x ^x  } \mathrm { d  } x \\
& = \int _0 ^1 \sum _{ n \geq 0  } \frac { ( - x \ln x ) ^n  } { n !  } \mathrm { d  } x \\
& = \sum _{ n \geq 0  } \int _0 ^1 \frac { ( - x \ln x ) ^n  } { n !  } \mathrm { d  } x 
\end{aligned}</script><p>令$x = e ^{ - t  } $,换元:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n \geq 0  } \int _0 ^1 \frac { ( - x \ln x ) ^n  } { n !  } \mathrm { d  } x \\
& = - \sum _{ n \geq 0  } \frac { 1  } { n !  } \int _0 ^{ + \infty  } e ^{ - ( n + 1 ) t  } t ^n \mathrm { d  } t 
\end{aligned}</script><p>而考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^{ + \infty  } e ^{ - ( n + 1 ) t  } t ^n \mathrm { d  } t \\
& = \frac { - 1  } { n + 1  } \int _0 ^{ + \infty  } t ^n \mathrm { d  } e ^{ - ( n + 1 ) t  } \\
& = \frac { - 1  } { n + 1  } \left ( e ^{ - ( n + 1 ) t  } t ^{ n  } | _0 ^{ + \infty  } - n \int _0 ^{ + \infty  } e ^{ - ( n + 1 ) t  } t ^{ n - 1  } \right ) \\
& = \frac { n  } { n + 1  } \int _0 ^{ + \infty  } e ^{ - ( n + 1 ) t  } t ^{ n - 1  } \\
& = \cdots \\
& = \frac { n !  } { ( n + 1 ) ^{ n  }  } \int _0 ^{ + \infty  } e ^{ - ( n + 1 ) t  } \mathrm { d  } t \\
& = - \frac { n !  } { ( n + 1 ) ^{ n + 1  }  } 
\end{aligned}</script><p>和上面结合一下就证毕.</p>
<h6><span id="example2">Example2</span></h6><p>设函数列$\{ f _n ( x ) \} $任意内闭可积,并且$\{ f _n ( x ) \} $在$\mathbb { R  } $上一致收敛到$f ( x ) $,再设存在函数$g ( x ) $满足:</p>
<script type="math/tex; mode=display">
| f _n ( x ) | \leq g ( x )</script><p>并且$\int _{ - \infty  } ^{ + \infty  } g ( x ) \mathrm { d  } x &lt; + \infty $.求证下列积分收敛而且:</p>
<script type="math/tex; mode=display">
\int _{ - \infty  } ^{ + \infty  } f ( x ) \mathrm { d  } x = \lim _{ n \to \infty  } \int _{ - \infty  } ^{ + \infty  } f _n ( x ) \mathrm { d  } x</script><p>首先要证明$\int _{ - \infty  } ^{ + \infty  } f ( x ) \mathrm { d  } x $收敛.只需观察到$| f _n | \leq g $两遍取极限就可以拿到$| f | \leq g $,所以绝对收敛.</p>
<p>接下来考虑如何证明相等,这里的问题在于虽然$f ( x ) \rightrightarrows f $,但是由于区间长度无限长,因此这个控制会被放大.于此我们的策略是考虑将区间分成三段:$[ - \infty , - A ] , [ - A , A ] , [ A , + \infty ] $,对于中间的部分用一致收敛控制住,对于前后的部分用柯西准则控制住.</p>
<p>具体而言,$| f ( x ) - f _n ( x ) | \leq 2 g ( x ) $取足够大的$A $使得$\int _{ A  } ^{ + \infty  } g ( x ) \mathrm { d  } x \leq \frac { \epsilon  } { 6  } $以及$\int _{ - \infty  } ^{ - A  } g ( x ) \mathrm { d  } x \leq \frac { \epsilon  } { 6  } $,接下来考虑取足够大的$n $使得在$[ - A , A ] $上,$| f _n ( x ) - f ( x ) | &lt; \frac { \epsilon  } { 6 A  } $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _{ - \infty  } ^{ + \infty  } f _n ( x ) - f ( x ) \mathrm { d  } x | \\
& \leq | \int _{ - A  } ^{ + A  } f _n ( x ) - f ( x ) \mathrm { d  } x | + | \int _{ - \infty  } ^{ - A  } f _n ( x ) - f ( x ) \mathrm { d  } x | + | \int _{ + A  } ^{ + \infty  } f _n ( x ) - f ( x ) \mathrm { d  } x | \\
& \leq 2 A \frac { \epsilon  } { 6 A  } + \frac { \epsilon  } { 6  } \times 4 \\
& = \epsilon 
\end{aligned}</script><p>这就搞定了.</p>
<h4><span id="可微性">可微性</span></h4><p>先看一个平凡的命题:假设$f _n \in C ^1 [ a , b ] , x _0 \in [ a , b ] $,已知$\{ f _n ( x _0 ) \} $收敛,而且$f _n ‘ \rightrightarrows g $.则$f _n \rightrightarrows f $,其中$f \in C ^1 [ a , b ] $,并且恰好满足$f ‘ = g $.</p>
<p>考虑$g ( x ) = \lim _{ n \to \infty  } f _n ‘ ( x ) , x \in [ a , b ] $当然能得到$g ( x ) $是连续函数.</p>
<p>接下来考虑NL公式给出:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _n ( x ) & = f _n ( x _0 ) + \int _{ x _0  } ^x f ' _n ( t ) \mathrm { d  } t \\
\lim _{ n \to \infty  } f _n ( x ) & = \lim _{ n \to \infty  } f _n ( x _0 ) + \lim _{ n \to \infty  } \int _{ x _0  } ^x f ' _n ( t ) \mathrm { d  } t \\
\lim _{ n \to \infty  } f _n ( x ) & = \lim _{ n \to \infty  } f _n ( x _0 ) + \int _{ x _0  } ^x \lim _{ n \to \infty  } f ' _n ( t ) \mathrm { d  } t \\
f ( x ) & = \lim _{ n \to \infty  } f _n ( x _0 ) + \int _{ x _0  } ^x g ( t ) \mathrm { d  } t \\

\end{aligned}</script><p>这就见到$f _n \to f , f \in C ^1 [ a , b ] $而且$f ‘ = g $.现在的问题是能否推出一致收敛$f _n \rightrightarrows f $.有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ( x ) - f ( x ) | \\
& = | f _n ( x _0 ) + \int _{ x _0  } ^x f _n ' ( t ) \mathrm { d  } t - f ( x _0 ) - \int _{ x _0  } ^x g ( t ) | \\
& \leq | f _n ( x _0 ) - f ( x _0 ) | + | \int _{ x _0  } ^x f _n ' ( t ) \mathrm { d  } t - \int _{ x _0  } ^x g ( t ) | \\
& \leq | f _n ( x _0 ) - f ( x _0 ) | + ( b - a ) \sup | f _n ' - g | 
\end{aligned}</script><p>这就完事.</p>
<p>上述结果能不能加强呢?事实上有一个更一般的结果:假设对于一串连续函数$f _n ( x ) \in C [ a , b ] $,已知$\exists x _0 \in [ a , b ] $,$\lim _{ n \to \infty  } f _n ( x _0 ) $存在.若对于$\forall \epsilon &gt; 0 $,$\exists N &gt; 0 , \forall n , m \geq N $,函数$g ( x ) = f _n ( x ) - f _m ( x ) $的李氏常数$&lt; \epsilon $.则我们可以推出$\{ f _n ( x ) \} $一致收敛,设$f _n ( x ) \rightrightarrows f ( x ) $,若对于某个$x \in [ a , b ] $,如果$f _n ‘ ( x ) $恒存在,而且$\lim _{ n \to \infty  } f _n ‘ ( x ) $存在,则$f ‘ ( x ) $存在而且$f ‘ ( x ) = \lim _{ n \to \infty  } f _n ‘ ( x ) $.</p>
<p>这个结论的正确性比较直观,就是用李氏连续的性质限制整个函数的波动.这个结论当然要严格强于原本的结论,因为闭区间上的可导函数自然是李氏连续函数,如若$f _n ‘ ( x ) $一致连续,当然能推出上述的李氏连续性质,立刻得到原本结论.</p>
<p>下面考虑证明:$\forall \epsilon &gt; 0 , \exists N , \forall n , m \geq N $,都有$| f _n ( x _0 ) - f _m ( x _0 ) | &lt; \frac { \epsilon  } { 2  } $,并且$f _n ( x ) - f _m ( x ) $的李氏常数$&lt; \frac { \epsilon  } { 2 ( b - a )  } $.注意到此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ( x ) - f _m ( x ) | \\
& \leq | f _n ( x ) - f _m ( x ) - ( f _n ( x _0 ) - f _m ( x _0 ) ) | + | f _n ( x _0 ) - f _m ( x _0 ) | \\
& < \frac { \epsilon  } { 2 ( b - a )  } | x - x _0 | + \frac { \epsilon  } { 2  } & \leq \epsilon 
\end{aligned}</script><p>这就证明了$f _n $一致收敛,不妨设$f _n \rightrightarrows f $.</p>
<p>接下来对于某个$x \in [ a , b ] $,定义$\varphi _n ( t ) = \frac { f _n ( t ) - f _n ( x )  } { t - x  } , t \in [ a , b ] \setminus \{ x \} $,并补定义$\varphi ( t ) = \frac { f ( t ) - f ( x )  } { t - x  } , t \in [ a , b ] \setminus \{ x \} $.显然$\varphi _n ( t ) \in C [ a , b ] \setminus \{ x \} $</p>
<p>首先注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \varphi _n ( t ) - \varphi _m ( t ) | \\
& = \frac { 1  } { | t - x |  } | f _n ( t ) - f _m ( t ) - ( f _n ( x ) - f _m ( x ) ) | \\
& \leq \frac { 1  } { | t - x |  } \frac { \epsilon  } { 2 ( b - a )  } | t - x | \\
& = \frac { \epsilon  } { 2 ( b - a )  } 
\end{aligned}</script><p>于是$\varphi _n ( t ) $一致收敛,而且容易见到$\varphi _n \rightrightarrows \varphi $.从而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' ( x ) & = \lim _{ t \to x  } \varphi ( t ) \\
& = \lim _{ t \to x  } \lim _{ n \to \infty  } \varphi _n ( t ) \\
& = \lim _{ n \to \infty  } \lim _{ t \to x  } \varphi _n ( t ) \\
& = \lim _{ n \to \infty  } f _n ' ( x ) 
\end{aligned}</script><p>这就搞定了.</p>
<p>容易发现上述的推论是可导函数列的收敛性质(并不需要$C ^1 $).而且我们还可以推出一个推论:那就是导函数一致收敛到的函数也是导函数.</p>
<h6><span id="example1">Example1</span></h6><p>假设$\{ q _n \} $是$[ 0 , 1 ] $中的全体有理数排成的数列.定义$f ( x ) = \sum _{ n = 1  } ^\infty \frac { | x - q _n |  } { 3 ^n  } , x \in [ 0 , 1 ] $.</p>
<p>首先用大M判别法,注意到$\frac { | x - q _n |  } { 3 ^n  } \leq \frac { 1  } { 3 ^n  } $,而每一项都是连续的,所以总的$f ( x ) $是连续函数,而且这个定义也是收敛的.而且对于$x _0 \in [ 0 , 1 ] \setminus \mathbb { Q  } $,$f _n ‘ ( x _0 ) $当然都是存在的,而且见到$f _n ‘ ( x _0 ) = \sum _{ k = 1  } ^n \frac { \text { sgn  } ( x _0 - q _k )  } { 3 ^k  } $,并且这个导数还足够小.因此立刻见到当$n , m $足够大的时候,立刻见到$f _n - f _m $的李氏常数可以尽可能小.</p>
<p>于是套用上面的结论可以知道$f ( x ) $在$[ 0 , 1 ] \setminus \mathbb { Q  } $处可导.那么其在$\mathbb { Q  } \cap [ 0 , 1 ] $上可导么?如若$x \in \mathbb { Q  } $,不妨设$x = q _n $,则考虑$f ( x ) = \frac { | x - q _n |  } { 3 ^n  } + \sum _{ k \ne n  } \frac { | x - q _k |  } { 3 ^k  } $,前半部分在$q _n $处不可导可后半部分在$q _n $处可导,于是总和当然不可导.</p>
<h6><span id="example2">Example2</span></h6><p>设$f ( x ) = \sum _{ n = 1  } ^\infty \frac { \sin ( nx )  } { n ^3  } $,求其导函数.</p>
<p>观察到$\sum _{ n = 1  } ^\infty | ( \frac { \sin ( nx )  } { n ^3  } ) ‘ | \leq \sum \frac { 1  } { n ^2  } &lt; \infty $,所以其导函数也绝对一致收敛.立刻能推出$f \in C ^1 ( - \infty , + \infty ) $,而且导函数就是逐项求导的$f ‘ ( x ) = \sum _{ n = 1  } ^\infty \frac { \cos ( nx )  } { n ^2  } $.</p>
<h4><span id="部分应用">部分应用</span></h4><h5><span id="borel引理">Borel引理</span></h5><p>对任何一个实数列$\{ a _n \} $,都存在一个函数$f ( x ) \in C ^{ \infty  } ( \mathbb { R  } ) $,满足$f ^{ ( n )  } ( 0 ) = a _n $.</p>
<p>考虑造一个$g ( x ) = \begin{cases}1 &amp; 0 \leq x \leq \frac { 1  } { 2  } \ 0 &amp; x \geq 1 \end{cases} $,其中中间少了一段用磨光核连起来.考虑造一个单调递增无界正数列$\{ \lambda _n \} $,并取:</p>
<script type="math/tex; mode=display">
f ( x ) = \sum _{ n = 0  } ^\infty \frac { a _n x ^n  } { n !  } g ( \lambda _n | x | )</script><p>这个的好处是什么呢?我们发现当$\lambda _n | x | \geq 1 $,$| x | \geq \frac { 1  } { \lambda _n  } $的时候$g ( \lambda _n | x | ) = 0 $,又因为$\lambda _n $单调递增趋近于无穷,所以除了$0 $以外的所有点上都是有限和,因此全都收敛而且全都可导,所以$f \in C ^{ \infty  } ( \mathbb { R  } \setminus \{ 0 \} ) $.</p>
<p>考虑$f _n ( x ) = \frac { a _n x ^n  } { n !  } g ( \lambda _n | x | ) $,这个当然是$C ^{ \infty  } $的.并且当然有$f _n ^{ ( n )  } ( 0 ) = a _n $.现在如果我们能搞定这个导数级数的收敛性就搞定了$0 $处的可导性了对吧.取$M _k = \max _{ 0 \leq l \leq k  } | g ^{ ( l )  } | $,当$k \leq n $的时候考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ^{ ( k )  } ( x ) | & \leq \frac { | a _n |  } { n !  } \sum _{ m = 0  } ^k \left | \binom { k  } { m  } n ^{ \underline { k - m  }  } x ^{ n - k + m  } g ^{ ( m )  } ( \lambda _n | x | ) \lambda _n ^m \right | \\
& \leq \frac { | a _n |  } { n !  } \sum _{ m = 0  } ^k \left | \binom { k  } { m  } n ^{ \underline { k - m  }  } x ^{ n - k + m  } M _k \lambda _n ^m \right | \\

\end{aligned}</script><p>注意这里的$x $一定很小,$| x | &lt; \frac { 1  } { \lambda _n  } $的时候上式才有意义,开始放缩:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f _n ^{ ( k )  } ( x ) | & \leq \frac { | a _n |  } { n !  } \sum _{ m = 0  } ^k \left | \frac { k !  } { m ! ( k - m ) !  } n ^{ \underline { k - m  }  } M _k \frac { 1  } { \lambda _n ^{ n - k  }  } \right | \\
& \leq \frac { | a _n |  } { n !  } \sum _{ m = 0  } ^k \left | \frac { k !  } { m ! ( k - m ) !  } n ^{ \underline { k - m  }  } M _k \frac { 1  } { \lambda _n ^{ n - k  }  } \right | \\
& = \frac { | a _n |  } { n !  } \sum _{ m = 0  } ^k \left | \frac { k !  } { m ! ( k - m ) !  } \frac { n !  } { ( n - k + m ) !  } M _k \frac { 1  } { \lambda _n ^{ n - k  }  } \right | \\
& \leq | a _n | M _k \frac { 1  } { \lambda _n ^{ n - k  }  } k ! 
\end{aligned}</script><p>显然只需取足够小的$\lambda _n $就用大M判别法控制住了.</p>
<h5><span id="维尔斯特拉斯函数">维尔斯特拉斯函数</span></h5><p>考虑造一个处处连续处处不可导的函数,首先它应该在任何一个区间上都没有单调性(因为单调函数几乎处处可导).</p>
<p>首先造一个连续的$2 $周期函数$h ( x ) = \begin{cases}x &amp; 0 \leq x \leq 1 \ 2 - x &amp; 1 \leq x \leq 2 \ h ( x - 2 ) &amp; \text { otherwise  } \end{cases} $.或者我们干脆定义$h ( x ) = \sin ( \frac { \pi  } { 2  } 4 ^n x ) $,这样这个函数更光滑一点,但对论证几乎没有区别.</p>
<p>考虑造$f ( x ) = \sum _{ n = 0  } ^{ \infty  } ( \frac { 3  } { 4  } ) ^n h ( 4 ^n x ) $,注意到:</p>
<script type="math/tex; mode=display">
f ( x ) \leq \sum ( \frac { 3  } { 4  } ) ^n < \infty</script><p>根据大M判别法,所以这个函数的确绝对一致收敛.那这个函数就确实继承了连续性.</p>
<p>首先有引理:如果$f ‘ ( x _0 ) $存在,而且$\alpha _n \leq x _0 \leq \beta _n , 0 &lt; \beta _n - \alpha _n \to 0 $,则$\lim _{ n \to \infty  } \frac { f ( \beta _n ) - f ( \alpha _n )  } { \beta _n - \alpha _n  } \to f ‘ ( x _0 ) $.取$\lambda _n = \frac { \beta _n - x _0  } { \beta _n - \alpha _n  } $,容易见到$0 \leq \lambda _n \leq 1 $,见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { f ( \beta _n ) - f ( \alpha _n )  } { \beta _n - \alpha _n  } - f ' ( x _0 ) \\
& = \lambda _n ( \frac { f ( \beta _n ) - f ( x _0 )  } { \beta _n - x _0  } - f ' ( x _0 ) ) + ( 1 - \lambda _n ) ( \frac { \alpha _n - f ( x _0 )  } { \alpha _n - x _0  } - f ' ( x _0 ) ) 
\end{aligned}</script><p>容易见到趋近于$0 $.不过要简单判断一下$\alpha _n = x _0 $的情况.</p>
<p>既然如此,$\forall x \in \mathbb { R  } $,考虑定义$\alpha _m = \frac { \lfloor 4 ^m x \rfloor  } { 4 ^m  } , \beta _m = \alpha _m + \frac { 1  } { 4 ^m  } $,容易见到$\alpha _m \leq x &lt; \beta _m $.并且当$n \leq m $的时候，$( 4 ^n \alpha _m , 4 ^n \beta _m ) $上不存在整数.</p>
<p>见到:</p>
<script type="math/tex; mode=display">
4 ^n ( \beta _m - \alpha _m ) = \begin{cases}
\in 4 \mathbb { N  } & n > m \\
1 & n = m \\
< 1 & \text { otherwise  } 
\end{cases}</script><p>于是:</p>
<script type="math/tex; mode=display">
| h ( 4 ^n \beta _m ) - h ( 4 ^n \alpha _m ) | = \begin{cases}
0 & n > m \\
| 4 ^n \beta _m - 4 ^n \alpha _m | = 4 ^{ n - m  } & n \leq m 
\end{cases}</script><p>把$n &lt; m $的地方往负了放,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f ( \beta _m ) - f ( \alpha _m ) | & = \sum _{ n = 0  } ^m ( \frac { 3  } { 4  } ) ^n ( h ( 4 ^n \beta _m ) - h ( 4 ^n \alpha _m ) ) \\
& \geq ( \frac { 3  } { 4  } ) ^m - \sum _{ n = 0  } ^{ m - 1  } ( \frac { 3  } { 4  } ) ^n 4 ^{ n - m  } \\
& = ( \frac { 3  } { 4  } ) ^m - \frac { 1  } { 4 ^m  } \frac { 3 ^m - 1  } { 2  } \\
& = \frac { 1  } { 4 ^m  } \frac { 3 ^m + 1  } { 2  } 
\end{aligned}</script><p>所以:</p>
<script type="math/tex; mode=display">
\frac { | f ( \beta _m ) - f ( \alpha _m ) |  } { \beta _m - \alpha _m  } \geq \frac { 3 ^m + 1  } { 2  }</script><p>然而如若这点导数存在,那么这里的导数就是$\lim _{ m \to \infty  } \frac { 3 ^m + 1  } { 2  } = \infty $,这就矛盾了.因此这个函数处处不可导.</p>
<h5><span id="连续曲线充满平面">连续曲线充满平面</span></h5><p>存在充满$[ 0 , 1 ] \times [ 0 , 1 ] $的连续曲线.连续曲线在这里定义为$( x ( t ) , y ( t ) ) , t \in [ 0 , 1 ] $满足$x ( t ) , y ( t ) \in C [ 0 , 1 ] $,任意$( a , b ) \in [ 0 , 1 ] \times [ 0 , 1 ] $,都存在$t $使得$a = x ( t ) , b = y ( t ) $.</p>
<p>搞一个连续函数$g ( t ) $满足:</p>
<script type="math/tex; mode=display">
g ( t ) = \begin{cases}
0 & t \in [ 0 , \frac { 1  } { 3  } ] \cup [ \frac { 5  } { 3  } , 2 ] \\
3 t - 1 & t \in [ \frac { 1  } { 3  } , \frac { 2  } { 3  } ] \\
1 & t \in [ \frac { 2  } { 3  } , \frac { 4  } { 3  } ] \\
3 t + 5 & t \in [ \frac { 4  } { 3  } , \frac { 5  } { 3  } ] \\

\end{cases}</script><p>并且满足$g ( t + 2 ) = g ( t ) $,也就是一个周期梯形函数.</p>
<p>接下来定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x ( t ) & = \sum _{ n = 1  } ^\infty \frac { 1  } { 2 ^n  } g ( 3 ^{ 2 n - 2  } t ) \\
y ( t ) & = \sum _{ n = 1  } ^\infty \frac { 1  } { 2 ^n  } g ( 3 ^{ 2 n - 1  } t ) 
\end{aligned}</script><p>容易发现$0 \leq x ( t ) , y ( t ) \leq \sum _{ n = 1  } ^\infty \frac { 1  } { 2 ^n  } = 1 $,所以的确绝对一致收敛,继承了连续性而且确实在$[ 0 , 1 ] \times [ 0 , 1 ] $中.</p>
<p>接下来$\forall ( a , b ) \in [ 0 , 1 ] \times [ 0 , 1 ] $,我们尝试找到一个$t $使得$a = x ( t ) , b = y ( t ) $.考虑取二者的二进制表示$a = \sum _{ n = 1  } ^\infty \frac { a _n  } { 2 ^n  } , b = \sum _{ n = 1  } ^\infty \frac { b _n  } { 2 ^n  } $,其中$a _n , b _n \in \{ 0 , 1 \} $.取一个新的数列$c _{ 2 n - 1  } = a _n , c _{ 2 n  } = b _n $.取$0 \leq c = 2 \sum _{ n = 1  } ^\infty \frac { c _n  } { 3 ^n  } \leq 1 $,下面我们证明$x ( c ) = a , x ( c ) = b $.</p>
<p>考虑$3 ^k c = 2 \sum _{ n = 1  } ^k \frac { c _n  } { 3 ^{ n - k  }  } + 2 \sum _{ n = k + 1  } ^\infty \frac { c _n  } { 3 ^{ n - k  }  } $.其中前半部分是个偶整数,因此在带入函数$g $后会消失,观察后半部分,容易见到:如果$c _{ k + 1  } = 0 $,则后半部分$\leq \frac { 1  } { 3  } $;如果$c _{ k + 1  } = 1 $,则后半部分$\geq \frac { 2  } { 3  } $,因此$g ( 3 ^k c ) = c _{ k + 1  } $.带入原式定义就看到$x ( c ) = a , y ( c ) = b $.</p>
<p>甚至说,这里的$c $其实就在康托尔三分集中,所以事实上这个曲线上的零测集就足以覆盖整个平面.</p>
<h4><span id="幂级数">幂级数</span></h4><p>我们把形如$f ( x ) = \sum _{ n = 0  } ^{ \infty  } a _n ( x - x _0 ) ^n $的函数项级数称作<strong>幂级数</strong>,由于可以做自变量平移,不妨假设$x _0 = 0 $而$f ( x ) = \sum _{ n = 0  } ^{ \infty  } a _n x ^n $.</p>
<p>一个最先遇到的问题当然是幂级数的收敛范围,首先$x = 0 $肯定收敛.其次我们可以发现如果$f ( r ) $收敛,那么$\forall x \in \mathbb { R  } , | x | &lt; | r | $都有$f ( x ) $收敛,原因是:</p>
<script type="math/tex; mode=display">
\sum | a _n x ^n | = \sum | a _n r ^n | \cdot | \frac { x  } { r  } | ^n</script><p>由于$\sum a _n r ^n $收敛,所以其通项$\lim _{ n \to \infty  } a _n r ^n = 0 $,那至少是有界的,而$| \frac { x  } { r  } | ^n $又是个无穷递降等比数列,那就肯定收敛.既然如此,取$R = \sup \{ | x | , x \in \mathbb { R  } | f ( x ) \text { is converge  } \} $.由上面的结论我们知道$\forall x \in ( - R , R ) $都有$f ( x ) $收敛,另外$\forall x , | x | &gt; R $都有$f ( x ) $发散.既然如此,我们将$( - R , R ) $称作幂级数的<strong>收敛区间</strong>,容易见到收敛域和收敛区间最多只可能差两个点,换言之设收敛域为$E $,则自然有$( - R , R ) \subseteq E \subseteq [ - R , R ] $.</p>
<p>取$\rho = \varlimsup _{ n \to + \infty  } \sqrt [n ] { | a _n |  } $,则$R = \rho ^{ - 1  } $(这里要做一些约定:不妨设$\inf ^{ - 1  } = 0 $和$0 ^{ - 1  } = \inf $).原因是$\varlimsup _{ n \to + \infty  } \sqrt [n ] { | a _n x ^n |  } = | x | \rho $,用根值判别法就显然了.</p>
<p>这里还有一个更弱的比值判别法的版本:如若$a _n \ne 0 $,$\rho = \lim _{ n \to \infty  } \left | \frac { a _{ n + 1  }  } { a _n  } \right | $存在,则$R = \rho ^{ - 1  } $.原因是Stolz定理给出:</p>
<script type="math/tex; mode=display">
\varliminf \frac { | a _{ n + 1  } |  } { | a _n |  } \leq \varliminf \sqrt [n ] { | a _n |  } \leq \varlimsup \sqrt [n ] { | a _n |  } \leq \varlimsup \frac { | a _{ n + 1  } |  } { | a _n |  }</script><p>下面我们证明,在收敛区间的内部$( - R , R ) $内,$\sum a _n x ^n $是内闭绝对一致收敛的.而如果其在端点处也收敛,例如在$x = R $时收敛的话,则其在$[ 0 , R ] $上一致收敛.</p>
<p>前者的话,只需用大M判别法即可,任取$[ - r , r ] \subseteq ( - R , R ) $然后看$| a _n x ^n | \leq | a _n r ^n | $.</p>
<p>而对于后者的话,考虑$\sum a _n x ^n = \sum a _n R ^n ( \frac { x  } { R  } ) ^n $,而$( \frac { x  } { R  } ) ^n $是单调一致有界,而$\sum a _n R ^n $收敛,用DA判法则搞定.</p>
<p>上述结论的一个显然推论是幂级数是收敛域上的连续函数(因为在收敛域上都是一致连续的).</p>
<h6><span id="example1">Example1</span></h6><p>假设$R = 1 $,既然有一致连续性,若$\sum a _n $收敛,则极限存在有$\lim _{ x \to 1 - 0  } f ( x ) = f ( 1 ) = \sum a _n $.然而这个结论反过来不成立,例如$f ( x ) = \sum ( - x ) ^n = \frac { 1  } { 1 + x  } $,容易见到极限为$\frac { 1  } { 2  } $可是$f ( 1 ) $并不收敛.</p>
<p>上述结论能不能加点条件使得反之成立呢?我们下面证明若$a _n = o ( \frac { 1  } { n  } ) $,若$\lim _{ x \to 1 - 0  } f ( x ) = S $存在,则$\sum a _n = S $.</p>
<p>考虑取$\sigma _n = \frac { 1  } { n  } \sum _{ k = 0  } ^n k | a _k | $,由Stolz定理知道$\lim \sigma _n = \lim n | a _n | = 0 $.取$S _n = \sum _{ k = 1  } ^n a _k $,我们要证明的就是当$n \to \inf $的时候$| S - S _n | $尽可能小.当$x \in ( - 1 , 1 ) $的时候,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n - S & = f ( x ) - S - \sum _{ k = n + 1  } ^\infty a _k x ^k + \sum _{ k = 0  } ^n a _k ( 1 - x ^k ) \\
& = f ( x ) - S - \sum _{ k = n + 1  } ^\infty a _k x ^k + \sum _{ k = 0  } ^n a _k ( 1 - x ) ( 1 + x + \cdots + x ^{ k - 1  } ) \\
& \leq f ( x ) - S - \sum _{ k = n + 1  } ^\infty a _k x ^k + ( 1 - x ) \sum _{ k = 0  } ^n ka _k \\

\end{aligned}</script><p>$\forall \epsilon &gt; 0 $,取足够大的$n $使得$\sigma _n &lt; \frac { \epsilon  } { 3  } $而且使得$| na _n | &lt; \frac { \epsilon  } { 3  } $总成立,那么:</p>
<script type="math/tex; mode=display">
| S _n - S | \leq | f ( x ) - S | + ( 1 - x ) n \sigma _n + \frac { \epsilon  } { 3 n  } \frac { x ^{ n + 1  }  } { 1 - x  }</script><p>取$x = 1 - \frac { 1  } { n  } $,即可得证.</p>
<p>如果加点单调性也可以.设$a _n &gt; 0 $,如果$f ( x ) = \sum _n a _n x ^n $满足$f ( 1 - ) $存在,则$\sum a _n = f ( 1 - ) $.</p>
<p>这个结论与之前的一致收敛那里的单调性质完全相似.首先由$\sum _n a _n \leq f ( 1 - ) $得到这个级数收敛,然后又可以放到$\sum a _n x ^n \leq \sum _n a _n $,让左边趋近一下得到$f ( 1 - ) \leq \sum _n a _n $.</p>
<h5><span id="柯西和">柯西和</span></h5><p>设$\sum a _n = A , \sum b _n = B $,设$c _n = \sum _{ k = 0  } ^n a _{ n - k  } b _k $,我们下面证明若$\sum c _n $收敛,则$\sum c _n = AB $.</p>
<p>考虑设$f ( x ) = \sum a _n x ^n , g ( x ) = \sum b _n x ^n $,则其收敛半径肯定$\geq 1 $,既然如此在任何内闭区间$[ - r , r ] \subseteq ( - 1 , 1 ) $,$f , g $都在$[ - r , r ] $上绝对一致收敛,既然如此我们就可以把这个乘积随便打乱顺序,得到$f ( x ) g ( x ) = \sum c _n x ^n , \forall x \in [ - r , r ] $.而我们又有$\sum c _n $收敛,既然如此$\sum c _n = h ( 1 ) = \lim _{ x \to 1 - 0  } h ( x ) = ( \lim _{ x \to 1 - 0  } f ( x ) ) ( \lim _{ x \to 1 - 0  } g ( x ) ) = AB $,则搞定.</p>
<p>其中$\sum c _n $收敛这个条件是必须的,如果去掉后结论不成立,有如下反例:</p>
<p>设$a _n = b _n $考虑对$( 1 + x ) ^{ - \frac { 1  } { 2  }  } $做泰勒展开,得到$f ( x ) = g ( x ) = \sum a _n x ^n = \frac { 1  } { \sqrt { 1 + x  }  } $此时$f ( 1 ) , g ( 1 ) $都收敛,原因是$a _n = ( - 1 ) ^n \frac { ( 2 n - 1 ) ! !  } { 2 ^n n !  } $,用DA判法知道其收敛.然而$f ( x ) g ( x ) = \frac { 1  } { 1 + x  } $,$c _n = ( - 1 ) ^n $,因此$\sum c _n $不收敛,这就完蛋了.</p>
<h5><span id="逐项微积分">逐项微积分</span></h5><p>既然幂级数在收敛域上一致收敛,那当然可以逐项积分.而且注意到$\varlimsup \sqrt [n + 1 ] { \frac { | a _n |  } { n + 1  }  } = \varlimsup \sqrt [n ] { | a _n |  } $,原因是$\lim \sqrt [n ] { n  } = 1 $,因此收敛半径不变,然而积分后,端点处有可能被包含入收敛域,原因是DA判法,原本的$a _n x ^n $之和如果有界,配了一个多的下降$\frac { 1  } { n  } $就会收敛,例如$\sum \frac { x ^n  } { n  } $.</p>
<p>同理,对于逐项求导也可以发现收敛半径不变.所以幂级数可以在收敛域上逐项积分任意多次,也可以在收敛区间内逐项求导任意多次.</p>
<h6><span id="example1">Example1</span></h6><p>求$\sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n  } { 3 n + 1  } $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n  } { 3 n + 1  } x ^{ 3 n + 1  } \\
& = \sum _{ n = 0  } ^\infty \int _0 ^x ( - 1 ) ^n t ^{ 3 n  } \mathrm { d  } t \\

\end{aligned}</script><p>我们想让这里的求和和积分交换顺序对吧!那首先得规定$x \in ( - 1 , 1 ) $而取不到$1 $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = \sum _{ n = 0  } ^\infty \int _0 ^x ( - 1 ) ^n t ^{ 3 n  } \mathrm { d  } t \\
& = \int _0 ^x \sum _{ n = 0  } ^\infty ( - t ) ^{ 3 n  } \mathrm { d  } t \\
& = \int _0 ^x \frac { \mathrm { d  } t  } { 1 + t ^3  } 
\end{aligned}</script><p>后面那个可以积出来,而且$f ( x ) $在$( - 1 , 1 ) $上取值就是如此.而发现$f ( x ) $在$1 $处收敛,因此拿这个积出来的结果极限逼近一下就行.</p>
<h5><span id="泰勒级数">泰勒级数</span></h5><p>对于一个$f \in C ^\infty $,考虑泰勒展开有:</p>
<script type="math/tex; mode=display">
f ( x ) = \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k + r _n ( x )</script><p>其中依照拉格朗日余项,$r _n ( x ) = \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - x _0 ) ^{ n + 1  } $,若存在$\delta &gt; 0 $,当$x \in ( x _0 - \delta , x _0 + \delta ) $的时候,$\lim _{ n \to \infty  } r _n = 0 $,则称该函数在$x _0 $处解析,也就是可以用泰勒级数逼近它.</p>
<p>我们有一个命题:如果$f ( x ) $在$x _0 $处解析,则其在$x _0 $附近的一个小邻域上解析(证明可以参考Example15).因此解析的概念以拓宽到区间上,如果其在一个开区间$I $上解析,则称其$\in C ^\omega ( I ) $.</p>
<p>而且我们还可以见到,如果$f ^{ ( n )  } ( x ) $一致有界(或者至少与$n $无关),则由于$( x - x _0 ) ^n $会被$\frac { 1  } { ( n + 1 ) !  } $控制住,所以其在$\mathbb { R  } $上都是解析的.所以$\sin x , \cos x $都是解析的,另外$e ^x , \ln x $的导数大小与$n $无关,所以也解析.</p>
<p>当$f , g $在$x _0 $处解析的时候,应当有$f \pm g , fg , \frac { f  } { g  } $都是解析的.而且如果$f $在$g ( x _0 ) $处解析,则$f ( g ( x ) ) $也在$x _0 $处解析.这个太难算了,我们承认这个事实好了,反正就是硬算.</p>
<h6><span id="example1广义二项式定理">Example1(广义二项式定理)</span></h6><p>求$f ( x ) = ( 1 + x ) ^\alpha $在$0 $处的解析性.</p>
<p>也就是要证明$f ( x ) = ( 1 + x ) ^\alpha = \sum _{ n = 0  } ^\infty \frac { \alpha ^{ \underline { n  }  }  } { n !  } x ^n $.</p>
<p>用比值法,观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \frac { \binom { \alpha  } { n  }  } { \binom { \alpha  } { n + 1  }  } | \\
& = | \frac { n + 1  } { \alpha - n  } | \to 1 
\end{aligned}</script><p>所以右端收敛半径为$1 $.既然如此先搞定右端那个幂级数,设$g ( x ) = \sum _{ n = 0  } ^\infty \binom { \alpha  } { n  } x ^n , x \in ( - 1 , 1 ) $.观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g ' ( x ) & = \sum _{ n = 1  } ^\infty n \binom { \alpha  } { n  } x ^{ n - 1  } \\
( 1 + x ) g ' ( x ) & = \sum _{ n = 1  } ^\infty n \binom { \alpha  } { n  } x ^{ n - 1  } + \sum _{ n = 1  } ^\infty n \binom { \alpha  } { n  } x ^{ n  } \\
& = \alpha + \sum _{ n = 1  } ^\infty \left ( n \binom { \alpha  } { n  } + ( n + 1 ) \binom { \alpha  } { n + 1  } \right ) x ^n \\
& = \alpha + \alpha \sum _{ n = 1  } ^\infty \binom { \alpha  } { n  } x ^n \\
& = \alpha g 
\end{aligned}</script><p>此时见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\left ( \frac { g  } { ( 1 + x ) ^\alpha  } \right ) ' \\
& = - \alpha ( 1 + x ) ^{ - \alpha - 1  } g + ( 1 + x ) ^{ - \alpha  } g ' \\
& = ( 1 + x ) ^{ - \alpha - 1  } ( - \alpha g + ( 1 + x ) g ' ) & \equiv 0 
\end{aligned}</script><p>所以$\frac { g  } { ( 1 + x ) ^\alpha  } $是一常数,演算$x = 0 $的部分就可以知道当$x \in ( - 1 , 1 ) $的时候它俩相等.</p>
<p>最后再补一下端点,</p>
<p>当$\alpha &gt; 0 , x = \pm 1 $的时候,下面直接证明它绝对收敛,也就是证明$\sum | \binom { \alpha  } { n  } | &lt; \inf $.,考虑拉贝判法:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n \left ( \frac { | \binom { \alpha  } { n  } |  } { | \binom { \alpha  } { n + 1  } |  } - 1 \right ) \\
& = n ( \frac { n + 1  } { n - \alpha  } - 1 ) \to 1 + \alpha & > 0 
\end{aligned}</script><p>所以此时收敛域是$[ - 1 , 1 ] $.</p>
<p>当$- 1 &lt; \alpha &lt; 0 $的时候,估一下发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \binom { \alpha  } { n  } | & = | ( 1 - \frac { \alpha + 1  } { 1  } ) \cdots ( 1 - \frac { \alpha + 1  } { n  } ) | \\
& = e ^{ \sum _k \ln | 1 - \frac { 1 + \alpha  } { k  } |  } \\
\approx e ^{ - \sum _k \frac { 1 + \alpha  } { k  }  } \\
\approx \frac { 1  } { n ^{ 1 + \alpha  }  } 
\end{aligned}</script><p>而且此时$\binom { \alpha  } { n  } $本身是个交错级数,所以在$- 1 $处不收敛而在$1 $处收敛.同理当$\alpha \leq - 1 $的时候,$| \binom { \alpha  } { n  } | $并不趋向于$0 $所以两端都不收敛.</p>
<h6><span id="example2反三角函数">Example2(反三角函数)</span></h6><p>考虑由Example1,当$| x | &lt; 1 $的时候:</p>
<script type="math/tex; mode=display">
( 1 - x ^2 ) ^{ - \frac { 1  } { 2  }  } = 1 + \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! !  } x ^{ 2 n  }</script><p>两遍逐项积分,有:</p>
<script type="math/tex; mode=display">
\arcsin x = x + \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! !  } \frac { x ^{ 2 n + 1  }  } { 2 n + 1  }</script><p>继续用拉贝判别法,注意到:</p>
<script type="math/tex; mode=display">
n \left ( \frac { a _n  } { a _{ n + 1  }  } - 1 \right ) \to \frac { 3  } { 2  }</script><p>所以收敛.而且还可以发现这一下积分使得端点处也搞定了,所以上式对$[ - 1 , 1 ] $都成立.</p>
<h6><span id="example3平方倒数和">Example3(平方倒数和)</span></h6><p>还可再整点活,令$x = \sin t $带入上式,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
t & = \sin t + \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! !  } \frac { \sin ^{ 2 n + 1  } t  } { 2 n + 1  } \\

\end{aligned}</script><p>两遍在$[ 0 , \frac { \pi  } { 2  } ] $上积分,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { \pi ^2  } { 8  } & = 1 + \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! ! ( 2 n + 1 )  } \frac { ( 2 n ) ! !  } { ( 2 n + 1 ) ! !  } \\
& = 1 + \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n + 1 ) ^2  } \\
& = \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n - 1 ) ^2  } 
\end{aligned}</script><p>所以奇数的平方和是$\frac { \pi ^2  } { 8  } $,那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } & = \frac { \pi ^2  } { 8  } + \frac { 1  } { 4  } \sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } \\
\sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } & = \frac { \pi ^2  } { 6  } 
\end{aligned}</script><h6><span id="example4">Example4</span></h6><p>当$c &gt; 0 $的时候,求证存在多项式列$\{ P _n ( x ) \} \rightrightarrows | x | , x \in [ - c , c ] $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| x | & = ( x ^2 ) ^{ \frac { 1  } { 2  }  } \\
& = ( c ^2 - ( c ^2 - x ^2 ) ) ^{ \frac { 1  } { 2  }  } \\
& = c ( 1 - \left ( 1 - \frac { x ^2  } { c ^2  } \right ) ) ^{ \frac { 1  } { 2  }  } 
\end{aligned}</script><p>由于$1 - \frac { x ^2  } { c ^2  } \in [ 0 , 1 ] , \frac { 1  } { 2  } &gt; 0 $,只需要对此用广义二项式定理即可.</p>
<h6><span id="example5">Example5</span></h6><p>求$\int _0 ^\pi \frac { \ln ( 1 + a \cos x )  } { \cos x  } \mathrm { d  } x $.</p>
<p>对着上面那个$\ln $做泰勒级数,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^\pi \frac { \ln ( 1 + a \cos x )  } { \cos x  } \mathrm { d  } x \\
& = \int _0 ^\pi a + \sum _{ n = 1  } ^\infty ( - 1 ) ^n \frac { a ^{ n + 1  } \cos ^n x  } { n + 1  } \\

\end{aligned}</script><p>而回忆到$\int _0 ^\pi \cos ^m x \mathrm { d  } x $在$m $是奇数的时候当然为$0 $,偶数的时候转化为$\sin x $,答案是$\frac { ( m - 1 ) ! !  } { m ! !  } \pi $.</p>
<p>所以原式变成:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^\pi a + \sum _{ n = 1  } ^\infty ( - 1 ) ^n \frac { a ^{ n + 1  } \cos ^n x  } { n + 1  } \\
& = \pi ( a + \sum _{ m = 1  } ^\infty \frac { ( 2 m - 1 ) ! !  } { ( 2 m ) ! !  } \frac { a ^{ 2 m + 1  }  } { 2 m + 1  } ) \\
& = \pi \arcsin a 
\end{aligned}</script><h6><span id="example6">Example6</span></h6><p>求$S = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n ( n + 1 ) ^3  } { n !  } $.</p>
<p>见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n ( n + 1 ) ^3  } { n !  } e ^{ ( n + 1 ) x  } \\
& = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n  } { n !  } ( e ^{ ( n + 1 ) x  } ) ' ' ' \\

\end{aligned}</script><p>取$f ( x ) = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n  } { n !  } e ^{ ( n + 1 ) x  } $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) & = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n  } { n !  } e ^{ ( n + 1 ) x  } \\
& = e ^x \sum _{ n = 0  } ^\infty \frac { ( - e ^x ) ^n  } { n !  } \\
& = e ^{ x - e ^x  } 
\end{aligned}</script><p>则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' & = ( 1 - e ^x ) f \\
f ' ' & = ( 1 - 3 e ^x + e ^{ 2 x  } ) f \\
f ' ' ' & = ( - 3 e ^x + 2 e ^{ 2 x  } ) f + ( 1 - e ^x ) ( 1 - 3 e ^x + e ^{ 2 x  } ) f \\
f ' ' ' ( 0 ) & = - f ( 0 ) & = - \frac { 1  } { e  } 
\end{aligned}</script><p>这就搞定.</p>
<h6><span id="example7">Example7</span></h6><p>求$\sum _{ n = 1  } ^\infty \frac { \cos ( nx )  } { n  } $.</p>
<p>取$t \in ( - 1 , 1 ] $,设:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( t ) & = \sum _{ n = 1  } ^\infty \frac { \cos ( nx )  } { n  } t ^n \\
f ' & = \sum _{ n = 1  } ^\infty \cos ( nx ) t ^{ n - 1  } \\
& = \Re \sum _{ n = 1  } ^\infty t ^{ n - 1  } e ^{ inx  } \\
& = \Re \frac { e ^{ ix  }  } { 1 - te ^{ ix  }  } \\
& = \Re \frac { \cos x + i \sin x  } { 1 - t \cos x - it \sin x  } \\
& = \Re \frac { ( \cos x + i \sin x ) ( 1 - t \cos x + it \sin x )  } { ( 1 - t \cos x ) ^2 + t ^2 \sin ^2 x  } \\
& = \frac { \cos x ( 1 - t \cos x ) - t \sin ^2 x  } { ( 1 - t \cos x ) ^2 + t ^2 \sin ^2 x  } \\
& = \frac { \cos x - t  } { 1 - 2 t \cos x + t ^2  } \\

\end{aligned}</script><p>此时应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( t ) & = f ( 0 ) + \int _0 ^t f ' ( t ) \mathrm { d  } t \\
& = - \frac { 1  } { 2  } \ln ( 1 - 2 t \cos x + t ^2 ) 
\end{aligned}</script><p>而$f ( 1 ) = - \ln 2 - \ln | \sin \frac { x  } { 2  } | $,这就求出了原式.</p>
<h6><span id="example8">Example8</span></h6><p>考虑$\zeta ( x ) = \sum _{ n = 1  } ^\infty \frac { 1  } { n ^x  } $,有定理说:</p>
<script type="math/tex; mode=display">
\zeta ( x ) = \frac { 1  } { x - 1  } + \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n \gamma _n  } { n !  } ( x - 1 ) ^n</script><p>其中后半部分是整个复平面上的解析函数,并有:</p>
<script type="math/tex; mode=display">
\gamma _n = \lim _{ m \to \infty  } \left ( \sum _{ k = 1  } ^m \frac { ( \ln k ) ^n  } { k  } - \frac { ( \ln m ) ^{ n + 1  }  } { n + 1  } \right )</script><h6><span id="example9">Example9</span></h6><p>求$S ( x ) = 1 + \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! !  } x ^n $,其中$| x | &lt; 1 $.</p>
<p>容易见到其收敛半径是$1 $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ' ( x ) & = \frac { 1  } { 2  } + \sum _{ n = 1  } ^\infty \frac { ( 2 n + 1 ) ! !  } { ( 2 n + 2 ) ! !  } ( n + 1 ) x ^n \\
2 S ' ( x ) & = 1 + \sum _{ n = 1  } ^\infty \frac { ( 2 n + 1 ) ! !  } { ( 2 n ) ! !  } x ^{ n  } \\
2 xS ' ( x ) & = \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n - 2 ) ! !  } x ^n \\
2 xS ' ( x ) & = \sum _{ n = 1  } ^\infty \frac { ( 2 n - 1 ) ! !  } { ( 2 n ) ! !  } 2 nx ^n \\
2 S ' ( x ) - 2 xS ' ( x ) & = S ( x ) \\
\frac { \mathrm { d  } x  } { 2 ( 1 - x )  } & = \frac { \mathrm { d  } S ( x )  } { S ( x )  } \\
- \frac { 1  } { 2  } \ln ( 1 - x ) & = \ln S ( x ) \\
S ( x ) & = \frac { 1  } { \sqrt { 1 - x  }  } 
\end{aligned}</script><h6><span id="example10">Example10</span></h6><p>当$| x | &lt; 1 $,求$S ( x ) = \sum _{ n = 0  } ^\infty \frac { ( - 1 ) ^n x ^n  } { 2 n + 1  } $.</p>
<p>容易见到收敛半径为$1 $,令$x = t ^2 $,有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( t ^2 ) = \sum _{ n = 0  } ^\infty ( - 1 ) ^n \frac { 1  } { t  } \int _0 ^t u ^{ 2 n  } \mathrm { d  } u \\
= \frac { 1  } { t  } \int _0 ^t \sum _{ n = 0  } ^\infty ( - 1 ) ^n u ^{ 2 n  } \mathrm { d  } u \\
= \frac { 1  } { t  } \int _0 ^t \frac { \mathrm { d  } u  } { 1 + u ^2  } \\
= \frac { \arctan t  } { t  } \\

\end{aligned}</script><p>所以$S ( x ) = \frac { \arctan \sqrt { x  }  } { \sqrt { x  }  } $.</p>
<h6><span id="example11">Example11</span></h6><p>求$\sum _{ n = 2  } ^\infty \frac { ( - 1 ) ^n  } { n ^2 + n - 2  } $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S ( x ) = \sum _{ n = 2  } ^\infty \frac { ( - 1 ) ^n x ^{ n - 1  }  } { n ^2 + n - 2  } \\
= \sum _{ n = 2  } ^\infty \frac { ( - 1 ) ^n x ^{ n - 1  }  } { 3  } \left ( \frac { 1  } { n - 1  } - \frac { 1  } { n + 2  } \right ) \\
= \frac { 1  } { 3  } \sum _{ n = 2  } ^\infty \frac { ( - 1 ) ^n x ^{ n - 1  }  } { n - 1  } - \frac { 1  } { 3 x ^3  } \sum _{ n = 2  } ^\infty \frac { ( - 1 ) ^n x ^{ n + 2  }  } { n + 2  } \\
= \frac { 1  } { 3  } \ln ( 1 + x ) - \frac { 1  } { 3 x ^3  } \left ( - \ln ( 1 + x ) + x - \frac { x ^2  } { 2  } + \frac { x ^3  } { 3  } \right ) 
\end{aligned}</script><p>而注意到带入$x = 1 $的时候$S ( x ) $收敛,这就搞定了,带入$x = 1 $就行.</p>
<h6><span id="example12">Example12</span></h6><p>求$\sum _{ n = 1  } ^\infty \frac { n  } { ( n + 1 ) !  } $.</p>
<p>设$S ( x ) = \sum _{ n = 0  } ^\infty \frac { ( n + 1 ) x ^n  } { ( n + 2 ) !  } $,显然收敛,直接逐项积分.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^x S ( t ) \mathrm { d  } t & = \sum _{ n = 0  } ^\infty \frac { x ^{ n + 1  }  } { ( n + 2 ) !  } \\
& = \sum _{ n = 1  } ^\infty \frac { x ^{ n  }  } { ( n + 1 ) !  } \\
x ( \int _0 ^x S ( t ) \mathrm { d  } t + 1 ) & = e ^x - 1 \\
S ( x ) & = \left ( \frac { e ^x - 1  } { x  } \right ) ' & = \frac { xe ^x - e ^x + 1  } { x ^2  } 
\end{aligned}</script><p>这就搞定了.</p>
<h6><span id="example13">Example13</span></h6><p>求$\int _0 ^\infty \frac { x \mathrm { d  } x  } { e ^{ 2 \pi x  } - 1  } $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^\infty \frac { x \mathrm { d  } x  } { e ^{ 2 \pi x  } - 1  } \\
= \int _0 ^\infty \frac { xe ^{ - 2 \pi x  } \mathrm { d  } x  } { 1 - e ^{ - 2 \pi x  }  } \\
= \int _0 ^{ \infty  } xe ^{ - 2 \pi x  } \sum _{ n = 0  } ^\infty e ^{ - 2 \pi n x  } \mathrm { d  } x \\
= \sum _{ n = 0  } ^\infty \int _0 ^{ + \infty  } xe ^{ - 2 \pi ( n + 1 ) x  } \mathrm { d  } x \\
= \sum _{ n = 0  } ^\infty \frac { 1  } { - 2 \pi ( n + 1 )  } \int _0 ^{ + \infty  } x \mathrm { d  } e ^{ - 2 \pi ( n + 1 ) x  } \\
= \sum _{ n = 0  } ^\infty \frac { 1  } { 2 \pi ( n + 1 )  } \int _0 ^{ + \infty  } e ^{ - 2 \pi ( n + 1 ) x  } \mathrm { d  } x \\
= \sum _{ n = 0  } ^\infty \frac { 1  } { 4 \pi ^2 ( n + 1 ) ^2  } \\
= \frac { 1  } { 24  } 
\end{aligned}</script><p>其中中间的交换积分号和求和号是源于所有的部分和都可以小于等于$g ( x ) $,并且$\int _0 ^{ \infty  } g $收敛.</p>
<h6><span id="example14">Example14</span></h6><p>求$\int _0 ^1 \frac { \ln ( 1 + x )  } { x  } \mathrm { d  } x $.</p>
<p>直接展开对吧,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^1 \frac { \ln ( 1 + x )  } { x  } \mathrm { d  } x \\
& = \int _0 ^1 \sum _{ n = 1  } ^\infty \frac { ( - 1 ) ^{ n - 1  } x ^{ n - 1  }  } { n  } \\
& = \sum _{ n = 1  } ^\infty \int _0 ^1 \frac { ( - 1 ) ^{ n - 1  } x ^{ n - 1  }  } { n  } \mathrm { d  } x \\
& = \sum _{ n = 1  } ^\infty \frac { ( - 1 ) ^{ n - 1  }  } { n ^2  } \\
& = \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n - 1 ) ^2  } - \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^2  } \\
& = \sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } - 2 \sum _{ n = 1  } ^\infty \frac { 1  } { ( 2 n ) ^2  } \\
& = \frac { 1  } { 2  } \sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } \\
& = \frac { \pi ^2  } { 12  } 
\end{aligned}</script><h6><span id="example15">Example15</span></h6><p>设$I $是开区间,$f \in C ^\infty ( I ) $,求证$f \in C ^\omega ( I ) $当且仅当$\forall x _0 \in I , \exists M , B , r &gt; 0 $,使得$\forall | x - x _0 | &lt; r , | f ^{ ( n )  } ( x ) | \leq MB ^n n ! $.就是说对于区间内任何一个点,在它的小邻域处,任意阶导数都可以被和$n $有关的一个速率控制住.</p>
<p>充分性比较简单,考虑取$S ( x ) = \sum \frac { f ^{ ( n )  } ( x _0 )  } { n !  } ( x - x _0 ) ^n $对其取$| \sqrt [n ] { \frac { f ^{ ( n )  } ( x _0 )  } { n !  }  } | \leq \sqrt [n ] { MB ^n  } = \sqrt [n ] { M  } B &lt; + \infty $,所以总之收敛半径不为$0 $.那就总能取一个足够小的$r &lt; \frac { 1  } { B  } $.此时用泰勒展开的拉格朗日余项:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\left | f ( x ) - \sum _{ k = 0  } ^n \frac { f ^{ ( k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k \right | & = \left | \frac { f ^{ ( n + 1 )  } ( \xi )  } { ( n + 1 ) !  } ( x - x _0 ) ^{ n + 1  } \right | \\
& \leq | B ^{ n + 1  } ( x - x _0 ) ^{ n + 1  } M | \\
& \leq | ( Br ) ^{ n + 1  } M | \to 0 
\end{aligned}</script><p>这就搞定.</p>
<p>接下来是必要性.考虑$\varlimsup _{ n \to \infty  } \sqrt [n ] { | \frac { f ^{ ( n )  } ( x _0 ) |  } { n !  }  } = \frac { 1  } { R  } &gt; 0 $,那就可以取$0 &lt; r &lt; M &lt; R $,存在一个$N $,使得$\forall n \geq N $都有$| f ^{ ( n )  } ( x _0 ) | \leq n ! ( \frac { 1  } { M  } ) ^n $.</p>
<p>接下来想要把这个性质挪到$x _0 $周围小邻域上对吧.于此我们考虑先逼近后逐项求导:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f ^{ ( n )  } ( x ) | & = | \sum _{ k = 0  } ^\infty \frac { f ^{ ( n + k )  } ( x _0 )  } { k !  } ( x - x _0 ) ^k | \\
& \leq \sum _{ k = 0  } ^\infty \frac { | f ^{ ( n + k )  } ( x _0 ) |  } { k !  } | x - x _0 | ^k \\
& \leq \sum _{ k = 0  } ^\infty \frac { ( n + k ) !  } { k ! M ^{ n + k  }  } r ^k \\
& = \frac { n !  } { M ^n  } \sum _{ k = 0  } ^\infty \frac { ( n + k ) ^{ \underline { k  }  }  } { k !  } ( \frac { r  } { M  } ) ^k \\
& = \frac { n !  } { M ^n  } \sum _{ k = 0  } ^\infty \frac { ( - n - 1 ) ^{ \underline { k  }  }  } { k !  } ( \frac { - r  } { M  } ) ^k \\
& = \frac { n !  } { M ^n  } ( 1 - \frac { r  } { M  } ) ^{ - n - 1  } \\
& = Mn ! ( M - r ) ^{ - ( n + 1 )  } 
\end{aligned}</script><p>这就搞定了.</p>
<h6><span id="example16">Example16</span></h6><p>若非常数$f $在$( a , b ) $的每一点都解析,则其零点集在$( a , b ) $内无聚点.</p>
<p>考虑如果一个点$c \in ( a , b ) $是$f $的聚点的话,那么$c $一定是$f $的任意阶导数的聚点.由于任意阶导数都是连续的,因此$c $处的任意阶导数都是$0 $.又因为$f $解析,所以$c $周围的一个小邻域必然全部为$0 $.既如此取最长的小邻域为$( \alpha , \beta ) $,下面我们证明$( \alpha , \beta ) = ( a , b ) $,不妨假设$a \ne \alpha $,由于连续性得知$f $在$[ \alpha , \beta ) $上取值为$0 $,然而这意味着$\alpha $必然也是零点集的聚点,因此它还可以继续往左延申一个小邻域,这就与$a $是最靠左的矛盾了.</p>
<p>不过这个做法不能推广到复平面上,原因是平面上的介值定理难搞一点啊.</p>
<p>提供另一种证明方法,考虑$f $在$( a , b ) $上的零点的聚点$x _0 $,如果$x _0 $的任意阶导数都是$0 $的话,那还是按照上面一样往外面扩就行了对吧.反之,设$f ( x _0 ) = f ^{ ( 1 )  } ( x _0 ) = \cdots = f ^{ ( N - 1 )  } ( x _0 ) = 0 , f ^{ ( N )  } ( x _0 ) \ne 0 $,此时考虑$f ( x ) = ( x - x _0 ) ^{ N + 1  } \sum _{ n = 0  } ^\infty \frac { f ^{ ( N + n + 1 )  }  } { ( N + n + 1 ) !  } ( x - x _0 ) ^n $,不妨设$g ( x ) = \sum _{ n = 0  } ^\infty \frac { f ^{ ( N + n + 1 )  }  } { ( N + n + 1 ) !  } ( x - x _0 ) ^n $,容易发现$g ( x _0 ) \ne 0 $,既然如此,$g $肯定在$x _0 $的一个小邻域(要与解析的那个邻域取交)上非$0 $,设为$( x _0 - \delta , x _0 + \delta ) $上非零,可这样$f ( x ) $在$( x _0 - \delta , x _0 ) \cup ( x _0 , x _0 + \delta ) $上必然非零,这与$x _0 $是零点聚点矛盾了.</p>
<h5><span id="多项式逼近">多项式逼近</span></h5><p>如果对于函数$f ( x ) : [ a , b ] \to \mathbb { R  } $,存在一个多项式列可以一致收敛到$f ( x ) $,则称其可以被多项式<strong>一致逼近</strong>.容易见到一个必要条件是$f ( x ) \in C [ a , b ] $.</p>
<p>事实上我们有<strong>维尔斯特拉斯定理</strong>:有界闭区间上的连续函数可由多项式一致连续逼近.首先不妨假设$[ a , b ] = [ 0 , 1 ] $.下面给出两种证明:</p>
<p>其一是构造性证明,我们有<strong>Bernstein多项式</strong>:</p>
<script type="math/tex; mode=display">
B _n ( f ) = \sum _{ p = 0  } ^n \binom { n  } { p  } f ( \frac { p  } { n  } ) x ^p ( 1 - x ) ^{ n - p  }</script><p>这个多项式有很多性质,首先随便放缩一下就知道这个多项式在$[ 0 , 1 ] $上有界,更具体地有$\min f \leq B _n \leq \max f $,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
B _n ( f ) & \leq \sum _p \binom { n  } { p  } f ( \frac { p  } { n  } ) x ^p ( 1 - x ) ^{ n - p  } \\
& \leq ( \max f ) \sum _p \binom { n  } { p  } x ^p ( 1 - x ) ^{ n - p  } \\
& = \max f 
\end{aligned}</script><p>另一边同理.</p>
<p>其次有$\deg ( B _n ) \leq n $.以及这个甚至是$f $的线性映射,或言$B _n ( \alpha f + \beta g ) = \alpha B _n ( f ) + \beta B _n ( g ) $.</p>
<p>取$r _p ( x ) = \binom { n  } { p  } x ^p ( 1 - x ) ^{ n - p  } $,注意到:</p>
<ol>
<li><p>$\sum _p r _p ( x ) = 1 $.</p>
</li>
<li><p>$\sum _p pr _p ( x ) = nx $.</p>
</li>
<li><p>$\sum _p p ( p - 1 ) r _p ( x ) = n ( n - 1 ) x ^2 $.</p>
</li>
<li><p>$\sum _p p ^2 r _p ( x ) = n ( n - 1 ) x ^2 + nx $.</p>
</li>
<li><p>$\sum _{ p = 0  } ^n ( p - nx ) ^2 r _p ( x ) \leq \frac { n  } { 4  } $.</p>
</li>
</ol>
<p>前四条类似,以(3)为例,证明的话考虑对$( x + y ) ^n = \sum _p \binom { n  } { p  } x ^p y ^{ n - p  } $两边对$x $求两次导数:</p>
<script type="math/tex; mode=display">
n ( n - 1 ) x ^2 ( x + y ) ^{ n - 2  } = \sum _p ^n \binom { n  } { p  } p ( p - 1 ) x ^p y ^{ n - p  }</script><p>带入$y = 1 - x $即可.</p>
<p>(5)的话也只需要计算,观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ p = 0  } ^n ( p - nx ) ^2 r _p ( x ) \\
& = \sum _p p ^2 r _p - 2 nx \sum _p pr _p + n ^2 x ^2 \sum r _p \\
& = n ( n - 1 ) x ^2 + nx - 2 n ^2 x ^2 + n ^2 x ^2 \\
& = nx ( 1 - x ) & \leq \frac { n  } { 4  } 
\end{aligned}</script><p>我们见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| B _n ( f ) - f | & = \left | \sum _{ p = 0  } ^n \binom { n  } { p  } f ( \frac { p  } { n  } ) x ^p ( 1 - x ) ^{ n - p  } - \sum _{ p = 0  } ^n \binom { n  } { p  } f ( x ) x ^p ( 1 - x ) ^{ n - p  } \right | \\
& \leq \sum _{ p = 0  } ^n \binom { n  } { p  } | f ( \frac { p  } { n  } ) - f ( x ) | x ^p ( 1 - x ) ^{ n - p  } \\

\end{aligned}</script><p>既然$f ( x ) $闭区间上连续则有一致连续,$\forall \epsilon &gt; 0 $,取$\delta &gt; 0 $,使得只要$| x - x ‘ | &lt; \delta , | f ( x ) - f ( x ‘ ) | &lt; \frac { \epsilon  } { 2  } $,那有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| B _n ( f ) - f | & \leq \sum _{ p = 0  } ^n \binom { n  } { p  } | f ( \frac { p  } { n  } ) - f ( x ) | x ^p ( 1 - x ) ^{ n - p  } \\
& = \sum _{ | \frac { p  } { n  } - x | < \delta  } ^n \binom { n  } { p  } | f ( \frac { p  } { n  } ) - f ( x ) | x ^p ( 1 - x ) ^{ n - p  } + \sum _{ | \frac { p  } { n  } - x | \geq \delta  } ^n \binom { n  } { p  } | f ( \frac { p  } { n  } ) - f ( x ) | x ^p ( 1 - x ) ^{ n - p  } \\
& \leq \frac { \epsilon  } { 2  } + \frac { 2 \max | f |  } { n ^2 \delta ^2  } \sum _{ p = 0  } ^n ( p - nx ) ^2 r _p ( x ) \\
& \leq \frac { \epsilon  } { 2  } + \frac { \max | f |  } { 2 n \delta ^2  } 
\end{aligned}</script><p>倒数第二步是由于当$| \frac { p  } { n  } - x | \geq \delta $,所以$\frac { ( p - nx ) ^2  } { n ^2 \delta ^2  } \geq 1 $.</p>
<p>最后一步是因为当$\epsilon $确定的时候,$\delta $就已经确定了,然而$n $可以足够大,这就控制住了.</p>
<p>再给另一个存在性证明.回忆到$[ a , b ] $上的连续函数组成的集合$C [ a , b ] $是一个完备线性空间.称$A \subseteq C [ a , b ] $是一个<strong>代数</strong>当且仅当$\forall f , g \in A $,$\forall c \in \mathbb { R  } $,$f + g , fg , cf \in A $.容易见到如果$P $是一个有限项多项式,$f \in A $,则$P ( f ) \in A $.</p>
<p>在此基础上定义$\bar { A  } $为$A $的<strong>闭包</strong>,定义为:</p>
<script type="math/tex; mode=display">
\bar { A  } = \{ f \in C [ a , b ] | \exists \{ f _n \} \in A , f _n \rightrightarrows f \}</script><p>容易见到$A \subseteq \bar { A  } $.而且容易见到$\bar { A  } $肯定也是一个代数.而见到$\overline { ( \bar { A  } )  } = \bar { A  } $,原因是柯西列导出的已经是闭的了,无法再往外拓展.</p>
<p>回忆到绝对值函数可以由多项式函数逼近,所以如果$f \in \bar { A  } $,则$| f | \in \bar { A  } $.更进一步,如果$f , g \in \bar { A  } $,由于$\max ( f , g ) = \frac { f + g  } { 2  } + \frac { | f - g |  } { 2  } $,所以$\max ( f , g ) \in \bar { A  } $,同理$\min ( f , g ) \in \bar { A  } $.</p>
<p>我们有一个定理说:设$A \subseteq C [ a , b ] $是一个代数,并且$f ( x ) = c \in A $.并且$\forall x , y \in [ a , b ] , x \ne y , \exists f \in A , f ( x ) \ne f ( y ) $则$\bar { A  } = C [ a , b ] $.容易见到这个定理强于维尔斯特拉斯定理.这个定理叫<strong>Stone-Weierstrass定理</strong>.</p>
<p>下面我们来证明这个结论.</p>
<p>先搞一个引理:$\forall x _1 , x _2 \in [ a , b ] , x _1 \ne x _2 , \forall \alpha , \beta \in \mathbb { R  } $,则$\exists h \in A , h ( x _1 ) = \alpha , h ( x _2 ) = \beta $.</p>
<p>证明的话,考虑由已知$\exists \varphi \in A , \varphi ( x _1 ) \ne \varphi ( x _2 ) $.此时把这个函数给挪一下,取$h ( x ) = \alpha + ( \beta - \alpha ) \frac { \varphi ( x ) - \varphi ( x _1 )  } { \varphi ( x _2 ) - \varphi ( x _1 )  } $.(其实这个应该是双传递性,但是我目前没看出如何用双传递性来解释证明过程.)</p>
<p>接下来考虑证明原定理,来证明$\forall f \in C [ a , b ] , \forall n , \exists g _n \in \bar { A  } , | f ( x ) - g _n ( x ) | &lt; \frac { 1  } { n  } $,由于我们刚才的引理,$\forall x , y \in [ a , b ] , \exists h _{ x , y  } ( z ) \in A , h _{ x , y  } ( x ) = f ( x ) , h _{ x , y  } ( y ) = f ( y ) $.这个函数由$x , y $所确定.</p>
<p>固定$x $不动,对$\forall y \in [ a , b ] $,$\exists \delta = \delta ( y ) $,由于一致连续性,当$z \in I _y = ( y - \delta , y + \delta ) $的时候,$h _{ x , y  } ( z ) &lt; f ( z ) + \frac { 1  } { n  } $.而这里的$I _y $构成了一个开覆盖(边界上可能需要挪一下,但反正能做到),用有限覆盖定理拿到有限个区间$I _{ y _1 ,  } , \cdots , I _{ y _m  } $覆盖了$[ a , b ] $.此时取$h _x ( z ) = \min \{ h _{ x , y _1  } , \cdots , h _{ x , y _m  } \} $,见到$h _x ( z ) &lt; f ( z ) + \frac { 1  } { n  } , \forall z \in [ a , b ] $.而且$h _x ( x ) = f ( x ) $.</p>
<p>既然$h _x ( x ) = f ( x ) $,考虑$\exists \delta , I _x = ( x - \delta , x + \delta ) $使得$h _x ( z ) &gt; f ( z ) - \frac { 1  } { n  } , \forall z \in I _x $.对此再做有限覆盖得到$h _{ x _1  } , \cdots , h _{ x _l  } $,取$g _n = \max \{ h _{ x _1  } , \cdots , h _{ x _l  } \} $.显然:</p>
<script type="math/tex; mode=display">
f ( z ) - \frac { 1  } { n  } < g _n ( z ) < f ( z ) + \frac { 1  } { n  }</script><p>搞定了.</p>
<p>那么,这个多项式能不能再来点限制呢?比如说我不许在多项式里出现$x ^2 $项可以吗?也可以.考虑$f \in C [ a , b ] $,则$f ( x ^{ \frac { 1  } { 3  }  } ) \in C [ a ^{ \frac { 1  } { 3  }  } , b ^{ \frac { 1  } { 3  }  } ] $,所以存在一个多项式$P ( x ) \rightrightarrows f ( x ^{ \frac { 1  } { 3  }  } ) $,意味着$P ( x ^3 ) \rightrightarrows f ( x ) , x \in [ a , b ] $.而$P ( x ^3 ) $当然没有$x ^2 $项.</p>
<p>也就是说这些多项式很多都是浪费的.那么有没有一个非常厉害的结论能告诉我什么样的多项式可以呢?考虑在$[ 0 , 1 ] $上,$\mathrm { Span  } \{ 1 , x ^{ \lambda _1  } , \cdots \} $张成的多项式,其中$0 &lt; \lambda _1 &lt; \lambda _2 &lt; \cdots $,其中$\lambda _n \to \infty $.注意这里不要求$\lambda _i $是整数,如果其闭包能张成$C [ 0 , 1 ] $,当且仅当$\sum \frac { 1  } { \lambda _i  } = + \infty $.这被称为<strong>Muntz定理</strong>,(其一个更强的推广是去掉$\lambda _n \to \infty $的结论,取而代之的是需要满足$\sum \frac { \lambda _i  } { 1 + \lambda _i ^2  } = + \infty $)</p>
<p>这个定理的必要性我们目前难以证明,先证明其充分性.</p>
<p>考虑$\forall m \in \mathbb { N  } _+ \setminus \{ \lambda _i \} $,都可以定义一个函数列,其中$Q _0 ( x ) = x ^m , Q _n ( x ) = ( \lambda _n - m ) x ^{ \lambda _n  } \int _x ^1 Q _{ n - 1  } ( t ) t ^{ - 1 - \lambda _n  } \mathrm { d  } t $.我们先证明$Q _n $一定长成$x ^m - \sum _{ i = 1  } ^n a _{ n , i  } x ^{ \lambda _i  } $的形式.</p>
<p>数学归纳证明此结论,设$Q _n = x ^m - \sum _{ i = 1  } ^n a _{ n , i  } x ^{ \lambda _i  } $,来看$Q _{ n + 1  } $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Q _{ n + 1  } ( x ) & = ( \lambda _{ n + 1  } - m ) x ^{ \lambda _{ n + 1  }  } \int _x ^1 Q _{ n  } ( t ) t ^{ - 1 - \lambda _{ n + 1  }  } \mathrm { d  } t \\
& = ( \lambda _{ n + 1  } - m ) x ^{ \lambda _{ n + 1  }  } \int _x ^1 ( t ^m - \sum _{ i = 1  } ^n a _{ n , i  } t ^{ \lambda _i  } ) t ^{ - 1 - \lambda _{ n + 1  }  } \mathrm { d  } t \\

\end{aligned}</script><p>后面那部分直接积出来就是了,然后前面有一个$\lambda _{ n + 1  } $,这样就搞定了.</p>
<p>下面定义一个函数的模长$\Vert Q \Vert = \max _{ [ 0 , 1 ]  } | Q ( x ) | $,此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| Q _n ( x ) | & \leq | \lambda _n - m | x ^{ \lambda _n  } \Vert Q _{ n - 1  } \Vert \int _x ^1 t ^{ - 1 - \lambda _n  } \mathrm { d  } t \\
& = | \lambda _n - m | x ^{ \lambda _n  } \cdot \Vert Q _{ n - 1  } \Vert \frac { x ^{ - \lambda _n  } - 1  } { \lambda _n  } \\
& = | 1 - \frac { m  } { \lambda _n  } | \cdot \Vert Q _{ n - 1  } \Vert ( 1 - x ^{ \lambda _n  } ) \\
& \leq | 1 - \frac { m  } { \lambda _n  } | \cdot \Vert Q _{ n - 1  } \Vert \\
& \leq \prod _{ i = 1  } ^n | 1 - \frac { m  } { \lambda _i  } | 
\end{aligned}</script><p>然而回忆到$\sum \frac { 1  } { \lambda _i  } $发散.所以后面那个连乘积必然发散,但是容易见到$m $取死后,其从$\lambda _i &gt; m $的时候就是单调递减的,那又发散必然知道其趋近于$0 $.所以$\lim \Vert Q _n \Vert = 0 $.那又回忆到$Q _n = x ^m - \sum _{ i = 1  } ^n a _{ n , i  } x ^{ \lambda _i  } $,这已经说明$x ^m $可以被$\{ x ^{ \lambda _i  } \} $一致逼近,原命题充分性搞定.</p>
<p>现在来看固定在$\lambda _i \in \mathbb { N  } _+ $的情形,能否给出一个充要条件呢?我们下面证明对于互异的$\{ \lambda _i \} \in \mathbb { N  } _+ $,$C [ a , b ] = \overline \mathrm { span  } \{ x ^{ \lambda _i  } , 1 \} $的充要条件是:</p>
<ol>
<li><p>如果$0 \notin ( a , b ) $,当$\sum \frac { 1  } { \lambda _i  } = + \infty $.</p>
</li>
<li><p>如果$a &lt; 0 &lt; b $,要求$\sum _{ \lambda _i \in \mathrm { even  }  } \frac { 1  } { \lambda _i  } = + \infty , \sum _{ \lambda _i \in \mathrm { odd  }  } \frac { 1  } { \lambda _i  } = + \infty $.</p>
</li>
</ol>
<p>先证这个命题的充分性,对于$0 \notin ( a , b ) $,不妨设$0 \leq a &lt; b = 1 $,容易发现此时的确满足$\lim \lambda _n = + \infty $而且$\sum _i \frac { 1  } { \lambda _i  } = + \infty $,这就搞定了.</p>
<p>对于$a &lt; 0 &lt; b $,我们只要证明在$C [ - 1 , 1 ] $上的函数都可以被一致逼近即可对吧.考虑$g _1 ( x ) = \frac { f ( x ) + f ( - x )  } { 2  } $是其偶函数部分,自然可以被偶次的部分逼近(原因是只需要逼近$[ 0 , 1 ] $上就可以延拓).反之亦然同理,$g _2 ( x ) = \frac { f ( x ) - f ( - x )  } { 2  } $也可以被奇数次的部分逼近并且延拓,这也就搞定.</p>
<p>回忆到如果一个函数如果在一个无穷区间上可以被有限次多项式一致逼近,用柯西准则做那个函数列就可以证明这个函数一定是一个多项式.下面我们来推广这个结论.</p>
<p>设$V $是一个内积空间,其中$g , f _1 , \cdots , f _n \in V $是其中的$n $个向量,设$E = \mathrm { Span  } \{ f _1 , \cdots , f _n \} $,回忆到$g $到$E $的距离定义为:</p>
<script type="math/tex; mode=display">
d = \min _{ p \in E  } \Vert g - p \Vert = \sqrt { \cfrac { G ( g , f _1 , \cdots , f _n )  } { G ( f _1 , \cdots , f _n )  }  }</script><p>其中$G ( f _1 , \cdots , f _n ) = \det | ( f _i | f _j ) | $.</p>
<p>而考虑取两列数列$\{ \alpha _i \} , \{ \beta _j \} $,回忆到李文威考试题给出过:</p>
<script type="math/tex; mode=display">
\det ( \frac { 1  } { \alpha _i + \beta _j  } ) = \cfrac { \prod _{ 1 \leq i < j \leq n  } ( \alpha _j - \alpha _i ) ( \beta _j - \beta _i )  } { \prod _{ 1 \leq i , j \leq n  } ( \alpha _i + \beta _j )  }</script><p>又回忆到$C [ 0 , 1 ] $也是一个内积空间,可以定义$( f | g ) = \int _0 ^1 fg \mathrm { d  } x $.容易见到$( x ^a | x ^b ) = \frac { 1  } { a + b + 1  } $.现在我们就可以用上面的行列式硬算了.考虑取$E = \mathrm { span  } \{ x ^{ \lambda _1  } , \cdots , x ^{ \lambda _n  } \} $,取$d = ( x ^{ \lambda  } , E ) $,容易见到:</p>
<script type="math/tex; mode=display">
d ( x ^\lambda , E ) = \frac { 1  } { \sqrt { 2 \lambda + 1  }  } \prod _{ i = 1  } ^n \left | \frac { \lambda - \lambda _i  } { \lambda + \lambda _i + 1  } \right |</script><p>下面我们引进一个引理:</p>
<p>对于数列$\{ \lambda _i \} &gt; 0 $且单增,如果$c = \inf _{ i \geq 1  } \{ \lambda _{ i + 1  } - \lambda _i \} &gt; 0 $,如果$\sum _{ i = 1  } ^\infty \frac { 1  } { \lambda _i  } &lt; \infty $,则$\lim _{ m \to \infty  } \frac { 1  } { \lambda _m  } \sum _{ i = 1 , i \ne m  } ^\infty \ln \left | \frac { \lambda _i + \lambda _m  } { \lambda _i - \lambda _m  } \right | = 0 $.</p>
<p>这个定理的详细证明较为麻烦,而且与主线无关,将在下述Example3处讲解.</p>
<p>考虑取$P ( x ) \in \mathrm { Span  } _{ i \ne m  } \{ x ^{ \lambda _i  } \} $,由于子空间只有有限项非零,所以$\exists n $使得$P ( x ) \in E = \mathrm { Span  } _{ i \ne m , i \leq n  } \{ x ^{ \lambda _i  } \} $,此时观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
d ( x ^{ \lambda _m  } , P ( x ) ) \\
& \geq d ( x ^\lambda _m , E ) \\
& = \frac { 1  } { \sqrt { 2 \lambda _m + 1  }  } \prod _{ i = 1 , i \ne m  } ^n \left | \frac { \lambda _m - \lambda _i  } { \lambda _m + \lambda _i + 1  } \right | \\
& \geq \frac { 1  } { \sqrt { 2 \lambda _m + 1  }  } \prod _{ i = 1 , i \ne m  } ^{ \infty  } \left | \frac { \lambda _m - \lambda _i  } { \lambda _m + \lambda _i + 1  } \right | \\

\end{aligned}</script><p>由上述引理,我们知道最后那一项取$\ln $后是一个$o ( \lambda _m ) $的东西,不妨将后面那一项记作$e ^{ - l _m \lambda _m  } $,其中$l _m &gt; 0 , \lim _{ m \to \infty  } l _m = 0 $.</p>
<p>为了简化说明引进$\lambda _0 = 0 $,</p>
<p>再来一个引理:对$\forall \epsilon &gt; 0 $,$\exists C _\epsilon &gt; 0 $,满足$\forall P ( x ) \in \mathrm { Span  } _{ i \geq 0  } \{ x ^{ \lambda _i  } \} , \lambda _0 = 0 $,不妨设$P ( x ) = \sum _{ i = 0  } ^n a _i x ^{ \lambda _i  } $,我们有$| a _m | \leq C _\epsilon ( 1 + \epsilon ) ^{ \lambda _m  } \Vert P \Vert $.</p>
<p>注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { P ( x )  } { a _m  } & = x ^{ \lambda _i  } + \sum _{ i \leq n , i \ne m  } ^n \frac { a _i  } { a _m  } x ^{ \lambda _m  } \\
\frac { \Vert P ( x ) \Vert  } { | a _m |  } & \geq d ( x ^{ \lambda _m  } , E ) & \geq e ^{ - l _m \lambda _m  } \\
| a _m | & \leq e ^{ l _m \lambda _m  } \Vert P ( x ) \Vert 
\end{aligned}</script><p>而当$m $充分大的时候,当然有$e ^{ l _m  } \leq 1 + \epsilon $,这就证毕了.</p>
<p>万事俱备,下面我们来证明必要性:办法是使用反证法,假设$f \in C [ 0 , 1 ] $,当$\lambda _0 = 0 , \sum _{ i = 1  } ^\infty \frac { 1  } { \lambda _i  } &lt; \infty $时,并且$P _n ( x ) = \sum _{ i = 0  } ^n a _{ i , n  } x ^{ \lambda _i  } \rightrightarrows f ( x ) $.则当然也有$\Vert P _n \Vert \to \Vert f \Vert $,那$\Vert P _n \Vert $就有界了,既然如此,$a _{ i , n  } \leq C _\epsilon ( 1 + \epsilon ) ^{ \lambda _i  } $,也就是说所有的$a _{ i , n  } $都是有界的.</p>
<p>我们想要求出一个子列$\{ n _k \} $,使得$\forall i , \lim _{ k \to \infty  } a _{ i , n _k  } $收敛于某个数$a _i $,方法是对角线法则,对于第一行其肯定存在收敛子列,取其第一个数为$n _1 $,对于第二行,在第一行对应下来的元素中肯定也有收敛子列,取其第一个元素作为$n _2 $,依次类推.这样我们就得到了一个新的函数列$P _{ n _k  } \to g ( x ) = \sum _{ i = 0  } ^\infty a _i x ^{ \lambda _i  } $.此时考虑$\varlimsup \sqrt [\lambda _i ] { | a _i |  } \leq 1 + \epsilon $,因此$g ( x ) $收敛半径$\geq 1 $.然而,$P _{ n _k  } \to f ( x ) $,因此$f ( x ) = g ( x ) $.然而$g ( x ) $的收敛半径$\geq 1 $,因此一般的函数当然不能被一致逼近.</p>
<p>另一个问题是如果$a &lt; 0 &lt; b $该怎么办,接下来假设$\sum _{ \lambda _i \in \mathrm { even  }  } \frac { 1  } { \lambda _i  } &lt; \infty $.放缩一下边界,我们下面来证明此时不能逼近$C [ - 1 , 1 ] $上的偶函数.</p>
<p>假设$f \in C [ - 1 , 1 ] $并且是偶函数,对于一列函数列,可以拆成偶函数$g _n $和奇函数$h _n $部分,前者只包含偶数次后者只包含奇数次.此时有$g _n + h _n \rightrightarrows f $,由于是偶函数,换号得到$g _n - h _n \rightrightarrows f $,这就必然得到$g _n \rightrightarrows f $,但$g _n $并不能逼近所有的,这就矛盾了.</p>
<h6><span id="example1">Example1</span></h6><p>若$f ( x ) $在无穷区间上可以用多项式一致逼近,求证$f $为多项式.</p>
<p>考虑多项式列$\{ P _n \} $上有柯西准则,所以当$N $足够大的时候,$\forall n , m \geq N $,$\sup | P _n - P _m | $足够小,然而由于无穷区间,如果$\deg ( P _n - P _m ) &gt; 0 $就完蛋了,所以从某一项开始,这个多项式列的两两之间一定之差一个常数.不妨干脆设$P _n = P + c _n $的形式,既然$P _n $收敛,那么$c _n $肯定收敛,设其收敛于$c $,则$f ( x ) = P + c $.</p>
<h6><span id="example2">Example2</span></h6><p>若$f \in C [ a , b ] $,$\{ p _n \} \rightrightarrows f $,并且$\{ p _n \} $为次数一致有界的多项式列,求证$f $为多项式.</p>
<p>设次数上界为$n $,一个想法是说我这些多项式是有限多个的,你直接拿切比雪夫多项式作为基,既然现在都是有限和的情况了,那在线性空间上收敛当然是在每一个基对应的系数都收敛,这就意味着$f $肯定是多项式.</p>
<h6><span id="example3lemma">Example3(Lemma)</span></h6><p>对于数列$\{ \lambda _i \} &gt; 0 $且单增,如果$c = \inf _{ i \geq 1  } \{ \lambda _{ i + 1  } - \lambda _i \} &gt; 0 $,如果$\sum _{ i = 1  } ^\infty \frac { 1  } { \lambda _i  } &lt; \infty $,则$\lim _{ m \to \infty  } \frac { 1  } { \lambda _m  } \sum _{ i = 1 , i \ne m  } ^\infty \ln \left | \frac { \lambda _i + \lambda _m  } { \lambda _i - \lambda _m  } \right | = 0 $.</p>
<p>考虑证明,由于每一项都是正的,因此我们分别证明后面的无穷和部分在$[ 1 , m - 1 ] $和$[ m + 1 , + \infty ) $上均为$0 $.</p>
<p>思路呼之欲出,将$\lambda _i $按照与$\lambda _m $的比例分为两段:任意取定常数$\epsilon &gt; 0 $,下面开始分析.</p>
<p>设当$i \geq N _1 $的时候有$\lambda _i \geq ( 1 - \epsilon ) \lambda _m $成立,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ N _1 - 1  } \ln ( 1 + \frac { 2 \lambda _i  } { \lambda _m - \lambda _i  } ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ N _1 - 1  } \frac { 2 \lambda _i  } { \lambda _m - \lambda _i  } \\
& = \sum _{ i = 1  } ^{ N _1 - 1  } \frac { 2 \lambda _i  } { ( \lambda _m - \lambda _i ) \lambda _m  } \\
& = 2 \sum _{ i = 1  } ^{ N _1 - 1  } ( \frac { 1  } { \lambda _m - \lambda _i  } - \frac { 1  } { \lambda _m  } ) \\
& \leq 2 \sum _{ i = 1  } ^{ N _1 - 1  } \frac { 1  } { \epsilon \lambda _m  } - \frac { 1  } { \lambda _m  } \\
& = \frac { N _1 - 1  } { \lambda _m  } ( \frac { 2  } { \epsilon  } - 1 ) \\
& \leq \frac { m  } { \lambda _m  } ( \frac { 2  } { \epsilon  } - 1 ) 
\end{aligned}</script><p>然而注意到$\{ \frac { 1  } { \lambda _m  } \} $单调递减,用柯西准则得到:</p>
<script type="math/tex; mode=display">
\sum _{ k = m + 1  } ^{ 3 m  } \frac { 1  } { \lambda _k  } \geq \frac { m  } { \lambda _{ 2 m  }  }</script><p>所以得到$\lim _{ m \to + \infty  } \frac { m  } { \lambda _m  } \to 0 $.</p>
<p>然后考虑设$i &gt; N _2 $时有$( 1 + \epsilon ) \lambda _m \leq \lambda _i $,设$( 1 + \epsilon ) = \frac { 1  } { 1 - \epsilon _2  } $,则$\lambda _m \leq ( 1 - \epsilon _2 ) \lambda _i $留神到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = N _2 + 1  } ^{ + \infty  } \ln ( 1 + \frac { 2 \lambda _m  } { \lambda _i - \lambda _m  } ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = N _2 + 1  } ^{ + \infty  } \frac { 2 \lambda _m  } { \lambda _i - \lambda _m  } \\
& = \sum _{ i = N _2 + 1  } ^{ + \infty  } \frac { 2  } { \lambda _i - \lambda _m  } \\
& \leq \sum _{ i = N _2 + 1  } ^{ + \infty  } \frac { 4  } { \epsilon _2 \lambda _i  } \\
& \leq \sum _{ i = m  } ^{ + \infty  } \frac { 4  } { \epsilon _2 \lambda _i  } \\

\end{aligned}</script><p>由柯西准则就可以知道其趋近于$0 $.</p>
<p>由上面的分析见到如果预先取定$\epsilon $,再移动$m $,开头结尾两端都可以尽可能小对吧.最后我们要做的就是中间很靠近$\lambda _m $的两段了,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = N _1  } ^{ m - 1  } \ln ( \frac { 2 \lambda _m  } { \lambda _m - \lambda _i  } - 1 ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = N _1  } ^{ m - 1  } \ln ( \frac { 2 \lambda _m  } { c ( m - i )  } - 1 ) \\

\end{aligned}</script><p>不妨设$M = m - N _1 $,上式变为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = N _1  } ^{ m - 1  } \ln ( \frac { 2 \lambda _m  } { c ( m - i )  } - 1 ) \\
& = \frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ N  } \ln ( \frac { 2 \lambda _m  } { ic  } - 1 ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ N  } \ln ( \frac { 2 \lambda _m  } { ic  } ) \\

\end{aligned}</script><p>而</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = m + 1  } ^{ N _2  } \ln ( 1 + \frac { 2 \lambda _m  } { \lambda _i - \lambda _m  } ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = m + 1  } ^{ N _2  } \ln ( 1 + \frac { 2 \lambda _m  } { c ( i - m )  } ) \\
& \leq \frac { 1  } { \lambda _m  } \sum _{ i = m + 1  } ^{ N _2  } \ln ( \frac { 2 \lambda _m + cm  } { c ( i - m )  } ) 
\end{aligned}</script><p>然而$\frac { m  } { \lambda _m  } \to 0 $,于是后面的主要项仍是$\ln ( \frac { \lambda _m  } { ic  } ) $形状,而考虑$\max ( N _2 - m , m - N _1 ) \leq \frac { \epsilon \lambda _m  } { c  } $,接下来只要证明:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln ( \frac { \lambda _m  } { ic  } ) \to 0</script><p>就做完了对吧,发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln ( \frac { \lambda _m  } { ic  } ) & = \frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln ( \lambda _m ) - \frac { 1  } { \lambda _m  } \sum _{ i = 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln ( ic ) \\
& = \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) - \frac { 1  } { \lambda _m  } \sum _{ i = 2  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln ( i ) \\
& = \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) - \frac { 1  } { \lambda _m  } \sum _{ i = 2  } ^{ \lfloor \frac { \epsilon \lambda _m  } { c  } \rfloor  } \int _{ i - 1  } ^{ i  } \ln ( i ) \mathrm { d t  } \\
& \leq \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) - \frac { 1  } { \lambda _m  } \int _{ 1  } ^{ \frac { \epsilon \lambda _m  } { c  } - 1  } \ln t \mathrm { d t  } \\
& = \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) - \frac { 1  } { \lambda _m  } \int _{ 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln t \mathrm { d t  } + \frac { 1  } { \lambda _m  } \int _{ \frac { \epsilon \lambda _m  } { c  } - 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln t \mathrm { d  } t \\
& \leq \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) - \frac { 1  } { \lambda _m  } \int _{ 1  } ^{ \frac { \epsilon \lambda _m  } { c  }  } \ln t \mathrm { d t  } + \frac { \ln ( \frac { \epsilon \lambda _m  } { c  } )  } { \lambda _m  } \\
& = \frac { \epsilon  } { c  } \ln ( \frac { \lambda _m  } { c  } ) + \frac { \ln ( \frac { \epsilon \lambda _m  } { c  } )  } { \lambda _m  } - \frac { 1  } { \lambda _m  } ( \frac { \epsilon \lambda _m  } { c  } \ln ( \frac { \epsilon \lambda _m  } { c  } ) - 1 ) \\
& = \frac { \epsilon  } { c  } \ln \epsilon + \frac { 1 + \ln ( \frac { \epsilon \lambda _m  } { c  } )  } { \lambda _m  } 
\end{aligned}</script><p>由于$\epsilon $在$m $之前决定,因此$\lambda _m \to \infty $的时候可以让后者趋近于$0 $,此时再让$\epsilon \to 0 $可以让前者为$0 $,这就搞定了.</p>
<h6><span id="example4黎曼引理">Example4(黎曼引理)</span></h6><p>求证:$f \in C [ a , b ] $,$\lim _{ n \to \infty  } \int _a ^b f ( x ) \sin ( nx ) \mathrm { d  } x = 0 $.</p>
<p>当$f \in C ^1 [ a , b ] $的时候,由于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f ( x ) \sin ( nx ) \mathrm { d  } x \\
& = - \frac { 1  } { n  } \int _a ^b f \mathrm { d  } \cos ( nx ) \\
& = - \frac { 1  } { n  } f \cos ( nx ) | _a ^b + \frac { 1  } { n  } \int _a ^b \cos ( nx ) f ' \mathrm { d  } x 
\end{aligned}</script><p>两边取绝对值然后让$n \to \infty $就搞定.</p>
<p>既然如此,考虑当$f \in C [ a , b ] $的时候,用多项式逼近$f $,有$| f - P | &lt; \epsilon $,当然:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\varlimsup _{ n \to \infty  } | \int _a ^b f \sin ( nx ) \mathrm { d  } x | \\
& \leq \varlimsup _{ n \to \infty  } | \int _a ^b | f - P | \sin ( nx ) \mathrm { d  } x | \\
& \leq \epsilon ( b - a ) 
\end{aligned}</script><h6><span id="example5">Example5</span></h6><p>当$f \in C [ a , b ] $,如果$\forall n \in \mathbb { N  } $,$\int _a ^b f x ^n \mathrm { d  } x = 0 $,求证$f \equiv 0 $.</p>
<p>也就是任意多项式$P $都有$\int _a ^b fP \mathrm { d  } x = 0 $.取$P $使得$| P - f | &lt; \epsilon $,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _a ^b f ^2 \mathrm { d  } x | & = | \int _a ^b fP \mathrm { d  } x + \int _a ^b f ( f - P ) \mathrm { d  } x | \\
& = | \int _a ^b f ( f - P ) \mathrm { d  } x | \\
& \leq \epsilon \int _a ^b | f | \mathrm { d  } x 
\end{aligned}</script><p>所以$\int _a ^b f ^2 \mathrm { d  } x = 0 $所以$f \equiv 0 $.</p>
<h4><span id="傅里叶级数">傅里叶级数</span></h4><p>定义<strong>三角系</strong>为形如$\{ 1 , \cos ( nx ) , \sin ( nx ) \} $的集合,它们张成的线性空间中,也就是有限的线性组合$\sum _{ k = 0  } ^n a _k \cos ( kx ) + b _k \sin ( kx ) $称为$n $阶<strong>三角多项式</strong>.当$n \to \infty $的时候则称其为<strong>三角级数</strong>.容易见到$f ( x ) \equiv f ( x + 2 \pi ) $.</p>
<p>下面我们来证明三角系两两正交,只需检查:</p>
<ol>
<li><p>当$m \ne n $的时候,$\int _{ - \pi  } ^{ \pi  } \cos ( mx ) \cos ( nx ) \mathrm { d  } x $.</p>
</li>
<li><p>当$m \ne n $的时候,$\int _{ - \pi  } ^{ \pi  } \sin ( mx ) \sin ( nx ) \mathrm { d  } x $.</p>
</li>
<li><p>$\forall n , m \in \mathbb { Z  } $,$\int _{ - \pi  } ^{ \pi  } \sin ( nx ) \cos ( mx ) \mathrm { d  } x = 0 $.</p>
</li>
<li><p>$\int _{ - \pi  } ^{ \pi  } \cos ^2 ( nx ) \mathrm { d x  } = \int _{ - \pi  } ^{ \pi  } \sin ^2 ( nx ) \mathrm { d x  } = \pi $.</p>
</li>
</ol>
<p>不妨设$\frac { a _0  } { 2  } + \sum _{ 1  } ^\infty a _k \cos ( kx ) + b _k \sin ( kx ) \rightrightarrows f ( x ) $,假如$f ( x ) $的确一致收敛到某个函数,我们实际上可以用$f ( x ) $去反推系数,两边乘一些东西再积分应该见到:</p>
<ol>
<li><p>$a _0 = \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f ( x ) \mathrm { d  } x $.</p>
</li>
<li><p>$a _k = \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f ( x ) \cos ( kx ) \mathrm { d  } x $.</p>
</li>
<li><p>$b _k = \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f ( x ) \sin ( kx ) \mathrm { d  } x $.</p>
</li>
</ol>
<p>应该是显然见到的.</p>
<p>当$f $在$[ - \pi , \pi ] $上绝对可积,也就是$\int _{ - \pi  } ^\pi | f | \mathrm { d  } x &lt; \infty $,那我们就可以按照上述方法拿到一个三角级数的系数,这个三角级数被称为$f ( x ) $的<strong>傅里叶级数</strong>或者<strong>傅里叶展开</strong>.注意我们这里其实还并没有说这个三角级数的确收敛到$f ( x ) $,而只能说我们可以如此由$f ( x ) $构造出一个傅里叶级数.我们有时也将这样的函数记作$f ( x ) \in F [ - \pi , \pi ] $,不妨干脆将$f ( x ) $依照$f ( x ) \equiv f ( x + 2 \pi ) $的条件延拓$f ( x ) $定义(或者干脆要求$f ( x ) $是以$2 \pi $为周期的函数),应当见到以下结论:</p>
<ol>
<li><p>$\lim _{ n \to \infty  } a _n = \lim _{ n \to \infty  } b _n = 0 $.</p>
</li>
<li><p>$a _n ( \alpha f + \beta g ) = \alpha a _n ( f ) + \beta a _n ( g ) $.</p>
</li>
<li><p>$b _n ( \alpha f + \beta g ) = \alpha b _n ( f ) + \beta b _n ( g ) $.</p>
</li>
<li><p>如果$f ( x ) $是奇函数,则$a _n ( f ) \equiv 0 $.</p>
</li>
<li><p>如果$f ( x ) $是偶函数,则$b _n ( f ) \equiv 0 $.</p>
</li>
<li><p>记$f _h ( x ) = f ( x + h ) $,则$a _n ( f _h ) = a _n ( f ) \cos ( nh ) + b _n ( f ) \sin ( nh ) $.</p>
</li>
<li><p>记$f _h ( x ) = f ( x + h ) $,则$b _n ( f _h ) = b _n ( f ) \cos ( nh ) - a _n ( f ) \sin ( nh ) $.</p>
</li>
<li><p>如果$f ( x ) \equiv f ( x + \pi ) $,则$a _{ 2 n - 1  } ( f ) = b _{ 2 n - 1  } ( f ) $.</p>
</li>
<li><p>对$\alpha \in ( 0 , 1 ] $,若$| f ( x ) - f ( y ) | \leq L | x - y | ^\alpha , \forall x , y \in [ - \pi , \pi ] $,则$a _n = b _n = O ( \frac { 1  } { n ^\alpha  } ) $.</p>
</li>
<li><p>若$f $可导,$f ‘ $绝对可积,则$a _n = b _n = o ( \frac { 1  } { n  } ) $.</p>
</li>
<li><p>若$f $可导,$f ‘ $绝对可积,则$a _n ( f ) = - \frac { b _n ( f ‘ )  } { n  } $.</p>
</li>
<li><p>若$f $可导,$f ‘ $绝对可积,则$b _n ( f ) = \frac { a _n ( f ‘ )  } { n  } $.</p>
</li>
<li><p>若$f $可以导$m $次,而且$f ^{ ( m )  } $绝对可积,则$a _n = b _n = o ( \frac { 1  } { n ^m  } ) $.</p>
</li>
<li><p>若$f \in C ( \mathbb { R  } ) , f ( x + 2 \pi ) \equiv f ( x ) $,则$\forall \epsilon &gt; 0 $,则存在一列三角多项式一致逼近$f $.</p>
</li>
<li><p>若$f \in C ( \mathbb { R  } ) , f ( x + 2 \pi ) \equiv f ( x ) $,若$\forall n \geq 0 , a _n \equiv b _n \equiv 0 $,则$f \equiv 0 $.</p>
</li>
</ol>
<p>(1)是由于黎曼引理,我们前面已经用若干种方法反复证过了.</p>
<p>(2)(3)是积分线性的显然结果,(4)(5)只需带入定义即可发现.</p>
<p>(6)(7)的话当然是因为和差角公式.(8)的话根据(6)和(7)由于$a _n ( f ) = a _n ( f _\pi ) = a _n ( f ) ( - 1 ) ^n $,这就搞定.</p>
<p>(9)的话,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f ( x ) \cos ( nx ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi - \frac { \pi  } { n  }  } ^{ \pi - \frac { \pi  } { n  }  } f ( x + \frac { \pi  } { n  } ) \cos ( nt + \pi ) \mathrm { d  } x \\
& = - \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f ( x + \frac { \pi  } { n  } ) \cos ( nt ) \mathrm { d  } x \\
a _n & = \frac { 1  } { 2 \pi  } \int _{ - \pi  } ^{ \pi  } ( f ( x ) - f ( x + \frac { \pi  } { n  } ) ) \cos ( nx ) \mathrm { d  } x \\
| a _n | & \leq \frac { 1  } { 2 \pi  } \int _{ - \pi  } ^{ \pi  } L ( \frac { \pi  } { n  } ) ^\alpha \\
& = O ( 1 ) \frac { 1  } { n ^\alpha  } 
\end{aligned}</script><p>这就搞定.</p>
<p>至于(10)的话,$a _n = b _n = O ( \frac { 1  } { n  } ) $当然只是(9)的推论.那怎么证明是$o ( \frac { 1  } { n  } ) $的呢?考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \frac { 1  } { \pi  } \int _{ - \pi  } ^{ \pi  } f \cos ( nx ) \mathrm { d  } x \\
& = \frac { 1  } { n \pi  } \int _{ - \pi  } ^{ \pi  } f \mathrm { d  } \sin ( nx ) \\
& = - \frac { 1  } { n \pi  } \int _{ - \pi  } ^{ \pi  } \sin ( nx ) f ' \mathrm { d  } x \\
& = o ( \frac { 1  } { n  } ) 
\end{aligned}</script><p>上述过程也自然拿到了(11)和(12).</p>
<p>(13)的话也只需要由(11)和(12)拿到:</p>
<script type="math/tex; mode=display">
| a _n ( f ) | + | b _n ( f ) | \leq \frac { | a _n ( f ^{ ( m )  } ) | + | b _n ( f ^{ ( m )  } ) |  } { n ^m  }</script><p>其实还有一个推论是如果$f $是$2 \pi $周期的解析函数,则$| a _n ( f ) | , | b _n ( f ) | \leq Me ^{ - nc  } $.而且甚至说这个条件是充要的,如果趋向于零的速度确实为此,则$f $也的确是解析函数.可惜的是这个结论需要用到复分析的结果,不得不在此略过.</p>
<p>(14)的话,乍一看像是Stone-Weierstrass定理的另一则应用,直接观察Stone-Weierstrass定理的证明发现的确可以照搬到三角多项式上(因为难点只在$f ( - \pi ) = f ( \pi ) $,但原证明中分离的性质只用于贴合函数上的两个点),然而如果想要直接封装原定理拿过来的话的确难以处理$f ( x ) \equiv f ( x + 2 \pi ) $的性质(其实可以从复平面绕过去).下面提供另一则证明:</p>
<p>先看当$f ( x ) $是偶函数的时候,观察$x \in [ 0 , \pi ] $,取$y = \cos x $,见到$f ( \arccos y ) \in C [ - 1 , 1 ] $.此时存在一个多项式$P ( y ) = P ( \cos x ) $一致逼近$f ( x ) $,而$P ( \cos x ) $当然是三角多项式.</p>
<p>考虑取$g ( x ) = f ( x ) + f ( - x ) $,则如上知道$\forall \epsilon &gt; 0 $,存在三角多项式$T _1 ( x ) $使得$\forall x \in \mathbb { R  } , | g ( x ) - T _1 ( x ) | &lt; \frac { \epsilon  } { 2  } $.</p>
<p>再取$\varphi ( x ) = ( f ( x ) - f ( - x ) ) \sin x $当然也是偶函数,存在三角多项式$T _2 ( x ) $使得$\forall x \in \mathbb { R  } , | \varphi ( x ) - T _2 ( x ) | &lt; \frac { \epsilon  } { 2  } $.</p>
<p>既然如此,考虑取$T _3 ( x ) = T _1 \sin ^2 x + T _2 \sin x $,由上见到$| 2 f ( x ) \sin ^2 x - T _3 ( x ) | &lt; \epsilon $,也就是说对于任何$f ( x ) $都能找到如此一个$T _3 ( x ) $满足条件.</p>
<p>既然如此,考虑对$f ( x - \frac { \pi  } { 2  } ) $做上述操作,也就是存在三角多项式$T _4 ( x ) $满足:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| 2 f ( x - \frac { \pi  } { 2  } ) \sin ^2 x - T _4 ( x ) | < \epsilon \\
| 2 f ( x ) \cos ^2 x - T _4 ( x + \frac { \pi  } { 2  } ) | < \epsilon 
\end{aligned}</script><p>既然如此,得到:$| 2 f ( x ) - T _3 ( x ) - T _4 ( x + \frac { \pi  } { 2  } ) | &lt; 2 \epsilon $,这就搞定了.</p>
<p>对于(15),考虑找一列三角多项式一致逼近$f ( x ) $,由于$f ( x ) $的傅里叶级数总是$0 $,所以对于三角多项式$T _n $来说一定有$\int _{ - \pi  } ^{ \pi  } f ( x ) T _n ( x ) \mathrm { d  } x \equiv 0 $,既然如此考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ - \pi  } ^{ \pi  } f ^2 \mathrm { d  } x & = \int _{ - \pi  } ^\pi f ( f - T _n ) \mathrm { d  } x \\
& \leq \int _{ - \pi  } ^\pi | f | \cdot | f - T _n | \mathrm { d  } x \\
& \leq \epsilon \int _{ - \pi  } ^\pi | f | \mathrm { d  } x & \to 0 
\end{aligned}</script><p>因此$f \equiv 0 $.这意味着连续函数的傅里叶展开是唯一的.</p>
<p>(15)的一则类似结果是,你可以从中看出$\{ 1 , \sin ( nx ) , \cos ( nx ) \} $三角系是缺一不可的,而不像多项式那样可以去掉很多.例如如果我们在其中去掉$\sin x $的话,那么$\sin x $本身就无法逼近,原因是反证法,如果能逼近,考虑一列三角多项式$\{ T _n \} $并且其中不含$\sin x $,然而,由于三角系中两两正交,因此$\forall T _n , $都有$\int _{ - \pi  } ^{ \pi  } T _n \sin x \mathrm { d  } x \equiv 0 $,因此从(15)的证明过程就可以见到必然有$\sin x \equiv 0 $,这当然就出事了.</p>
<h6><span id="example1">Example1</span></h6><p>设$x \in [ - \pi , \pi ] $,考虑一列$\{ b _n \} $单调下降趋近于$0 $,那么根据DA判法当然有$S ( x ) = \sum _{ n = 1  } ^\infty b _n \sin ( nx ) $是逐点收敛的,假设收敛于$f ( x ) $.如果$f ( x ) $的确是$[ - \pi , \pi ] $上的绝对可积函数.求证:此时上述$S ( x ) $的确是$f ( x ) $的傅里叶级数.</p>
<p>容易见到$f ( x ) $是奇函数,其傅里叶级数中的$a _n \equiv 0 $.此时不妨只看$x \in [ 0 , \pi ] $上的结果.</p>
<p>难点当然在于$S ( x ) \to f $并不一定是一致逼近,但应该观察到的是:</p>
<script type="math/tex; mode=display">
| \sin ( mx ) \sum _{ k = 1  } ^n \sin ( kx ) | \leq \left | \frac { \sin ( mx )  } { \sin \frac { x  } { 2  }  } \right | \leq \left | \frac { mx  } { \frac { x  } { \pi  }  } \right | = | m \pi |</script><p>所以这个一致有界,前面的$| b _n | $单调趋近于$0 $,DA判法告诉我们$\sin ( mx ) S ( x ) $一致收敛,那逐项积分就证完了$\int _{ - \pi  } ^{ \pi  } g ( x ) \sin ( mx ) \mathrm { d  } x = \pi b _m $.</p>
<h6><span id="example2">Example2</span></h6><p>求$f ( x ) = \frac { 1 - r ^2  } { 1 - 2 r \cos x + r ^2  } , | r | &lt; 1 $的傅里叶级数.</p>
<p>考虑在复数上做此操作,留神到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { 1 - z  } & = \frac { 1 - \bar { z  }  } { ( 1 - z ) ( 1 - \bar { z  } )  } \\
& = \frac { 1 - \bar { z  }  } { 1 - 2 \Re z + | z | ^2  } \\
& = \frac { 1 - r \cos x + ir \sin x  } { 1 - 2 r \cos x + r ^2  } 
\end{aligned}</script><p>所以$2 \Re ( \frac { 1  } { 1 - z  } ) - 1 = f ( x ) $,然而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { 1 - z  } & = \sum _{ n \geq 0  } z ^n & = \sum _{ n \geq 0  } r ^n e ^{ inx  } \\
\Re ( \frac { 1  } { 1 - z  } ) & = 1 + \sum _{ n \geq 1  } r ^n \cos ( nx ) \\

\end{aligned}</script><p>所以$f ( x ) = 1 + \sum _{ n \geq 1  } 2 r ^n \cos ( nx ) $.</p>
<h5><span id="与原函数的收敛关系">与原函数的收敛关系</span></h5><p>做完以上操作后,我们来考虑这个傅里叶级数到底是否逼近于$f ( x ) $本身,设$S _n ( x ) = \frac { a _0  } { 2  } + \sum _{ k = 1  } ^n ( a _k \cos ( kx ) + b _k \sin ( kx ) ) $.此时考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n ( x _0 ) & = \frac { a _0  } { 2  } + \sum _{ k = 1  } ^n \int _{ - \pi  } ^\pi f ( x ) ( \cos kx \cdot \cos kx _0 + \sin kx \cdot \sin kx _0 ) \mathrm { d  } x \\
& = \frac { 1  } { 2 \pi  } \int _{ - \pi  } ^\pi f ( x ) \mathrm { d  } x + \sum _{ k = 1  } ^n \int _{ - \pi  } ^\pi f ( x ) \cos k ( x - x _0 ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( x ) \left ( \frac { 1  } { 2  } + \sum _{ k = 1  } ^n \cos k ( x - x _0 ) \right ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( x ) \frac { \sin ( n + \frac { 1  } { 2  } ) ( x - x _0 )  } { 2 \sin \frac { x - x _0  } { 2  }  } \mathrm { d  } x \\

\end{aligned}</script><p>不妨令迪利克雷核$D _n ( x ) = \frac { \sin ( n + \frac { 1  } { 2  } ) x  } { 2 \sin \frac { x  } { 2  }  } , \varphi ( x _0 , x ) = \frac { f ( x _0 + x ) + f ( x _0 - x )  } { 2  } $,应当见到$\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi D _n ( x ) \mathrm { d  } x = 1 $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n ( x _0 ) & = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( x ) D _{ n  } ( x - x _0 ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( t + x _0 ) D _{ n  } ( t ) \mathrm { d  } t \\
& = \frac { 1  } { \pi  } \int _0 ^\pi ( f ( x _0 + t ) + f ( x _0 - t ) ) D _n ( t ) \mathrm { d  } t \\
& = \frac { 2  } { \pi  } \int _0 ^\pi \varphi ( x _0 , t ) D _n ( t ) \mathrm { d  } t 
\end{aligned}</script><p>问题在于最后如何判断这个积分的收敛性,事实上可以找到若干个逼近的充分条件:</p>
<ol>
<li>分段可导时候的情况</li>
</ol>
<p>下面我们来证明:当$f $是Holder连续的时候,$\lim _{ n \to \infty  } S _n ( x ) \to f ( x ) $.</p>
<p>我们有如下<strong>黎曼局部化引理</strong>:对$\forall 0 &lt; \delta &lt; \pi $,都有$\lim _{ n \to \infty  } \left ( S _n ( x _0 ) - \frac { 2  } { \pi  } \int _0 ^\delta \varphi ( x _0 , t ) \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { t  } \mathrm { d  } t \right ) = 0 $.</p>
<p>如何证明此呢?考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { \pi  } { 2  } S _n ( x _0 ) & = \int _0 ^\delta \varphi ( x _0 , t ) D _n ( t ) \mathrm { d  } t + \int _\delta ^\pi \varphi ( x _0 , t ) D _n ( t ) \mathrm { d  } t \\
& = \int _0 ^\delta \varphi ( x _0 , t ) \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { t  } \mathrm { d  } t + \int _0 ^\delta \varphi ( x _0 , t ) \frac { t - 2 \sin \frac { t  } { 2  }  } { 2 t \sin \frac { t  } { 2  }  } \sin ( n + \frac { 1  } { 2  } ) t \mathrm { d  } t \\
& + \int _\delta ^\pi \frac { \varphi ( x _0 , t )  } { 2 \sin \frac { t  } { 2  }  } \sin ( n + \frac { 1  } { 2  } ) t \mathrm { d  } t \\

\end{aligned}</script><p>留神到$\frac { t - 2 \sin \frac { t  } { 2  }  } { 2 t \sin \frac { t  } { 2  }  } $极限存在,因此其的确有界,对后面两项用黎曼引理就知道趋近于$0 $.</p>
<p>接下来我们还有一个引理:当$\varphi \in R [ 0 , \delta ] $的时候,如果$\varphi ( 0 + ) $存在,并且$\int _0 ^\delta \frac { | \varphi ( t ) - \varphi ( 0 + ) |  } { t  } &lt; \infty $,则$\lim _{ \lambda \to \infty  } \int _0 ^\delta \varphi ( t ) \frac { \sin \lambda t  } { t  } \mathrm { d  } t = \frac { \pi  } { 2  } \varphi ( 0 + ) $.</p>
<p>于此证明,根据黎曼引理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lim _{ \lambda \to \infty  } \int _0 ^\delta \frac { \varphi ( t ) - \varphi ( 0 + )  } { t  } \sin \lambda t \mathrm { d  } t & = 0 \\
\lim _{ \lambda \to \infty  } \int _0 ^\delta \frac { \varphi ( t )  } { t  } \sin \lambda t \mathrm { d  } t & = \lim _{ \lambda \to \infty  } \int _0 ^\delta \frac { \varphi ( 0 + )  } { t  } \sin \lambda t \mathrm { d  } t \\
& = \varphi ( 0 + ) \lim _{ \lambda \to \infty  } \int _0 ^{ \lambda \delta  } \frac { \sin t  } { t  } \mathrm { d  } t \\
& = \frac { \pi  } { 2  } \varphi ( 0 + ) 
\end{aligned}</script><p>既然如此,当$f $是霍尔德连续,也就是$\exists \alpha \in ( 0 , 1 ] , \exists C &gt; 0 $,使得$| f ( x _0 + t ) - f ( x _0 ) | \leq C | t | ^\alpha $,此时见到$| \varphi ( x _0 , t ) - \varphi ( x _0 , 0 + ) | = O ( | t | ^\alpha ) $,用上述引理知道此时$S _n ( x _0 ) \to f ( x _0 ) $.</p>
<p>上述结论还可以得到一个更神秘的结论,我们上述引理只用到了在$x _0 $附近的结果,那如果$f $在$x _0 $附近不连续呢?</p>
<p>假设$f ( x _0 \pm 0 ) $均存在,我们可以定义<strong>广义导数</strong>,定义右广义导数为$D _+ f ( x _0 ) = \lim _{ h \to 0 +  } \frac { f ( x _0 + h ) - f ( x _0 + 0 )  } { h  } $,同理定义左广义导数.</p>
<p>当$D _\pm f ( x _0 ) $存在的时候,考虑此时$\frac { | \varphi ( t ) - \varphi ( 0 + ) |  } { t  } $没有瑕点,那上述结论当然也就满足.</p>
<p>如果我们定义分段可导为除了若干个断点处的左右广义导数不相同,其余所有点的左右广义导数都存在.那上述结论也就满足.</p>
<ol>
<li>分段单调时候的情况</li>
</ol>
<p>我们有<strong>Jordan引理</strong>:设$\varphi $在$[ 0 , \delta ] $上单调,则$\lim _{ \lambda \to \infty  } \int _0 ^\delta \frac { \varphi ( x )  } { x  } \sin ( \lambda x ) \mathrm { d  } x = \frac { \pi  } { 2  } \varphi ( 0 + ) $.</p>
<p>对Jordan引理的证明,不妨设$\varphi $单调递增,对$\forall \epsilon &gt; 0 , \exists 0 &lt; \delta ‘ &lt; \delta $,使得$\forall t \in ( 0 , \delta ‘ ) , 0 \leq \varphi ( t ) - \varphi ( 0 + ) &lt; \epsilon $.</p>
<p>不妨设$| \int _0 ^t \frac { \sin x  } { x  } | \leq M , \forall t &gt; 0 $,考虑根据积分第二中值定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _0 ^{ \delta '  } ( \varphi ( t ) - \varphi ( 0 + ) ) \frac { \sin ( \lambda t )  } { t  } \mathrm { d  } t | \\
& = | ( \varphi ( \delta ' ) - \varphi ( 0 + ) ) \int _\xi ^{ \delta '  } \frac { \sin ( \lambda t )  } { t  } \mathrm { d  } t | \\
& \leq 2 M \epsilon 
\end{aligned}</script><p>而在$[ \delta ‘ , \delta ] $上可以直接用黎曼引理这就搞定了.</p>
<p>如果$\varphi $是有限个单调函数的和,上述结论当然也成立了.所以该结论对有界变差函数是成立的.</p>
<p>因此,当$f \in [ - \pi , \pi ] $上逐段单调的时候,$\varphi $逐段是两个单调函数的差,那此时当然也有$\lim _{ n \to \infty  } S _n ( x ) = \frac { f ( x + 0 ) + f ( x - 0 )  } { 2  } $.</p>
<h6><span id="example1">Example1</span></h6><p>设$f ( x ) = \begin{cases}- 1 &amp; x \in ( - \pi , 0 ) \ 0 &amp; x = 0 \lor x = - \pi \lor x = \pi \ 1 &amp; x \in ( 0 , \pi ) \end{cases} $.</p>
<p>见到这的确是一个奇函数,直接求它的傅里叶级数,见到是:</p>
<script type="math/tex; mode=display">
\frac { 4  } { \pi  } \sum _{ n = 0  } ^\infty \frac { \sin ( 2 n + 1 ) x  } { 2 n + 1  } = \frac { f ( x + 0 ) + f ( x - 0 )  } { 2  } = f ( x )</script><p>我们竟然得到了一个一个神秘级数,很牛.</p>
<p>而且这个三角级数在$( 0 , \pi ) $上处处收敛到$1 $,这个性质在幂级数的时候是无法想象的,我们之前证明过了开区间上的非常值幂级数的零点集一定没有聚点.</p>
<h6><span id="example2">Example2</span></h6><p>设$f ( x ) = \begin{cases}\pi + x &amp; x \in [ - \pi , 0 ) \ \pi - x &amp; x \in [ 0 , \pi ) \end{cases} $,也就是一个锯齿状的小函数,当然分段单调了.由于是一个偶函数,积分得到$a _n = \frac { 2  } { \pi  } \int _0 ^\pi ( \pi - x ) \cos ( nx ) \mathrm { d  } x = \frac { 2  } { n ^2 \pi  } ( 1 - ( - 1 ) ^n ) $.</p>
<p>这当然是个连续函数,那此时有:</p>
<script type="math/tex; mode=display">
f ( x ) = \frac { \pi  } { 2  } + \frac { 4  } { \pi  } ( \sum _{ k = 0  } ^\infty \frac { \cos ( 2 k + 1 ) x  } { ( 2 k + 1 ) ^2  } )</script><p>两边带入$x = 0 $就知道$\sum _{ k = 0  } ^\infty \frac { 1  } { ( 2 k + 1 ) ^2  } = \frac { \pi ^2  } { 8  } $.</p>
<p>还没完,用大M判别法容易检验这个式子两边是绝对一致收敛的,那我们两边逐项积分得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^x f ( t ) \mathrm { d  } t & = \frac { \pi  } { 2  } x + \frac { 4  } { \pi  } \sum _{ k = 0  } ^\infty \int _0 ^x \frac { \cos ( 2 k + 1 ) t  } { ( 2 k + 1 ) ^2  } \mathrm { d  } t \\
& = \frac { \pi  } { 2  } x + \frac { 4  } { \pi  } \sum _{ k = 0  } ^\infty \frac { \sin ( 2 k + 1 ) t  } { ( 2 k + 1 ) ^3  } \\

\end{aligned}</script><p>把左边的$f $积出来,设其为$g ( x ) = \begin{cases}\pi x + \frac { x ^2  } { 2  } &amp; x \in [ - \pi , 0 ) \ \pi x - \frac { x ^2  } { 2  } &amp; x \in [ 0 , \pi ) \end{cases} $.那它的傅里叶展开就等于右边的东西(因为一致收敛).带入$x = \frac { \pi  } { 2  } $,可以得到$\frac { \pi ^3  } { 32  } = \sum _{ k = 0  } ^\infty \frac { ( - 1 ) ^k  } { ( 2 k + 1 ) ^3  } $.</p>
<p>那接下来还可以两边再积分对吧!过程我也懒得写了,总之能推出$\sum _{ k = 0  } ^\infty \frac { 1  } { ( 2 k + 1 ) ^4  } = \frac { \pi ^4  } { 96  } $,可以得到$\sum _{ k = 1  } ^\infty \frac { 1  } { k ^4  } = \frac { \pi ^4  } { 90  } $.</p>
<p>所以总之,我们可以用上面的策略得到所有的$\zeta ( 2 n ) $.</p>
<h6><span id="example3">Example3</span></h6><p>考虑对$\cos ( ax ) $在$[ - \pi , \pi ] $截取出来并延拓,然后对其作傅里叶展开,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cos ( ax ) & = \frac { \sin ( a \pi )  } { a \pi  } + \sum _{ n = 1  } ^\infty \frac { ( - 1 ) ^n 2 a  } { a ^2 - n ^2  } \frac { \sin ( a \pi )  } { \pi  } \cos ( nx ) \\
\frac { 1  } { \sin ( a \pi )  } & = \frac { 1  } { a \pi  } + \sum _{ n = 1  } ^\infty \frac { ( - 1 ) ^n 2 a \pi  } { ( a \pi ) ^2 - ( n \pi ) ^2  } 
\end{aligned}</script><p>令$z = a \pi $,得到:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \sin z  } = \frac { 1  } { z  } + \sum _{ n = 1  } ^\infty ( - 1 ) ^n ( \frac { 1  } { z - n \pi  } + \frac { 1  } { z + n \pi  } )</script><h6><span id="example4">Example4</span></h6><p>假设$\int _{ - \infty  } ^{ + \infty  } | f | \mathrm { d  } x &lt; \infty $,且存在$x _0 , \delta $,$f ( x _0 \pm 0 ) $存在,使得以下二者其一成立:</p>
<ol>
<li><p>$f $在$( x _0 - \delta , x _0 + \delta ) $上是有界变差的.</p>
</li>
<li><p>积分$\int _0 ^\delta \frac { | f ( x _0 \pm t ) - f ( x _0 \pm 0 ) |  } { t  } &lt; \infty $.</p>
</li>
</ol>
<p>则:</p>
<script type="math/tex; mode=display">
\lim _{ \alpha \to \infty  } \frac { 1  } { \pi  } \int _{ - \infty  } ^{ + \infty  } f ( x _0 + t ) \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t = \frac { 1  } { 2  } ( f ( x _0 + 0 ) + f ( x _0 - 0 ) )</script><p>只需要证明:</p>
<script type="math/tex; mode=display">
\lim _{ \alpha \to \infty  } \int _{ 0  } ^\infty ( f ( x _0 + t ) - f ( x _0 + 0 ) ) \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t = 0</script><p>首先$[ 0 , + \infty ) $上,对于$[ 0 , \delta ] $只需要正常做就行了.可是$\frac { f ( x _0 + t ) - f ( x _0 + 0 )  } { t  } $在$( \delta , + \infty ) $上未必可积,这就有点难绷.开动脑筋,想起来既然这里有一个$\mathbb { R  } $上的绝对可积,那当然得用一用我们的柯西准则,考虑将后面拆成$( \delta , M ) $和$[ M , + \infty ) $.如果我们能把后面的$[ M , + \infty ) $搞定,那中间那一段用黎曼引理就搞定了.</p>
<p>后面怎么做呢,简单放缩:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _{ M  } ^\infty ( f ( x _0 + t ) - f ( x _0 + 0 ) ) \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t | \\
& \leq | \int _{ M  } ^\infty f ( x _0 + t ) \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t | + | \int _{ M  } ^\infty f ( x _0 + 0 ) \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t | \\
& \leq \int _{ M  } ^\infty | f ( x _0 + t ) | \mathrm { d  } t + | f ( x _0 + 0 ) \int _{ M  } ^\infty \frac { \sin ( \alpha t )  } { t  } \mathrm { d  } t | \\
\to 0 
\end{aligned}</script><p>这就搞定了.</p>
<h5><span id="一致收敛到原函数的情形">一致收敛到原函数的情形</span></h5><p>那此时该函数肯定连续,然而连续函数未必总能一致逼近,Example1给出了一个反例.</p>
<p>那么应该加如何条件呢?先证明一个加强版的黎曼引理:</p>
<p>设$g ( x ) $是$[ A , B ] $上的绝对可积函数,取$S _p = \sup _{ a , b \in [ A , B ]  } | \int _a ^b g ( t ) \sin pt \mathrm { d  } t | + \sup _{ a , b \in [ A , B ]  } | \int _a ^b g ( t ) \cos pt \mathrm { d  } t | $,我们要证明$\lim _{ p \to \infty  } S _p = 0 $.这个还并不显然,因为$a , b $是可以在$p $之后决定的.实际上这里就是为了拿到一个一致控制性,我们想让我们的黎曼引理是能一致控制住整个区间的,这样我们才能得到一致收敛的条件.</p>
<p>首先考虑$\forall \epsilon &gt; 0 $,当$g ( x ) \in R [ a , b ] $的时候,可以先用连续函数逼近,再将连续函数变为多项式逼近.而当$g ( x ) $有瑕点的时候,可以将瑕点逼掉.所以总能找到一个多项式$f ( x ) $满足$\int _A ^B | g ( x ) - f ( x ) | \mathrm { d  } x &lt; \frac { \epsilon  } { 2  } $.然后考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b f \sin ( pt ) \mathrm { d  } t & = \frac { 1  } { p  } f \cos ( pt ) | _a ^b + \frac { 1  } { p  } \int _a ^b \cos ( pt ) f ' \mathrm { d  } t \\
& \to 0 
\end{aligned}</script><p>由此还可以再推出一个引理,$\lim _{ p \to \infty  } \sup _{ A \leq x _0 \pm a , x _0 \pm b \leq B  } | \int _a ^b g ( x _0 \pm t ) \cos ( pt ) \mathrm { d  } t | = 0 $.原因是换元后用和差角公式拆开就行.</p>
<p>进一步推广,考虑$\gamma ( t ) $是$[ a , b ] $上的有界变差函数,我们证明:$\lim _{ p \to \infty  } \sup _{ A \leq x _0 \pm a , x _0 \pm b \leq B  } | \int _a ^b g ( x _0 \pm t ) \gamma ( t ) \cos ( pt ) \mathrm { d  } t | = 0 $.</p>
<p>不妨设$\gamma ( t ) $单调递增,然后用积分第二中值定理就可以发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _a ^b g ( x _0 \pm t ) \gamma ( t ) \sin ( pt ) \mathrm { d  } t \\
& = \gamma ( a ) \int _a ^\xi g ( x _0 \pm t ) \sin ( pt ) \mathrm { d  } t + \gamma ( b ) \int _\xi ^b g ( x _0 \pm t ) \sin ( pt ) \mathrm { d  } t \\
\to 0 
\end{aligned}</script><p>接下来设$\varphi ( t ) = f ( x + t ) + f ( x - t ) - 2 f ( x ) $,假设$f $是$[ - \pi , \pi ] $上的绝对可积函数,而且$f $限制在子区间$[ a , b ] $上是连续的.我们有<strong>迪尼定理</strong>:若$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 , \sup _{ x \in [ a , b ]  } \int _0 ^\delta \frac { | \varphi ( t ) |  } { t  } \mathrm { d  } t &lt; \epsilon $,则其傅里叶级数$S _n ( x ) $在区间$[ a , b ] $上一致逼近$f $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n ( x ) - f ( x ) & = \frac { 1  } { \pi  } \int _0 ^\pi \varphi ( t ) \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { 2 \sin \frac { t  } { 2  }  } \mathrm { d  } t \\
& = \frac { 1  } { \pi  } ( \int _0 ^\delta + \int _\delta ^\pi ) \varphi ( t ) \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { 2 \sin \frac { t  } { 2  }  } \mathrm { d  } t \\

\end{aligned}</script><p>考虑前者:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^\delta & \leq \frac { 1  } { \pi  } \int _0 ^\delta \frac { | \varphi ( t ) |  } { t  } \frac { \frac { t  } { 2  }  } { \sin \frac { t  } { 2  }  } \mathrm { d  } t \\
& \leq \frac { 1  } { 2  } \int _0 ^\delta \frac { | \varphi ( t ) |  } { t  } \mathrm { d  } t \\
& < \frac { \epsilon  } { 2  } 
\end{aligned}</script><p>至于后者,只需上述引理就搞定.</p>
<p>于是最后我们可以得到,如果$f $是Holder连续的时候,那对于任意的$[ a , b ] $,都一定有$S _n \rightrightarrows f ( x ) $.</p>
<p>而如果当$f $是有界变差的时候,此时考虑$f $几乎处处可导,而在其可导的地方当然由上面的结果就一致收敛了,所以可以知道这个函数列几乎处处一致收敛到$f $.</p>
<p>然而容易检验如果一个连续函数列几乎处处一致收敛到一个连续函数,那当然它们就是一致收敛的关系.考虑反证,$\forall \epsilon &gt; 0 $,设可导点集为$A $,则$\exists n , \sup _{ x \in A  } ( f ( x ) - f _n ( x ) ) &lt; \epsilon $.</p>
<p>假设不一致收敛,此时$\exists x _0 $使得$f ( x _0 ) - f _n ( x _0 ) &gt; 4 \epsilon $.然而由于$n $已经定死,所以现在$f $和$f _n $都是一致连续的,往旁边区间绕一下就行了.不管这个区间多小,由于$[ - \pi , \pi ] \setminus A $是零测的,所以总有与$A $的交.</p>
<p>从上面也可以看到,只要一个连续函数几乎处处可导,那它的傅里叶级数就可以一致逼近它.</p>
<h6><span id="example1">Example1</span></h6><p>设:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Q _{ m , n  } & & = \sum _{ k = 1  } ^n \frac { \sin ( m + n - k ) x  } { k  } - \sum _{ k = 1  } ^n \frac { \sin ( m + n + k ) x  } { k  } \\
& & = - 2 \cos ( m + n ) x \sum _{ v = 1  } \frac { \sin ( vx )  } { v  } 
\end{aligned}</script><p>容易检查这个函数是有界的,只需:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ v = 1  } ^n \frac { \sin vx  } { v  } & & = \int _0 ^x \sum _{ v = 1  } ^n \cos vt \mathrm { d  } t \\
& & = \int _0 ^x ( - \frac { 1  } { 2  } + \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { 2 \sin \frac { t  } { 2  }  } ) \\
& & = - \frac { x  } { 2  } + \int _0 ^x ( \frac { 1  } { 2 \sin \frac { t  } { 2  }  } - \frac { 1  } { t  } ) + \int _0 ^{ ( n + \frac { 1  } { 2  } ) x  } \frac { \sin t  } { t  } \mathrm { d  } t 
\end{aligned}</script><p>这样用黎曼引理立刻见到其有界,存在常数$C $使得$| \sum _{ v = 1  } ^n \frac { \sin vx  } { v  } | \leq C $,那$| Q _{ n , m  } | \leq 2 C $也有界.</p>
<p>定义$m _k = n _k = 2 ^{ k ^3  } $,取函数$\varphi ( x ) = \sum _{ k = 1  } ^\infty \frac { 1  } { k ^2  } Q _{ m _k , n _k  } ( x ) $,既然$Q _{ m _k , n _k  } $有界,根据大M判别法,这个东西当然一致收敛而且$2 \pi $周期连续.</p>
<p>既然如此,考察$\varphi ( x ) $是奇函数,它的傅里叶展开的确就是上述形式(原因是连续函数有唯一傅里叶展开).</p>
<p>接下来考虑其波动考虑由于我们的$m _k = n _k = 2 ^{ k ^3  } $,所以其实这里很稀疏的,留神到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _{ 2 n _k - 1  } ( x ) - S _{ n _k - 1  } ( x ) & = \frac { 1  } { k ^2  } \left ( \sum _{ l = 1  } ^{ n _k  } \frac { \sin ( 2 n _k - l ) x  } { l  } \right ) 
\end{aligned}</script><p>接下来带入$x = \frac { \pi  } { 4 n _k  } $,见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( S _{ 2 n _k - 1  } - S _{ n _k - 1  } ) ( \frac { \pi  } { 4 n _k  } ) & > \frac { \sqrt { 2  }  } { 2  } \frac { 1  } { k ^2  } ( \sum _{ l = 1  } ^{ n _k  } \frac { 1  } { l  } ) \\
& > \frac { \sqrt { 2  }  } { 2  } \frac { 1  } { k ^2  } \ln n _k \\
& > \frac { \sqrt { 2  } \ln 2  } { 2  } k \\
& \to \infty 
\end{aligned}</script><p>因此见到不一致收敛,很厉害!</p>
<h5><span id="cesaro收敛">Cesaro收敛</span></h5><p>接下来我们引入<strong>Cesaro收敛</strong>的概念,回忆到Stolz定理给出若取定$\sigma _n = \frac { a _1 + \cdots + a _n  } { n  } $,回忆到如果$a _n \to a $,则$\sigma _n \to a $,然而反之未必成立.因此,$\sigma _n $如果收敛的话,这是一个比$a _n $收敛弱的条件.</p>
<p>在傅里叶级数这里也引入这个概念,我们不再研究$S _n ( x ) $的收敛性,而考虑$\sigma _n ( x ) = \frac { S _0 ( x ) + \cdots + S _n ( x )  } { n + 1  } $的收敛性.考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sigma _n ( x ) & = \frac { S _0 ( x ) + \cdots + S _n ( x )  } { n + 1  } \\
& = \frac { 1  } { ( n + 1 ) \pi  } \int _{ - \pi  } ^\pi f ( x + t ) \frac { \sum _{ k = 0  } ^n \sin ( k + \frac { 1  } { 2  } ) t  } { 2 \sin \frac { t  } { 2  }  } \mathrm { d  } t \\
& = \frac { 1  } { ( n + 1 ) \pi  } \int _{ - \pi  } ^\pi f ( x + t ) \frac { 1 - \cos ( n + 1 ) t  } { 2 \sin ^2 \frac { t  } { 2  }  } \mathrm { d  } t \\
& = \frac { 1  } { ( n + 1 ) \pi  } \int _{ - \pi  } ^\pi f ( x + t ) \frac { \sin ^2 ( \frac { n + 1  } { 2  } t )  } { 2 \sin ^2 \frac { t  } { 2  }  } \mathrm { d  } t \\

\end{aligned}</script><p>设费叶核$\phi _n ( t ) = \frac { \sin ^2 \frac { n + 1  } { 2  } t  } { 2 ( n + 1 ) \sin ^2 \frac { t  } { 2  }  } $.容易见到$\phi _n ( t ) = \phi _n ( - t ) $,$\phi ( 0 ) = \frac { n + 1  } { 2  } $,而且$\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \phi _n ( t ) \mathrm { d  } t = 1 $,原因是$\phi _n ( t ) $原本是个三角多项式,因此这里的积分只和其常数项有关,而常数项为$\frac { 1  } { 2  } $.</p>
<p>现在我们说,当$f ( x ) \equiv f ( x + 2 \pi ) $,$f $在$[ - \pi , \pi ] $上绝对可积,并且$f ( x _0 \pm 0 ) $极限存在,则$\lim _{ n \to \infty  } \sigma _n ( x _n ) = \frac { f ( x _0 + 0 ) + f ( x _0 - 0 )  } { 2  } $.进一步,如果$f \in C ( \mathbb { R  } ) $,则$\sigma _n ( x ) \rightrightarrows f ( x ) $.</p>
<p>考虑设$I _n = \sigma _n ( x ) - \frac { f ( x + 0 ) + f ( x - 0 )  } { 2  } $,有:</p>
<script type="math/tex; mode=display">
I _n = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \phi _n ( t ) ( f ( x + t ) + f ( x - t ) - f ( x + 0 ) - f ( x - 0 ) ) \mathrm { d  } t</script><p>此时考虑$f ( x \pm 0 ) $存在意味着$\forall \epsilon &gt; 0 , \exists \delta &gt; 0 $,使得当$0 &lt; t \leq \delta $的时候,总有$| f ( x \pm t ) - f ( x \pm 0 ) | &lt; \frac { \epsilon  } { 2 \pi  } $,于是我们上面的$I _n $就可以拆成$\int _0 ^\delta + \int _\delta ^\pi $两部分.</p>
<p>对于前者:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \pi  } | \int _0 ^\delta | \leq \frac { \epsilon  } { 2 \pi  } \int _0 ^\pi \phi _n ( t ) \mathrm { d  } t < \frac { \epsilon  } { 2  }</script><p>对于后者只要能控制$\max _{ [ \delta , \pi ]  } \phi _n ( t ) $就行,而这是显然的,因为当$t \geq \delta $的时候,分母就有下界了,让$n \to \infty $的时候当然趋近于$0 $.所以$\lim _{ n \to \infty  } I _n = 0 $.</p>
<p>接下来的疑问是当$f $连续时为何一致收敛,这当然是因为$f $是一致连续的,那我上述唯一涉及$x $的地方,也就是当$f ( x \pm t ) \to f ( x ) $的部分就可以被控制住,这就搞定了.</p>
<p>Cesaro收敛的另一个好处在于,当$f ( x + 0 ) $和$f ( x - 0 ) $存在的时候,由于如果逐点收敛一定就能导出Cesaro收敛,因此,如果傅里叶级数在某一点处收敛,则它必然也在这一点处Cesaro收敛且收敛于同一个$\frac { f ( x + 0 ) + f ( x - 0 )  } { 2  } $,换言之如果收敛则一定收敛于此.</p>
<h5><span id="平均收敛">平均收敛</span></h5><p>考虑如果一列函数$f _n $,如果$\int | f _n - f | \to 0 $则我们称这列函数<strong>平均收敛</strong>到$f $.一个平均收敛的函数列可以处处点不收敛,一个逐点收敛的函数也可能并不平均收敛(因为积分不一定收敛).</p>
<p>考虑定义<strong>平方可积函数</strong>$f $为几乎处处连续而且只有有限个瑕点的$f $并且满足$\int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x &lt; \infty $.容易见到闭区间上的平方可积要强于绝对可积,原因正是柯西不等式:</p>
<script type="math/tex; mode=display">
\int _{ - \pi  } ^\pi | f | \mathrm { d  } x \leq \sqrt { ( \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x ) ( \int _{ - \pi  } ^\pi 1 \mathrm { d  } x )  }</script><p>从而看到如果$\int ( f _n - f ) ^2 \mathrm { d  } x \to 0 $则当然有$\int | f _n - f | \mathrm { d  } x \to 0 $,因此我们往往计算前者.</p>
<p>假设$f $是平方绝对可积的,考虑定义$\mathcal { F  } _n $为$n $阶三角多项式组成的集合,设$S _n $是$f $的傅里叶展开的前$n $项,我们有:</p>
<ol>
<li><p>$\int _{ - \pi  } ^\pi ( f - S _n ) ^2 \mathrm { d  } x = \min _{ T _n \in \mathcal { F  } _n  } \int _{ - \pi  } ^\pi ( f - T _n ) ^2 \mathrm { d  } x $.</p>
</li>
<li><p><strong>Bessel不等式</strong>:$\frac { a _0 ^2  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n ^2 + b _n ^2 ) \leq \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x $.</p>
</li>
<li><p><strong>Parseval等式</strong>:$\frac { a _0 ^2  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n ^2 + b _n ^2 ) = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x $.</p>
</li>
<li><p><strong>广义Parseval等式</strong>:设$f , g $都平方可积,则$\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi fg \mathrm { d  } x = \frac { a _0 ( f ) a _0 ( g )  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n ( f ) a _n ( g ) + b _n ( f ) b _n ( g ) ) $.</p>
</li>
</ol>
<p>先看(1)和(2),假设$T _n = \frac { A _0  } { 2  } + \sum _{ k = 1  } ^n A _k \cos ( kx ) + B _k \sin ( kx ) $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _{ - \pi  } ^\pi ( f - T _n ) ^2 \mathrm { d  } x \\
& = \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x + \pi \left ( \frac { A _0 ^2  } { 2  } + \sum _{ k = 1  } ^n ( A _k ^2 + B _k ^2 ) \right ) - 2 \pi ( A _0 \frac { a _0  } { 2  } + \sum _{ k = 1  } ^n a _k A _k + b _k B _k ) \\
& = \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x + \pi \left ( \frac { ( A _0 - a _0 ) ^2  } { 2  } + \sum _{ k = 1  } ^n ( a _k - A _k ) ^2 + ( b _k - B _k ) ^2 \right ) - \pi \left ( \frac { a _0 ^2  } { 2  } + \sum _{ k = 1  } ^n a _k ^2 + b _k ^2 \right ) \\
& \geq \int _{ - \pi  } ^\pi f ^2 \mathrm { d  } x - \pi \left ( \frac { a _0 ^2  } { 2  } + \sum _{ k = 1  } ^n a _k ^2 + b _k ^2 \right ) \\

\end{aligned}</script><p>等号成立当且仅当$A _k = a _k , B _k = b _k $,这样上述两者就都证毕.</p>
<p>再看(3),由(1)和(2),只需要证明对于平方可积函数总存在一列三角多项式$T _n $使得$\lim _{ n \to \infty  } \int _{ - \pi  } ^\pi ( f - T _n ) ^2 \mathrm { d  } x = 0 $即可.</p>
<p>当$f $是黎曼可积的时候这里较为平凡,只需要先用连续函数$g $逼近$f $,再用三角多项式逼近$g $即可.最终因为有$( T - f ) ^2 \leq 2 ( T - g ) ^2 + 2 ( f - g ) ^2 $就行.顺便一提这个不等式还可以证明平方可积的函数的和差也一定是平方可积.</p>
<p>接下来要把瑕点给处理掉,由于平方可积,所以瑕点那里的积分会足够小,直接把那一段抹平成$0 $就行.抹平了后的函数可以被逼近,而抹平带来的影响又很小,这就搞定了.</p>
<p>再看(4),对$( f + g ) $和$( f - g ) $分别做Parseval等式,然后用它们一作差就能证明此结论.</p>
<p>关于Bessel不等式和Parseval等式,一个更好的理解是它体现了正交基上的操作,Bessel不等式说对于一组正交基我们总有$\Vert u \Vert ^2 \leq \sum _k ( u | e _k ) ^2 $成立.</p>
<h6><span id="example1">Example1</span></h6><p>求证:函数$f , g $在$[ - \pi , \pi ] $上黎曼可积,则它们的傅里叶级数相同的充分必要条件是$\int _{ - \pi  } ^\pi | f - g | \mathrm { d  } x = 0 $.</p>
<p>先证明充分性,比较显然:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \int _{ - \pi  } ^\pi ( f - g ) \sin ( nx ) \mathrm { d  } x | \\
& \leq \int _{ - \pi  } ^\pi | f - g | \mathrm { d  } x 
\end{aligned}</script><p>再证必要性,也很显然,考虑如果傅里叶级数相同,则Parseval等式必有$\int f ^2 \mathrm { d  } x = \int g ^2 \mathrm { d  } x = \int fg \mathrm { d  } x $,这说明$\int ( f - g ) ^2 \mathrm { d  } x = 0 $,立刻推出$\int | f - g | \mathrm { d  } x = 0 $.</p>
<h6><span id="example2">Example2</span></h6><p>求证:当$b _n $单调递减趋近于$0 $的时候,如果$\sum \frac { b _n  } { n  } &lt; \infty $,则$f ( x ) = \sum b _n \sin ( nx ) $在$[ - \pi , \pi ] $上绝对可积.</p>
<p>不妨设$x \in [ - \pi , \pi ] $,首先考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = n + 1  } ^{ n + m  } \sin ( kx ) | \\
& = | \frac { \cos ( n + m + \frac { 1  } { 2  } ) - \cos ( n + \frac { 1  } { 2  } )  } { 2 \sin \frac { x  } { 2  }  } | \\
& \leq \frac { 1  } { | \sin \frac { x  } { 2  } |  } 
\end{aligned}</script><p>此时考虑设$S _m = \sum _{ k = n + 1  } ^{ m  } \sin ( kx ) $,取$x \in [ \frac { \pi  } { n + 1  } , \frac { \pi  } { n  } ] $,用Abel变换立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ k = n + 1  } ^{ n + m  } b _k \sin ( kx ) | \\
& = | \sum _{ k = n + 1  } ^{ n + m  } b _k ( S _{ k  } - S _{ k - 1  } ) | \\
& = | \sum _{ k = n + 1  } ^{ n + m - 1  } ( b _{ k  } - b _{ k + 1  } ) S _{ k  } - b _{ n + 1  } S _{ n  } + b _{ n + m  } S _{ n + m  } | \\
& = | \sum _{ k = n + 1  } ^{ n + m - 1  } ( b _{ k  } - b _{ k + 1  } ) S _{ k  } + b _{ n + m  } S _{ n + m  } | \\
& \leq \frac { b _n  } { | \sin \frac { x  } { 2  } |  } \\
& \leq \frac { \pi  } { x  } b _{ n + 1  } \\
& \leq ( n + 1 ) b _n 
\end{aligned}</script><p>这里已经和$m $没有关系了,既然如此考虑取$B _n = \sum _{ k = 1  } ^n b _k $,自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\int _0 ^\pi | f | \mathrm { d x  } & = \sum _{ n = 1  } ^\infty \int _{ \frac { \pi  } { n + 1  }  } ^{ \frac { \pi  } { n  }  } | f | \mathrm { d  } x \\
& \leq \sum _{ n = 1  } ^\infty \int _{ \frac { \pi  } { n + 1  }  } ^{ \frac { \pi  } { n  }  } ( B _n + ( n + 1 ) b _n ) \mathrm { d  } x \\
& = \sum _{ n = 1  } ^\infty \frac { \pi  } { n ( n + 1 )  } ( B _n + ( n + 1 ) b _n ) \\

\end{aligned}</script><p>此时只需检验$\sum \frac { B _n  } { n ( n + 1 )  } $收敛就行了对吧.这个比较平凡:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 1  } ^\infty \frac { B _n  } { n ( n + 1 )  } & = \sum _{ n = 1  } ^\infty \frac { 1  } { n ( n + 1 )  } \sum _{ k = 1  } b _k \\
& = \sum _{ k = 1  } ^\infty b _k \sum _{ n = k  } ^\infty \frac { 1  } { n ( n + 1 )  } \\
& = \sum _{ k = 1  } ^\infty \frac { b _k  } { k  } \\
& < \infty 
\end{aligned}</script><p>这就搞定了.</p>
<h5><span id="逐项积分">逐项积分</span></h5><p>设$f $绝对可积,其傅里叶级数为$\frac { a _0  } { 2  } + \sum a _n \cos ( nx ) + b _n \sin ( nx ) $,考虑取$F ( x ) = \int _0 ^x ( f ( t ) - \frac { a _0  } { 2  } ) \mathrm { d  } t $,容易检查$F ( x ) $是有界变差的,原因是$\sum | F ( x _i ) - F ( x _{ i - 1  } ) | = \sum | \int _{ x _{ i - 1  }  } ^{ x _i  } f ( t ) \mathrm { d  } t | \leq \int | f | $.</p>
<p>既然如此,它就会被它的傅里叶级数一致逼近,不妨记作$F ( x ) = \frac { A _0  } { 2  } + \sum _{ n = 1  } ^\infty A _n \cos ( nx ) + B _n \sin ( nx ) $.</p>
<p>接下来考虑把这些系数都求出来,先令$x = 0 $求出$\frac { A _0  } { 2  } + \sum _{ n = 1  } ^\infty A _n = 0 $,当$n \geq 1 $的时候,留神到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A _n & = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi F ( x ) \cos ( nx ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } F ( x ) \frac { \sin ( nx )  } { n  } | _{ - \pi  } ^\pi - \frac { 1  } { n \pi  } \int _{ - \pi  } ^\pi f ( x ) \sin ( nx ) \mathrm { d  } x \\
& = - \frac { b _n  } { n  } 
\end{aligned}</script><p>注意这里用的分部积分是广义分部积分,我们曾经搞过.</p>
<p>同理$B _n = \frac { a _n  } { n  } $,补一个$x $的傅里叶级数进去,于是我们见到:</p>
<script type="math/tex; mode=display">
\int _0 ^x f ( t ) \mathrm { d  } t = \frac { a _0  } { 2  } x + \sum _{ n = 1  } ^\infty a _n \int _0 ^x \cos ( nt ) \mathrm { d  } t + b _n \int _0 ^x \sin ( nt ) \mathrm { d  } t</script><p>也就是一个函数和傅里叶级数逐项积分后总相等.</p>
<h5><span id="逐项微分">逐项微分</span></h5><p>设$f $可导而且是$2 \pi $周期的,并且$\int _{ - \pi  } ^\pi | f ‘ | \mathrm { d  } x &lt; \infty $,那由逐项积分那里的结论,自然有$a _0 ( f ‘ ) = 0 , a _n ( f ‘ ) = nb _n ( f ) , b _n ( f ‘ ) = - na _n ( f ) $,也就是当:$f = \frac { a _0  } { 2  } + \sum a _n \cos ( nx ) + b _n \sin ( nx ) $,则$f ‘ \sim \sum - na _n \sin ( nx ) + nb _n \cos ( nx ) $.</p>
<h5><span id="收敛速度的估计">收敛速度的估计</span></h5><p>最后来分析一下它的收敛能力,不妨假设$f $是$2 \pi $周期逐段可导函数,并且$\int _{ - \pi  } ^{ \pi  } ( f ‘ ) ^2 \mathrm { d  } x &lt; \infty $,则$\max | f ( x ) - S _n ( x ) | = o ( \frac { 1  } { \sqrt { n  }  } ) $,原因是由Parseval等式,有:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi ( f ' ) ^2 \mathrm { d  } x = \frac { a _0 ( f ' ) ^2  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n ( f ' ) ^2 + b _n ( f ' ) ^2 )</script><p>也就是后面这个级数收敛对吧,那柯西准则给出:</p>
<script type="math/tex; mode=display">
\sum _{ k = n + 1  } ^\infty ( a _k ( f ' ) ^2 + b _k ( f ' ) ^2 ) = o ( 1 )</script><p>现在来看误差项:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| f ( x ) - S _n ( x ) | & \leq | \sum _{ k = n + 1  } ^\infty a _k ( f ) \cos ( kx ) + b _k ( f ) \sin ( kx ) | \\
& \leq \sum _{ k = n + 1  } ^\infty | a _k ( f ) | + | b _k ( f ) | \\
& = \sum _{ k = n + 1  } ^\infty \frac { | a _k ( f ' ) | + | b _k ( f ' ) |  } { k  } \\
& \leq \sqrt { \sum _{ k = n + 1  } ^\infty | a _k ( f ' ) ^2 | + | b _k ( f ' ) ^2 |  } \sqrt { \sum _{ k = n + 1  } ^\infty \frac { 1  } { k ^2  }  } \\
& = o ( 1 ) \frac { 1  } { \sqrt { n  }  } 
\end{aligned}</script><h5><span id="复数形式">复数形式</span></h5><p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( x ) \sim \frac { a _0  } { 2  } + \sum a _n \cos ( nx ) + b _n \sin ( nx ) \\
& = \frac { a _0  } { 2  } + \sum a _n \frac { e ^{ inx  } + e ^{ - inx  }  } { 2  } + \sum b _n \frac { e ^{ inx  } - e ^{ - inx  }  } { 2 i  } \\
& = \sum _{ n = - \infty  } ^\infty c _n e ^{ inx  } 
\end{aligned}</script><p>此时有$c _n = \frac { 1  } { 2 \pi  } \int _{ - \pi  } ^\pi f ( x ) e ^{ - inx  } \mathrm { d  } x $.</p>
<h5><span id="三角级数的唯一性问题">三角级数的唯一性问题</span></h5><p>接下来来解决点看上去很平凡的问题,如果:</p>
<script type="math/tex; mode=display">
\frac { a _0  } { 2  } + \sum _{ n = 1  } ^\infty a _n \cos ( nx ) + b _n \sin ( nx ) = \frac { \tilde { a _0  }  } { 2  } + \sum _{ n = 1  } ^\infty \tilde { a _n  } \cos ( nx ) + \tilde { b _n  } \sin ( nx )</script><p>而且左右两端都收敛到某个函数.能否导出$a _n = \tilde { a _n  } , b _n = \tilde { b _n  } $.注意这里并不能两遍乘个$\cos ( nx ) $然后积分,因为未必可积.</p>
<p>我们下面可以证明,如果上面这种相等除了至多可数个点以外都成立,那就是同一个三角级数.当然只需要证明当:</p>
<script type="math/tex; mode=display">
\frac { a _0  } { 2  } + \sum _{ n = 1  } ^\infty a _n \cos ( nx ) + b _n \sin ( nx ) = 0</script><p>至多除了一个可数集合$E = \{ x _1 , x _2 , \cdots \} $以外成立的时候有$a _n = b _n = 0 $即可.</p>
<p>先来证明一个引理:此时$\lim _{ n \to \infty  } a _n = \lim _{ n \to \infty  } b _n = 0 $.这还并不显然,因为这个三角级数并不一定是傅里叶级数.</p>
<p>首先级数收敛,通项趋近于$0 $,首先设$\rho _n = \sqrt { a _n ^2 + b _n ^2  } $,则$a _n \cos ( nx ) + b _n \sin ( nx ) = \rho _n \sin ( nx + \varphi _n ) $.现在只需要证明$\lim _{ n \to \infty  } \rho _n = 0 $.</p>
<p>反证,如果没有上述结论,则总存在一个无穷子列$\{ \rho _{ n _k  } \} _k $大于某一个正常数$c $,设其指标集合为$F = \{ n _1 &lt; n _2 &lt; \cdots \} $.</p>
<p>现在考虑$[ 0 , 2 \pi ] $上,找一个区间$I _1 = [ l _1 , r _1 ] $使得其不含有$x _1 $,由于$F $通项肯定趋近无穷大,总能找到一个$m _1 \in F $,使得$| [ m _1 l _1 , m _1 r _1 ] | = m _1 | I _1 | &gt; 2 \pi $.既然它的区间长度足够大,那其中总有一个子区间$J _1 \subseteq I _1 $,使得$\sin ( m _1 x + \varphi _{ m _1  } ) &gt; \frac { 1  } { 2  } $在$J _1 $上成立.那我当然可以再找一个子区间$I _2 \subseteq J _1 $使得$I _2 $中不含有$x _2 $,重复以上操作,这就是一个闭区间套.最后套出来了一个点$w \notin E $,此时$\sin ( m _k w + \varphi _{ m _k  } ) &gt; \frac { 1  } { 2  } $,自然有$\varphi _{ m _k  } \sin ( m _k w + \varphi _{ m _k  } ) &gt; \frac { c  } { 2  } $,这立刻导出矛盾.</p>
<p>再来一个引理:假设$F ( x ) \in C ( a , b ) $,可数集合$E \subseteq ( a , b ) $.定义其<strong>二阶差分</strong>为$\Delta _h ^2 F ( x ) = F ( x + 2 h ) + F ( x - 2 h ) - 2 F ( x ) $.已知其<strong>广义二阶导数</strong>$\delta ^2 F = \varlimsup _{ h \to + 0  } \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \geq 0 , \forall x \notin E $,而$\varlimsup _{ h \to + 0  } \frac { \Delta _h ^2 F ( x )  } { h  } \geq 0 , \forall x \in E $.则结论是$F ( x ) $是一个下凸函数.</p>
<p>这个结论的自然之处在于如果$F ‘ ‘ ( x ) $存在,那$F ( x + 2 h ) = F ( x ) + F ‘ ( x ) 2 h + \frac { F ‘ ‘ ( x )  } { 2  } ( 2 h ) ^2 + o ( h ^2 ) $并且$F ( x - 2 h ) = F ( x ) - F ‘ ( x ) 2 h + \frac { F ‘ ‘ ( x )  } { 2  } ( 2 h ) ^2 + o ( h ^2 ) $,所以上面那个$\delta ^2 F = F ‘ ‘ ( x ) $,那如果它非负当然是下凸函数.</p>
<p>那如果$F ‘ ‘ ( x ) $不存在呢?反证,假设$F $不凸,则一定存在一个子区间$( \alpha , \beta ) \subseteq ( a , b ) $,使得在这个区间上,$F ( x ) $函数在$( \alpha , \beta ) $这条弦之上(因为连续性,至少有三个点是违背三弦定理的,作一条弦后,函数有一些部分在上面有一些部分在下面,取某个恒在上面的子区间即可).</p>
<p>总之,我们找到了一个子区间$( \alpha , \beta ) $使得:</p>
<script type="math/tex; mode=display">
F ( x ) - \left ( \frac { F ( \beta ) - F ( \alpha )  } { \beta - \alpha  } ( x - \alpha ) + F ( \alpha ) \right ) > 0</script><p>接下来要推矛盾,分成两种情况:</p>
<p>第一种情况是$\delta ^2 F &gt; 0 $的情形,考虑辅助函数$G _\mu ( x ) = F ( x ) - ( \mu ( x - a ) + F ( \alpha ) ) $,其中$\mu = \frac { F ( \beta ) - F ( \alpha )  } { \beta - \alpha  } + \epsilon $,也就是比原本那条弦的斜率稍微大了一点点,那只要$\epsilon $落在某个足够小的区间内,$G _\mu ( x ) $仍然有大于零的部分.直接取$G _\mu ( x _0 ( \mu ) ) = \max _{ [ \alpha , \beta ]  } G _\mu $,此时观察到$G _\mu $和$F $只差一个一次函数,它们作二阶差分后就相等了,然而,由于$G _\mu ( x _0 ( \mu ) ) $取的是最大值,当$h $取足够小的时候,它的二阶差分一定小于等于$0 $,因此能导出$x _0 ( \mu ) \in E $,并且同理能导出$\varlimsup _{ h \to + 0  } \frac { \Delta _h ^2 F ( x _0 ( \mu ) )  } { h  } = 0 $.从而导出:</p>
<script type="math/tex; mode=display">
\varlimsup _{ h \to + 0  } \frac { G _\mu ( x _0 ( \mu ) - 2 h ) - G _\mu ( x _0 ( \mu ) )  } { h  } = \varlimsup _{ h \to + 0  } \frac { G _\mu ( x _0 ( \mu ) + 2 h ) - G _\mu ( x _0 ( \mu ) )  } { h  } = 0</script><p>欸,你怎么变一阶差分了,那我的一次函数不就有用了么,必定有:</p>
<script type="math/tex; mode=display">
\varlimsup _{ h \to + 0  } \frac { F ( x _0 ( \mu ) - 2 h ) - F ( x _0 ( \mu ) )  } { h  } = 2 \mu</script><p>所以$\mu \to x _0 ( \mu ) $为单射,这与$x _0 ( \mu ) \in E $矛盾.</p>
<p>那么等于$0 $的情况呼之欲出了对吧,此时任意的$n $都可以做到$F ( x ) + \frac { x ^2  } { n  } $是凸的,随便搞个反证法就可以知道$F ( x ) $必定是凸的.</p>
<p>最后来设$F ( x ) = \frac { a _0  } { 4  } x ^2 - \sum _{ n = 1  } ^\infty \frac { a _n \cos ( nx ) + b _n \sin ( nx )  } { n ^2  } $,由于$a _n \to 0 , b _n \to 0 $,所以这玩意用大M判别法知道绝对一致收敛,那就是一个连续函数.</p>
<p>此时计算:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Delta _h ^2 F ( x ) & = \frac { a _0  } { 4  } ( ( x + 2 h ) ^2 + ( x - 2 h ) ^2 - 2 x ^2 ) \\
& - \sum _{ n = 1  } ^\infty \frac { 1  } { n ^2  } ( a _n ( \cos ( n ( x + 2 h ) ) + \cos ( n ( x - 2 h ) ) - 2 \cos ( nx ) ) \\
& + b _n ( \sin ( n ( x + 2 h ) ) + \sin ( n ( x - 2 h ) ) - 2 \sin ( nx ) ) ) \\

\end{aligned}</script><p>而此时对后面的部分用和差化积,留神到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\cos ( n ( x + 2 h ) ) + \cos ( n ( x - 2 h ) ) - 2 \cos ( nx ) \\
& = 2 \cos ( nx ) \cos ( 2 nh ) - 2 \cos ( nx ) \\
& = 2 \cos ( nx ) ( \cos ( 2 nh ) - 1 ) \\
& = - 4 \cos ( nx ) \sin ^2 ( nh ) 
\end{aligned}</script><p>于是:</p>
<script type="math/tex; mode=display">
\frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } = \frac { a _0  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n \cos ( nx ) + b _n \sin ( nx ) ) ( \frac { \sin ( nh )  } { nh  } ) ^2</script><p>乍一看已经要完事了对吧!很可惜并没有,因为这个$n \to \infty $了,我们还需要证明下面这个引理:当$\sum _{ n = 1  } ^\infty a _n = s $收敛的时候,那么$\lim _{ h \to 0 +  } \sum _{ n = 1  } ^\infty a _n ( \frac { \sin ( nh )  } { nh  } ) ^2 = s $.</p>
<p>最难过的是这里的$a _n $不定号,我们可能第一反应是前部分可以让$n \to \infty $而后半部分可以直接抛掉,可在不定号的时候这一切都难以实现了.对于不定号项的求和,我们也许唯一的武器只有Abel变换.设$a _0 = 0 , b _n ( h ) = ( \frac { \sin ( nh )  } { nh  } ) ^2 , b _0 ( h ) = 1 , S _n = \sum _{ k = 1  } ^n a _k $.立刻得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ n = 0  } ^\infty a _n b _n ( h ) & = \sum _{ n = 1  } ^\infty ( S _n - S _{ n - 1  } ) b _n ( h ) \\
& = \sum _{ n = 0  } ^\infty S _n ( b _n ( h ) - b _{ n + 1  } ( h ) ) 
\end{aligned}</script><p>既然$S _n $收敛,不妨设$| S _n | &lt; M $,下面来估计:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| b _{ n + 1  } ( h ) - b _{ n  } ( h ) | & = | \int _{ nh  } ^{ ( n + 1 ) h  } ( \frac { \sin ^2 t  } { t ^2  } ) ' \mathrm { d  } t | \\
& \leq \int _{ nh  } ^{ ( n + 1 ) h  } | \frac { 2 \sin t ( \cos t - \frac { \sin t  } { t  } )  } { t ^2  } | \mathrm { d  } t \\
\sum | b _{ n + 1  } ( h ) - b _{ n  } ( h ) | & \leq \int _{ 0  } ^{ + \infty  } | \frac { 2 \sin t ( \cos t - \frac { \sin t  } { t  } )  } { t ^2  } | \mathrm { d  } t \\

\end{aligned}</script><p>盯着这个积分,发现其在$0 $附近极限存在(泰勒展开就能看到),而在无穷处其实就是$O ( \frac { 1  } { t ^2  } ) $,所以这个积分存在,当然有$\sum | b _{ n + 1  } ( h ) - b _{ n  } ( h ) | \leq + \infty $,其实上面的过程就是在证明这个函数是有界变差的对吧!准备工作业已就绪,不妨设$\varphi _n = b _n ( h ) - b _{ n + 1  } ( h ) $,请看:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \sum _{ n = 0  } ^\infty a _n b _n ( h ) - s | \\
& = | \sum _{ n = 0  } ^\infty ( s _n \varphi _n ( h ) - s \varphi _n ( h ) ) | \\
& \leq \sum _{ n = 0  } ^N | S _n - s | \cdot | \varphi _n ( h ) | + \sum _{ n = N + 1  } ^\infty | S _n - s | \cdot | \varphi _n ( h ) | 
\end{aligned}</script><p>只要取定足够大的$N $就可以使得$| S _n - s | \to 0 $,而在此时只要让$h \to 0 $就可以让前半部分定死的$\varphi _n ( h ) \to 0 $,于是就搞定了.</p>
<p>从而我们可以看到上述引理的确成立了,进一步地两个上极限都等于$0 $,所以$F ( x ) $的确是下凸函数,然而正是因为等于$0 $,所以$- F ( x ) $也是下凸函数,所以$F ( x ) $既是上凸,又是下凸,那它必然是一个一次函数.那$a _0 = 0 $就是必然的了.既然$a _0 = 0 $,$F ( x ) $就是一个$2 \pi $周期函数,所以它必然是常值函数.然而一个三角级数一致收敛到一个常值函数,这个三角级数本身必然是常值函数,所以$a _n = b _n = 0 $,这就搞定了.</p>
<h5><span id="傅里叶级数的最佳逼近性">傅里叶级数的最佳逼近性</span></h5><p>下面我们想证明:傅里叶级数是最佳逼近,如果一个三角级数处处收敛到了一个黎曼可积函数,则这个三角级数就是这个函数的傅里叶级数.(事实上这个结论在绝对可积时也是对的,甚至可以有有限个点不收敛到它)</p>
<p>不妨设$f \in R [ - \pi , \pi ] $,有界$m \leq f \leq M $.三角级数$\frac { a _0  } { 2  } + \sum a _n \cos ( nx ) + b _n \sin ( nx ) $逐点逼近于它本身.我们上面引入的也就是$\delta ^2 F ( x _0 ) = f ( x _0 ) $.</p>
<p>来引入一个引理:如果$\forall x _0 \in ( a , b ) , \delta ^2 F = \lim _{ h \to + 0  } \frac { \Delta _h ^2 F  } { 4 h ^2  } \in [ m , M ] $,则不加极限的情况,$\forall x _0 \in ( a + h , b - h ) , h &gt; 0 , \frac { \Delta _h ^2 F  } { 4 h ^2  } \in [ m , M ] $.</p>
<p>我想这应该是平凡的,方向呼之欲出:使用介值定理.不过这里是二次函数,那我们就取定$F ( x _0 ) , F ( x _0 \pm 2 h ) $三个点,过这三个点做一个二次函数.事实上这个二次函数就是$\varphi ( x ) = F ( x _0 ) + ( x - x _0 ) \frac { F ( x _0 + 2 h ) - F ( x _0 - 2 h )  } { 4 h  } + \frac { ( x - x _0 ) ^2  } { 2  } \frac { \Delta _h ^2 F ( x _0 )  } { 4 h ^2  } $.取$g ( x ) = F ( x ) - \varphi ( x ) $,则$g ( x ) $会在$x _0 , x _0 \pm 2 h $取值为$0 $,并且其在$( x _0 - 2 h , x _0 + 2 h ) $上肯定有一个最大值$x _1 $和一个最小值$x _2 $,在前者的广义二阶导数$\leq 0 $而后者$\geq 0 $,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\delta ^2 F ( x _1 ) - \frac { \Delta _h ^2 F ( x _0 )  } { 4 h ^2  } & \leq 0 & \leq \delta ^2 F ( x _2 ) - \frac { \Delta _h ^2 F ( x _0 )  } { 4 h ^2  } \\
m & \leq \frac { \Delta _h ^2 F ( x _0 )  } { 4 h ^2  } & \leq M 
\end{aligned}</script><p>现在我们就知道如何做了,回忆到:</p>
<script type="math/tex; mode=display">
\frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } = \frac { a _0  } { 2  } + \sum _{ n = 1  } ^\infty ( a _n \cos ( nx ) + b _n \sin ( nx ) ) ( \frac { \sin ( nh )  } { nh  } ) ^2</script><p>当我不取$h \to 0 $的时候这个两边可是一致收敛的.那右边肯定是前边的傅里叶级数,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n ( \frac { \sin ( nh )  } { nh  } ) ^2 & = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \cos ( nx ) \mathrm { d  } x \\
b _n ( \frac { \sin ( nh )  } { nh  } ) ^2 & = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \sin ( nx ) \mathrm { d  } x \\

\end{aligned}</script><p>那我们自然有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \lim _{ h \to + 0  } a _n ( \frac { \sin ( nh )  } { nh  } ) ^2 \\
& = \lim _{ h \to + 0  } \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \cos ( nx ) \mathrm { d  } x \\

\end{aligned}</script><p>然而此时$\frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \in [ m , M ] $,后面积分那个东西有界.欸,取$h = \frac { 1  } { n  } \to 0 $可以拿到一个一致有界的函数列,这不是我们控制收敛定理么,交换顺序!</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _n & = \lim _{ h \to + 0  } \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \cos ( nx ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi \lim _{ h \to + 0  } \frac { \Delta _h ^2 F ( x )  } { 4 h ^2  } \cos ( nx ) \mathrm { d  } x \\
& = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( x ) \cos ( nx ) \mathrm { d  } x \\

\end{aligned}</script><p>这就证毕了.</p>
<h5><span id="傅里叶级数不逐点收敛到自身的连续周期函数">傅里叶级数不逐点收敛到自身的连续周期函数</span></h5><p>定义$C ( T ) $为$2 \pi $周期连续函数组成的线性空间.此时定义$\Vert f - g \Vert = \sup | f - g | $,其实也就是Banach空间对吧.有了范数定义距离,有了距离就可以有开闭集的概念.Baire纲定理告诉我们此时可数个开稠集的交集仍然是稠密集(不过未必是开集).</p>
<p>现在考虑$f ( x ) $的傅里叶级数,取$S _n ( f , x ) = \frac { a _0  } { 2  } + \sum _{ k = 1  } ^n a _k \cos ( kx ) + b _k \sin ( kx ) $,迪利克雷核的结论告诉我们$S _n ( f , x ) = \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi f ( t ) D _n ( x - t ) \mathrm { d  } t $,其中$D _n ( w ) = \frac { \sin ( n + \frac { 1  } { 2  } ) w  } { 2 \sin \frac { w  } { 2  }  } $.</p>
<p>接下来定义$\varphi _f ( x ) = \sup _{ n \geq 1  } | S _n ( f , x ) | $,取$E _m ( x ) = \{ f \in C ( T ) | \varphi _f ( x ) &gt; m \} $.下面我们来证明:$E _m ( x ) $是$C ( T ) $的开稠子集.</p>
<p>是开集应该是自然的结论,因为当$n , x $定死的时候,$S _n ( f , x ) $从定义看是连续地依赖于$f $.如果$f \in E _m ( x ) $,则$\exists n , | S _n ( f , x ) | &gt; m $,那它周围当然有一个小邻域,使得其中的$g $都满足$| S _n ( g , x ) | &gt; m $了,所以这肯定是开集.</p>
<p>接下来得证明它是稠集,定义$g _n ( t ) = \begin{cases}1 &amp; D _n ( t ) \geq 1 \ - 1 &amp; D _n ( t ) \leq - 1 \ D _n ( t ) &amp; \text { otherwise  } \end{cases} $.此时发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi g _n ( t ) D _n ( t ) \mathrm { d  } t \\
& = O ( 1 ) + \frac { 1  } { \pi  } \int _{ - \pi  } ^\pi | D _n ( t ) | \mathrm { d  } t \\

\end{aligned}</script><p>原因是$| D _n ( t ) | \geq 1 $的部分二者相等,而不同的部分在有限区间上积分不会太大.</p>
<p>然而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\frac { 1  } { \pi  } \int _{ - \pi  } ^\pi | D _n ( t ) | \mathrm { d  } t \\
& = \frac { 2  } { \pi  } \int _0 ^\pi | D _n ( t ) | \mathrm { d  } t \\
& = \frac { 1  } { \pi  } \int _0 ^\pi | \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { 2 \sin \frac { t  } { 2  }  } | \mathrm { d  } t \\
& > \frac { 1  } { \pi  } \int _0 ^\pi | \frac { \sin ( n + \frac { 1  } { 2  } ) t  } { t  } | \mathrm { d  } t \\
& > \frac { 1  } { \pi  } \int _0 ^{ ( n + \frac { 1  } { 2  } ) \pi  } \frac { | \sin t |  } { t  } \mathrm { d  } t \\
& > \frac { 1  } { \pi  } \sum _{ k = 2  } ^n \int _{ ( k - 1 ) \pi  } ^{ k \pi  } \frac { | \sin t |  } { t  } \mathrm { d  } t \\
& = \sum _{ k = 2  } ^n O ( 1 ) \frac { 1  } { k  } \\
& = O ( \ln n ) 
\end{aligned}</script><p>接下来考虑取$h _n = \frac { g _n  } { \sqrt { ln n  }  } \to 0 $,则$S _n ( h _n , x ) = O ( \sqrt { \ln n  } ) $.此时设$U _{ \epsilon  } ( f ) = \{ g \in C ( T ) | \Vert f - g \Vert &lt; \epsilon \} $,回忆到三角多项式可以一致逼近任何连续周期函数,所以存在三角多项式(有限项)$T \in U _{ \frac { \epsilon  } { 2  }  } ( f ) $.</p>
<p>取$r _n ( x ) = T + h _n $,由于$h _n \to 0 $,所以当$n $足够大的时候$r _n ( x ) = g + h _n \in U _\epsilon ( f ) $.此时$S _n ( r _n , x ) = S _n ( T , x ) + S _n ( h _n , x ) $,但是$T $是有限项三角多项式,所以$S _n ( r _n , x ) = O ( 1 ) + O ( \sqrt { \ln n  } ) \to \infty $.这就搞定了,那此时$r _n \in E _m ( x ) $而且在$f $的邻域里.所以这个集合是稠密的.</p>
<p>接下来取$E _x = \bigcap _{ m = 1  } ^\infty E _m ( x ) $,容易发现$E _x $中的所有函数在$x $这一点的傅里叶级数竟然都无界,我可以干脆取$E = \bigcap _{ x \in \mathbb { Q  }  } E _x $,则这里面存在一个函数,这个函数的傅里叶级数在任意有理点处发散.</p>
<p>其实还可以更牛,取$F _m ( f ) = \{ x \in \mathbb { R  } | \varphi _f ( x ) &gt; m \} $,这显然是个开集.取$F _f = \bigcap _{ n = 1  } ^\infty F _n $,这就是可数个开集的交.而且从上面的论证可以发现$\mathbb { Q  } \subseteq F _f $,可是这里的$\mathbb { Q  } $是稠密的,所以$F _f $必然也是稠密的,那它就是可数个开稠集的交,有结论说可数个开稠集的交一定是不可数集合.</p>
<p>然而,还有结论说一个周期连续函数的傅里叶级数其实几乎处处收敛于本身.</p>
<h6><span id="example1">Example1</span></h6><p>设$f ( x ) $是$2 \pi $周期连续函数,设$M _n = \max _{ x \in [ - \pi , \pi ]  } | S _n ( x ) | $,求证:$\lim _{ n \to \infty  } \frac { M _n  } { \ln n  } = 0 $.</p>
<p>不妨设$M _f = \max f $,考虑$| S _n ( x ) | \leq | S _n ( x ) - f | + M _f $,而后者是个死数,除以$\ln n $后当然趋近于$0 $.</p>
<p>现在只需要看前者,然而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
S _n ( x ) - f & = \frac { 1  } { \pi  } \int _{ 0  } ^\pi ( f ( x + t ) + f ( x - t ) - 2 f ( x ) ) D _n ( t ) \mathrm { d  } t \\
& = \frac { 1  } { \pi  } \int _{ 0  } ^\delta ( f ( x + t ) + f ( x - t ) - 2 f ( x ) ) D _n ( t ) \mathrm { d  } t 
\end{aligned}</script><p>而回忆到$\int _0 ^\pi | D _n ( t ) | = O ( \ln n ) $,由一致连续性前半部分显然可以决定一个$\delta $是前者$&lt; \epsilon $,这就搞定了.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>你有想去的地方吗</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E4%BD%A0%E6%9C%89%E6%83%B3%E5%8E%BB%E7%9A%84%E5%9C%B0%E6%96%B9%E5%90%97/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<blockquote>
<p>你有想去的地方吗</p>
<p>目的地是天空 还是大海呢</p>
<p>你有想要的东西吗</p>
<p>是繁花 还是细雨呢</p>
<p>——JUSF周存 <a href="https://www.bilibili.com/video/BV1Vv411i7UU">《你有想去的地方吗》</a></p>
</blockquote>
<hr>
<p>那天她问我：“你有想去的地方吗？”</p>
<p>我一时不知道怎么回答，低下了头。</p>
<hr>
<p>我喜欢幻想自己的未来，也喜欢回忆自己的过去。</p>
<p>我当然这样是不对的，我在逃避现实，可我能怎么样呢？</p>
<p>我那天嘲笑自己，觉得自己幻想过的未来好像一个都未曾来过。所有的重要的事都在意料之外。</p>
<p>我还嘲笑自己，自己回忆过的过去，幸福的美好的记忆我回不去，痛苦的悲惨的记忆我改不了。</p>
<p>我有的时候觉得自己的未来一片光明，阳光太过迷幻。</p>
<p>可有的时候又觉得毫无希望，不如死了算了。</p>
<p>我很羡慕高一的我，意气风发，自命不凡，觉得只要自己足够努力，只要自己的感情足够真挚，自己什么都可以做到。觉得自己一定在走向幸福。</p>
<p>现在的我却是瞻前顾后，考虑一切现实的因素。</p>
<hr>
<p>前几天一个朋友突然兴高采烈地跟我说，他找个大师算了一卦，他未来会找到一个特别好特别好的女孩。</p>
<p>嘴上不饶人，我心里其实很羡慕他。这几天和老师聊天，所有的老师都鼓励我，说他们都认为我完全没有问题：无论是高考还是以后。但这些话听上去总有些奇怪的感觉，有些安慰的感觉，有些怜悯的感觉。其实这些话很有道理，毕竟老师们可太熟悉我什么人了。比起这个，路边只问生辰八字的算命先生似乎不靠谱得多。但有些话从人家嘴里说出来，可信度反而看上去高得多。</p>
<p>说到底是命运，我有的时候太过相信命运。</p>
<p>因为当我一步一步往上爬的时候，好像就会有一种错觉，觉得自己是天命之选，自己与众不同。</p>
<p>当我伴着风往下坠落的时候，好像也有一种错觉，觉得自己什么都做不了。</p>
<hr>
<p>但其实能做的还挺多的。我想做的还挺多的。</p>
<p>现在书单里大概攒了十几本高考后想看的书，还有几本看完电子书准备高考后去补纸质书的票的。</p>
<p>和几个朋友约好了考后一起出去全省乱转，和几个朋友约好了去他们的大学看看。</p>
<p>高三不知道为什么突然喜欢上了写小说，现在大概还攒了三四个idea还没动笔，以及几个已经写了但是藏起来的残篇。</p>
<p>买回来的数学书好多还没有仔细看，一直说等到高考后就开始读抽代。</p>
<p>好多画好多建筑只在图片里看过，什么时候能一睹真容呢？</p>
<hr>
<p>周存的《你有想去的地方吗》好像是我关注她之后她发的第一首新歌。我其实不怎么喜欢听外语歌，所以听了一遍就放一边了。</p>
<p>前几天坐在高一楼下，突然想起来了这首歌名，所以我对着竹林，我很想大声喊出来，但我知道喊出来周围一圈人都会觉得我是傻逼，所以我最后还是很小声地念了一句：“你有想去的地方吗？”</p>
<p>但其实根本没什么人，这个时候早就放学了，周围人都走光了。</p>
<p>所以我又站起来，鼓足勇气提高声音喊：“你有想去的地方吗！”</p>
<p>还是没人回应。这时候轮到我不知所措了。</p>
<p>我放下书包，看着远方还亮着的灯，我拼了命大声喊：</p>
<p>“你有想去的地方吗！</p>
<p>你有想见的人吗！”</p>
<hr>
<p>写到这我自己都觉得自己在强说愁了，但总觉得高考前不写点什么心里难受。</p>
<p>其实她并没有问过我想去哪里，但是我确实是一直低着头。</p>
<p>为什么低着头呢？</p>
<p>可能因为我真的有想去的地方。</p>
<p>可能因为我真的有想见的人。</p>
<hr>
<p>高考加油！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>猜火车</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E7%8C%9C%E7%81%AB%E8%BD%A6/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>题目是后来加的，是一首我挺喜欢的歌的名字，原本题目是日记的日期。</p>
<p>下面是原文。</p>
<p>现在耳机里在循环播放《猜火车》。</p>
<p>五年前的我，不谙世事。我在微机课上第一次接触了OI，老师推荐我去学，我就去了。</p>
<p>故事从这里开始，我从此接触了我将为之奋斗五年的OI。</p>
<p>最开始年少轻狂。小孩子什么都不懂，刚刚初一，照顾不好自己，也不知道什么叫天高地厚。当时觉得，未来还离自己太远，却又在心里想象未来的辉煌，觉得自己未来一定无比光明，会去北大、会搞科研、会做出许多许多的成果、会青史留名、会有幸福的一生。当时还什么都不知道呢，考试考得有点不好就是对我最大的打击，会哭好几天呢（笑）。</p>
<p>后来啊，时间一点一点过去了。</p>
<p>我亲眼看着我从山顶坠落、亲眼见证苍穹的沦落、亲眼目睹所有的骄傲被打破——仿佛我已经泯然众人矣了，仿佛所有的故事都结束了。或许我该退役，该好好回去学文化课，该心无旁念学习的。</p>
<p>但最后还是坚持下来了，还是一场一场比赛地打，一套一套卷子地刷。</p>
<p>猜火车的少年，永远不知道下一列火车驶向哪里，大概也无从推理，只是漫无目的、毫无头绪地猜。</p>
<p>猜中了如何？猜错了又如何？</p>
<p>我的努力收获了成效，我的文化课甚至比以前还要好了，我的OI终于打出了不错的成绩。</p>
<p>我敢不敢说这些是我应得的呢？</p>
<p>我不知道。</p>
<p>很早我就听过一句话：所有命运赠送的礼物，都已在暗中标好了价格。</p>
<p>我以为我所付出的努力、经历过的迷茫就是这些价格了。</p>
<p>我真是什么也不懂。</p>
<p>我终于迎来了幻灭。</p>
<p>我失去了我曾骄傲的一切。</p>
<p>我站在现在看过往，已经像看一个陌生人的故事一样了：他聪明、努力、善良、骄傲、幼稚。我无从得知他曾经的骄傲，也无从得知他当时的痛苦。</p>
<p>我只知道，他挺过来了。</p>
<p>好吧，故事又重新开始了，仿佛以前从未开始过，仿佛过去四年都只是幻觉，或者说是另一个人的故事。</p>
<p>那个人早就死去了，不是吗？</p>
<p>但过去的故事，没有结束。</p>
<p>我还记得我第一次来机房的新鲜感；</p>
<p>我还记得我第一次过题的成就感；</p>
<p>我还记得我第一次打比赛的迷茫；</p>
<p>我还记得我第一次给别人讲课的狂妄；</p>
<p>我还记得我第一次拿奖时的喜悦；</p>
<p>我会永远记得，有一天晚上，一个少年让家长拨通了教练的电话；</p>
<p>我会永远记得，他曾狂妄得不可一世，也曾自卑得泪流满面；</p>
<p>我会永远记得，他曾骄傲地宣称：我不能书写神话，但我可以创造奇迹；</p>
<p>我会永远记得，他在模拟赛失利后对朋友的哭诉；</p>
<p>我会永远记得，他在模拟赛打好后大喊的那一声：莫欺少年穷！</p>
<p>所以看上去，故事已经临近尾声。</p>
<p>但我想，故事大概永远不会结束。</p>
<p>这几天经常想：如果我联赛考砸怎么办？如果我省选失利怎么办？如果我国赛出错怎么办？</p>
<p>如果我没能考上北大怎么办？</p>
<p>所有人都在问我这一个问题。</p>
<p>所有人都等着我作出回答。</p>
<p>他们告诉我：一旦我输了，我就全完了。</p>
<p>他们跟我说：一旦我失败了，我将永远翻不了身。</p>
<p>他们是谁呢？</p>
<p>继续向前走吧。</p>
<p>如果你找不到活下去的理由了，请回忆：有一个人，在四年前给了你生活的意义；在现在给了你生活的慰藉。</p>
<p>如果你找不到坚持下去的理由了，请想：你已经承受了许多痛苦，你总得为其他的处于苦难的人做些什么。</p>
<p>愿这世上的人都能幸福。</p>
<p>愿我实现我的梦想和诺言。</p>
<p>（写于2022.10.08）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>一路喧嚣到黄土中</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E4%B8%80%E8%B7%AF%E5%96%A7%E5%9A%A3%E5%88%B0%E9%BB%84%E5%9C%9F%E4%B8%AD/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>我实在睡不着，所以我决定起来写点东西，以纪念我的第一次通宵。说实话，这种想法实在有点可笑，仿佛通宵的意义就是写这篇文章。我有的时候总怀疑自己是不是闲话写多了，所以生活中看到什么都像素材。陀氏说他“担心自己配不上所经受过的苦难。”坦白而言，我的确很喜欢这句话。可我也知道，陀氏这么说一定原因是他是个虔诚的东正教徒，所以他的灵魂可以在饱经苦痛后伟大而不朽。而且他也的确是文学上的天才，他的灵魂也的确随着他的作品伟大而不朽了。可我是个不信神的异教徒，我死了就是死了，一片灵魂也留不下。再者我也不是天才。事实上，我之所以现在仍然醒着动笔写东西（现在是凌晨4:49），无非也就是我清楚地明白了自己并非天才，因此的确，我死后不会留下什么长篇鸿文供人瞻仰，我的灵魂因此也不再可能伟大而不朽了。</p>
<p>我先前说自己不信神，也许这句是气话。因为直到刚刚我还在嘲笑上苍的恶趣味，可如果我在心里真有些什么宿命论信仰，我想也多是自命不凡的骄傲。当一个人开始自命不凡，那对他来说，苦难无非只是磨练。甚至于他每遇到一次苦难，而且是那种最无来由、最奇异、最想不到的苦难时，他只需稍一摸索就会明白：这当然是上天的考验。上天处心积虑、费尽心思地指引着他，一直到他也不知在何方的彼岸那里去。写到这里我也不得不承认，我所描写的这些当然就是我本人。这种宿命论的困扰太过严重，以至于不知从什么时候起——我以考试为例——我好像错以为决定我考试成绩的并不是考前或考中，而是考后。如果我考后灰心丧气、后悔不已、发奋图强，那么我的最终成绩好像也不会多难看；可如果我沾沾自喜、自鸣得意，命运就总是能找到方式击倒我。这甚至使得我一度过于害怕自己心想事不成的能力，在期盼任何事情的时候都要竭力往坏的情况去想，以这种方式向命运摇尾乞怜，展示自己其实并没有颠倒梦想，而是正脚踏实地，而且正亟待命运的救援呢。我在这里又情不自禁提及命运，我想这是一个一锤定音的证据，说明我其实内心深处仍是一个自命不凡的宿命论者。我认为这源于我的懦弱。一个强大的人可以笑着放过苦难，而我只能默默将苦难视作某种积蓄——某种流通于命运之间的货币。</p>
<p>我刚刚提到货币，其实这个比喻不是我想的。我之前给DeepSeek喂了句歌词：“也没有用情至深，到命运心软开恩。”所以是否只要用情至深，就一定能感动神明，换取我应得的幸福呢？而且这其中是否还有某种汇率关系，受了多少苦难可以换取多少分量的幸福。也许神明还默默给苦难和幸福都分了分等级，算了算公式了。</p>
<p>我说“我应得的幸福”，看上去好像是受了多大的委屈。但是，诸君，不论你们会不会哑然失笑，不论你们抛出多少理性分析与证据，再把话题扯到诸如心理学、社会学，或者与我一样，扯到宿命论和神学。无论你们怎么批判我、赞扬我、攻击我、喜爱我，我都一定要说：我认为我完全配得上一份幸福。我直到如今都坚定不移地深信这一点，并且就在刚刚动笔写下这段开头的时候，终于从长篇大论的自我剖析中走了出来。我不敢说我的生命有多耀眼、光彩夺目，但它一定足够璀璨，而且熠熠生辉。我直到写到这里才终于明白先前提及的命运什么的全是借口，与其说我是一个自命不凡的骄傲者，不如说我是歌剧台上登场的演员。我至今都记得王尔德在他小说中嘲讽一个人说话的时候会抬起头来，像是对着看台上的观众表演歌剧。这当然就是我，我所要追求的从来不是什么伟大的不朽的灵魂，不是with pretty flowers 的彼岸，我要做的就是以我的生命完成一场演出，主角可以平庸，但故事必须精彩。一切多余的理性都不该染指这场盛放的晚霞，因为生命只是一场盛大的葬礼。一切悲欢喜乐只是这场葬礼上的配乐，而我要将我所有的情绪都奏得更高亢些。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>壬寅年末</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E5%A3%AC%E5%AF%85%E5%B9%B4%E6%9C%AB/</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><a href="#后记">后记</a></li>
</ul>
<!-- tocstop -->
<span id="more"></span>
<blockquote>
<p>单翅鸟为什么要飞呢</p>
<p>（海子《单翅鸟》）</p>
</blockquote>
<p>谢谢你点开这篇文章。你会是谁呢？也许是恩重如山的老师，也许是相识相知了多年的挚友，也许只是点头之交、萍水相逢。</p>
<p>我不清楚你的身份，也不知道是什么时候你点开了这篇文章。也许是烟花璀璨的夜晚，也许是繁华散尽后的第二天清晨。我不是造物主，我毕竟无法预测到一切。</p>
<p>好吧，我知道在很多人眼里，我在一夜间性情大变。我知道在很多人眼里，包括很多正在读文章的人眼里，我突然变得不可接近、不可理喻。我在一夜间退出了所有的小群，删掉了一批又一批的好友。即使是现在在看文章的你们——我所信任的挚友或是所认同的善良的人，我相信我也可能曾以某种举动伤害过你们。我很抱歉。所以我想，在这一时刻，无论你是谁，我们两个像朋友一样好好聊一聊。我知道似乎没有什么好说的，我也知道人类的悲欢并不相通，我更知道一切的一切都不是我自我孤立，将自己闭塞起来的借口。我不奢求原谅，不奢求理解，不奢求别人将我捧得多么高——就像他们曾经做的那样。我只是想给过去的一年一个交代，写下一个并不完美的句号。人生太长太长了，我不知道等我百年之后再看这一年，我会如何评价它。我无法预料这一年对我的人生会有什么影响，更不知道命运会如何安排，不知道道路通向何方。但我想记住这一年，记住我的变化、我的心情，记住我所经历过的一切。我也想给我的朋友们一个答复，一个道歉。</p>
<blockquote>
<p>生命中真正重要的不是你遭遇了什么，而是你记住了哪些事，又是如何铭记的。</p>
<p>（马尔克斯《百年孤独》）</p>
</blockquote>
<p>有人对我说，我太爱憎分明了，因此活得很累；有人对我说，我道德感太强了，所以容易幻灭；有人说我过于桀骜不驯了，不懂得收敛自己；还有人说，我太刚了，易折。我不知道谁口中的我是真正的我，也许都是，也许都不是。每个人都以自己的方式理解对方，每个人都不一定能理解对方。我看不透，我也不想用别人的评价来概括我这个人，概括我的这一年。我的朋友，我更想，给你讲讲我这一年的故事和感受。</p>
<blockquote>
<p>人只是他企图成为的那样，他只是在实现自己意图上方才存在，所以他除掉自己的行动总和外，什么都不是；除掉他的生命外，什么都不是。</p>
<p>（萨特《存在主义是一种人道主义》）</p>
</blockquote>
<p>我要从何讲起呢？我想起来写前几篇文章的时候，都会放《猜火车》这首歌，而我已经好久没听过它了：猜火车的少年已经长大了，他知道该何去何从了，知道前路该如何走了。他要做的只是去努力赚得那一张火车票，去搭上那一班他清楚目的地的火车。</p>
<p>不过，除开《猜火车》，也许有别的歌，更适合描绘这一年的图景。</p>
<blockquote>
<p>我会永远记得年迈的他拍拍我额头</p>
<p>说：</p>
<p>“别难过，人生路很长，总有人要先走”</p>
<p>（瞳荧《我从人间走过》）</p>
</blockquote>
<p>愿逝者安息，如果有来生……</p>
<p>一定会有来生。</p>
<blockquote>
<p>他问为什么你看起来比我还悲伤</p>
<p>这种人生已经算不错的模样</p>
<p>承认普通接受平庸然后随波流淌</p>
<p>成为别人故事中的稀疏平常</p>
<p>（瞳荧《张小北》）</p>
</blockquote>
<p>一开始，我将自己的qq ID改成了张小北的想法是：我要提醒自己，自己并非什么天生英才，并非天选之子，我只是一个普通人，我应该努力做好普通人应做的事，应该努力让自己不普通，成为所谓“了不起的人”。</p>
<p>但后来，当我见的太多了之后，我才发现，我怎么敢将自己标榜为普通人。</p>
<blockquote>
<p>我以为自己是个普通人，直到遇到了真正的普通人，才发现我拥有的已经是他遥不可及的幸福。（《张小北》评论区）</p>
</blockquote>
<p>我所经历过的我以为是锥心刺骨的生离死别，难道不是大多数人，大多数普通人都要经历的吗？我如何敢标榜自己生不如死的痛苦，我如何敢称自己平庸无比？我如何敢用平庸掩盖自己的失败？我如何敢说自己已经努力到极致？我曾以为我足够努力，这一切都是我应得的。但其实这一切只是我足够幸运不是吗？若我比其他人更聪明，比其他人理解得更快，那这本是上天的安排，是造物主的赠礼，我如何敢将这功劳全然安到自己身上呢？</p>
<p>从那之后，我或许才真正确立了人生理想：我已经经历了苦痛，我要帮助那些苦痛中的人幸福，我要帮助他们远离痛苦；我已经足够幸运，我要帮助那些不幸的人，帮助他们过上幸福的生活。</p>
<p>但我如何确认，我这种感情不是居高临下的怜悯？我如何确认这是真正的善良而不是所谓的责任心？我如何确认我不是将自己摆在了救世主的高位，并且傲慢地认为自己有资格当救世主？我如何确认呢？</p>
<p>我不知道。</p>
<p>我连我自己都看不透。</p>
<p>有人说伪君子虚伪了一辈子，那就是真的君子。</p>
<p>可明明虚伪到连自己都被欺骗，才是最大的悲哀。</p>
<p>我不知道这一切是不是我在自我欺骗，我不知道我自我封闭究竟是为了保护他人还是为了保护自己，或者更有可能只是纯粹的偏见。我不明白。我看不透。</p>
<p>我不知道我会不会找到答案，无所谓。我只希望，我能永远保持对苦难中的人的同情心和同理心，以及尊重，足够的尊重。我希望我能永远认为自己是张小北，也永远将别人认作张小北。我希望自己将每一个人视作历经苦痛仍热爱生活的人，即使我对他们有偏见，也应该想到他们所曾历经的苦痛。我应该尊重每一个人，每一个思考着世界的，感受着生活的人。</p>
<blockquote>
<p>“设想一切，但就是不把我当人看。你一再宣称我在接受实验前什么也不是，我知道为什么。因为如果我什么也不是，你就可以成为我的上帝和主人。你无时无刻憎恨我不知感恩，但信不信由你，我确实感激。然而，你为我做的事尽管美妙，你却没有权利可以像实验动物一样对待我。我现在是个独立的个人，但查理在走进实验室前，同样也是独立的个人。你看起来很惊讶！是的，突然间我们发现我一直是个人，即使以前也是，这对你的信念是一大挑战，因为你认为智商低于一百的人不值得被当人看待。尼姆教授，我相信你看我的时候，你的良心会感到不安。”</p>
<p>（丹尼尔·凯斯《献给阿尔吉侬的花束》）</p>
</blockquote>
<p>但同时，我的同情不应该成为伤害过我的人的盾牌。我曾做错的，是把别人对自己的伤害全然当作自己的错——仅仅因为他们也受过苦难，仅仅因为他们也不易，我就认为自己应该承受一切。我不会再这么做了。</p>
<blockquote>
<p>任由着你躲闪我追赶你走散我呼喊</p>
<p>是谁在泛泛而谈</p>
<p>任由着你来了你笑了你走了不看我</p>
<p>与理所当然分摊</p>
<p>不明白残存的没用的多余的不必的</p>
<p>破烂也在手紧攥</p>
<p>不明白谁赧然谁无端谁古板谁极端</p>
<p>无辜不知所以然</p>
<p>（陈粒《小半》）</p>
</blockquote>
<p>我该如何说呢？</p>
<p>现在回忆起来，一切都好遥远，故事好像从没发生过，也好像从没结束过。我几乎想象不到我当时的心情了，也几乎理解不了我当时的做法了。</p>
<p>做了一场好长好长的梦啊。</p>
<p>好吧，我懦弱，我自卑。我曾将一切都认作我的错。我曾卑微到泥土里，卑微到尘埃里，可最终也没开出花来。无所谓了，我不要在乎这些了。</p>
<p>我现在回看一切才发现：</p>
<p>我从未愧对过任何人，我只是对不起自己。</p>
<blockquote>
<p>或许故事还未结束。</p>
<p>或许故事早就结束。</p>
<p>或许故事从未开始。</p>
<p>或许故事尚未开始。</p>
<p>或许故事不会开始。</p>
</blockquote>
<p>我所盼望着的爱恋，我所向往着的理想的爱人，那个爱我如爱她自己的人，那个和我一样将道德与感情一起摆在首位的人，那个愿意为了爱情放弃所有的责任和幸运的人，我如何知道她什么时候出现呢？</p>
<p>我不知道。</p>
<p>人无法预知自己的命运。</p>
<blockquote>
<p>我把石头还给石头</p>
<p>让胜利的胜利</p>
<p>今夜青稞只属于他自己</p>
<p>一切都在生长</p>
<p>（海子《日记》）</p>
</blockquote>
<p>好吧，我的，壬寅年的故事，写到这里。</p>
<p>马上就是新的一年。</p>
<p>这一年我承受了许多苦痛。</p>
<p>这一年我遇到了很多朋友。</p>
<p>这一年我有所作为又虚度光阴。</p>
<p>这一年我曾光辉熠熠，也曾跌落谷底。</p>
<p>故事还没有写完，新的一年，故事还要继续写。</p>
<p>一切还没有结束，我还要等那一班火车。</p>
<p>那片我所梦的校园，那个我所梦的人在远方等我，</p>
<p>她在等我。</p>
<blockquote>
<p>我很清楚，干游侠骑士这一行，总免不了要吃尽千辛万苦。可我也知道随之而来的无尽福祉。我也懂得，美德只能走在狭窄的小径上，而罪孽却沿着宽敞的大道横行。可我心里有数，两条路的终点和归宿完全不同：罪孽之路虽然宽敞，却最终导向灭亡；而美德的小径尽管狭窄崎岖，但一直通往新生，不是有限的新生，而是没有止境的永生。就像咱们卡斯蒂利亚一位大诗人说的那样：沿着这条崎岖的小径步入天国，获得永生，从此是一颗不落的星。</p>
<p>（塞万提斯《堂吉诃德》）</p>
</blockquote>
<p>我不知道明年的故事会怎么写，我不知道谁是执笔人，更不知道祂会如何对待我。</p>
<blockquote>
<p>若云端之上，果真有主掌一切的神明，</p>
<p>那祂是否知晓一切，拨弄着我的命运；</p>
<p>若宇宙之间，果真有普适万物的规律，</p>
<p>那是否在我降世时，故事就已经写定。</p>
<p>（写于2022.07.09）</p>
<p>是否神明要将我掩埋，</p>
<p>让腐烂泥土中沉睡我的骨骸？</p>
<p>是否太阳的光芒早就不在，</p>
<p>只剩下一个癫狂的人，向着东方，顶礼膜拜。</p>
<p>（写于2022.10.05）</p>
<p>考前跟同学说，我特别讨厌自己不能掌控的局面。那些即使我拼尽全力也无法改变的局面，我是难以面对的。结果还真是一语成谶，现在我的命运脱离于我手中了。</p>
<p>每次听歌，听到《猜火车》的时候总是有别样的感觉：那种青年的迷茫，所谓“未来即是永不到来”的迷茫。我记得曾读过的句子：“对自己命运掌控权的过度追求，是妄图以微弱的天赋和丝毫的努力，挑战造物主的疯狂。”想来大抵如此。</p>
<p>好吧，我不知道故事会不会就此结束。故事开始的时候没有人会一下就注意到，故事结束的时候没有人会相信这已经是终页。造物主的笔永不停歇，没有人会永远是主角。</p>
<p>（写于2022.11.29）</p>
</blockquote>
<p>我不知道，我能不能给自己一个满意的结局。</p>
<blockquote>
<p>这几天经常想：如果我联赛考砸怎么办？如果我省选失利怎么办？如果我国赛出错怎么办？</p>
<p>如果我没能考上北大怎么办？</p>
<p>所有人都在问我这一个问题。</p>
<p>所有人都等着我作出回答。</p>
<p>他们告诉我：一旦我输了，我就全完了。</p>
<p>他们跟我说：一旦我失败了，我将永远翻不了身。</p>
<p>他们是谁呢？</p>
<p>（写于2022.10.08）</p>
</blockquote>
<p>我不知道，是否会有一天，我也再也支撑不住自己。</p>
<blockquote>
<p>英国的乌鸦被屠戮至消亡</p>
<p>高卢的骑士也无人再颂唱</p>
<p>（写于2021年）</p>
<p>好吧，他们说这苦难是神明的考验，</p>
<p>为了使我重生，来迎接前路的遥远。</p>
<p>难道未来真的不能由我自己去选，</p>
<p>要前行，就要流着泪告别、放弃一切？</p>
<p>好吧，他们让我仔细看看这人世间，</p>
<p>哪里不在上演悲欢境遇，生死离别。</p>
<p>难道因为世事无常，悲剧万万千千，</p>
<p>我就只能哭或笑着接受，无力改变？</p>
<p>（写于2022.07.09）</p>
</blockquote>
<p>我知道，我身上寄托着许多人的期盼。</p>
<blockquote>
<p>那些梦并未散去只化作星火</p>
<p>那些事，铭记在某刻</p>
<p>那些人亲吻我后转身走过</p>
<p>我才能是我</p>
<p>别再问，曾经的事有没有如果</p>
<p>别再怕被浪花淹没</p>
<p>（写于2022.05.19）</p>
</blockquote>
<p>我知道，还有许多在苦难中的人，我想要去帮他们。</p>
<blockquote>
<p>愿贫穷的人儿能免于饥荒</p>
<p>愿痛苦的人儿能重拾希望</p>
<p>愿迷茫的人儿能找回方向</p>
<p>愿努力的人儿不失所望</p>
<p>（写于2022.11.05）</p>
</blockquote>
<p>我知道，我还想找到那个她。</p>
<blockquote>
<p>纵使湛蓝如同梦幻；</p>
<p>纵使吹面只是北风寒。</p>
<p>（写于2021年）</p>
<p>你在哪里？</p>
<p>你是森林中飞鸟的歌音，</p>
<p>还是山野中风的呼吸？</p>
<p>是星河中闪烁的光明，</p>
<p>还是月色下静默的冷清？</p>
<p>你生来和光同尘，</p>
<p>却注定大象无形。</p>
<p>（写于2022.12.20）</p>
</blockquote>
<p>我知道，未来的路也许并不好走，但我也一定要走下去。</p>
<blockquote>
<p>活在现在的人已走向未来，</p>
<p>信步前行，满载幸福的回忆；</p>
<p>活在未来的人早死于现在，</p>
<p>还幻想着一切会如同过去。</p>
<p>（写于2022.07.09）</p>
<p>我所追求的一切，如果在这一刻或某一刻崩塌了，我该如何做？我该认为我所追求的都是无用的吗？我该自暴自弃地认为故事该结束了吗？</p>
<p>（写于2022.08.24）</p>
<p>我是个懦夫，所以我不敢回看过去了。</p>
<p>我也是个勇士，因为我要看向未来了。</p>
<p>（写于2022.12.18）</p>
</blockquote>
<p>我相信，我将永远爱着世界，爱着生活。</p>
<blockquote>
<p>生命多么美好，像晨星一样，</p>
<p>挂在天空，发一份很弱的光，</p>
<p>带给夜色中的人一抹微亮。</p>
<p>死亡多么美好，像流星一样，</p>
<p>划过天空，然后只留下愿望：</p>
<p>愿我死后的世界鸟语花香。</p>
<p>（写于2022.07.09）</p>
<p>如果我还有时间，我还有能力，我希望自己能为所有因为这样或那样的原因和我一样痛苦或比我更痛苦的人做些什么，我想让他们幸福，即使我自己都不知道，我还可不可能得到幸福。</p>
<p>“你是来寻找本质的吗？”</p>
<p>“我是来感受存在的。”</p>
<p>（写于2022.09.26）</p>
</blockquote>
<p>我相信，我将永远尊重他人，尊重自己。</p>
<blockquote>
<p>所有人都相信自己是独一无二的，没有人能接受自己的平凡与从众。所以有了叛逆，有了为了“标新”所以“立异”的行为。但很多人往往忘记了，即使最最平凡的普通人，他们身上也有不可磨灭的光芒——道德。</p>
<p>有人认为，罪犯反而是最接近自然的人类，因为自然本就是残酷的，野兽的目的仅仅是自己的个体或族群的存续。而人不一样，我们会注重自身，会有很多人利己、自私，但大部分人仍然秉持着道德，接受着道德：我们认同“己所不欲，勿施于人”，我们认同“达则兼济天下，穷则独善其身”，我们会替别人考虑，我们会思考自己的行为是否对别人产生了伤害。这是我们套在自己身上的枷锁，我们会被枷锁勒痛勒伤，我们会对此感到抱怨，但很少有人尝试去挣脱。因为挣脱了，会有更多的人受到伤害。</p>
<p>（写于2022.04.29）</p>
</blockquote>
<p>我相信，有一天，薄荷会开出淡蓝色的花。</p>
<blockquote>
<p>若我有一天得以一睹灿金的世界，</p>
<p>得以亲吻真正的鲜花，</p>
<p>我也相信她是薄荷的升华，</p>
<p>是我以泪感动上苍得到的奖赏。</p>
<p>（写于2021年）</p>
<p>“我的薄荷正在生长。在月光下，我看着她一点一点长高，伸展出几片淡绿的叶子，散着那股我永远忘不掉的清香。我看着她长出两片含着的叶子，然后它们缓缓张开，里面是一朵淡蓝色的薄荷花。月光洒在上面，像是云散在天上。”</p>
<p>（写于2022.11.13）</p>
</blockquote>
<p>我相信，我将与崭新的灵魂一同醒来。</p>
<blockquote>
<p>尘之花啊，请盛开在这世界</p>
<p>多反射一束光，多舒展一寸羽翼</p>
<p>才能离湛蓝的天空更近</p>
<p>才能触碰那至善至美的神明</p>
<p>才能亲吻那有着洁白双翼的天使</p>
<p>才能以光将影消弭</p>
<p>尘之花啊，我知你生于毫末</p>
<p>我知那影仍要戕害于你</p>
<p>我知你不甘居于这丑陋身躯</p>
<p>但请你相信：</p>
<p>待你的生命散尽</p>
<p>有些会下落，拥抱大地</p>
<p>有些会上升，触摸天际</p>
<p>有些会在人世弥漫</p>
<p>组成另一朵花的魂灵</p>
<p>（写于2022.10.15）</p>
</blockquote>
<p>我相信，我会铭记着所有过去的记忆，向未来走去。</p>
<blockquote>
<p>你曾遁入黑暗之中，</p>
<p>在秋雨中坠落，在时间中沉默。</p>
<p>陪伴你的是腐烂泥土里肮脏的昆虫，</p>
<p>拥抱你的是万丈深渊下无尽的夜色。</p>
<p>（写于2021年）</p>
<p>我打算再买一支新笔，打算将旧笔收藏起来。</p>
<p>新笔上也刻了字，是《吉檀迦利》的第一句：“你已经使我永生。”</p>
<p>（写于2022.12.29）</p>
<p>愿你从此一生心中善意长存，</p>
<p>愿万千苦难磨折无法遮掩你的神。</p>
<p>愿你记得曾拥抱过你的我们，</p>
<p>愿你高唱着理想，回应他人的质问，</p>
<p>愿你敬仰着光芒，永不向罪恶俯身，</p>
<p>我们为你祝福，愿从此所有幸福都将你拥吻。</p>
<p>（写于2022.07.11）</p>
</blockquote>
<p>再见，壬寅年。</p>
<p>你好，癸卯年。</p>
<blockquote>
<p>回去的路上，车流多了起来，不知道为什么。</p>
<p>我发现小区门口的洗车的地方换了足球场，想起之前和父母来这里的情景，有点不知道说什么好。但随即发现只是换了个地方，不过生意看起来冷清了许多。很快我就找到了冷清的原因：前面有了一家新的汽车保养店。</p>
<p>那家包子铺还在开着，我已经记不清什么时候第一次来这里了。</p>
<p>许多新店开了，许多老店还在。</p>
<p>走进小区，我看到原本幼儿园前的几张木椅已经破损地不像样了，里面的钢丝漏了出来，原来竟是假的，可我小时从没怀疑过。幼儿园里空荡荡的，想来孩子们都在室内。往回走的时候听到后面的响声，以为是孩子们出来玩了，回头一看，还是没有人。有一条人工河，上面有一条刻成弯曲木头形状的桥。我想起来曾经经常在上面玩，熟悉每一道花纹。</p>
<p>人工河以前是有生机的，还有很多水。以前是有青蛙的，我来这里抓过蝌蚪。可现在大部分都干涸了，露出了光秃的地面。仅剩的水在今天也结着冰。</p>
<p>曾经那边有一家面包店，我经常在那里买十块钱一袋的肉松面包当作零食。</p>
<p>曾经那边有一家菜店，我有时会替母亲去那里买菜。</p>
<p>曾经小区里是有桃树的，小时候摘过桃子，后来可能摘得人多了，桃树再也见不到了。</p>
<p>曾经小区里有条管道放着水，母亲经常去那里洗衣服，我就坐在她旁边看书。</p>
<p>我张开手，拿出攥着的硬币。我记得我小时候捡到一元钱是很开心的，我可以买两袋零食吃，同学也会都来分着要。</p>
<p>所以，我望着前面结冰的河，把硬币放在拇指上。</p>
<p>希望以后，不必回望过去，不必妄想将来，只活在当下，做好自己。</p>
<p>希望以后，不必因为别人而惩罚自己，不必在意别人的评价，不必在意别人的性格。</p>
<p>希望以后，只为自己而活，不必将生命托付给谁，只为了所有的记忆与情感而活。</p>
<p>我抛出硬币。</p>
<p>我记得月考后，我拿着橡皮和自己打赌。“三次正面”，我扔了两正一反。但又不甘心，于是又来：“五次正面”，这次倒是扔了五次正面，但我又不放心了，再扔一次，是反面。</p>
<p>所以我转身，我听见硬币落在地上，滚动着，然后停下。</p>
<p>我不回头地向家走去。</p>
<p>去他妈的命运。</p>
<p>（写于2022.01.07）</p>
</blockquote>
<p>感谢你看到这里，我的朋友。</p>
<p>新年快乐！</p>
<blockquote>
<p>人在雨中往前走，在人的感受中，本应静止的树木自然在往后走。时间在不可抗地流逝，人不可抗地要往前走，树木也不可抗地往后走。人的生命一点一点流失，过往的记忆埋在树洞里，生出叶来。</p>
<p>当雨停了的那一天，也许人也走到了生命的终末。他停下脚步，回望自己的一生。愿他会发现，自己的一生是多么灿烂，即使自己已经到了人生的冬季，自己的故事也会在这天空绽开。</p>
<p>（某年，某月，某日，读过《树与天空》，记在……）</p>
</blockquote>
<h3><span id="后记">后记</span></h3><p>大概是第一次如此用心地写文章，从发布前大概两周开始准备。因为我想让这篇文章彻底成为一个句号，也成为一个开始。</p>
<p>原本只是想参杂着歌词。大概是发布前一个周，翻了翻日记本，才有了用类似蒙太奇的手法串起来这一年写的日记来总结。发布前两三天想起插入一些这一年读过的书。</p>
<p>最终插入的书选定了《堂吉诃德》《百年孤独》《献给阿尔吉侬的花束》《存在主义是一种人道主义》《海子全集》。原定还有更多，这是精简后的结果。在我看来，前三本书所代表的：理想、记忆、善良，是我想要去成为的人的模样。而第四本书则告诉了我应该如何去成为这样的人。</p>
<p>下面是过程中的一些改动：</p>
<p>《百年孤独》的引用原本选择了马尔克斯的诺奖领奖词，后改为“世界乃身外之物”，后改为现在这段。</p>
<p>萨特的《恶心》未读完，只能引用《存在主义是一种人道主义》中的句子。原本还有同篇文章中萨特对信任他人的阐释，后删。</p>
<p>《献给阿尔吉侬的花束》阅读时过于注重情节，没留下多少摘抄，只能找了一段对话插入。</p>
<p>《小王子》原本引用其改编电影中的结尾句子，后删。</p>
<p>原定引用莫奈的故事，后删。</p>
<p>第二部分第三段的引用歌曲原定《然而我不是神》的结尾，后改为《我用什么把你留住》的开头，后改为《小半》。</p>
<p>原本第二部分的结尾是海子《以梦为马》和《黑翅膀》的节选，后删，改为《堂吉诃德》的摘抄。</p>
<p>原本的结尾是海子在《面朝大海，春暖花开》最后的祝福，后删，改为现在这一段。</p>
<p>全篇中，下标写于xx日或未标记来源的均是我曾经写过的日记或随笔，选定的时候有轻微改动。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数</title>
    <url>/2025/06/22/%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%AD%89%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><a href="#抽象代数">抽象代数</a><ul>
<li><a href="#群">群</a><ul>
<li><a href="#定义">定义</a></li>
<li><a href="#基本概念和事实">基本概念和事实</a><ul>
<li><a href="#example1">Example1</a></li>
<li><a href="#example2">Example2</a></li>
</ul>
</li>
<li><a href="#子群">子群</a><ul>
<li><a href="#example1-1">Example1</a></li>
<li><a href="#example2-1">Example2</a></li>
<li><a href="#example3">Example3</a></li>
<li><a href="#example4">Example4</a></li>
<li><a href="#example5">Example5</a></li>
<li><a href="#example6">Example6</a></li>
<li><a href="#example7">Example7</a></li>
<li><a href="#example8">Example8</a></li>
</ul>
</li>
<li><a href="#同态和同构">同态和同构</a></li>
<li><a href="#群的实例">群的实例</a><ul>
<li><a href="#全变换群对称群与交错群">全变换群,对称群与交错群</a></li>
<li><a href="#一般线性群">一般线性群</a></li>
<li><a href="#克莱因四元群">克莱因四元群</a></li>
<li><a href="#循环群">循环群</a></li>
</ul>
</li>
<li><a href="#相反群">相反群</a><ul>
<li><a href="#example1-2">Example1</a></li>
</ul>
</li>
<li><a href="#陪集">陪集</a></li>
<li><a href="#群作用">群作用</a><ul>
<li><a href="#cayley定理">Cayley定理</a></li>
<li><a href="#burnside引理">Burnside引理</a></li>
<li><a href="#p-群">$p$-群</a><ul>
<li><a href="#example1-3">Example1</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#正规子群">正规子群</a><ul>
<li><a href="#正规子群的判定定理">正规子群的判定定理</a><ul>
<li><a href="#example1-4">Example1</a></li>
<li><a href="#example2-2">Example2</a></li>
</ul>
</li>
<li><a href="#正规子群与同态">正规子群与同态</a></li>
<li><a href="#同态基本定理">同态基本定理</a></li>
<li><a href="#第一同构定理">第一同构定理</a></li>
<li><a href="#第二同构定理">第二同构定理</a></li>
<li><a href="#交换化">交换化</a><ul>
<li><a href="#example1-5">Example1</a></li>
<li><a href="#example2岩泽健吉iwasawa判准">Example2(岩泽健吉(Iwasawa)判准)</a></li>
<li><a href="#example3-1">Example3</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#群的直和与直积">群的直和与直积</a><ul>
<li><a href="#直和">直和</a></li>
<li><a href="#半直积">半直积</a><ul>
<li><a href="#example1-6">Example1</a></li>
<li><a href="#example2二面体群">Example2(二面体群)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#环">环</a><ul>
<li><a href="#子环">子环</a></li>
<li><a href="#理想">理想</a></li>
<li><a href="#同态和同构-1">同态和同构</a><ul>
<li><a href="#同态基本定理-1">同态基本定理</a></li>
<li><a href="#第一同构定理-1">第一同构定理</a></li>
<li><a href="#第二同构定理-1">第二同构定理</a></li>
</ul>
</li>
<li><a href="#整环">整环</a><ul>
<li><a href="#特征">特征</a></li>
<li><a href="#整除性">整除性</a></li>
<li><a href="#唯一分解整环ufd">唯一分解整环(UFD)</a></li>
<li><a href="#主理想整环pid">主理想整环(PID)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#多项式环">多项式环</a><ul>
<li><a href="#一元多项式环">一元多项式环</a></li>
<li><a href="#多元多项式环">多元多项式环</a></li>
<li><a href="#不可约多项式">不可约多项式</a><ul>
<li><a href="#本原多项式">本原多项式</a></li>
<li><a href="#一个判定不可约的算法">一个判定不可约的算法</a></li>
<li><a href="#不可约多项式上的扩域">不可约多项式上的扩域</a></li>
</ul>
</li>
<li><a href="#对称多项式">对称多项式</a><ul>
<li><a href="#牛顿公式">牛顿公式</a></li>
</ul>
</li>
<li><a href="#结式">结式</a></li>
<li><a href="#判别式">判别式</a></li>
</ul>
</li>
<li><a href="#域">域</a><ul>
<li><a href="#分式域">分式域</a></li>
<li><a href="#子域">子域</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#线性代数">线性代数</a><ul>
<li><a href="#矩阵引入">矩阵引入</a><ul>
<li><a href="#矩阵运算">矩阵运算</a></li>
<li><a href="#分块矩阵">分块矩阵</a></li>
</ul>
</li>
<li><a href="#线性方程组">线性方程组</a><ul>
<li><a href="#系数矩阵和增广矩阵">系数矩阵和增广矩阵</a></li>
<li><a href="#矩阵的初等行变换">矩阵的初等行变换</a></li>
<li><a href="#阶梯形矩阵">阶梯形矩阵</a><ul>
<li><a href="#简化阶梯形矩阵的唯一性">简化阶梯形矩阵的唯一性</a></li>
</ul>
</li>
<li><a href="#解线性方程组">解线性方程组</a><ul>
<li><a href="#存在与唯一性定理">存在与唯一性定理</a></li>
</ul>
</li>
<li><a href="#矩阵方程">矩阵方程</a></li>
<li><a href="#齐次线性方程组">齐次线性方程组</a></li>
</ul>
</li>
<li><a href="#线性空间">线性空间</a><ul>
<li><a href="#相关运算">相关运算</a><ul>
<li><a href="#直积">直积</a></li>
<li><a href="#直和-1">直和</a></li>
<li><a href="#叉乘">叉乘</a></li>
</ul>
</li>
<li><a href="#线性无关与线性相关">线性无关与线性相关</a></li>
<li><a href="#子空间">子空间</a><ul>
<li><a href="#向量的线性组合">向量的线性组合</a></li>
<li><a href="#线性映射">线性映射</a></li>
<li><a href="#基和维数">基和维数</a></li>
</ul>
</li>
<li><a href="#可逆矩阵">可逆矩阵</a><ul>
<li><a href="#初等矩阵">初等矩阵</a></li>
<li><a href="#求解逆矩阵">求解逆矩阵</a><ul>
<li><a href="#example1lu分解">Example1(LU分解)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#核与像与秩">核与像与秩</a><ul>
<li><a href="#sylvester秩不等式">Sylvester秩不等式</a></li>
<li><a href="#frobenius秩不等式">Frobenius秩不等式</a></li>
</ul>
</li>
<li><a href="#对偶空间">对偶空间</a></li>
<li><a href="#直和分解与分块矩阵">直和分解与分块矩阵</a></li>
<li><a href="#基的变换">基的变换</a><ul>
<li><a href="#矩阵的共轭相似">矩阵的共轭(相似)</a></li>
<li><a href="#矩阵的相抵">矩阵的相抵</a></li>
</ul>
</li>
<li><a href="#商空间">商空间</a><ul>
<li><a href="#同态基本定理-2">同态基本定理</a></li>
<li><a href="#第一同构定理-2">第一同构定理</a></li>
<li><a href="#第二同构定理-2">第二同构定理</a></li>
<li><a href="#旗">旗</a></li>
<li><a href="#不变子空间">不变子空间</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#行列式">行列式</a><ul>
<li><a href="#置换排列">置换(排列)</a></li>
<li><a href="#交错形式">交错形式</a></li>
<li><a href="#定义-1">定义</a></li>
<li><a href="#余子式与代数余子式">余子式与代数余子式</a></li>
<li><a href="#行列式定向">行列式定向</a></li>
<li><a href="#克拉默cramer法则">克拉默(Cramer)法则</a></li>
<li><a href="#一些特殊行列式">一些特殊行列式</a><ul>
<li><a href="#置换矩阵">置换矩阵</a></li>
<li><a href="#上三角矩阵">上三角矩阵</a></li>
<li><a href="#分块上三角矩阵">分块上三角矩阵</a></li>
<li><a href="#范德蒙德vandermonde行列式">范德蒙德(Vandermonde)行列式</a></li>
<li><a href="#一类分块矩阵">一类分块矩阵</a></li>
</ul>
</li>
<li><a href="#特征多项式">特征多项式</a></li>
<li><a href="#cayley-hamilton定理">Cayley-Hamilton定理</a></li>
<li><a href="#矩阵的迹">矩阵的迹</a><ul>
<li><a href="#example">Example</a></li>
</ul>
</li>
<li><a href="#binet-cauchy定理">Binet-Cauchy定理</a></li>
<li><a href="#特征值与特征向量">特征值与特征向量</a></li>
<li><a href="#极小多项式">极小多项式</a></li>
<li><a href="#同步对角化">同步对角化</a></li>
<li><a href="#上三角化">上三角化</a></li>
<li><a href="#广义特征子空间">广义特征子空间</a></li>
<li><a href="#特殊矩阵的特征值">特殊矩阵的特征值</a><ul>
<li><a href="#example-1">Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#双线性形式">双线性形式</a><ul>
<li><a href="#线性映射-1">线性映射</a></li>
<li><a href="#非退化形式">非退化形式</a></li>
<li><a href="#伴随映射">伴随映射</a></li>
<li><a href="#分类问题">分类问题</a></li>
<li><a href="#二次型">二次型</a><ul>
<li><a href="#实二次型">实二次型</a></li>
<li><a href="#惯性sylvester定理">惯性(Sylvester)定理</a></li>
</ul>
</li>
<li><a href="#辛空间">辛空间</a><ul>
<li><a href="#达布定理">达布定理</a></li>
</ul>
</li>
<li><a href="#回看对偶空间">回看对偶空间</a><ul>
<li><a href="#双重对偶">双重对偶</a></li>
<li><a href="#核余核与对偶映射">核,余核与对偶映射</a></li>
<li><a href="#像自对偶">像自对偶</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#实内积空间">实内积空间</a><ul>
<li><a href="#勾股定理">勾股定理</a></li>
<li><a href="#柯西不等式">柯西不等式</a></li>
<li><a href="#三角不等式">三角不等式</a></li>
<li><a href="#距离相关">距离相关</a></li>
<li><a href="#正交向量族">正交向量族</a></li>
<li><a href="#gram-schmidt-正交化">Gram-Schmidt 正交化</a><ul>
<li><a href="#example1ru分解">Example1(RU分解)</a></li>
<li><a href="#example2legendre多项式">Example2(Legendre多项式)</a></li>
</ul>
</li>
<li><a href="#正交算子">正交算子</a></li>
<li><a href="#正交补空间">正交补空间</a></li>
<li><a href="#投影矩阵">投影矩阵</a></li>
<li><a href="#自伴算子">自伴算子</a><ul>
<li><a href="#实sylvester-判准">(实)Sylvester 判准</a></li>
<li><a href="#实正定矩阵的二次根">(实)正定矩阵的二次根</a><ul>
<li><a href="#example1-7">Example1</a></li>
<li><a href="#example2-3">Example2</a></li>
</ul>
</li>
<li><a href="#极分解">极分解</a></li>
<li><a href="#最小二乘法">最小二乘法</a></li>
</ul>
</li>
<li><a href="#奇异值分解">奇异值分解</a></li>
<li><a href="#moore-penrose-广义逆">Moore-Penrose 广义逆</a></li>
<li><a href="#极大化极小原理courant-fischer定理">极大化极小原理(Courant-Fischer定理)</a></li>
<li><a href="#perron-frobenius定理">Perron-Frobenius定理</a><ul>
<li><a href="#collatz-wielandt公式">Collatz-Wielandt公式</a></li>
<li><a href="#perron定理">Perron定理</a></li>
</ul>
</li>
<li><a href="#实正交变换的标准型">实正交变换的标准型</a><ul>
<li><a href="#欧拉角">欧拉角</a></li>
<li><a href="#四元数">四元数</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#复内积空间">复内积空间</a><ul>
<li><a href="#共轭空间">共轭空间</a></li>
<li><a href="#复半双线性形式">(复)半双线性形式</a></li>
<li><a href="#伴随映射-1">伴随映射</a></li>
<li><a href="#hermite形式">Hermite形式</a><ul>
<li><a href="#正规线性映射">正规线性映射</a></li>
<li><a href="#二次型-1">二次型</a></li>
</ul>
</li>
<li><a href="#复内积空间-1">复内积空间</a><ul>
<li><a href="#酉变换">酉变换</a></li>
<li><a href="#正规算子的酉对角化谱定理">正规算子的酉对角化(谱定理)</a></li>
<li><a href="#相关实内积空间定理推广">相关实内积空间定理推广</a></li>
<li><a href="#复矩阵范数实例">复矩阵范数实例</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#模">模</a><ul>
<li><a href="#自由模">自由模</a><ul>
<li><a href="#example1非自由模">Example1(非自由模)</a></li>
</ul>
</li>
<li><a href="#线性映射和模结构">线性映射和模结构</a></li>
<li><a href="#主理想环上的有限生成模">主理想环上的有限生成模</a><ul>
<li><a href="#自由模与其子模">自由模与其子模</a></li>
<li><a href="#smith标准型">Smith标准型</a></li>
<li><a href="#结构定理">结构定理</a></li>
<li><a href="#有限生成交换群的分类">有限生成交换群的分类</a></li>
</ul>
</li>
<li><a href="#有理标准型">有理标准型</a><ul>
<li><a href="#example1-8">Example1</a></li>
</ul>
</li>
<li><a href="#jordan标准型">Jordan标准型</a><ul>
<li><a href="#加性jordan-chevalley分解">加性Jordan-Chevalley分解</a></li>
<li><a href="#乘性jordan-chevalley分解">乘性Jordan-Chevalley分解</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#张量积">张量积</a><ul>
<li><a href="#张量积与直和">张量积与直和</a></li>
<li><a href="#kronecker积">Kronecker积</a></li>
<li><a href="#张量积与对偶空间">张量积与对偶空间</a></li>
<li><a href="#张量代数">张量代数</a><ul>
<li><a href="#另一种构造">另一种构造</a></li>
<li><a href="#又看对偶空间">又看对偶空间</a><ul>
<li><a href="#example1-9">Example1</a></li>
<li><a href="#example2-4">Example2</a></li>
</ul>
</li>
<li><a href="#简单应用">简单应用</a></li>
</ul>
</li>
<li><a href="#域的变换">域的变换</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->
<span id="more"></span>
<h2><span id="抽象代数">抽象代数</span></h2><h3><span id="群">群</span></h3><h4><span id="定义">定义</span></h4><p>如果一个非空集合$G $上定义了一个二元运算$\circ : G \times G \to G $(不引起混淆的前提下,通常省略不写,例如$a \circ b $记作$ab $),满足:</p>
<ol>
<li><p>封闭性:$a \circ b \in G $.</p>
</li>
<li><p>结合律:$( a \circ b ) \circ c = a \circ ( b \circ c ) $.</p>
</li>
</ol>
<p>那么称作$G $是一个<strong>半群</strong>.</p>
<p>如果它还满足:</p>
<ol>
<li>存在幺元:$\exists e \in G $,使得$\forall a , e \circ a = a \circ e = a $.</li>
</ol>
<p>那么称作$G $是一个<strong>幺半群(monoid)</strong>.</p>
<p>如果它还满足:</p>
<ol>
<li>存在逆元:对任意的$a \in G $,存在$b \in G $,使得$a \circ b = e $.</li>
</ol>
<p>那么称作$G $是一个<strong>群</strong>.</p>
<p>如果它还满足:</p>
<ol>
<li>交换律:$\forall a , b , a \circ b = b \circ a $.</li>
</ol>
<p>那么称作$G $是一个<strong>交换群</strong>或<strong>阿贝尔群</strong>.特别地,一般而言在交换群里,我们的运算使用加法符号(有时也直接叫它加法群),这只是一个惯例.</p>
<p>下面主要研究群.</p>
<h4><span id="基本概念和事实">基本概念和事实</span></h4><p>定义群的<strong>阶</strong>为群中元素个数,记作$| G | $,如果$| G | &lt; \infty $称为<strong>有限群</strong>,否则为<strong>无限群</strong>.</p>
<ol>
<li>群的幺元唯一.</li>
</ol>
<p>设$e , e ‘ $都是幺元,有$e = ee ‘ = e ‘ $.</p>
<ol>
<li>群中任一元素的逆元唯一.</li>
</ol>
<p>设$b , b ‘ $都是$a $的逆元,有$b = bab ‘ = b ‘ $.</p>
<p>这同样说明了虽然群上的二元运算有可能不满足交换律,但是仍然不存在左逆和右逆这种东西(或者说无意义),它俩都等价于逆.</p>
<ol>
<li>群中有消去律,即$ax = ay \Leftrightarrow x = y $(左消去律),$xa = ya \Leftrightarrow x = y $(右消去律).</li>
</ol>
<p>显然.</p>
<p>于是可以定义乘方,并定义$a ^{ 0  } = e , a ^{ - 1  } = inv ( a ) $.一切的指数的常规操作在这里都可以照常进行.</p>
<h5><span id="example1">Example1</span></h5><p>证明:对于有限集合$G $和满足结合律的二元运算$\circ $来说,如果其有左右消去律,那么该二元运算在该集合上构成群.</p>
<p>考虑是有限集合,所以单射$f _a : b \rightarrow ab $同时也是满射,这意味着$\forall a , b \in G , xa = b $和$ay = b $一定有解,令$b = a $可以拿到幺元,令$b = e $可以拿到逆元,自然可以推出其是群.</p>
<h5><span id="example2">Example2</span></h5><p>设$G $是群,且$\exists a , b , aba ^{ - 1  } = b ^r $,求证:$a ^i ba ^{ - i  } = b ^{ r ^i  } $.</p>
<p>显然$b ^{ rk  } = ( b ^k ) ^r = ab ^k a ^{ - 1  } $,使用数学归纳,注意到$b ^{ r ^i  } = ab ^{ r ^{ i - 1  }  } a ^{ - 1  } = a ^i ba ^{ - i  } $.</p>
<h4><span id="子群">子群</span></h4><p>设$H $为群$G $的非空子集,如果$H $在$G $的运算下构成群,则称$H $为$G $的<strong>子群</strong>,记作$H \leq G $.</p>
<p><strong>子群的判定定理</strong>:</p>
<p>设$G $是群,$H \subseteq G , H \ne \emptyset $,下列命题等价:</p>
<ol>
<li><p>$H \leq G $.</p>
</li>
<li><p>$\forall a , b \in H , ab \in H , a ^{ - 1  } \in H $.</p>
</li>
<li><p>$\forall a , b \in H $,有$ab ^{ - 1  } \in H $.</p>
</li>
</ol>
<p>显然(1)$\Rightarrow $(2),(2)$\Rightarrow $(3),下面证明(3)$\Rightarrow $(1):</p>
<p>满足(3),有$e = aa ^{ - 1  } \in H $,于是存在幺元.有$ea ^{ - 1  } \in H $,于是存在逆元.因为$a ( b ^{ - 1  } ) ^{ - 1  } = ab \in H $,于是对运算封闭.同样的运算显然满足结合律.于是证毕.</p>
<p>如果$G $是群,$H , K \subseteq G $,类似闵可夫斯基和,我们定义$HK = \{ hk \mid h \in H , k \in K \} $.如果$H = \{ a \} $,可以写作$aK $.类似记$H ^{ - 1  } = \{ h ^{ - 1  } \mid h \in H \} $,注意$HH ^{ - 1  } \ne \{ e \} $.</p>
<p>再定义$H ^n = \{ h _1 h _2 \cdots h _n \mid h _1 , h _2 , \cdots , h _n \in H \} $.</p>
<p>于是子群的判定定理可以改写成:</p>
<p>下列命题等价:</p>
<ol>
<li><p>$H \leq G $.</p>
</li>
<li><p>$H ^2 \subseteq H \land H ^{ - 1  } \subseteq H $.</p>
</li>
<li><p>$HH ^{ - 1  } \subseteq H $.</p>
</li>
</ol>
<p>显然,任意群$G $,$G $和$\{ e \} $都是它的子群,我们称为<strong>平凡子群</strong>,如果$H \ne G $,称为<strong>真子群</strong>,记作$H &lt; G $.</p>
<p>若干个群的交仍然是子群,但是若干个群的并不一定.我们可以证明一下若干个群的交仍然是子群:考虑$h \in A , h \in B , w \in A , w \in B $,那么$hw ^{ - 1  } \in A \cap B $.</p>
<p>设集合$M \subseteq G $,则称$G $的所有包含$M $的子群的交为由$M $<strong>生成的子群</strong>,记作$\langle M \rangle $.这显然是包含$M $的最小的子群.</p>
<p>如果$\lang M \rang = G $,则称$M $是$G $的一个<strong>生成系</strong>.可由有限多个元素生成的群叫做<strong>有限生成群</strong>,若$\exists M , | M | = 1 , \lang M \rang = G $,则称$G $是<strong>循环群</strong>.</p>
<p>对于$a \in G $,我们称$o ( a ) = | \lang a \rang | $为$a $的<strong>阶</strong>,不难发现$o ( a ) $是满足$a ^n = e $的最小的正整数$n $.如果这样的$n $不存在,记$o ( a ) = \infty $.群中所有元素的阶的$lcm $称作群的<strong>方次数</strong>(如果不存在,则记为$\infty $),记作$\exp ( G ) $.</p>
<p>另一个不平凡的例子是群$G $的<strong>中心</strong>定义为$Z _G = \{ z \in G \mid \forall g \in G , zg = gz \} $,这显然也是一个子群.</p>
<h5><span id="example1">Example1</span></h5><p>证明不存在恰有两个二阶元素的群.</p>
<p>不妨设这两个二阶元素分别为$a \ne b , a , b \ne e $,则注意到$aba $也是一个二阶元素.</p>
<p>如果$aba = a $,则$ba = e $,说明$a = b $.</p>
<p>如果$aba = b $,则$ba = ab $,说明$ab $是第三个二阶元素.</p>
<p>类似还可以证明如果$\exp ( G ) = 2 $,则$G $一定是交换群(一定满足$\forall a , b \in G , ab = ba $).原因是假设$ab = c $,$ba = d $,则$cd = e $.</p>
<h5><span id="example2">Example2</span></h5><p>对于一个群$G $,如果$\forall a , b \in G $,$\exists i \in \mathbb { N _+  } , ( ab ) ^i = a ^i b ^i , ( ab ) ^{ i + 1  } = a ^{ i + 1  } b ^{ i + 1  } , ( ab ) ^{ i + 2  } = a ^{ i + 2  } b ^{ i + 2  } $,求证其是交换群.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( ab ) ^{ i + 1  } & = a ^{ i + 1  } b ^{ i + 1  } & = a ( ab ) ^i b \\
( ab ) ^i & = a ( ab ) ^i a ^{ - 1  } 
\end{aligned}</script><p>同理有$( ab ) ^{ i + 1  } = a ( ab ) ^{ i + 1  } a ^{ - 1  } $.两式合并一下有$a ( ab ) ^i a ^{ - 1  } ab = a ( ab ) ^{ i + 1  } a ^{ - 1  } \Rightarrow b = aba ^{ - 1  } $.</p>
<h5><span id="example3">Example3</span></h5><p>证明若$\exp ( G ) \in \text { even  } $,则存在阶为$2 $的元素.</p>
<p>一定存在一个阶为$2 k $的元素$a $,显然$o ( a ^k ) = 2 $.</p>
<h5><span id="example4">Example4</span></h5><p>当$n &gt; 2 $的时候,证明在有限群$G $中阶为$n $的元素个数是偶数.</p>
<p>显然构造双射$a \mapsto a ^{ n - 1  } $即可.</p>
<h5><span id="example5">Example5</span></h5><p>对于群$G $,证明$o ( ab ) = o ( ba ) $.</p>
<p>考虑反证,不妨设$o ( ab ) = n &lt; o ( ba ) = m $.</p>
<p>则$e = ( ba ) ^m = ( ba ) ^{ m - n  } b ( ab ) ^{ n - 1  } a = ( ba ) ^{ m - n  } $,说明$o ( ba ) \leq m - n &lt; m $,不符题意.</p>
<h5><span id="example6">Example6</span></h5><p>证明:如果$H , K \leq G $,那么$HK \leq G \Leftrightarrow HK = KH $.</p>
<p>如果$HK = KH $,那么$HK \leq G \Leftrightarrow HK ( HK ) ^{ - 1  } = HK $.考虑:</p>
<script type="math/tex; mode=display">
HK ( HK ) ^{ - 1  } = HKK ^{ - 1  } H ^{ - 1  } = HKH ^{ - 1  } = KHH ^{ - 1  } = HK</script><p>如果$HK \leq G $,那么$HK = ( HK ) ^{ - 1  } = K ^{ - 1  } H ^{ - 1  } = KH $.</p>
<h5><span id="example7">Example7</span></h5><p>设$G $是交换群,证明$G $中的全体有限阶元素构成$G $的一个子群.</p>
<p>等价于证明如果$a , b $的阶有限,那么$ab ^{ - 1  } $的阶有限.这对交换群来说是显然的.</p>
<h5><span id="example8">Example8</span></h5><p>如果$G $只有有限多个子群,证明$G $是有限群.</p>
<p>考虑若其有无限阶元素$a $,则$\langle a \rangle $已经有无限个子群(取幂次为$k $的倍数).反之则每个元素都可以生成一个循环群,也有无限个子群.</p>
<h4><span id="同态和同构">同态和同构</span></h4><p>考虑在两个群$G $和$G _1 $之间构造映射$\varphi $,如果$\varphi $保持群运算,即对于所有的$a , b \in G $,都有$\varphi ( ab ) = \varphi ( a ) \varphi ( b ) $,则称其为由$G $到$G _1 $的一个<strong>群同态</strong>.如果同时$\varphi $又是单(满)射,则称其为<strong>单(满)同态</strong>,又单又满的同态称为<strong>同构</strong>.如果存在一个映射$\varphi $,使得$G , G _1 $同构,则称这两个群<strong>同构</strong>,记作$G \cong G _1 $.</p>
<p>容易见到,同构等价于两方都有$f : G \to G _1 $和$g : G _1 \to G $,并且二者的合成$fg = gf = \text { id  } $.而且同构的合成仍是同构.</p>
<p>我们以$End ( G ) $表示$G $的全体<strong>自同态</strong>组成的集合,$Aut ( G ) $表示全体<strong>自同构</strong>组成的集合.不难发现,$End ( G ) $组成一个幺半群,而$Aut ( G ) $组成一个群.</p>
<p>我们可以搞一个伴随映射:$G \to Aut ( G ) , g \mapsto Ad _g $,其中$Ad _g ( x ) = gxg ^{ - 1  } $.容易见到$Ad _g = id $的充要条件是$g \in Z ( G ) $也就是群的中心.</p>
<p>群同态$\varphi : G \rightarrow G _1 $把$G $的幺元映为$G _1 $的幺元.原因是:</p>
<script type="math/tex; mode=display">
\varphi ( e ) ^2 = \varphi ( e ^2 ) = \varphi ( e ) e _1</script><p>然而应当说明,这里保持单位元对幺半群未必成立,因此如果要将群同态的定义挪到幺半群上,需要额外添加$\varphi ( e ) = e _1 $的条件.</p>
<p>我们还有:</p>
<script type="math/tex; mode=display">
e _1 = \varphi ( e ) = \varphi ( aa ^{ - 1  } ) = \varphi ( a ) \varphi ( a ^{ - 1  } )</script><p>所以$\varphi ( a ^{ - 1  } ) = ( \varphi ( a ) ) ^{ - 1  } $.</p>
<p>我们将$\varphi ( G ) $称为$G $的<strong>像</strong>,记为$\text { im  }  \varphi $.又将$e _1 $的原像的集合称为$\varphi $的<strong>核</strong>,记为$\ker  \varphi $.</p>
<p>注意到$\varphi $不是单射等价于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Leftrightarrow \exists a , b \in G , a \ne b , \varphi ( a ) & = \varphi ( b ) \\
\Leftrightarrow \varphi ( ab ^{ - 1  } ) & = \varphi ( a ) \varphi ( b ) ^{ - 1  } & = e _1 \\
\Leftrightarrow \ker \ \varphi \ne \{ e \} 
\end{aligned}</script><h4><span id="群的实例">群的实例</span></h4><h5><span id="全变换群对称群与交错群">全变换群,对称群与交错群</span></h5><p>设$M $是一个非空集合,$M $到自身的双射的全体对于映射的复合构成一个群,称作$M $的<strong>全变换群</strong>,记作$S ( M ) $.</p>
<p>设$M $是含有$n $个元素的集合,$M $的全变换群$S ( M ) $称为<strong>n级对称群</strong>,记作$S _n $.不失一般性,我们可以设$M = \{ 1 , 2 , \cdots , n \} $,$S _n $的元素称为<strong>n元置换</strong>,任一置换可以用列表的方法表示,即如果$\sigma $是一个映射,我们将其写作:</p>
<script type="math/tex; mode=display">
\sigma = \left ( \begin{array}
{ c  } 1 & 2 & \cdots & n \\
\sigma _1 & \sigma _2 & \cdots & \sigma _n 
\end{array} \right )</script><p>显然$| S _n | = n ! $.</p>
<p>设$\sigma \in S _n $,$\{ i _1 , i _2 , \cdots , i _t \} \subseteq \{ 1 , 2 , \cdots , n \} $,有$\sigma ( i _t ) = i _1 , \forall 1 \leq k &lt; t , \sigma ( i _k ) = i _{ k + 1  } $,我们称这样的置换是对于$\{ i _1 , i _2 , \cdots , i _t \} $的<strong>轮换</strong>,记作$\left ( \begin{array}{ c  } i _1 &amp; i _2 &amp; \cdots &amp; i _t \end{array} \right ) $,$t $为轮换的<strong>长度</strong>,长度为$2 $的轮换称作<strong>对换</strong>.显然,一个置换可以被分解成若干两两无交轮换(注意到如果两个轮换无交,则它们可交换)的乘积.又显然,一个轮换可以被分解成若干对换的乘积,原因是总有:</p>
<script type="math/tex; mode=display">
( a _1 , \cdots , a _l ) = ( a _1 , a _l ) ( a _1 , \cdots , a _{ l - 1  } )</script><p>另外轮换的性质给出任何一个置换$\sigma $的$o ( \sigma ) $就是其拆出的所有轮换的$\text { lcm  } $.</p>
<p>根据逆序对相关,我们知道一个置换的逆序对数量的奇偶性等于其分解成的对换的数量.我们将逆序对数量是奇数的置换称为<strong>奇置换</strong>,是偶数的称之为<strong>偶置换</strong>,$S _n $中的所有偶置换也构成一个群,称之为<strong>n级交错群</strong>,记为$A _n $.$A _n $实际上是$S _n $的一个子群.</p>
<h5><span id="一般线性群">一般线性群</span></h5><p>对于定义在域$F $上的线性空间$V $,它上面的所有自同构构成一个<strong>一般线性群</strong>$GL ( V ) = \{ T \in \text { End  } ( V ) \mid \det T \ne 0 \} $.特别地,当$\dim V &lt; \infty $的时候,其有一个子群<strong>特殊线性群</strong>$SL ( V ) = \{ T \in \text { End  } ( V ) \mid \det T = 1 \} $.</p>
<p>在配套的内积空间上还可以把正交变换组成的群一块拿到,称为<strong>正交群</strong>或者<strong>酉群</strong>$O ( V ) $,还可以定义$SO ( V ) = O ( V ) \cap SL ( V ) $.</p>
<p>当然上面的版本都可以用矩阵来表示,这里略去不表.然而对于矩阵来代替上面的情形,我们疑似需要引入群同构的概念,这会在下面提出.</p>
<h5><span id="克莱因四元群">克莱因四元群</span></h5><p>取$V = \{ \text { id  } , \sigma , \tau , \sigma \tau \} $,其中:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sigma & = \left ( \begin{matrix}
1 & 2 & 3 & 4 \\
2 & 1 & 4 & 3 
\end{matrix} \right ) \\
\tau & = \left ( \begin{matrix}
1 & 2 & 3 & 4 \\
3 & 4 & 1 & 2 
\end{matrix} \right ) \\
\sigma \tau & = \tau \sigma & = \left ( \begin{matrix}
1 & 2 & 3 & 4 \\
4 & 3 & 2 & 1 
\end{matrix} \right ) \\

\end{aligned}</script><p>见到这确实是一个群,而且任何一个元素的逆元都是它本身,而且两个不同的非$1 $元的乘积会得到另一个非$1 $元.</p>
<p>克莱因群的实例非常多,例如$\{ 1 , 3 , 5 , 7 \} $在$\mod 8 $意义下对乘法构成克莱因群,$\{ 0 , 1 , 2 , 3 \} $对异或构成克莱因群.以及:</p>
<script type="math/tex; mode=display">
\left \{ \begin{bmatrix}
1 & 0 \\
0 & 1 
\end{bmatrix} , \begin{bmatrix}
1 & 0 \\
0 & - 1 
\end{bmatrix} , \begin{bmatrix}
- 1 & 0 \\
0 & 1 
\end{bmatrix} , \begin{bmatrix}
- 1 & 0 \\
0 & - 1 
\end{bmatrix} \right \}</script><p>对矩阵乘法也构成群.</p>
<h5><span id="循环群">循环群</span></h5><p>如果对于一个群$G $,它可以由其中的某个元素$\sigma $生成,记作$G = \langle \sigma \rangle $,当$\forall g \in G , \exists k \in \mathbb { Z  } , g = \sigma ^k $.</p>
<p>显然$\mathbb { Z  } / n \mathbb { Z  } $对加法就是一个循环群,其中$\sigma = 1 + n \mathbb { Z  } $.</p>
<p>特别地,容易见到对于任意循环群,如果$| G | = \infty $,则$G \cong \mathbb { Z  } $;反之则$G \cong \mathbb { Z  } / | G | \mathbb { Z  } $.</p>
<h4><span id="相反群">相反群</span></h4><p>群中的左右区别如此之大,是否说对于任何一个左的版本都存在一个与之对应的右的版本呢?</p>
<p>留神到我们其实可以定义<strong>相反群</strong>$G ^{ op  } = ( G , \odot ) $,其中的运算满足$g \odot g ‘ = g ‘ g $,也就是在$G $中使得乘法倒置.容易检验其保留了幺元和逆元等性质,而且$( G ^{ op  } ) ^{ op  } = G $.另外只需观察$G \to G ^{ op  } , g \mapsto g ^{ - 1  } $就可构造双射.有时干脆将相反群记作$G ^{ - 1  } $.</p>
<h6><span id="example1">Example1</span></h6><p>证明:群$G $是交换群当且仅当$x \mapsto x ^{ - 1  } $是群同构.</p>
<p>显然是单射且是双射,只需证明是群同态即可.此时就需要证明$y ^{ - 1  } x ^{ - 1  } = ( xy ) ^{ - 1  } = ( yx ) ^{ - 1  } $,那就搞定了.</p>
<h4><span id="陪集">陪集</span></h4><p>设$G $是一个群,$H \leq G $,定义等价关系$a \sim b \Leftrightarrow \exists h \in H , a = bh $,容易检查其满足等价类的三条性质.不难发现对于元素$a $,其所在的等价类就是$aH $.类似可以定义$Ha $.我们定义形如$aH $的子集为$H $的一个<strong>右陪集</strong>,形如$Ha $的称作<strong>左陪集</strong>.由于左陪集是一个等价类,因此会将原集合划分为若干个等价类.这种划分用商集刻画,记作$G / H $.需要强调的是这个符号需要区分左右,有的人会盗用反斜杠来表述此关系,但这种符号容易与差集相混淆.因此,我们在下面会直接不加区分(或者说根据上下文判断)来一律统一使用$G / H $.如若的确需要区分,则采用$( G / H ) _L , ( G / H ) _R $的写法.</p>
<p>一个自然的想法是$G / H $是否构成一个群.先看取逆,容易发现$( aH ) ^{ - 1  } = Ha ^{ - 1  } $,这给出左陪集和右陪集之间一个自然的同构:</p>
<script type="math/tex; mode=display">
Hg \mapsto g ^{ - 1  } H = ( Hg ) ^{ - 1  }</script><p>所以不同的左右陪集个数相等.</p>
<p>我们将$H $的不同左陪集的个数(不一定有限)称为$H $在$G $中的<strong>指数</strong>,记为$| G : H | $,用消去律注意到$| H | = | aH | = | Ha | $,因此其实右陪集个数也是这个指数.既然是等价类,就完成了对原群的一个划分,而且容易见到每个划出的等价类大小都是$| H | $.</p>
<p>对于有限群,这引出重要的<strong>拉格朗日定理</strong>:</p>
<script type="math/tex; mode=display">
| G | = | G : H | \times | H |</script><p>对于每一个陪集$C \in G / H $,我们可以选定其一个代表元$x _c $使得$x _C H = C $.考虑映射$H \times ( G / H ) \to G , ( h , C ) \mapsto x _C h $.下面证明这的确是个同构.</p>
<p>由于这里在映射前就钦定了代表元(需要使用选择公理),所以无需验证良定性.</p>
<p>接下来检查其单射,由于$x _C h \in C $,所以如果$x _{ C ‘  } h ‘ = x _C h $,意味着$C ‘ \cap C \ne \emptyset $,这是不符合的,因为陪集肯定两两不交.</p>
<p>而满射性只需要找到自己所在的那个等价类即可.</p>
<p>该定理有以下推论(以下默认有限群):</p>
<ol>
<li><p>任何一个子群的大小都一定整除原群大小.</p>
</li>
<li><p>若$H , K \subseteq G $,如果$| H | , | K | $的大小互素,则$H \cap K = \{ 1 \} $</p>
</li>
<li><p>$\forall \sigma \in G , o ( \sigma ) \mid ( | G | ) $.</p>
</li>
<li><p>$\forall \sigma \in G , \sigma ^{ | G |  } = e $.</p>
</li>
<li><p>如果$p = | G | \in prime $,则$G $是一个循环群.</p>
</li>
<li><p>$K \leq H \leq G $,则$[ G : K ] = [ G : H ] \times [ H : K ] $.</p>
</li>
</ol>
<p>(1)显然.</p>
<p>(2)的原因是$H \cap K $一定是一个子群,则它的大小要整除$\gcd ( | H | , | K | ) = 1 $.</p>
<p>(3)是因为$\langle \sigma \rangle \leq G $,而$o ( \sigma ) = | \langle \sigma \rangle | $.</p>
<p>(4)根据(3)显然.这其实就是费马小定理和欧拉定理在群上的体现.</p>
<p>(5)是因为任取一个$\sigma \ne 1 $,则$1 \ne o ( \sigma ) | p $,所以$o ( \sigma ) = p $,这是循环群.</p>
<p>(6)的话仍是取代表元,不妨设$C \in G / H $的代表元是$x _C $,$D \in H / K $的代表元是$y _D $.则$G = \bigsqcup x _C H = \bigsqcup x _C y _D K $,容易检验两边是一一对应的.它的另一个证明策略是取道第一同构定理.</p>
<h4><span id="群作用">群作用</span></h4><p>我们早应看出群往往是由一类双射组成的集合,而并非应该将其看作单一运算的环.因此,考虑群在一个集合上的作用是很有意义的.</p>
<p>我们称群$G $的一个<strong>左作用</strong>是$\varphi : G \times X \to X $,使得:</p>
<ol>
<li><p>$\varphi ( 1 _G , x ) = x $.</p>
</li>
<li><p>$\varphi ( g , \varphi ( h , x ) ) = \varphi ( gh , x ) $.</p>
</li>
</ol>
<p>这种作用看似隔了一层,只是多引入了符号,而并非将$G $与$X $直接联系起来.然而回忆到柯里化过程,上述作用也等价于$G \to ( X \to X ) $,设这个映射是$\Phi : G \to \mathrm { End  } ( X ) $,容易见到上面两条性质等价于:</p>
<ol>
<li><p>$\Phi ( 1 _G ) = \text { id  } _X $.</p>
</li>
<li><p>$\Phi ( g _1 g _2 ) = \Phi ( g _1 ) \Phi ( g _2 ) $.</p>
</li>
</ol>
<p>容易见到$\Phi $是群同态.</p>
<p>当然同理可以定义<strong>右作用</strong>.</p>
<p>对于左作用,我们定义$x $的$G $<strong>轨道</strong>是$Gx = \{ gx | g \in G \} \subseteq X $.我们还可以定义其<strong>稳定化子群</strong>是$\mathrm { Stab  } _G ( x ) = \{ g \in G | gx = x \} $,容易检验这的确是一个子群,原因是封闭性和逆存在都满足,而且还满足$\mathrm { Stab  } _G ( gx ) = g \mathrm { Stab  } _G ( x ) g ^{ - 1  } $.因此一个轨道中的点的稳定化子群大小相等.</p>
<p>定义$X $的$G $<strong>不动点</strong>是$X ^G = \{ x \in X | \forall g \in G , gx = x \} $,容易见到$X ^G $中的每一个点都自己构成一个轨道,还可以对单个$g $定义不动点集合$X ^g = \{ x \in X | gx = x \} $.对于$\forall g \in G $.还可以引入以下定义:</p>
<ol>
<li><p>如果$\forall x \in X , gx = x $当且仅当$g = 1 _G $,或说$\bigcap _{ x \in X  } \mathrm { Stab  } _{ G  } ( x ) = \{ 1 _G \} $,则称这个作用是<strong>忠实的</strong>.此时还会满足$\Phi ( g ) = id _X \Leftrightarrow g = 1 _G $,也就是上述柯里化是单射.</p>
</li>
<li><p>若$X $只有一个轨道,换言之$\forall x , y \in X , \exists g \in G , y = gx $.则称此群作用<strong>传递</strong>.</p>
</li>
<li><p>若$\forall x \in X $,$\mathrm { Stab  } _G ( x ) = { 1 _G  } $,则称此群作用<strong>自由</strong>.自由性严格强于忠实性.</p>
</li>
</ol>
<p>对于$x , y \in X $,我们定义等价关系$x \sim y $当且仅当$y \in Gx $.容易见到其满足传递性,自反性,对称性.在此等价关系下的商集也就是分解出的所有轨道,称此为轨道分解,或者盗用陪集符号写作$X / G $.</p>
<h5><span id="cayley定理">Cayley定理</span></h5><p>由上面可以见到,任何一个$G $都可以用柯里化表为一个集合上的变换.并且如果群作用是忠实的,那么这种表示事实上总是单射.然而$G $作用于自己本身的时候因为消去律一定能导出自由性.这自然是一个置换.</p>
<p>Cayley定理的一个很重要的作用是理解轨道分解.我们早就用图论手段理解过置换可以拆解成轮换的性质.如今我们可以用群论的手段去理解.对于任何一个置换$\sigma $,考虑其作用在$X = \{ 1 , \cdots , n \} $上.考虑取一个循环群$G = \langle \sigma \rangle $,$G $作用在$X $上给出了$X $的一个轨道分解.容易见到这里的轨道分解就是给出了若干个轮换.由轨道分解的唯一性,立刻见到轮换分解的唯一性.</p>
<h5><span id="burnside引理">Burnside引理</span></h5><p>下面选定$x \in X $考虑映射$G \to Gx , g \mapsto gx $.考虑取$H = \text { Stab  } _G ( x ) $,现在考虑有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
gx & = g ' x \\
\Leftrightarrow g ^{ - 1  } g ' x & = x \\
\Leftrightarrow g ^{ - 1  } g ' \in H \\
\Leftrightarrow g ' \in gH \\
\Leftrightarrow g ' H & = gH \\

\end{aligned}</script><p>所以我们可以搞一个同构映射$G / H \to Gx $.注意这里未必是群同构,原因是$H $未必是正规子群,但$G / H $这个右陪集总可以定义.对于有限集合的情况,回忆到$X $可以进行轨道分解,设其不同的轨道分别是$Gx _1 , \cdots , Gx _m $(回忆到$m = | X / G | $),并且对应的稳定化子群分别是$H _1 , \cdots , H _m $,上述命题给出:</p>
<script type="math/tex; mode=display">
| X | = \sum | Gx _k | = \sum [ G : H _k ]</script><p>另一个结论是$| X / G | \cdot | G | = \sum _{ g \in G  } | X ^g | $,这个结论是染色计数的基础.</p>
<p>为了证明上面这个结论,我们下面证明把$X $分解为若干轨道后,对于每个轨道$X _i $都有$\sum _{ g \in G  } | X _i ^g | = | G | $,由于轨道之间互不干扰,下面只需证明$X $是传递性的单个轨道的情况即可,回忆到单个轨道上的稳定化子群大小均相等,任取$x _0 \in X $,由于此时只着眼于单个轨道,因此根据上述结论$| X | = [ G : \mathrm { Stab  } _G ( x _0 ) ] $.此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ g \in G  } | X ^g | & = \sum _{ x \in X  } | \mathrm { Stab  } _G ( x ) | \\
& = | X | \cdot | \mathrm { Stab  } _G ( x _0 ) | \\
& = [ G : \mathrm { Stab  } _G ( x _0 ) ] \cdot | \mathrm { Stab  } _G ( x _0 ) | \\
& = | G | 
\end{aligned}</script><p>这就搞定.</p>
<h5><span id="p-群">$p$-群</span></h5><p>设$p \in prime $,如果$| G | = p ^m $(当$m = 0 $的时候称其平凡),则称$G $为$p $-<strong>群</strong>.对此我们有以下结论:</p>
<ol>
<li><p>$| X | \equiv | X ^G | \pmod { p  } $.</p>
</li>
<li><p>如果$| G | $非平凡,则$Z _G \ne \{ 1 \} $.进一步地,$p \mid ( | Z _G | ) $.</p>
</li>
</ol>
<p>(1)的原因是轨道分解给出:</p>
<script type="math/tex; mode=display">
| X | = | X ^G | + \sum _{ H _i \ne G  } [ G : H _i ]</script><p>然而拉格朗日定理给出$| H _i | $总是$| G | $的因子,也就是说$\frac { | G |  } { | H _i |  } = p ^k $,于是证毕.</p>
<p>(2)的证明,考虑映射$a : G \times G \to G : a ( g , x ) = Ad _g ( x ) = gxg ^{ - 1  } $,这本身是$G $对自身的一个左作用.而容易见到此作用下的不动点集就是$Z _G $.而$| Z _G | \equiv | G | \equiv 0 \pmod { p  } $,于是证毕.</p>
<p>我们知道轨道分解事实上给出了一种划分集合的策略,而这里的映射其实也给出了一种划分集合的策略:按<strong>共轭类</strong>划分.换言之,我们设$a \sim b $当且仅当$\exists g \in G , a = gbg ^{ - 1  } $,容易见到其满足等价关系的三条性质.因此我们得到一个共轭类的大小总是整除群的大小,以及:</p>
<script type="math/tex; mode=display">
| G | = | Z _G | + \sum _{ H _i \ne G  } [ G : H _i ]</script><p>这个被称为<strong>类方程</strong>.</p>
<h6><span id="example1">Example1</span></h6><p>求证:阶为$p ^2 $的有限群都是交换的.</p>
<p>考虑其中心$Z _G $,由于该群非平凡,所以$| Z _G | &gt; 1 $,所以$| Z _G | = p $或$| Z _G | = p ^2 $,后者显然已经证毕.</p>
<p>如果能取出一个元素$c $使得$\langle c \rangle = G $则显然证毕,下面假设所有的非平凡循环子群的阶都是$p $.</p>
<p>取$a \in Z _G , a \ne 1 $,则$Z _G = \langle a \rangle $.任取$b \in G \setminus Z _G $,考虑$\langle b \rangle \cap Z _G = \{ 1 \} $,原因是如果$\exists i , j , a ^i = b ^j $,则取$j $在$\bmod p $下的逆元$k $,有$a ^{ ik  } = b $,这就不符.</p>
<p>于是有$G / Z _G \cong \langle b \rangle $,立刻证毕.</p>
<h4><span id="正规子群">正规子群</span></h4><p>设$G $是一个群,$H \leq G $,如果$\forall a \in G , aH = Ha $或回忆到商群的概念只需检验$a ^{ - 1  } Ha \subseteq H $,我们称$H $是$G $的<strong>正规子群</strong>,记作$H \trianglelefteq G $.当一个子群是正规的时候,它的左右陪集不必区分.</p>
<p>显然,$G $和$\{ e \} $都是$G $的正规子群,如果$G $除此之外没有别的正规子群,称其为<strong>单群</strong>.</p>
<p>容易发现$Z _G \trianglelefteq G $.此外,如果$N \trianglelefteq G $,而且$H \leq G $,则$N \cap H \trianglelefteq H $,只需套用定义即可发现.</p>
<p>于此还可以引入两个定义,假设$K \leq G $:</p>
<ol>
<li><p>定义$K $的<strong>中心化子</strong>:$Z _G ( K ) = \{ g \in G | \forall k \in K , gkg ^{ - 1  } = k \} $.</p>
</li>
<li><p>定义$K $的<strong>正规化子</strong>:$N _G ( K ) = \{ g \in G | gKg ^{ - 1  } = K \} $.</p>
</li>
</ol>
<p>显然$K \trianglelefteq N _G ( K ) \geq Z _G ( K ) $.</p>
<h5><span id="正规子群的判定定理">正规子群的判定定理</span></h5><p>当$H \leq G $时,下列命题等价:</p>
<ol>
<li><p>$H \trianglelefteq G $.</p>
</li>
<li><p>$\forall a , b \in G , \exists c \in G , ( aH ) ( bH ) = cH $.</p>
</li>
<li><p>$\forall a \in G , a ^{ - 1  } Ha = H $.</p>
</li>
<li><p>$\forall a \in G , h \in H , a ^{ - 1  } ha \in H $.</p>
</li>
</ol>
<p>先证明(2)$\Rightarrow $(1):</p>
<p>由于$a ^2 H \subseteq ( aH ) ^2 $,$a ^2 \subseteq ( aH ) ^2 $并且$( aH ) ^2 = cH $是左陪集,那么由于左陪集是等价类,所以$a ^2 H = ( aH ) ^2 $.两边同时乘以$a ^{ - 1  } $,有$Ha \subseteq HaH = aH $.再次两边左右乘以$a ^{ - 1  } $,得到$a ^{ - 1  } H \subseteq Ha ^{ - 1  } , \forall a \in G $,也就证毕.</p>
<p>再证明(1)$\Rightarrow $(2):</p>
<script type="math/tex; mode=display">
( aH ) ( bH ) = aHbH = a ( bH ) H = abH</script><p>这里还可以进一步说明如果这里干脆在正规子群的陪集上定义二元运算$( aH , bH ) \to abH $后其陪集构成群.首先我们要检验良定性质.注意到如果$a ‘ = au , b ‘ = bv $,其中$u , v \in H $,则:</p>
<script type="math/tex; mode=display">
a ' b ' H = aubvH = abb ^{ - 1  } ubvH = abH</script><p>原因是$b ^{ - 1  } ub \in H , v \in H $.</p>
<p>逆元只需要对$( aH ) ^{ - 1  } = a ^{ - 1  } H $即可.至于结合律也可以用上述性质转化,这样就搞定了.</p>
<p>剩下的部分,(1)$\Leftrightarrow $(3),(3)$\Rightarrow $(4)都显然,考虑证明(4)$\Rightarrow $(3).</p>
<p>(4)显然等价于$ha \in aH $,于是有$Ha \subseteq aH $.而又等价于$a ^{ - 1  } h \in Ha ^{ - 1  } $,于是类似证毕.</p>
<p>设$G $是群,$H \trianglelefteq G $,则$H $的陪集在乘法下构成群,这个群称为$G $关于$H $的<strong>商群</strong>,记作$G / H $.</p>
<p>考虑封闭律:$( aH ) ( bH ) = a ( bH ) H = abH $,又显然满足结合律.又有$\forall aH \in G / H , eH ( aH ) = ( aH ) H = aH $,于是$H $是幺元.同样知道$a ^{ - 1  } H = ( aH ) ^{ - 1  } $,于是存在逆元.</p>
<h6><span id="example1">Example1</span></h6><p>证明:如果$[ G : H ] = 2 $的话则一定有$H \trianglelefteq G $.</p>
<p>原因是其可以分解成两个陪集,而其中一个陪集自动是$H $本身,所以另一个陪集也同样不分左右.</p>
<h6><span id="example2">Example2</span></h6><p>求证:如果$G / Z _G $是循环群,则$G $交换.</p>
<p>不妨假设$G / Z _G = \{ Z _G , aZ _G , a ^2 Z _G , \cdots \} $.</p>
<p>对于任意$b , c \in G $,都存在一组$i , j , g _1 , g _2 $满足$i , j \in \mathbb { Z  } $,$g _1 , g _2 \in Z _G $有$b = a ^i g _1 , c = a ^j g _2 $,显然$bc = cb $.</p>
<h5><span id="正规子群与同态">正规子群与同态</span></h5><p>事实上有以下命题:</p>
<ol>
<li><p>$\text { im  }  \varphi \leq G _1 $.</p>
</li>
<li><p>$\text { ker  }  \varphi \trianglelefteq G $.</p>
</li>
</ol>
<p>先看(1),考虑首先$e _1 \in \text { im  }  \varphi $,所以其不为空.其次对于任意$a _1 , b _1 \in \text { im  }  \varphi $,$\exists a , b \in G $,使得$\varphi ( a ) = a _1 , \varphi ( b ) = b _1 $.于是:</p>
<script type="math/tex; mode=display">
a _1 b _1 ^{ - 1  } = \varphi ( a ) \varphi ( b ^{ - 1  } ) = \varphi ( ab ^{ - 1  } ) \in \text { im  } \ \varphi</script><p>再看(2),同上可知$\text { ker  }  \varphi \ne \emptyset $,对于任意的$a , b \in \text { ker  }  \varphi $,$\varphi ( ab ^{ - 1  } ) = \varphi ( a ) \varphi ( b ) ^{ - 1  } = e _1 $,所以$ab ^{ - 1  } \in \text { ker  }  \varphi $,说明$\text { ker  }  \varphi \leq G $.而$\forall g \in G $,$\varphi ( gag ^{ - 1  } ) = \varphi ( g ) e _1 \varphi ( g ) ^{ - 1  } = e _1 $,所以$gag ^{ - 1  } \in \text { ker  }  \varphi $.</p>
<p>我们也可以说正规子群均可以成为某个映射的$\ker $,方法是构造映射$\pi : G \to G / N , g \mapsto gN $.容易检验这的确是一个群同态.</p>
<p>另外如果$f $是同构,那么$f ^{ - 1  } $也是同态,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ( f ^{ - 1  } ( x ) f ^{ - 1  } ( y ) ) & = f ( f ^{ - 1  } ( x ) ) f ( f ^{ - 1  } ( y ) ) & = xy & = f ( f ^{ - 1  } ( xy ) ) \\
f ^{ - 1  } ( x ) f ^{ - 1  } ( y ) & = f ^{ - 1  } ( xy ) 
\end{aligned}</script><p>以及如果$f , g $都是同态,那么$f \circ g $也是同态.</p>
<p>更进一步地,我们实际上可以在这里画交换图表,对于任何一个群同态$f : G \to G ‘ $,取$\pi : G \to G / \ker f $,我们存在唯一的$\bar { f  } $使得$f = \bar { f  } \circ \pi $,或言使得下述交换图表成立:</p>
<script type="math/tex; mode=display">
\xymatrix { G \ar [r ] ^f \ar [d ] _\pi & G ' \\
G / \ker f \ar [ru ] _{ \bar { f  }  } & \\
 }</script><p>这被称为商群的泛性质.事实上这也很一眼,原因是要满足$\forall x \in G , \bar { f  } ( xN ) = f ( x ) $,这其实也就定义了$\bar { f  } $,而存在性只需要堆堆语言就行.</p>
<p>进一步地,如果$f : G \to G ‘ $,而$N \trianglelefteq G , N ‘ \trianglelefteq G ‘ $,并且$f ( N ) \subseteq N ‘ $,则存在唯一的映射$\bar { f  } : G / N \to G ‘ / N ‘ $使得我们可以搞定下面这个图表的交换性:</p>
<script type="math/tex; mode=display">
\xymatrix { G \ar [r ] ^f \ar [d ] & G ' \ar [d ] \\
G / N \ar [r ] _{ \bar { f  }  } & G ' / N '  }</script><h5><span id="同态基本定理">同态基本定理</span></h5><p>设$\varphi : G \rightarrow G _1 $是群同态,则$G / \text { ker  }  \varphi \cong \text { im  }  \varphi $.</p>
<p>不妨先设$H = \text { ker  }  \varphi $.我们定义映射$\psi : G / H \rightarrow \text { im  }  \varphi $,满足$\psi ( aH ) = \varphi ( a ) $.</p>
<p>不过首先要判断$\psi $是不是良定义,也就是当$aH = bH $的时候,我们要判断$\varphi ( a ) $是否等于$\varphi ( b ) $.若$aH = bH $,说明$\exists h \in H , a = bh $,那么$\psi ( aH ) = \varphi ( a ) = \varphi ( bh ) = \varphi ( b ) \varphi ( h ) = \varphi ( b ) $.</p>
<p>然后还要证明其是群同态,注意到$\psi ( ( aH ) ( bH ) ) = \psi ( abH ) = \varphi ( ab ) = \varphi ( a ) \varphi ( b ) = \psi ( aH ) \psi ( bH ) $.</p>
<p>接下来要证明它是单射,显然只有$\psi ( H ) = e _1 $,$\text { ker  }  \psi = \{ H \} $.</p>
<p>接下来要证明它是满射,$\forall g \in \text { im  }  \varphi $,$\exists a , \varphi ( a ) = g $,则$\psi ( aH ) = g $.</p>
<p>这样就证明了同态基本定理.</p>
<p>当$\varphi $是满射的时候$G _1 = \text { im  }  \varphi $,所以此时有$G / \text { ker  }  \varphi \cong G _1 $.</p>
<h5><span id="第一同构定理">第一同构定理</span></h5><p>我们定义$H \trianglelefteq G $时,定义$\pi : G \rightarrow G / H , a \mapsto aH $.显然其是群同态,定义其为由$G $到$G / H $的<strong>典范同态</strong>.</p>
<p>那么我们有第一同构定理,即对于一个$G $的一个正规子群$H $,在典范同态$\pi : G \rightarrow G / H $下,我们有:</p>
<ol>
<li><p>$G $的包含$H $的子群和$G / H $的子群在$\pi $下是群同构.</p>
</li>
<li><p>在此对应下,正规子群对应于正规子群.</p>
</li>
<li><p>若有$H \trianglelefteq K \trianglelefteq G $,则$G / K \cong ( G / H ) / ( K / H ) $.</p>
</li>
</ol>
<p>如若考虑满同态的情况,我们有另一种形式的表达.设$f : G \rightarrow G ‘ $是群的满同态,根据同态基本定理有$G / \ker f \cong G ‘ $,立刻有:</p>
<ol>
<li><p>$G $的包含$\ker f $的子群和$G ‘ $的子群在$f $下一一对应.</p>
</li>
<li><p>在此对应下,正规子群对应正规子群.</p>
</li>
<li><p>若有$\ker f \leq H \trianglelefteq G $,则$G / H \cong ( G / \ker f ) / ( H / \ker f ) \cong G ‘ / H ‘ $.</p>
</li>
</ol>
<p>此形式与一开始的形式无太大差别,因为任何一个正规子群总对应某个映射的$\ker $.</p>
<p>然而这个证明要比原本的大量堆砌要更为漂亮.我们断言这种一一对应恰好由$f $给出.更进一步地,对于$\ker f \leq H \leq G $,其对应了一个$H ‘ \leq G ‘ $,满足:$f ( H ) = H ‘ $,而且$f ^{ - 1  } ( H ‘ ) = H $.</p>
<p>先来证明我们找到是一个双射,那就需要对每个$H $证明其对应的那个$H ‘ $确实是对应自己的,反之亦然:</p>
<p>首先我们要证明$H = f ^{ - 1  } ( f ( H ) ) $.显然有$H \subseteq f ^{ - 1  } ( f ( H ) ) $,下面证明$f ^{ - 1  } ( f ( H ) ) \subseteq H $.也就是要证明$\forall f ( x ) \in f ( H ) $,也就是$f ( x ) = f ( h ) , x \in G , h \in H $,都一定有$x \in H $.</p>
<p>可如若$f ( x ) = f ( h ) $就一定有$xh ^{ - 1  } \in \ker f \subseteq H $,这就搞定了$x \in H $.</p>
<p>反过来的$H ‘ = f ( f ^{ - 1  } ( H ‘ ) ) $,回忆到$f $是满射,其总有右逆,因此这是显然成立的.这就搞定了一一对应的关系,而且顺便还给出如果$H _1 \subseteq H _2 $,则$H _1 ‘ = f ( H _1 ) \subseteq H _2 ‘ = f ( H _2 ) $.至于$H ‘ $的正规性,只需要回忆到$\forall \bar { x  } \in G ‘ $,$\exists x \in G , \bar { x  } = f ( x ) $.这就给出$\bar { x  } f ( H ) ( \bar { x  } ) ^{ - 1  } = f ( xHx ^{ - 1  } ) = f ( H ) $.</p>
<p>最后考虑映射$G \to G ‘ / H ‘ , g \mapsto f ( g ) H ‘ $,它的$\ker = f ^{ - 1  } ( H ‘ ) = H $,所以同态基本定理给出$G / H \cong G ‘ / H ‘ $,这就搞定.</p>
<p>总之,第一同构定理给出的是”商”这个操作究竟对一个群有了怎样的影响,其实就是切片了对吧,然后把每一片缩起来.有下述交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { G \ar [r ] ^f \ar [d ] & G ' \ar [d ] \\
G / H \ar [r ] & G ' / H '  }</script><h5><span id="第二同构定理">第二同构定理</span></h5><p>设$G $是群,$H \trianglelefteq G , K \leq G $,则:</p>
<ol>
<li><p>$H \cap K \trianglelefteq K $.$HK = KH \leq G $.</p>
</li>
<li><p>$( HK ) / H \cong K / ( H \cap K ) $.</p>
</li>
</ol>
<p>考虑(1)的证明:</p>
<p>先看前半部分,只需证明$\forall k \in K , w \in H \cap K $,$kwk ^{ - 1  } \in H \cap K $.</p>
<p>注意到$k , w \in K $,所以$kwk ^{ - 1  } \in K $;又注意到$H \trianglelefteq G $,所以$kwk ^{ - 1  } \in H $,这就证明了该结论.</p>
<p>对于后半部分先证明$HK = KH $,考虑$hk \in Hk = kH \subseteq KH $.</p>
<p>再证$HK $的确是一个子群,我们早在子群判定引理处就证明了此结论.</p>
<p>再看(2)的证明:</p>
<p>考虑构造$\varphi : K \to ( HK ) / H , k \mapsto kH $.这显然是良定义的群同态.</p>
<p>考虑$\varphi ( k ) = H \Leftrightarrow k \in H \Leftrightarrow k \in K \cap H $,于是$\ker \varphi = K \cap H $.</p>
<p>接下来还需要解释其满性,考虑$\forall hkH = H ( hk ) = Hk = kH $,这就证明了其满性,于是上述命题自然成立.</p>
<p>根据第二同构定理还可以立刻得到:$H , K \leq G $,$G $是有限群,$| HK | = \frac { | H | | K |  } { | H \cap K |  } $.</p>
<p>另外容易见到,其实只要$H \leq N _G ( K ) $,上述结论依然过得去,因为只需要把群限制在$N _G ( K ) $上即可.</p>
<h5><span id="交换化">交换化</span></h5><p>如果群$G $的子群$H $对于所有自同构$\varphi : G \cong G $都满足$\varphi ( H ) = H $,则称$H $是一个<strong>特征子群</strong>.取$\varphi = \mathrm { Ad  } $可以见到特征子群总是正规子群.</p>
<p>还可以见到群的中心总是特征子群,原因是任取$z \in Z _G , \forall g \in G $,都满足:</p>
<script type="math/tex; mode=display">
\begin{aligned}
zg & = gz \\
\varphi ( z ) \varphi ( g ) & = \varphi ( g ) \varphi ( z ) 
\end{aligned}</script><p>由于$g $可以取遍$G $,所以$\varphi ( g ) $可以取遍$G $,所以$\varphi ( z ) \in Z _G $.</p>
<p>我们还可以定义群的<strong>导出子群</strong>$G _{ der  } = \langle aba ^{ - 1  } b ^{ - 1  } | a , b \in G \rangle $也是特征子群.原因是$\varphi ( aba ^{ - 1  } b ^{ - 1  } ) = \varphi ( a ) \varphi ( b ) \varphi ( a ) ^{ - 1  } \varphi ( b ) ^{ - 1  } $.</p>
<p>既如此,考虑商群$G _{ ab  } = G / G _{ der  } $.留意到$\forall g _1 , g _2 \in G _{ ab  } $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
g _1 g _2 G _{ der  } & = g _2 g _1 G _{ der  } \\
\Leftrightarrow g _1 ^{ - 1  } g _2 ^{ - 1  } g _1 g _2 G _{ der  } & = G _{ der  } \\
\Leftrightarrow g _1 ^{ - 1  } g _2 ^{ - 1  } g _1 g _2 \in G _{ der  } \\

\end{aligned}</script><p>所以见到此商群交换,我们将此操作称为<strong>群的交换化</strong>.</p>
<p>我们可能还想说明这样的交换化是最为合理的,我们可以证明如果存在一个同态$f : G \to A $,其中$A $是一个交换群.则存在唯一的$\bar { f  } : G _{ ab  } \to A $,使下列图表交换:</p>
<script type="math/tex; mode=display">
\xymatrix { G \ar [d ] \ar [r ] ^f & A \\
G _{ ab  } \ar [ru ] _{ \bar { f  }  } &  }</script><p>首先注意到必须满足$\bar { f  } ( gG _{ der  } ) = f ( g ) $,这就给出唯一性,其次要给出存在性,就要证明如果$g _1 G _{ der  } = g _2 G _{ der  } $则$f ( g _1 ) = f ( g _2 ) $.只需检验$G _{ der  } \subseteq \ker f $就行,然而由于$f ( aba ^{ - 1  } b ^{ - 1  } ) = e _A $,原因是$A $的交换性,因此这就给定了.</p>
<h6><span id="example1">Example1</span></h6><p>证明$GL ( n , F ) _{ der  } = SL ( n , F ) $,其中$F $是含有至少三个元素的域.</p>
<p>显然$GL ( n , F ) _{ der  } \subseteq SL ( n , F ) $,只需要证明上述导出子群的确生成了$SL ( n , F ) $即可.</p>
<p>考虑所有的矩阵都可以通过若干次初等行列变换变到对角线全$1 $的矩阵,只需要把这些初等行列变换全都拿到即可,略去不谈.</p>
<p>此时也可以见到$GL ( n , F ) / SL ( n , F ) = F $,其实也就是行列式.</p>
<h6><span id="example2岩泽健吉iwasawa判准">Example2(岩泽健吉(Iwasawa)判准)</span></h6><p>设群$G $作用在集合$X $上,$| X | \geq 2 $,若$\forall ( x , y ) , ( x ‘ , y ‘ ) \in X ^2 $,其中$x \ne y , x ‘ \ne y ‘ $,都存在$g \in G $使得$gx = x ‘ , gy = y ‘ $,则称该作用是<strong>双传递的</strong>.下面我们设$G $双传递于$X $,并且记$H _x = \mathrm { Stab  } _G ( x ) $.</p>
<p>先证明一个引理:$\forall H _x $都是$G $的极大真子群.</p>
<p>为证明此,只需要证明任意往里面多添一个$g \in G \setminus H _x $,都会使得这个群扩充到$G $本身.一个想法是证明$G = H _x \cup H _x g H _x $.</p>
<p>既然如此,考虑只要证$\forall g _1 \in G \setminus H _x , \exists h _1 , h _2 \in H _x $使得$g _1 = h _1 gh _2 $即可,也就是$\exists h _1 $使得$g _1 ^{ - 1  } h _1 g \in H _x \Leftrightarrow g _1 ^{ - 1  } h _1 g ( x ) = x \Leftrightarrow g ( x ) = h _1 ^{ - 1  } g _1 ( x ) $.</p>
<p>考虑到$g ( x ) \ne x , g _1 ( x ) \ne x $.由双传递性一定存在一个$h _1 ^{ - 1  } $把$( x , g _1 ( x ) ) \to ( x , g ( x ) ) $,这就搞定了.</p>
<p>接下来再证明一个引理:任何正规子群$N \trianglelefteq G $在$X $上的作用要么是平凡的,要么是传递的.</p>
<p>若$N $的作用不是平凡的,也就是存在$x , n $使得$nx \ne x $,那我们下面证明对于任意$y \ne y ‘ $,都可以找到一个元素$m \in N $使得$my = y ‘ $.原因是可以取$g : ( x , nx ) \mapsto ( y , y ‘ ) $,于是$gx = y , gnx = y ‘ , gng ^{ - 1  } y = y ‘ $,由于$N $正规知道$gng ^{ - 1  } \in N $,这就搞定了.</p>
<p>接下来证明岩泽判准,假设$G $作用忠实,$G = G _{ der  } $,而且存在$x $使得$H _x $有正规交换子群$U $,而$U $在$G $中的所有共轭生成$G $.我们下面证明$G $是单群.</p>
<p>取定$N \trianglelefteq G $和$x \in X $,由于$H _x $是极大真子群,所以要么$NH _x = H _x $,要么$NH _x = G $.</p>
<p>当$NH _x = H _x , N \subseteq H _x $的时候,此时$N $作用并非传递,所以$N $作用平凡.由于作用是忠实的,作用平凡的元素也就只有$\{ id \} $.</p>
<p>当$NH _x = G $的时候,我们先证明$NU \trianglelefteq NH _x = G $.首先第二同构定理的部分已经给出了$NU \leq NH _x $,现在考虑$\forall nu \in NU , n _1 h _1 \in NH _x $,下面证明$n _1 h _1 nuh _1 ^{ - 1  } n _1 ^{ - 1  } \in NU $.</p>
<p>而考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
n _1 h _1 nuh _1 ^{ - 1  } n _1 ^{ - 1  } \\
= n _1 ( h _1 nh _1 ^{ - 1  } ) ( h _1 uh _1 ^{ - 1  } ) n _1 ^{ - 1  } \\
\in NUN = NU 
\end{aligned}</script><p>此时由于$U \leq NU $,而后者正规,前者的所有共轭生成$G $,这必然意味着$NU = G $,第二同态定理给出$G / N \cong U / ( N \cap U ) $而后者交换,这给出了一种$G $向交换群的同态,我们知道此时必然有$G _{ ab  } $上也有一个向交换群的同态,然而$G _{ ab  } $是平凡群,因此$G / N $必然也是平凡群,意味着$N = G $.</p>
<h6><span id="example3">Example3</span></h6><p>设$F $为域且$| F | \geq 4 $,记$Z $是$SL ( n , F ) $的中心,下面我们证明当$n \geq 2 $的时候,$PSL ( 2 , F ) = SL ( 2 , F ) / Z $是单群.</p>
<p>我们想要用岩泽健吉判准,首先要检验$SL ( n , F ) = SL ( n , F ) _{ der  } $,这个与之前的做法几乎类似,只需要简单说明.</p>
<p>接下来设$\mathbb { P  } ^{ n - 1  } ( F ) $为$F ^n $的$1 $维子空间,让$PSL ( n , F ) $作用在上面,留意到中心的作用也的确是平凡的.</p>
<p>当$n = 2 $的时候,记录$( x , y ) \in F ^2 \setminus \{ 0 \} $生成的空间为$( x : y ) $,我们来证明它是双传递的,事实上这较为显然.</p>
<p>接下来我们来看$( 1 : 0 ) $上的稳定化子群$H $,其实也就是所有的上三角矩阵,然后还要验证作用是忠实的,总之请检验以上事实.然后取$U = \{ \begin{bmatrix}1 &amp; _ \ 0 &amp; 1 \end{bmatrix} Z \} $.</p>
<p>当$n \geq 3 $和上面是同理的,对于$( 1 : 0 \cdots : 0 ) $的稳定化子群取分块上三角矩阵$\begin{bmatrix}a &amp; _ \ &amp; A \end{bmatrix} Z $,然后取$U = \{ \begin{bmatrix}1 &amp; _ \ 0 &amp; I \end{bmatrix} Z \} $.</p>
<h4><span id="群的直和与直积">群的直和与直积</span></h4><h5><span id="直和">直和</span></h5><p>在两个群$G _1 , G _2 $的笛卡尔积$G _1 \times G _2 $集合上定义二元运算,满足$( a _1 , b _1 ) ( a _2 , b _2 ) = ( a _1 a _2 , b _1 b _2 ) $,这个集合和这个二元运算显然组成群,称这个群为$G _1 $和$G _2 $的<strong>外直和</strong>,记为$G _1 \oplus G _2 $,$G _1 , G _2 $称作其的<strong>直和因子</strong>.如果要对无限个群做类似操作,则可以区分出<strong>直积</strong>的版本,仍是因为是否有限个分量非零的问题.</p>
<p>显然$G _1 \oplus G _2 $中存在两个正规子群$\bar { G _1  } = \{ ( a , e _2 ) | a \in G _1 \} , \bar { G _2  } = \{ ( e _1 , b ) | b \in G _2 \} $,并且不难发现$G _1 \oplus G _2 = \bar { G _1  } \bar { G _2  } $.</p>
<p>这给出了一种分解群的策略,事实上,设$G $是群,$H , K \trianglelefteq G , G = HK $,我们有以下命题互推:</p>
<ol>
<li><p>映射$\sigma : H \oplus K \rightarrow G , ( h , k ) \mapsto hk $是同构.</p>
</li>
<li><p>$G $的任一元素表示为$H , K $的乘积的表示法唯一.</p>
</li>
<li><p>$G $的幺元表示为$H , K $的元素的乘积的表示法唯一.</p>
</li>
<li><p>$H \cap K = \{ e \} $.</p>
</li>
</ol>
<p>显然$( 1 ) \Rightarrow ( 2 ) \Rightarrow ( 3 ) $.对于$( 3 ) \Rightarrow ( 4 ) $,如果$\exists g \in H \cap K , g \ne e $,则$e = gg ^{ - 1  } = ee $,这就给出了两种表示法,不符.</p>
<p>只需证明$( 4 ) \Rightarrow ( 1 ) $.根据我们的经验,先证良定义(显然),再证群同态,再证单射,再证满射(显然).</p>
<p>我们先干个事,我们断言$\forall h \in H , k \in K , hk = kh $.</p>
<p>这个怎么断言呢?我们考虑由于$H \trianglelefteq G $,有$k ^{ - 1  } hk \in H $,所以$h ^{ - 1  } k ^{ - 1  } hk \in H $,同理可证明$h ^{ - 1  } k ^{ - 1  } hk \in K $,于是$h ^{ - 1  } k ^{ - 1  } hk = e $,$kh = hk $.由此显然证明是群同态.</p>
<p>接下来只需要证明单射,只需要证明$\ker \sigma = \{ e , e \} $.不妨设$( h , k ) \in \ker \sigma $,则$hk = e $,$h = k ^{ - 1  } \in H \cap K = e $.所以$\ker \sigma = \{ e , e \} $.</p>
<p>我们也将$G $称作$H $和$K $的<strong>内直和</strong>,将$H , K $称作其<strong>直和因子</strong>.</p>
<p>上面的概念还可以扩展,设$G $是群,$H _1 , \cdots , H _n \trianglelefteq G , G = H _1 \cdots H _n $,我们有以下命题互推:</p>
<ol>
<li><p>映射$\sigma : H _1 \oplus \cdots \oplus H _n \rightarrow G , ( h _1 , \cdots , h _n ) \mapsto h _1 \cdots h _n $是同构.</p>
</li>
<li><p>$G $的任一元素表示为$H _1 , \cdots , H _n $的乘积的表示法唯一.</p>
</li>
<li><p>$G $的幺元表示为$H _1 , \cdots , H _n $的元素的乘积的表示法唯一.</p>
</li>
<li><p>$H _i \cap ( H _1 \cdots H _{ i - 1  } H _{ i + 1  } \cdots H _n ) = \{ e \} $.</p>
</li>
</ol>
<h5><span id="半直积">半直积</span></h5><p>取$H , N $是给定的两个任意的群,以及给定的群同态$\varphi : H \to \mathrm { Aut  } ( N ) , h \mapsto \varphi _h $.</p>
<p>接下来在$N \times H $上定义一种二元运算,定义为$( n , h ) ( n ‘ , h ‘ ) = ( n \varphi _h ( n ‘ ) , hh ‘ ) $.我们下面证明这种运算的确使得$N \times H $成为群,记作$N \rtimes _\varphi H $.见到:</p>
<ol>
<li><p>幺元存在:$1 _{ N \times H  } = ( 1 _N , 1 _H ) $.</p>
</li>
<li><p>逆元存在:$( n , h ) ^{ - 1  } = ( \varphi _{ h ^{ - 1  }  } ( n ^{ - 1  } ) , h ^{ - 1  } ) $.</p>
</li>
</ol>
<p>结合律的验证比较多,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( n _1 , h _1 ) ( n _2 , h _2 ) ( n _3 , h _3 ) \\
& = ( n _1 \varphi _{ h _1  } ( n _2 ) \varphi _{ h _1 h _2  } ( n _3 ) , h _1 h _2 h _3 ) 
\end{aligned}</script><p>而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( n _1 , h _1 ) ( ( n _2 , h _2 ) ( n _3 , h _3 ) ) \\
& = ( n _1 , h _1 ) ( n _2 \varphi _{ h _2  } ( n _3 ) , h _2 h _3 ) \\
& = ( n _1 \varphi _{ h _1  } ( n _2 \varphi _{ h _2  } ( n _3 ) ) , h _1 h _2 h _3 ) 
\end{aligned}</script><p>于是我们要证明的就是$\varphi _{ h _1  } ( n _2 ) \varphi _{ h _1 h _2  } ( n _3 ) = \varphi _{ h _1  } ( n _2 \varphi _{ h _2  } ( n _3 ) $.由于$\varphi $是同态,里面的乘积可以拆出,只需证明$\varphi _{ h _1 h _2  } = \varphi _{ h _1  } \circ \varphi _{ h _2  } $,然而这恰是同态$\varphi : H \to \mathrm { Aut  } ( N ) $本身的性质,这就搞定.</p>
<p>接下来,我们考虑搞两个嵌入映射,考虑$N \to N \times H , n \mapsto ( n , 1 _H ) $.同理定义$H \to N \times H , h \mapsto ( 1 _N , h ) $.在这种嵌入下见到$( n , h ) = ( n , 1 _H ) ( 1 _N , h ) $,可以发现$N \trianglelefteq N \times H $.原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( n _1 , h _1 ) ( n , 1 _H ) ( n _1 , h _1 ) ^{ - 1  } \\
& = ( n _1 , 1 _H ) ( 1 _N , h _1 ) ( n , 1 _H ) ( 1 _N , h _1 ) ^{ - 1  } ( n _1 , 1 _H ) ^{ - 1  } 
\end{aligned}</script><p>而考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( 1 _N , h ) ( n , 1 _H ) ( 1 _N , h ) ^{ - 1  } \\
& = ( 1 _N , h ) ( n , 1 _H ) ( 1 _N , h ^{ - 1  } ) \\
& = ( \varphi _h ( n ) , h ) ( 1 _N , h ^{ - 1  } ) \\
& = ( \varphi _h ( n ) , 1 _H ) 
\end{aligned}</script><p>这就搞定了.</p>
<p>上述操作看上去一团迷雾,我们想要说明半直积定义的动机:其实就是想让$N , H $嵌入同一个群中,并且使得$N $是这个群的一个正规子群.</p>
<p>于是我们的目标终于明晰:假设$H \leq G , N \trianglelefteq G , H \cap N = \{ 1 \} , G = NH = HN $,考虑由$\mathrm { Ad  } _h ( n ) = hnh ^{ - 1  } $给出的映射,下面我们要证明存在同构$\Phi : N \rtimes _\mathrm { Ad  } H \cong G , ( n , h ) \mapsto nh $.</p>
<p>首先验证这的确是个同态,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Phi ( ( n , h ) ( n ' , h ' ) ) \\
& = \Phi ( nhn ' h ^{ - 1  } , hh ' ) \\
& = nhn ' h ^{ - 1  } hh ' \\
& = nhn ' h ' & = \Phi ( n , h ) \Phi ( n ' , h ' ) 
\end{aligned}</script><p>满性显然,单性的话考虑$\Phi ( n , h ) = 1 \Leftrightarrow nh = 1 \Leftrightarrow n = 1 , h = 1 $,这就搞定.</p>
<p>上述构造舍弃了$\varphi $,因此比起之前的版本,这个更像是一种内的版本.事实上上述也有第二同构定理给出$G / N \cong H $,所以你可以将商看作半直积的逆运算,然而反之不可.例如$( \mathbb { Z  } / 4 \mathbb { Z  } ) / ( 2 \mathbb { Z  } / 4 \mathbb { Z  } ) \cong ( \mathbb { Z  } / 2 \mathbb { Z  } ) $,注意到$( 2 \mathbb { Z  } / 4 \mathbb { Z  } ) \cong ( \mathbb { Z  } / 2 \mathbb { Z  } ) $,但$\mathbb { Z  } / 4 \mathbb { Z  } $和$( \mathbb { Z  } / 2 \mathbb { Z  } ) ^2 $并不同构,前者是循环群后者是克莱因四元群.</p>
<p>半直积的作用要么是通过两个群得到一个新的群,要么反之将一个群拆分为两个不同的群.</p>
<h6><span id="example1">Example1</span></h6><p>一个例子是将置换群$S _n $拆成偶置换群$A _n $和任何一个单置换$\tau = ( i , j ) $的半直积,有:$S _n = A _n \rtimes \langle \tau \rangle $.</p>
<p>然而当$n &gt; 2 $的时候,见到永远不可能出现$S _n = A _n \times \langle \tau \rangle $的情形,证明可以考虑左侧的中心只有$id $而右侧至少有$( 1 , 1 ) $和$1 , \tau $两个.</p>
<h6><span id="example2二面体群">Example2(二面体群)</span></h6><p>回忆到$O ( 2 ) $为$\mathbb { R  } ^2 $上的正交变换,上面有一个正规子群$SO ( 2 ) $为$\det = 1 $的部分.</p>
<p>设$n \geq 3 $,取平面上的一个中心为$( 0 , 0 ) $的正$n $边形,适当缩放后可以使得顶点分别为$\omega _n ^k = e ^{ \frac { 2 k \pi i  } { n  }  } $,设$D _{ 2 n  } $为所有使得正$n $边形不变的正交变换,容易见到$D _{ 2 n  } \leq O ( 2 ) $.</p>
<p>接下来看$D _{ 2 n  } $中的两种元素:</p>
<ol>
<li><p>旋转:那肯定要将一个角挪到另一个角上,因此等价于复平面上的$\omega _n ^k $,记$\sigma = \omega _n $则旋转群也就是$\langle \sigma \rangle \cong \mathbb { Z  } / n \mathbb { Z  } $.</p>
</li>
<li><p>镜射:任取一个$\tau $使得图形沿某条轴翻转.容易见到$\langle \tau \rangle \cong \mathbb { Z  } / 2 \mathbb { Z  } $.</p>
</li>
</ol>
<p>下面我们说明$D _{ 2 n  } \cong \langle \sigma \rangle \rtimes \langle \tau \rangle \cong \mathbb { Z  } / n \mathbb { Z  } \rtimes _\varphi \mathbb { Z  } / 2 \mathbb { Z  } $.其中$\varphi _{ 1 + 2 \mathbb { Z  }  } ( a + n \mathbb { Z  } ) = - a + n \mathbb { Z  } $.</p>
<p>首先见到$D _{ 2 n  } \cap SO ( 2 ) = \langle \sigma \rangle $,原因显然.这样两边取交就可以说明$\langle \sigma \rangle \trianglelefteq D _{ 2 n  } $.</p>
<p>此外容易见到$\langle \sigma \rangle \cap \langle \tau \rangle = \{ 1 \} $.其余性质也容易说明,唯一可能稍不显然的是为何$\langle \sigma \rangle \rtimes \langle \tau \rangle $的确生成了整个群.</p>
<p>策略是转回去!假设这个变换将$0 $号顶点搞到了某个位置,你可以把它转回去,于是此时图形保持了$0 $号顶点不动,此时要么就是恒等,要么就是按照实轴翻转,这样就搞定了.</p>
<h3><span id="环">环</span></h3><p>定义一个<strong>环</strong>是一个集合$R $和两种二元运算$+ , \times $.它应当满足如下性质:</p>
<ol>
<li><p>集合对两种运算封闭.</p>
</li>
<li><p>$( R , + ) $构成阿贝尔群,加法幺元一般记作$0 _R $,$x $的加法逆元一般记作$- x $.</p>
</li>
<li><p>乘法有结合律.</p>
</li>
<li><p>乘法对加法有分配律.</p>
</li>
<li><p>(幺环存在乘法幺元,一般记作$1 _R $)</p>
</li>
<li><p>(交换环的乘法具有交换律)</p>
</li>
</ol>
<p>最平凡的环只包含一个$0 $元素,被称为<strong>零环</strong>.</p>
<p>下面证明一些环的基础性质:</p>
<ol>
<li>$\forall a \in R , a 0 = 0 a = 0 $.</li>
</ol>
<p>注意到$a 0 = a ( 0 + 0 ) = a 0 + a 0 $,所以$a 0 = 0 $.</p>
<ol>
<li>$\forall a , b \in R , ( - a ) b = a ( - b ) = - ( ab ) $.</li>
</ol>
<p>注意到$( - a ) b + ab = b ( a - a ) = 0 $,所以$- ( ab ) = ( - a ) b $.</p>
<ol>
<li>$\forall a , b \in R , ( - a ) ( - b ) = ab $.</li>
</ol>
<p>由(2)是显然的.</p>
<p>注意到环的定义中并没有提及乘法逆元.如果环$R $是幺环,且对于某一个$a \in R $,$a $有逆元(或者既有左逆元又有右逆元,类似群,左右逆元必相等且唯一),那么称其为<strong>可逆元</strong>或<strong>单位元</strong>,有时又称其为unit.</p>
<p>容易验证幺环的可逆元的全体构成乘法群,记作$R ^\times $.</p>
<p>对于一个元素$a \in R $来说,如果$\exists b \in R \setminus \{ 0 \} $,$ab = 0 $,我们称$a $是$R $中的一个<strong>左零因子</strong>,同理可定义<strong>右零因子</strong>,如果一个$a $既是左零因子又是右零因子,我们称其为一个<strong>零因子</strong>.</p>
<p>我们事实上可以说明这里的加法和乘法与我们平时使用的相当类似,换言之,我们可以说明对于任意环$R $而言,单同态$\varphi : \mathbb { Z  } \rightarrow R $唯一.</p>
<p>首先我们应该满足$\varphi ( 1 ) = 1 _R , \varphi ( 0 ) = 0 _R $.</p>
<p>其次我们应当有$\varphi ( n ) = \varphi ( 1 + 1 + \cdots + 1 ) = \varphi ( 1 ) + \varphi ( 1 ) + \cdots + \varphi ( 1 ) $.我们不妨把后者简写为$n \varphi ( 1 ) $,倍数运算是环中相当重要的运算.</p>
<h4><span id="子环">子环</span></h4><p>要验证$S $是$R $的子环,只需验证$S $对加法下是子群,然后$S $对乘法封闭.</p>
<p>而事实上由于$- x = ( - 1 ) x $,所以实际上只需要验证$S $对加法和乘法都封闭即可.</p>
<h4><span id="理想">理想</span></h4><p>由于环上有两种运算,如果我们想在陪集上保持环的两种运算,就需要在上面加一些限制.</p>
<p>进一步地,如果$I $是$R $的一个加法子群(由于加法有交换律,所以加法子群一定是加法正规子群),并且$\forall r \in R $,有$rI \subseteq I $(那么自然有$rI = I $),则称$I $是$R $的一个<strong>左理想</strong>,同理定义<strong>右理想</strong>,既是左理想又是右理想则称其为一个<strong>理想</strong>.</p>
<p>事实上,如果对于$R $上的一个理想$I $,我们容易证明$I = R \Leftrightarrow 1 \in I $.</p>
<p>由于这是一个加法子群,所以加法运算肯定是满足的,容易发现如果$I $是$R $的一个理想,那么$\forall r , s \in R , ( r + I ) ( s + I ) = rs + I $.</p>
<p>类似群中的结构,子环的交仍然是子环,理想的交仍然是理想.于是类似可以定义由$M \subseteq R , M \ne \emptyset $生成的理想$( M ) $.可由一个元素生成的理想称为<strong>主理想</strong>,可由有限多个元素生成的理想叫做<strong>有限生成理想</strong>.容易发现如果$R $是交换环,那么$( a ) = aR $.不然$( a ) = RaR $.</p>
<p>既然我们在陪集上保持了环的运算,我们自然可以称$R / I $为$R $关于$I $的<strong>商环</strong>,也就是$R / I = \{ r + I | r \in R \} $.必须要说明的是商环本身也是一个环,其加法幺元是$0 + I $,乘法幺元是$1 + I $.</p>
<p>子环和理想疑似没有对应的符号表示,我们下面不严谨地盗用子群和正规子群的符号(正常情况下好像不让这么干),在不引起混淆的前提下将$( R , + , \times ) $简写为$R $.</p>
<h4><span id="同态和同构">同态和同构</span></h4><p>类似群同态和同构,要同时保持两种运算并且需要将乘法幺元映射到对应的乘法幺元.</p>
<p>不过,如果将环同态的定义中的$\varphi ( ab ) = \varphi ( a ) \varphi ( b ) $改为$\varphi ( ab ) = \varphi ( b ) \varphi ( a ) $,则称这样的映射为环的<strong>反同态</strong>.</p>
<p>和群略有区别的地方在于如何定义$\ker \varphi $,事实上我们一般用加法幺元(因为乘法逆元不一定存在)定义$\ker \varphi = \{ a \in R | \varphi ( a ) = 0 \} $.那么$\varphi $是单射当且仅当$\ker \varphi = \{ 0 \} $.</p>
<p>类比一下群同态,可以知道对于$\varphi : R \rightarrow R _1 $,$\text { im  } \varphi \leq R _1 , \ker \varphi \trianglelefteq R $.</p>
<p>对于前者:由于加法上的性质已经很好了,只需验证其对乘法封闭,这个是好做的.</p>
<p>对于后者:只需验证其封闭且是理想,同样可行.</p>
<h5><span id="同态基本定理">同态基本定理</span></h5><p>也就是$R / \ker \varphi \cong \text { im  } \varphi $.</p>
<p>设$f : R _1 \to R _2 $是线性映射,$I _1 \trianglelefteq R _1 , I _2 \subseteq R _2 $并构造两个商映射$\varphi _1 , \varphi _2 $,并且$f ( I _1 ) \subseteq I _2 $,那么存在唯一的线性映射$\bar { f  } : R _1 / I _1 \to R _2 / I _2 $使得$f \varphi _2 = \bar { f  } \varphi _1 $.具体地,$\bar { f  } ( r + I _1 ) = f ( r ) + I _2 $.</p>
<p>如果再推广上述结论的话还可以来多个,具体可以看下面的交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { R _1 \ar [r ] ^f \ar [d ] _{ \varphi _1  } & R _2 \ar [r ] ^g \ar [d ] _{ \varphi _2  } & R _3 \ar [d ] _{ \varphi _3  } \\
R _1 / I _1 \ar [r ] ^{ \bar { f  }  } & R _2 / I _2 \ar [r ] ^{ \bar { g  }  } & R _3 / I _3 \\
 }</script><h5><span id="第一同构定理">第一同构定理</span></h5><p>设$R $是环,$I \trianglelefteq R $,考虑典范同态:$\pi : R \rightarrow R / I , r \mapsto r + I $,那么:</p>
<ol>
<li><p>$R $的包含$I $的子环与$R / I $的子环在$\pi $下一一对应.</p>
</li>
<li><p>在此对应下,理想对应于理想.</p>
</li>
<li><p>若$I \trianglelefteq J \trianglelefteq R $,则$R / J \cong ( R / I ) / ( J / I ) $.</p>
</li>
</ol>
<h5><span id="第二同构定理">第二同构定理</span></h5><p>设$R $是环,$I \trianglelefteq R , S \leq R $,则:</p>
<ol>
<li><p>$I + S \leq R $.$I \cap S \trianglelefteq S $.$I \trianglelefteq I + S $</p>
</li>
<li><p>$( I + S ) / I \cong S / ( S \cap I ) $.</p>
</li>
</ol>
<h4><span id="整环">整环</span></h4><p>如果一个交换幺环至少含有两个元素(或说$0 \ne 1 $),且其满足$xy = 0 \Rightarrow x = 0 \lor y = 0 $(或说其没有非零零因子),那么我们称其是一个整环.</p>
<p>显然,整环上对乘法满足左右消去律.原因是$ax = ay \Leftrightarrow a ( x - y ) = 0 $.</p>
<h5><span id="特征">特征</span></h5><p>我们之前证明过$\mathbb { Z  } $可以唯一射到任何一个环上,如果这个环是整环,那么其实有更好的性质:</p>
<p>对于任意一个整环$R $,存在唯一一个环的<strong>特征</strong>$\text { char  } R \in \mathbb { N  } $使得$n 1 _R = 0 _R \Leftrightarrow \text { char  } R | n $.我们还可以知道$\text { char  } R $要么是$0 $要么是素数.</p>
<p>怎么证明呢?考虑如果$\text { char  } R = ab $,自然有$ab 1 _R = 0 _R $,于是$( a 1 _R ) ( b 1 _R ) = 0 _R $,由于这是一个整环,我们当然有$a 1 _R = 0 _R \lor b 1 _R = 0 _R \Rightarrow \text { char  } R | a \lor \text { char  } R | b $.</p>
<p>如果$R $中有一个整子环$R _0 $,当然可以发现$\text { char  } R = \text { char  } R _0 $,于是当然有$\text { char  } R = \text { char  }  \text { Frac  } ( R ) $.</p>
<p>另一个性质在于容易发现$\text { char  } R \times x = 0 _R $.</p>
<h5><span id="整除性">整除性</span></h5><p>$\forall a , b \in R $,如果$\exists c \in R , a = bc $,就称$b $是$a $的<strong>因子</strong>,记作$b | a $.我们可以说明$b | a \Leftrightarrow ( a ) \subseteq ( b ) $,因为对于必要性:$( a ) = aR = bcR \subseteq bR $,而对于充分性则是因为$a \in ( a ) \subseteq ( b ) $.</p>
<p>如果两个元素互为因子,则称它们<strong>相伴</strong>,暂且用$\sim $代表这种关系.容易验证这等价于$\exists u \in R ^\times , a = bu $.原因是如果$\exists u , v \in R , a = ub , b = va $,那么$a = uva $,由消去律得知$uv = 1 $.此时它们生成的主理想必然相等.相伴关系显然是一种等价关系,$R $对于相伴关系的商集上的因子关系是一种偏序关系(但不是全序的).</p>
<p>事实上还可以定义<strong>真因子</strong>:如果$( a ) \subsetneq ( b ) $,那么显然$b | a $,我们称此时$b $是$a $的真因子.容易发现$b $是$a $的真因子当且仅当$b | a $并且$b $不与$a $相伴.</p>
<p>称一个元素$a $是<strong>不可约元</strong>,当它不是$0 $也不是单位元而且$\forall b , c \in R , a = bc \Rightarrow b \in R ^\times \lor c \in R ^{ \times  } $.或者说:$a = bc \Rightarrow c \sim a \lor b \sim a $.或者说$a $不存在真因子.</p>
<p>称一个元素$a $是<strong>素元</strong>,当它不是$0 $也不是单位元而且$\forall b , c \in R , a | bc \Rightarrow a | b \lor a | c $.</p>
<p>我们可以证明:在整环中,素元一定是不可约元,但是不可约元不一定是素元.</p>
<p>如何证明素元一定是不可约元呢?考虑如果$a \in prime $,并且$a = bc $,则$a | bc \Rightarrow a | b \lor a | c $,不妨假设$a | b $,那么设$b = ad $,自然有$a = adc $,$( dc ) = 1 $,于是$c \in \mathrm { unit  } $.</p>
<h5><span id="唯一分解整环ufd">唯一分解整环(UFD)</span></h5><p>称$R $是唯一分解整环,如果$\forall a \in R , a \ne 0 $,都可以将$a $分解成有限个不可约元的乘积的相伴,也就是可以将$a = u \prod _{ k = 1  } ^n p _k $,其中$u \in \mathrm { unit  } $,$p _k $是不可约元.并且这种分解需要在相伴意义下唯一,也就是如果存在另一种分解$a = v \prod _{ k = 1  } ^m q _k $,那么需要满足$n = m $并且可以交换乘积顺序使得$p _k $和$q _k $相伴.</p>
<p>我们下面可以证明:在唯一分解整环中,不可约元一定也是素元.</p>
<p>不妨设$a $是不可约元,那么我们要证明$a | bc \Rightarrow a | b \lor a | c $.考虑设$ad = bc $,对$b , c , d $均作唯一分解,那么$a $会剩下来并且和对面的某个分解出来的不可约元相伴,自然会有$a | b \lor a | c $.</p>
<p>在唯一分解整环中可以定义最大公因子.最大公因子当然可能不唯一,但最大公因子之间一定相伴.进一步地,如果最大公因子是可逆元,我们称两个数互素.</p>
<p>当且仅当一个整环有以下两个性质,它是一个唯一分解整环:</p>
<ol>
<li><p>任意不可约元都是素元.</p>
</li>
<li><p>(存在分解)所有的$r \in R \setminus \{ 0 \} $都能写成有限不可约元的乘积.</p>
</li>
</ol>
<p>先数学归纳,然后用反证法,假设不成立,那么$r = \prod p _k = \prod q _j $.</p>
<p>接下来任取左边的一个$p _1 $,如果右边也有一个$q _1 \sim p _1 $就直接消去.反之考虑不可约元也是素元,因此$p _1 | \prod q _j $,因此$\exists j , p _1 | q _j $,不妨设$tp _1 = q _j $,因为$q _j $是不可约元,所以$t \in R ^\times $,所以$p _1 \sim q _j $.于是唯一分解性自然得出.</p>
<p>另一种等价条件是:</p>
<ol>
<li><p>任意不可约元都是素元.</p>
</li>
<li><p>主理想的Noether性质:对于一条主理想的链$( a _1 ) \subseteq ( a _2 ) \subseteq \cdots $,一定存在一个$k $,使得从$k $之后$( a _k ) = ( a _{ k + 1  } ) = \cdots $.这条性质也等价于一条因子链一定需要是有限的.</p>
</li>
</ol>
<p>用主理想的Noether性质直接就可以得出任何一个$r $都存在有限分解,于是等价于上面那个等价性质.</p>
<p>另外,真实的Noether性质其实是任何一个理想列(不一定是主理想),然而UFD并不一定满足此.最经典的例子是环$\mathbb { Q  } [ x _1 , x _2 , \cdots ] $,显然$( x _1 ) \subseteq ( x _1 , x _2 ) \subseteq \cdots $.</p>
<h5><span id="主理想整环pid">主理想整环(PID)</span></h5><p>如果一个整环的所有理想都是主理想,则称其为一个主理想整环.交换除环当然是主理想整环的一个典型例子.</p>
<p>需要证明PID一定是UFD,对此,我们考虑:</p>
<p>首先证明PID上的不可约元是素元,这里需要拿出裴蜀定理.然而我们目前不能定义最大公因子的概念,因此退而求其次只定义互素的概念:如果$\forall c , c | a \land c | b \Rightarrow c \in R ^\times $,则称$a $和$b $互素.</p>
<p>我们需要证明在主理想整环上有裴蜀定理,换言之如果两个元素互素,那么$\exists x , y \in R , ax + by = 1 $,或者说$( \{ a , b \} ) = R $.原因是$\exists h , ( h ) = ( \{ a , b \} ) $,那么此时必有$h | a \land h | b $,于是$h \sim 1 $.</p>
<p>其次需要证明PID上的Noether性质,注意到一条主理想的链$I _1 \subseteq I _2 \subseteq \cdots $,直接取$I = \bigcup _j I _j $,这个$I $必然也是理想(乘法封闭性是显然的,加法封闭性的话考虑$\forall x \in I _a , y \in I _b $,$x + y \in I _{ \max ( a , b )  } $),那么它就必然是一个主理想,也就是$\exists h , I = ( h ) $.此时注意到$\exists k , h \in I _k $,那么$I _k = I _{ k + 1  } = \cdots = I $,这就证毕了.</p>
<p>综上可看出PID一定是UFD.</p>
<p>设$R $为主理想整环,$t \in ( R \setminus \{ 0 \} ) \setminus R ^\times $.那么以下命题等价:</p>
<ol>
<li><p>$R / ( t ) $是域.</p>
</li>
<li><p>$R / ( t ) $是整环.</p>
</li>
<li><p>$t $是素元.</p>
</li>
</ol>
<p>(1)$\Rightarrow $(2)当然是平凡的,考虑(2)$\Rightarrow $(3)如何证明:</p>
<p>由于$R / ( t ) $是整环,考虑$t = ab $,那么我们有$( a + ( t ) ) ( b + ( t ) ) = ab + ( t ) = 0 + ( t ) $,由于这是一个整环,这必然意味着:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a + ( t ) & = 0 + ( t ) \lor b + ( t ) & = 0 + ( t ) \\
\Rightarrow t | a \lor t | b \\
\Rightarrow t \sim a \lor t \sim b 
\end{aligned}</script><p>因此$t $是不可约元,因此$t $是素元.</p>
<p>接下来考虑(3)$\Rightarrow $(1),只需证明非零元$a + ( t ) $均可逆即可.考虑主理想整环上的裴蜀定理,存在$x , y $使得$ax = 1 - yt $,此时$x + ( t ) $就是$a + ( t ) $的逆元.</p>
<p>还可进一步扩展裴蜀定理,容易证明在主理想环中$( \{ r _1 , \cdots , r _n \} ) = \gcd ( r _1 , \cdots , r _n ) R $.</p>
<p>事实上还可以在这里拿出拓展版的中国剩余定理,具体地,如果$a _1 , \cdots , a _n \in R \setminus \{ 0 \} $,并且它们两两互素,取$a = \prod a _k $,那么我们事实上有环同构$\varphi : R / ( a ) \to \prod _{ k = 1  } ^n R / ( a _k ) , r + ( a ) \mapsto ( r + ( a _i ) ) _{ k = 1  } ^n $.</p>
<p>用数学归纳只需证明$n = 2 $的情形就可以了.</p>
<p>先证明$\varphi $是单射,观察$\ker \varphi $,如果$\varphi ( r + ( a ) ) = ( 0 + ( a _1 ) , 0 + ( a _2 ) ) $自然意味着$a _1 | r , a _2 | r \Rightarrow a | r $,于是$r + ( a ) = 0 + ( a ) $,这立刻得到$\varphi $是单射.</p>
<p>再证明$\varphi $是满射,用裴蜀定理容易取$x _1 , x _2 \in R $使得$a _1 x _1 + a _2 x _2 = 1 $,那么$ra _1 x _1 + ra _2 x _2 = r $,此时注意到$\varphi ( ra _1 x _1 + ( a ) ) = ( 0 + ( a _1 ) , r + ( a _2 ) ) $,$\varphi ( ra _2 x _2 + ( a ) ) = ( r + ( a _1 ) , 0 + ( a _2 ) ) $.这样就可以看出其满性.其实这当然也是中国剩余定理在整数上的构造的类似版本.</p>
<h3><span id="多项式环">多项式环</span></h3><h4><span id="一元多项式环">一元多项式环</span></h4><p>一个系数属于特定非零环$R $的一元多项式定义为系数在$R $上的一元多项式环,记作$R [ x ] $,注意到如果$R $是整环,$R [ x ] $仍然是整环.多元多项式环可以不断在多元多项式环上定义一元多项式环.不妨将一个多项式记作$f ( x ) $.另外如果我们记$R ^{ \times  } $为$R $中可逆元素的集合,那么显然$R [ x ] ^{ \times  } = R ^{ \times  } $.</p>
<p>一般而言,我们下面默认讨论$R $是整环的情况.</p>
<p>在多项式环上可以定义最高次数函数$\deg $,容易验证$\deg ( fg ) = \deg f + \deg g , \deg ( f + g ) \leq \max \{ \deg f , \deg g \} $,可定义$\deg 0 = - \infty $.</p>
<p>整环上的多项式有长除法和取模运算,也就是对于任意多项式$f $,以及最高项系数为$1 $的多项式$d $,存在唯一一组$q , r $满足$f = dq + r $并且$\deg r $最小.这样还可以定义整除也就是当$r = 0 $的时候.</p>
<p>长除法的正确性可以反证,如果存在两组,那么自然有$d ( q _1 - q _2 ) = r _2 - r _1 $,如果$q _1 \ne q _2 $,那么$\deg ( q _1 - q _2 ) \geq 0 $,那么$\deg d ( q _1 - q _2 ) \geq \deg d $,但是$\deg ( r _2 - r _1 ) &lt; \deg d $,这样的话等式就不能成立了.因此必定有$q _1 = q _2 , r _1 = r _2 $.</p>
<p>这就可以保证代入数值操作.因为我们考虑存在唯一的多项式$q $和唯一一个$s \in R $满足$f = ( x - \alpha ) q + s $,那我们就可以称$f ( \alpha ) = s $.</p>
<p>另外,定义在域$F $上的多项式$F [ x ] $是UFD,原因是可以两边对某一个根作长除法.</p>
<h4><span id="多元多项式环">多元多项式环</span></h4><p>显然,$R [ x _1 , \cdots , x _n ] \cong ( R [ x _1 , \cdots , x _{ n - 1  } ] ) [ x _n ] $.</p>
<h4><span id="不可约多项式">不可约多项式</span></h4><p>不可约多项式,也就是定义在域上的多项式环上的不可约元.换言之如果$f $是不可约的,那么对于$f $的任何一个分解$f = g _1 g _2 $,都一定有$g _1 \in F ^\times $或者$g _1 \in F ^\times $.</p>
<h5><span id="本原多项式">本原多项式</span></h5><p>为何我们定义不可约多项式的时候需要定义在域上,而不是简单定义在整环上呢?这是因为,例如,$2 x \in \mathbb { Z  } [ x ] $,它并非是一个不可约元.但只要把$\mathbb { Z  } $扩成$\mathbb { Q  } $,它就成为了一个不可约元.</p>
<p>那么在整数上怎么搞呢?我们考虑设$f = a _0 + \cdots + a _n x ^n \in \mathbb { Z  } [ x ] \setminus \{ 0 \} $,并设$c ( f ) = | \gcd ( a _0 , \cdots , a _n ) | $,如若$c ( f ) = 1 $,则称其是一个<strong>本原多项式</strong>.</p>
<p>接下来我们有<strong>高斯引理</strong>:如果$g , h \in \mathbb { Z  } [ x ] $都是本原多项式,那么$gh $也是本原多项式.</p>
<p>如何证明?考虑对于任何一个素数$p $,我们找到$g $中的最高次系数不被$p $整除,设为$r $.换言之设$g = \sum _{ k \geq 0  } a _k x ^k $,则$\forall k &gt; r , p | a _k $,而$p \nmid a _r $.对$f = \sum _{ k \geq 0  } b _k x ^k $同样根据上面找到一个最高次$s $,满足$p \nmid b _s $.</p>
<p>现在观察:</p>
<script type="math/tex; mode=display">
\begin{aligned}
[ x ^{ r + s  } ] gh \\
& = \sum _{ i + j = r + s  } a _i b _j & \equiv a _r b _s \pmod { p  } \\
\ne 0 \pmod { p  } 
\end{aligned}</script><p>这就搞定.</p>
<p>另一个证明策略是干脆把$\mathbb { Z  } \to \mathbb { Z  } / p \mathbb { Z  } $,后者是一个域,于是可以见到其非零.其实和上面是同一个想法,也许后者在做完映射后更好描述.</p>
<p>高斯引理的推论是$c ( gh ) = c ( g ) c ( h ) $.</p>
<p>接下来我们来搞一些$\mathbb { Q  } $上的结构,我们下面来证明,对于本原多项式来说,只要其在$\mathbb { Q  } [ x ] $上可约,那它就在$\mathbb { Z  } [ x ] $上可约.换言之,假设$f \in \mathbb { Z  } \setminus \{ 0 \} $是本原多项式,如果$f = gh $,其中$g , h \in \mathbb { Q  } [ x ] , \deg g &gt; 0 , \deg h &gt; 0 $,那我们断言$\exists \alpha \in \mathbb { Q  } ^\times $使得$g _1 = \alpha g , h _1 = \alpha ^{ - 1  } h $使得$g _1 , h _1 \in \mathbb { Z  } [ x ] $且它们都是本原多项式.</p>
<p>考虑总存在一对$u , v \in \mathbb { N  } _+ $使得$ug , vh \in \mathbb { Z  } [ x ] $,此时有:</p>
<script type="math/tex; mode=display">
uv = c ( uvf ) = c ( ugvh ) = c ( ug ) c ( vh )</script><p>所以:</p>
<script type="math/tex; mode=display">
f = \frac { ugvh  } { uv  } = \frac { ug  } { c ( ug )  } \frac { vh  } { c ( vh )  }</script><p>这就搞定.</p>
<p>还有一条性质是说,假设$f \in \mathbb { Z  } \setminus \{ 0 \} $是本原多项式,当$\deg f &gt; 0 $的时候,下面两个命题等价:</p>
<ol>
<li><p>$f $是$\mathbb { Q  } [ x ] $上的不可约多项式.</p>
</li>
<li><p>$f $是$\mathbb { Z  } [ x ] $上的不可约多项式.</p>
</li>
</ol>
<p>(1)$\Rightarrow $(2)的话考虑反证,如若存在$\mathbb { Z  } [ x ] $上的$g , h $使得$f = gh $,那$f $在$\mathbb { Z  } [ x ] $上都可约,当然在$\mathbb { Q  } [ x ] $上可约.</p>
<p>(2)$\Rightarrow $(1)的话仍然考虑反证,如果存在$\mathbb { Q  } [ x ] $上的$g , h $使得$f = gh $,那之前的推论告诉我们$f $可以分解为两个本原多项式的乘积,这就矛盾了.</p>
<p>接下来我们证明$\mathbb { Z  } [ x ] $是一个UFD,在此之前,我们先对$\mathbb { Z  } [ x ] $上的不可约元做分类,我们断言其分为以下两种:</p>
<ol>
<li><p>$\mathbb { Z  } $的不可约元.</p>
</li>
<li><p>$\deg f &gt; 0 $并且满足$f $作为$\mathbb { Q  } [ x ] $上的不可约元的本原多项式$f $.</p>
</li>
</ol>
<p>首先$\deg f = 0 $的情况自然是(1),下面尝试分类$\deg f &gt; 0 $的情况.</p>
<p>如若$c ( f ) \ne 1 $,当然有$f = c ( f ) \frac { f  } { c ( f )  } $,因此可约.所以不可约当且仅当$c ( f ) = 1 $,也就是$f $得是一个本原多项式.那就知道其不可约性可以从$\mathbb { Q  } [ x ] $过渡到$\mathbb { Z  } [ x ] $上.</p>
<p>最终我们来说明$\mathbb { Z  } [ x ] $是唯一分解的,首先可以提系数使得只对本原多项式说明唯一分解性.</p>
<p>既然如此,考虑如果$f $可以被分解为两种$a _1 \cdots a _r $和$b _1 \cdots b _s $两种,它们都是本原多项式,乘积后亦然,其中$a _i , b _i $均满足$\deg &gt; 0 $,那么直接扩域到$\mathbb { Q  } [ x ] $上,由于定义在域上的多项式有唯一分解行,因此$s = r $而且适当重排后$a _i $和$b _i $差了一个$\mathbb { Q  } ^\times $,然而两个本原多项式如果差了一个$\mathbb { Q  } ^\times $,当然意味着它俩只差一个正负号,这是显然的,就给出了分解的唯一性.</p>
<p>接下来有<strong>Eisenstein判准</strong>,不妨设$n \geq 1 $,而$f = \sum _{ k = 0  } ^n a _k x ^k \in \mathbb { Z  } [ x ] $,如果存在一个素数$p $满足$p \nmid a _n $,而且$p | a _0 , \cdots , a _{ n - 1  } $,并且$p ^2 \nmid a _0 $,则$f $是$\mathbb { Q  } [ x ] $中的不可约多项式.</p>
<p>为证明此,考虑既然$p \nmid a _n $,那当然$p \nmid c ( f ) $,因此,我们可以将$f $调整为$\frac { f  } { c ( f )  } $,这并不会对$p $的性质产生影响,而可以将$f $化约成本原多项式的情形.</p>
<p>如何证明呢?考虑反证,对本原多项式来说$\mathbb { Q  } [ x ] $上不可约等价于在$\mathbb { Z  } [ x ] $上不可约,假设此情形下$f = gh $,其中$g = \sum _{ k = 0  } ^m b _k x ^k , h = \sum _{ k = 0  } ^l c _k x ^k $,其中$l , m &gt; 0 $,而且$g , h \in \mathbb { Z  } [ x ] $.</p>
<p>既如此,注意到$a _n = b _m c _l $,因此一定有$p \nmid b _m , p \nmid c _l $.而又有$p | a _0 = b _0 c _0 $,不妨假设$p | b _0 $.此时,可以取一个$1 \leq k \leq m $,使得$p | b _0 , \cdots , p | b _{ k - 1  } $但是有$p \nmid b _k $,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
a _k & \equiv 0 \pmod { p  } \\
\sum _{ j = 0  } ^k b _j c _{ k - j  } & \equiv 0 \pmod { p  } \\
b _k c _0 & \equiv 0 \pmod { p  } 
\end{aligned}</script><p>所以$p | c _0 $,所以$p ^2 | a _0 = b _0 c _0 $,矛盾.</p>
<p>我们可以在此基础上证明一些有趣的结论:</p>
<ol>
<li><p>$\forall n \geq 1 $,$p $是质数,则$p + x ^n $是不可约的.</p>
</li>
<li><p>$p $是质数,则$\Phi _p = 1 + x + \cdots + x ^{ p - 1  } = \frac { x ^p - 1  } { x - 1  } $是不可约的.</p>
</li>
</ol>
<p>对于(2),考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Phi _p & = \frac { x ^p - 1  } { x - 1  } \\
& = \frac { ( x - 1 + 1 ) ^p - 1  } { x - 1  } \\
& = \frac { \sum _{ k = 0  } ^p \binom { p  } { k  } ( x - 1 ) ^k - 1  } { x - 1  } \\
& = \sum _{ k = 1  } ^p \binom { p  } { k  } ( x - 1 ) ^{ k - 1  } 
\end{aligned}</script><p>取$h ( x ) = \sum _{ k = 1  } ^p \binom { p  } { k  } x ^{ k - 1  } $,则$\Phi _p ( x ) = h ( x - 1 ) $,显然,二者的不可约性是等价的,下面观察$h ( x ) $的不可约性.然而$h ( x ) $当然满足Eisenstein判准,这就搞定.</p>
<p>这里可以见到,其实上面的过程可以全部挪到某个UFD以及与其配套的分式域上,均可以起效果.而且也可以看到在某一个UFD上定义的多项式环也一定是UFD.</p>
<h5><span id="一个判定不可约的算法">一个判定不可约的算法</span></h5><p>考虑判定一个$f $是否可以被拆成两个$f = gh $,并且它们都在$\mathbb { Z  } [ x ] $上,其中$\deg g \leq k $.</p>
<p>如何判断呢?首先我们任取不同的$x _0 , \cdots , x _k \in \mathbb { Z  } $,并取$f ( x _0 ) , \cdots , f ( x _k ) $,如果它们中有$0 $就完工了对吧.如果没有,我们一定有$g ( x _i ) | f ( x _i ) $,因此$g ( x _i ) $只有有限种可能性.我们枚举所有的可能性并插值判$g $.这就给出了一个有限次实现的算法.</p>
<h5><span id="不可约多项式上的扩域">不可约多项式上的扩域</span></h5><p>如果域$F $上的多项式$f \in F [ x ] $可以分解为若干个一次多项式的乘积,则称其可<strong>分裂</strong>.</p>
<p>那么如果定义在一个域上的每个$\deg \geq 1 $的多项式都分裂,那么就称这个域是<strong>代数闭</strong>的.</p>
<p>定义在域$F $上的多项式未必有根,但理应在其上面可以做扩域使其有根.具体而言我们对于域$F $,想要找到一个单同态$\varphi : F \to L $使得$L $是一个更大的域.而应当见到$L $实际上在某种意义上是定义在$F $上的向量空间.</p>
<p>在这里需要发现的是,定义在域上的$F [ x ] $一定是主理想整环,原因是可以在理想$I $中取出$\deg $最小的一个非零的$f $,那么其中的任何一个$g \in I $,用带余除法立刻得到$g = pf + r $,其中$\deg r &lt; \deg f , r \in I $,必然得到$r = 0 $.这意味着$I = ( f ) $.同时容易见到$\deg f = 0 $的时候,$( f ) = F [ x ] $.</p>
<p>我们尝试研究$F [ x ] / ( f ) $的形态,那么见到$\deg f \geq 1 $的时候这个形态应当才是有意义的.构造一个同态$\tau : F \to F [ x ] / ( f ) , a \mapsto a + ( f ) $,容易见到$\tau $应当是一个单射,原因是在$\deg f \geq 1 $的前提下,有$\ker \tau = \{ 0 \} $.此时应当见到$F [ x ] / ( f ) $可以看作一个定义在$F $上的向量空间.而运用代余除法得知$\{ 1 + ( f ) , x + ( f ) , \cdots , x ^{ \deg f - 1  } + ( f ) \} $显然给出了$F [ x ] / ( f ) $的一组基.</p>
<p>在此基础上,若$f = \sum a _k x ^k $,定义$f ^\varphi = \sum \varphi ( a _k ) \varphi ( x ) ^k $.</p>
<p>由于$F [ x ] $是主理想环,我们在之前已经证明过了当$f $不可约的时候,$F [ x ] / ( f ) $是一个域,令$E = F [ x ] / ( f ) $.回到我们一开始的目的.当$\deg f \geq 1 $,并且$f $在$F [ x ] $环上不可约的时候,若令$\alpha = x + ( f ) $,此时$\alpha $应作为一个$E $上的元素,注意到此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ^\tau ( x + ( f ) ) \\
& = \sum ( a _k + ( f ) ) ( x + ( f ) ) ^k \\
& = \sum a _k x ^k + ( f ) \\
& = f + ( f ) & = 0 + ( f ) 
\end{aligned}</script><p>这意味着在$E [ X ] $上$f ^\tau $是一个可约的多项式,因为提供了其一个元素$\alpha \in E $作为其的一个零点.</p>
<p>从上面的过程来看,我们理应可以通过若干次扩张使得一个$f $在某个$E _r [ X ] $上是分裂的,其中$r \leq \deg f $,也即每一次扩域次数都至少降低$1 $.</p>
<p>我们应当思考这个域扩大了多少,见到如果$\deg f = n $,我们一开始已经声明过此时选取基的大小,自然得到$[ E _r : F ] = [ E _r : E _{ r - 1  } ] \cdots [ E _1 : F ] \leq n ! $.</p>
<p>不过我们理应简单说明这样的构造是泛的,具体来讲,我们已经声明过我们需要构造一个交换环$L $并将$F $以环同态$\varphi : F \to L $的形式嵌入其中,并在环$L $中找到一个$\beta \in L $使得$f ^\varphi ( \beta ) = 0 $,那么此时应当存在一个唯一的环同态$\psi : E \to L $使得$\psi ( \alpha ) = \beta $,并且下面是一个交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { E \ar [r ] ^\psi & L \\
F \ar [u ] ^\tau \ar [ru ] _\varphi  }</script><p>考察商同态$\pi : F [ x ] \to E = F [ x ] / ( f ) $,将此关系嵌入上述图表应当得到上述图表交换的等价条件是下述图表交换:</p>
<script type="math/tex; mode=display">
\xymatrix { F [ x ] \ar [r ] ^\pi & E \ar [r ] ^\psi & L \\
& F \ar [ul ] \ar [u ] ^\tau \ar [ru ] _\varphi  }</script><p>直接令$\Psi = \psi \pi $,上图可以简化为:</p>
<script type="math/tex; mode=display">
\xymatrix { F [ x ] \ar [rr ] ^\Psi & & L \\
& F \ar [ul ] \ar [ru ] _\varphi  }</script><p>现在观察此结构,若我们一开始的假设成立,此图表的确交换并且满足求值同态$\Psi ( x ) = \psi ( \pi ( x ) ) = \psi ( \alpha ) = \beta $,那么对于一般的多项式$g = \sum b _k x ^k $,立刻得到$\Psi ( g ) = \sum \varphi ( b _k ) \beta ^n = g ^\varphi ( \beta ) $,这立刻得到了$\Psi $的唯一性,而直接使用此同态容易证明其存在性.</p>
<p>这个交换图表有什么用呢?来看其在复数上的表现情况.取$F = \mathbb { R  } $并且$f = x ^2 + 1 $,此时$- 1 $自然出现了平方根$\alpha = x + ( x ^2 + 1 ) $.此时在上述图表中只需简单规定$i $具体的正负取值立刻得到一个$\mathbb { R  } [ x ] / ( x ^2 + 1 ) \cong \mathbb { C  } $的同构.</p>
<h4><span id="对称多项式">对称多项式</span></h4><p>将置换的定义,挪到多元多项式环上,具体而言,$\sigma f ( x _1 , \cdots , x _n ) = f ( x _{ \sigma ( 1 )  } , \cdots , x _{ \sigma ( n )  } ) $.</p>
<p>那么,如果带$n $个变元的多项式$f $其对任意置换都不变,换言之$\forall \sigma , \sigma f = f $,则称其是一个<strong>对称多项式</strong>.</p>
<p>我们记$F [ x _1 , \cdots , x _n ] ^S $为所有在域$F $上定义的$n $个变元的对称多项式组成的集合,其当然是$F [ x _1 , \cdots , x _n ] $上的一个子环,因为如果$f , g $对称,那么$fg $和$\alpha f + \beta g $亦然.从这里也可以见到其还是一个线性空间.</p>
<p>接下来定义$e _k = \sum _{ 1 \leq i _1 &lt; \cdots &lt; i _k \leq n  } x _{ i _1  } \cdots x _{ i _k  } $为第$k $个<strong>初等对称多项式</strong>,例如$e _n = x _1 \cdots x _n , e _1 = x _1 + \cdots + x _n $.并且还见到<strong>Vieta公式</strong>:$\prod _{ k = 1  } ^n ( y + x _k ) = \sum _{ k = 0  } ^n e _k y ^{ n - k  } $或写作$\prod _{ k = 1  } ^n ( y - x _k ) = \sum _{ k = 0  } ^n ( - 1 ) ^k e _k y ^{ n - k  } $</p>
<p>接下来我们要证明<strong>对称多项式基本定理</strong>,$\forall f \in F [ x _1 , \cdots , x _n ] ^S , \exists g \in F [ x _1 , \cdots , x _n ] , f = g ( e _1 , \cdots , e _n ) $.</p>
<p>接下来我们定义$f _d = \sum _{ i _1 + \cdots + i _n = d  } c _{ i _1 , \cdots , i _n  } x _1 ^{ i _1  } \cdots x _n ^{ i _n  } $为$d $<strong>齐次多项式</strong>,容易见到任何一个多项式都可以写成若干齐次多项式之和.定义$\deg f $为它分解出来的最大的可能非零齐次多项式的次数.</p>
<p>接下来我们证明一个引理:对于$f \in F [ x _1 , \cdots , x _n ] ^S $,则$f ( x _1 , \cdots , x _{ n - 1  } , 0 ) = 0 $的充分必要条件是$e _n | f $.</p>
<p>充分性显然,因为$x _n | e _n $.</p>
<p>必要性的话,如若$f ( x _1 , \cdots , x _{ n - 1  } , 0 ) = \sum _{ i _n = 0  } c _{ i _1 , \cdots , i _n  } x _1 ^{ i _1  } \cdots x _{ n - 1  } ^{ i _{ n - 1  }  } = 0 $,这也就意味着$c _{ i _1 , \cdots , i _n  } \ne 0 \Rightarrow i _n \geq 1 $,而由于对称,意味着$c _{ i _1 , \cdots , i _n  } \ne 0 \Rightarrow i _k \geq 1 $,这就说明了$e _n | f $.</p>
<p>对$n $元对称多项式$h $,记$h ^b = h ( x _1 , \cdots , x _{ n - 1  } , 0 ) $,观察到$h ^b $当然是$n - 1 $次多项式,而且$e _1 ^b , \cdots , e _{ n - 1  } ^b $正好是第$1 , \cdots , n - 1 $个初等$n - 1 $元对称多项式.</p>
<p>继续考虑证明对称多项式基本定理,首先对于$f = \sum f _d $来说,$f $是对称的当然等价于每一个$f _d $都是对称的,所以我们下面不妨假设$f = f _d $.</p>
<p>对于一个$g \in F [ x _1 , \cdots , x _n ] $,定义其权重为$wt ( g ) = \begin{cases}\max \{ \sum _{ k = 1  } ^n k i _k \mid c _{ i _1 , \cdots , i _n  } \ne 0 \} &amp; g \ne 0 \ - \infty &amp; g = 0 \end{cases} $.</p>
<p>容易见到$\deg g ( e _1 , \cdots , e _n ) \leq wt ( g ) $,这恰也是我们如此定义权重的原因.</p>
<p>下面我们证明:如果$f $是$d $次齐次的,则断言中的$g $不仅存在还能取到$wt ( g ) \leq d $.下面我们对$n + d $递归地论证.</p>
<p>当$d = 0 , f \in F $当然是平凡的,下面设$d \geq 1 $.由于数学归纳,我们知道$f ^b $的元数量减少了$1 $.</p>
<p>当$f ^b \ne 0 $时,那么如果$f $是$d $齐次的,容易见到$f ^b $也该是$d $齐次的,那此时数学归纳给出存在$g _1 \in F [ x _1 , \cdots , x _{ n - 1  } ] $使得$f ^b = g _1 ( e _1 ^b , \cdots , e _{ n - 1  } ^b ) $,而且$\deg g _1 ( e _1 , \cdots , e _{ n - 1  } ) \leq wt ( g _1 ) \leq d $.</p>
<p>此时设$f _1 = f - g _1 ( e _1 , \cdots , e _{ n - 1  } ) $,立刻见到$f _1 ^b = 0 $,那么$e _n | f _1 $,取$f _2 = \frac { f _1  } { e _n  } $,这里就可以看到如若$f ^b = 0 $,这里直接取$f _1 = f , g _1 = 0 $即可.所以上述讨论在这一步就消掉了.</p>
<p>于是,这里的$f _2 $当然也是对称多项式,并且$\deg f _2 \leq d - n $,那将其分解为齐次部分的和,运用递归假设知道存在$f _2 = g _2 ( e _1 , \cdots , e _n ) , wt ( g _2 ) \leq d - n $.此时:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f & = f _1 + g _1 ( e _1 , \cdots , e _{ n - 1  } ) \\
& = e _n g _2 ( e _1 , \cdots , e _n ) + g _1 ( e _1 , \cdots , e _{ n - 1  } ) 
\end{aligned}</script><p>这就搞定了.</p>
<p>另一个问题是,上述算法只搞定了$f = g ( e _1 , \cdots , e _n ) $的存在性,它是否有唯一性呢?如若有$g ( e _1 , \cdots , e _n ) = h ( e _1 , \cdots , e _n ) $,则$( g - h ) ( e _1 , \cdots , e _n ) = 0 $.我们应当证明以下定理,称为$e _1 , \cdots , e _n $的<strong>代数无关性</strong>:</p>
<p>若$g \in F [ x _1 , \cdots , x _n ] $满足$g ( e _1 , \cdots , e _n ) = 0 $,则$g = 0 $.</p>
<p>考虑证明其逆否命题,也就是$g \ne 0 $的话就一定有$g ( e _1 , \cdots , e _n ) \ne 0 $.</p>
<p>首要的观察是先扩域,如果这个定义在更大的域上满足,在更小的域上当然也满足.因此可以先一步将$F $扩到一个无穷域上,例如直接将其扩到有理分式域$F ( t ) $上.下面假设$F $是无穷域.则此时对于任意有限次数非零多项式$g = 0 $,一定存在一组$( y _1 , \cdots , y _n ) $使得$g ( y _1 , \cdots , y _n ) \ne 0 $,这是因为可以数学归纳,当$n = 1 $的时候,其最多只有$\deg g $个根但是$F $无限,因此肯定存在.当$n &gt; 1 $的时候,直接取$g = \sum g _k x _n ^k $,那么由归纳假设一定存在一组$( y _1 , \cdots y _{ n - 1  } ) $使得至少有一个$g _k \ne 0 $,此时再由$n = 1 $的结论就可以知道原命题成立.</p>
<p>接下来考虑$p = \sum _{ k = 0  } ^n x ^{ n - k  } ( - 1 ) ^k y _k $,回忆到可以扩域使得该多项式分裂,假设分裂成了$p = \prod _{ k = 1  } ^n ( x - x _i ) $,此时由于Vieta公式,$p = \sum _{ k = 0  } ^n ( - 1 ) ^k e _k ( x _1 , \cdots , x _n ) x ^{ n - k  } $,于是$e _k ( x _1 , \cdots , x _n ) = y _k $,这就导出了$g ( e _1 , \cdots , e _n ) = g ( y _1 , \cdots , y _n ) \ne 0 $.</p>
<p>容易见到上述论证不涉及域中的除法,所以上述结论对整环也是成立的.</p>
<h5><span id="牛顿公式">牛顿公式</span></h5><p>设$p _k = \sum _{ j = 1  } ^n x _j ^k $,这里的$p _0 $其实比较特殊,我们一般不去讨论$p _0 $.那么牛顿公式说:</p>
<ol>
<li><p>当$1 \leq k \leq n $的时候,$\sum _{ j = 0  } ^{ k - 1  } ( - 1 ) ^j e _j p _{ k - j  } = ( - 1 ) ^{ k - 1  } k e _k $.</p>
</li>
<li><p>当$k &gt; n $的时候,$\sum _{ j = 0  } ^n ( - 1 ) ^j e _j p _{ k - j  } = 0 $.</p>
</li>
</ol>
<p>牛顿公式的一个相当大的作用是可以用递归的方式用$\{ e _k \} $和$\{ p _k \} $相互表示.更进一步地,可以用$\{ e _k \} $的整系数多项式表示$\{ p _k \} $也可以用$\{ p _k \} $的有理系数多项式表示$\{ e _k \} $,当然对应的域要包含$\mathbb { Z  } $和$\mathbb { Q  } $.</p>
<p>如何证明上面那个结论?考虑以$y $为变元的形式幂级数,定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
P ( y ) & = \sum _{ k \geq 1  } p _k y ^{ k - 1  } \\
& = \sum _{ k \geq 1  } \sum _{ i = 1  } ^n x _i ^k y ^{ k - 1  } \\
& = \sum _{ i = 1  } ^n \frac { x _i  } { 1 - x _i y  } 
\end{aligned}</script><p>再定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( y ) & = \sum _{ k = 0  } ^n e _k y ^k \\
& = \prod _{ i = 1  } ^n ( 1 + x _i y ) 
\end{aligned}</script><p>接下来观察到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
P ( - y ) & = \sum _{ i = 1  } ^n \frac { x _i  } { 1 + x _i y  } \\
& = \frac { \mathrm { d  }  } { \mathrm { d  } y  } \ln E ( y ) \\
& = \frac { E ' ( y )  } { E ( y )  } 
\end{aligned}</script><p>接下来观察:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( y ) P ( - y ) & = E ' ( y ) \\
& = \sum _{ k = 1  } ^n k e _k y ^{ k - 1  } 
\end{aligned}</script><p>可是左边直接展开就有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
E ( y ) P ( - y ) & = ( \sum _{ l = 0  } ^n e _l ( - y ) ^l ) ( \sum _{ j \geq 1  } p _j y ^{ j - 1  } ) \\

\end{aligned}</script><p>两边提取$[ y ^{ k - 1  } ] $,就有:</p>
<script type="math/tex; mode=display">
\sum _{ l + j = k , 0 \leq l \leq n , j \geq 1  } e _l p _{ j  } ( - 1 ) ^{ j - 1  } = k e _k</script><p>两边倒腾一下正负号就是牛顿公式.</p>
<h4><span id="结式">结式</span></h4><p>让$F $是一个域并且$f , g \in F [ x ] $,我们想要检验它们是否互素.一个好的算法当然是辗转相除法,但我们更想去找一个精确的量来判定.例如矩阵的行列式可以用消元法求,然而我们也可以用代数余子式展开.</p>
<p>具体地,考虑$F [ x ] $的元素:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f & = v _0 x ^n + \cdots + v _n \\
g & = w _0 x ^m + \cdots + w _m 
\end{aligned}</script><p>注意这里并不要求$v _0 , w _0 \ne 0 $,结式并不在乎这个.</p>
<p>我们定义$f , g $的<strong>结式</strong>为:</p>
<script type="math/tex; mode=display">
Res ( f , g ) = \left | \begin{matrix}
v _0 & \cdots & \cdots & v _n & & \\
& \ddots & & & \ddots & \\
& & v _0 & \cdots & \cdots & v _n \\
w _0 & \cdots & \cdots & w _m & & \\
& \ddots & & & \ddots & \\
& & w _0 & \cdots & \cdots & w _m 
\end{matrix} \right |</script><p>其中上面那个平行四边形是$m $行的,下面那个是$n $行的.这样总共就是$( n + m ) \times ( n + m ) $的,该行列式的定义是有意义的.如若将系数$v _0 , \cdots , w _m $视作变量,容易见到上述行列式仍然是关于$v _0 , \cdots , w _m $的整系数$n + m + 2 $元多项式,且系数和$F $无关.</p>
<p>考虑下述性质:</p>
<ol>
<li><p>$[ v _0 ^m w _m ^n ] Res ( f , g ) = 1 $.</p>
</li>
<li><p>$Res ( g , f ) = ( - 1 ) ^{ nm  } Res ( f , g ) $.</p>
</li>
<li><p>$\forall t \in F , Res ( tf , g ) = t ^m Res ( f , g ) , Res ( f , tg ) = t ^n Res ( f , g ) $.</p>
</li>
</ol>
<p>考虑(1),应当见到第$m $行的那个$v _0 $恰好是第$m $列,所以上述行列式对角线恰好由$m $个$v _0 $和$n $个$w _m $构成,根据行列式最初始的那个排列定义,要凑出$v _0 ^m w _m ^n $就只能沿着对角线乘.</p>
<p>考虑(2),只需要交换行列即可对吧,每次把$v $那里的最后一行暴力换到最下面,这样就需要交换$nm $次.</p>
<p>(3)是显然的.</p>
<p>接下来证明一个引理:如果$Res ( f , g ) = 0 $,当且仅当$\exists f _1 , g _1 \in F [ x ] $满足$\deg f _1 &lt; n , \deg g _1 &lt; m $并且$f _1 $和$g _1 $不全为$0 $,使得$fg _1 + gf _1 = 0 $.</p>
<p>不妨展开$f _1 $和$g _1 $如下:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f _1 & = a _1 x ^{ n - 1  } + \cdots + a _n \\
g _1 & = b _1 x ^{ m - 1  } + \cdots + b _m 
\end{aligned}</script><p>如若设$H = fg _1 + gf _1 = 0 $,那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
[ x ^{ n + m - 1  } ] H & = b _1 v _0 + a _1 w _0 & = 0 \\
[ x ^{ n + m - 2  } ] H & = b _1 v _1 + b _2 v _0 + a _1 w _1 + a _2 w _0 & = 0 \\
\cdots \\
[ x ^{ 0  } ] H & = b _m v _n + a _n w _m & = 0 
\end{aligned}</script><p>如果假设$v _0 , \cdots , w _m $均是已知量而尝试求解$f _1 , g _1 $,自然拿到了一个大小为$n + m $的线性方程组,容易见到其系数矩阵为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
v _0 & & & w _0 & & \\
\vdots & \ddots & & \vdots & \ddots & \\
v _n & & v _0 & w _m & & w _0 \\
& \ddots & \vdots & & \ddots & \vdots \\
& & v _n & & & w _m 
\end{bmatrix}</script><p>(很遗憾这里把第$n + 1 $行和第$m + 1 $行画到一行了,然而是无奈之举,请读者自行在脑中错开一下位置)</p>
<p>线性方程组理论告诉我们这有一组非$0 $解当且仅当行列式为$0 $,然而这恰好是$Res ( f , g ) $的转置,而行列式转置不变,这就证毕.</p>
<p>下面我们证明,$Res ( f , g ) = 0 $当且仅当以下任何一个条件成立:</p>
<ol>
<li><p>$v _0 = w _0 = 0 $.</p>
</li>
<li><p>$\deg \gcd ( f , g ) &gt; 0 $.</p>
</li>
</ol>
<p>(1)是平凡的,只需观察上述行列式定义即可发现此时第一列全部为$0 $,那行列式当然为$0 $.</p>
<p>对于(2),先证必要性,考虑如果$\exists h , \deg h &gt; 0 $,$h | f , h | g $,那么注意到$\deg \frac { f  } { h  } &lt; n , \deg \frac { g  } { h  } &lt; m $而且由于$v _0 $和$w _0 $不全为$0 $,所以$\frac { f  } { h  } , \frac { g  } { h  } $不全为$0 $,而$f \frac { g  } { h  } - g \frac { f  } { h  } = 0 $,用引理得证$Res ( f , g ) = 0 $.</p>
<p>再证(2)的充分性.如若$f , g $其一为$0 $,不失一般性设$f = 0 $.如若此时$\deg g &gt; 0 $,则取$h = g $自然是公因式;如若$\deg g = 0 $,容易见到$w _0 = Res ( f , g ) = 0 $,这就是(1)的情况.</p>
<p>如若$f , g $都不是$0 $,而且$v _0 , w _0 $不全为$0 $,不妨设$w _0 \ne 0 $,既如此$g \ne 0 $,此时如若$Res ( f , g ) = 0 $,由引理拿到了$f _1 , g _1 $不全为$0 $并且使得$fg _1 + gf _1 = 0 $,其中$\deg g _1 &lt; m $.</p>
<p>直接把当前的多项式环$F [ x ] $扩到有理分式域$F ( x ) $,此时有$\frac { f  } { g  } g _1 = f _1 $,两边通分立刻见到,如果$\deg gcd ( f , g ) = 0 $,那么左边就是$f \frac { g _1  } { g  } $,这应该给出$g | g _1 $,然而$\deg g = m , \deg g _1 &lt; m $,不符.这就证毕.</p>
<p>最后,我们来讨论一下当$f , g $均是分裂的时候如何体现,不妨设$f = a \prod _{ k  } ^n ( x - \alpha _k ) , g = b \prod _{ k  } ^m ( x - \beta _k ) $,我们下面证明:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Res ( f , g ) & = a ^m \prod _k ^n g ( \alpha _k ) & = ( - 1 ) ^{ nm  } b ^n \prod _j ^m f ( \beta _j ) \\
& = a ^m b ^n \prod _{ k , j  } ( \alpha _k - \beta _j ) 
\end{aligned}</script><p>有一连串等式,其中中间两个是对称的$Res ( f , g ) $和$Res ( g , f ) $的形式,而最后一个等式只需带入就属显然.因此需要证明的只有第一个等式.</p>
<p>由于$Res ( tf , g ) = t ^m Res ( f , g ) $,所以不妨设$a = 1 $.</p>
<p>假设$g ( \alpha _1 ) , \cdots , g ( \alpha _n ) $两两相异,则引入一个新的变元$y $并在$F [ y ] $上考虑$Res ( f , g - y ) $,回看一开始的矩阵形状,对于$[ y ^n ] Res ( f , g - y ) $,见到其意味着下半部分的对角线被全部选择,上半部分选择的话如果非零当然也要选择对角线,所以$[ y ^n ] Res ( f , g - y ) = ( - 1 ) ^n $,而显然$[ y ^0 ] Res ( f , g - y ) = Res ( f , g ) $.既然如此,注意到$\alpha _k $是$f $和$g - g ( \alpha _k ) $的公共根,则$Res ( f , g - g ( \alpha _k ) ) = 0 $,从而$( g ( \alpha _k ) - y ) | Res ( f , g - y ) $,又由于$g ( \alpha _1 ) , \cdots , g ( \alpha _n ) $两两相异,$\prod _k ( g ( \alpha _k ) - y ) , Res ( f , g - y ) $的最高次系数都是$( - 1 ) ^n $,这立刻意味着它们相等,原命题自然成立.</p>
<p>然而既然如此,可以见到直接假设$\alpha _1 , \cdots , \alpha _n $并非常数而是若干个变元,具体而言用$z _1 , \cdots , z _n $代替它们,于是上述立刻有$g ( z _1 ) , \cdots , g ( z _n ) $两两相异,得到结论后带入$\alpha _1 , \cdots , \alpha _n $即可.</p>
<h4><span id="判别式">判别式</span></h4><p>对于一个多项式$f = \sum _k c _k ( - 1 ) ^{ k  } x ^{ n - k  } $,假设其可分裂而且$f = \prod _j ( x - \alpha _j ) $,我们称其判别式$disc ( f ) = \prod _{ i &lt; j  } ( \alpha _i - \alpha _j ) ^2 $如果我们将$\alpha _1 , \cdots , \alpha _n $看作变量,则我们注意到$disc ( f ) $是一个对称多项式,原因是$disc ( f ) = ( \prod _{ i &lt; j  } ( \alpha _i - \alpha _j ) ) ^2 $,而中间那个东西在重排后会差一个$\mathrm { { sgn  }  } ( \sigma ) $,这就证毕.</p>
<p>既然如此,$disc ( f ) $就可以拆成$e _1 , \cdots , e _n $这若干个对称多项式的多项式,然而注意到由于Vieta公式,$e _1 = c _1 , \cdots , e _n = c _n $.于是$disc ( f ) $当然是关于$c _1 , \cdots , c _n $的多项式.这里由于没有讨论具体的值,而只是把这些涉及到的值用变量来表示,所以你可以先一步把范围控制在整环$\mathbb { Z  } $上,见到$disc ( f ) $当然是关于$c _1 , \cdots , c _n $的整系数多项式.</p>
<p>例如当$n = 2 $的时候,$f ( x ) = x ^2 - bx + c = ( x - \alpha _1 ) ( x - \alpha _2 ) $,那么$disc ( f ) = ( \alpha _1 - \alpha _2 ) ^2 = ( \alpha _1 + \alpha _2 ) ^2 - 4 \alpha _1 \alpha _2 = b ^2 - 4 c $,这就是二次方程的判别式.</p>
<p>取$n = 3 $的时候,特别地取二次项为$0 $的情况,$f = x ^3 + px + q = ( x - \alpha _1 ) ( x - \alpha _2 ) ( x - \alpha _3 ) , \alpha _1 + \alpha _2 + \alpha _3 = 0 $,注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
disc ( f ) & = \left ( ( \alpha _1 - \alpha _2 ) ( \alpha _2 - \alpha _3 ) ( \alpha _1 - \alpha _3 ) \right ) ^2 \\
& = - 4 p ^3 - 27 q ^2 
\end{aligned}</script><p>而如果将判别式的定义推广到非首一的情形,也就是对于$f = a \prod _j ( x - \alpha _j ) $,我们称其判别式$disc ( f ) = a ^{ 2 n - 2  } \prod _{ i &lt; j  } ( \alpha _i - \alpha _j ) ^2 $,对$f $有形式导数$f ‘ $,我们下面证明:$a \cdot disc ( f ) = ( - 1 ) ^{ \frac { n ( n - 1 )  } { 2  }  } Res ( f , f ‘ ) $.</p>
<p>证明的话,用Leibniz法则,知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f ' & = a \sum _{ k = 1  } ^n \prod _{ j \ne k  } ( x - \alpha _j ) \\
f ' ( \alpha _k ) & = a \prod _{ j \ne k  } ( \alpha _k - \alpha _j ) 
\end{aligned}</script><p>因此:</p>
<script type="math/tex; mode=display">
\begin{aligned}
Res ( f , f ' ) & = a ^{ n - 1  } \prod _{ k = 1  } ^n f ' ( \alpha _k ) \\
& = a ^{ 2 n - 1  } \prod _{ k = 1  } ^n \prod _{ j \ne k  } ( \alpha _k - \alpha _j ) \\
& = a ^{ 2 n - 1  } ( - 1 ) ^{ \frac { n ( n - 1 )  } { 2  }  } \prod _{ i < j  } ( \alpha _i - \alpha _j ) ^2 
\end{aligned}</script><p>这就证毕.</p>
<p>顺便一提,将$f = a _0 x ^n + \cdots + a _n $,则$Res ( f , f ‘ ) $是$a _0 , \cdots , a _n $的整系数多项式,而其行列式首列能提出$a = a _0 $,因此$a ^{ - 1  } Res ( f , f ‘ ) $确实表作$a _0 , \cdots , a _n $的整系数多项式,这说明$disc ( f ) $在$f $非首一的时候定义确实合理.</p>
<h3><span id="域">域</span></h3><p>设$D $是含有至少两个元素的幺环,如果$D $的每个元素都可逆,则称$D $是一个<strong>体</strong>.有乘法交换律的体称为<strong>域</strong>.</p>
<h4><span id="分式域">分式域</span></h4><p>之前尝试使用过商集来用$\mathbb { Z  } $构造$\mathbb { Q  } $,我们同样可以用整环的商集来构造形如$\frac { f  } { g  } $的域,将其记作$\text { Frac  } ( R ) $,也就是<strong>分式域</strong>.</p>
<p>可以说明如果$\varphi : R \rightarrow R ‘ $并且$\varphi ( R \setminus \{ 0 \} ) \subseteq R ‘ ^{ \times  } $,又取一个$i : R \rightarrow \text { Frac  } R $,那么存在唯一一个映射$\Phi : \text { Frac  } R \rightarrow R ‘ $的映射.更具体来说,只需验证$\Phi ( \frac { f  } { g  } ) \equiv \varphi ( f ) \varphi ( g ) ^{ - 1  } $即可(当然需要检验良定义).</p>
<p>如果我们将一开始的映射改为$\varphi : R \hookrightarrow F $,其中$F $是一个域并且$\forall x \in F , \exists f , g \in R , x = \varphi ( f ) \varphi ( g ) ^{ - 1  } $,那我们可以证明$\text { Frac  } ( R ) \cong F $,过程太无聊,略过.</p>
<p>这说明分式域具有某种唯一性和泛性质.</p>
<p>一般把$\text { Frac  } ( R [ x ] ) $写作$R ( x ) $.</p>
<h4><span id="子域">子域</span></h4><p>由于子域的交还是子域,我们当然可以取所有子域的交得到一个子域$F _{ prime  } $,容易验证当$\text { char  } F _{ prime  } = 0 $的时候,$F _{ prime  } \cong \mathbb { Q  } $;当$p = \text { char  } F _{ prime  } \in prime $的时候,$F _{ prime  } \cong \mathbb { Z  } / \mathbb { Z  } _p $.</p>
<h2><span id="线性代数">线性代数</span></h2><h3><span id="矩阵引入">矩阵引入</span></h3><p>我们称有$m $行$n $列的<strong>矩阵</strong>为$A _{ m \times n  } $,其中第$i $行第$j $列的元素称作$a _{ i , j  } $,也有的称其为<strong>矩阵元</strong>.</p>
<p>也可以将其中中的列写作$F ^m $中列向量的形式,即写作$A _{ m \times n  } = \begin{bmatrix}\vec { a _1  } &amp; \vec { a _2  } &amp; . . . &amp; \vec { a _n  } \end{bmatrix} $.</p>
<p>若$n = m $,则称$A $为<strong>方阵</strong>.</p>
<h4><span id="矩阵运算">矩阵运算</span></h4><p>大小相同的矩阵本身应当是一个线性空间.事实上,我们可以定义:</p>
<ol>
<li><p><strong>矩阵加法</strong>:若矩阵$A $和$B $都是$m \times n $矩阵,则它们的和也是$m \times n $矩阵,且元素为$A $和$B $中对应元素的加和.显然有交换律.</p>
</li>
<li><p><strong>标量乘法</strong>:若$c $是标量而$A $是一个$m \times n $矩阵,则$cA $是一个$m \times n $矩阵,且元素为A中对应元素的$c $倍.显然有交换律以及对矩阵加法的分配律.</p>
</li>
</ol>
<p>事实上,我们还可以定义:</p>
<ol>
<li><strong>矩阵乘法</strong>:若$A $是$m \times n $矩阵,$B $是$n \times p $矩阵,那么它们的乘积$AB _{ i , j  } = \sum _{ k = 1  } ^n A _{ i , k  } B _{ k , j  } $.</li>
</ol>
<p>矩阵乘法也可以表示为:若$A $是$m \times n $矩阵,$B $是$n \times p $矩阵,且$B = \begin{bmatrix}\vec { b _1  } &amp; \vec { b _2  } &amp; . . . &amp; \vec { b _p  } \end{bmatrix} $那么它们的乘积$AB = \begin{bmatrix}A \vec { b _1  } &amp; A \vec { b _2  } &amp; . . . &amp; A \vec { b _p  } \end{bmatrix} $.</p>
<p>若$AB = BA $我们称$A $和$B $彼此<strong>可交换</strong>.</p>
<p>不难发现$\forall A _{ m \times n  } $,对于矩阵$I _{ n \times n  } = \begin{bmatrix}1 &amp; 0 &amp; . . . &amp; 0 \ 0 &amp; 1 &amp; . . . &amp; 0 \ . . . &amp; . . . &amp; . . . &amp; . . . \ 0 &amp; 0 &amp; . . . &amp; 1 \end{bmatrix} $有$AI = A $,我们称$I _{ n \times n  } $为<strong>单位矩阵</strong>.单位矩阵的第$i $列通常记作$\vec { e  } _i $.</p>
<p>定义<strong>乘幂</strong>$A ^k $为$k $个$A $连续相乘的乘积.</p>
<p>设$A $为$m \times n $矩阵,$B $和$C $的维数使下列各式的乘积有定义,c是标量,有:</p>
<ol>
<li><p>乘法结合律:$( AB ) C = A ( BC ) $.</p>
</li>
<li><p>乘法左分配律:$A ( B + C ) = AB + AC $.</p>
</li>
<li><p>乘法右分配律:$( B + C ) A = BA + CA $.</p>
</li>
<li><p>$c ( AB ) = ( cA ) B = A ( cB ) $.</p>
</li>
<li><p>乘法恒等式:$I _m A = A = AI _n $.</p>
</li>
</ol>
<p>注意到向量可以看为一个$n \times 1 $的矩阵,事实上,我们有:</p>
<p>若$A $是$m \times n $矩阵,它的各列为$\vec { a _1  } , \vec { a _2  } , . . . \vec { a _n  } $,而$\vec { u  } , \vec { v  } \in \mathbb { R  } ^n $,那么:</p>
<ol>
<li><p>$A ( \vec { u  } + \vec { v  } ) = A \vec { u  } + A \vec { v  } $.</p>
</li>
<li><p>$A ( c \vec { u  } ) = c ( A \vec { u  } ) $.</p>
</li>
</ol>
<p>定义<strong>矩阵转置</strong>:对于$m \times n $矩阵$A $,它的<strong>转置</strong>是一个$n \times m $矩阵,该矩阵的列是由$A $的对应行构成的,记作$A ^T $,即$A ^T _{ i , j  } = A _{ j , i  } $.有的时候也写作$^t A $.</p>
<p>设$A $和$B $的维数使下列各式的乘积有定义,c是标量,有:</p>
<ol>
<li><p>$( A ^T ) ^T = A $.</p>
</li>
<li><p>$( A + B ) ^T = A ^T + B ^T $.</p>
</li>
<li><p>$( rA ) ^T = rA ^T $.</p>
</li>
<li><p>$( AB ) ^T = B ^T A ^T $.</p>
</li>
</ol>
<h4><span id="分块矩阵">分块矩阵</span></h4><p>我们考虑将一个矩阵看作若干个子矩阵的拼接,类似于我们求逆矩阵时做的那样:将若干个矩阵拼接起来.</p>
<p>换句话说,我们尝试将矩阵看作元素放入矩阵中,并尝试根据基本的矩阵运算去做这种矩阵的运算.</p>
<p>分块矩阵的<strong>矩阵加法</strong>:若矩阵$A $和$B $维数相同且都以同样的方式分块,则矩阵的和$A + B $也以同样的方式分块且每一块都是$A $和$B $对应块的和.</p>
<p>分块矩阵的<strong>标量乘法</strong>:若$c $是一个常数,$A $是一个分块矩阵,则$cA $是$A $的子矩阵乘$c $再以同样的方式组合起来的结果.</p>
<p>分块矩阵的<strong>矩阵乘法</strong>:若矩阵$A $和$B $的维数使得$AB $有定义,并且$A $列的分法与$B $行的分法一致,那我们显然可以直接将矩阵作为元素来直接进行矩阵乘法.</p>
<p>由上面的讨论自然发现:</p>
<p>若$A $是$m \times n $矩阵,$B $是$n \times p $矩阵,我们定义$row _i ( A ) $为$A $的第$i $列,$col _i ( A ) $为$A $的第$i $行,则:</p>
<p>$AB = \begin{bmatrix}col _1 ( A ) &amp; col _2 ( A ) &amp; . . . &amp; col _n ( A ) \end{bmatrix} \begin{bmatrix}row _1 ( B ) \ row _2 ( B ) \ . . \ row _n ( B ) \end{bmatrix} $</p>
<p>证明是显然的.</p>
<h3><span id="线性方程组">线性方程组</span></h3><p>包含变量$x _1 , x _2 . . . , x _n $的<strong>线性方程</strong>是形如$a _1 x _2 + a _2 x _2 + . . . + a _n x _n = b $的方程,其中b与系数是实数或复数,通常是已知数.</p>
<p><strong>线性方程组</strong>是由一个或几个包含相同变量$x _1 , x _2 , . . . , x _n $的线性方程组成的.</p>
<p><strong>线性方程组的解</strong>是一组数$\{ s _1 , s _2 , . . . , s _n \} $,用这组数分别代替$x _1 , x _2 , . . . x _n $时所有方程的两边相等.</p>
<p>线性方程组所有可能的解的集合称为<strong>线性方程组的解集</strong>.</p>
<p>若两个线性方程组有相同的解集,则称这两个方程组是<strong>等价的</strong>.</p>
<p>我们称一个线性方程组是<strong>相容的</strong>,当且仅当它有一个解或无穷多个解,否则,称其为<strong>不相容的</strong>.</p>
<p>一个线性方程组要么无解,要么有一个解,要么有无穷多个解.</p>
<h4><span id="系数矩阵和增广矩阵">系数矩阵和增广矩阵</span></h4><p>考虑以下m个线性方程所组成的线性方程组:</p>
<script type="math/tex; mode=display">
\begin{cases}
a _{ 1 , 1  } x _1 + a _{ 1 , 2  } x _2 + . . . + a _{ 1 , n  } x _n = b _1 \\
a _{ 2 , 1  } x _1 + a _{ 2 , 2  } x _2 + . . . + a _{ 2 , n  } x _n = b _2 \\
. . . \\
a _{ m , 1  } x _1 + a _{ m , 2  } x _2 + . . . + a _{ m , n  } x _n = b _m 
\end{cases}</script><p>我们称它的<strong>系数矩阵</strong>为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
a _{ 1 , 1  } & a _{ 1 , 2  } & . . . & a _{ 1 , n  } \\
a _{ 2 , 1  } & a _{ 2 , 2  } & . . . & a _{ 2 , n  } \\
. . . & . . . & . . . & . . . \\
a _{ m , 1  } & a _{ m , 2  } & . . . & a _{ m , n  } 
\end{bmatrix}</script><p>两个系数矩阵是<strong>等价的</strong>当且仅当它们所对应的线性方程组是等价的.</p>
<p>而称它的<strong>增广矩阵</strong>为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
a _{ 1 , 1  } & a _{ 1 , 2  } & . . . & a _{ 1 , n  } & b _1 \\
a _{ 2 , 1  } & a _{ 2 , 2  } & . . . & a _{ 2 , n  } & b _2 \\
. . . & . . . & . . . & . . . & . . . \\
a _{ m , 1  } & a _{ m , 2  } & . . . & a _{ m , n  } & b _m 
\end{bmatrix}</script><p>两个增广矩阵是<strong>等价的</strong>当且仅当它们所对应的线性方程组是等价的.</p>
<h4><span id="矩阵的初等行变换">矩阵的初等行变换</span></h4><p>考虑如何解一个线性方程:根据我们已有的知识,等式可以任意两端加减相等的两项,也可以同时乘以一个不为0的数,同时等式的顺序并不重要.</p>
<p>我们用这一点来考虑如何解线性方程组.这里主要是考虑如何对线性方程组的增广矩阵进行变换.</p>
<p>由上面的知识,我们意识到对线性方程组的增广矩阵进行以下变换,是不会改变其解集的:</p>
<ol>
<li><p>(倍加变换)把某一行换成它本身与另一行的倍数的和,记作$R _i + kR _j \rightarrow R _i $.</p>
</li>
<li><p>(对换变换)把两行对换,记作$R _i \leftrightarrow R _j $.</p>
</li>
<li><p>(倍乘变换)把某一行的所有元素乘以同一个非零数$k $,记作$kR _i \rightarrow R _i , k \ne 0 $.</p>
</li>
</ol>
<p>以上三种变换称为<strong>矩阵的初等行变换</strong>,同理可以定义初等列变换.</p>
<p>由此可以发现,两个增广矩阵是等价的当且仅当其中一个增广矩阵可以通过若干次初等行变换变为另一个增广矩阵.</p>
<p>我们可以使用这些初等行变换来变换一个矩阵,使得它有一些特殊性质.</p>
<p>如果两个矩阵可以通过若干次初等行变换而转化,我们称二者<strong>行等价</strong>,不难证明行等价满足等价关系的三个性质(反身性,对称性,传递性).</p>
<p>由于简化行阶梯矩阵的唯一性,我们可以用其来判定行等价类.</p>
<h4><span id="阶梯形矩阵">阶梯形矩阵</span></h4><p>若矩阵的一行的元素全为0,称这一行为矩阵的一个<strong>零行</strong>,否则称为<strong>非零行</strong>.</p>
<p>非零行的最左边的非零元素称为该行的<strong>先导元素</strong>.</p>
<p>若一个矩阵有以下性质,则称它为<strong>阶梯形矩阵(REF)</strong>:</p>
<ol>
<li><p>每一个非零行都在零行之上</p>
</li>
<li><p>某一行的先导元素所在的列位于前一行先导元素的右边</p>
</li>
<li><p>某一先导元素所在列下方元素都是0</p>
</li>
</ol>
<p>若一个矩阵还满足以下性质,则称它为<strong>简化阶梯形(RREF)</strong>:</p>
<ol>
<li><p>每一非零行的先导元素是1</p>
</li>
<li><p>每一先导元素1是该元素所在列唯一的非零元素</p>
</li>
</ol>
<p>显然,任意一个矩阵都可以通过若干次初等行变换变为一个阶梯形矩阵或简化阶梯形矩阵.</p>
<p>一个矩阵所对应的阶梯形矩阵中先导元素的位置,被称为这个矩阵的一个<strong>主元位置</strong>,包含一个主元位置的列称为<strong>主元列</strong>.</p>
<p>注意:这里的位置是矩阵中的位置而非元素的位置,这也就是说主元位置上的元素可以不是最终的主元位置上的元素移动而来的.</p>
<h5><span id="简化阶梯形矩阵的唯一性">简化阶梯形矩阵的唯一性</span></h5><p>每个矩阵通过初等行变换只有可能对应唯一一个简化阶梯形矩阵.</p>
<p>证明:假设两个行等价的简化阶梯形矩阵不相等.那么我们找到它们的第一个不相等的列,设为$j $.</p>
<p>如果$A , B $中的$j $均为主元列,显然它们这一列必然相等,不符.</p>
<p>反之,我们不妨去掉第$j $列后面的所有列以及第$j $列前面的所有非主元列,保留第$j $列考虑剩下的两个矩阵一定也是行等价的,但它们对应的线性方程组的解显然不同,这导出了矛盾.</p>
<h4><span id="解线性方程组">解线性方程组</span></h4><p>考虑将线性方程组的增广矩阵通过初等行变换变换为一个简化阶梯形矩阵,我们称对应于主元列的变量为<strong>基本变量</strong>,其它变量称为<strong>自由变量</strong>.</p>
<p>如果线性方程组是相容的,显然我们可以使用自由变量表示基本变量,从而得到一组解.我们得到的基本变量的关于自由变量的表达式称作解集的<strong>参数表示</strong>.</p>
<p>这也意味着,如果没有自由变量,该方程组只有一解;如果有自由变量,由于自由变量取值任意,该方程组有无数组解.</p>
<p>而考虑何时线性方程组不相容,由于自由变脸取值任意,显然唯一的不相容可能性只是出现了$0 x _1 + 0 x _2 + . . . + 0 x _n = b , b \ne 0 $的情况.</p>
<p>以上的分析过程引出下面的定理.</p>
<h5><span id="存在与唯一性定理">存在与唯一性定理</span></h5><p>线性方程组相容的充要条件是增广矩阵的最右列不是主元列.</p>
<p>若线性方程组相容,则它的解集可能有两种情形:</p>
<ol>
<li><p>没有自由变量时,只有一个解.</p>
</li>
<li><p>有自由变量时,有无数个解.</p>
</li>
</ol>
<h4><span id="矩阵方程">矩阵方程</span></h4><p>设$A $是$m \times n $的矩阵,它的各列是$\vec { a _1  } , \vec { a _2  } , . . . , \vec { a _n  } $,若$\vec { x  } $是$F ^n $中向量,则$A \vec { x  } $即A的各列以$\vec { x  } $中对应元素为权的线性组合,也就是:</p>
<p>$A \vec { x  } = \begin{bmatrix}\vec { a _1  } &amp; \vec { a _2  } &amp; . . . &amp; \vec { a _n  } \end{bmatrix} \begin{bmatrix}x _1 \ x _2 \ . . . \ x _n \end{bmatrix} = x _1 \vec { a _1  } + x _2 \vec { a _2  } + . . . + x _n \vec { a _n  } $</p>
<p>如果令$\vec { b  } \in F ^m $,那么上式可以写成$A \vec { x  } = \vec { b  } $,我们把形如这样的方程称作矩阵方程.</p>
<p>不难发现,若$A $是$m \times n $矩阵,它的各列为$\vec { a _1  } , \vec { a _2  } , . . . \vec { a _n  } $,而$\vec { b  } \in F ^m , \vec { x  } \in F ^n $,那么:</p>
<p>矩阵方程$A \vec { x  } = \vec { b  } $,向量方程$x _1 \vec { a _1  } + x _2 \vec { a _2  } + . . . + x _n \vec { a _n  } = \vec { b  } $,增广矩阵为$\begin{bmatrix}\vec { a _1  } &amp; \vec { a _2  } &amp; . . . &amp; \vec { a _n  } &amp; \vec { b  } \end{bmatrix} $的线性方程组有相同的解集.</p>
<p>事实上,若$A $是$m \times n $矩阵,它的各列为$\vec { a _1  } , \vec { a _2  } , . . . \vec { a _n  } $,那么以下命题逻辑等价:</p>
<ol>
<li><p>$\forall \vec { b  } \in F ^m $,方程$A \vec { x  } = \vec { b  } $有解.</p>
</li>
<li><p>$\forall \vec { b  } \in F ^m $,$\vec { b  } $是$A $的列的一个线性组合.</p>
</li>
<li><p>$A $的各列生成$\mathbb { R  } ^m $.</p>
</li>
<li><p>$A $在每一行都有一个主元位置.</p>
</li>
</ol>
<h4><span id="齐次线性方程组">齐次线性方程组</span></h4><p>若一个线性方程组可以被写成$A \vec { x  } = \vec { 0  } $的形式,其中$A $是$m \times n $的矩阵,$\vec { x  } $是$\mathbb { R  } ^n $中的向量,称其为<strong>齐次线性方程组</strong>.</p>
<p>显然齐次线性方程组至少有一个解,即$\vec { x  } = \vec { 0  } $,这个解称作线性齐次方程组的<strong>平凡解</strong>.</p>
<p>而满足$\vec { x  } \ne \vec { 0  } $的解称作线性齐次方程组的<strong>非平凡解</strong>.</p>
<p>根据存在与唯一性定理,显然其存在非平凡解的充要条件是该方程至少有一个自由变量.</p>
<p>考虑自由变量的取值任意,而且基本变量一定是由若干个自由变量乘以定值之和得到的.</p>
<p>我们把这些定值看作向量,把自由向量看作权重,我们发现:齐次线性方程组的解集总可以表示为$\mathrm { Span  } \{ \vec { v _1  } , \vec { v _2  } , . . . , \vec { v _{ p  }  } \} $,当然,如果该方程组仅有平凡解,那表示为$\mathrm { Span  } \{ \vec { 0  } \} $.</p>
<p>把解表示为$\mathrm { Span  } \{ \vec { v _1  } , \vec { v _2  } , . . . , \vec { v _{ p  }  } \} $中元素的形式,称之为<strong>解的参数向量形式</strong>.</p>
<p>对于方程$A \vec { x  } = \vec { b  } $,它的解一定可以写成$\vec { x  } = \vec { p  } + \vec { x ‘  } $的形式,其中$\vec { x ‘  } $是方程$A \vec { x  } = \vec { 0  } $的一组解,$\vec { p  } $是方程$A \vec { x  } = \vec { b  } $的一组特解.</p>
<p>对于该定理的几何意义,我们考虑$\vec { x  } \in \mathbb { R  } ^2 $中,即$\vec { x  } = \vec { p  } + t \vec { u  } $,如果我们把它看为向量加法的形式,它的解集应该是在一条直线上的任意向量,这条直线即$\vec { u  } $所在直线沿向量$\vec { p  } $方向平移后的直线.</p>
<h3><span id="线性空间">线性空间</span></h3><p>我们可以在一个域$F $上定义一个<strong>线性空间</strong>(向量空间)$V $,除了域本身带有的性质(加法的结合律交换律,加法单位元,加法逆元,乘法对加法有分配律)它应当满足以下公理:</p>
<ol>
<li><p>定义向量加法$V \times V \rightarrow V $.向量加法应当有交换律和结合律.</p>
</li>
<li><p>定义标量乘法$F \times V \rightarrow V $.标量乘法应当有交换律,结合律以及对向量加法的分配律.</p>
</li>
<li><p>存在加法幺元以及加法逆元.</p>
</li>
</ol>
<p>由于$V $对加法构成群,相应的性质可以从群的性质搬过来.</p>
<p>值得一提的是,其实标量乘法如果定义成$V \times F \rightarrow V $后会有相当多的好处,但是由于历史原因一般还是定义左标量乘法.</p>
<p>当然容易验证我们平常用的线性空间$V = F ^n $满足以上性质.</p>
<p>当然容易验证定义在域上的多项式环满足以上性质.</p>
<h4><span id="相关运算">相关运算</span></h4><h5><span id="直积">直积</span></h5><p>定义$\prod _{ i \in I  } V _i = ( \vec { v  } _i ) _{ i \in I  } , \vec { v  } _i \in V _i $为直积,容易发现线性空间的直积也是线性空间.</p>
<h5><span id="直和">直和</span></h5><p>我们如果取直积的一个子空间,使得至多只有有限个$i \in I $使得$\vec { v  } _i \ne 0 $,则称这是一个直和.</p>
<h5><span id="叉乘">叉乘</span></h5><p>对$\mathbb { R  } ^3 $,定义新的向量运算:向量积(叉乘)$\vec { a  } \times \vec { b  } $, 其运算结果仍为向量,设为$\vec { c  } $,它的模定义为$\vec { a  } \times \vec { b  } = | \vec { a  } | | \vec { b  } | \sin \theta $,其中$\theta $为向量$\vec { a  } , \vec { b  } $的夹角,$| \vec { c  } | $为以$a , b $为两边的平行四边形的面积,$\vec { c  } $的方向定义为与$\vec { a  } , \vec { b  } $所形成的平面垂直,且$\vec { a  } , \vec { b  } , \vec { c  } $构成右手螺旋定则(即现将四指指向$\vec { a  } $方向再将四指弯曲指向$\vec { b  } $的方向,则此时大拇指的方向为$\vec { c  } $的方向),</p>
<p>向量叉乘满足以下性质:</p>
<ol>
<li><p>$\vec { a  } \times \vec { b  } = - \vec { b  } \times \vec { a  } $.</p>
</li>
<li><p>$\vec { a  } \times \vec { a  } = \vec { 0  } $</p>
</li>
<li><p>$\vec { a  } \times ( \vec { b  } + \vec { c  } ) = \vec { a  } \times \vec { b  } + \vec { a  } \times \vec { c  } $.</p>
</li>
</ol>
<p>在三维坐标系中,设:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\vec { a  } & = a _1 \vec { i  } + b _1 \vec { j  } + c _1 \vec { k  } \\
\vec { b  } & = a _2 \vec { i  } + b _2 \vec { j  } + c _2 \vec { k  } 
\end{aligned}</script><p>由叉乘定义,得到:$\vec { c  } = ( a _y b _z - a _z b _y ) \vec { i  } + ( a _z b _x - a _x b _z ) \vec { j  } + ( a _x b _y - a _y b _x ) \vec { k  } $.也就是:</p>
<script type="math/tex; mode=display">
\vec { c  } = \vec { a  } \times \vec { b  } = \left | \begin{matrix}
\vec { i  } & \vec { j  } & \vec { k  } \\
a _x & a _y & a _z \\
b _x & b _y & b _z 
\end{matrix} \right |</script><p>对于任意一个面的法向量，我们总可以选取该面上的两个不共线向量来直接叉乘出来.</p>
<h4><span id="线性无关与线性相关">线性无关与线性相关</span></h4><p>称$V $中一组向量$\{ \vec { v _1  } , \vec { v _2  } , . . . , \vec { v _p  } \} $是<strong>线性无关</strong>的,当且仅当向量方程$x _1 \vec { v _1  } + x _2 \vec { v _2  } + . . . + x _p \vec { v _p  } = \vec { 0  } $仅有平凡解.</p>
<p>反之,称为<strong>线性相关</strong>,即存在一组不全为0的数$c _1 , c _2 , . . . , c _p $使$c _1 \vec { v _1  } + c _2 \vec { v _2  } + . . . + c _p \vec { v _p  } = \vec { 0  } $,这个式子也被称为$\{ \vec { v _1  } , \vec { v _2  } , . . . , \vec { v _p  } \} $之间的<strong>线性相关关系</strong>.</p>
<p>容易发现,两个或更多向量的集合$S = \{ \vec { v _1  } , \vec { v _2  } , . . . , \vec { v _p  } \} $线性相关,当且仅当其中至少有一个向量是其它向量的线性组合.</p>
<h4><span id="子空间">子空间</span></h4><p>我们定义$V $的一个<strong>子空间</strong>是它的一个非空子集$V _0 $,具有以下三个性质:</p>
<ol>
<li><p>$\vec { 0  } \in V _0 $.</p>
</li>
<li><p>$\forall \vec { u  } , \vec { v  } \in V _0 , \vec { u  } + \vec { v  } \in V _0 $.</p>
</li>
<li><p>$\forall \vec { u  } \in V _0 , c \in F , c \vec { u  } \in V _0 $.</p>
</li>
</ol>
<p>线性空间的两个平凡子空间当然是零空间和它本身.</p>
<p>容易验证两个子空间的交仍然是子空间.</p>
<h5><span id="向量的线性组合">向量的线性组合</span></h5><p>给定$V $中向量$\vec { v  } _1 , \vec { v  } _2 , . . . , \vec { v  } _p $和标量$c _1 , c _2 , . . . , c _p \in F $.</p>
<p>我们称向量$\overrightarrow { y  } = c _1 \overrightarrow { v _1  } + c _2 \overrightarrow { v _2  } + . . . + c _p \overrightarrow { v _p  } $为向量$\overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } $以$c _1 , c _2 , . . . , c _p $为权的<strong>线性组合</strong>.</p>
<p>对于向量$\overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } $,我们称它们的所有线性组合所成的集合为$\mathrm { Span  } \{ \overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } \} $,也称为由$\overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } $所<strong>生成</strong>的$V $的子集,有时也记作$\langle \vec { v  } _1 , \vec { v  } _2 , \cdots , \vec { v  } _p \rangle $.</p>
<p>不难发现,$\mathrm { Span  } $集合是$V $的一个子空间,而且容易证明其是包含$\{ \vec { v  } _1 , \vec { v  } _2 , \cdots , \vec { v  } _p \} $的最小的子空间,所以我们又称其为由$\overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } $所<strong>生成</strong>的子空间.</p>
<p>可以考虑一些特殊线性空间上$\mathrm { Span  } $的几何意义:</p>
<p>对于$\mathbb { R  } ^2 $,当$\vec { v _1  } $和$\vec { v _2  } $不在一条直线上的时候,$\mathrm { Span  } \{ \vec { v _1  } , \vec { v _2  } \} $显然对应了整个平面.</p>
<p>对于$\mathbb { R  } ^3 $,当$\vec { v _1  } $和$\vec { v _2  } $不在一条直线上的时候,$\mathrm { Span  } \{ \vec { v _1  } , \vec { v _2  } \} $显然对应了三维空间中的一个过$\vec { v _1  } , \vec { v _2  } $这两条直线的平面.</p>
<p>要判断$\overrightarrow { b  } $是否在$\mathrm { Span  } \{ \overrightarrow { v _1  } , \overrightarrow { v _2  } , . . . , \overrightarrow { v _p  } \} $中，即判断向量方程$x _1 \overrightarrow { v _1  } + x _2 \overrightarrow { v _2  } + . . . + x _p \overrightarrow { v _p  } = \overrightarrow { b  } $是否有解.</p>
<h5><span id="线性映射">线性映射</span></h5><p>映射$T : V \rightarrow W $是线性的,当且仅当它满足以下两个条件:</p>
<ol>
<li><p>对$T $的定义域中一切的向量$\vec { u  } , \vec { v  } $,满足$T ( \vec { u  } + \vec { v  } ) = T ( \vec { u  } ) + T ( \vec { v  } ) $.</p>
</li>
<li><p>对$T $的定义域中一切的向量$\vec { u  } $和数$c $,满足$T ( c \vec { u  } ) = cT ( \vec { u  } ) $.</p>
</li>
</ol>
<p>线性映射有以下性质:</p>
<ol>
<li><p>$T ( \vec { 0  } ) = \vec { 0  } $.</p>
</li>
<li><p>(叠加原理):$T ( c _1 \vec { v  } _1 + c _2 \vec { v  } _2 + . . . + c _p \vec { v  } _p ) = c _1 T ( \vec { v  } _1 ) + c _2 T ( \vec { v  } _2 ) + . . . + c _p T ( \vec { v  } _p ) $.</p>
</li>
</ol>
<p>称线性映射$T : V \rightarrow W $是<strong>可逆的</strong>或者<strong>同构的</strong>,当且仅当存在$T ^{ - 1  } : W \rightarrow V $.</p>
<p>我们可以验证$T ^{ - 1  } $也是线性映射,原因在于此时$T $是双射:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ^{ - 1  } ( \vec { w  } + \vec { w  } ' ) & = T ^{ - 1  } ( \vec { w  } ) + T ^{ - 1  } ( \vec { w  } ' ) \\
\Leftrightarrow \\
T ( T ^{ - 1  } ( \vec { w  } + \vec { w  } ' ) ) & = T ( T ^{ - 1  } ( \vec { w  } ) + T ^{ - 1  } ( \vec { w  } ' ) ) 
\end{aligned}</script><p>而且:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ^{ - 1  } ( t \vec { w  } ) & = tT ^{ - 1  } ( \vec { w  } ) \\
\Leftrightarrow \\
T ( T ^{ - 1  } ( t \vec { w  } ) ) & = T ( tT ^{ - 1  } ( \vec { w  } ) ) 
\end{aligned}</script><p>我们记$\text { Hom  } ( V , W ) $为所有的$V \rightarrow W $,并且其中的$V , W $都是定义在$F $上的线性空间的线性映射组成的集合.容易验证$\text { Hom  } ( V , W ) $构成$F $上的线性空间.特别地,定义$\text { End  } ( V ) = \text { Hom  } ( V , V ) $,容易发现$\text { End  } ( V ) $是对复合和加法操作一个环.</p>
<p>特别地,定义矩阵映射$T : F ^n \rightarrow F ^m $为$T ( \vec { x  } ) = A \vec { x  } $,其中$A $是一个$m \times n $的矩阵.矩阵映射显然是线性映射.</p>
<h5><span id="基和维数">基和维数</span></h5><p>$V $中子空间$H $的一组<strong>基</strong>是$H $中一个线性无关集,它生成$H $.</p>
<p>事实上,以下命题等价:</p>
<ol>
<li><p>$S $是$V $的一组基.</p>
</li>
<li><p>$S $是极小的能生成$V $的集合(不存在其的一个真子集能生成$V $).</p>
</li>
<li><p>$S $是极大的$V $中的线性无关集(不存在其的一个真张集线性无关).</p>
</li>
</ol>
<p>证明上列命题等价是容易的.</p>
<p>对于$F ^n $来说,其的基有更好的性质,我们称$\{ \vec { e  } _1 , . . . , \vec { e  } _n \} , \vec { e  } _i = \{ 0 , 0 , \cdots , 0 , 1 , 0 , \cdots \} $为$F ^n $的<strong>标准基</strong>.</p>
<p>对于$n \times m $的矩阵组成的线性空间,其当然也有一组标准基$\{ \vec { e  } _{ i , j  } \} $.</p>
<p>有如下结论:</p>
<ol>
<li><p>(承认选择公理)对于任何一个线性无关的子集$S $,存在一个基$\mathcal { B  } $使得$S \subseteq \mathcal { B  } $.特别地,取$S = \emptyset $可以说明任何一个线性空间总是有基.</p>
</li>
<li><p>(有限生成的情况)如果一个线性空间的子集$S $满足$| S | &gt; | \mathcal { B  } | $,其中$\mathcal { B  } $是一组有限大小的基,那么$S $线性相关.</p>
</li>
<li><p>如果一个线性空间有两组基$\mathcal { B _1  } , \mathcal { B _2  } $,那么$| \mathcal { B _1  } | = | \mathcal { B _2  } | $.</p>
</li>
</ol>
<p>现在考虑(1)的证明,拿出所有的线性无关的$T \supseteq S $并组成一个集合,用包含关系作为偏序关系,如果能证明其满足Zorn引理的条件,那当然可以取出一个极大的线性无关集合,这当然是一组基.为此我们取出一条链并且将上面的所有集合并起来得到一个集合$T ‘ $.此时就可以看出我们之前(几乎一笔略过的)要求从基扩张的时候只需要有限个元素的作用,它可以立刻断言$T ‘ $是一个线性无关集合.</p>
<p>(2)的证明是容易的,不妨设$n = | \mathcal { B  } | , m = | S | $,由于$m &gt; n $,这当然是一个$m $个变量的大小为$n $的方程组,当然存在不全为$0 $的解.</p>
<p>(3)的定义较为复杂,略过.</p>
<p>在上述定理的基础上,我们可以定义非零向量空间$V $的<strong>维数</strong>,记作$\dim V = | \mathcal { B  } | $,零子空间$\{ \vec { 0  } \} $的维数定义为$0 $.</p>
<p>一般而言,我们大部分情况下都只讨论有限生成的情况.</p>
<p>有限生成的情况,我们还有以下若干条定理:</p>
<ol>
<li>(基定理)设$H $是$V $的$p $维子空间,$H $中任何恰好由$p $个元素组成的线性无关集构成$H $的一个基.</li>
</ol>
<p>这当然是自然的,根据上面的推导,这个线性无关集合就是极大的线性无关集合.</p>
<ol>
<li>如果线性空间的子空间$V _0 \subseteq V $,那么$\dim V _0 \leq \dim V $.特别地,$V _0 = V \Leftrightarrow \dim V _0 = \dim V $.</li>
</ol>
<p>只需要继续在$V _0 $里面取基就可以了.</p>
<ol>
<li>$V $定义在域$F $上,如果$\dim V = n $,那么$V \cong F ^n $.</li>
</ol>
<p>考虑$F ^n $的一组标准基$\vec { e _1  } , \cdots \vec { e  } _n $,然后我们取出$V $的一组有序基$B = \{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $,然后把$T : F ^n \rightarrow V , \sum k _i \vec { e  } _i \mapsto \sum k _i \vec { v  } _i $.接下要当然要验证良定义和双射,通过基的定义是显然的.</p>
<p>这可以引出所谓坐标表示,即:设$\mathcal { B  } = \{ \vec { b  } _1 , . . . , \vec { b  } _n \} $是$V $的一个基,则$\forall \vec { x  } \in V $,$\exists $唯一的一组$\{ c _1 , . . . , c _n \} $满足$\vec { x  } = c _1 \vec { b  } _1 + . . . + c _n \vec { b  } _n $.我们称$\begin{bmatrix}c _1 \ \vdots \ c _n \end{bmatrix} $是$\vec { x  } $的$\mathcal { B  } - $坐标向量,记作$[ x ] _{ \mathcal { B  }  } $,映射$x \mapsto [ x ] _{ \mathcal { B  }  } $称为由$\mathcal { B  } $确定的<strong>坐标映射</strong>.</p>
<p>事实上,如果我们记$P _{ \mathcal { B  }  } = \begin{bmatrix}\vec { b  } _1 &amp; \vec { b  } _2 &amp; \cdots &amp; \vec { b  } _n \end{bmatrix} $,则我们有$\vec { x  } = P _{ \mathcal { B  }  } [ x ] _{ \mathcal { B  }  } $.我们称$P _{ \mathcal { B  }  } $为$\mathcal { B  } $的坐标变换矩阵.</p>
<ol>
<li>线性映射由它在基上的作用完全确定.</li>
</ol>
<p>原因是考虑$V $的一组基$B = \{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $,那么$T ( \sum k _i \vec { v  } _i ) = \sum k _i T ( \vec { v  } _i ) $.</p>
<ol>
<li>$\text { Hom  } ( V , W ) \cong W ^n $,其中$\dim V = n $.</li>
</ol>
<p>由(7),我们知道如果选定了$C = \{ \vec { w  } _1 , \cdots \vec { w  } _n \} $,则只需要考虑在基上的具体变换即可.</p>
<ol>
<li>(线性映射同构于矩阵映射)如果$V , W $都是定义在$F $上的线性空间,$\dim V = n , \dim W = m $,那么$\text { Hom  } ( V , W ) \cong W ^n \cong F ^{ m \times n  } $.更一般地,如果$V $的基的指标集是$J $,$W $的基的指标集是$I $.那么$\text { Hom  } ( V , W ) \cong F ^{ I \times J  } $.另外地,$\dim \text { Hom  } ( V , W ) = mn $.特殊地,$\text { End  } ( V ) \cong F ^{ n \times n  } $.</li>
</ol>
<p>由(6)(8)显然.</p>
<p>现在我们就可以拿出矩阵了,我们在$F $上定义$m \times n $的矩阵$M $,于是$\mathcal { M  } = \text { Hom  } ( V , W ) \cong M _{ m \times n  } $.</p>
<p>简单来说,如果$B = \{ \vec { v  } _1 , \cdots \vec { v  } _n \} $是$V $的一组基,$C = \{ \vec { w  } _1 , \cdots \vec { w  } _m \} $是$W $的一组基,我们事实上是把$\vec { v  } _j \mapsto \sum a _{ i , j  } \vec { w  } _i $.</p>
<ol>
<li>线性映射的复合同构于矩阵乘法.</li>
</ol>
<p>只需操演定义即可发现.</p>
<ol>
<li>如果$F $是$E $的子域,那么$E $是在$F $上的向量空间.同样,如果$V $是$E $的向量空间,那么$V $是$F $的向量空间.</li>
</ol>
<p>定义的简单操演.</p>
<ol>
<li>如果$V $是$E $的向量空间,基为$B $,$E $是$F $的向量空间,基为$C $.那么$V $是$F $的向量空间,而且基是$CB $.作为其的一个推论,如果我们定义$[ V : E ] = \dim _E V $,即在$E $上的$V $的维数.我们应当能见到$[ V : F ] = [ V : E ] [ E : F ] $.</li>
</ol>
<p>定义的简单操演.可以将这里理解为$[ V : F ] = \log _F V $这个样子.</p>
<h4><span id="可逆矩阵">可逆矩阵</span></h4><p>称一个$n \times n $的矩阵$A $是<strong>可逆的</strong>,当且仅当$\exists C _{ n \times n  } $满足$CA = AC = I _{ n  } $,我们记$C = A ^{ - 1  } $.其实也就是$F _{ n \times n  } $这个环上的可逆元.这当然意味着其对应的线性映射是可逆的,也就是其代表的线性映射是同构.</p>
<p>不可逆矩阵又被称为<strong>奇异矩阵</strong>.</p>
<p>事实上$m \times n $的矩阵$A $在$m \ne n $的时候当然是不可逆的,因为其代表的线性映射不可能是同构(不然两边的$\dim $应当相等,应当有$m = n $).</p>
<p>可逆矩阵有以下简单性质:</p>
<ol>
<li><p>若$A $是可逆方阵,则$A ^{ - 1  } $也可逆且$( A ^{ - 1  } ) ^{ - 1  } = A $.</p>
</li>
<li><p>若$A $和$B $都是可逆方阵,则$AB $也可逆且$( AB ) ^{ - 1  } = B ^{ - 1  } A ^{ - 1  } $.</p>
</li>
</ol>
<h5><span id="初等矩阵">初等矩阵</span></h5><p>将单位矩阵经过一次初等行变换得到的矩阵称作<strong>初等矩阵</strong>.</p>
<p>对任意$m \times n $矩阵进行初等行变换一定等价于将其左乘一个初等矩阵,原因在于只需要对单位矩阵验证以下性质即可.</p>
<ol>
<li>倍加变换:$R _i + kR _j \rightarrow R _i , i \ne j $:</li>
</ol>
<script type="math/tex; mode=display">
\begin{aligned}
E _{ x , y  } & = \begin{cases}
k & x = i , y = j \\
1 & x = y \\
0 & \text { Otherwise  } 
\end{cases} \\

\end{aligned}</script><ol>
<li>对换变换:$R _i \leftrightarrow R _j $:</li>
</ol>
<script type="math/tex; mode=display">
\begin{aligned}
E _{ x , y  } & = \begin{cases}
1 & x = i , y = j \\
1 & x = j , y = i \\
1 & x = y , x \ne i , x \ne j \\
0 & \text { Otherwise  } 
\end{cases} \\

\end{aligned}</script><ol>
<li>倍乘变换:$kR _i \rightarrow R _i , k \ne 0 $:</li>
</ol>
<script type="math/tex; mode=display">
\begin{aligned}
E _{ x , y  } & = \begin{cases}
k & x = y , x = i \\
1 & x = y , x \ne i \\
0 & \text { Otherwise  } 
\end{cases} \\

\end{aligned}</script><p>考虑如下事实:行变换是可逆的,那么初等矩阵显然是可逆的.</p>
<p>这引出下面的定理:</p>
<p>$n \times n $矩阵是可逆的,当且仅当$A $行等价于$I _n $,也即$A $可以通过一系列初等行变换变换为$I _n $.</p>
<p>如果$A $可以通过一系列初等行变换变换为$I _n $,根据初等矩阵的知识,这等价于:</p>
<p>$E _1 E _2 . . . E _p A = I _n $,由于初等矩阵显然可逆,我们有$A = ( E _1 E _{ 2  } . . . E _p ) ^{ - 1  } $,有$A ^{ - 1  } = ( E _1 E _2 . . . E _p ) $.</p>
<p>如果$A $是可逆矩阵,显然$A $的简化阶梯形是$I $,也即二者行等价.</p>
<p>由于初等矩阵转置后仍然是初等矩阵,所以$A $可逆等价于$A ^T $可逆.此时发现列变换等价于右乘初等矩阵.此外$( A ^T ) ^{ - 1  } = ( A ^{ - 1  } ) ^T $.</p>
<h5><span id="求解逆矩阵">求解逆矩阵</span></h5><p>若$A $可逆,我们考虑将$A $和$I $放在同一个$n \times 2 n $的矩阵中,记作$\begin{bmatrix}A &amp; I \end{bmatrix} $,它显然行等价于$\begin{bmatrix}I &amp; A ^{ - 1  } \end{bmatrix} $.</p>
<p>另外,考虑将$I $写作$\begin{bmatrix}\vec { e _1  } &amp; \vec { e _2  } &amp; . . . &amp; \vec { e _n  } \end{bmatrix} $的形式,则我们发现上述过程等价于求若干个形如$A \vec { x  } _i = \vec { e  } _i $的方程的解,并且$A ^{ - 1  } = \begin{bmatrix}\vec { x _1  } &amp; \vec { x _2  } &amp; . . . &amp; \vec { x _n  } \end{bmatrix} $.</p>
<h6><span id="example1lu分解">Example1(LU分解)</span></h6><p>考虑上面对一个矩阵做的过程,考虑把一个矩阵消成上三角的.在此过程中如果没有发生行交换操作,那所做的操作就是一列下三角的操作.因此可以把一个矩阵分解为$A = LU $.当然这里有一些条件才能进行,回头我们再讨论此.</p>
<h4><span id="核与像与秩">核与像与秩</span></h4><p>选取$T : V \rightarrow W $为线性映射,定义$\ker T = T ^{ - 1  } ( 0 ) $,$\text { im  }  T = T ( V ) $.</p>
<p>容易证明$\ker T $是$V $的线性子空间,$\text { im  }  T $是$W $的线性子空间.</p>
<p>对于任意$w \in \text { im  } T $,选取任意一个特解$v _0 \in V , T ( v _0 ) = w $,那么容易看出$T ^{ - 1  } ( w ) = v _0 + \ker T $.于是$T $是单射当且仅当$\ker T = \{ 0 \} $.</p>
<p>当$\dim V $有限的时候,我们有$\dim V = \dim \ker T + \dim \text { im  }  T $.</p>
<p>原因是可以选取$\text { im  }  T $的一组基$\{ \vec { w  } _1 , \cdots \vec { w  } _r \} $,找到其原像$B = \{ \vec { v  } _1 , \cdots , \vec { v  } _r \} $,再取$\ker T $的一组基$C = \{ \vec { u  } _1 , \cdots \vec { u  } _s \} $.</p>
<p>先来证明$B \cup C $是线性无关的.也就是考察$\sum a _j \vec { v  } _j + \sum b _i \vec { u  } _i = 0 $.此时两边取像,当然有$\sum a _j \vec { w  } _j + 0 = 0 $,于是所有的$a _j = 0 $.此时考虑$\ker T $是$V $的子空间,所以当$0 + \sum b _i \vec { u  } _i = 0 $的时候也可以推出所有的$b _i = 0 $.</p>
<p>再来证明它确实可以生成$V $.考虑$\forall \vec { v  } \in V $,首先$T ( \vec { v  } ) = \sum a _j \vec { w  } _j $,这当然是可以找到的.那么$T ( \vec { v  } - \sum a _j \vec { v  } _j ) = 0 $,于是$\vec { v  } - \sum a _j \vec { v  } _j \in \ker T $,于是$\vec { v  } - \sum a _j \vec { v  } _j = \sum b _i \vec { u  } _i $,这就证毕了.利用下面直和分解的原理也可以写作$\ker T \oplus \text { im  } T \cong V $.</p>
<p>而我们知道$T $的单性等价于$\dim \ker T = 0 $,满性等价于$\dim \text { im  }  T = \dim W = \dim V $,于是$\dim W = \dim V $时单性等价于满性.</p>
<p>这样的话我们定义一个线性映射的秩$\text { rk  }  T = \dim ( \text { im  }  T ) $.</p>
<p>我们来看一个特殊情况$T : F ^n \rightarrow F ^m $.那此时我们就可以定义这个映射所代表的矩阵$M $的秩.我们注意到$\text { im  }  T = \text { span  } \{ M \vec { e  } _1 , \cdots M \vec { e  } _{ n  } \} = \text { span  } \{ \vec { m  } _1 , \cdots , \vec { m  } _n \} $.也就是$\text { rk  }  M $其实就是列向量生成的空间的维度.特别地,如果$\text { rk  }  M = \min ( n , m ) $,那么我们称矩阵是满秩的.也就等于其消成简化阶梯型矩阵后的主元数量.那此时$\dim \ker T = n - \text { rk  }  M $.</p>
<p>容易从上面看出$\text { rk  } ( ST ) \leq \min ( \text { rk  } S , \text { rk  } T ) $.且当$T $是满的时候$\text { rk  } ( ST ) = \text { rk  } ( S ) $,当$S $是单的时候$\text { rk  } ( ST ) = \text { rk  } ( T ) $.</p>
<h5><span id="sylvester秩不等式">Sylvester秩不等式</span></h5><p>考虑$T : U \to V , S : V \to W $,则$\text { rk  } ( ST ) \geq \text { rk  }  S + \text { rk  }  T - \dim V = \text { rk  }  T - ( \dim V - \text { rk  }  S ) $.可以认为后者$\dim V - \text { rk  }  S $实际上是$S $这个映射所带来的维度损失($\ker S $),而这个损失有可能叠到$T $上也可能不叠到$T $上.</p>
<p>对于其证明,考虑$\text { rk  } ( ST ) $实际上应当是$S : \text { im  }  T \to W $的秩,这给出$\text { rk  } ( ST ) = \text { rk  }  T - \dim ( \text { im  }  T \cap \ker S ) $.</p>
<p>而$\dim ( \text { im  }  T \cap \ker S ) \leq \dim \ker S = \dim V - \text { rk  }  S $.于是得证.</p>
<p>其一个特例是$\text { rk  } ( ST ) = 0 $时给出$\dim V \geq \text { rk  }  S + \text { rk  }  T $.</p>
<p>在上述式子左右两边进行简单变形:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\text { rk  } ( ST ) & \geq \text { rk  } \ T - \dim \ker S \\
\dim U - \text { rk  } ( T ) & \geq \dim U - \text { rk  } \ ( ST ) - \dim \ker S \\
\ker T + \ker S & \geq \ker ( ST ) 
\end{aligned}</script><p>换言之就是线性映射的$\ker $扩张的过程中可能会出现包含的情况,所以扩不到简单相加的情形.</p>
<h5><span id="frobenius秩不等式">Frobenius秩不等式</span></h5><p>有$\text { rk  } ( ABC ) \geq \text { rk  } ( AB ) + \text { rk  } ( BC ) - \text { rk  } B $.</p>
<p>不妨设$B : U \to V $,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\text { rk  } ( ABC ) & = \text { rk  } ( BC ) - \dim ( \text { im  } ( BC ) \cap \ker A ) \\
& \geq \text { rk  } ( BC ) - \dim ( \text { im  } ( B ) \cap \ker A ) \\

\end{aligned}</script><p>而我们事实上有$\text { rk  } ( AB ) = \text { rk  }  B - \dim ( \text { im  } B \cap \ker A ) $,于是上述式子得证.</p>
<p>仍然对上式进行变形:</p>
<script type="math/tex; mode=display">
\ker ( AB ) + \ker ( BC ) \geq \ker ( ABC ) + \ker ( B )</script><p>这个式子还不能简单从Sylvester不等式推导,但可以见到这仍然是关于$\ker $扩张上的意义.</p>
<h4><span id="对偶空间">对偶空间</span></h4><p>定义<strong>对偶空间</strong>$V ^* = \text { Hom  } ( V , F ) $(也可以记作$\check { V  } $),其中$V $是定义在$F $上的向量空间.对偶空间当然是线性空间.</p>
<p>当线性空间是有限维的时候.我们考虑以下事实:</p>
<p>取$V $的一组基$\cal B = \{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $,我们考虑取$\check { v  } _i \in V ^\vee $使得$\check { v  } _i ( \vec { w  } ) = a _i $,当$\vec { w  } = \sum _j a _j \vec { v  } _j $.容易验证它们构成一组<strong>对偶基</strong>,这告诉我们$\dim V = \dim V ^\vee $.</p>
<p>特别地,当$V = F ^n $的时候,容易验证如果取标准基$\cal B $,那么得到的对偶基实际上等价于标准基的转置(也就是列向量改为行向量).这可能会给我们带来错觉,认为对偶空间无非是行向量组成的空间,但如此理解有所偏差.既然是向量空间,就应当理解为列向量,否则线性变换理解为矩阵乘法就会收到阻碍,只是其作用效果等价于先转置为行向量再作矩阵乘法.</p>
<p>如果$T : V \to W $是线性映射,那我们可以定义其<strong>转置映射</strong>$^t T : W ^\vee \to V ^\vee , \lambda \mapsto \lambda T $.容易验证转置映射仍然是线性映射.另外,如果$S , T $均是线性映射,那么$^t { ( ST )  } =  ^t { T  } ^t { S  } $.简单画一下交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [d ] \ar [r ] ^T & W \ar [d ] \\
\check { V  } & \check { W  } \ar [l ] _{ T ^t  }  }</script><p>我们接下来说明转置映射对应的矩阵是原映射的矩阵的转置.</p>
<p>不妨设$\dim V = n , \dim W = m $,原矩阵为$A _{ m \times n  } $.</p>
<p>接下来看它们分别对对应基的操作:</p>
<p>不妨设$T ( \vec { v  } _j ) = \sum a _{ i , j  } \vec { w  } _i $,则$^t T ( \check { w  } _i ) $代表一个映射:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\vec { v  } _k \mapsto \check { w _i  } T ( \vec { v  } _k ) \\
& = \check { w _i  } ( \sum _h a _{ h , k  } w _h ) \\
& = \sum _h a _{ h , k  } \check { w  } _i ( w _h ) \\
& = a _{ i , k  } \\
& = \sum _{ j  } a _{ i , j  } \check { v  } _j ( \vec { v  } _k ) 
\end{aligned}</script><p>因此$^t T ( \check { w  } _i ) = \sum _{ j  } a _{ i , j  } \check { v  } _j $.</p>
<p>如果我们将$\lambda $看成一个$1 \times m $的矩阵,那$\lambda \to \lambda T $不言自明为矩阵乘法.然而正是我们试图总是将空间表示为列向量,因此我们就自然带了一个转置,对于一个$\vec { v  } $,我们对它实际上求的是乘法$^t ( \lambda T ) \vec { v  } = ( ^t T ) ( ^t \lambda ) \vec { v  } $的结果,如此一来上述结论便显明了.</p>
<p>我们会在后面谈论矩阵的相抵的部分证明行秩等于列秩这一事实,然而,既然转置实际上表现了对偶空间上的性质,我们理应可以抛开矩阵本身而只从对偶空间的角度理解.换言之,取对偶基是一种非典范的无奈之举,我们会在讨论双线性形式的时候重新讨论于此.</p>
<h4><span id="直和分解与分块矩阵">直和分解与分块矩阵</span></h4><p>不妨取映射$\sigma : \bigoplus _{ i \in I  } V _i \to V , ( v _i ) _{ i \in I  } \mapsto \sum v _i $,其中$V _i $都是$V $的子空间.容易验证其当且仅当在$V _i \cap ( \sum _{ i \ne j  } V _j ) = \{ 0 \} $时是单射.我们将此称作其<strong>直和分解</strong>.如果不满足上述条件一般称作<strong>外直和</strong>,满足的话则称作<strong>内直和</strong>,并容易发现内直和$\bigoplus V _i \cong \sum V _i $.</p>
<p>外直和的一个经典应用是构造$\varphi : V _1 \oplus V _2 \to V , ( \vec { v  } _1 , \vec { v  } _2 ) \mapsto \vec { v  } _1 - \vec { v  } _2 $的映射,立刻得到$\ker \varphi = V _1 \cap V _2 , \text { im  }  \varphi = V _1 + V _2 $,于是$\dim V _1 + \dim V _2 = \dim ( V _1 \cap V _2 ) + \dim ( V _1 + V _2 ) $.这其实就是第二同构定理的维数表示.</p>
<p>接下来考虑$V = \bigoplus _{ i = 1  } ^n V _i , W = \bigoplus _{ j = 1  } ^m W _j $,我们可以断言$\text { Hom  } ( V , W ) \cong \bigoplus _{ 1 \leq i \leq n , 1 \leq j \leq m  } \text { Hom  } ( V _i , W _j ) $.这个的证明只需定义算子$p _i : \bigoplus _{ j  } V _j \to V , ( \vec { v  } _j ) _{ j \in J  } \mapsto \vec { v  } _i $即可.</p>
<p>对于对偶空间,事实上取$W = F $,就会有$V ^\vee \cong \bigoplus V _i ^\vee $.</p>
<p>接下来考虑映射的合成$T : U \to V , S : V \to W $.不妨设$U \cong \bigoplus U _k , V \cong \bigoplus _j V _j , W \cong \bigoplus _i W _i $,容易验证$( ST ) _{ i , k  } = \sum _{ j  } S _{ i , j  } T _{ j , k  } $.</p>
<p>此时我们终于意识到了这个东西应当同构于分块矩阵.更具体地,$\text { Hom  } ( V , W ) \cong A _{ n \times m  } , A _{ j , i  } \cong T _{ j , i  } , A _{ j , i  } \in M _{ m _j \times n _i  } , m _j = \dim W _j , n _i = \dim V _i $.</p>
<p>容易类比普通矩阵定义对角线分块矩阵,上(下)三角分块矩阵之类的东西.并且还容易发现上三角矩阵相乘后仍是上三角,对角线矩阵相乘后仍是对角线.</p>
<p>如果考虑$T \in \text { End  } ( V ) $,事实上对角线矩阵有相当漂亮的刻画,只需观察矩阵结构就可以发现此时$T ( V _i ) \subseteq V _i $.上三角矩阵有类似的刻画,观察矩阵结构也可以发现$T ( V _i ) \subseteq \bigoplus _{ j \leq i  } V _j $.</p>
<p>下面我们来证明对于上三角分块矩阵$A _{ r \times r  } $,如果对角线上的$A _{ i \times i  } $均可逆,那么$A _{ r \times r  } $的分块矩阵可逆,而且其逆的对角线上的矩阵是一列$A _{ i \times i  } ^{ - 1  } $.</p>
<p>考虑数学归纳,这样的话就只需要证明$\begin{bmatrix}A _{ 1 , 1  } &amp; A _{ 1 , 2  } \ 0 &amp; A _{ 2 , 2  } \end{bmatrix} $,其中$A _{ 1 , 1  } $和$A _{ 2 , 2  } $均可逆即可.容易发现取$\begin{bmatrix}A _{ 1 , 1  } ^{ - 1  } &amp; - A _{ 1 , 1  } ^{ - 1  } A _{ 1 , 2  } A _{ 2 , 2  } ^{ - 1  } \ 0 &amp; A _{ 2 , 2  } ^{ - 1  } \end{bmatrix} $即可.</p>
<p>那么反之成不成立呢?是不是此时按照合理的分块方式一定能得到对角线上的矩阵都可逆呢?也是可行的.假设$\begin{bmatrix}A _{ 1 , 1  } &amp; A _{ 1 , 2  } \ 0 &amp; A _{ 2 , 2  } \end{bmatrix} $可逆,其逆为$\begin{bmatrix}A _{ 1 , 1  } ‘ &amp; A _{ 1 , 2  } ‘ \ A _{ 2 , 1  } ‘ &amp; A _{ 2 , 2  } ‘ \end{bmatrix} $.容易发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\begin{bmatrix}
A _{ 1 , 1  } ' & A _{ 1 , 2  } ' \\
A _{ 2 , 1  } ' & A _{ 2 , 2  } ' 
\end{bmatrix} \begin{bmatrix}
A _{ 1 , 1  } & A _{ 1 , 2  } \\
0 & A _{ 2 , 2  } 
\end{bmatrix} = \begin{bmatrix}
A _{ 1 , 1  } A _{ 1 , 1  } ' & \_ \\
\_ & \_ 
\end{bmatrix} \\
\begin{bmatrix}
A _{ 1 , 1  } & A _{ 1 , 2  } \\
0 & A _{ 2 , 2  } 
\end{bmatrix} \begin{bmatrix}
A _{ 1 , 1  } ' & A _{ 1 , 2  } ' \\
A _{ 2 , 1  } ' & A _{ 2 , 2  } ' 
\end{bmatrix} = \begin{bmatrix}
\_ & \_ \\
\_ & A _{ 2 , 2  } A ' _{ 2 , 2  } 
\end{bmatrix} \\

\end{aligned}</script><p>于是立刻见到$A _{ 1 , 1  } $和$A _{ 2 , 2  } $都有逆.</p>
<h4><span id="基的变换">基的变换</span></h4><h5><span id="矩阵的共轭相似">矩阵的共轭(相似)</span></h5><p>考虑线性映射$T : V \to W $,这个线性映射理应和所取的基无关,但如果我们想写出它的矩阵形式,写出来的矩阵当然取决于$V $和$W $取的基分别是什么(从而决定不同的坐标).不妨设$V , W $都是定义在$F $上的,维度分别为$n , m $.现在取它们的有序基$\mathcal { B  } = \{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $,$\mathcal { C  } = \{ \vec { w  } _1 , \cdots , \vec { w  } _m \} $,这样就可以确定一个同构$\mathcal { M  } _{ \mathcal { B  } \to \mathcal { C  }  } : \text { Hom  } ( V , W ) \to M _{ m \times n  } $.再构造一个同构$\varphi _{ \mathcal { V  }  } : F ^n \to V , ( x _1 , \cdots , x _n ) \mapsto \sum x _i \vec { v  } _i $.然后我们可以画出如下交换图表(对其交换性的验证可以直接考虑对每个基验证交换性):</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T & W \\
F ^n \ar [u ] ^{ \varphi _{ \mathcal { B  }  }  } \ar [r ] _{ \mathcal { M  } _{ \mathcal { B  } \to \mathcal { C  }  } ( T )  } & F ^m \ar [u ] _{ \varphi _{ \mathcal { C  }  }  }  }</script><p>如果我们尝试考虑更换它们的基,理论上说当然会得到不同的矩阵.换言之,我们取另一组有序基$\mathcal { B  } ‘ = \{ \vec { v  } _1 ‘ , \cdots , \vec { v  } _n ‘ \} , \mathcal { C  } ‘ = \{ \vec { w  } _1 ‘ , \cdots , \vec { w  } _m ‘ \} $,这样可以确定另一个同构$\mathcal { M  } _{ B ‘ \to C ‘  } $.我们下面试图探索二者之间的关系.</p>
<p>由于选取的有序基的方式不同,我们再构造一个$P _{ B ‘ \to B  } : ( F ^n ) ‘ \to F ^n , ( x ‘ _1 , \cdots , x ‘ _n ) \mapsto ( x _1 , \cdots x _n ) , \sum x ‘ _i \vec { v  } ‘ _i = \sum x _i \vec { v  } _i $,容易验证取$P _{ V ‘ \to V  } = { ( \varphi _V )  } ^{ - 1  } \varphi _{ V ‘  } $即可并且是自同构,并且$( P _{ V \to V ‘  } ) ^{ - 1  } = P _{ V ‘ \to V  } $.写成交换图表的话应当形如:</p>
<script type="math/tex; mode=display">
\xymatrix { & V & \\
( F ^n ) ' \ar [ru ] ^{ \varphi _{ \mathcal { B  } '  }  } \ar [rr ] _{ P _{ \mathcal { B  } ' \to \mathcal { B  }  }  } & & F ^n \ar [lu ] _{ \varphi _{ \mathcal { B  }  }  }  }</script><p>这里所有的箭头当然都是可逆的.</p>
<p>事实上,不妨设$\vec { v  } _i ‘ = \sum _{ j  } p _{ j , i  } \vec { v  } _j $,也就是将$\vec { v  } ‘ $展开成列向量,对于$\vec { x  } = \sum _{ i  } x ‘ _i \vec { v  } ‘ _i $,考虑$\sum _{ i  } x ‘ _i \vec { v  } ‘ _i = \sum _{ i  } x ‘ _i \sum _{ j  } p _{ j , i  } \vec { v  } _j = \sum _{ j  } \vec { v  } _j \sum _{ i  } x ‘ _i p _{ j , i  } = \sum _j \vec { v  } _j x _j $,那么$p _{ j , i  } $其实就是$P _{ \mathcal { B  } ‘ \to \mathcal { B  }  } $的对应矩阵的第$j $行$i $列元素.此时我们称$P _{ n \times n  } $为从有序基$\cal B ‘ \to \cal B $的<strong>转换矩阵</strong>.事实上容易见到转换矩阵都是可逆的,并且事实上所有的可逆矩阵都可以看作标准基对某个矩阵的转换矩阵.</p>
<p>这样的话,我们就容易见到:$\mathcal { M  } _{ B ‘ \to C ‘  } ( T ) = P _{ C \to C ‘  } \mathcal { M  } _{ B \to C  } ( T ) P _{ B ‘ \to B  } = ( P _{ C ‘ \to C  } ) ^{ - 1  } \mathcal { M  } _{ B \to C  } ( T ) P _{ B ‘ \to B  } $.这里一定要注意$\mathcal { M  } _{ B \to C  } $是一个将映射$T $变为矩阵$M $的映射.</p>
<p>具体地,我们可以看下面的交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { ( F ^n ) ' \ar [rrr ] ^{ \mathcal { M  } _{ B ' \to C '  } ( T )  } \ar [dd ] _{ P _{ B ' \to B  }  } \ar [rd ] ^{ \varphi _{ B '  }  } & & & ( F ^m ) ' \ar [dd ] ^{ P _{ C ' \to C  }  } \ar [ld ] _{ \varphi _{ C '  }  } \\
& V \ar [r ] ^T & W \\
F ^n \ar [rrr ] _{ \mathcal { M  } _{ B \to C  } ( T )  } \ar [ru ] _{ \varphi _B  } & & & F ^m \ar [lu ] ^{ \varphi _C  }  }</script><p>接下来我们考虑$T \in \text { End  } ( V ) $,自然可以导出$\mathcal { M  } _{ B ‘ \to B ‘  } ( T ) = P ^{ - 1  } \mathcal { M  } _{ B \to B  } ( T ) P $,其中$P = P _{ B ‘ \to B  } $.</p>
<p>于是综上,我们称两个矩阵$A _{ n \times n  } , B _{ n \times n  } $相似,当且仅当存在可逆矩阵$P _{ n \times n  } $使得$A = P ^{ - 1  } BP $.由上面可以看出来,相似的两个矩阵实际上是不同基下的同种变换.</p>
<p>另外我们注意到,固定$P _{ n \times n  } $后定义映射$P : M _{ n \times n  } \to M _{ n \times n  } , A \mapsto P ^{ - 1  } AP $不仅仅是线性同构,还是一个环同构.容易验证其满足环同构的性质.</p>
<p>此时注意到另一个事情:我们知道我们做共轭实际上是换基操作,那么如果我们需要换基,难道我们必须总是对着矩阵做矩阵乘法么?</p>
<p>事实上,我们应当观察如下矩阵:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
& \vec { e  } _1 & \cdots & \vec { e  } _n \\
\vec { e  } _1 & a _{ 1 , 1  } & \cdots & a _{ n , 1  } \\
\vdots & \cdots & \ddots & \vdots \\
\vec { e  } _n & a _{ 1 , n  } & \cdots & a _{ n , n  } 
\end{bmatrix}</script><p>最简单的改变,我们如果想要让它变成在另一组有序基下的操作,我们应当如何操作呢?如果我们带着这些向量去做,我们实际上可以发现:放在列上的这些向量随着列变换而操作,放在行上的这些向量随着行变换的逆变换而改变.这就是更加方便的做相似矩阵的办法.而这事实上也就是因为,任何一个可逆的矩阵都可以拆成若干初等矩阵,因此只需要将$P $拆成初等矩阵两边分别做就可以.初等矩阵求逆当然是平凡的.</p>
<h5><span id="矩阵的相抵">矩阵的相抵</span></h5><p>我们称两个矩阵$A $和$B $<strong>相抵</strong>,当且仅当$\exists P , Q $均可逆,$A = PBQ $.容易看出相抵是等价关系.由于可逆矩阵等价于若干初等矩阵的乘积,那么$A , B $相抵当且仅当$B $可以通过若干初等行变换和列变换变成$A $.下面我们证明$A , B $相抵等价于$\text { rk  }  A = \text { rk  }  B $.</p>
<p>$A , B $相抵的时候当然有$\text { rk  }  A = \text { rk  }  B $,因为此时$\text { rk  }  A = \dim \text { im ( PBQ )  } $,而$P , Q $都是同构,所以此时有$\text { rk  }  A = \dim \text { im  }  B = \text { rk  }  B $.</p>
<p>当$\text { rk  }  A = \text { rk  }  B = k $时,我们考虑二者都可以经过若干次行变换或者列变换变成形如$m _{ i , j  } = \begin{cases}1 &amp; i = j \leq k \ 0 &amp; \text { otherwise  } \end{cases} $.于是二者等价.</p>
<p>类似上面就可以发现$\text { rk  }  A = \text { rk  }  A ^T $,原因是二者都可以消成上述那种矩阵,而那种矩阵的主元数量显然是确定且相等的.</p>
<p>用矩阵的相抵可以更快证明Frobenius秩不等式,具体地,考虑分块矩阵$\begin{bmatrix}ABC &amp; 0 \ 0 &amp; B \end{bmatrix} $.考虑$\begin{bmatrix}I &amp; - A \ 0 &amp; I \end{bmatrix} \begin{bmatrix}ABC &amp; 0 \ 0 &amp; B \end{bmatrix} \begin{bmatrix}I &amp; 0 \ C &amp; I \end{bmatrix} = \begin{bmatrix}0 &amp; - AB \ BC &amp; B \end{bmatrix} $,于是我们知道$\begin{bmatrix}ABC &amp; 0 \ 0 &amp; B \end{bmatrix} $和$\begin{bmatrix}0 &amp; - AB \ BC &amp; B \end{bmatrix} $相抵.</p>
<p>而$\text { rk  }  \begin{bmatrix}ABC &amp; 0 \ 0 &amp; B \end{bmatrix} = \text { rk  }  ABC + \text { rk  }  B $,下面考虑证明$\text { rk  }  \begin{bmatrix}0 &amp; - AB \ BC &amp; B \end{bmatrix} \geq \text { rk  }  AB + \text { rk  }  BC $,而直接考虑$BC $和$AB $的行,$BC $中线性无关行和$AB $中线性无关行必定也线性无关,而原本线性相关的那些加上右下角的$B $也有可能变得线性无关,于是上述不等式就得证了.</p>
<h4><span id="商空间">商空间</span></h4><p>如果我们考虑在线性空间上定义等价关系$\vec { v  } _1 \sim \vec { v  } _2 \Leftrightarrow T \vec { v  } _1 = T \vec { v  } _2 $,其中$T $是一个线性映射,容易发现此时$\vec { v  } _1 - \vec { v  } _2 \in \ker T $.所以其实和$T $本身关系不大,而只和$\ker T $这个子空间有关.</p>
<p>那我们不妨设$U $是$V $的子空间,立刻发现$\vec { v  } _1 \sim \vec { v  } _2 \Leftrightarrow ( \vec { v  } _1 - \vec { v  } _2 ) \in U $是一个等价关系.</p>
<p>在此基础上定义<strong>陪集</strong>$\vec { v  } + U $,容易发现陪集组成了一个新的线性空间(当然要验证良定义),将其称作<strong>商空间</strong>,并且可验证映射$\varphi : V \to V / U , \vec { v  } \mapsto \vec { v  } + U $是线性映射.类比陪群,得知$\ker \varphi = U $,综合前面的讨论得知此时$\vec { v  } _1 \sim \vec { v  } _2 \Leftrightarrow \vec { v  } _1 + U = \vec { v  } _2 + U $.</p>
<p>顺便可以顺手引入<strong>余核</strong>$\text { coker  } ( T ) = W / \text { im  }  T $,容易发现$T $是满射当且仅当$\text { coker  } ( T ) = \{ 0 \} $.</p>
<h5><span id="同态基本定理">同态基本定理</span></h5><p>下面来抛出另一个命题.对于线性映射$T : V \to W , \varphi : V \to V / U $,如果$U \subseteq \ker T $,那么存在唯一的线性映射$\bar { T  } : V / U \to W $.使得$T = \bar { T  } \varphi $.</p>
<p>这个证明看上去是相当正确的.由于$\varphi $是满射,那么必定有$\bar { T  } ( \vec { v  } + U ) = T \vec { v  } $,这是显然是唯一的映射,也容易看出其是正确的线性映射.具体来讲,存在唯一的线性映射$\bar { T  } $使得下图交换:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T \ar [d ] _\varphi & W \\
V / U \ar [ru ] _{ \bar { T  }  }  }</script><p>在上述命题中如果$T $也是满射,也就是$W = \text { im  }  T $,取$U = \ker T $,那么此时$\bar { T  } \varphi = T $,这必定意味着$\text { im  }  \bar { T  } = W $.接下来考虑一下$\ker \bar { T  } $的模样,考虑$\bar { T  } ( \vec { v  } + U ) = 0 \Leftrightarrow T ( \vec { v  } ) = 0 \Leftrightarrow \vec { v  } \in U \Leftrightarrow \vec { v  } + U = U $,从而$\ker \bar { T  } = \{ U \} $,于是$\bar { T  } $是同构.</p>
<p>就可以发现对于一个线性映射$T $,$V / U = V / \ker T \cong \text { im  }  T $,这其实就是同态基本定理在线性空间上的表现.不过线性空间上还多一个标量乘法的运算,需要在群的基础上对此进行简单验证.另外线性空间上还有维数的概念,当然立即断言$\dim V = \dim U + \dim ( V / U ) $.值得一提的是这同样也告知我们$U $的基和$V / U $的反像的基合起来就是一组$V $的基.</p>
<p>上述说了这么多其实都在着重于所谓商空间的结构,现在我们看到陪集的定义可以在相当的意义上刻画商空间.适当推广上面的结论可以有:</p>
<p>设$T : V _1 \to V _2 $是线性映射,$U _1 \subseteq V _1 , U _2 \subseteq V _2 $并构造两个商映射$\varphi _1 : V _1 \to V _1 / U _1 , \varphi _2 : V _2 \to V _2 / U _2 $,并且$T ( U _1 ) \subseteq U _2 $,那么存在唯一的线性映射$\bar { T  } : V _1 / U _1 \to V _2 / U _2 $使得$T \varphi _2 = \bar { T  } \varphi _1 $.具体地,$\bar { T  } ( \vec { v  } + U _1 ) = T \vec { v  } + U _2 $.</p>
<p>如果再推广上述结论的话还可以来多个,具体可以看下面的交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V _1 \ar [rr ] ^T \ar [d ] _{ \varphi _1  } & & V _2 \ar [rr ] ^S \ar [d ] _{ \varphi _2  } & & V _3 \ar [d ] _{ \varphi _3  } \\
V _1 / U _1 \ar [rr ] ^{ \bar { T  }  } _{ \ker \bar { T  } = T ^{ - 1  } ( U _2 ) / U _1  } & & V _2 / U _2 \ar [rr ] ^{ \bar { S  }  } _{ \ker \bar { S  } = S ^{ - 1  } ( U _3 ) / U _2  } & & V _3 / U _3 \\
 }</script><h5><span id="第一同构定理">第一同构定理</span></h5><p>将群论中的第一同构定理(不过线性空间下没有正规的概念)拿过来,即对于线性空间$V $的一个子空间$U $,在典范同态$\pi : V \rightarrow V / U $下,我们有:</p>
<ol>
<li><p>$V $的包含$U $的子空间$W $和$V / U $的子空间$\bar { W  } $在$\pi $下一一对应.不妨设此对应为$\varphi : W \mapsto \bar { W  } $.</p>
</li>
<li><p>此对应是严格保序的,也就是$W _1 \subseteq W _2 \Leftrightarrow \bar { W  } _1 \subseteq \bar { W  } _2 $.</p>
</li>
<li><p>若有$U \subseteq W \subseteq V $,则$V / W \cong ( V / U ) / ( W / U ) $.</p>
</li>
</ol>
<p>考虑(1)(2)的证明:</p>
<p>先证明单射,对于两个包含$U $的子空间$W _1 \ne W _2 $来说,不妨设$W _1 \nsubseteq W _2 $,$\exists \vec { a  } \in W _1 , \vec { a  } \notin W _2 $.此时考虑$\bar { a  } $,注意到如果$\bar { a  } \in \bar { W _2  } $,那么$\vec { a  } + U \in W _2 + U $.这表明$\exists \vec { b  } \in W _2 $,$\vec { a  } + U = \vec { b  } + U $,此时$\vec { a  } - \vec { b  } \in U \subseteq W _2 $,那么$\vec { a  } \in W _2 $,这就不符合了,于是当然$\bar { W _1  } \ne \bar { W _2  } $并且(2)上严格保序.</p>
<p>证明单射还有一种办法是考虑只需证明$\pi ^{ - 1  } ( \pi ( W ) ) = W $即可,而$W \subseteq \pi ^{ - 1  } ( \pi ( W ) ) $是显然的.又考虑$\forall \vec { v  } \in \pi ^{ - 1  } ( \pi ( W ) ) , \pi ( \vec { v  } ) \in \pi ( W ) $,这意味着$\exists \vec { w  } \in W , \pi ( \vec { v  } ) = \pi ( \vec { w  } ) $,于是$\vec { v  } \in \vec { w  } + \ker \pi = \vec { w  } + U \subseteq \vec { w  } + W = W $.这样就证明了$W \supseteq \pi ^{ - 1  } ( \pi ( W ) ) $.</p>
<p>接下来要证明满射,也就是证明$\forall N \leq V / U , U \leq \pi ^{ - 1  } ( N ) \leq G $.</p>
<p>首先要证明$\pi ^{ - 1  } ( N ) $是一个子空间,这个是容易验证的.</p>
<p>而由于保序性已经被证明了,我们就可以注意到由于$\vec { 0  } \in N $,于是有$\bar { 0  } = U \leq \pi ^{ - 1  } ( N ) $.</p>
<p>对于(3):</p>
<p>由同态基本定理,考虑构造满射$\varphi : V / U \rightarrow V / W $,只需证明$\ker  \varphi = W / U $即可.</p>
<p>直觉上会认为映射$\varphi : \vec { v  } + U \mapsto \vec { v  } + W $即可,下面验证其满足上述性质:</p>
<p>首先验证良定义,$\vec { v  } _1 + U = \vec { v  } _2 + U \Leftrightarrow \vec { v  } _1 - \vec { v  } _2 \in U \subseteq W \Rightarrow \vec { v  } _1 + W = \vec { v  } _2 + W $.</p>
<p>然后验证线性映射,这个验证过程很平凡.</p>
<p>其满性显然.只需验证其$\ker \varphi = W / U $即可,而考虑$\varphi ( \vec { v  } + U ) = W \Leftrightarrow \vec { v  } + W = W \Leftrightarrow \vec { v  } \in W \Leftrightarrow \vec { v  } + U \in W / U $.这样就证明了上述结论.</p>
<h5><span id="第二同构定理">第二同构定理</span></h5><p>$V , W $是一个更大的线性空间的子空间,那么我们有:</p>
<p>$V / ( V \cap W ) \cong ( V + W ) / W , \vec { v  } + ( V \cap W ) \mapsto \vec { v  } + W $.</p>
<p>考虑$\varphi : V \to ( V + W ) / W , \vec { v  } \mapsto \vec { v  } + W $,那么显然$\varphi ( \vec { v  } ) = W \Leftrightarrow \vec { v  } \in V \cap W $,于是$\ker \varphi = V \cap W $.</p>
<p>接下来只需要证明它是满射就可以了.考虑$\forall \vec { v  } + \vec { w  } + W = \vec { v  } + W \in ( V + W ) / W $,这当然是满射.</p>
<p>第二同构定理的一个平凡推论是$\dim ( V + W ) = ( \dim V ) + ( \dim W ) - \dim ( V \cap W ) $.</p>
<p>第二同构定理的另一个推论是说如果$V = U \oplus W $,那么$W \cong V / U $.原因是$U + W = V $并且$U \cap W = \{ \vec { 0  } \} $.换言之取商是直和的逆运算.</p>
<p>第二同构定理证明的另一种思路是考虑$\varphi : V \times W \to V + W , ( \vec { v  } , \vec { w  } ) \mapsto ( \vec { v  } - \vec { w  } ) $,此时注意到$\text { im  } \varphi = ( V + W ) , \ker \varphi = V \cap W $.</p>
<h5><span id="旗">旗</span></h5><p>回看我们一开始拿到的映射$T : V \to V ‘ $和映射$\bar { T  } : V / U \to V ‘ / U ‘ $.也就是下面这个交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T \ar [d ] _{ \varphi  } & V ' \ar [d ] ^{ \varphi '  } \\
V / U \ar [r ] _{ \bar { T  }  } & V ' / U ' \\
 }</script><p>现在我们尝试用矩阵刻画$T $和$\bar { T  } $之间的关系.首先我们需要开始取基,不妨取$\{ \vec { u  } _1 , \cdots , \vec { u  } _k \} $是$U $的一组有序基,$\{ \bar { v  } _1 , \cdots , \bar { v  } _m \} $是$V / U $的一组有序基.$\{ \vec { u  } _1 ‘ , \cdots , \vec { u  } _{ k ‘  } ‘ \} $是$U ‘ $的一组有序基,$\{ \bar { v  } _1 ‘ , \cdots , \bar { v  } _{ m ‘  } ‘ \} $是$V ‘ / U ‘ $的一组有序基.此时由于$\ker \varphi = U $,我们之前证明$\ker $的维度关系的时候已经说明过,$\{ \vec { u  } _1 , \cdots , \vec { u  } _k , \vec { v  } _1 , \cdots \vec { v  } _m \} $实际上是$V $的一组有序基.尝试取出一个矩阵$A \in M _{ ( k ‘ + m ‘ ) \times ( k + m )  } $来作为$T $对应的矩阵.此时将$A $分块,我们将其写作$A = \begin{bmatrix}A _{ U \to U ‘  } &amp; A _{ V / U \to U ‘  } \ A _{ U \to V ‘ / U ‘  } &amp; A _{ V / U \to V ‘ / U ‘  } \end{bmatrix} $.由于$T ( U ) \subseteq U ‘ $,我们知道$A _{ U \to V ‘ / U ‘  } = 0 $,而又有$A _{ V / U \to V ‘ / U ‘  } $当然就是$\bar { T  } $对应的矩阵$\bar { A  } $.总结一下就是$A = \begin{bmatrix}A _{ U \to U ‘  } &amp; _ \ 0 &amp; \bar { A  } \end{bmatrix} $.</p>
<p>如此观察可以继续推广并得到<strong>旗</strong>的概念.我们称$V $的<strong>旗</strong>是一列子空间$\{ \vec { 0  } \} = U _0 \subsetneq \cdots \subsetneq U _d = V $.特别地,如果$d = \dim V $,则称其为<strong>完备旗</strong>,容易见到完备旗一定满足$\dim V _i = i $.对于给定的旗,如果线性映射$T \in \text { End  } ( V ) $对$\forall 0 \leq i \leq m $满足$T ( V _i ) \subseteq V _i $,则称$T $保持此旗.</p>
<p>如果一个映射$T : V \to V ‘ $满足$\forall h , T ( U _h ) \subseteq U ‘ _h $,那我们可以对每个$U _h / U _{ h - 1  } $和$U ‘ _h / U ‘ _{ h - 1  } $选定有序基,那么得到的矩阵$A $应当是一个分块上三角矩阵,而且$A _{ i , i  } $实际上就是$\bar { T  } _h : U _h / U _{ h - 1  } \to U ‘ _h / U ‘ _{ h - 1  } $所对应的矩阵.</p>
<h5><span id="不变子空间">不变子空间</span></h5><p>给定线性映射$T \in \text { End  } ( V ) $,如果子空间$U \subseteq V $满足$T ( U ) \subseteq U $,那我们称$U $是在$T $下的一个<strong>不变子空间</strong>.根据前面我们已经讨论过的内容,得到下面这个交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T \ar [d ] _{ \varphi  } & V \ar [d ] ^{ \varphi '  } \\
V / U \ar [r ] _{ \bar { T  }  } & V / U \\
 }</script><p>其中$\bar { T  } $是唯一的.</p>
<p>提取$T | _U $为只考虑$T $在线性空间$U $上的作用得到的线性映射,上述交换图表给出以下矩阵:$T \cong \begin{bmatrix}T | _U &amp; _ \ 0 &amp; \bar { T  } \end{bmatrix} $.这个形式更好的用处是结合之后的迹/行列式/特征多项式等概念给出$T , T | _U , \bar { T  } $三者的关系:事实上$\det ( T | _U ) \det ( \bar { T  } ) = \det ( T ) , \text { tr  } ( T | _U ) + \text { tr  } ( \bar { T  } ) = \text { tr  } ( T ) $.</p>
<h3><span id="行列式">行列式</span></h3><h4><span id="置换排列">置换(排列)</span></h4><p>不妨假设$X $是一个非空集合,那么我们定义其<strong>置换集合</strong>$S _X = \{ \sigma : X \to X , \sigma  \text { is a bijection  } \} $.容易看出$S _X $对置换复合构成一个群.</p>
<p>我们也可以用$\left ( \begin{matrix}1 &amp; \cdots &amp; n \ \sigma ( 1 ) &amp; \cdots &amp; \sigma ( n ) \end{matrix} \right ) $.</p>
<p>我们还可以定义<strong>轮换</strong>为$\left ( \begin{matrix}1 &amp; 2 &amp; \cdots &amp; n - 1 &amp; n \ 2 &amp; 3 &amp; \cdots &amp; n &amp; 1 \end{matrix} \right ) $.</p>
<p>还可以定义<strong>对换</strong>$( i , j ) = \left ( \begin{matrix}1 &amp; \cdots &amp; i &amp; \cdots &amp; j &amp; \cdots &amp; n \ 1 &amp; \cdots &amp; j &amp; \cdots &amp; i &amp; \cdots &amp; n \end{matrix} \right ) $,其中$i \ne j $.</p>
<p>在此基础上定义<strong>单对换</strong>$s _i = ( i , i + 1 ) $.</p>
<p>在置换的基础上可以定义逆序对:$\text { Inv  } _\sigma = \{ ( i , j ) \mid 1 \leq i &lt; j \leq n , \sigma ( i ) &gt; \sigma ( j ) \} $,并定义逆序数$l ( \sigma ) = | \text { Inv  } _\sigma | $.容易看出$l ( \sigma ) = 0 \Leftrightarrow \sigma = \text { id  } $,$l ( \sigma ) = \frac { n ( n - 1 )  } { 2  } \Leftrightarrow \sigma ( k ) = n - k + 1 $.并且注意到$l ( \sigma ) = l ( \sigma ^{ - 1  } ) $,原因是$( i , j ) \mapsto ( \sigma ( j ) , \sigma ( i ) ) $是双射.</p>
<p>容易发现一个$\sigma $可以最少通过$l ( \sigma ) $次单对换变为$\text { id  } $,原因是每次交换一对$( i , i + 1 ) $当$\sigma ( i ) &gt; \sigma ( i + 1 ) $时会让逆序数减少$1 $.或者说更一般地$| l ( \sigma ) - l ( s _i \sigma ) | = 1 $.由于$( s _i ) ^{ - 1  } = s _i $,容易发现$| l ( \sigma ) - l ( \sigma s _i ) | = 1 $.而事实上$| l ( \sigma ) - l ( ( i , j ) \sigma ) | \in \text { odd  } $.这意味着对换会改变逆序数的奇偶性.所以容易看出来一个置换$\sigma $如果能拆成若干个对换,这些对换的数量的奇偶性一定与$l ( \sigma ) $相同.</p>
<p>而由于可以如上分解并合并,我们知道$l ( \sigma \tau ) $和$l ( \sigma ) + l ( \tau ) $的奇偶性必然相同.</p>
<p>于是我们可以定义$\text { sgn  } ( \sigma ) = ( - 1 ) ^{ l ( \sigma )  } $,并且容易发现$\text { sgn  } ( \sigma \tau ) = \text { sgn  } ( \sigma ) \text { sgn  } ( \tau ) $.还可以看出$\text { sgn  } ( \sigma ^{ - 1  } ) = \text { sgn  } ( \sigma ) $,那么立刻有$\text { sgn  } ( \sigma ^{ - 1  } \tau \sigma ) = \text { sgn  } ( \tau ) $.用此可以定义奇偶置换的概念,也就是$l ( \sigma ) \in \text { odd  } $的置换$\sigma $是奇置换.</p>
<h4><span id="交错形式">交错形式</span></h4><p>尝试刻画一种交错形式$D : V ^m \to F $,其中$V $是定义在$F $上的线性空间,满足以下性质:</p>
<ol>
<li><p>其对每一个分量都是线性的.也即固定其他$m - 1 $个向量后,剩下的那一个向量的改变也会引起线性的改变.换言之$D ( \cdots , t \vec { v  } _i , \cdots ) = tD ( \cdots , \vec { v  } _i , \cdots ) , D ( \cdots , \vec { v  } _i + v _i ‘ , \cdots ) = D ( \cdots , \vec { v  } _i , \cdots ) + D ( \cdots , \vec { v  } _i ‘ , \cdots ) $.</p>
</li>
<li><p>如果有两个分量相等,那么得到的是$0 $.</p>
</li>
</ol>
<p>在上述基础上容易发现交错形式也是线性空间,不妨将其记作$D _{ V , m  } $.</p>
<p>容易发现$D _{ V , 1  } = V ^\vee $.</p>
<p>初看会觉得(2)是一个很奇怪的事情,但实际上其定义了一种很好的性质:首先我们应当需要一种东西使得如果有一个分量是$\vec { 0  } $则给出$0 $,但如果直接这么定义的话容易看到难以判定一个东西在没有分量为$0 $的时候是否为$0 $,因此这个定义的性质更为优良.事实上,我们有以下性质:</p>
<ol>
<li><p>对于一个固定的$D $而言,将其某一个分量乘以若干倍加到另一个分量上不会引起取值的变化.</p>
</li>
<li><p>对于一个固定的$D $而言,将某一个分量乘以$t $倍,则取值需要乘以$t $倍.</p>
</li>
<li><p>对于一个固定的$D $而言,如果其收到的向量组是线性相关的,那么取值为$0 $.</p>
</li>
<li><p>作为(3)的推论,如果$m &gt; \dim V $,那么$D _{ V , m  } = \{ 0 \} $.</p>
</li>
<li><p>对于一个固定的$D $而言,$D ( \cdots , \vec { v  } _i , \cdots , \vec { v  } _j , \cdots ) = - D ( \cdots , \vec { v  } _j , \cdots , \vec { v  } _i , \cdots ) $.</p>
</li>
<li><p>作为(5)的推论,$D ( \vec { v  } _{ \sigma ^{ - 1  } ( 1 )  } , \cdots , \vec { v  } _{ \sigma ^{ - 1  } ( m )  } ) = \text { sgn  } ( \sigma ) D ( \vec { v  } _1 , \cdots , \vec { v  } _m ) $.</p>
</li>
</ol>
<p>其它几个都是平凡的,下面考虑(5)的证明,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
0 & = D ( \cdots , \vec { v  } _i + \vec { v  } _j , \cdots , \vec { v  } _j + \vec { v  } _i , \cdots ) \\
& = D ( \cdots , \vec { v  } _i , \cdots , \vec { v  } _j , \cdots ) + D ( \cdots , \vec { v  } _i , \cdots , \vec { v  } _i , \cdots ) \\
+ D ( \cdots , \vec { v  } _j , \cdots , \vec { v  } _i , \cdots ) + D ( \cdots , \vec { v  } _j , \cdots , \vec { v  } _j , \cdots ) \\
& = D ( \cdots , \vec { v  } _i , \cdots , \vec { v  } _j , \cdots ) + D ( \cdots , \vec { v  } _j , \cdots , \vec { v  } _i , \cdots ) 
\end{aligned}</script><p>下面我们定义$D _V = D _{ V , n  } $,其中$n = \dim V $,取出其一组有序基$\{ \vec { e  } _1 , \cdots , \vec { e  } _n \} $.对于一组向量$\{ \vec { v  } _{ 1  } , \cdots , \vec { v  } _n \} $,尝试将其分解为$\vec { v  } _i = \sum _{ j  } a _{ i , j  } \vec { e  } _j $.此时逐个展开$D ( \vec { v  } _1 , \cdots , \vec { v  } _n ) $中的向量,理应得知:</p>
<script type="math/tex; mode=display">
\begin{aligned}
D ( \vec { v  } _1 , \cdots , \vec { v  } _n ) & = \sum _{ \sigma \in S _n  } \prod _{ k = 1  } ^n a _{ k , \sigma ( k )  } D ( \vec { e  } _{ \sigma ( 1 )  } , \cdots , \vec { e  } _{ \sigma ( n )  } ) \\
& = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma ) \prod _{ k = 1  } ^n a _{ k , \sigma ( k )  } D ( \vec { e  } _1 , \cdots , \vec { e  } _n ) 
\end{aligned}</script><p>这说明任何一个$D $实际上只由其在基上的作用$D ( \vec { e  } _1 , \cdots , \vec { e  } _n ) $唯一确定.因此$\dim D \leq 1 = \dim F $,原因是线性映射$D _V \to F , D \mapsto D / D ( \vec { e  } _1 , \cdots , \vec { e  } _n ) $是单射.事实上只要$\dim V \geq 1 $,当然可以如上构造$D _e = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma ) \prod _{ k = 1  } ^n a _{ k , \sigma ( k )  } \in D _V \setminus \{ 0 \} $,于是$\dim D \ne 0 $,于是$\dim D = 1 $.</p>
<p>验证$D _e $映射符合定义的过程较为无聊,验证有相同元素则为$0 $是考虑交换它们后$\text { sgn  } $会变号,而还容易简单验证$D _e ( \vec { e  } _1 , \cdots \vec { e  } _n ) = 1 $.</p>
<h4><span id="定义">定义</span></h4><p>考虑有限维的$V , W $,并考虑映射$T ^<em> : D _{ W , m  } \to D _{ V , m  } , D \mapsto ( ( T ^</em> D ) : ( \vec { v  } _1 , \cdots , \vec { v  } _m ) \mapsto D ( T \vec { v  } _1 , \cdots T \vec { v  } _m ) $.</p>
<p>现在取$W = V , m = n = \dim V $,于是$T \in \text { End  } ( V ) , T ^<em> \in \text { End  } ( D _V ) $,由于$\dim D _V = 1 $,于是$T ^</em> $必然是伸缩映射$D \mapsto tD $,那么这个$t $其实就是行列式.更确切地说,我们定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ^* ( D ) & = ( \det T ) D \\
D ( T \vec { v  } _1 , \cdots , T \vec { v  } _n ) & = \det T \times D ( \vec { v  } _1 , \cdots \vec { v  } _n ) 
\end{aligned}</script><p>那么既然其是伸缩映射,我们就当然注意到$\det T = \frac { D _e ( T \vec { e  } _1 , \cdots , T \vec { e  } _n )  } { D _e ( \vec { e  } _1 , \cdots , \vec { e  } _n )  } = D _e ( T \vec { e  } _1 , \cdots , T \vec { e  } _n ) $.</p>
<p>只需简单利用定义就可以注意到行列式的以下性质:</p>
<ol>
<li><p>$\det \text { id  } _V = 1 $.</p>
</li>
<li><p>$\det ( ST ) = \det S \times \det T $.</p>
</li>
<li><p>$T $可逆时,$\det ( T ^{ - 1  } ) = ( \det T ) ^{ - 1  } $.</p>
</li>
<li><p>$T $不可逆时,$\det T = 0 $.</p>
</li>
</ol>
<p>应当警觉的一个事情是我们上面给出的计算$D $的方式是观察$D $在某一组基上的作用,而我们理应判定当选取的基不同的时候$\det T $的唯一性,我们还应当确认的是我们可以将一个$\dim V = n $的线性空间用某一个基打到$F ^n $后也不会有问题,从而引出矩阵的行列式的定义.综上,我们应当验证当以下图表是交换时:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T \ar [d ] _S & V \ar [d ] ^S \\
W \ar [r ] _{ T '  } & W  }</script><p>也即$T ‘ = STS ^{ - 1  } $时$\det T = \det T ‘ $.那么这由行列式的乘法性质当然就可以予以说明.</p>
<p>综上就可以定义矩阵的行列式,我们称方阵$A _{ n \times n  } $的行列式是一个将其映射到标量的函数,记作$\det ( A ) $或者$| A | $.由于一般自然地将$\text { End  } ( V ) \cong M _{ n \times n  } $,于是从上面的计算方式容易见到$\det A = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma ) \prod _{ k = 1  } ^n a _{ k , \sigma ( k )  } = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma ) \prod _{ k = 1  } ^n a _{ \sigma ( k ) , k  } $.</p>
<p>我们应当容易从上述过程中看出以下事实:</p>
<ol>
<li><p>$\det A = \det A ^T $.</p>
</li>
<li><p>$\det I _{ n \times n  } = 1 $.</p>
</li>
<li><p>$\det A $可以看作列向量(或行向量)上的某种交错形式.</p>
</li>
<li><p>如果两个矩阵相似,那么它们的$\det $相等.</p>
</li>
</ol>
<p>而由于行列式是某种交错形式,我们立即可以断言当对其作三种初等行变换的时候:</p>
<ol>
<li><p>(倍加变换):行列式的值不变.</p>
</li>
<li><p>(对换变换):行列式的值取反.</p>
</li>
<li><p>(倍乘变换):行列式的值取相同倍数.</p>
</li>
</ol>
<p>说到这里要声明的某些事情是,我们应当将行列式看作某种交错形式,而并非将所有的交错形式都看作行列式.原因是交错形式一般带有单位,而行列式只是单纯的比例常数.例如我们用行列式求面积的时候,算的其实并不是面积,而是其相对于单位面积的比例常数.</p>
<h4><span id="余子式与代数余子式">余子式与代数余子式</span></h4><p>对于矩阵$A $,$A $的<strong>余子式</strong>$M _{ i , j  } $定义为$A $去掉第$i $行第$j $列的矩阵的行列式.其中形如$M _{ i , i  } $的余子式称为<strong>主余子式</strong>.</p>
<p>对于矩阵$A $,其<strong>代数余子式</strong>(又称<strong>余因子</strong>)$C _{ i , j  } = ( - 1 ) ^{ i + j  } M _{ i , j  } \ $.</p>
<p>那么我们有一种计算行列式的方式是<strong>代数余子式展开</strong>:</p>
<script type="math/tex; mode=display">
\det A = \sum _{ k = 1  } ^n a _{ i , k  } C _{ i , k  } = \sum _{ k = 1  } ^n a _{ k , j  } C _{ k , j  }</script><p>原因是$\sigma ( i ) = j $的位置对逆序对的贡献的奇偶性等同于$i + j $的奇偶性.每次我看这个结论都无法第一时间理解这个性质.但你可以考虑以$\sigma ( i ) = j $作为分界线,然后发现此时怎么交换其它的部分,这个点的奇偶性贡献都是不变的.因此直接考虑在最普通的排列上挪一下,奇偶性就等价于$i - j $的奇偶性了.</p>
<p>值得一提的是我们其实还有类似的公式,当$i \ne j $的时候:</p>
<script type="math/tex; mode=display">
0 = \sum _{ k = 1  } ^n a _{ i , k  } C _{ j , k  } = \sum _{ k = 1  } ^n a _{ k , i  } C _{ k , j  }</script><p>原因是直接定义一个矩阵$B $使得$B $的第$j $行与$A $的第$i $行相等,其余行照搬$A $,那么展开也是上面这个东西,而由于$B $有两行相等,所以$\det B = 0 $.</p>
<p>代数余子式构成的矩阵$C = [ C _{ i , j  } ] $称为<strong>余子矩阵</strong>.其转置称为<strong>伴随矩阵</strong>,我们不妨将伴随矩阵直接记作$\check { A  } $,也有时记其为$\text { adj  } ( A ) $.</p>
<p>其满足$A \check { A  } = \check { A  } A = ( \det A ) I $.二者类似,只考虑证明前者:</p>
<p>考虑前者的第$i $行第$j $列应该是$\sum _{ k  } a _{ i , k  } C _{ j , k  } $,我们早在前面就证明过当$i = j $的时候这个东西应当为$\det A $,反之为$0 $.</p>
<p>由上面立刻得到推论为$A ^{ - 1  } = \frac { \check { A  }  } { \det A  } $.</p>
<p>我们可能还希望去了解$\check { A  } $的$\text { rk  } $与$\det $.事实上我们给出以下若干命题:</p>
<ol>
<li><p>$\det \check { A  } = ( \det A ) ^{ n - 1  } $.</p>
</li>
<li><p>$\text { rk  } ( \check { A  } ) = \begin{cases}n &amp; \text { rk  }  A = n \ 1 &amp; \text { rk  }  A = n - 1 \ 0 &amp; \text { rk  }  A &lt; n - 1 \end{cases} $.</p>
</li>
</ol>
<p>(1)无非是(2)的推论,下面只看(2).</p>
<p>(2)的话,由于$\det A \ne 0 \Rightarrow \det \check { A  } \ne 0 $,所以当$A $满秩的时候也很显然.</p>
<p>当$\text { rk  }  A &lt; n - 1 $的时候,由于取出的所有余子式都线性相关,于是此时$\check { A  } $是$0 $矩阵.</p>
<p>当$\text { rk  }  A = n - 1 $的时候,首先证明其$\text { r  } k \geq 1 $,也就是只需证明至少存在一个余子式不为$0 $.取出$n - 1 $个线性无关的列组成一个$n \times ( n - 1 ) $大小的矩阵.我们之前已经声明过其行秩等于列秩,这样就可以删去其中一行得到一个$( n - 1 ) \times ( n - 1 ) $的满秩矩阵,这个矩阵的行列式不为零.</p>
<p>于是其$\text { rk  } \geq 1 $,我们又根据Frobenius秩不等式,知道考虑$0 = \text { rk  }  ( AI \check { A  } ) \geq \text { rk  }  A + \text { rk  }  \check { A  } - \text { rk  }  I $,于是$\text { rk  }  \check { A  } \leq 1 $.</p>
<h4><span id="行列式定向">行列式定向</span></h4><p>我们知道我们用行列式求平行四边形面积的时候求的是所谓有向面积,问题在于这个方向具体是什么样子呢.</p>
<p>容易见得不同的基对应的矩阵行列式应当是相等的.但基的变换可能拥有不同的行列式.我们曾经研究过$P _{ \mathcal { B  } \to \mathcal { B  } ‘  } $这个坐标变换矩阵的若干性质,而这个变换当然是同构的,所以这个矩阵行列式理应非零,那它就会天然带有正负的区别.我们定义一种基上的等价关系$\sim $,或者称为<strong>同定向的</strong>.具体来说$\mathcal { B  } \sim \mathcal { B  } ‘ \Leftrightarrow \det P _{ \mathcal { B  } ‘ \to \mathcal { B  }  } &gt; 0 $,由于行列式的乘法性质,立刻见到这将所有的基分为了两类.对于$F ^n $来说,我们一般将其标准基所在的那一类称为<strong>标准定向</strong>.这就是为什么我们求行列式的时候会出现正负的差别.</p>
<h4><span id="克拉默cramer法则">克拉默(Cramer)法则</span></h4><p>若$A $可逆,用$A _i ( \vec { b  } ) $表示将$A $的第$i $列替换为$\vec { b  } $后的矩阵,则$A \vec { x  } = \vec { b  } $的唯一解可由下式给出:</p>
<script type="math/tex; mode=display">
x _i = \cfrac { \det A _i ( \vec { b  } )  } { \det A  }</script><p>证明:由于$A $实际上可以看作线性映射不难发现$A \times I _i ( \vec { x  } ) = A _i ( \vec { b  } ) $,则根据行列式的乘法原理,有$( \det A ) ( \det I _i ( \vec { x  } ) ) = \det A _i ( \vec { b  } ) $.而$\det I _i ( \vec { x  } ) = x _i $,于是该定理显然.</p>
<p>或者直接考虑$\vec { x  } = A ^{ - 1  } \vec { b  } = \frac { 1  } { \det A  } \check { A  } \vec { b  } $,于是$x _i = \frac { 1  } { \det A  } \sum _{ k = 1  } ^n C _{ k , i  } b _k $,后者刚好是$A _i ( \vec { b  } ) $沿第$i $列作余子式展开后的结果.</p>
<p>值得一提的是,Cramer法则揭示了$\det \in R ^\times $的环上的矩阵必有逆矩阵</p>
<h4><span id="一些特殊行列式">一些特殊行列式</span></h4><h5><span id="置换矩阵">置换矩阵</span></h5><p>对于一个置换$\sigma $,我们记它的置换矩阵$P _\sigma $满足$P _{ \sigma , i , j  } = \begin{cases}1 &amp; i = \sigma ( j ) \ 0 &amp; \text { otherwise  } \end{cases} $,容易发现它对应了线性映射$\vec { e  } _j \mapsto \vec { e  } _{ \sigma ( j )  } $.容易看出$P _\sigma P _\tau = P _{ \sigma \tau  } $并且$P _{ \sigma ^{ - 1  }  } = ( P _\sigma ) ^{ - 1  } = ( P _\sigma ) ^T $.容易由行列式理论得知$| P _\sigma | = \text { sgn  } ( \sigma ) $.</p>
<h5><span id="上三角矩阵">上三角矩阵</span></h5><p>用代数余子式展开立刻见到上三角矩阵的行列式就是其对角线的乘积.这比用高斯消元更好,因为对角线未必可逆.</p>
<h5><span id="分块上三角矩阵">分块上三角矩阵</span></h5><p>也即$\left | \begin{matrix}A _{ 1 , 1  } &amp; \cdots &amp; \cdots \ 0 &amp; \ddots &amp; \vdots \ 0 &amp; 0 &amp; A _{ n , n  } \end{matrix} \right | = \prod _{ i = 1  } ^n \det A _{ i , i  } $.</p>
<p>证明考虑数学归纳,先把左上角那一坨变成一个分块矩阵,那我们只需要证明$\left | \begin{matrix}A _{ 1 , 1  } &amp; A _{ 1 , 2  } \ 0 &amp; A _{ 2 , 2  } \end{matrix} \right | = \det A _{ 1 , 1  } \det A _{ 2 , 2  } $.</p>
<p>这个怎么证明呢?考虑直接套定义,我们知道行列式的定义是:$\det A = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma ) \prod _{ k = 1  } ^n a _{ k , \sigma ( k )  } $,此时意识到如果$k &gt; n _1 , \sigma ( k ) \leq n _1 $那么此时$a _{ k , \sigma ( k )  } = 0 $,所以这个$\sigma $应当分为两部分,一部分是$[ 1 , n _1 ] $部分内部交换,另一部分是$[ n _1 + 1 , n _1 + n _2 ] $内部交换,这样我们把$\sigma = \sigma _1 \sigma _2 $,上述表达式变为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det A & = \sum _{ \sigma \in S _n  } \text { sgn  } ( \sigma _1 ) \prod _{ k = 1  } ^{ n _1  } a _{ k , \sigma _1 ( k )  } \text { sgn  } ( \sigma _2 ) \prod _{ k = n _1 + 1  } ^{ n _1 + n _2  } a _{ k , \sigma _2 ( k )  } \\
& = \det A _{ 1 , 1  } \det A _{ 2 , 2  } 
\end{aligned}</script><h5><span id="范德蒙德vandermonde行列式">范德蒙德(Vandermonde)行列式</span></h5><p>即$\left | \begin{matrix}1 &amp; \cdots &amp; 1 \ x _1 &amp; \cdots &amp; x _n \ \vdots &amp; &amp; \vdots \ x _1 ^{ n - 1  } &amp; \cdots &amp; x _n ^{ n - 1  } \end{matrix} \right | = \prod _{ 1 \leq i &lt; j \leq n  } ( x _j - x _i ) $.</p>
<p>这个怎么求呢?我们先逐个消第一列(先用第$n - 1 $行消第$n $行,再用第$n - 2 $行消第$n - 1 $行,以此类推),我们得到的就是以下行列式:</p>
<script type="math/tex; mode=display">
\left | \begin{matrix}
1 & 1 & \cdots & 1 \\
0 & x _2 - x _1 & \cdots & x _n - x _1 \\
0 & \vdots & & \vdots \\
0 & x _2 ^{ n - 1  } - x _1 x _2 ^{ n - 2  } & \cdots & x _n ^{ n - 1  } - x _1 x _n ^{ n - 2  } 
\end{matrix} \right |</script><p>对这个的第一列作代数余子式展开,知道它应当等于:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\left | \begin{matrix}
x _2 - x _1 & \cdots & x _n - x _1 \\
\vdots & & \vdots \\
x _2 ^{ n - 1  } - x _1 x _2 ^{ n - 2  } & \cdots & x _n ^{ n - 1  } - x _1 x _n ^{ n - 2  } 
\end{matrix} \right | \\
& = \left | \begin{matrix}
1 & \cdots & 1 \\
\vdots & & \vdots \\
x _2 ^{ n - 2  } & \cdots & x _n ^{ n - 2  } 
\end{matrix} \right | \prod _{ 1 < j \leq n  } ( x _j - x _1 ) 
\end{aligned}</script><p>然后数学归纳就证完了.</p>
<h5><span id="一类分块矩阵">一类分块矩阵</span></h5><p>考虑$\left | \begin{matrix}I &amp; B \ A &amp; I \end{matrix} \right | = \det ( I - AB ) $.此时观测其对基的作用,注意到其和$\begin{bmatrix}I &amp; A \ B &amp; I \end{bmatrix} $无非是在不同基下的同种线性映射,于是$\det ( I - AB ) = \det ( I - BA ) $.</p>
<h4><span id="特征多项式">特征多项式</span></h4><p>自映射$T = \text { End  } ( V ) $本身作为一个定义了乘法和加法的元素,理应可以嵌入多项式结构中.因此不妨定义多项式$f ( T ) = \sum _{ k = 0  } ^m a _k T ^k $.</p>
<p>此时设$\dim V = n $有限,那么$\dim T = n ^2 $,考虑以下$n ^2 + 1 $个此空间上的向量$T ^0 , \ldots , T ^{ n ^2  } $,它们必定线性相关,也就是存在一组不全为$0 $的$\{ c _k \} $使得$f ( T ) = \sum _{ k = 0  } ^{ n ^2  } c _k T ^k = 0 $.</p>
<p>如果$T $可逆,那我们考虑可以取一个满足上述条件的$f $使得$c _0 \ne 0 $,原因是可以不断两边除去$T $.那最终就会拿到$c _0 \text { id  } + \sum _{ k = 1  } ^m c _k T ^k = 0 $,对此式子再简单处理可知以下结论:对于一个可逆的$T $,存在一个多项式$g ( T ) $使得$T ^{ - 1  } = g ( T ) = - \frac { 1  } { c _0  } \sum _{ k = 1  } ^{ m  } c _k T ^{ k - 1  } $.并且注意到$\deg g ( T ) \leq n ^2 $.</p>
<p>将此定义挪到矩阵上,定义其特征多项式$\text { char  } _A ( x ) = \det ( xI - A ) $.由定义立刻得知$\text { char  } _A ( x ) = \sum _{ \sigma  } \text { sgn  } ( \sigma ) \prod _{ i = 1  } ^n ( [ i = \sigma ( i ) ] x - a _{ i , \sigma ( i )  } ) $.于是容易发现$\text { char  } _A ( 0 ) = ( - 1 ) ^n \det A $.并且这个多项式应该首项为$1 $.</p>
<p>容易观察到相似的矩阵应当有相同的特征多项式,原因是$\det ( xI - A ) = \det ( P ^{ - 1  } ( xI - B ) P ) = \det ( xI - B ) $.这意味着其和基的选取无关,因此特征多项式可以拓展到一般的线性映射上.</p>
<p>另外转置不影响特征多项式的取值,原因是转置也不影响$\det $的取值.</p>
<p>分块上三角矩阵的特征多项式就是对角线矩阵特征多项式的乘积.</p>
<p>我们还可以有以下性质:当$A \in M _{ m \times n  } , B \in M _{ n \times m  } $,则$\cfrac { \text { char  } _{ AB  }  } { x ^m  } = \cfrac { \text { char  } _{ BA  }  } { x ^n  } $.</p>
<p>原因是考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x ^{ - m  } \text { char  } _{ AB  } \\
& = x ^{ - m  } \det ( xI - AB ) \\
& = \det ( I - x ^{ - 1  } AB ) \\
& = \det ( I - x ^{ - 1  } BA ) \\
& = x ^{ - n  } \text { char  } _{ BA  } 
\end{aligned}</script><p>原因是我们已经证明过了$\det ( I - AB ) = \det ( I - BA ) $.</p>
<p>仅仅如此当然不够好用,然而注意到如果$AB $以$\lambda _0 \ne 0 $为特征值的特征向量是$\vec { v  } $,那么$BA $以$\lambda _0 $为特征值的特征向量就是$B \vec { v  } $.</p>
<p>应当研究伴随矩阵在特征多项式下的情形,事实上有以下定理:如果$\text { char  } _A = \sum _{ k = 0  } ^n c _k x ^k $,那么$( - 1 ) ^{ n - 1  } \check { A  } = \sum _{ k = 1  } ^n c _{ k  } A ^{ k - 1  } $.</p>
<p>考虑证明以上定理,考虑$\text { adj  } ( xI - A ) $的每一个元素都是一个次数$\leq n - 1 $的多项式,对其进行分解得到$\text { adj  } ( xI - A ) = \sum _{ k = 0  } ^{ n - 1  } x ^k D _k $,其中$D _k $是一个矩阵,代表不同位置$x ^k $前的系数.</p>
<p>而我们知道$\text { char  } _A ( x ) I = ( xI - A ) \times \text { adj  } ( xI - A ) = ( xI - A ) \sum _{ k = 0  } ^{ n - 1  } x ^k D _k $.</p>
<p>两边提取系数,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
c _n I & = D _{ n - 1  } \\
c _{ n - 1  } I & = - AD _{ n - 1  } + D _{ n - 2  } \\
c _{ n - 2  } I & = - AD _{ n - 2  } + D _{ n - 3  } \\
\cdots 
\end{aligned}</script><p>将上面这些若干式子右边乘以$A ^{ k  } $并相加就可以做到相消,得到$D _0 = \sum _{ k = 1  } ^n c _{ k  } A ^{ k - 1  } $,而$D _0 $按照定义就是$\text { adj  } ( 0 I - A ) = ( - 1 ) ^{ n - 1  } \check { A  } $.</p>
<p>根据上述定理有以下结论:</p>
<ol>
<li><p>$( A ^\vee ) ^T = ( A ^T ) ^\vee $.</p>
</li>
<li><p>$\text { adj  } { ( P ^{ - 1  } AP )  } = P ^{ - 1  } \check { A  } P $.</p>
</li>
</ol>
<p>另外,如果$\text { char  } _A = \sum _{ k = 0  } ^n c _k x ^k $,那么$\text { char  } _{ A ^{ - 1  }  } = \sum _{ k = 0  } ^n \frac { c _k  } { c _0  } x ^{ n - k  } $.</p>
<p>原因是观察到$( - 1 ) ^n c _0 \times \text { char  } _{ A ^{ - 1  }  } = \det A \times \det ( xI - A ^{ - 1  } ) = ( - x ) ^n \det ( x ^{ - 1  } I - A ) $.</p>
<h4><span id="cayley-hamilton定理">Cayley-Hamilton定理</span></h4><p>即:$\text { char  } _A ( A ) = 0 $.</p>
<p>原因是根据上述定理,由于$c _0 = ( - 1 ) ^n \det A $,我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ k = 0  } ^n c _k A ^k & = ( ( - 1 ) ^n \det A ) \times I + A \sum _{ k = 1  } ^n c _k A ^{ k - 1  } \\
& = ( ( - 1 ) ^n \det A ) \times I + ( - 1 ) ^{ n - 1  } A \check { A  } \\
& = 0 
\end{aligned}</script><h4><span id="矩阵的迹">矩阵的迹</span></h4><p>定义$A \in M _{ n \times n  } ( F ) $的<strong>迹</strong>$\text { tr  }  A = \sum _{ i = 1  } ^n a _{ i , i  } $.显然$tr ( A + B ) = tr ( A ) + tr ( B ) $.容易验证$tr : M _{ n \times n  } ( F ) \to F $是线性映射,并且$\forall A \in M _{ n \times m  } ( F ) , B \in M _{ m \times n  } ( F ) $有$tr ( AB ) = tr ( BA ) $.</p>
<p>于是共轭的矩阵有相同的迹,原因是$tr ( P ^{ - 1  } AP ) = tr ( APP ^{ - 1  } ) = tr ( A ) $.这应当意味着迹这个东西有一些更好的性质.事实上,迹的等价定义是$tr ( A ) = - [ x ^{ n - 1  } ] \text { char  } _A $,原因是$\text { char  } _A ( x ) = \sum _{ \sigma  } \text { sgn  } ( \sigma ) \prod _{ i = 1  } ^n ( [ i = \sigma ( i ) ] x - a _{ i , \sigma ( i )  } ) $,从这里立刻看出只有恒等映射$\sigma = \text { id  } $的时候才会对$[ x ^{ n - 1  } ] $产生贡献.</p>
<h6><span id="example">Example</span></h6><p>证明:如果$tr ( A ) = 0 $,而且域的特征$\text { char  }  F = 0 $,那么存在$A ‘ = PAP ^{ - 1  } $使得$\forall i \in [ 1 , n ] , a ‘ _{ i , i  } = 0 $.</p>
<p>如果$A = 0 $就下班了对吧,如果$A \ne 0 $,我们下面来数学归纳证明.假设$&lt; n $的时候已经得证.</p>
<p>首先我们说明:如果对于所有的$\vec { v  } \in F ^n $都存在$c _v \in F $使得$A \vec { v  } = c _v \vec { v  } $,那么存在$c \in F $使得$A = cI $.</p>
<p>考虑线性无关的两个向量$\vec { v  } , \vec { w  } $,如果$c _v \ne c _w $,考虑$c _v \vec { v  } + c _w \vec { w  } = A ( \vec { v  } + \vec { w  } ) = c _{ v + w  } ( \vec { v  } + \vec { w  } ) $,于是自然导出$c _v = c _{ v + w  } = c _w $,矛盾.于是上述命题成立.</p>
<p>对于一个$tr ( A ) = 0 $的矩阵当然不是$cI $的形式,那我们就可以找到一个$\vec { v  } $使得$A \vec { v  } \ne c \vec { v  } $,于是$A \vec { v  } $和$\vec { v  } $线性无关.此时考虑将其扩充为一个基$\{ \vec { v  } , A \vec { v  } , \vec { v  } _3 , \cdots , \vec { v  } _n \} $,考虑当然存在一个$C $使得$C = P _1 ^{ - 1  } AP _1 $这样$C $是对上述基的作用.那我们考虑$C ( \vec { v  } ) = A \vec { v  } $,于是$C $应当形如:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
0 & \cdots \\
1 & \vdots \\
0 & \vdots \\
\vdots & \vdots 
\end{bmatrix}</script><p>不妨设$C = \begin{bmatrix}0 &amp; T \ L &amp; B \end{bmatrix} $,我们知道根据归纳假设,对于$B $来说存在一个$P _2 $使得$P _2 ^{ - 1  } BP _2 $的对角线全零,那我们考虑:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & 0 \\
0 & P _2 ^{ - 1  } 
\end{bmatrix} \begin{bmatrix}
0 & T \\
L & B 
\end{bmatrix} \begin{bmatrix}
1 & 0 \\
0 & P _2 
\end{bmatrix} = \begin{bmatrix}
0 & \_ \\
\_ & P _2 ^{ - 1  } BP _2 
\end{bmatrix}</script><p>这样就做完了.</p>
<h4><span id="binet-cauchy定理">Binet-Cauchy定理</span></h4><p>定义大小分别为$n \times m $和$m \times n $(其中$n \leq m $)的矩阵$A $和$B $,令$A [ S ] $表示矩阵$A $只取$S $集合中的列所形成的矩阵,$B [ S ] $表示矩阵$B $只取$S $集合中的行所形成的矩阵,则有:</p>
<script type="math/tex; mode=display">
\det ( AB ) = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } ( \det ( A [ S ] ) ) ( \det ( B [ S ] ) )</script><p>下面设$\lambda ( P ) $为排列$P $的逆序对数.</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } ( \det ( A [ S ] ) ) ( \det ( B [ S ] ) ) \\
& = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } ( \sum _{ P  } ( - 1 ) ^{ \lambda ( P )  } \prod _{ i = 1  } ^n A _{ i , S _{ P _i  }  } ) ( \sum _{ Q  } ( - 1 ) ^{ \lambda ( Q )  } \prod _{ i = 1  } ^n B _{ S _i , Q _i  } ) \\
& = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } \sum _{ P  } \sum _{ Q  } ( - 1 ) ^{ \lambda ( P ) + \lambda ( Q )  } \prod _{ i = 1  } ^n A _{ i , S _{ P _i  }  } B _{ S _i , Q _i  } 
\end{aligned}</script><p>若让$R $为可重集合,换言之让其取遍$m ^n $种情况,又有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det ( AB ) & = \sum _{ P  } ( - 1 ) ^{ \lambda ( P )  } \prod _{ i = 1  } ^n ( \sum _{ j = 1  } ^m A _{ i , j  } B _{ j , P _i  } ) \\
& = \sum _{ P  } ( - 1 ) ^{ \lambda ( P )  } \sum _{ R , \forall i , R _i \in [ 1 , m ]  } ( \prod _{ i = 1  } ^n A _{ i , R _i  } B _{ R _i , P _i  } ) \\
& = \sum _{ R , \forall i , R _i \in [ 1 , m ]  } \sum _P ( - 1 ) ^{ \lambda ( P )  } ( \prod _{ i = 1  } ^n A _{ i , R _i  } ) ( \prod _{ i = 1  } ^n B _{ R _i , P _i  } ) 
\end{aligned}</script><p>如果$\exists 1 \leq i , j \leq n , i \ne j $,$R _i = R _j $,则交换$P _i , P _j $后,后面的值仍然不变,可逆序对的奇偶性改变了.如果我们对于每一个重复序列都选取最靠前的一对,那么显然只有$R $不重的情况才有可能产生贡献.既然如此,$R $的生成方式就应该是先顺序取子集再用一个排列打乱顺序.</p>
<p>所以我们有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det ( AB ) & = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } \sum _{ Q  } \sum _{ P  } ( - 1 ) ^{ \lambda ( P )  } ( \prod _{ i = 1  } ^n A _{ i , S _{ Q _i  }  } ) ( \prod _{ i = 1  } ^n B _{ S _{ Q _i  } , P _i  } ) \\
& = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } \sum _{ Q  } \sum _{ P _{ Q '  }  } ( - 1 ) ^{ \lambda ( P _{ Q '  } )  } ( \prod _{ i = 1  } ^n A _{ i , S _{ Q _i  }  } ) ( \prod _{ i = 1  } ^n B _{ S _i , P _{ Q ' _i  }  } ) \\
& = \sum _{ S \subseteq \{ 1 , 2 , . . . , m \} , | S | = n  } \sum _{ Q  } \sum _{ P _{ Q '  }  } ( - 1 ) ^{ \lambda ( P ) + \lambda ( Q )  } ( \prod _{ i = 1  } ^n A _{ i , S _{ Q _i  }  } ) ( \prod _{ i = 1  } ^n B _{ S _i , P _{ Q ' _i  }  } ) \\

\end{aligned}</script><p>左右显然相等.</p>
<p>另外,这个定理有更简单的证明方法,即使用LGV引理与组合意义证明.</p>
<p>不妨设现在有个点的集合$A , B , C $,现在想求出$A \rightarrow B \rightarrow C $的不交路径的奇偶数量差,会发现左右的组合意义是相等的.</p>
<p>于此之外,还有一个纯代数的证明策略,不妨定义符号$A \binom { I  } { J  } = A \binom { i _1 , \cdots , i _r  } { j _1 , \cdots , j _s  } $表示提取下标集$I $和$J $分别作为行列得到的矩阵.</p>
<p>先证明一个引理:$C \in M _{ n \times n  } , [ x ^{ n - k  } ] \det ( xI + C ) = \sum _{ I \in \{ 1 , \cdots , n \} , | I | = k  } \det C \binom { I  } { I  } $.</p>
<p>回忆到运算符$\delta _{ i , j  } = [ i = j ] $,应当注意到:$\det ( xI + C ) = \sum _{ \sigma  } \text { sgn  } ( \sigma ) \prod _{ i = 1  } ^n ( x [ i = j ] + c _{ i , \sigma ( i )  } ) $,此时要想凑出$x ^{ n - k  } $,就需要有$n - k $个位置被卡死,而剩下的部分无非是提取剩下$k $行$k $列后的结果.就可以见到上述引理无非定义的平凡推论.</p>
<p>然后开始证明该定理,回忆到我们已经证明过$x ^{ m - n  } \det ( xI + AB ) = \det ( xI + BA ) $.此时对左右两边取$[ x ^{ m - n  } ] $,左边取出了$\det ( xI + AB ) $的常数项,亦即$\det ( AB ) $.而右边,按上述引理得知得到了$\sum _{ I \in \{ 1 , \cdots , n \} , | I | = k  } \det \left ( ( BA ) \binom { I  } { I  } \right ) $,而这恰为原本右式的矩阵乘法定义.</p>
<p>由该定理得知,对于$A \in M _{ m \times n  } $,$\det { A ^T A  } \geq 0 $.</p>
<h4><span id="特征值与特征向量">特征值与特征向量</span></h4><p>我们之前应当已经见到,如果一个矩阵是分块对角矩阵,那这个矩阵应当相当容易处理,原因是其加减乘运算无非只是在对角线上的适当操作而已.这引发我们选取适当的直和分解$V = \bigoplus V _k $将原本的矩阵化为合适的分块对角矩阵.</p>
<p>然而如果我们想要拿到具体的矩阵就不可避免地需要选基,因此在固定的基意义下,我们对于一个矩阵$A $,应当思考能否通过换基操作使得$A = P ^{ - 1  } BP $,其中$B $是一个分块对角矩阵,那此时$A $也拥有相当好的性质.</p>
<p>考虑最简单的情况,即每个分块都是单个元素的情况,此时该矩阵应当就是一个对角矩阵.这相当于选定一组基$\{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $后,取$V _k = \text { span  } \{ \vec { v  } _k \} $并将这些$V _k $取直和得到$V $,此时该线性映射应当给出$T \vec { v  } _k = \lambda _k \vec { v  } _k $,即只能做一个伸缩变换.上面的种种操作都引诱我们去思考能否进行以上操作,这就引入下面的定义:</p>
<p>设$T \in \text { End  } ( V ) $并且$\lambda \in F $,我们引入如下定义:</p>
<ol>
<li><p>称子空间$V _\lambda = \ker ( \lambda \times \text { id  } _V - T ) $为$T $的$\lambda $<strong>特征子空间</strong>,若$V _\lambda \ne \{ 0 \} $,则称$\lambda $为$T $的<strong>特征值</strong>.</p>
</li>
<li><p>对于$\vec { v  } \in V _\lambda $,换言之$T \vec { v  } = \lambda \vec { v  } $,而且$\vec { v  } \ne 0 $,则称$\vec { v  } $是$T $的一个<strong>特征向量</strong>,以$\lambda $为特征值.</p>
</li>
</ol>
<p>考虑特征值的定义等价于$\det ( \lambda \times I - T ) = 0 $,于是等价于$\text { char  } _T ( \lambda ) = 0 $.立刻见到一个$\lambda $是特征值等价于其是$\text { char  } _T = 0 $的一个根.反之,$\text { char  } _T = 0 $的一个根也一定对应了一个非空的特征子空间,也就对应了一组非零特征向量.如果$T $分裂,见到行列式其实是特征值的乘积,而迹实际上是特征值的加和.应当见到,一个矩阵可逆等价于其不存在$0 $特征值.</p>
<p>考虑对角化,如果我们能在上面取出若干$\vec { v  } $组成一组基,那直接用这组基就可以把$T $拆成在这组基上的伸缩变换,这样就实现了对角化.因此如果我们能取出一组基使得每一个基对$A $都是特征向量,我们称$A $是<strong>可对角化的</strong>.立刻见到可对角化的必要条件是$\text { char  } _A $分裂.</p>
<p>如果$T $可对角化,我们有$\dim V _\lambda = d $,其中$d $是$\lambda $作为特征多项式的根的重数.如果其可对角化,直接按上述方式取基得到$z $,并且$PTP ^{ - 1  } $就是在标准基下的变换矩阵.那么直接考虑$\text { rk  } ( \lambda _n I - T ) = n - d $,其中$d $是$\lambda _n $的重数.用同态基本定理立刻得到$V _{ \lambda _n  } = d $.(注意这里都是在讨论可对角化的前提下)</p>
<p>我们希望能把$V _{ \lambda _k  } $给做直和,那我们就需要做前置工作.具体而言,我们需要证明选取$\vec { v  } _k \in V _{ \lambda _k  } $,那么$\sum \vec { v  } _k = \vec { 0  } \Leftrightarrow \forall k , \vec { v  } _k = \vec { 0  } $.使用数学归纳,注意到$T ( \sum \vec { v  } _k ) = \sum \lambda _k \vec { v  } _k = 0 $,又知道$\lambda _1 \sum \vec { v  } _k = 0 $,两者一消就可以进行数学归纳.</p>
<p>由上面的过程得知下述命题等价:</p>
<ol>
<li><p>$T $在$F $上可对角化.</p>
</li>
<li><p>$\sum _{ \lambda \in F  } \dim V _{ \lambda  } = \dim V $.</p>
</li>
<li><p>$\bigoplus _{ \lambda \in F  } V _\lambda = V $.</p>
</li>
</ol>
<p>其推论是如果所有的$\lambda _k $互不相同,那么$\dim V _{ \lambda _k  } \geq 1 $,这必然给出$T $可对角化.这似乎告诉我们去除重数有某种很好的性质.</p>
<h4><span id="极小多项式">极小多项式</span></h4><p>考虑对于一个多项式$h \in F [ x ] $,当我们将$T \in \text { End  } ( V ) $带入之后当然会得到一个$h ( T ) \in \text { End  } ( V ) $,现在固定$h , T $,以此构造一个子空间$V [ h ] = \ker ( h ( T ) ) = \{ \vec { v  } \in V | h ( T ) \vec { v  } = 0 \} $.</p>
<p>此时注意到$T ( V [ h ] ) \subseteq V [ h ] $,原因是$T $与自身交换,于是$\forall \vec { v  } \in V [ h ] $,应当有$h ( T ) ( T \vec { v  } ) = Th ( T ) \vec { v  } = T ( \vec { 0  } ) = \vec { 0  } $,这意味着$T \vec { v  } \in V [ h ] $.于是可见到$V [ h ] $实际上是一个$T $不变子空间.</p>
<p>取$h = x - \lambda I $,那么$V [ h ] $其实就是我们上述所说的$V _\lambda $,因此$V _\lambda $也是$T $不变的.从这里立刻能看出些什么,比如当$\dim V _\lambda = 1 $的时候,$T $不变当然意味着伸缩变换.</p>
<p>那我们既然需要这个东西用在$V _\lambda $上,首要要做的当然是分析在其上面的直和分解.换言之,我们下面试图证明如下引理(核引理):$f \bot g $的时候,$V [ fg ] = V [ gf ] = V [ f ] \oplus V [ g ] $.</p>
<p>原因是考虑$F [ x ] $的主理想性引出其裴蜀定理,那么就存在多项式$a , b $使得$af + bg = 1 $.此时$\vec { v  } = ( af + bg ) ( T ) \vec { v  } = a ( T ) ( f ( T ) \vec { v  } ) + b ( T ) ( g ( T ) \vec { v  } ) $.注意到如果$\vec { v  } \in V [ fg ] $,那么$f ( T ) \vec { v  } \in V [ g ] , g ( T ) \vec { v  } \in V [ f ] $,而$V [ g ] $和$V [ f ] $对$a ( T ) $和$b ( T ) $都是不变子空间,原因是它们对$T $都是不变子空间,这必然意味着$a ( T ) ( f ( T ) \vec { v  } ) \in V [ g ] $,后者亦然同理.这意味着$V [ fg ] \subseteq V [ f ] + V [ g ] $,而$V [ f ] \subseteq V [ fg ] , V [ g ] \subseteq V [ fg ] $,这立刻得到$V [ fg ] = V [ f ] + V [ g ] $.此时检查$\vec { v  } \in V [ g ] \cap V [ f ] $,发现$\vec { v  } = ( af + bg ) ( T ) \vec { v  } = \vec { 0  } $,这就意味着$V [ fg ] = V [ f ] \oplus V [ g ] $.</p>
<p>考虑$I = \{ f \in F [ x ] | f ( T ) = 0 _V \} $,容易见到其应当也有某种$\ker $的性质,事实上可以证明它是一个理想,原因是当然满足加法和乘法的封闭律.而由于$F [ x ] $是一个主理想环,那么上面就应当存在一个$\deg $极小的$h $,使得$I = ( h ) $,不妨将$h $规范化为首一的多项式.那么以上操作给出:$f ( T ) = 0 \Leftrightarrow h | f $.</p>
<p>由Cayley-Hamilton定理,当维度有限的时候,这样的多项式必然存在,这就意味着$I \ne \{ 0 \} $,此时我们就把上面的这个$h $叫做$T $的<strong>极小多项式</strong>$\text { Min  } _T $.</p>
<p>值得一提的是如果$A $是在$F $上的矩阵,其极小多项式为$\text { Min  } _{ A , F  } $,$F $是$E $的子域,$A $在$E $上的极小多项式为$\text { Min  } _{ A , E  } $,则$\text { Min  } _{ A , F  } = \text { Min  } _{ A , E  } $.原因是首先$\text { Min  } _{ A , E  } | \text { Min  } _{ A , F  } $,于是$\text { Min  } _{ A , E  } = \text { Min  } _{ A , F  } $等价于$A ^0 , \cdots , A ^{ d - 1  } $线性无关,其中$d = \deg \text { Min  } _{ A , F  } $.而判定线性无关实际上是用高斯消元判定的,和域的选取无关.</p>
<p>用一次Cayley-Hamilton定理,知道$\text { Min  } _T | \text { char  } _T $.既然如此,$\text { Min  } _T $保留了$\text { char  } _T $的哪些具体性质呢?它们之间的关系又如何呢?我们下面尝试证明:如果$\lambda $是$T $的特征值,当且仅当$\text { Min  } _T ( \lambda ) = 0 $.</p>
<p>充分性显然,因为我们已经声明了只要是$\text { char  } _T $的一个根就自动是特征值.</p>
<p>下面证明必要性:注意到如果$\lambda $是特征值,此时$\vec { 0  } = \text { Min  } _T ( T ) \vec { v  } = \text { Min  } _T ( \lambda ) \vec { v  } $,原因是观察到如果$T \vec { v  } = \lambda \vec { v  } $,那么立刻得到$f ( T ) \vec { v  } = f ( \lambda ) \vec { v  } $.于是立刻得到$\text { Min  } _T ( \lambda ) = 0 $.</p>
<p>此时见到端倪,我们再证明以下定理:</p>
<p>对于固定的$T \in \text { End  } ( V ) $如果有直和分解$V = \bigoplus V _k $,其中每个$V _k $都是$T $不变子空间,那么就可以把$T $限制到相应的$V _k $空间内,记作$T | _{ V _k  } \in \text { End  } ( V _k ) $,那在这些空间内部自然有它们自己的极小多项式$\text { Min  } _{ T _k  } $,我们断言$\text { Min  } _T = \text { lcm  } _k ( \text { Min  } _{ T _k  } ) $.原因是由于直和的性质,$f ( T ) = \vec { 0  } $当且仅当对于每一个$k $,$f ( T _{ k  } ) = 0 $,应用极小多项式的定义立刻见到上述结论显然.</p>
<p>对于$T \in \text { End  } ( V ) $,我们应当能见到此时$V = V [ \text { Min  } _{ T  } ] $.那么反过来,$V [ \text { Min  } _T ] = V $的极小多项式当然也是$\text { Min  } _T $本身,这只是定义.</p>
<p>不妨设$\text { Min  } _T = fg $并且$f \bot g $,从上面当然可以知道$V = V [ f ] \oplus V [ g ] $.此时我们应当思考的是$V [ f ] $中的极小多项式是否是$f $,$V [ g ] $中的极小多项式是否是$g $.而$\text { Min  } _T $是$V [ f ] $和$V [ g ] $中极小多项式的乘积,它们中的极小多项式又只是$f , g $的因子,那必然见到极小多项式就是它们.</p>
<p>我们理应从上面的分析中见到极小多项式形态的一种刻画,我们接下来尝试证明,如果$T $在$F $上可对角化,其特征值去重后是$\lambda _1 , \cdots , \lambda _m $,那么最小多项式$\text { Min  } _T = \prod _{ k = 1  } ^m ( x - \lambda _k ) $.</p>
<p>原因是考虑$T $可对角化导致$V $可以被拆成特征子空间的直和$V = \bigoplus _{ k = 1  } ^m V _{ \lambda _k  } $.而其限制在每一个特征子空间上都是一个伸缩变换,其对应的极小多项式无外乎$x - \lambda _k $,这样就得到上面的结论.</p>
<p>上述结论反之依然成立,那我们可以拿出一个更好的结论了,即:$T $在$F $上可对角化的充要条件是极小多项式$\text { Min  } _T \in F [ x ] $分裂并且无重根.</p>
<p>必要性在上面已经证明,接下来说明充分性.</p>
<p>当$\text { Min  } _T = \prod _{ k = 1  } ^m ( x - \lambda _k ) $的时候,我们下面证明$T $可对角化,顺便说明此时$\lambda _1 , \cdots , \lambda _m $就是$T $的特征值去重后的结果.运用上述结论可以知道$V = \bigoplus V [ x - \lambda _k ] $.然而$V [ x - \lambda _k ] = V _{ \lambda _k  } $,这立刻就回到了可对角化的等价条件,于是充分性得证.</p>
<p>应当能从上面看出可对角化的某种拆分性,事实上,如果$T \in \text { End  } ( V ) $可对角化,$V _0 \subseteq V $是$T $下的不变子空间,则$T | _{ V _0  } \in \text { End  } ( V _0 ) $和$\bar { T  } \in \text { End  } ( V / V _0 ) $都可以对角化.原因是它们的极小多项式都应当是$\text { Min  } _T $的因子.</p>
<p>然而也可以看出来上述命题的逆并不成立,因为拆出来的两个的极小多项式并不一定互质.</p>
<h4><span id="同步对角化">同步对角化</span></h4><p>设$\mathcal { S  } \subseteq \text { End  } ( V ) $,如果存在$V $的基$\vec { v  } _1 , \cdots , \vec { v  } _n $使得每个$\vec { v  } _i $都是所有$T \in \mathcal { S  } $的共同的特征向量,换言之每一个$T $都可以用同样的一个可逆矩阵$P $使得$P ^{ - 1  } AP $是对角的,那我们称$\mathcal { S  } $在$F $上可以<strong>同步对角化</strong>.</p>
<p>我们首先证明一个引理:如果$ST = TS $,那么$T $的任何一个特征子空间$V _\lambda $都是$S $的一个不变子空间.原因是对于$\vec { v  } \in V _\lambda $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T \vec { v  } & = \lambda \vec { v  } \\
ST \vec { v  } & = \lambda ( S \vec { v  } ) \\
T ( S \vec { v  } ) & = \lambda ( S \vec { v  } ) 
\end{aligned}</script><p>所以$S \vec { v  } \in V _\lambda $.</p>
<p>我们得知同步对角化的充要条件应该是以下两条同时成立:</p>
<ol>
<li><p>每个$T \in \mathcal { S  } $在$F $上都可对角化.</p>
</li>
<li><p>$\forall T , T ‘ \in \mathcal { S  } $,$TT ‘ = T ‘ T $.</p>
</li>
</ol>
<p>必要性显然,下面来说明充分性.</p>
<p>取出$T _1 $的所有特征子空间$V _\lambda $,由于$T ‘ $可对角化,所以其限制在$T ‘ | _{ V _\lambda  } $上肯定也可对角化.如果我们能说明限制在每一个特征子空间$V _\lambda $上时都可以同步对角化,由于特征子空间是直和分解,所以取直和后当然也可以.此时注意到限制后的$T ‘ $必然也有交换律,而$T _1 | _{ V _\lambda  } $本身应当是$\lambda I $.这个东西怎么着都是可对角化的,因此就只需要对除了$T _1 $剩下部分继续做,这样就实现了数学归纳.</p>
<h4><span id="上三角化">上三角化</span></h4><p>回忆到我们之前曾经提过的旗的概念,我们在下面断言:若$T \in \text { End  } ( V ) $保持$V $的一组完备旗,则$T $在$F $上<strong>可上三角化</strong>,也就是其可以换基得到一个上三角矩阵.</p>
<p>我们已经得知一般的矩阵未必能对角化,那能不能退而求其次讲一个矩阵通过共轭转化为上三角的形式呢?我们下面证明:$\text { char  } _T $在$F $上分裂是$T $在$F $上可上三角化的充要条件.</p>
<p>先证明必要性:当其可上三角化的时候,可以取$V $的一组有序基,使得$T $对应的矩阵形如$\begin{bmatrix}\lambda _1 &amp; \cdots &amp; \cdots \ 0 &amp; \ddots &amp; \cdots \ 0 &amp; 0 &amp; \lambda _n \end{bmatrix} $,此时立刻能得到其$\text { char  } _T = \prod ( x - \lambda _k ) $,这立刻给出其可分裂.</p>
<p>再证明充分性:数学归纳,取出$\lambda _1 $和$\vec { v  } _1 \in V _{ \lambda _1  } \setminus \{ 0 \} $,再令$V _1 = \text { span  } \{ \vec { v  } _1 \} $,这里拿到的$V _1 $当然是一个不变子空间.仍取$\pi : V \to V / V _1 $,接下来观察$V / V _1 $的维数降了一维,根据数学归纳那其当然可以上三角化.回忆到我们曾经声明过了此时$\text { char  } _T = ( x - \lambda _1 ) \text { char  } _{ \bar { T  }  } $,原因是之前曾提过的在此分解下行列式之间的关系.可上三角化应当给出在$V / V _1 $上的一个被$\bar { T  } $保持的完备旗$\{ 0 \} = \bar { V _1  } \subsetneq \cdots \subsetneq \bar { V _n  } = \bar { V  } $.第一同构定理已经声明过对他们取原像后仍然是子空间,于是我们取原像应当可以重新得到一列完备旗:$\{ 0 \} = V _0 \subsetneq V _1 \subsetneq \cdots \subsetneq V _n = V $.</p>
<p>我们断言上述的旗也被$T $保持,原因是$\vec { v  } \in V _i \Rightarrow \pi ( T \vec { v  } ) = \bar { T  } ( \pi \vec { v  } ) \in \bar { T  } ( \bar { V  } _i ) \subseteq \bar { V  } _i = \pi ( V _i ) $,这当然意味着$T \vec { v  } \in V _i $,于是数学归纳就成立了.</p>
<p>值得一提的是上述证明可以原样拿来证明Cayley-Hamilton定理.方法是仍采取数学归纳,取$V _1 = \text { span  } \{ \vec { v  } _1 \} $后,用数学归纳应当有$\prod _{ k = 2  } ^n ( \bar { T  } - \lambda _i I ) = \text { char  } _{ \bar { T  }  } ( \bar { T  } ) = 0 $.然而我们早就知道了$\bar { T  } = \pi T $,于是立刻得知$\forall \vec { v  } \in V , \prod _{ k = 2  } ^n ( T - \lambda _i I ) ( \vec { v  } ) \in V _1 $,两边同做$T - \lambda _1 I $映射立刻得到结论.</p>
<h4><span id="广义特征子空间">广义特征子空间</span></h4><p>定义$V _{ [ \lambda ]  } = \bigcup _k V [ ( x - \lambda ) ^k ] $.</p>
<p>先来分析其与通常讨论的特征子空间之间的关系,我们声明:$V _{ [ \lambda ]  } \ne 0 \Leftrightarrow V _\lambda \ne 0 $.</p>
<p>由于$V _\lambda \subseteq V _{ [ \lambda ]  } $,右推左是显然的.</p>
<p>而考虑左推右,$\exists \vec { v  } \in V _{ [ \lambda ]  } , ( T - \lambda ) ^N \vec { v  } = \vec { 0  } , ( T - \lambda ) ^{ N - 1  } \vec { v  } \ne \vec { 0  } $,那么$( T - \lambda ) ^{ N - 1  } \vec { v  } \in V _{ \lambda  } $.</p>
<p>这个无限取并能不能降下去呢?而且上面这个东西应当需要有一种划分原空间的策略,这就意味着其应当和极小多项式有一定关系.事实上,如果特征多项式$\text { char  } _T = \prod ( x - \lambda _i ) ^{ a _i  } $,极小多项式$\text { Min  } _T = \prod ( x - \lambda _i ) ^{ b _i  } $,那么$V _{ [ \lambda _i ]  } = V [ ( x - \lambda _i ) ^{ b _i  } ] $.首先肯定有$V [ ( x - \lambda _i ) ^{ b _i  } ] \subseteq V _{ [ \lambda _i ]  } $,所以只需证明反向包含即可.</p>
<p>此时注意到$\forall \vec { v  } \in V _{ [ \lambda _i ]  } $,则存在$k $使得$( T - \lambda _i ) ^k \vec { v  } = \vec { 0  } $.此时取$h = \gcd ( ( x - \lambda _i ) ^k , \text { Min  } _T ) $,用裴蜀定理立刻得到$h = a ( x - \lambda _i ) ^k + b \text { Min  } _T $,于是立刻见到$h ( T ) \vec { v  } = \vec { 0  } $.但容易注意到$h | ( x - \lambda _i ) ^{ b _i  } $,这就证完了.</p>
<p>那么从之前我们的分析立刻得知$V = V [ \text { Min  } _T ] = \bigoplus _{ i  } V _{ [ \lambda _i ]  } $.并且见到$V _{ [ \lambda _i ]  } $的极小多项式就是$( x - \lambda _i ) ^{ b _i  } $,而因为极小多项式和特征多项式的根集相同并且原本的特征多项式等于分空间的特征多项式的乘积,因此特征多项式就是$( x - \lambda _i ) ^{ a _i  } $.</p>
<p>接下来我们定义代数重数:作为特征多项式的根的重数.几何重数:$\dim V _{ \lambda _i  } $.</p>
<p>注意到代数重数$\geq $几何重数,等式成立当且仅当$V _{ \lambda _i  } = V _{ [ \lambda _i ]  } $.原因是$a _i = \deg \text { char  } _{ T _i  } = \dim V _{ [ \lambda _i ]  } \geq \dim V _{ \lambda _i  } $.</p>
<p>由于可对角化等价于可以拆分成若干特征子空间的直和,我们之前又已经证明过可对角化的几何重数一定等于代数重数,于是可对角化当且仅当几何重数等于代数重数.</p>
<p>另外代数重数和几何重数的关系还可以从线性方程组的角度理解,因为特征空间的维度就是$\lambda _k I - A $的自由变量的数量.而$\lambda _k $的代数重数意味着$( x - \lambda _k ) $这一项在对角线的出现次数,现在这些位置都变成了$0 $,也就最多会有这么多个自由变量(还有可能上面某位置也有可以当主元的点顶替了他).那么几何重数就是实际上的自由量.</p>
<h4><span id="特殊矩阵的特征值">特殊矩阵的特征值</span></h4><h6><span id="example">Example</span></h6><p>回忆道斐波那契数列应当转移矩阵为$T = \begin{bmatrix}0 &amp; 1 \ 1 &amp; 1 \end{bmatrix} $,如果能把这个东西对角化的话就会很舒服.直接解特征值能解出来$\text { char  } _T = x ^2 - x + 1 $,两个特征值$\lambda = \frac { 1 \pm \sqrt { 5  }  } { 2  } $.</p>
<p>然后需要去解特征向量再用特征向量取基,解出来$\vec { v  } = \left ( \begin{matrix}1 \ \frac { 1 \pm \sqrt { 5  }  } { 2  } \end{matrix} \right ) $,这样立刻就拿到了换基矩阵$P = [ \vec { v  } _1 , \vec { v  } _2 ] $和对角矩阵$D = \begin{bmatrix}\lambda _1 &amp; 0 \ 0 &amp; \lambda _2 \end{bmatrix} $,并且拿到$D = P ^{ - 1  } TP $.</p>
<h3><span id="双线性形式">双线性形式</span></h3><h4><span id="线性映射">线性映射</span></h4><p>给定$F $上的线性空间$V _1 , \cdots , V _n , W $,我们定义一个<strong>多重线性映射</strong>$C : V _1 \times \cdots \times V _n \to W $.满足其对每一个分量都是线性的.也即固定其他$m - 1 $个向量后,剩下的那一个向量的改变也会引起线性的改变.换言之:</p>
<script type="math/tex; mode=display">
\begin{aligned}
C ( \cdots , t \vec { v  } _i , \cdots ) & = tC ( \cdots , \vec { v  } _i , \cdots ) \\
C ( \cdots , \vec { v  } _i + v _i ' , \cdots ) & = C ( \cdots , \vec { v  } _i , \cdots ) + C ( \cdots , \vec { v  } _i ' , \cdots ) 
\end{aligned}</script><p>特别地,当$W = F $的时候也叫做<strong>多重线性形式</strong>.</p>
<p>容易见到交错形式无非是多重线性形式的某种特例.</p>
<p>还可以看到多重线性映射的集合$\text { Mul  } ( V _1 , \cdots , V _n ; W ) $本身也是线性空间.</p>
<p>更常用的是双线性映射,一般记作$\text { Bil  } ( V _1 , V _2 ; W ) $.矩阵乘法本身是双线性映射的一个典型例子,对偶空间本身也是双线性形式的一个典型例子.特别地,一般定义$V $和$\check { V  } $之间的<strong>典范配对</strong>为$\lang _ , _ \rang : \check { V  } \times V \to F $.其也可以看作点乘或者$( 1 \times n ) \times ( n \times 1 ) $的矩阵乘法.</p>
<p>留意到柯里化过程,设$\dim V = n , \dim W = m $,容易见到:</p>
<script type="math/tex; mode=display">
\begin{gathered}
M _{ m \times n  } \cong \\
\text { Hom  } ( V , \check { W  } ) \cong \text { Bil  } ( V , W ; F ) \cong \text { Hom  } ( W , \check { V  } ) \\
\cong M _{ n \times m  } 
\end{gathered}</script><p>证明是平凡的.</p>
<p>这就能看出$M _{ n \times m  } \cong \text { Bil  } ( V \cong F ^n , W \cong F ^m ; F ) $,留意到其实可以取$A : W \to V $以$( \vec { v  } , \vec { w  } ) \mapsto \check { \vec { v  }  } A \vec { w  } $.取二者的坐标表示,立刻见到$( \vec { v  } , \vec { w  } ) \mapsto \sum _{ i  } \sum _j v _i a _{ i , j  } w _j = ( \vec { v  } ) ^T A \vec { w  } $.留意到如果设$C ( \vec { w  } , \vec { v  } ) = B ( \vec { v  } , \vec { w  } ) $,这个$C $对应的矩阵实际上就是对$B $对应的矩阵取了转置.</p>
<p>接下来考虑对其取直和,不妨考虑$B _1 : V _1 \times W _1 \to F , B _2 : V _2 \times W _2 \to F $,则令$B _1 \oplus B _2 : ( V _1 \oplus V _2 ) \times ( W _1 \oplus W _2 ) \to F $,其中$( ( \vec { v  } _1 , \vec { v  } _2 ) , ( \vec { w  } _1 , \vec { w  } _2 ) ) \mapsto B _1 ( \vec { v  } _1 , \vec { w  } _1 ) + B _2 ( \vec { v  } _2 , \vec { w  } _2 ) $.容易见到这是一个双线性形式.并且其代表的矩阵当然是原本的$B _1 , B _2 $对应的矩阵组成的分块对角矩阵.</p>
<p>考虑双线性形式$B : V \times V \to F $.称其为<strong>对称的</strong>当且仅当$B ( \vec { v  } , \vec { w  } ) = B ( \vec { w  } , \vec { v  } ) $,称其为<strong>反对称的</strong>当且仅当$B ( \vec { v  } , \vec { w  } ) = - B ( \vec { w  } , \vec { v  } ) $.容易看到对称的当且仅当其对应的矩阵为<strong>对称矩阵</strong>,即$A = A ^T $,原因是$B ( \vec { w  } , \vec { v  } ) = ( \vec { w  } ) ^T A \vec { v  } = ( \vec { v  } ) ^T A ^T \vec { w  } $.反对称的对应的矩阵成为<strong>反对称矩阵</strong>或者<strong>斜对称矩阵</strong>,即$- A = A ^T $.</p>
<h4><span id="非退化形式">非退化形式</span></h4><p>对于双线性形式$B : V \times W \to F $,称$\vec { v  } $是$B $的一个<strong>左根</strong>当且仅当$B ( \vec { v  } , _ ) \equiv 0 $.同理可以定义<strong>右根</strong>.容易见到左根右根集合分别应当是$V , W $的子空间.将左根空间记作$^{ \bot  } V $,右根空间记作$W ^{ \bot  } $.</p>
<p>当$V = W $并且$B $是对称的或者反对称的时候,此时左根和右根是一回事,一般将它们统称为$B $的根基.</p>
<p>称$B $是<strong>非退化的</strong>,当且仅当其左右根集合都是$\{ \vec { 0  } \} $.</p>
<p>现在考虑对于典范配对$\langle \lambda , \vec { v  } \rangle \to \lambda \vec { v  } $,考虑其左根和右根,显然都只是各自空间里的$\vec { 0  } $,原因是对于前者是一个映射,其映射所有都是$0 $,那它当然是$0 $映射本身.对于后者,考虑取$\vec { v  } \ne \vec { 0  } $,扩充$\vec { v  } $为一组基$\vec { v  } , \vec { v  } _2 \cdots , \vec { v  } _n $,并取其对偶基$\check { v  } , \check { v  } _2 , \cdots , \check { v  } _n $,此时就当然满足$\langle \check { v  } , \vec { v  } \rangle = 1 $,所以它是非退化的.</p>
<p>另一个例子是考虑迹映射$Tr : \text { End  } ( V ) \times \text { End  } ( V ) \to F , ( S , T ) \mapsto \text { tr  } ( ST ) $,容易见到它是对称的.那么考虑其根基,只考虑左根,如果$\forall T , \text { tr  } ( ST ) = 0 $,应当满足对于基矩阵$E _{ i , j  } $满足$\text { tr  } ( SE _{ i , j  } ) = 0 $.容易见到$tr ( SE _{ i , j  } ) = 0 $,所以$S \equiv 0 _{ n \times n  } $.这意味着迹映射是非退化的.</p>
<p>回忆道双线性形式同构于线性映射$\psi \in \text { Hom  } ( V , \check { W  } ) $或$\varphi \in \text { Hom  } ( W , \check { V  } ) $,注意到左根实际上就是$\ker \psi $,右根实际上就是$\ker \varphi $.</p>
<p>不妨假设$\dim V &gt; \dim W $,则$\dim \ker \psi = \dim V - \text { rk  } \psi \geq \dim V - \dim W &gt; 0 $,所以注意到$B $是非退化的一定要有$\dim V = \dim W $.</p>
<p>现在我们对于$B : V \times W \to F $并且满足$\dim V = \dim W $,我们声称以下三条性质等价:</p>
<ol>
<li><p>$B $是非退化的.</p>
</li>
<li><p>左根空间为$0 $.</p>
</li>
<li><p>右根空间为$0 $.</p>
</li>
</ol>
<p>显然只需说明(2)$\Leftrightarrow $(3).两个方向类似,下面只证明(2)$\Rightarrow $(3).而当$\dim \ker \psi = 0 $时,由于两边维数相等,自然得到$\psi $是一个同构.接下来考虑$\vec { w  } $如果是一个右根,那么对此取一个空间$H = \{ \lambda \in \check { W  } \mid \lambda \vec { w  } = 0 \} $,见到$\psi ( V ) $一定是$H $的一个子空间.但是$\dim V = \dim \psi ( V ) \leq \dim H \leq \dim W $,这就看出$\dim H = \dim V = n $.然而当$\vec { w  } \ne \vec { 0  } $的时候,$\dim H $不可能取到满空间,原因是典范同态是非退化的.这就导出了右根空间也是$0 $空间.</p>
<p>另一种看法是直接观察矩阵,右根实际上就是$\ker ( A ) $,左根实际上就是$\ker ( A ^T ) $,那它们的$\dim $当然要相等,原因是它们的$\text { rk  } $相等.</p>
<p>此时也容易注意到,非退化的矩阵实际上也就等价于可逆矩阵.</p>
<p>如果对商空间比较敏感,不妨设左根空间为$L $,右根空间为$R $,我们应当见到$\bar { B  } : ( V / L ) \times ( W / R ) \to F , ( \vec { v  } + L , \vec { w  } + R ) \mapsto B ( \vec { v  } , \vec { w  } ) $是非退化双线性形式.此时见到其实$\dim V - \dim L = \dim W - \dim R $.</p>
<p>适当推广上述结论,我们实际上可以定义任何子空间的$V _0 \subseteq V $的正交空间为$V _0 ^\bot = \{ \vec { w  } \in W \mid \forall \vec { v  } _0 \in V _0 , B ( \vec { v  } _0 , \vec { w  } ) = 0 \} $.同理定义$^\bot W _0 $.容易见到$V _0 \subseteq ^\bot ( V _0 ^\bot ) $.</p>
<p>我们试图寻找一些更好的关系,不妨假设$B $是非退化的,那么立刻有$\dim V = \dim W $,我们下面证明$\dim V _0 ^\bot + \dim V _0 = \dim V $.</p>
<p>令$d = \dim V _0 , n = \dim V = \dim W $已经知道$B $会对应一个同构$\psi : V \cong \check { W  } $,那么取$V _0 $在$\psi $下的像,并取其基$\check { w  } _1 , \cdots , \check { w  } _d $,此时$V _0 ^\bot \subseteq W $是满足$\langle \check { w  } _1 , _ \rangle = \cdots = \langle \check { w  } _d , _ \rangle = 0 $的子空间.</p>
<p>不妨先考虑两个特殊情况并从中窥见归纳的办法.当$d = n $的时候,此时$V _0 ^\bot = V ^\bot $,也就是右根集合,我们之前已经证明过了这是一个零空间.而当$d = 1 $的时候,考虑$\check { w  } _1 $,因为它不是$0 $,所以它必然是$W \to F $的满射,此时意味着$\dim \text { im  }  \check { w  } _1 = 1 $,意味着此时$V _0 ^\bot = \ker ( \check { w  } _1 ) $的维数应当是$n - 1 $.</p>
<p>接下来从上面的结构中跳出来,直接观察$\check { W  } $上的情形,我们将上述的那一组基扩充为$\check { W  } $的基$\check { w  } _1 , \cdots \check { w  } _n $并考虑$W $的子空间列$^\bot \langle \check { w  } _1 \rangle \supseteq \cdots \supseteq ^\bot \langle \check { w  } _1 , \cdots , \check { w  } _n \rangle $.不妨设$W _k = ^\bot \langle \check { w  } _1 , \cdots , \check { w  } _k \rangle $.</p>
<p>然而此时可以见到$W _{ k + 1  } = W _k \cap { ^\bot \langle \check { w  } _{ k + 1  } \rangle  } $,用第二同构定理得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\dim ( W _{ k + 1  } ) & = \dim W _k + \dim ^\bot \langle \check { w  } _{ k + 1  } \rangle - \dim ( W _k + ^\bot \langle \check { w  } _{ k + 1  } \rangle ) \\
& \geq \dim W _k + \dim ^\bot \langle \check { w  } _{ k + 1  } \rangle - n \\
& = \dim W _k - 1 
\end{aligned}</script><p>因此每加一个最多降一维(其实等价于把那个$\dim = 1 $的空间商掉了),然而注意到上述空间列的首项是$n - 1 $维,末项是$0 $维,每次降一维的话就可以得到$\dim ^\bot \langle \check { w  } _1 , \cdots , \check { w  } _d \rangle = n - d $,这就证明了上述的结论.</p>
<p>然而上述推断其实并不意味着$V = V _0 ^\bot + V _0 $,也不意味着$V _0 \cap V _0 ^\bot = \{ \vec { 0  } \} $,这两个结论都是得不到的.</p>
<p>然而好用的结论是我们之前已经提过$V _0 \subseteq ^\bot ( V _0 ^\bot ) $,此时我们注意到这个式子两边的维度实际上相等,因此$^\bot ( V _0 ^\bot ) = V _0 $.再次声明此式子只在非退化的前提下成立.</p>
<h4><span id="伴随映射">伴随映射</span></h4><p>考虑两个双线性形式$B _1 , B _2 $,其中$B _1 \in \text { Bil  } ( V _1 , V _1 ‘ , F ) $,$B _2 $类似.我们声称存在唯一的线性映射$\varphi : \text { Hom  } ( V _1 , V _2 ) \to \text { Hom  } ( V _2 ‘ , V _1 ‘ ) , T \mapsto T ^<em> $满足$B _2 ( T \vec { v  } _1 , \vec { v  } _2 ‘ ) = B _1 ( \vec { v  } _1 , T ^</em> \vec { v  } _2 ‘ ) $.其中这个$T ^<em> $称为$T $相对于$B _1 $和$B _2 $的<strong>右伴随</strong>.同理可以定义<strong>左伴随</strong>$^</em> T $满足$B _2 ( \vec { v  } _2 , T \vec { v  } _1 ‘ ) = B _1 ( ^* T \vec { v  } _2 , \vec { v  } _1 ‘ ) $,并且假设$B _1 $非退化,它对应的矩阵$A _1 $可逆.</p>
<p>如何证明这个结论呢?只考虑右伴随的情况,对于某个固定的$\vec { v  } _2 ‘ $,取出映射$B _2 ( T ( _ ) , \vec { v  } _2 ‘ ) : V _1 \to F $.那它当然是$\check { V _1  } $中的元素.而因为$B _1 $非退化,其对应了一个$V _1 ‘ \to \check { V  } _1 $的同构,因此应当存在唯一的$\vec { v  } _1 ‘ $使得其映射到$\check { V _1  } $的时候恰好满足$B _2 ( T ( _ ) , \vec { v  } _2 ‘ ) = B _1 ( _ , \vec { v  } _1 ‘ ) $,这就给出了$T ^* : \vec { v  } _2 ‘ \mapsto \vec { v  } _1 ‘ $.换言之其唯一性取决于$A _1 $的非退化性.取$\varphi _i : V _i ‘ \to \check { V _i  } $且$\varphi _1 $可逆,回忆到之前过程可以知道这里的$\varphi _1 $实际上就是$A _1 $,下述图表的上半部分交换:</p>
<script type="math/tex; mode=display">
\xymatrix { V _2 ' \ar [r ] ^{ T ^*  } \ar [d ] _{ A _2  } & V _1 ' \ar [d ] ^{ A _1  } \\
\check { V _2  } \ar [r ] ^{ ^t T  } & \check { V _1  } \\
V _2 \ar [u ] & V _1 \ar [u ] \ar [l ] _T  }</script><p>另外可以见到如果假设$B _2 $也是非退化的,当线性空间本身满足条件的时候应该有$^<em> ( T ^</em> ) = T = ( ^<em> T ) ^</em> $.还可以见到$( ST ) ^<em> = T ^</em> S ^<em> , ^</em> ( ST ) = ^<em> T ^</em> S $.这还顺便说明了$( T ^{ - 1  } ) ^<em> = ( T ^</em> ) ^{ - 1  } , ^<em> ( T ^{ - 1  } ) = ( ^</em> T ) ^{ - 1  } $.</p>
<p>上面的结论如何用矩阵刻画?只考虑右伴随的部分,选定一组有序基后,将双线性形式对应到矩阵应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
B _2 ( T \vec { v  } _1 , \vec { v  } _2 ' ) & = ( \vec { v  } _1 ) ^T T ^T A _2 \vec { v  } _2 ' & = ( \vec { v  } _1 ) ^T A _1 ( A _1 ^{ - 1  } T ^T A _2 ) \vec { v  } _2 ' \\
B _1 ( \vec { v  } _1 , T ^* \vec { v  } _2 ' ) & = ( \vec { v  } _1 ) ^T A _1 T ^* \vec { v  } _2 ' 
\end{aligned}</script><p>比对就可以看到只需取$T ^<em> = A _1 ^{ - 1  } T ^T A _2 $,这与上述交换图表的形式也是符合的.同理可以得到$^</em> T = ( A _2 TA _1 ^{ - 1  } ) ^T $.并从此看出当$B _1 , B _2 $都非退化的时候,伴随不改变矩阵的秩,因为此时伴随矩阵与原矩阵的转置是相抵的.事实上可以直接写出$\ker ( T ^* ) = ( \text { im  } T ) ^\bot $,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
T ^* \vec { w  } & = 0 \Leftrightarrow \forall \vec { v  } , ( \vec { v  } \mid T ^* \vec { w  } ) & = 0 \\
\Leftrightarrow \forall \vec { v  } , ( T \vec { v  } \mid \vec { w  } ) & = 0 \Leftrightarrow \vec { w  } \in ( \text { im  } T ) ^\bot 
\end{aligned}</script><p>而由同态基本定理,$\dim ( \text { im  } T ) ^\bot = \dim \ker ( T ^<em> ) $,由上可以见到当$\dim V = \dim W $时$\text { rk  }  T = \text { rk  }  T ^</em> $.</p>
<p>当对应的双线性形式非退化的时候回忆到可以两边取$\bot $就拿到$\ker ( T ^* ) ^\bot = ( \text { im  } T ) $.</p>
<p>下面考虑$V _1 = V _2 = V _1 ‘ = V _2 ‘ = V $,并假设$B _1 = B _2 $且二者要么对称要么反对称.此时注意到$T $的左伴随和右伴随是没有区别的,我们将它们统一称作伴随,一般采取右伴随的记号记作$T ^<em> $并尝试通过上下文区分.特别地,如果$T = T ^</em> $,那我们称其为<strong>自伴的</strong>,如果$T = - T ^<em> $,则称其为<em>*反自伴的</em></em>.</p>
<p>如果选取$A _1 = A _2 = I $,那么根据上面的分析见到$T $是自伴的当且仅当$T $是对称的,反自伴的当且仅当其是反对称的.</p>
<h4><span id="分类问题">分类问题</span></h4><p>定义双线性形式上的同构:称$( V _1 , B _1 ) \cong ( V _2 , B _2 ) $,其中$B _1 : V _1 \times V _1 \to F , B _2 : V _2 \times V _2 \to F $,当且仅当存在一个同构$\varphi : V _1 \cong V _2 $,满足$B _2 ( \varphi ( \vec { v  } ) , \varphi ( \vec { v  } ‘ ) ) = B _1 ( \vec { v  } , \vec { v  } ‘ ) $.容易验证这个同构满足等价条件的三条性质:反身性,对称性,传递性.并且双线性形式的几乎所有性质(左右根,根基,对称性,反对称性,退化性)都在同构关系下得到保持.这就意味着双线性形式应该可以以这种同构关系分类.</p>
<p>不失一般性,不妨直接假设$V = F ^n $以简化描述.</p>
<p>我们定义两个$n \times n $的矩阵$A , A ‘ $是<strong>合同的</strong>,当且仅当$\exists C \in ( M _{ n \times n  } ) ^\times $使得$A = C ^T A ‘ C $.容易验证这是一个等价关系.必须要强调这里的$C $是可逆矩阵.</p>
<p>接下来考虑两个双线性形式$B , B ‘ : F ^n \times F ^n \to F $,我们声称当且仅当它们对应的矩阵$A , A ‘ $是合同的有$A = C ^T A ‘ C $时是同构的.同构办法就是利用$C $所代表的线性映射.</p>
<p>对于充分性:只需检验是否有$B ( \vec { v  } _1 , \vec { v  } _2 ) = B ‘ ( C \vec { v  } _1 , C \vec { v  } _2 ) $,而$B ‘ ( C \vec { v  } _1 , C \vec { v  } _2 ) = ( C \vec { v  } _1 ) ^T A ‘ ( C \vec { v  } _2 ) = ( \vec { v  } _1 ) ^T A \vec { v  } _2 = B ( \vec { v  } _1 , \vec { v  } _2 ) $.</p>
<p>对于必要性:考虑所有的同构$\varphi $当然都可以写作可逆矩阵形式,设这个矩阵为$C $,立刻见到应当有$A = C ^T A ‘ C $.</p>
<h4><span id="二次型">二次型</span></h4><p>考虑$\text { char  } \ne 2 $的域$F $,原因是这种域上面存在$\frac { 1  } { 2  } $.为了方便讨论下面不妨直接假设$V = F ^n $.</p>
<p>定义$n $元<strong>二次型</strong>为一个$F $上的齐次多项式$f = \sum _i a _{ i , i  } x _i ^2 + 2 \sum _{ i &lt; j  } a _{ i , j  } x _i x _j $,并在考虑对称的情况下设$a _{ i , j  } = a _{ j , i  } $成立,上述自然有$f = \sum _{ i , j  } a _{ i , j  } x _i x _j $.容易见到$f $实际上可以表示为某一个对称的双线性形式,将这些$a $排列成矩阵就可以见到上述$f ( x ) = ( \vec { x  } ) ^T A \vec { x  } = B ( \vec { x  } , \vec { x  } ) $.这种对应实际上是双射,原因是该多项式也可以反过去确定一个对称的双线性形式,原因是注意到首先$B ( \vec { v  } , \vec { v  } ) $肯定是可以被确定的,其次由于$B ( \vec { v  } _1 + \vec { v  } _2 , \vec { v  } _1 + \vec { v  } _2 ) = B ( \vec { v  } _1 , \vec { v  } _1 ) + B ( \vec { v  } _2 , \vec { v  } _2 ) + 2 B ( \vec { v  } _1 , \vec { v  } _2 ) $,于是立刻得到$B ( \vec { v  } _1 , \vec { v  } _2 ) = \frac { 1  } { 2  } ( f ( \vec { v  } _1 + \vec { v  } _2 ) - f ( \vec { v  } _1 ) - f ( \vec { v  } _2 ) ) $,这就给出了一组一一对应的关系.从这里顺便应该能看出对称双线性形式应该由其所有的$B ( \vec { v  } , \vec { v  } ) $的取值唯一确定.我们会在内积空间里再次讨论这个技巧,这被称为<strong>配极化</strong>.</p>
<p>将合同关系挪到二次型上就可以见到,两个二次型同构当且仅当它们可以通过一个可逆的线性变量替换而相互过渡.</p>
<p>既然如此,应该见到二次型某种意义上同构于矩阵,那么能不能把二次型作对角化呢,也即能否将二次型同构于形如$g = \sum b _i x _i ^2 $的二次型.这个当然可以用配方法解决,具体操作是数学归纳,每次将和一个变量有关的全部赛到一个里面去.</p>
<p>具体地,我们执行以下策略:</p>
<ol>
<li><p>如果当前存在一个$a _{ i , i  } \ne 0 $,不妨设其为$a _{ 1 , 1  } $,那就可以提出一个$a _{ 1 , 1  } ( x _1 + \frac { 1  } { a _{ 1 , 1  }  } \sum _{ k \geq 2  } a _{ 1 , k  } x _k ) ^2 $.</p>
</li>
<li><p>反之,则存在一个$a _{ i , j  } \ne 0 $,不妨在此时做变量替换$y _i = x _i - x _j $换掉$x _i $,这样$x _j ^2 $前的系数就非$0 $,自然回到前一种情况.</p>
</li>
</ol>
<p>上述过程不好机械化,能不能用一些更加形式化的方式呢?考虑配方当然等价于寻找一个可逆矩阵$C $使得对称矩阵$A $被写作$C ^T AC = A ‘ $,而可逆矩阵可以写作若干初等矩阵的乘积,不妨记作$U _1 \cdots U _k $,于是知道我们想要让$( U _1 \cdots U _k ) ^T A ( U _1 \cdots U _k ) $.</p>
<p>这里有一个算法是将矩阵排列成$\begin{bmatrix}A \ I \end{bmatrix} $的形式,然后对其做对称行列变换(这样列变换会影响到下面的$I $,但是行变换不会影响),这样最后会消成$\begin{bmatrix}A ‘ \ C \end{bmatrix} $的形式,就会有$A ‘ = C ^T AC $.</p>
<p>由此可以设$r = \text { rk  } ( f ) $为对角化后剩余的元素个数.见到其根基的维数恰为$n - r $,原因是$\ker A $的维数就是根基的维数.见到其非退化当且仅当$n = r $.</p>
<p>如果我们做的域是一个代数闭域,那么我们上面的分类问题立刻得到了解决,原因是二次型当然可以进一步化简为$\sum _{ k = 1  } ^r y _k ^2 $的形式,因此二次型完全由秩来决定.当然其实代数闭这个性质并没有用完全,实际上上述结论只需要求所有的$F $中元素都有平方根即可.</p>
<h5><span id="实二次型">实二次型</span></h5><p>然而我们知道实数域并不满足以上性质,能不能把实数上的二次型进一步分类呢?虽然不能对$- 1 $开根,但总之可以将二次型同构成$f = \sum _{ k = 1  } ^p x _k ^2 - \sum _{ j = p + 1  } ^r x _j ^2 $.将此称作该二次型的<strong>规范型</strong>.</p>
<p>先对于实二次型引入一些新的定义:对于一个对称双线性形式,如果$\forall \vec { v  } $,$B ( \vec { v  } , \vec { v  } ) \geq 0 $恒成立,则称其为<strong>半正定的</strong>,如果在此基础上当$\vec { v  } \ne 0 $时$B ( \vec { v  } , \vec { v  } ) &gt; 0 $恒成立,则称其为<strong>正定</strong>的.同样可以定义<strong>半负定的</strong>和<strong>负定的</strong>概念.还可以定义<strong>不定的</strong>概念.容易见到如果一个对称双线性形式是正定的或者负定的时候它必然是非退化的,因为此时除了$\vec { 0  } $其无根基.一定要注意这里的正定是在对称性的基础上定义的.</p>
<p>容易见到半正定当且仅当上述$f $中满足$p = r $,正定当且仅当满足$p = r = n $.到这里我们忽然疑问到同构的二次型的$p $是否相等.</p>
<h5><span id="惯性sylvester定理">惯性(Sylvester)定理</span></h5><p>即:对于两个同构的二次型,它们的$( p , r - p ) $相同,一般将$p $称作<strong>正惯性系数</strong>而将$r - p $称作<strong>负惯性系数</strong>,两者的差$2 p - r $一般称作其<strong>符号差</strong>.</p>
<p>之所以会疑惑同构的二次型的$p $不一定相等,是因为同构只搬运了空间上的性质.因此如果我们能把$p $以某种基于空间上的形态,当然就可以显然看出两个同构的二次型的$( p , r - p ) $相同.我们声明对于一个正惯性系数为$p $的二次型以下命题成立:</p>
<ol>
<li><p>存在一个$p $维的正定子空间.</p>
</li>
<li><p>对于任何维数$&gt; p $的子空间,其都不可能是正定的.</p>
</li>
</ol>
<p>(1)显然,直接拿出其正部分对应的空间即可.</p>
<p>(2)的话无非是考虑将鸽笼原理用子空间之间的交写出来,设$N $为后$p + 1 , \cdots , n $这部分所代表的子空间,对于任何一个$V ‘ $子空间满足$\dim V ‘ &gt; p $,直接拿第二同构定理得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\dim ( V ' \cap N ) & = \dim ( V ' ) + \dim ( N ) - \dim ( V ' + N ) \\
& \geq n - p + \dim V ' - n & > 0 
\end{aligned}</script><p>这意味着其不为空.</p>
<p>对负惯性系数当然可以类似做.这样惯性定理自然解决了实二次型的分类问题.</p>
<h4><span id="辛空间">辛空间</span></h4><p>回到特征不为$2 $的域$F $上,考虑反对称形式,注意到$B ( \vec { v  } , \vec { v  } ) = - B ( \vec { v  } , \vec { v  } ) $,那此时它们就应该同时为$0 $.这当然类似我们之前说的交错形式.</p>
<p>观察这类反对称形式的根基,取$R ( V ) = \{ \vec { v  } \in V \mid B ( \vec { v  } , _ ) = 0 \} $.此时把补空间拿出来,取$V = R ( V ) \oplus V ‘ $,我们断言$( V , B ) \cong ( R ( V ) , 0 ) \oplus ( V ‘ , B \mid _{ V ‘ \times V ‘  } ) $,其中$B \mid _{ V ‘ \times V ‘  } $是$V ‘ $上的非退化线性形式.这个断言当然是显然的,只需简单拆分空间即可.问题在于如何证明$B \mid _{ V ‘ \times V ‘  } $是$V ‘ $上的非退化线性形式,只需证明$R ( V ‘ ) = \{ 0 \} $,我们考虑如果$\exists \vec { v  } ‘ \in V ‘ $,$\forall \vec { v  } _1 ‘ \in V ‘ , B ( \vec { v  } ‘ , \vec { v  } _1 ‘ ) = 0 $,由于根基当然和任何东西都会变零,因此这等价于$\forall \vec { v  } _1 \in V , B ( \vec { v  } ‘ , \vec { v  } _1 ) = 0 $,这必然意味着$\vec { v  } ‘ \in R ( V ) $,也就是$\vec { v  } ‘ \in R ( V ) \cap V ‘ = \{ 0 \} $.</p>
<p>因此其实反对称双线性形式更重要的是考虑其非退化的部分.将这些非退化反对称双线性形式称为<strong>辛形式</strong>,并将$( V , B ) $称作辛空间.</p>
<p>考虑取一对基$\vec { p  } , \vec { q  } $形成空间$\langle \vec { p  } , \vec { q  } \rangle $并满足$B ( \vec { p  } , \vec { q  } ) = 1 = - B ( \vec { q  } , \vec { p  } ) $,这当然唯一确定了一个辛形式$B $,并且其实际上对应了一个反对称矩阵$\begin{bmatrix}0 &amp; 1 \ - 1 &amp; 0 \end{bmatrix} $,这种二维辛空间一般还被称为<strong>双曲辛平面</strong>.</p>
<p>虽然研究范围被限制在了辛空间上,但仍然能看到辛形式中会因为正负相抵爆出大量的$0 $.设$V _0 $是$V $的子空间,若$B \mid _{ V _0 \times V _0  } \equiv 0 $,我们称$V _0 $是<strong>全迷向子空间</strong>,一个极大(真包含它的子空间全都不是全迷向的)的全迷向子空间称为<strong>拉格朗日子空间</strong>.</p>
<p>设$( V , B ) $为辛空间,$L $是拉格朗日子空间,我们下面证明两个性质:</p>
<ol>
<li><p>$L ^\bot = L $.</p>
</li>
<li><p>$\dim V = 2 \dim L $.</p>
</li>
<li><p>辛空间必定是偶数维的.</p>
</li>
</ol>
<p>如果(1)得证,由于$\dim V = \dim L + \dim L ^\bot $,(2)(3)也就显然了.所以问题在于如何证明(1).</p>
<p>首先全迷向性质自然等价于$L \subseteq L ^\bot $.此时考虑若$\exists \vec { v  } \in L ^\bot \setminus L $,则$L + \langle \vec { v  } \rangle $这个空间仍然是全迷向的(原因是$\vec { v  } $自身的部分会因为交错性质而成$0 $),这就与其极大性矛盾.</p>
<p>我们试图想要找到更好的策略去勾勒$L $以及$V / L $这两部分.</p>
<h5><span id="达布定理">达布定理</span></h5><p>该定理是说:给定一个拉格朗日子空间$L $,$L $的任何有序基$\vec { p  } _1 , \cdots , \vec { p  } _n $都能扩充为$V $的有序基$\vec { p  } _1 , \cdots \vec { p  } _n , \vec { q  } _n , \cdots , \vec { q  } _1 $,使得$\forall 1 \leq i , j \leq n $:</p>
<ol>
<li><p>$B ( p _i , p _j ) = B ( q _i , q _j ) = 0 $.</p>
</li>
<li><p>$B ( p _i , q _j ) = - B ( q _j , p _i ) = \begin{cases}1 &amp; i = j \ 0 &amp; i \ne j \end{cases} $.</p>
</li>
</ol>
<p>这组有序基又被称为$V $的<strong>辛基</strong>.</p>
<p>考虑定义$n - 1 $维子空间$L _i = \langle \vec { p  } _1 , \cdots , \vec { p  } _{ i - 1  } , \vec { p  } _{ i + 1  } , \cdots , \vec { p  } _n \rangle $.留意到此时会有$L = L ^\bot \subsetneq L _i ^\bot , \dim L _i ^\bot = n + 1 $.</p>
<p>接下来数学归纳构造这组$q $.</p>
<p>对于$k = 1 $的情况,由于我们上面的分析,$\exists \vec { q  } _1 \in L _1 ^\bot \setminus L $,于是此时必然满足$B ( \vec { p  } _1 , \vec { q  } _1 ) \ne 0 $而$\forall i \geq 2 , B ( \vec { p  } _i , \vec { q  } _1 ) = 0 $.适当伸缩即可满足条件.</p>
<p>在此之后,假设$k &lt; n $并且我们已经有了$\vec { q  } _1 , \cdots , \vec { q  } _k $使得条件成立,仍然可以取$\vec { q  } _{ k + 1  } ‘ \in L _{ k + 1  } ^\bot \setminus L $,使得$B ( \vec { p  } _i , \vec { q  } _{ k + 1  } ‘ ) \begin{cases}1 &amp; i = k + 1 \ 0 &amp; i \ne k + 1 \end{cases} $满足.</p>
<p>此时注意到,如果用$\vec { q  } _{ k + 1  } = \vec { q  } _{ k + 1  } ‘ + \sum _i a _i \vec { p  } _i $后,上述条件实际上不受影响.然而,只需取$a _i = B ( \vec { q  } _i , \vec { q  } _{ k + 1  } ‘ ) $就自动满足最后的条件.</p>
<p>接下来无非是要证明这些向量线性无关,对于$\sum a _i \vec { p  } _i + \sum b _i \vec { q  } _i = 0 $,两边取$B ( _ , \vec { q  } _i ) $就可以得到$a _i = 0 $,取$B ( \vec { p  } _i , _ ) $就可以得到$b _i = 0 $,这样就做完了.</p>
<p>此时就可以见到,我们实际上是把原空间拆成了两个拉格朗日子空间的直和,并且这两个子空间之间以某种形式连接起来.此时其对应的矩阵就是:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
& & & & & 1 \\
& & & & \cdots & \\
& & & 1 & & \\
& & - 1 & & & \\
& \cdots & & & & \\
- 1 & & & & & 
\end{bmatrix}</script><p>另外,如果$W $是$V $的子空间并且满足$W \cap W ^\bot = \{ 0 \} $,我们称这样的子空间是<strong>辛子空间</strong>.只需套用拉格朗日子空间的过程就可以证明:</p>
<ol>
<li><p>$W $是辛子空间当且仅当$B $在$W $上的限制非退化.</p>
</li>
<li><p>$W $是辛子空间则有直和分解$V = W \oplus W ^\bot $.</p>
</li>
</ol>
<h4><span id="回看对偶空间">回看对偶空间</span></h4><p>应当回忆我们将一个有限维空间对应到其对偶空间的时候所做的努力:先找到原空间的一组基,再对应地找到一组对偶基.然而,这种对应并非空间自身典范的对应,而是需要选定基的人为构造的定义.</p>
<p>回忆我们上述拿到的所有东西,应当可以见到起码以下资料均是典范的:</p>
<ol>
<li><p>典范配对$\langle _ , _ \rangle : V ^\vee \times V \to F , \langle \lambda , \vec { v  } \rangle \mapsto \lambda \vec { v  } $.</p>
</li>
<li><p>转置映射$^t T : W ^\vee \to V ^\vee , \lambda \mapsto \lambda T $.</p>
</li>
</ol>
<h5><span id="双重对偶">双重对偶</span></h5><p>先分析典范配对的情形,考虑到典范配对会给出一个映射$ev _V : V \to ( V ^\vee ) ^\vee , \vec { v  } \mapsto \langle _ , \vec { v  } \rangle $.容易验证这当然是一个同构,而且中途没有用任何取基操作,所以这是一个典范的同构$\text { ev  } _V : V \cong ( V ^\vee ) ^\vee $.更确切地来说,这个$\text { ev  } _V $具有某种函子性.事实上有以下交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^T \ar [d ] _{ \text { ev  } _V  } & W \ar [d ] ^{ \text { ev  } _W  } \\
( V ^\vee ) ^\vee \ar [r ] ^{ ( T ^t ) ^t  } & ( W ^\vee ) ^\vee  }</script><p>虽属显然,但也可以小心地展开定义以确实证明$( \text { ev  } _W ) T = ( T ^t ) ^t \text { ev  } _V $.策略只需任取$\check { w  } $,而观察:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\langle ( ( T ^t ) ^t \text { ev  } _V ) \vec { v  } , \check { w  } \rangle \\
& = \langle ( \text { ev  } _V ) \vec { v  } , T ^t \check { w  } \rangle \\
& = \langle T ^t ( \check { w  } ) , \vec { v  } \rangle \\
& = \langle \check { w  } , T \vec { v  } \rangle \\
& = \langle \text { ev  } _W ( T \vec { v  } ) , \check { w  } \rangle 
\end{aligned}</script><p>而$\check { w  } $可以任取,立刻证毕.</p>
<p>回忆到还有一件重要的事情需要解释,那就是柯里化$\text { Hom  } ( W , V ^\vee ) \cong \text { Bil  } ( V , W ; F ) \cong \text { Hom  } ( V , W ^\vee ) $.从表面上看,它应当是典范的,可实则描述的时候却发现总需要标准内积结构来体现.为解决这个问题,我们下面证明上述同构映射将$\varphi \in \text { Hom  } ( W , V ^\vee ) $为$( \varphi ^t ) \circ \text { ev  } _V \in \text { Hom  } ( V , W ^\vee ) $.</p>
<p>考虑将两边都映射到典范配对的结构上,由双线性形式的定义,$\varphi \in \text { Hom  } ( W , V ^\vee ) $必然映一组$\vec { w  } , \vec { v  } $为$\langle \varphi ( \vec { w  } ) , \vec { v  } \rangle $,这当然是显然的.</p>
<p>回看$( \varphi ^t ) \circ \text { ev  } _V $,它做到的是将一组$\vec { w  } , \vec { v  } $映射到$\langle \text { ev  } _V ( \vec { v  } ) , \varphi ( \vec { w  } ) \rangle $,可只需用$\text { ev  } _V ( \vec { v  } ) $的定义,上述两者当然是相同的.</p>
<p>再最后,我们终于回看基的选取,我们可以证明以下结论:设$V $是有限维的向量空间,$\vec { v  } _1 , \cdots , \vec { v  } _n \in V $是一组有序基,其对偶基记作$\check { v  } _1 , \cdots , \check { v  } _n $.我们声称:$V ^\vee $中的一组元素$\text { ev  } _V ( \vec { v  } _1 ) , \cdots , \text { ev  } _V ( \vec { v  } _n ) $是$\check { v  } _1 , \cdots , \check { v  } _n $的对偶基.也就是说中间不管怎么取对偶形态,最终总会回到一种典范的同构$V \cong V ^\vee $上.</p>
<p>至于证明,无非只是:</p>
<script type="math/tex; mode=display">
\langle \text { ev  } _V ( \vec { v  } _i ) , \check { v  } _j \rangle = \langle \check { v  } _j , \vec { v  } _i \rangle</script><p>立属显然.</p>
<h5><span id="核余核与对偶映射">核,余核与对偶映射</span></h5><p>上述证明揭露了对偶空间的一角.之所以$T ^t $会显示出伴随性质,实际上并不是代数形式上的巧合,而恰是$T ^t $的定义本身就是典范配对上的伴随,而自然会以某种形式显示在新的伴随中.既如此,请以下内容再观$T : V \to W $以及其转置$T ^t : W ^\vee \to V ^\vee $的性质.</p>
<p>首先,容易观察到的应该是$T $单则$T ^t $满,$T $满则$T ^t $单.此结论我们早就得出,策略是使用行秩等于列秩,而由同态基本定理得到$\dim V = \dim \ker T + \text { rk  } T $,如若$T $单,则$\dim \ker T = 0 $,意味着$\text { rk  } T = \dim V $,也就意味着$\text { rk  } T ^t = \dim V ^\vee $,这就得到$T ^t $是满的.反之亦然同理.</p>
<p>然而回看$\text { rk  } T ^t = \text { rk  } T $这个结论的得出其实并不典范,我们推出此结论使用的策略是矩阵的相抵.而找到一种典范的证明此的策略便是重要的.而只需稍有对商操作的直觉就可以看到,要抛开矩阵,用一种真正典范的策略证明行秩等于列秩,必然离不开上述的引理.这就是我们下述真正想要做的事.</p>
<p>现在,设$T $是单射,对于任给的$\mu \in V ^\vee $,尝试找到一个$\tilde { \mu  } \in W ^\vee $使得$\tilde { \mu  } ( T ( x ) ) = \mu ( x ) $,那根据对偶映射的定义,知道这里有$T ^t ( \tilde { \mu  } ) = \mu $.如果这里$\mu $可以任选的话,换言之,对于任意的$\mu $我们都能构造出一个$\tilde { \mu  } $来实现上述过程,当然意味着$T ^t $是满射.可既然这里是构造,我们终于可以放下”典范”的包袱,开始取基.</p>
<p>取$V $的一组基$\mathcal { X  } $,而$T ( \mathcal { X  } ) $当然是$W $的线性无关子集,可以扩展为一组基$\mathcal { Y  } $,这样$\forall \vec { w  } \in W $都有唯一的展开$\sum _{ \vec { y  } \in \mathcal { Y  }  } c _y \vec { y  } $,对于给定的$\mu \in V ^\vee $可以定义$\tilde { \mu  } : W \to F $为:</p>
<script type="math/tex; mode=display">
\tilde { \mu  } ( \sum _{ y \in \mathcal { Y  }  } c _y \vec { y  } ) = \mu ( \sum _{ x \in \mathcal { X  }  } c _{ T ( \vec { x  } ) \vec { x  }  } )</script><p>而当$T $满的时候,设$\tilde { \mu  } \in W ^\vee $,此时如果$T ^t ( \tilde { \mu  } ) = \tilde { \mu  } T = 0 $,因为$T $是满的,这必然意味着$\tilde { \mu  } = 0 $,所以$T ^t $当然是单的.</p>
<p>换句话说,这里通过空间上的结构,用基强行凑出了一个$\ker T $的结构.然而取基总是会让我们忽略空间的结构,并给人一种使用文字游戏偷懒的感觉.或者说,构造性证明必然会有一种失掉典范性的感觉.</p>
<p>现在我们重新展现一下上述取出$\tilde { \mu  } $的合理性:设$T : V \to W $为线性映射,而$\mu \in V ^\vee $,我们声称存在$\tilde { \mu  } \in W ^\vee $使得$T ^t ( \tilde { \mu  } ) = \mu $当且仅当$\mu | _{ \ker T  } = 0 $.</p>
<p>先证明充分性,当$\mu | _{ \ker T  } = 0 $的时候,不妨设$\twoheadrightarrow $是满射而$\hookrightarrow $是单射,如下交换图表当然成立:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar @{->>} [r ] ^T \ar [d ] _\mu \ar @{->>} [dr ] ^\pi & \text { im  } \ ( T ) \\
F & V / \ker ( T ) \ar [l ] ^{ \bar { \mu  }  } \ar @{^{(}->>} [u ] _{ \bar { T  }  }  }</script><p>左下三角形的成立性完全依赖于$\mu | _{ \ker T  } = 0 $的性质,而此时取一个$\tilde { \mu _0  } = \bar { \mu  } \circ ( \bar { T  } ) ^{ - 1  } \in ( \text { im  }  T ) ^{ \vee  } $,而由于$\text { im  } T $自然嵌入$W $中,必有$\text { im  } ( T ) \hookrightarrow W $,那也就意味着$W ^\vee \twoheadrightarrow \text { im  } ( T ) ^\vee $,因此$\tilde { \mu _0  } $就可以延拓为$\tilde { \mu  } \in W ^\vee $,交换图表给出:</p>
<script type="math/tex; mode=display">
\tilde { \mu  } T = \tilde { \mu _0  } T = \bar { \mu  } ( \bar { T  } ) ^{ - 1  } T = \bar { m  } u \circ \pi = \mu</script><p>这就证明了充分性.至于必要性,由于$T ^t ( \tilde { \mu  } ) = \tilde { \mu  } T $,而$\tilde { \mu  } T | _{ \ker T  } = 0 $当然是显然的.</p>
<p>接下来回忆到余核$\text { coker  } ( T ) = W / \text { im  } ( T ) $这个东西,尝试看看它和$\ker T $之间的关系,回忆到我们应该有包含映射$i : \ker ( T ) \hookrightarrow V $和商映射$q : W \twoheadrightarrow \text { coker  } ( T ) $,取对偶见到:</p>
<script type="math/tex; mode=display">
\xymatrix { \text { coker  } ( T ) ^\vee \ar @{^{(}->} [r ] ^{ q ^t  } & W ^\vee \ar [r ] ^{ T ^t  } & V ^\vee \ar @{->>} [r ] ^{ i ^t  } & \ker ( T ) ^\vee \\
\lambda \ar @{|->} [r ] & \lambda q & & \\
& \tilde { \mu  } \ar @{|->} [r ] & \tilde { \mu  } T & \\
& & \mu \ar @{|->} [r ] & \mu i  }</script><p>这个当然没有问题,而我们试图借上面为辅助证明下面这张交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { \text { coker  } ( T ) ^\vee \ar @{^{(}->} [r ] ^{ q ^t  } \ar @{^{(}->>} [d ] & W ^\vee \ar [r ] ^{ T ^t  } & V ^\vee \ar @{->>} [r ] ^{ i ^t  } \ar @{->>} [rd ] & \ker ( T ) ^\vee \\
\ker ( T ^t ) \ar @{^{(}->} [ur ] & & & \text { coker  } ( T ^t ) \ar @{^{(}->>} [u ]  }</script><p>其中竖直方向的同构由左右两部分交换图表各自唯一确定.</p>
<p>先看左部分,我们尝试证明$\text { coker  } ( T ) ^\vee \hookrightarrow W ^\vee $的像正好是$\ker ( T ^t ) $.</p>
<p>先证明$q ^t ( \text { coker  } ( T ) ^\vee ) \subseteq \ker ( T ^t ) $,考虑$\lambda \in \text { coker  } ( T ) ^\vee $,那$q ^t $会将其射到$\lambda q \in W ^\vee $.留意到$T ^t ( \lambda q ) = \lambda q T $,然而根据$\text { coker  } $的定义知道$qT = 0 $,这必然意味着$T ^t ( \lambda q ) = 0 $.</p>
<p>再证明$\ker ( T ^t ) \subseteq q ^t ( \text { coker  } ( T ) ^\vee ) $,设$\tilde { \mu  } \in \ker { T ^t  } $,也就是说$T ^t ( \tilde { \mu  } ) = \tilde { \mu  } T = 0 $,我们要找到一个$\lambda $使得$q ^t ( \lambda ) = \lambda q = \tilde { \mu  } $,那么必然见到$\lambda : \vec { w  } + \text { im  } ( T ) \mapsto \tilde { \mu  } ( \vec { w  } ) $是满足条件的,只需验证$\tilde { \mu  } | _{ \text { im  } ( T )  } = 0 $,这恰好由$T ^t ( \tilde { \mu  } ) = \tilde { \mu  } T = 0 $给出.</p>
<p>至于右半部分,就是我们上面所刻画的$\tilde { \mu  } $和$\mu $的关系了,换言之$\mu i = 0 \Leftrightarrow \exists \tilde { \mu  } , \mu = \tilde { \mu  } T $.</p>
<p>上述过程当然太过复杂了,尝试感性理解一下我们刚刚在做什么.我们的$\ker T $的意义是,$T : V \to W $这个过程中所损失的信息对吧,那我们反观$T ^t : W ^\vee \to V ^\vee , \lambda \mapsto \lambda T $这个过程中所损失的,也就是何时,$\lambda T = 0 $.由于这是两个映射,当然就等价于$\forall \vec { v  } \in V $,$\lambda T \vec { v  } = 0 $.当然就等价于$\forall \vec { u  } \in \text { im  } ( T ) $,$\lambda \vec { u  } = 0 $,这必然等价于$\ker \lambda \supseteq \text { im  } ( T ) $.所以这些$\lambda $都可以表示为一个$\tilde { \lambda  } q $的形式,其中$\ker q = \text { im  } ( T ) $,取余核是刚刚好的.</p>
<h5><span id="像自对偶">像自对偶</span></h5><p>对于映射$T : V \to W $,我们下面将给出典范同构:</p>
<script type="math/tex; mode=display">
\text { im  } ( T ) ^\vee \cong \text { im  } ( T ^t )</script><p>如上,商映射$q : W \to \text { coker  } ( T ) $满足$\ker q = \text { im  } ( T ) $,于是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\text { im  } ( T ) ^\vee \cong \text { coker  } ( q ^t : \text { coker  } ( T ) ^\vee \to W ^\vee ) \\
\cong \text { coker  } ( \ker T ^t \hookrightarrow W ^\vee ) \\
& = W ^\vee / \ker ( T ^t ) \\
\cong \text { im  } ( T ^t ) 
\end{aligned}</script><p>两边取$\dim $,得知行秩等于列秩.</p>
<h3><span id="实内积空间">实内积空间</span></h3><p>考虑正定对称双线性形式$( _ \mid _ ) : V \times V \to F $,这样的资料$( V , ( _ \mid _ ) ) $称为<strong>内积空间(IPS)</strong>.为了要一些$\mathbb { R  } $上的完备性质,我们下面主要讨论$F = \mathbb { R  } $的特殊情况.回忆道此时它应当满足的条件:</p>
<ol>
<li><p>双线性:各位有分配律以及标量乘法.</p>
</li>
<li><p>对称性:$( \vec { v  } \mid \vec { w  } ) = ( \vec { w  } \mid \vec { v  } ) $.</p>
</li>
<li><p>正定性:$( \vec { v  } \mid \vec { v  } ) \geq 0 $,并且等号成立当且仅当$\vec { v  } = \vec { 0  } $.</p>
</li>
</ol>
<p>回忆道二次型理论的时候我们曾经说过正定性是强于非退化的,因此内积一定是非退化的.</p>
<p>接下来定义$\vec { v  } \in V $的<strong>长度</strong>为$\Vert \vec { v  } \Vert = \sqrt { ( \vec { v  } \mid \vec { v  } )  } $,并且如果$( \vec { v  } \mid \vec { w  } ) = 0 $,则称它们<strong>正交</strong>,也写作$\vec { v  } \bot \vec { w  } $.同理可以定义正交空间$V _0 ^\bot $.还将满足$\Vert \vec { v  } \Vert = 1 $的$\vec { v  } $称为<strong>单位向量</strong>.</p>
<h4><span id="勾股定理">勾股定理</span></h4><p>事实上可以写出所谓的<strong>配极化</strong>:$( \vec { v  } _1 \mid \vec { v  } _2 ) = \frac { 1  } { 2  } ( \Vert \vec { v  } _1 + \vec { v  } _2 \Vert ^2 - \Vert \vec { v  } _1 \Vert ^2 - \Vert \vec { v  } _2 \Vert ^2 ) $.</p>
<p>这里可以看出内积上的勾股定理:也就是当$\vec { v  } \bot \vec { w  } $时$\Vert \vec { v  } + \vec { w  } \Vert ^2 = \Vert \vec { v  } \Vert ^2 + \Vert \vec { w  } \Vert ^2 $.</p>
<h4><span id="柯西不等式">柯西不等式</span></h4><p>即$( \vec { v  } \mid \vec { w  } ) ^2 \leq ( \vec { v  } \mid \vec { v  } ) ( \vec { w  } \mid \vec { w  } ) $,或言$( \vec { v  } \mid \vec { w  } ) \leq \Vert \vec { v  } \Vert \cdot \Vert \vec { w  } \Vert $.</p>
<p>等式成立当且仅当$\vec { v  } , \vec { w  } $线性相关,此时也是容易证明的,只需要讨论$\vec { v  } = t \vec { w  } $以及反过来的情况即可.</p>
<p>当$\vec { v  } , \vec { w  } $线性无关时,那么$\vec { v  } \ne 0 , \vec { w  } \ne 0 $,于是$\forall t , \vec { v  } + t \vec { w  } \ne 0 $.这会导致:</p>
<script type="math/tex; mode=display">
0 < ( \vec { v  } + t \vec { w  } \mid \vec { v  } + t \vec { w  } ) = t ^2 ( \vec { w  } \mid \vec { w  } ) + 2 t ( \vec { v  } \mid \vec { w  } ) + ( \vec { v  } \mid \vec { v  } )</script><p>将此看作关于$t $的二次多项式,那它就没有实根,于是观察判别式$\Delta = 4 ( \vec { v  } \mid \vec { w  } ) ^2 - 4 ( \vec { v  } \mid \vec { v  } ) ( \vec { w  } \mid \vec { w  } ) &lt; 0 $就见到柯西不等式成立.</p>
<p>用柯西不等式还可以定义两个向量之间的夹角,设其为$\angle ( \vec { v  } , \vec { w  } ) $,并定义$\cos \angle ( \vec { v  } , \vec { w  } ) = \frac { ( \vec { v  } \mid \vec { w  } )  } { \Vert \vec { v  } \Vert \cdot \Vert \vec { w  } \Vert  } $.</p>
<p>值得一提的是,柯西准则实际上保证了如果空间本身是连续的,那么内积就一定是连续的,原因是假设一列$( \vec { x  } _n , \vec { y  } _n ) \to ( \vec { x  } , \vec { y  } ) $,无论以何种方式逼近,一定有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| ( \vec { x  } _n \mid \vec { y  } _n ) - ( \vec { x  } \mid \vec { y  } ) | \\
& \leq | ( \vec { x  } _n - \vec { x  } \mid \vec { y  } _n ) | + | ( \vec { x  } \mid \vec { y  } _n - \vec { y  } ) | \\
& \leq \Vert \vec { x  } - \vec { x  } _n \Vert \cdot \Vert \vec { y  } _n \Vert + \Vert \vec { x  } \Vert \cdot \Vert \vec { y  } _n - \vec { y  } \Vert 
\end{aligned}</script><p>这样就可以将其控制住.</p>
<h4><span id="三角不等式">三角不等式</span></h4><p>先用配极化,再用柯西不等式得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Vert \vec { v  } _1 + \vec { v  } _2 \Vert ^2 & = \Vert \vec { v  } _1 \Vert ^2 + \Vert \vec { v  } _2 \Vert ^2 + 2 ( \vec { v  } _1 \mid \vec { v  } _2 ) \\
& \leq \Vert \vec { v  } _1 \Vert ^2 + \Vert \vec { v  } _2 \Vert ^2 + 2 | ( \vec { v  } _1 \mid \vec { v  } _2 ) | \\
& \leq \Vert \vec { v  } _1 \Vert ^2 + \Vert \vec { v  } _2 \Vert ^2 + 2 \Vert \vec { v  } _1 \Vert \cdot \Vert \vec { v  } _2 \Vert \\
& = ( \Vert \vec { v  } _1 \Vert + \Vert \vec { v  } _2 \Vert ) ^2 \\

\end{aligned}</script><h4><span id="距离相关">距离相关</span></h4><p>如上可以定义<strong>距离函数</strong>$d : V \times V \to \mathbb { R  } _{ \geq 0  } , ( \vec { v  } , \vec { w  } ) \mapsto \Vert \vec { w  } - \vec { v  } \Vert $.容易见到其满足三角不等式$d ( \vec { u  } , \vec { v  } ) + d ( \vec { v  } , \vec { w  } ) \geq d ( \vec { u  } , \vec { w  } ) $.</p>
<h4><span id="正交向量族">正交向量族</span></h4><p>选取$V $中的一组两两正交的非零元素,称其为<strong>正交向量族</strong>或者<strong>正交子集</strong>.特别地如果所有向量都是单位向量,则称其为<strong>单位正交向量族</strong>或者<strong>单位正交子集</strong>.容易见到正交向量族应该是线性无关的,原因是反证,如果$\sum a _k \vec { v  } _k = 0 $,两边对$\vec { v  } _k $做内积就可以得到$a _k \Vert \vec { v  } _k \Vert ^2 = 0 $,根据正定性得到$a _k = 0 $.</p>
<p>既然如此,我们就将由一个单位正交子集所给出的基称为<strong>单位正交基(ONB)</strong>.</p>
<p>如果我们能拿出一组$n $个元素的单位正交基$\langle \vec { v  } _1 , \cdots \vec { v  } _n \rangle $,那么考虑用这组有序基将$V \to \mathbb { R  } ^n $.则注意到$\forall \vec { v  } \in V $,应当有:$\vec { v  } = \sum _k a _k \vec { v  } _k $.并且两边对$\vec { v  } _k $取内积就可以见到$a _k = ( \vec { v  } \mid \vec { v  } _k ) $.我们可以证明在这组基的同构下原本的内积就同构于$\mathbb { R  } ^n $上的标准内积(点乘).因此需要验证这个映射是否是保距的,事实上注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \sum _i a _i \vec { v  } _i \mid \sum _j b _j \vec { v  } _j ) \\
& = \sum _{ i , j  } a _i b _j ( \vec { v  } _i \mid \vec { v  } _j ) \\
& = \sum _i a _i b _i 
\end{aligned}</script><h4><span id="gram-schmidt-正交化">Gram-Schmidt 正交化</span></h4><p>问题现在在于单位正交基是否总是存在以及如何找到一个.我们先取一组向量$\vec { v  } _1 , \vec { v  } _2 , \cdots $线性无关(这里甚至允许可数无穷个向量),递归定义:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\vec { w  } _1 & = \vec { v  } _1 \\
\vec { w  } _k & = \vec { v  } _k - \sum _{ i = 1  } ^{ k - 1  } \frac { ( \vec { w  } _i \mid \vec { v  } _k )  } { ( \vec { w  } _i \mid \vec { w  } _i )  } \vec { w  } _i 
\end{aligned}</script><p>就可以取出一组正交基,之后只需令$\vec { u  } _k = \frac { \vec { w  } _k  } { \Vert \vec { w  } _k \Vert  } $就可以转化为一组单位正交基.事实上还可以注意到$\langle \vec { w  } _1 , \cdots \vec { w  } _k \rangle = \langle \vec { v  } _1 , \cdots , \vec { v  } _k \rangle $.其构造思路是每次添加一个拥有两项的元素,一项要是前面的空间内的部分,另一部分不是,然而它们之和要与前面空间正交.</p>
<p>证明的话,注意到:$\vec { w  } _k \in \vec { v  } _k + \langle \vec { w  } _1 , \cdots , \vec { w  } _{ k - 1  } \rangle $,因此数学归纳证明$\langle \vec { w  } _1 , \cdots \vec { w  } _k \rangle = \langle \vec { v  } _1 , \cdots , \vec { v  } _k \rangle $:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\langle \vec { w  } _1 , \cdots , \vec { w  } _k \rangle \\
& = \langle \vec { w  } _1 , \cdots , \vec { w  } _{ k - 1  } \rangle + \langle \vec { w  } _k \rangle \\
& = \langle \vec { v  } _1 , \cdots , \vec { v  } _{ k - 1  } \rangle + \langle \vec { v  } _k \rangle \\
& = \langle \vec { v  } _1 , \cdots , \vec { v  } _k \rangle 
\end{aligned}</script><p>此外上述的算法的优点在于如果$\vec { v  } _k $已经和前面的$\vec { w  } _1 , \cdots , \vec { w  } _{ k - 1  } $正交,自然有$\vec { w  } _k = \vec { v  } _k $.</p>
<p>而验证正交无非是两边同时对$\vec { w  } _j $做内积并继续归纳即可.</p>
<p>由上给出两个推论:</p>
<ol>
<li><p>任何有限维内积空间都有单位正交基.</p>
</li>
<li><p>任何单位正交子集都可以扩充为一个单位正交基.</p>
</li>
</ol>
<p>(1)找到一组基用上述算法即可,(2)的话可以先扩充成基,再按照上述算法,而前面原本已经正交的部分不会改变.</p>
<h6><span id="example1ru分解">Example1(RU分解)</span></h6><p>观察上述Gram-Schmidt正交化过程就可以看到,对于一个矩阵$A = ( \vec { v  } _1 , \cdots , \vec { v  } _n ) $,对其作正交化,每次相当于右乘(列变换)一个上三角矩阵(没有交换列的操作),最终变换的形态则会是一个正交矩阵.因此,任何一个可逆矩阵都可以被分解成$RU $,其中$R $是一个正交矩阵,$U $是一个上三角矩阵.</p>
<h6><span id="example2legendre多项式">Example2(Legendre多项式)</span></h6><p>考虑$\mathbb { R  } $上的多项式组成的$\mathbb { R  } - $向量空间$\mathbb { R  } [ x ] $,定义内积$( f \mid g ) = \int _{ - 1  } ^1 f ( x ) g ( x ) \text { d  } x $,容易见到其满足定义.此外,$\mathbb { R  } [ x ] $的一组自然的基是$\langle 1 , x , x ^2 \cdots \rangle $.</p>
<p>是否可以对其进行正交化呢?考虑限制得到的单位正交基的最高次系数均为$1 $,容易见到这组单位正交基如此便被唯一刻画,并且必然是上述做Gram-Schmidt正交化的产物.</p>
<p>既然如此,我们接下来尝试检验$P _0 = 1 , P _n = \frac { 1  } { 2 ^n n !  } ( ( x ^2 - 1 ) ^n ) ^{ ( n )  } $就是一组正交基.我们声称以下命题成立:</p>
<ol>
<li><p>$[ x ^n ] P _n = \frac { ( 2 n ) !  } { 2 ^n ( n ! ) ^2  } $.</p>
</li>
<li><p>$P _n ( 1 ) = 1 $.</p>
</li>
<li><p>当$0 \leq k &lt; n $时,$\int _{ - 1  } ^1 t ^k P _n ( t ) \mathrm { d  } t = 0 $.作为此的一个推论,$n \ne m $的时候$\int _{ - 1  } ^1 P _m ( t ) P _n ( t ) \mathrm { d  } t = 0 $.</p>
</li>
<li><p>$P _n ( - t ) = ( - 1 ) ^n P _n ( t ) $.</p>
</li>
<li><p>$\int _{ - 1  } ^1 P _n ( t ) ^2 \mathrm { d  } t = \frac { 2  } { 2 n + 1  } $.</p>
</li>
<li><p>递归式:$( n + 1 ) P _{ n + 1  } = ( 2 n + 1 ) x ( P _n ) - nP _{ n - 1  } $.</p>
</li>
</ol>
<p>对于(1),讨巧的策略是直接看$\lim _{ x \to \infty  } \frac { P _n  } { x ^n  } $,而于此使用洛必达法则上下求导$n $次,立刻证毕.</p>
<p>对于(2),考虑$( x ^2 - 1 ) = ( x - 1 ) ( x + 1 ) $,用Leibniz律求导,得到$P _n ( 1 ) = \frac { 1  } { 2 ^n n !  } n ! ( 1 + 1 ) ^n = 1 $.</p>
<p>对于(3),只需分部积分,每次将$P _n ( t ) $给扔到$\rm d $里,这样前面的$t ^k $就会被不断消耗,最终得到结果.</p>
<p>对于(4),考虑在求导前的部分当然都是一样的,因此只是求导的时候,$P _n ( t ) $是$\frac { 1  } { ( \mathrm { d  } t ) ^n  } $,而$P _n ( - t ) = \frac { 1  } { ( ( \mathrm { d  } ) ( - t ) ) ^n  } $.</p>
<p>对于(5),把$P _n ( t ) ^2 = P _n ( t ) \times P _n ( t ) $,然后使用分部积分,得到的结果当然就是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( - 1 ) ^n \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \int _{ - 1  } ^1 ( t ^2 - 1 ) ^n \mathrm { d  } t \\
& = 2 ( - 1 ) ^n \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \int _{ 0  } ^1 ( t ^2 - 1 ) ^n \mathrm { d  } t \\
& = 2 \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \int _{ 0  } ^1 ( 1 - t ^2 ) ^n \mathrm { d  } t \\

\end{aligned}</script><p>做换元$\cos \theta = t $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
2 \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \int _{ 0  } ^1 ( 1 - t ^2 ) ^n \mathrm { d  } t \\
& = 2 \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \int _{ 0  } ^{ \frac { \pi  } { 2  }  } \sin ( t ) ^{ 2 n + 1  } \mathrm { d  } t \\
& = 2 \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \frac { ( 2 n ) ! !  } { ( 2 n + 1 ) ! !  } \\
& = 2 \frac { ( 2 n ) !  } { ( 2 ^n n ! ) ^2  } \frac { ( 2 ^n n ! ) ^2  } { ( 2 n + 1 ) !  } \\
& = \frac { 2  } { 2 n + 1  } 
\end{aligned}</script><p>于是证毕.</p>
<p>对于(6),考虑既然上述Legendre多项式是一组基,那么$xP _n $作为一个$n + 1 $次多项式,理应可以被表示出来.也就是有:</p>
<script type="math/tex; mode=display">
xP _n = \sum _{ k = 0  } ^{ n + 1  } a _k P _{ k  }</script><p>两边对$P _{ k  } , k \leq n - 2 $做内积,那么左侧就是$\int _{ - 1  } ^1 ( xP _k ( x ) ) P _n ( x ) \mathrm { d  } x $,此时考虑$xP _k ( x ) $是一个$k + 1 &lt; n $次多项式,所以左侧理应为$0 $,于是右侧的$a _k = 0 $.上式被我们简化为:</p>
<script type="math/tex; mode=display">
xP _n = a _n P _{ n + 1  } + b _n P _{ n  } + c _n P _{ n - 1  }</script><p>考虑两边提取$[ x ^{ n + 1  } ] $,立刻知道$a _n = \frac { n + 1  } { 2 n + 1  } $.</p>
<p>两边对$P _n $做内积,注意到$x ( P _n ) ^2 $是一个奇函数,所以左边为$0 $,所以$b _n = 0 $.</p>
<p>接下来是$c _n $.考虑$( xP _n \mid P _{ n - 1  } ) = ( P _n \mid xP _{ n - 1  } ) $,而由刚才的$a _n $,$xP _{ n - 1  } = \frac { n  } { 2 n - 1  } P _n + P ‘ $,因此立刻见到$c _n = \frac { n  } { 2 n + 1  } $,这就得证了.</p>
<h4><span id="正交算子">正交算子</span></h4><p>如果拿出两个内积空间,并能找到一个映射$\varphi : V \to W $使得保$\Vert \varphi ( \vec { v  } ) \Vert _W = \Vert \vec { v  } \Vert _V $,那么称其为<strong>保距同构</strong>.用配极化容易见到保距同构一定保持了内积.容易见到如果$\varphi $是同构,那么$\varphi ^{ - 1  } $当然也是同构的.</p>
<p>考虑取两个有限维内积空间$V , W $.由于内积非退化并且对称,于是应当对于所有线性映射$T : V \to W $都有伴随$T ^<em> : W \to V $使得$( T \vec { v  } \mid \vec { w  } ) _W = ( \vec { v  } \mid T ^</em> \vec { w  } ) _V $并且$( T ^* \vec { w  } \mid \vec { v  } ) _V = ( \vec { w  } \mid T \vec { v  } ) _W $.</p>
<p>接下来我们尝试证明:$T $是保距同构当且仅当$T ^* = T ^{ - 1  } $.</p>
<p>先证必要性:当$T $是保距同构的时候,见到$T ^{ - 1  } $必然也是同构,这就意味着$( T \vec { v  } \mid \vec { w  } ) _W = ( T ^{ - 1  } T \vec { v  } \mid T ^{ - 1  } \vec { w  } ) _V = ( \vec { v  } \mid T ^{ - 1  } \vec { w  } ) _V $对于$\forall \vec { v  } , \vec { w  } $都成立,这当然意味着$T ^* = T ^{ - 1  } $.</p>
<p>再证充分性,当$T ^<em> = T ^{ - 1  } $时,考虑$( T \vec { v  } _1 \mid T \vec { v  } _2 ) _W = ( \vec { v  } _1 \mid T ^</em> T \vec { v  } _2 ) _V = ( \vec { v  } _1 \mid \vec { v  } _2 ) _V , \forall \vec { v  } _1 , \vec { v  } _2 $,这就意味着其是保距同构.</p>
<p>另外还可以证明如果$\vec { v  } _1 , \cdots , \vec { v  } _n $是$V $的单位正交基时,$T $是保距同构当且仅当$T \vec { v  } _1 , \cdots , T \vec { v  } _n $是$W $的单位正交基.</p>
<p>必要性源于保距同构保持了关于内积的一切性质,因此显然.接下来考虑充分性,如果$T \vec { v  } _1 , \cdots , T \vec { v  } _n $是$W $的单位正交基,那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Vert \sum _k a _k \vec { v  } _k \Vert _V ^2 & = \sum _k a _k ^2 \\
\Vert T ( \sum _k a _k \vec { v  } _k ) \Vert _W ^2 & = \Vert \sum _k a _k ( T \vec { v  } _k ) \Vert ^2 _W & = \sum _k a _k ^2 
\end{aligned}</script><p>这意味着其保距.并且$\dim V = n = \dim W $意味着是同构.</p>
<p>接下来定义有限维内积空间的自同构称为$V $上的<strong>正交变换</strong>.现在不妨假设$V = \mathbb { R  } ^n $并将视角转移到标准内积上(此时应当有$A ^<em> = A ^T $)尝试使用矩阵来描述该问题.容易见到以下命题等价,并将满足下列性质的矩阵称为<em>*实正交矩阵</em></em>:</p>
<ol>
<li><p>$A ^{ - 1  } = A ^T $.</p>
</li>
<li><p>$A $相对于标准内积是正交变换.</p>
</li>
</ol>
<p>由此得到以下推论:</p>
<ol>
<li><p>单位矩阵是正交矩阵.</p>
</li>
<li><p>如果$A $和$B $都是正交矩阵,那么$AB $亦然.</p>
</li>
<li><p>如果$A $是正交矩阵,则$A ^T , A ^{ - 1  } $均亦然.</p>
</li>
<li><p>正交矩阵的行列式为$\pm 1 $.</p>
</li>
<li><p>对于矩阵$A = ( \vec { v  } _1 , \cdots , \vec { v  } _n ) $,$A $是正交矩阵当且仅当$\vec { v  } _1 , \cdots , \vec { v  } _n $是一组单位正交基.</p>
</li>
<li><p>正交矩阵的特征值(无论实复)必然满足$| \lambda | = 1 $.</p>
</li>
</ol>
<p>(1)(2)(3)显然,(4)则是因为$( \det A ) ^2 = \det ( A ^T ) \det A = 1 $.</p>
<p>(5)的话原因是$\mathbb { R  } $下$\vec { e  } _1 , \cdots \vec { e  } _n $是一组标准正交基,而$\vec { v  } _k = A \vec { e  } _k $,因此根据前面提到的正交矩阵对标准正交基的转译性质即证毕.</p>
<p>(6)的话,考虑标准内积空间$( A \vec { v  } \mid A \vec { v  } ) $,其中$\vec { v  } $是以$\lambda $为特征值的特征向量,那么首先,$( A \vec { v  } \mid A \vec { v  } ) = | \lambda | ^2 ( \vec { v  } \mid \vec { v  } ) $,另一方面,其又是$( ( A \vec { v  } ) ^t ) ( A \vec { v  } ) = ( \vec { v  } \mid \vec { v  } ) $.这就完事了.</p>
<h4><span id="正交补空间">正交补空间</span></h4><p>取$S $为$V $的任意子集,则称$S ^\bot = \{ \vec { v  } \in V \mid \forall \vec { s  } \in S , ( \vec { s  } \mid \vec { v  } ) = 0 \} $为$S $的<strong>正交补空间</strong>.</p>
<p>虽然在此定义下$S $无需是子空间,但仍见到$S ^\bot $自动对加法和纯量乘法封闭,因此$S ^\bot $仍是一个子空间.然而其实这里$S ^\bot = ( \langle S \rangle ) ^\bot $,这当然是显然的,因此后面只关注$S = V _0 $是$V $的子空间的情况.</p>
<p>虽然之前我们做双线性形式的时候正交空间并没有太好的性质,但此时对于内积的情况有,我们声称$V = V _0 \oplus V _0 ^\bot $.原因是任取一组$V _0 $的单位正交基$\vec { v  } _1 , \cdots , \vec { v  } _m $,注意到$\vec { v  } = \sum _{ k  } ( \vec { v  } _k \mid \vec { v  } ) \vec { v  } _k + ( \vec { v  } - \sum _{ k  } ( \vec { v  } _k \mid \vec { v  } ) \vec { v  } _k ) $,前者显然属于$V _0 $,而后者只需逐个对$\vec { v  } _k $做内积就可以验证其属于$V _0 ^\bot $.不妨将前者称为$\vec { v  } $在$V _0 $上的正交投影.并将$P : V \to V _0 , \vec { v  } \mapsto \vec { v  } _0 $称作正交投影算子,其中$\vec { v  } = \vec { v  } _0 + \vec { v  } _1 $,$\vec { v  } _0 \in V _0 , \vec { v  } _1 \in V _0 ^\bot $.另外,观察到伴随映射有$( \text { im  }  T ) ^\bot = \ker T ^<em> $,见到$V = \ker T ^</em> + \text { im  }  T $.</p>
<p>取$V _0 \subseteq V $,并且取$V = V _0 \oplus V _0 ^\bot $,考虑$P $映射是从$V $到$V _0 $的投影,那么$\forall \vec { v  } $,$\min _{ \vec { u  } \in V _0  } \Vert \vec { u  } - \vec { v  } \Vert $在$\vec { u  } = P \vec { v  } $的时候取最小.原因是不妨设$\vec { v  } = \vec { v  } _0 + \vec { v  } _1 $,使用勾股定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Vert \vec { u  } - \vec { v  } \Vert ^2 \\
& = \Vert \vec { u  } - \vec { v  } _0 - \vec { v  } _1 \Vert ^2 \\
& = \Vert \vec { u  } - \vec { v  } _0 \Vert ^2 + \Vert \vec { v  } _1 \Vert ^2 \\
& \geq \Vert \vec { v  } _1 \Vert ^2 
\end{aligned}</script><p>此时仔细观察投影算子$P : V \to V _0 $,应当可以将$P $视作$\text { End  } ( V ) $中的某元素,我们下面证明$P $是正交投影算子当且仅当$P ^* = P $和$P ^2 = P $同时成立.</p>
<p>先证明必要性:仍选择将$\vec { v  } = \vec { v  } _0 + \vec { v  } _1 $,其中$\vec { v  } _0 \in V _0 $而$\vec { v  } _1 \in V _0 ^\bot $,此时$P \vec { v  } = \vec { v  } _0 $,而$P ^2 \vec { v  } = \vec { v  } _0 = P \vec { v  } $,因此$P ^2 = P $总是成立.另外如果有$\vec { v  } ‘ = \vec { v  } _0 ‘ + \vec { v  } _1 ‘ $,那么应当注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( P \vec { v  } \mid \vec { v  } ' ) \\
& = ( \vec { v  } _0 \mid \vec { v  } ' ) & = ( \vec { v  } _0 \mid \vec { v  } _0 ' ) & = ( \vec { v  } \mid \vec { v  } _0 ' ) \\
& = ( \vec { v  } \mid P \vec { v  } ' ) 
\end{aligned}</script><p>然后证明充分性,直接取$V _0 = \text { im  } ( P ) $,那么$\forall \vec { v  } \in V $当然$\exists \vec { u  } $有$\vec { v  } = P \vec { u  } + \vec { v  } _1 $.此时注意到$P \vec { v  } = P \vec { u  } + P \vec { v  } _1 $.观察发现$( P \vec { v  } _1 \mid P \vec { v  } _1 ) = ( P ^* P \vec { v  } _1 \mid \vec { v  } _1 ) = ( P \vec { v  } _1 \mid \vec { v  } _1 ) $,然而$\vec { v  } _1 \in V _0 ^\bot $而$P \vec { v  } _1 \in V _0 $,于是$( P \vec { v  } _1 \mid P \vec { v  } _1 ) = 0 $,于是$P \vec { v  } _1 = 0 $.因此$P \vec { v  } = P \vec { u  } $.</p>
<p>接下来定义一个正交投影算子的<strong>镜像</strong>为$2 P - \text { id  } _V $,其将$\vec { v  } _0 + \vec { v  } _1 $映射到$\vec { v  } _0 - \vec { v  } _1 $上.我们想要证明如果$P $是正交投影算子,那么$2 P - \text { id  } _V $是正交变换.容易检验$( 2 P - \text { id  } _V ) ^* = ( 2 P - \text { id  } _V ) $,那就只需要验证:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( 2 P - \text { id  } _V ) ^* ( 2 P - \text { id  } _V ) \\
& = ( 2 P - \text { id  } _V ) ( 2 P - \text { id  } _V ) \\
& = 4 P ^2 - 4 P + \text { id  } _V \\
& = \text { id  } _V 
\end{aligned}</script><p>还可以证明:如果$V _0 $是$T $不变子空间,那么$( V _0 ) ^\bot $是$T ^<em> $的不变子空间,证明的话只需考虑$( T ^</em> \vec { w  } \mid \vec { v  } ) = ( \vec { w  } \mid T \vec { v  } ) = 0 $,其中$\vec { v  } \in V _0 $而$\vec { w  } \in ( V _0 ) ^\bot $.这将为我们把空间分解为$V _0 \oplus ( V _0 ) ^\bot $提供帮助.更详细的讨论将在自伴算子处讨论.</p>
<h4><span id="投影矩阵">投影矩阵</span></h4><p>考虑向量空间$V $和$A _1 , \cdots , A _s \in \text { End  } ( V ) $,满足$A _1 + \cdots + A _s = \text { id  } $,并且$\forall i \ne j , A _i A _j = 0 $,而且$A _i ^2 = A _i $.</p>
<p>此时令$V _i = \text { im  } ( A _i ) $.我们下面证明以下三条事实:</p>
<ol>
<li><p>$A _i ( \sum \vec { v  } _k ) = \vec { v  } _i $,其中$\vec { v  } _k \in V _k $.</p>
</li>
<li><p>$V = \bigoplus V _k $.</p>
</li>
<li><p>若$A ^2 = A $,则$V = \text { im  } ( A ) \oplus \text { im  } ( \text { id  } - A ) = \text { im  } A \oplus \ker A $.</p>
</li>
</ol>
<p>(1)显然.</p>
<p>考虑(2)的证明,由于$V = \text { im  } ( \text { id  } ) \subseteq \sum V _k \subseteq V $,于是$\sum V _k = V $.只需再证明$\forall k , V _k \cap ( \sum _{ j \ne k  } V _j ) = \{ \vec { 0  } \} $即可.而$\forall \vec { w  } \in V _k $,考虑$A _k ( \vec { w  } ) = \vec { w  } $但$A _k ( \sum _{ j \ne k  } V _j ) = 0 $,这意味着$\vec { w  } \notin ( \sum _{ j \ne k  } V _j ) $,这就证毕了.</p>
<p>考虑(3)的证明,只需检验$A ( \text { id  } - A ) = 0 $,这是显然的.</p>
<p>而在特征为$0 $的域上,我们尝试证明更强一点的结论:当$\sum A _k = \text { id  } $的时候,以下三条命题等价:</p>
<ol>
<li><p>对于每个$i $都有$A _i ^2 = A _i $.</p>
</li>
<li><p>$\sum \text { rk  } ( A _i ) = \dim V $.</p>
</li>
<li><p>$\forall i \ne j $,$A _i A _j = 0 = A _j A _i $.</p>
</li>
</ol>
<p>(1)$\Rightarrow $(2)的话考虑对于单个$A _i $,我们上面已经证明过当$A _i ^2 = A _i $的时候应当有直和分解$V = \text { im  } ( A _i ) \oplus \text { im  } ( \text { id  } - A _i ) $,此时任取一组基限制在$\text { im  } ( A _i ) $上都是恒等变换,于是$\text { tr  } ( A _i ) = \text { rk  } ( A _i ) $.这个证明可能略有口胡,或者你直接观察$A _i $的极小多项式为$x ( x - 1 ) = 0 $,立刻得到其可对角化并且对角上只有$1 $和$0 $,并且只划分了两个子空间$V _0 $和$V _1 $,再用迹对于相似不变就可以得到$\text { tr  } ( A _i ) = \text { rk  } ( A _i ) $.于是$\sum \text { rk  } ( A _i ) = \sum \text { tr  } ( A _i ) = \text { tr  } ( \text { id  } ) = \dim V $.</p>
<p>(2)$\Rightarrow $(3)的话,考虑同上用$V = \text { im  } ( \text { id  } ) \subseteq \sum V _k \subseteq V $,所以$\sum V _k = V $.这就可以看到同态$\sigma : \bigoplus V _k \to V , ( \vec { v  } _i ) \mapsto \sum \vec { v  } _i $是满的,比较维数就知道$\dim \ker = 0 $,所以这是同构.这意味着$\forall k , j , \text { im  } ( A _k ) \cap \text { im  } ( A _j ) = \{ \vec { 0  } \} $.而我们知道$\text { im  } ( A _k ) \oplus \ker A _k \cong V $,在这里的直和应该直接表现为$\text { im  } ( A _k ) + \ker A _k = V $,这样就直接把$A _j $扔进了$\ker A _k $里面.</p>
<p>(3)$\Rightarrow $(1)是简单的,原因是$A _k = A _k ( \sum _{ j \ne k  } A _j ) + A _k \times A _k $.</p>
<p>如果我们将满足$A ^2 = A $的矩阵称为投影矩阵的话,可以发现一个矩阵是投影矩阵的必要条件是$\ker A + \text { im  }  A = V $.然而并不充分,除非再加上$A ( I - A ) = 0 $.</p>
<h4><span id="自伴算子">自伴算子</span></h4><p>对于一个内积空间$( V , ( _ , _ )  ) $,其中$\dim V = n $.</p>
<p>称一个映射是<strong>自伴的</strong>,当且仅当$T = T ^<em> $.我们下面尝试证明如果$T $是自伴的,那么$T $可以正交对角化.换言之存在正交映射$P $使得$P ^{ - 1  } TP = P ^</em> TP $是对角的.另外,如果$T $可以正交对角化,那么也仅当$T = T ^* $.原因当然显然,因为只需两边取伴随即可见得.</p>
<p>对$n = \dim V $进行归纳,下面不妨假设$n \geq 2 $.</p>
<p>回忆到这个内积空间应该可以同构于标准内积空间$( \mathbb { R  } ^n , \cdot ) $,因此将自伴算子同构于$A ^T = A ^* = A $的矩阵.假设可以找到$T $的某一个实特征值$\lambda _1 $,我们就可以取其对应的特征向量$\vec { v  } _1 \ne 0 $并且满足$T \vec { v  } _1 = \lambda _1 \vec { v  } _1 $,而且满足$\Vert \vec { v  } _1 \Vert = 1 $,并设$V _0 = \text { span  } ( \vec { v  } _1 ) $,回忆到我们有正交直和分解$V = V _0 \oplus ( V _0 ^\bot ) $.</p>
<p>此时观察,既然$V _0 $是$T $不变子空间,我们之前证明了$V _0 ^\bot $是$T ^* = T $的不变子空间,既然如此,$T $限制在$V _0 ^\bot $上就仍然自伴,这样就可以进行数学归纳.</p>
<p>那么怎么找到$T $的一个实特征值呢?为了证明这个定理,我们可能需要先跳出实数域而在复数域上做一些操作.在复数域上的好处在于可以定义共轭,具体地容易发现$\overline { A + B  } = \bar { A  } + \bar { B  } $以及$\overline { A \times B  } = \bar { A  } \times \bar { B  } $.</p>
<p>对于复数域上的矩阵,我们约定$A ^\dagger = \bar { A ^T  } $,注意到$\lambda ^\dagger = \bar { \lambda  } $,并且理应有$( AB ) ^\dagger = B ^\dagger A ^\dagger $.此时取$\vec { v  } = ( z _1 , \cdots , z _n ) \in \mathbb { C  } ^n $,注意到$( \vec { v  } ) ^\dagger ( \vec { v  } ) = \sum | z _k | ^2 \in \mathbb { R  } _{ \geq 0  } $,并且其等于$0 $当且仅当$\vec { v  } = 0 $.</p>
<p>下面我们证明:当$A ^\dagger = cA , c \in \mathbb { C  } $,那么$A $的所有特征值都满足$\bar { \lambda  } = c \lambda $.不过容易见到这里只能取$c = \pm 1 $,原因是$c ^2 = 1 $.这个性质我们会在后面复内积空间中的hermite形式中进一步用到.</p>
<p>证明的话,考虑$\vec { v  } \ne 0 $是以$\lambda \in \mathbb { C  } $为特征值的特征向量,那么我们考虑$( \vec { v  } ) ^\dagger ( A \vec { v  } ) = ( \vec { v  } ) ^\dagger ( \lambda ) \vec { v  } $.此时两边取$\dagger $,左边给出$( \vec { v  } ) ^\dagger A ^\dagger \vec { v  } = c ( \vec { v  } ) ^\dagger A \vec { v  } = c \lambda ( \vec { v  } ) ^\dagger \vec { v  } $,而右边给出$\bar { \lambda  } ( \vec { v  } ) ^\dagger ( \vec { v  } ) $,这样就证明了上述结论.</p>
<p>那么这样做的意义是什么呢?已经知道实数上的自伴算子满足$A ^\dagger = A $,也就是在上面$c = 1 $,那意味着$\lambda = \bar { \lambda  } $,意味着$\lambda $是实数.然而,由于在$\mathbb { C  } $是代数闭的,那么就一定可以找到至少一个复特征值,由上知道这些特征值还都是实数,那我们就补上了上述证明的最后一步.</p>
<p>于是,回忆到直和与分块矩阵的关系,将我们拿到的这些特征向量做正交化后,取$P $为这些单位正交基$\vec { v  } _1 , \cdots , \vec { v  } _n $为列向量的矩阵,那么$P ^{ - 1  } AP = \begin{bmatrix}\lambda _1 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; \lambda _n \end{bmatrix} $.</p>
<p>或者直接来看,我们断言自伴算子对应的特征子空间一定互相正交,原因是设它们分别是$V _{ \lambda _1  } , V _{ \lambda _2  } $,那么$\lambda _1 ( \vec { v  } _1 \mid \vec { v  } _2 ) = ( T \vec { v  } _1 \mid \vec { v  } _2 ) = ( \vec { v  } _1 \mid T \vec { v  } _2 ) = \lambda _2 ( \vec { v  } _1 \mid \vec { v  } _2 ) $.这就必然给出$( \vec { v  } _1 \mid \vec { v  } _2 ) = 0 $.那只需先求特征向量,然后对此施加Gram-Schmidt正交化就赢了.</p>
<h5><span id="实sylvester-判准">(实)Sylvester 判准</span></h5><p>将一个矩阵的左上的$k \times k $的矩阵称为$A $的顺序主子式.</p>
<p>容易发现,实对称矩阵正定当且仅当其所有特征值皆正,原因是正交对角化后的结果.</p>
<p>由此可以得到Sylvester判准,也就是一个实对称矩阵正定当且仅当其所有顺序主子式皆正.</p>
<p>必要性显然,把线性空间限制在左上角的那个$k \times k $里,如果有某个顺序主子式是负的,那就存在负的特征值.</p>
<p>下面证明充分性:考虑数学归纳,当$n \geq 2 $的时候,假设$A $的每个顺序主子式都是正的,我们下面试图证明其所有特征值都是正的.记其特征值为$\lambda _1 , \cdots , \lambda _n $,必定有等式$\lambda _1 \cdots \lambda _n = \det A &gt; 0 $.也就是说,如果$A $有负特征值则必然成对出现,不妨设其为$\lambda _1 $和$\lambda _2 $(当然它们有可能相等,但总之应该取不同的特征向量),此时不妨取它们的特征向量并做单位正交化后得到$\vec { v  } _1 , \vec { v  } _2 $.此时$\forall \alpha , \beta \in \mathbb { R  } $,立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \alpha \vec { v  } _1 + \beta \vec { v  } _2 ) ^t A ( \alpha \vec { v  } _1 + \beta \vec { v  } _2 ) \\
& = \alpha ^2 \lambda _1 + \beta ^2 \lambda _2 & \leq 0 
\end{aligned}</script><p>其中$\alpha , \beta $可以任取,当然存在不全为$0 $的一对$( \alpha , \beta ) $使得$\alpha \vec { v  } _1 + \beta \vec { v  } _2 $作为列向量的第$n $个坐标为$0 $,此时对于左上角的$( n - 1 ) \times ( n - 1 ) $的空间来说,由于进行了数学归纳,上面必然是正定的.这当然就矛盾了.</p>
<h5><span id="实正定矩阵的二次根">(实)正定矩阵的二次根</span></h5><p>设$T \in \text { End  } ( V ) $正定(或者半正定),那么就存在唯一的正定(或半正定)的$S \in \text { End  } ( V ) $使得$S ^2 = T $,这样我们记$S = \sqrt { T  } $.</p>
<p>(一定要记得正定蕴含着其对称啊,总是忘记这个定义)</p>
<p>存在性的话只需要对$T $做单位正交分解,然后把对角线上的特征值全部取根号就可以了.唯一性的话,由于$S $在每一个特征子空间上都应当表现为$\sqrt { \lambda _i  } \text { id  } $(原因是每一个特征子空间本身都是不变子空间,因此$S $的特征子空间也需要是$S ^2 = T $的特征子空间,于是反之亦然),那$S $当然是唯一确定的.</p>
<h6><span id="example1">Example1</span></h6><p>设$A , B , A - B $都是正定矩阵,求证$\sqrt { A  } - \sqrt { B  } $正定.</p>
<p>反证,假设$\sqrt { A  } - \sqrt { B  } $并非正定,那就一定存在一个特征值$\lambda \leq 0 $以及配套的特征向量$\vec { v  } \ne 0 $,使得$( \sqrt { A  } - \sqrt { B  } ) \vec { v  } = \lambda \vec { v  } $,也就是$\sqrt { B  } \vec { v  } = \sqrt { A  } \vec { v  } - \lambda \vec { v  } $.此时见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \vec { v  } ) ^t B \vec { v  } \\
& = ( \sqrt { B  } \vec { v  } ) ^t ( \sqrt { B  } \vec { v  } ) \\
& = ( \sqrt { A  } \vec { v  } - \lambda \vec { v  } ) ^t ( \sqrt { A  } \vec { v  } - \lambda \vec { v  } ) \\
& = ( \vec { v  } ) ^t A \vec { v  } + \lambda ^2 \vec { v  } ^t \vec { v  } - 2 \lambda ( \vec { v  } ) ^t \sqrt { A  } \vec { v  } \\
& \geq ( \vec { v  } ) ^t A \vec { v  } 
\end{aligned}</script><p>这就与$A - B $正定是矛盾的了.</p>
<h6><span id="example2">Example2</span></h6><p>设$A , B , A - B $都是正定矩阵,求证$A ^{ - 1  } - B ^{ - 1  } $正定.</p>
<p>直接扩到复数域,这样一定存在一个$C $,使得$( C ^<em> ) BC = I $,此时由于合同是内积空间上的同构,所以$( C ^</em> ) ( A - B ) C = C ^* AC - I $仍然正定,这就将情况化约到$B = I $的情况.</p>
<p>此时只需对$A $做对角化即可见得了.</p>
<h5><span id="极分解">极分解</span></h5><p>对于内积空间,设$T \in \text { End  } ( V ) $可逆,那么就存在唯一一对$R , U \in \text { End  } ( V ) $使得$R $正定并且$U $是正交变换,$T = RU $.这其实类似于把一个复数拆成模长和辅角两个部分.</p>
<p>在此之前先证明一个引理:标准内积空间上$T ^* T $是半正定的,并且如果$T $单,那么其是正定的.</p>
<p>首先其自伴性质是已知的,半正定的原因是$^t ( \vec { v  } ) ( T ^* T ) ( \vec { v  } ) = ( T \vec { v  } \mid T \vec { v  } ) $,而后者继承了内积空间上的半正定性.并且从此可以看出$T $单的话,也就是$\ker T = { 0  } $就可以继承内积空间上的正定性.</p>
<p>注意到$TT ^<em> = RUU ^</em> R = R ^2 $,因此必定有$R = \sqrt { TT ^<em>  } $,因此$R $是唯一且存在的且正定的(原因是$T $是可逆的,因此$TT ^</em> $是正定的)而且$R $还自伴.另外,因为$R $可逆(正定性推出非退化性),因此$U = R ^{ - 1  } T $就确定.问题在于证明$U $是否是正交变换,只需要证明$U ^* = U ^{ - 1  } $,而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
U ^* U & = ( R ^{ - 1  } T ) ^* ( R ^{ - 1  } T ) \\
& = T ^* R ^{ - 2  } T & = \text { id  } 
\end{aligned}</script><p>这就得证.</p>
<h5><span id="最小二乘法">最小二乘法</span></h5><p>给定一个特定的$T \in \text { Hom  } ( V , W ) $,现在对于一个$\vec { w  } \in W $,想要求一个$\vec { v  } \in V $使得$\Vert T \vec { v  } - \vec { w  } \Vert $最小.这个解被称为<strong>最小二乘解</strong>.</p>
<p>取$W _0 = \text { im  } T $,那么就可以将$\vec { w  } = \vec { w  } _0 + \vec { w  } _1 $,其中$\vec { w  } _0 \in W _0 , \vec { w  } _1 \in ( W _0 ) ^\bot $.此时就可以见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Vert T \vec { v  } - \vec { w  } \Vert ^2 & = \Vert ( T \vec { v  } - \vec { w  } _0 ) - \vec { w  } _1 \Vert ^2 \\
& = \Vert T \vec { v  } - \vec { w  } _0 \Vert ^2 + \Vert \vec { w  } _1 \Vert ^2 
\end{aligned}</script><p>只需让前面为$0 $就行,从这也可以看出来一般而言$\vec { v  } $不是唯一的.然而$\vec { v  } + \ker T $总是唯一的,我们试图在其中找到$\Vert \vec { v  } \Vert $最小的一个作为代表.而$\vec { v  } $仍可以分解为$\ker T $和$( \ker T ) ^\bot $两部分,这就能见到$\Vert \vec { v  } \Vert $最小时$\vec { v  } \in ( \ker T ) ^\bot $.不妨将这个$\vec { v  } $定义为$S ( \vec { w  } ) = \vec { v  } $,应该见到$S $是一个线性映射.</p>
<p>我们还可以证明,其最小二乘解正好是$T ^<em> T \vec { v  } = T ^</em> \vec { w  } $的解.原因是最小二乘解其实也就是$T \vec { v  } - \vec { w  } \in ( \text { im  } T ) ^\bot = \ker ( T ^* ) $.</p>
<p>而注意到$T ^* T $是自伴的,然而其还有更多的好性质:</p>
<ol>
<li><p>$\text { im  }  ( T ^<em> T ) = \text { im  }  ( T ^</em> ) $.</p>
</li>
<li><p>$\ker ( T ^* T ) = \ker T $.</p>
</li>
<li><p>$\text { rk  }  ( T ^<em> T ) = \text { rk  }  ( T ) = \text { rk  } ( T ^</em> ) $.</p>
</li>
</ol>
<p>考虑(1), 首先显然有$\text { im  }  ( T ^<em> T ) \subseteq \text { im  }  ( T ^</em> ) $.而反方向的话,对于$T ^<em> \vec { w  } \in \text { im  } ( T ^</em> ) $,只需取其最小二乘解$\vec { v  } \in V $就给出了$T ^<em> \vec { w  } = T ^</em> T \vec { v  } \in \text { im  } ( T ^* T ) $.</p>
<p>考虑(2),首先显然有$\ker  ( T ^<em> T ) \subseteq \ker  ( T ) $.而反方向的话,若$T ^</em> T \vec { v  } = 0 $,应该能看到$( T \vec { v  } \mid T \vec { v  } ) = ( T ^* T \vec { v  } \mid \vec { v  } ) = 0 $,这意味着$T \vec { v  } = 0 $.</p>
<p>(3)是(1)(2)的推论.顺便一提,这里推出的$\text { rk  } ( T ) = \text { rk  } ( T ^* ) $是行秩等于列秩的另一个证明.</p>
<h4><span id="奇异值分解">奇异值分解</span></h4><p>取$V , W $为有限维实内积空间并采取标准内积,不妨设$m = \dim V , n = \dim W $,注意这里的字母使用与习惯略有差别.并取$T : V \to W $为线性映射.接下来我们证明,存在$V , W $的两组单位正交基,不妨记作$\mathcal { B  } _V = \{ \vec { v  } _1 , \cdots , \vec { v  } _m \} $和$\mathcal { B  } _W = \{ \vec { w  } _1 , \cdots , \vec { w  } _n \} $.记$p = \text { rk  } T $,以及存在一列非负实数$\sigma _1 \geq \cdots \geq \sigma _p $,使得$T \vec { v  } _i = \begin{cases}\sigma _i \vec { w  } _i &amp; 1 \leq i \leq p \ 0 &amp; i &gt; p \end{cases} $.我们称这列非负实数为$T $的<strong>奇异值</strong>,并将在下面证明其由$T $唯一确定.应当说明的是,下述中虽然有的时候会默认后面有一列$0 $来避开讨论,但$\sigma _p \ne 0 $.一般,我们也用非零奇异值的数量来判断$T $的秩.可以认为,奇异值是特征值的某种推广.</p>
<p>考虑矩阵,此时的$T $应当是一个$n \times m $的矩阵.考虑$V $的单位正交基组成的矩阵$P \in M _{ m \times m  } $,以及$W $的单位正交基矩阵$Q \in M _{ n \times n  } $.</p>
<p>此时不妨考虑$T $在标准基下表示为$A $,那考虑$Q ^{ - 1  } AP $实际上就是在两个单位正交基内转化的过程.不妨令$\Sigma = Q ^{ - 1  } AP $,只需证明其在前$p $个主对角线位置分别为$\sigma _1 , \cdots , \sigma _p $即可.</p>
<p>留意到$( \vec { v  } _i \mid T ^<em> \vec { w  } _j ) = ( T \vec { v  } _i \mid \vec { w  } _j ) = \sigma _i ( \vec { w  } _i \mid \vec { w  } _j ) = \sigma _i \delta _{ i , j  } $,其中$\delta _{ i , j  } = [ i = j ] $.回忆到$T ^</em> $是唯一的,并注意到如果干脆定义$T ^<em> $满足$T ^</em> \vec { w  } _j = \sigma _j \vec { v  } _j $上式依旧成立,因此$T ^<em> $的确有此性质.进一步得到推论$T ^</em> T \vec { v  } _i = \sigma _i ^2 \vec { v  } _i $.所以$T ^<em> T $的特征值恰为$\sigma _1 ^2 \geq \cdots $.这样的话其唯一性立刻见到了.不过由于是在$\mathbb { R  } $上,因此我们还要说明其存在性.考虑对$T ^</em> T $做正交对角化.此时回忆到$\text { rk  } ( T ^<em> T ) = \text { rk  } ( T ) = p $,又因为$T ^</em> T $可对角化,$\text { rk  } $对应了非零特征值的数量.直接取$\sigma _i = \sqrt { \lambda _i  } $,其中$\lambda _i $是$T ^* T $的特征值,当然都是可行的.</p>
<p>接下来要反推出$V , W $的两组单位正交基.任取一组$V $的特征向量组成的基并从其构造$W $的基,也就是取$\vec { w  } _i = \frac { T \vec { v  } _i  } { \sigma _i  } $(假设$m \geq n $的情况下,不然的话反之)并证明这也是一组单位正交基.</p>
<p>此时观察到$( \vec { w  } _i \mid \vec { w  } _j ) = \frac { 1  } { \sigma _i \sigma _j  } ( T \vec { v  } _i \mid T \vec { v  } _j ) = \frac { 1  } { \sigma _i \sigma _j  } ( \vec { v  } _i \mid T ^* T \vec { v  } _j ) = \frac { \sigma _j  } { \sigma _i  } \delta _{ i , j  } $,所以这当然也是一组单位正交基.</p>
<h4><span id="moore-penrose-广义逆">Moore-Penrose 广义逆</span></h4><p>取域$F $上的有限维向量空间$V , W $以及线性映射$T : V \to W $.其中$T $未必可逆,但有的时候我们又需要$T $的逆的性质,我们的目标是去找到一个弱一点的替代品.</p>
<p>我们声明一定存在一个$S : W \to V $,满足以下性质:</p>
<ol>
<li><p>$TST = T $.</p>
</li>
<li><p>$STS = S $.</p>
</li>
<li><p>$TS = ( TS ) ^* $.</p>
</li>
<li><p>$ST = ( ST ) ^* $.</p>
</li>
</ol>
<p>容易见到,如果$T $可逆,它的逆当然是一个MP广义逆.事实上我们可以证明满足上述条件的MP广义逆是唯一的.</p>
<p>先来证明其存在性,$\forall \vec { v  } \in V $,做分解$\vec { v  } = \vec { v  } ‘ + \vec { v  } ‘ ‘ $,其中$\vec { v  } ‘ \in \ker T $且$\vec { v  } ‘ ‘ \in ( \ker T ) ^\bot $.同样$\forall \vec { w  } \in W $,做分解$\vec { w  } = \vec { w  } ‘ + \vec { w  } ‘ ‘ $,其中$\vec { w  } ‘ \in \text { im  } T $.</p>
<p>接下来应当见到,任取$\vec { v  } $使得$T \vec { v  } = \vec { w  } $,则$T ^{ - 1  } ( \vec { w  } ‘ ) = \vec { v  } + \ker T $,而$\vec { v  } + \ker T $中的每个元素做投影后得到的$\vec { v  } ‘ ‘ $都是相同的,于是我们定义$S \vec { w  } = \vec { v  } ‘ ‘ $.容易验证$S $是线性映射,而且应当见到$ST $和$TS $其实都是正交投影,具体而言,$ST : V \to ( \ker T ) ^\bot $而$TS : W \to \text { im  } T $,也容易验证上述四条性质.也就是我们想法是,干脆考虑映射$V / \ker T \to \text { im  }  T $必然是可逆的,直接在这个上面找逆而不顾其它.</p>
<p>接下来证明其唯一性,假设$T $有两个MP广义逆$S , R $,我们注意到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
TS & = ( TS ) ^* & = S ^* T ^* & = S ^* ( TRT ) ^* \\
& = S ^* T ^* R ^* T ^* \\
& = ( TS ) ^* ( TR ) ^* \\
& = TSTR \\
& = TR 
\end{aligned}</script><p>同理可证明$ST = RT $,因此$S = STS = STR = RTR = R $,这就给出了唯一性的证明.</p>
<p>那么如何求出一个MP广义逆呢?考虑对于一个线性映射$T : V \to W $,将其视为标准基下的矩阵,做奇异值分解有$T = Q \Sigma P ^{ - 1  } $.</p>
<p>容易见到满足条件的MP逆$S $应当满足$S \vec { w  } _j = \frac { 1  } { \sigma _j  } \vec { v  } _j $,而写作矩阵形式的话就是$P \Pi Q ^{ - 1  } $,其中$\Pi $就是$\Sigma $的非零对角线全部取倒数.验证此事实的策略,要么取检验MP广义逆的定义,要么取一组基并观察投影,但总之都是容易的.</p>
<p>如果想要进一步说明MP广义逆的合理性,不妨考虑设$C ( t ) = T ^<em> T + t \cdot \mathrm { { id  }  } _V $,我们证明MP广义逆实际上就是$S = \lim _{ t \to 0 , \det C ( t ) \ne 0  } C ( t ) ^{ - 1  } T ^</em> $,证明无非也只是使用奇异值分解,考虑$T = Q \Sigma P ^{ - 1  } , T ^* = P \Sigma Q ^{ - 1  } $,那么$C ( t ) = P ( \Sigma ^2 + tI ) P ^{ - 1  } $,容易检验其满足性质.</p>
<h4><span id="极大化极小原理courant-fischer定理">极大化极小原理(Courant-Fischer定理)</span></h4><p>对于实空间$V $,考察其标准内积$( _ \mid _ ) $和任一对称双线性形式$B : V \times V \to \mathbb { R  } $.当然存在唯一的$S \in \text { End  } ( V ) $使得$B ( \vec { v  } _1 , \vec { v  } _2 ) = ( \vec { v  } _1 \mid S \vec { v  } _2 ) $恒成立,无非是把$B $所代表的矩阵拿过来而已.</p>
<p>此时应有$S = S ^* $,对其施加正交对角化拿到单位正交基$\vec { v  } _1 , \cdots , \vec { v  } _n $和对应的一列特征值$\lambda _1 \geq \cdots \geq \lambda _n $.对于单位球面上的向量$\vec { v  } $,其应当满足$| \vec { v  } | = 1 $,此时我们注意到$\lambda _1 = \max _{ | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) , \lambda _n = \min _{ | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) $.原因只是取$\vec { v  } = \sum a _k \vec { v  } _k $,然后$B ( \vec { v  } , \vec { v  } ) = \sum _k a _k ^2 \lambda _k $.上述当然成立.确定除此以外的其他特征值需要更精确地刻画,我们引入如下定理:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\lambda _k & = \min _{ U \subseteq V , \dim U = n - k + 1  } \left ( \max _{ \vec { v  } \in U , | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) \right ) \\
\lambda _k & = \max _{ U \subseteq V , \dim U = k  } \left ( \min _{ \vec { v  } \in U , | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) \right ) \\

\end{aligned}</script><p>将$S $用$- S $替换,则降序的特征值序列要翻转,立刻见到上述两条等价.下面只证明第一条.</p>
<p>取$W _k = \langle \vec { v  } _1 , \cdots , \vec { v  } _k \rangle $.应当见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\dim U \cap W _k & = \dim U + k - \dim ( U + W _k ) \\
& \geq \dim U + k - n & = 1 
\end{aligned}</script><p>这意味着这两个空间的交非零空间,取出一个交集元素$\vec { v  } = \sum _{ i = 1  } ^k a _i \vec { v  } _i \in U $且满足$| \vec { v  } | = 1 $.应当见到$B ( \vec { v  } , \vec { v  } ) = \sum _k \lambda _k a _k ^2 \geq \lambda _k $.这就意味着$\max _{ \vec { v  } \in U , | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) \geq \lambda _k $.或言之$\inf \max _{ \vec { v  } \in U , | \vec { v  } | = 1  } B ( \vec { v  } , \vec { v  } ) \geq \lambda _k $.证明下界可取到只需取$U = \langle \vec { v  } _k , \cdots , \vec { v  } _n \rangle $即可取到(证明取到的策略呢,可以直接看基立刻得到,也可以采取更加严谨好说的方式即前后分别表示一下发现其既满足$\geq \lambda _k $又要$\leq \lambda _k $).</p>
<p>这个定理也可以用来求奇异值,半正定条件下,奇异值无非是特征值开根后的结果.</p>
<p>这个原理的重要意义是将奇异值,特征值这些东西全部挪到了空间本身的性质上(类似惯性定理).于是从此只要我们能拿到空间的同构当然就能断言奇异值,特征值全都同构,这是无可置疑的.</p>
<p>应当能看出这个定理更多有一种拓扑性质,事实上的确如此,如果能取最大值的话,这实际上对应了某种李氏连续性质.</p>
<h4><span id="perron-frobenius定理">Perron-Frobenius定理</span></h4><p>约定$A \geq B $表示对于每一个位置$a _{ i , j  } \geq b _{ i , j  } $.于是约定$A \geq 0 $意味着$A $中的任意元素都$\geq 0 $.</p>
<p>容易见到以下平凡引理:</p>
<ol>
<li><p>$A &gt; 0 , x \geq 0 , x \ne 0 \Rightarrow Ax &gt; 0 $.</p>
</li>
<li><p>$A \geq 0 , x \geq 0 \Rightarrow Ax \geq 0 $.</p>
</li>
</ol>
<p>定义实矩阵$A $的<strong>谱半径</strong>为$\rho ( A ) = \max { | \lambda |  } $,也就是所有复特征值模长的极大值.</p>
<p>虽然这里用到了复特征值,但意义仅是使得多项式可裂,而矩阵仍然是实数域的.因此仍然认为该定理是实内积空间里的定理.</p>
<h5><span id="collatz-wielandt公式">Collatz-Wielandt公式</span></h5><p>对于实矩阵$A &gt; 0 $,我们考虑$S = \{ \vec { x  } \in \mathbb { R  } ^n \mid | \vec { x  } | = 1 , \vec { x  } \geq 0 \} $,容易见到这是个紧集,考虑定义在其上的映射$L : S \to \mathbb { R _{ +  }  } , \vec { x  } \mapsto \min \left ( \cfrac { ( A \vec { x  } ) _i  } { x _i  } , x _i \ne 0 \right ) $.于是命$\rho \in \mathbb { R _+  } $为上述映射像中的极大值,我们下面证明两个事情:首先是这个$\rho $是$A $的一个特征值,其次是这个$\rho $就是$A $的谱半径.</p>
<p>首先证明其是一个特征值,而且对应的特征向量大于零,也就是$\exists \vec { v  } &gt; 0 , A \vec { v  } = \rho \vec { v  } $.容易由定义见到$\exists \vec { v  } , A \vec { v  } \geq \rho \vec { v  } $.假若$A \vec { v  } \ne \rho \vec { v  } $,则上述的平凡引理使得$A ( A \vec { v  } - \rho \vec { v  } ) &gt; 0 $.这里我们就应当会思考一个事情是,能否进行微调来使得得到更大的$\rho $从而导出矛盾.因此这里的思路应当是,取一个$\epsilon $然后找到一个向量$\vec { w  } $,使得$A \vec { w  } &gt; ( \rho + \epsilon ) \vec { w  } $从而导出矛盾.</p>
<p>回到我们拿到的条件,应该存在$\epsilon &gt; 0 $使得$A ( A \vec { v  } - \rho \vec { v  } ) &gt; \epsilon A \vec { v  } $,留意到由于平凡引理,应当$A \vec { v  } &gt; 0 $,取适当的$t $来归一化,定义出$\vec { w  } = tA \vec { v  } \in S $,从而上式导出:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A ( A \vec { v  } ) & > ( \rho + \epsilon ) A \vec { v  } \\
A \vec { w  } & > ( \rho + \epsilon ) \vec { w  } 
\end{aligned}</script><p>立即导出矛盾.因此必有$A \vec { v  } = \rho \vec { v  } $.此外,引理告诉我们$A \vec { v  } &gt; 0 $恒成立,则$\vec { v  } = \rho ^{ - 1  } A \vec { v  } &gt; 0 $亦然成立.</p>
<p>接下来证明这个$\rho $就是谱半径$\rho ( A ) $.由定义见到$\rho $作为特征值应当满足$\rho \leq \rho ( A ) $,接下来只需证明$\rho \geq \rho ( A ) $即可.</p>
<p>对于所有的特征值$\mu $和相应的特征向量$\vec { w  } \ne 0 $满足$A \vec { w  } = \mu \vec { w  } $,使用三角不等式,$\forall 1 \leq i \leq n $应当有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
| \mu | | w _i | & = | ( A \vec { w  } ) _i | \\
& = | \sum _j a _{ i , j  } w _j | & \leq \sum _j a _{ i , j  } | w _j | 
\end{aligned}</script><p>将$\vec { w  } ‘ = ( | w _1 | , \cdots , | w _n | ) \in \mathbb { R  } ^n $,也就是将复向量强行转到实向量上,上式立刻给出$A \vec { w  } ‘ \geq | \mu | \vec { w  } ‘ $.伸缩该向量使得$| \vec { w  } ‘ | = 1 $,于是上式给出$\rho \geq L ( \vec { w  } ‘ ) \geq | \mu | $,这就给出了$\rho ( A ) \leq \rho $.于是证毕.</p>
<h5><span id="perron定理">Perron定理</span></h5><p>对于实矩阵$A &gt; 0 $,我们接下来声明如下定理:</p>
<ol>
<li><p>$\rho ( A ) &gt; 0 $,$\exists \vec { v  } \in \mathbb { R  } ^n , \vec { v  } &gt; 0 , A \vec { v  } = \rho ( A ) \vec { v  } $.也即:谱半径的确是一个特征值.</p>
</li>
<li><p>如果$\lambda \ne \rho ( A ) $,则$| \lambda | &lt; \rho ( A ) $.也就是:谱半径只此实特征值能达到.</p>
</li>
<li><p>谱半径的代数重数和几何重数均为$1 $.</p>
</li>
</ol>
<p>(1)也就是Collatz-Wielandt公式.</p>
<p>(2)的话考虑对Collatz-Wielandt公式作一些补充.假使复特征值$\mu $满足$| \mu | = \rho ( A ) $,则不等式链$\rho ( A ) = \max L ( \vec { v  } ) \geq L ( \vec { w  } ‘ ) \geq | \mu | = \rho ( A ) $必然全部三角不等式取等,中间的每一项$w _j $都必然落在复平面的同一条直线上,那就可以除去一个复数得到实向量$\vec { w  } ‘ ‘ $亦然满足$A \vec { w  } ‘ ‘ = \mu \vec { w  } ‘ ‘ $,由于该式子中除了$\mu $均为实数,因此$\mu $也必然是实数.而且$\mu $当然不可能是负数,这样就完成了(2)的证明.</p>
<p>(3)的话先考虑证明几何重数$\dim V _{ \rho ( A )  } = 1 $,考虑$\vec { v  } , \vec { v  } ‘ $都是$\rho ( A ) $的特征向量,其中$\vec { v  } $由于上述讨论而满足$\vec { v  } &gt; 0 $,而$\vec { v  } ‘ $至少有一个分量为正数.既然如此,应当可以取足够小的$\epsilon &gt; 0 $使得$\vec { v  } - \epsilon \vec { v  } ‘ \geq 0 $,以至于可以取其中尽可能大的$\epsilon $使得$\vec { v  } - \epsilon \vec { v  } ‘ $的某一个分量恰好为$0 $.我们接下来声明此时$\vec { v  } - \epsilon \vec { v  } ‘ = 0 $以说明$\vec { v  } ‘ $和$\vec { v  } $线性相关</p>
<p>为说明此进行反证,假设$\vec { v  } - \epsilon \vec { v  } ‘ \ne 0 $,用平凡引理,考虑$\vec { v  } - \epsilon \vec { v  } ‘ = \frac { 1  } { \rho ( A )  } A ( \vec { v  } - \epsilon \vec { v  } ‘ ) &gt; 0 $,然而我们已经说明其有一个分量为$0 $,导出矛盾.</p>
<p>接下来考虑(3)的完全版本,利用$\dim V _{ \rho ( A )  } = 1 $,如果我们能将整个空间拆成两部分不变子空间,其中一部分是$\langle \vec { v  } \rangle $,那就可以完成上面的部分,原因是此时另一部分不变子空间中不能有$\rho ( A ) $作为根,否则与其维数为$1 $矛盾.另一方面,原本的特征多项式就是两个不变子空间的特征多项式的乘积,这就证明了单根的性质.</p>
<p>于此,考虑以下操作:考虑$\text { char  } ( A ) = \text { char  } ( A ^T ) $,于是$\rho ( A ) = \rho ( A ^T ) $,这就意味着$\exists \vec { u  } &gt; 0 $使得$( A ^T ) \vec { u  } = \rho ( A ) \vec { u  } $.取出它的正交补空间$\langle \vec { u  } \rangle ^\bot $,它应当是$A $的不变子空间,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \vec { u  } ) ^T ( A \vec { x  } ) & = ( A ^T \vec { u  } ) ^T \vec { x  } \\
& = \rho ( A ) ( \vec { u  } ) ^T \vec { x  } & = 0 
\end{aligned}</script><p>同时注意到$\vec { v  } &gt; 0 , \vec { u  } &gt; 0 $,所以$\vec { v  } \notin \langle \vec { u  } \rangle ^\bot $,这就完成了直和分解,于是上述命题证毕.</p>
<h4><span id="实正交变换的标准型">实正交变换的标准型</span></h4><p>(ps:虽然这里放在实内积空间里,然而大部分性质实际上是转移自复内积空间的结构,应当先看下面的章节,回头再来观察此节.)</p>
<p>回忆到取定$V $是实线性空间,并取上面的某种内积形式,对于$T \in \text { End  } ( V ) $,若其满足$T ^* = T ^{ - 1  } $,则它是实正交变换.特别地,当取标准内积的时候,所对应的就是正交矩阵,则$A ^t = A ^{ - 1  } $.</p>
<p>回忆到此时$\det A = \pm 1 $.</p>
<p>将正规算子的概念从复数域里面拿到实数域,即满足$( A ^t ) A = A ( A ^t ) $.我们在下面做复数酉变换的时候证明过引理:$\exists k \geq 0 , T ^k = 0 \Rightarrow T = 0 $.容易见到正交算子一定是正规的.</p>
<p>接下来来观察不同维度的正交变换,假设$\dim _{ \mathbb { R  }  } V = n $.</p>
<p>当$n = 1 $的时候,正交变换显然是长度为$\pm 1 $的伸缩变换,也就是$\pm \text { id  } _V $.</p>
<p>当$n = 2 $的时候,不妨设矩阵为$\begin{bmatrix}\alpha &amp; \beta \ \gamma &amp; \delta \end{bmatrix} $,用正交性质就知道:</p>
<script type="math/tex; mode=display">
\begin{cases}
\alpha ^2 + \gamma ^2 = 1 \\
\beta ^2 + \delta ^2 = 1 \\
\alpha ^2 + \beta ^2 = 1 \\
\gamma ^2 + \delta ^2 = 1 
\end{cases}</script><p>做三角换元后考虑到行列式为$\pm 1 $,在一些简单的确定后,立刻见到原矩阵要么是:$\begin{bmatrix}\cos \theta &amp; - \sin \theta \ \sin \theta &amp; \cos \theta \end{bmatrix} $,要么是$\begin{bmatrix}\cos \theta &amp; \sin \theta \ \sin \theta &amp; - \cos \theta \end{bmatrix} $,它们的行列式分别为$\pm 1 $.</p>
<p>拿出行列式恰好为$+ 1 $的前者:</p>
<script type="math/tex; mode=display">
R ( \theta ) = \begin{bmatrix}
\cos \theta & - \sin \theta \\
\sin \theta & \cos \theta 
\end{bmatrix}</script><p>也就是通常所说的旋转矩阵.容易见到:</p>
<ol>
<li><p>$R ( \theta ) R ( \psi ) = R ( \theta + \psi ) = R ( \psi ) R ( \theta ) $.</p>
</li>
<li><p>如果$P $是一个正交算子,则$P ^{ - 1  } R ( \theta ) P = R ( ( \det P ) \theta ) $.</p>
</li>
</ol>
<p>(1)只需对$\vec { e  } $验证即可.</p>
<p>(2)的话,当$\det P = 1 $的时候,当然有$P = R ( \psi ) , P ^{ - 1  } = R ( - \psi ) $,那显然成立了;当$\det P = - 1 $的时候,只需在外面补一个$\begin{bmatrix}1 &amp; 0 \ 0 &amp; - 1 \end{bmatrix} $即可转化.</p>
<p>于此之前,考虑如果$T $是正交变换,它当然一定是正规的,那么它在复数上可正交对角化,特征值当然满足$| \lambda | = 1 $,那么当然$T + T ^{ - 1  } $自伴.而且它俩可以同步对角化,那$T + T ^{ - 1  } $的特征值当然是$| \mu | = | \lambda + \lambda ^{ - 1  } | \leq | \lambda | + | \lambda ^{ - 1  } | = 2 $.</p>
<p>接下来考虑一般的情况,我们声明,对于任意正交变换,都可以取基转化为下述形式:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
I _{ a \times a  } & & & \\
& - I _{ b \times b  } & & & \\
& & R ( \theta _1 ) & & \\
& & & \ddots & \\
& & & & R ( \theta _k ) 
\end{bmatrix}</script><p>其中$\theta _1 , \cdots , \theta _k $都并非$\pi $的整数倍.</p>
<p>证明考虑令$S = T ^{ - 1  } + T $,容易见到其自伴,那原空间就可以拆成$S $的若干特征子空间的直和,容易发现$ST = TS $,这必然意味着$V _\lambda $是$T $不变的,于是下面可以只着眼于一个特征子空间,观测$V = V _\lambda $的情形,且$\lambda \in \mathbb { R  } , | \lambda | \leq 2 $.</p>
<p>则此时观察此空间,应当有$T + T ^{ - 1  } = \lambda I _V $.两边乘以$T $,得到$T ^2 - \lambda T + I = 0 $.</p>
<p>下面我们开始讨论,当$\lambda = \pm 2 $的时候,则上述配方得到$( T \mp I ) ^2 = 0 $,由于$T \mp I $是正规算子,于是$T \mp I = 0 $,这就对应了上述矩阵中的$\pm 1 $的分块.</p>
<p>那如果$\lambda \ne \pm 2 $呢,那就必然有$| \lambda | &lt; 2 $,则$x ^2 - \lambda x + 1 $无实根,不可约,但带入$x = T $会得到$0 $,因此它必然是$T $在此空间下的极小多项式.又因为$T $如果有实特征值,必然是$\pm 1 $,则此时$\lambda = \pm 2 $.因此,$T $没有实特征值.既然如此,任取一个向量$\vec { v  } \ne 0 $,$\vec { v  } $与$T \vec { v  } $必然线性无关.</p>
<p>既然如此,使他们张成子空间$W = \langle \vec { v  } , T \vec { v  } \rangle $并作直和分解$V = W \oplus W ^\bot $.由于$T ^2 = \lambda T - I $,因此注意到$W $应当是$T $不变的.那么,$W ^\bot $在$T ^* = T ^{ - 1  } $作用下当然也是不变的.然而,$T = \lambda I - T ^{ - 1  } $,所以$T $是关于$T ^{ - 1  } $的多项式,于是$W ^\bot $在$T $下也是不变的.这样,我们完全把空间归纳下去了,每次都可以扔出去一个$\dim = 2 $的空间.于是最后一步是检验$T $在归纳下去的空间上的性质.对于$\dim = 2 $的空间,$x ^2 - \lambda x + 1 $当然仍然不可约,而它必然就是特征多项式,那$\det = 1 $就自然成立.</p>
<p>最后应当简单解释上述形式是否由$T $唯一确定.然而应属显然了,因为每一次拆出的特征多项式当然都是原本特征多项式的一个不可约因子.</p>
<h5><span id="欧拉角">欧拉角</span></h5><p>考虑三维空间中的旋转,我们通过上述对实正交矩阵的分类得知,三维空间中的旋转立刻统合为$\begin{bmatrix}1 &amp; \ &amp; R ( \theta ) \end{bmatrix} $.</p>
<p>那么就需要两个参数来描述此,旋转轴$\vec { u  } = \vec { v  } _1 $的坐标用以描述转轴以及一个参数$\theta $用来描述转角.不妨将这种旋转记作$R _{ u  } ( \theta ) $.然而于此之外,先要论证此旋转和另外两个单位正交基$\vec { v  } _2 , \vec { v  } _3 $无关.然而容易见到不管如何选取这两个基,它们都会同样张成$\langle \vec { u  } \rangle ^\bot $,因此它们都在同一个空间里,而且只差一个旋转.这个旋转前后当然可以抵消,这也是直觉所告知我们的.</p>
<p>由此就可以看到三维空间的及其好的性质,我们一般称呼二维空间中的旋转,它的转轴实际上是垂直于此平面的一个更高维的轴.而三维空间中的转轴一定落在三维空间中,不需要再到高维空间中找到转轴了.</p>
<p>综上,旋转总是将一个有序单位正交基转化为另一个有序单位正交基,三维空间中表现为$( \vec { e  } _1 , \vec { e  } _2 , \vec { e  } _3 ) \to ( \vec { u  } _1 , \vec { u  } _2 , \vec { u  } _3 ) $.</p>
<p>对于指定基的旋转,我们应当通过一定的交换基的操作见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R _{ e _1  } ( \theta ) & = \begin{bmatrix}
1 & & \\
& \cos \theta & - \sin \theta \\
& \sin \theta & \cos \theta 
\end{bmatrix} \\
R _{ e _2  } ( \theta ) & = \begin{bmatrix}
\cos \theta & & \sin \theta \\
& 1 & \\
- \sin \theta & & \cos \theta 
\end{bmatrix} \\
R _{ e _3  } ( \theta ) & = \begin{bmatrix}
\cos \theta & - \sin \theta & \\
\sin \theta & \cos \theta & \\
& & 1 
\end{bmatrix} \\

\end{aligned}</script><p>为了表示使得任意基下的旋转,我们考虑先转好一个轴,然后再以此轴作旋转.那我们考虑构造一个$\vec { f  } _2 = \begin{cases}\vec { e  } _2 &amp; \vec { e  } _3 / / \vec { u  } _3 \ \vec { e  } _3 \times \vec { u  } _3 &amp; otherwisse \end{cases} $.</p>
<p>换言之,此时我们选了一个轴$\vec { f  } _2 $,它与$\vec { u  } _3 , \vec { e  } _3 $均正交,那我们就可以这么转:</p>
<ol>
<li><p>将$( \vec { e  } _1 , \vec { e  } _2 , \vec { e  } _3 ) $绕$\vec { e  } _3 $转到$( \vec { f  } _1 , \vec { f  } _2 , \vec { e  } _3 ) $.</p>
</li>
<li><p>将$( \vec { f  } _1 , \vec { f  } _2 , \vec { e  } _3 ) $绕$\vec { f  } _2 $转到$( \vec { g  } _1 , \vec { f  } _2 , \vec { u  } _3 ) $.</p>
</li>
<li><p>将$( \vec { g  } _1 , \vec { f  } _2 , \vec { u  } _3 ) $绕$\vec { u  } _3 $转到$( \vec { u  } _1 , \vec { u  } _2 , \vec { u  } _3 ) $.</p>
</li>
</ol>
<p>综上,一个旋转矩阵总可以写成三个矩阵$R _{ u _2  } ( \varphi ) R _{ f _2  } ( \theta ) R _{ e _3  } ( \psi ) $的乘积,我们称$T $是由<strong>欧拉角</strong>$( \varphi , \theta , \psi ) $所确定的.</p>
<p>不过,上述的转轴并非我们选定的有序正交基$( \vec { e  } _1 , \vec { e  } _2 , \vec { e  } _3 ) $,换言之,转轴不是以观察者视角的,而是以被旋转物体本身的视角而言的.可既然要转为矩阵表述,我们应当搞一个观察者版本的矩阵.这就要求转轴被控制为$( \vec { e  } _1 , \vec { e  } _2 , \vec { e  } _3 ) $.我们下面尝试证明$R _{ u _2  } ( \varphi ) R _{ f _2  } ( \theta ) R _{ e _3  } ( \psi ) = R _{ e _3  } ( \psi ) R _{ e _2  } ( \theta ) R _{ e _3  } ( \varphi ) $.</p>
<p>对于正交变换$P $,并设$\epsilon = \det P = \pm 1 $,应当有$R _{ Pu  } ( \epsilon \theta ) = PR _u ( \theta ) P ^{ - 1  } $.其实到这里只有这个$\epsilon $的用法并非显然,但总之,用代数的语言可以看出$P $将$( \vec { u  } , \vec { v  } , \vec { w  } ) \mapsto ( P \vec { u  } , P \vec { v  } , P \vec { w  } ) $,这当然仍是一组有序正交基.但为了使其的方向为正,可以改为$( P \vec { u  } , P \vec { v  } , \epsilon P \vec { w  } ) $以避免讨论,然后去检验$PR _u ( \theta ) $和$R _{ Pu  } ( \epsilon \theta ) P $对基$( \vec { u  } , \vec { v  } , \vec { w  } ) $的作用.总之容易验证.</p>
<p>既然如此,考虑$\vec { f  } _2 = R _{ e _3  } ( \psi ) \vec { e  } _2 $,既然如此,$R _{ f _2  } ( \theta ) = R _{ e _3  } ( \psi ) R _{ e _2  } ( \theta ) R _{ e _3  } ( \psi ) ^{ - 1  } $.</p>
<p>同理,$\vec { u  } _3 = R _{ f _2  } ( \theta ) \vec { e  } _3 = R _{ f _2  } ( \theta ) R _{ e _3  } ( \psi ) \vec { e  } _3 $,既然如此,得到$R _{ u _3  } ( \varphi ) = R _{ e _3  } ( \psi ) R _{ e _2  } ( \theta ) R _{ e _3  } ( \varphi ) R _{ e _2  } ( \theta ) ^{ - 1  } R _{ e _3  } ( \psi ) ^{ - 1  } $.这就证明了上述结论.</p>
<p>更具体地说,它表为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & & \\
& \cos \psi & - \sin \psi \\
& \sin \psi & \cos \psi 
\end{bmatrix} \begin{bmatrix}
\cos \theta & & \sin \theta \\
& 1 & \\
- \sin \theta & & \cos \theta 
\end{bmatrix} \begin{bmatrix}
1 & & \\
& \cos \varphi & - \sin \varphi \\
& \sin \varphi & \cos \varphi 
\end{bmatrix}</script><h5><span id="四元数">四元数</span></h5><p>试图搞一个以$\mathbb { R  } \subsetneq \mathbb { C  } \subsetneq \mathbb { H  } $的东西.其中$\mathbb { H  } $是一个除环,也就是在域的基础上丢掉了交换律.</p>
<p>具体如何构造呢?考虑在实线性空间的基础上引入乘法,那就先要构造它的一组基$\{ 1 , i , j , k \} $.现在就只需要定义乘法,当然是$\mathbb { H  } \times \mathbb { H  } \to \mathbb { H  } , ( x , y ) \mapsto x \cdot y $,并且要求它对于$\mathbb { R  } $是双线性的.同时要求以下规则:</p>
<ol>
<li><p>$1 \cdot x = x $.</p>
</li>
<li><p>$i ^2 = j ^2 = k ^2 = - 1 $.</p>
</li>
<li><p>$ij = k = - ji $.</p>
</li>
<li><p>$jk = i = - kj $.</p>
</li>
<li><p>$ki = j = - ik $.</p>
</li>
</ol>
<p>那么双线性性质和上述约定当然搞定了一个乘法映射.为说明其是环,还应当验证以下性质:</p>
<ol>
<li><p>分配律.由双线性形式显然.</p>
</li>
<li><p>结合律.只需验证上述四个元素$1 , i , j , k $的结合律即可.</p>
</li>
</ol>
<p>这就搞定了环的性质.可以看到$\mathbb { H  } $可以看作$\mathbb { R  } $或者$\mathbb { C  } $上的向量空间,对于前者是因为$q = a + bi + cj + dk $,对于后者是因为任何一个$q $都可以写作$q = z + jw $,其中$z , w \in \mathbb { C  } $的形式,这里顺便一提此表述下$jw = \bar { w  } j $.这当然顺便也搞定了除环的性质.</p>
<p>回忆到环的中心$Z ( \mathbb { H  } ) = \{ z \in \mathbb { H  } \mid \forall q \in \mathbb { H  } , zq = qz \} $.我们声称$Z ( \mathbb { H  } ) = \mathbb { R  } $.由于$\mathbb { H  } $的特殊性,我们知道只需要对$\{ 1 , i , j , k \} $检查交换性即可,会发现只有$\mathbb { R  } $是合理的.</p>
<p>定义一个四元数$q = a + bi + cj + dk $的<strong>共轭</strong>$\bar { q  } = a - bi - cj - dk $,定义其<strong>迹</strong>$\mathrm { { Tr  }  } ( q ) = q + \bar { q  } = 2 a $,再定义其<strong>范数</strong>$N ( q ) = q \bar { q  } $.有以下性质:</p>
<ol>
<li><p>共轭对$\mathbb { R  } $是线性映射.</p>
</li>
<li><p>$\overline { ( \bar { q  } )  } = q $.</p>
</li>
<li><p>$\overline { q _1 + q _2  } = \bar { q _1  } + \bar { q _2  } $.</p>
</li>
<li><p>$\overline { q _1 q _2  } = \bar { q _2  } \bar { q _1  } $.</p>
</li>
<li><p>迹对$\mathbb { R  } $是线性映射.</p>
</li>
<li><p>$\bar { N ( q )  } = N ( q ) = N ( \bar { q  } ) $.</p>
</li>
<li><p>$N ( a + bi + cj + dk ) = a ^2 + b ^2 + c ^2 + d ^2 \in \mathbb { R  } $.</p>
</li>
<li><p>$N ( q _1 q _2 ) = N ( q _1 ) N ( q _2 ) $.</p>
</li>
<li><p>如若$q \ne 0 $,则$q ^{ - 1  } = ( N ( q ) ) ^{ - 1  } \bar { q  } $.</p>
</li>
<li><p>$N ( q ^{ - 1  } ) = N ( q ) ^{ - 1  } $</p>
</li>
</ol>
<p>(1)(2)(3)是显然的.(4)的话由于乘法的双线性,只需验证$q _1 , q _2 \in \{ 1 , i , j , k \} $的情形.</p>
<p>(5)(6)是显然的.</p>
<p>(7)除了暴力验证以外,观察到(6),考虑$N ( a + bi + cj + dk ) = a ^2 + b ^2 + c ^2 + d ^2 + xi + yj + zk $,然而$\bar { N ( q )  } = N ( q ) $,这必然意味着后面均为$0 $.</p>
<p>(8)(9)(10)只需展开检验即可.这就详细描述了除环的结构.</p>
<p>我们还可以证明四元数已经到达极限了,有Frobenius定理:如果$D $是一个除环且是一个$\mathbb { R  } $上的有限维线性空间,其乘法还对$\mathbb { R  } $满足双线性,那么$D $一定同构于$\mathbb { R  } , \mathbb { C  } , \mathbb { H  } $三者其一,再无别的情形.怎么证明?我不会,长大后再学习.</p>
<p>最后我们还可以验证$\mathbb { H  } $可以表为$M _{ 2 \times 2  } ( \mathbb { C  } ) $的一个子环,考虑仍取$q = z + jw $,然后将其改写为$\begin{bmatrix}z &amp; - \bar { w  } \ w &amp; \bar { z  } \end{bmatrix} $.这个矩阵结构可以符合加法,乘法,迹(对应到矩阵的迹),范数(对应到矩阵的行列式).这其实很像复数上把$a + bi \mapsto \begin{bmatrix}a &amp; - b \ b &amp; a \end{bmatrix} $.那么我们可以:</p>
<script type="math/tex; mode=display">
\begin{gathered}
1 \mapsto \begin{bmatrix}
1 & \\
& 1 
\end{bmatrix} \\
i \mapsto \begin{bmatrix}
i & \\
& - i 
\end{bmatrix} \\
j \mapsto \begin{bmatrix}
& - 1 \\
1 & 
\end{bmatrix} \\
k \mapsto \begin{bmatrix}
& - i \\
- i & 
\end{bmatrix} \\

\end{gathered}</script><p>接下来考虑去掉环的性质,只看线性空间的性质,将目光着眼于$\mathbb { R  } ^3 $上并只取出$q = ai + bj + ck $,取这个子空间为$\mathbb { H  } _0 $,在上面挪用$N ( q ) $以刻画长度,具体而言只需取$\Vert q \Vert ^2 = N ( q ) $.</p>
<p>接下来,让$x \in \mathbb { H  } ^\times $,我们声明:</p>
<ol>
<li><p>$\forall q \in \mathbb { H  } $,$N ( xqx ^{ - 1  } ) = N ( q ) $.</p>
</li>
<li><p>设$R _x \in \text { End  } ( \mathbb { H  } _0 ) , q \mapsto xqx ^{ - 1  } $,则这是个正交变换.</p>
</li>
<li><p>$\det R _x = 1 $.</p>
</li>
<li><p>$R _{ tx  } = R _x $,其中$t \in \mathbb { R  } ^\times $,且$R _x R _y = R _{ xy  } , R _{ x ^{ - 1  }  } = ( R _x ) ^{ - 1  } $.而且$R _{ - 1  } = R _1 = \text { id  } _{ \mathbb { H  } _0  } $.</p>
</li>
</ol>
<p>(1)是显然的.</p>
<p>(2)的话,不妨假设$N ( x ) = 1 $,此时$x ^{ - 1  } = \bar { x  } $.首先要证明这个映射确实是$\text { End  } ( \mathbb { H  } _0 ) $里面的,观察$\overline { xqx ^{ - 1  }  } = \bar { x ^{ - 1  }  } \bar { q  } \bar { x  } = x ( \bar { q  } ) x ^{ - 1  } = - xqx ^{ - 1  } $,这就说明$xqx ^{ - 1  } \in \mathbb { H  } _0 $.</p>
<p>然后要检验它是线性映射,这里只需使用除环的性质简单验证.</p>
<p>最后由(1)说明其保距,这就说明了它是正交变换.</p>
<p>最后是(3),将$\mathbb { H  } \cong \mathbb { R  } ^4 $考虑映射$\mathbb { R  } ^4 \setminus \{ 0 \} \to \{ \pm 1 \} , x \mapsto \det R _x $.这由于矩阵$R _x $的每个元当然是关于$x $的连续函数,因此整个映射都是连续的,而空间$\mathbb { R  } ^4 \setminus \{ 0 \} $是联通的,因此整个映射必然只射到常数,而$\det R _1 = 1 $,因此对于任意$x \in \mathbb { H  } ^\times $都有$\det R _x = 1 $.</p>
<p>(4)只需简单验证即可.</p>
<p>所以我们终于见到了,这个$R _x $应当就是三维上的正交旋转.现在最后的问题在于是否所有的旋转都可以表示为$R _x $.我们有下述定理:即对于任意在$\mathbb { H _0  } $上的旋转$T $,$\exists x \in \mathbb { H  } $,$N ( x ) = 1 $,使得$T = Rx $,并且$x $精确到绝对值是唯一的,换言之,恰有两个$x , - x $满足上述条件.</p>
<p>先证明存在性,回忆到欧拉角声明了$T $可以由三个绕轴旋转完成.也就是说,只要我们能证明绕轴旋转$R _{ e _l  } ( \theta ) $可以用四元数表示,那么任意旋转都可以用四元数表示了.</p>
<p>不同轴类似只算一个,当绕着$i $那条轴转的时候,取$x = \cos \theta + i \sin \theta $,则$x ^{ - 1  } = \bar { x  } = \cos \theta - i \sin \theta $,见到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
xix ^{ - 1  } & = i \\
xjx ^{ - 1  } & = \cos ( 2 \theta ) j + \sin ( 2 \theta ) k \\
xkx ^{ - 1  } & = - \sin ( 2 \theta ) j + \cos ( 2 \theta ) k 
\end{aligned}</script><p>综上见到$R _x $是:$\begin{bmatrix}1 &amp; \ &amp; R ( 2 \theta ) \end{bmatrix} $,这样就实现了对第一个坐标轴转$2 \theta $的情形.</p>
<p>类似的,就可以说明四元数可以表示所有的旋转.</p>
<p>最后要检验唯一性,如果$R _x = R _y $,其中$N ( x ) = N ( y ) = 1 $,那就有$\text { id  } _{ \mathbb { H  } _0  } = R _x ( R _y ) ^{ - 1  } = R _{ xy ^{ - 1  }  } $.</p>
<p>于是最后转化为说,要证明如果$R _{ x  } = \text { id  } _{ \mathbb { H  } _0  } $,那么$x = \pm 1 $.那就说明$\forall q , xqx ^{ - 1  } = q $,也就是$x \in Z ( \mathbb { H  } ) = \mathbb { R  } $.又由于$N ( x ) = 1 $,所以$x = \pm 1 $.</p>
<p>更具体来说,绕着$u $这条轴,且满足$N ( u ) = 1 $来说,那么$R _u ( \theta ) = \cos \frac { \theta  } { 2  } + u \sin \frac { \theta  } { 2  } $.</p>
<p>首先要验证$x = \cos \frac { \theta  } { 2  } + u \sin \frac { \theta  } { 2  } $满足$N ( x ) = 1 $,而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
N ( x ) & = x \bar { x  } \\
& = ( \cos \frac { \theta  } { 2  } + u \sin \frac { \theta  } { 2  } ) ( \cos \frac { \theta  } { 2  } - u \sin \frac { \theta  } { 2  } ) \\
& = \cos ^2 \frac { \theta  } { 2  } - u ^2 \sin ^2 \frac { \theta  } { 2  } \\
& = \cos ^2 \frac { \theta  } { 2  } + N ( u ) \sin ^2 \frac { \theta  } { 2  } \\
& = 1 
\end{aligned}</script><p>而考虑总存在一个旋转$P = R _y $,使得$P ( i ) = u $,此时我们可以知道:</p>
<script type="math/tex; mode=display">
\begin{aligned}
R _u ( \theta ) & = PR _i ( \theta ) P ^{ - 1  } \\
& = R _y R _i ( \theta ) R _{ y ^{ - 1  }  } \\

\end{aligned}</script><p>不妨设$R _u ( \theta ) = R _x $,则:</p>
<script type="math/tex; mode=display">
\begin{aligned}
x & = y ( \cos \frac { \theta  } { 2  } + i \sin \frac { \theta  } { 2  } ) y ^{ - 1  } \\
& = \cos \frac { \theta  } { 2  } + \sin \frac { \theta  } { 2  } yiy ^{ - 1  } \\
& = \cos \frac { \theta  } { 2  } + \sin \frac { \theta  } { 2  } u 
\end{aligned}</script><p>用欧拉公式的话,有$R _u ( \theta ) = e ^{ \frac { \theta  } { 2  } u  } $.</p>
<h3><span id="复内积空间">复内积空间</span></h3><h4><span id="共轭空间">共轭空间</span></h4><p>这应当带给我们思考,既然远在定义复数的时候,我们就声称过$i $和$- i $无法区分,于是在此,应当研究一下共轭前后的两个空间分别的性质.</p>
<p>设$V $是$\mathbb { C  } $下的向量空间,它的复共轭$\bar { V  } $是按照以下方式确定的$\mathbb { C  } $向量空间:</p>
<ol>
<li><p>集合$V $与加法操作与原空间相同.</p>
</li>
<li><p>纯量乘法$\odot : \mathbb { C  } \times V \to V $定义为$t \odot \vec { v  } = \bar { t  } \vec { v  } $.</p>
</li>
</ol>
<p>显然$\overline { ( \bar { V  } )  } = V $.半双线性映射无非是线性映射$\bar { V  } \to W $.当然,也可以等价说是$V \to \bar { W  } $.我们接下来验证复共轭的若干性质:</p>
<ol>
<li><p>映射$z \mapsto \bar { z  } $给出向量空间的共轭$\mathbb { C  } \cong \bar { \mathbb { C  }  } : z \mapsto \bar { z  } $.</p>
</li>
<li><p>$\bar { V  } _1 \oplus \bar { V  } _2 = \overline { V _1 \oplus V _2  } $.</p>
</li>
<li><p>$\overline { \text { Hom  } ( V _1 , V _2 )  } = \text { Hom  } ( \bar { V  } _1 , \bar { V  } _2 ) $.</p>
</li>
<li><p>${ \bar { W  }  } ^\vee \cong \overline { W ^\vee  } $,其实是(3)的另一种表示方式.</p>
</li>
</ol>
<p>应当检验上述映射,同构,甚至是完全挪移都是良定义的且半线性的,这里不做赘述.</p>
<p>相信对共轭空间最大的疑问在于,既然其改变了纯量乘法,原本的向量结构为什么不会被打乱呢?事实上,如果你考虑选定一组基的话,纯量乘法上的轻微改变只会使得将其它向量转化为基表示形式的过程中所提取出的纯量发生变化,然而共轭满足$\overline { z _1 z _2  } = \bar { z _1  } \bar { z _2  } $.虽然取定基的做法并非典范,然而不同基之间的转化仍然可以提取纯量.或者说,我们可以先取$V \cong \mathbb { C  } ^n \cong ( \bar { \mathbb { C  }  } ) ^n \cong \bar { V  } $.</p>
<p>或直接从复数的几何意义来说,共轭无非是将逆时针旋转改为顺时针旋转,这应当仍是合理的.</p>
<h4><span id="复半双线性形式">(复)半双线性形式</span></h4><p>应当见到双线性形式在复空间中未必有很好的应用,原因是正定性难以得到满足.</p>
<p>定义<strong>半线性映射</strong>为$T : V \to W $满足:</p>
<ol>
<li><p>$T ( \vec { v  } _1 + \vec { v  } _2 ) = T ( \vec { v  } _1 ) + T ( \vec { v  } _2 ) $.</p>
</li>
<li><p>$T ( t \vec { v  } ) = \bar { t  } T ( \vec { v  } ) $.</p>
</li>
</ol>
<p>定义<strong>半双线性映射</strong>为$B : V \times W \to X $满足:</p>
<ol>
<li><p>$B ( \vec { v  } _1 + \vec { v  } _2 , \vec { w  } ) = B ( \vec { v  } _1 , \vec { w  } ) + B ( \vec { v  } _2 , \vec { w  } ) $.</p>
</li>
<li><p>对第一个变量半线性:$B ( t \vec { v  } , \vec { w  } ) = \bar { t  } B ( \vec { v  } , \vec { w  } ) $.</p>
</li>
<li><p>$B ( \vec { v  } , \vec { w  } _1 + \vec { w  } _2 ) = B ( \vec { v  } , \vec { w  } _1 ) + B ( \vec { v  } , \vec { w  } _2 ) $.</p>
</li>
<li><p>对第二个变量线性:$B ( \vec { v  } , t \vec { w  } ) = t B ( \vec { v  } , \vec { w  } ) $.</p>
</li>
</ol>
<p>至于复伴随映射以及其余的东西,无非只是在实数上类似的定义的照抄.将上述记作$\text { Sesq  } ( V , W ; X ) $.特别地,当$X = \mathbb { C  } $的时候,将此称作半双线性形式.应当立刻见到$\text { Sesq  } ( V , W ; X ) = \text { Bil  } ( \bar { V  } , W ; X ) $.</p>
<p>至于非退化等部分仍然是实数情况的照抄,对左右根,不妨设左根空间为$L $,右根空间为$R $,用柯里化过程见到该形式等价于$\psi \in \text { Hom  } ( W , { \bar { V  }  } ^\vee ) $或者$\varphi \in \text { Hom  } ( \bar { V  } , W ^\vee ) $,那么$L = \ker \varphi , R = \ker \psi $,我们应当见到$B ‘ : ( V / L ) \times ( W / R ) \to F , ( \vec { v  } + L , \vec { w  } + R ) \mapsto B ( \vec { v  } , \vec { w  } ) $是非退化双线性形式.此时见到其实$\dim V - \dim L = \dim W - \dim R $.</p>
<p>接下来要用矩阵形式予以表述,我们声称$M _{ m \times n  } ( \mathbb { C  } ) \cong \text { Sesq  } ( \mathbb { C  } ^m , \mathbb { C  } ^n ) , A \mapsto B ( \vec { v  } , \vec { w  } ) = ( ^\dagger \vec { v  } ) A \vec { w  } $,原因是标准基下$\mathbb { C  } $的对偶空间其实就是共轭转置后的结果.</p>
<h4><span id="伴随映射">伴随映射</span></h4><p>与实数情况毫无差异,我们在此复述一遍当时的图表即可:</p>
<script type="math/tex; mode=display">
\xymatrix { V _2 ' \ar [r ] ^{ T ^*  } \ar [d ] _{ A _2  } & V _1 ' \ar [d ] ^{ A _1  } \\
\check { V _2  } \ar [r ] ^{ ^\dagger T  } & \check { V _1  } \\
V _2 \ar [u ] & V _1 \ar [u ] \ar [l ] _T  }</script><p>同样,我们可以定义<strong>自伴</strong>性质:$T ^<em> = T $以及<strong>反自伴</strong>性质$T ^</em> = - T $.此处出现了复数与实数不同的地方:假设$c $是非零纯虚数,则$T $自伴当且仅当$cT $反自伴.这性质是容易验证的,也告知我们复数域上的反自伴并不需要像实数那样使用单独的辛空间来刻画.</p>
<p>类比实数,下面定理当然也是对的:</p>
<p>而注意到$T ^* T $是自伴的,然而其还有更多的好性质:</p>
<ol>
<li><p>$( \text { im  } T ) ^\bot = \ker ( T ^* ) $.</p>
</li>
<li><p>$\text { im  }  ( T ^<em> T ) = \text { im  }  ( T ^</em> ) $.</p>
</li>
<li><p>$\ker ( T ^* T ) = \ker T $.</p>
</li>
<li><p>$\text { rk  }  ( T ^<em> T ) = \text { rk  }  ( T ) = \text { rk  } ( T ^</em> ) $.</p>
</li>
</ol>
<p>证明与实数情形无差.</p>
<h4><span id="hermite形式">Hermite形式</span></h4><p>设$V $是$\mathbb { C  } $下的向量空间,$\epsilon \in \{ - 1 , 1 \} $,若半双线性形式$B : V \times V \to \mathbb { C  } $满足$B ( \vec { v  } , \vec { w  } ) = \epsilon \overline { B ( \vec { w  } , \vec { v  } )  } $的话,我们就称$B $是一个$\epsilon - $Hermite形式.如果$\epsilon = 1 $,称这是一个<strong>Hermite形式</strong>;如果$\epsilon = - 1 $,则称其为<strong>反Hermite形式</strong>.容易验证,如果$B $是Hermite的,那么$iB $是反Hermite的.</p>
<p>此定义直接导致$B $的左右根是一回事,我们后面会称其为$B $的根基.并容易见到等价于其对应的矩阵满足$A ^\dagger = \epsilon A $.也就是说,Hermite形式对应的矩阵自伴,而反Hermite形式对应的矩阵反自伴.</p>
<h5><span id="正规线性映射">正规线性映射</span></h5><p>给定某$\epsilon - $Hermite形式$B : V \times V \to \mathbb { C  } $,我们称满足$( T ^<em> ) T = T ( T ^</em> ) $的$T $是<strong>正规线性映射</strong>.容易见到自伴和反自伴当然是正规的.事实上,取$T ‘ = \frac { 1  } { 2  } ( T + T ^<em> ) , T ‘ ‘ = \frac { 1  } { 2  } ( T - T ^</em> ) $即可见到能将$T = T ‘ + T ‘ ‘ $拆成一个自伴形式和一个反自伴形式.这种分解还是唯一的,原因是如果有两组形式满足$T _1 ‘ + T _1 ‘ ‘ = T _2 ‘ + T _2 ‘ ‘ $,移项后得到$T _1 ‘ - T _2 ‘ = T _2 ‘ ‘ - T _1 ‘ ‘ $,左侧是自伴的,右侧是反自伴的,因此它们都是$0 $.</p>
<p>若进一步要求$T $是正规的,也就是$( T ^<em> ) T = T ( T ^</em> ) $,还可以见到$T ‘ T ‘ ‘ = T ‘ ‘ T ‘ $,只需简单验证即可.</p>
<h5><span id="二次型">二次型</span></h5><p>定义复数上的半双线性版本的<strong>二次型</strong>为$f ( x _1 , \cdots , x _n ) = \sum a _{ i , j  } \bar { x _i  } x _j $.要证明其与$\epsilon - $Hermite形式同构,不妨先直接考虑$f ( \vec { v  } + \vec { w  } ) = B ( \vec { v  } + \vec { w  } , \vec { v  } + \vec { w  } ) $,那只需考虑配极化技巧,定义$\Re $为提取实部,$\Im $为提取虚部,立刻得到:</p>
<script type="math/tex; mode=display">
f ( \vec { v  } + \vec { w  } ) = \begin{cases}
f ( \vec { v  } ) + f ( \vec { w  } ) + 2 \Re B ( \vec { v  } , \vec { w  } ) & \epsilon = 1 \\
f ( \vec { v  } ) + f ( \vec { w  } ) + 2 i \Im B ( \vec { v  } , \vec { w  } ) & \epsilon = - 1 
\end{cases}</script><p>考虑$\Im B ( \vec { v  } , \vec { w  } ) = \Re B ( i \vec { v  } , \vec { w  } ) $,所以上述立刻确定了$B $.</p>
<p>搬运实二次型上的性质即可看到<strong>合同</strong>在复数域上体现于$A = ( ^\dagger C ) A ‘ C $.对该多项式做对角化与实数情况无异.</p>
<p>至于复数上的<strong>惯性定理</strong>,证明与实数丝毫不差.</p>
<p>既然如此,我们下面会说明Hermite形式对应了标准内积下的自伴算子,其所有特征值均为实数.由此可以定义其<strong>正定性</strong>,当然也就是所有特征值均为正数.其余类似<strong>半正定性</strong>均可照搬原本性质.</p>
<p>于此,我们可以引出以下定理:</p>
<p>$T ^* T $是半正定的.当$T $是单射时,其是正定的.</p>
<p>证明无非仍然是$( T ^* T \vec { v  } \mid \vec { v  } ) _V = ( T \vec { v  } \mid T \vec { v  } ) _W $的直接结论.</p>
<h4><span id="复内积空间">复内积空间</span></h4><p>考虑正定Hermite形式$( _ \mid _ ) : V \times V \to \mathbb { C  } $,这样的资料$( V , ( _ \mid _ ) ) $称为<strong>复内积空间</strong>,又称作<strong>酉空间</strong>.特别地,在$\mathbb { C  } ^n $上定义标准Hermite内积为$( \vec { x  } \mid \vec { y  } ) = \sum \bar { x _i  } y _i $,应当见到其正定且是一个Hermite形式.</p>
<p>容易照搬大部分实内积空间的性质过来,这里简单列举:</p>
<ol>
<li><p>$\Vert \vec { v  } \Vert = 0 \Leftrightarrow \vec { v  } = 0 $.</p>
</li>
<li><p>$\Vert t \vec { v  } \Vert = | t | \Vert \vec { v  } \Vert ^2 $.</p>
</li>
<li><p>$\Im ( \vec { v  } _1 \mid \vec { v  } _2 ) = \Re ( i \vec { v  } _1 \mid \vec { v  } _2 ) $.</p>
</li>
<li><p>配极化,即$\Vert \vec { v  } + \vec { w  } \Vert ^2 = \Vert \vec { v  } \Vert ^2 + \Vert \vec { w  } \Vert ^2 + 2 \Re ( \vec { v  } \mid \vec { w  } ) $.</p>
</li>
<li><p>正交单位向量,正交集合,单位正交基等概念原样照搬.</p>
</li>
<li><p>勾股定理,即$\vec { v  } \bot \vec { w  } $时,$\Vert \vec { v  } + \vec { w  } \Vert ^2 = \Vert \vec { v  } \Vert ^2 + \Vert \vec { w  } \Vert ^2 $.</p>
</li>
<li><p>柯西不等式,即$| ( \vec { v  } \mid \vec { w  } ) | \leq \Vert \vec { v  } \Vert \cdot \Vert \vec { w  } \Vert $.</p>
</li>
<li><p>三角不等式,即$\Vert \vec { v  } + \vec { w  } \Vert \leq \Vert \vec { v  } \Vert + \Vert \vec { w  } \Vert $.</p>
</li>
<li><p>Gram-Schmidt正交化,策略仍是$\vec { w  } _k = \vec { v  } _k - \sum _{ i = 1  } ^{ k - 1  } \frac { ( \vec { w  } _i \mid \vec { v  } _k )  } { ( \vec { w  } _i \mid \vec { w  } _i )  } \vec { w  } _i $.</p>
</li>
</ol>
<p>(1)(2)(3)(4)(5)(6)的证明是平凡的.</p>
<p>(7)的证明与实数情景略有差别,仍设$t \in \mathbb { C  } $,并观察:</p>
<script type="math/tex; mode=display">
\begin{aligned}
0 & \leq \Vert \vec { v  } + t \vec { w  } \Vert ^2 \\
& = \Vert \vec { v  } \Vert ^2 + 2 \Re ( t ( \vec { v  } \mid \vec { w  } ) ) + | t | ^2 \Vert \vec { w  } \Vert ^2 \\
& \leq \Vert \vec { v  } \Vert ^2 + 2 | t | \cdot | ( \vec { v  } \mid \vec { w  } ) | + | t | ^2 \Vert \vec { w  } \Vert ^2 
\end{aligned}</script><p>对于(8),只需做一些微小的调整,具体为:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\Vert \vec { v  } + \vec { w  } \Vert ^2 & = \Vert \vec { v  } \Vert ^2 + 2 \Re ( \vec { v  } \mid \vec { w  } ) + \Vert \vec { w  } \Vert ^2 \\
& \leq \Vert \vec { v  } \Vert ^2 + 2 | ( \vec { v  } \mid \vec { w  } ) | + \Vert \vec { w  } \Vert ^2 \\
& \leq \Vert \vec { v  } \Vert ^2 + 2 \Vert \vec { v  } \Vert \cdot \Vert \vec { w  } \Vert + \Vert \vec { w  } \Vert ^2 \\
& = ( \Vert \vec { v  } \Vert + \Vert \vec { w  } \Vert ) ^2 
\end{aligned}</script><p>(9)的话,值得注意的是在左右两边对$\vec { w  } _i $做内积其实并非完全一致的.做$( \vec { w  } _i \mid _ ) $当然显然是正确的,做$( _ \mid \vec { w  } _i ) $的话,由于是Hermite形式,当然也是对的.</p>
<h5><span id="酉变换">酉变换</span></h5><p>复内积空间到自身的同构称为$V $上的<strong>酉变换</strong>.容易类比实数情况,以下命题等价:</p>
<ol>
<li><p>$T $是酉变换.</p>
</li>
<li><p>$T ^<em> = T ^{ - 1  } $,特别地,取标准内积空间时,该条等价于$T ^\dagger = T ^{ - 1  } $,如果$T $是矩阵,我们称其是<em>*酉矩阵</em></em>.</p>
</li>
<li><p>$\{ \vec { v  } _1 , \cdots , \vec { v  } _n \} $是一组单位正交基,则$\{ T \vec { v  } _1 , \cdots , T \vec { v  } _n \} $也是一组单位正交基.</p>
</li>
</ol>
<h5><span id="正规算子的酉对角化谱定理">正规算子的酉对角化(谱定理)</span></h5><p>我们下面证明,只要$T $是正规算子,那它就可以酉对角化.换言之$T $如果对应矩阵$A $,那么存在酉矩阵$P $满足$P ^\dagger = P ^{ - 1  } $而且$P ^{ - 1  } AP = \begin{bmatrix}\lambda _1 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; \lambda _n \end{bmatrix} $.容易见到其逆命题仍然成立,原因是$P ^{ - 1  } A ( A ^\dagger ) P = P ^{ - 1  } ( A ^\dagger ) AP = \begin{bmatrix}| \lambda _1 | ^2 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; | \lambda _n | ^2 \end{bmatrix} $.</p>
<p>接下来要证明该定理正命题成立,其证明策略有若干种,下面选取两种进行说明.</p>
<p>第一种策略是,照搬实数域上的情形对空间进行数学归纳.已经可以将一个正规算子分解为$T = T ‘ + T ‘ ‘ $,其中$T ‘ $自伴而$T ‘ ‘ $反自伴.那我们可以类比实数域上对其进行归纳,从而说明$T ‘ , T ‘ ‘ $均可以对角化.又因为当$T $正规的时候,$T ‘ T ‘ ‘ = T ‘ ‘ T ‘ $,于是满足同步对角化的条件.</p>
<p>第二种策略较为麻烦,但能揭示更多正规算子的性质.假设$N \in \text { End  } ( V ) $是正规算子,我们首先证明以下引理:</p>
<ol>
<li><p>对于$f \in \mathbb { C  } [ x ] $,$f ( N ) \in \text { End  } ( V ) $也是正规的.</p>
</li>
<li><p>假设特征向量$\vec { v  } \in V $使得$\exists \lambda \in \mathbb { C  } $有$N \vec { v  } = \lambda \vec { v  } $,则$N ^* \vec { v  } = \bar { \lambda  } \vec { v  } $.</p>
</li>
<li><p>若存在$k \geq 1 $使得$N ^k = 0 $,那么$N = 0 $.</p>
</li>
<li><p>对于其任意两个不同的特征子空间$V _\lambda , V _\mu $,当$\lambda \ne \mu $的时候,$V _\lambda \bot V _\mu $.</p>
</li>
</ol>
<p>(1)的话,考虑$( \sum a _i N ^i ) ^<em> = \sum \bar { a _i  } ( N ^</em> ) ^i $,其与任意$N $的多项式都交换.</p>
<p>(2)的话不妨直接取$M = N - \lambda I $,根据(1)这当然仍是正规的.取$M ^<em> = N ^</em> - \bar { \lambda  } I $,此时注意到$\ker M $就是$V _\lambda $这个特征子空间,然而见到$\ker ( M ) = \ker ( M ^<em> M ) = \ker ( MM ^</em> ) = \ker ( M ^* ) $,这就证毕了.当然这也意味着自伴算子的特征值一定都是实数,而反自伴算子的特征值一定都是纯虚数.</p>
<p>(3)考虑到$( N ^k ) ^<em> = ( N ^</em> ) ^k $,于是$N $的任意次幂都是正规的.既然如此,考虑$N ^<em> N $当然是自伴的.要证$N = 0 $,只需证明$\text { rk  }  N = 0 $,只需证明$\text { rk  }  ( N ^</em> N ) = 0 $,也就只需要证明$N ^<em> N = 0 $即可.而如果$N ^k = 0 $,那么立刻有$( N ^</em> N ) ^k = 0 $,因此我们对$N ^* N $,也就是自伴情形证明上述结论即可.</p>
<p>于是接下来不妨假设$N $自伴,其任意次幂都自伴.考虑$k = 1 $显然成立,$k = 2 $的时候,回忆到$\forall \vec { v  } , ( N \vec { v  } \mid N \vec { v  } ) = ( N ^2 \vec { v  } \mid \vec { v  } ) = 0 $,因此立刻有$N = 0 $.</p>
<p>然后使用数学归纳,对于一般的$k &gt; 2 $,如果$k $是偶数,那$( N ^{ \frac { k  } { 2  }  } ) ^2 = N ^k = 0 $意味着$N ^{ \frac { k  } { 2  }  } = 0 $,可以数学归纳;当$k $是奇数的时候,$N ^{ k + 1  } = 0 $,而$\frac { k + 1  } { 2  } &lt; k $,因此仍然可以数学归纳.</p>
<p>(4)只需要考虑(2),立刻有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\mu ( \vec { v  } \mid \vec { w  } ) & = ( \vec { v  } \mid \mu \vec { w  } ) & = ( \vec { v  } \mid N \vec { w  } ) \\
& = ( N ^* \vec { v  } \mid \vec { w  } ) & = ( \bar { \lambda  } \vec { v  } \mid \vec { w  } ) & = \lambda ( \vec { v  } \mid \vec { w  } ) 
\end{aligned}</script><p>于是完事.</p>
<p>有了以上引理,我们就可以来揭示正规算子可对角化的性质.</p>
<p>使用复数域上分裂的性质,将其特征多项式$\text { Char  } _T = \prod ( x - \mu _i ) ^{ a _i  } $.取$m = \prod ( x - \mu _i ) $,只要我们能说明$m $就是极小多项式,由于其无重根则立即完事.那就只需要验证$m ( T ) = 0 $,然而,$m ( T ) $由于(1)是正规的,又因为$m ( T ) ^{ \max a _i  } = 0 $,用(3)立刻见到$m ( T ) = 0 $,再用(4)和Gram-Schmidt法得到正交基,这就证明了该结论.</p>
<p>回忆到实数域上可正交对角化当且仅当自伴,那是因为实数域上的反自伴性质很差.而复数域上二者差别不大,想要它们能够同步对角化就需要有交换性,而正规算子恰好保证了交换性.</p>
<p>但总之,我们由上可以立即见到以下结论成立,当$T $是正规算子的时候:</p>
<ol>
<li><p>$T $自伴当且仅当所有特征值都是实数.</p>
</li>
<li><p>$T $反自伴当且仅当所有特征值都是纯虚数.</p>
</li>
<li><p>$T $是酉变换当且仅当所有特征值都满足$| \lambda | = 1 $.</p>
</li>
</ol>
<p>原因是自伴性质是$A ^\dagger = A $,反自伴性质是$A ^\dagger = - A $,酉变换性质是$A ^\dagger = A ^{ - 1  } $.而只需选取单位正交基,立刻就发现$T $对应的$A = \begin{bmatrix}\lambda _1 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; \lambda _n \end{bmatrix} $,$T ^* $对应的$A ^\dagger = \begin{bmatrix}\bar { \lambda  } _1 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; \bar { \lambda  } _n \end{bmatrix} $.</p>
<h5><span id="相关实内积空间定理推广">相关实内积空间定理推广</span></h5><p>我们声明以下操作在复内积空间上都能做:</p>
<ol>
<li><p>二次根:设$T \in \text { End  } ( V ) $正定(半正定),那么存在唯一的$S \in \text { End  } ( V ) $使得$S $也正定(半正定),并且$S ^2 = T $,将此$S $记作$\sqrt { T  } $.</p>
</li>
<li><p>极分解:设$T \in \text { End  } ( V ) $可逆,则存在唯一一对$R , U \in \text { End  } ( V ) $使得$R $正定,$U $是酉变换,而且$T = RU $.具体地,$R = \sqrt { TT ^*  } $.</p>
</li>
<li><p>奇异值分解:对于线性映射$T : V \to W $,存在$V , W $分别的一组正交基和唯一一组$\sigma _1 \geq \cdots \geq \sigma _p $使得$T \vec { v  } _i = \begin{cases}\sigma _i \vec { w  } _i &amp; 1 \leq i \leq p \ 0 &amp; i &gt; p \end{cases} $.或者写作$A = Q \Sigma P ^{ - 1  } $,其中$\Sigma = \begin{bmatrix}\sigma _1 &amp; \ &amp; \ddots \end{bmatrix} $.</p>
</li>
<li><p>MP广义逆:对于$T : V \to W $,存在唯一的$S : W \to V $,使得其满足从前的广义逆结论.特别地,这里的$S $实际上可以用奇异值分解唯一刻画.</p>
</li>
</ol>
<h5><span id="复矩阵范数实例">复矩阵范数实例</span></h5><p>考虑$( A , B ) \to ( A \mid B ) _{ HS  } = \text { Tr  } ( ( A ^\dagger ) B ) $,立刻使得$M _{ m \times n  } ( \mathbb { C  } ) $成为一个复内积空间.在此基础上定义<strong>Hilbert-Schmidt范数</strong>:$\Vert T \Vert _{ HS  } = \sqrt { ( T \mid T ) _{ HS  }  } $.</p>
<p>这里还可以展现$\text { Tr  } $在空间上的体现.回忆到$V $上的内积结构$\vec { v  } \mapsto ( \vec { v  } \mid _ ) $</p>
<p>另外,还可以定义所谓<strong>算子范数</strong>为$\Vert T \Vert = \max _{ \Vert \vec { v  } \Vert _V = 1  } \Vert T \vec { v  } \Vert _W $.应当容易验证:</p>
<ol>
<li><p>$\Vert tT \Vert = | t | \Vert T \Vert $.</p>
</li>
<li><p>$\Vert T _1 + T _2 \Vert \leq \Vert T _1 \Vert + \Vert T _2 \Vert $.</p>
</li>
<li><p>$\Vert T \Vert = 0 \Leftrightarrow T = 0 $.</p>
</li>
<li><p>$\Vert ST \Vert \leq \Vert S \Vert \cdot \Vert T \Vert $.</p>
</li>
<li><p>$\Vert I \Vert = 1 $.</p>
</li>
</ol>
<p>只需回忆极小化极大原理就知道$\Vert T \Vert ^2 $取到了$T ^<em> T $的模长最大的特征值,而$\Vert T \Vert _{ HS  } ^2 $取到了$T ^</em> T $的特征值之和,考虑$T : V \to W $,见到:</p>
<script type="math/tex; mode=display">
\frac { 1  } { \sqrt { \dim V  }  } \Vert T \Vert _{ HS  } \leq \Vert T \Vert \leq \Vert T \Vert _{ HS  }</script><p>综上,就可以定义两种距离,容易验证它们的若干性质.</p>
<p>因此容易见到上面两种范数有互相等价的收敛性和极限概念,柯西列的概念也是等价的.</p>
<h3><span id="模">模</span></h3><p>考虑将线性空间的定义从域挪到环上,对于一个环$R $,定义<strong>左模</strong>为一个资料$M $,其中$M $自带一个加法群(需要可交换)而其还有一个对环的左乘$R \times M \to M $使得$\forall x \in M , r _1 , r _2 \in R $,以下性质成立:</p>
<ol>
<li><p>$r ( x + y ) = rx + ry $.</p>
</li>
<li><p>$( r _1 + r _2 ) x = r _1 x + r _2 x $.</p>
</li>
<li><p>$( r _1 r _2 ) x = r _1 ( r _2 x ) $.</p>
</li>
<li><p>$1 _R x = x $.</p>
</li>
</ol>
<p>同理可以定义<strong>右模</strong>.这里可能又需要定义相反环$R ^{ op  } $,相当于把乘法顺序调转.当$R $是交换环的时候,$R = R ^{ op  } $,此时左模和右模无差别.下面无特殊说明默认为左模.</p>
<p>容易见到线性空间是模的特例.</p>
<p>还可以定义两个都定义在$R $上的模$M _1 , M _2 $之间的同态$f : M _1 \to M _2 $满足:</p>
<ol>
<li><p>$f ( rx ) = rf ( x ) $.</p>
</li>
<li><p>$f ( x _1 + x _2 ) = f ( x _1 ) + f ( x _2 ) $.</p>
</li>
</ol>
<p>容易见到$( f _1 + f _2 ) ( x ) = f _1 ( x ) + f _2 ( x ) $成立并且$( f _1 + f _2 ) $当然也是同态,然而$( rf ) ( x ) = rf ( x ) $并不一定是同态,原因是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
rf ( r ' x ) & = rf ( r ' x ) & = rr ' f ( x ) \\
\ne r ' rf ( x ) & = r ' ( rf ) ( x ) 
\end{aligned}</script><p>因此并不一定能把里面的$r ‘ $提到外面来,这就出问题了.模的同态集合并非是模.然而同态对复合操作总是构成幺半群,容易见到:</p>
<ol>
<li><p>$( f _1 + f _2 ) \circ g = ( f _1 \circ g ) + ( f _2 \circ g ) $.</p>
</li>
<li><p>$f \circ ( g _1 + g _2 ) = ( f \circ g _1 ) + ( f \circ g _2 ) $.</p>
</li>
</ol>
<p>那也可以定义同构,就是存在逆映射.还可以定义子模.容易见到任何一组子模的交仍然是子模.</p>
<p>还可以定义商模.假设$N $是$M $的子模,在加法群意义下存在一个商群$M / N $(原因是此加法群可交换),现在我们想将其升级为$R $的模.我们定义:$R \times ( M / N ) \to ( M / N ) : ( r , x + N ) \mapsto rx + N $作为模上的标量乘法,我们试图证明:</p>
<ol>
<li><p>此运算使得$M / N $成为模.</p>
</li>
<li><p>$q : M \to M / N $构成模同态,而且$\ker q = N $.</p>
</li>
</ol>
<p>(1)只需要简单检验即可(由于$N $对于标量乘法封闭显然).</p>
<p>(2)则是由于$q $本身已经是加法群的同态,又有$q ( rx ) = rx + N = rq ( x ) $,这就搞定.</p>
<p>然后定义直积,考虑一组定义在$R $上的模$( M _i ) _{ i \in I  } $,考虑它们本身都是一个加法群,因此先用加法群的定义拿到$\prod _i M _i $,然后将它升级为一个$R $模,方法是$( r , ( x _i ) _{ i \in I  } ) \mapsto ( rx _i ) _{ i \in I  } $.同理把其至多有限多个分量非零的子集定义为直和.内直和亦然同理.设$( M _i ) _{ i \in I  } $是$M $的一组子模,以下命题等价:</p>
<ol>
<li><p>$\sum _{ i \in I  } M _i = M $,而且$\forall i \in I , M _i \cap \sum _{ j \ne i  } M _j = \{ 0 \} $.</p>
</li>
<li><p>$\forall x \in M $都能唯一写作$x = \sum _{ i \in I  } x _i $的形式.</p>
</li>
<li><p>$\sigma : \bigoplus _{ i \in I  } M _i \cong M $.</p>
</li>
</ol>
<p>验证上述命题是简单的.</p>
<p>最后,如果存在一个$M $的子集$S $使得$M = \langle S \rangle $,我们称$M $是<strong>有限生成</strong>的.</p>
<h4><span id="自由模">自由模</span></h4><p>设$X $为集合,其上的<strong>自由模</strong>定义为直和$R ^{ \oplus X  } $,可以自然地将$X $嵌入$R ^{ \oplus X  } $,只需将$x \mapsto ( r _y ) $,其中$r _y = \begin{cases}1 &amp; x = y \ 0 &amp; x \ne y \end{cases} $.</p>
<p>对于任何一个$R $上的模$N $,我们可以将$\mathrm { Hom  } _R ( R ^{ \oplus X  } , N ) $与$X \to N $的映射一一对应.从前者对应到后者只需将映射限制在$X $上即可(上述已经给出将$X $嵌入其中的策略),从后者到前者的对应只需逐分量映射亦可.</p>
<p>既然$X $可以如上嵌入$R ^{ \oplus X  } $,能否找到一个$R $上的模$M $,使得干脆使得$X \subseteq M $并且$M \cong R ^{ \oplus X  } $呢.其实这里可以生添一个定义,假设$X \subseteq M $并且$M $已经是$R $模,以下命题等价:</p>
<ol>
<li><p>$X $生成$M $而且线性无关.</p>
</li>
<li><p>每个$m \in M $都能唯一表示成有限和$m = \sum _{ x \in X  } r _x x $.</p>
</li>
<li><p>$\varphi : R ^{ \oplus X  } \cong M $是同构.</p>
</li>
</ol>
<p>的确容易见到上面命题等价.此时称模$M $是以$X $为<strong>基</strong>的自由模.从而见到所有的向量空间其实都是自由模.并且只要我能找到一个模的一组基,那这个模自然成为了自由模.当然也存在非自由模,Example1给出了一个很平凡的非自由模实例.</p>
<p>回忆到线性空间上的基的定义,事实上当$R $是交换环的时候,它的任意两组基$X , Y $都满足$| X | = | Y | $,从而自然地引出其<strong>秩</strong>为$\mathrm { rk  } ( M ) = | X | $的定义.然而这个证明有点艰难,因此我们尝试去证明一个弱些的版本:整环上的有限生成自由模.</p>
<p>此时对于一组基$X $,则$M \cong R ^{ \oplus X  } $.注意到如果$| X | = \infty $,则$R ^{ \oplus X  } $必然不是有限生成的.因此有限生成自由模的基一定满足$| X | &lt; \infty $.</p>
<p>而之后的做法只需将$R $通过分式域$\mathrm { Frac  } ( R ) $嵌入进向量空间就可以了.</p>
<p>我们还想要像线性空间一样,将$\mathrm { Hom  } _R ( R ^n , R ^m ) \cong M _{ m \times n  } ( R ) $,这里取右模是方便的(因为需要标量乘法),也就是:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
x _1 \\
\vdots \\
x _n 
\end{bmatrix} \mapsto A \begin{bmatrix}
x _1 \\
\vdots \\
x _n 
\end{bmatrix}</script><p>用右模的好处是标量乘法可以看作$1 \times 1 $的矩阵乘法:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
x _1 t \\
\vdots \\
x _n t 
\end{bmatrix} \mapsto A \begin{bmatrix}
x _1 t \\
\vdots \\
x _n t 
\end{bmatrix} = A \begin{bmatrix}
x _1 \\
\vdots \\
x _n 
\end{bmatrix} t</script><p>至于证明只需要化到基上即可.</p>
<h6><span id="example1非自由模">Example1(非自由模)</span></h6><p>取$R = \mathbb { Z  } , M = \mathbb { Z  } / n \mathbb { Z  } $,其中$n \ne 0 , \pm 1 $.此时立刻见到$M $必定不是自由的,因为不存在一个$X $使得$M \cong \mathbb { Z  } ^{ \oplus X  } $,原因是左侧是有限的$n $个元素,而右侧要么是单个元素,要么是无穷多元素.</p>
<h4><span id="线性映射和模结构">线性映射和模结构</span></h4><p>回忆到$F [ x ] $是一个自然的$F $向量空间.我们的问题是如若$V $是$F $上的向量空间,能否将其升级为一个$F [ x ] $上的模.</p>
<p>我们先指定一个$V $上的线性变换$T \in \mathrm { End  } ( V ) $,考虑$\forall f \in F [ x ] $,$f ( T ) \in \mathrm { End  } ( V ) $,直接将其作用在$V $上就得到了一个$F [ x ] $上的模.换言之就是将$x \cdot v \mapsto T ( v ) $.我们现在想要证明所有可以使得$V $升级为$F [ x ] $模的办法,均可以转化为指定一个映射$T \in \mathrm { End  } ( V ) $.</p>
<p>对此进行说明,将$F $上的向量空间$V $升级为$F [ x ] $上的模等价于说对所有$f \in F [ x ] $指定对应于纯量乘法的映射$\rho _f : V \to V $,使得:</p>
<ol>
<li><p>$\rho _f ( v _1 + v _2 ) = \rho _f ( v _1 ) + \rho _f ( v _2 ) $.</p>
</li>
<li><p>$\rho _{ f + g  } ( v ) = \rho _f ( v ) + \rho _g ( v ) $.</p>
</li>
<li><p>$\rho _{ fg  } ( v ) = \rho _f ( \rho _g ( v ) ) $.</p>
</li>
<li><p>当$c \in F $的时候,应该有$\rho _c ( v ) = cv $,以保证原本的向量空间结构.</p>
</li>
</ol>
<p>容易检验当我们指定映射$T $后的确能使其升级为$F [ x ] $上的模.下面我们说明将$V $升级为$F [ x ] $上的模的过程一定对应了一个映射$T \in \mathrm { End  } $.</p>
<p>假设$V $已经升级为$F [ x ] $模,那么考虑证明$\rho _x $必须是个线性变换即可.而由上面我们说的,$\rho _x ( v _1 + v _2 ) = \rho _x ( v _1 ) + \rho _x ( v _2 ) $,并且有$\rho _x ( cv ) = \rho _{ xc  } ( v ) = c \rho _x ( v ) $,这就搞定了.</p>
<p>而如果考虑模之间的映射$\varphi : V \to V ‘ $,则$\varphi $是模同态等价于:</p>
<ol>
<li><p>$\varphi ( c _1 v _1 + c _2 v _2 ) = c _1 \varphi ( v _1 ) + c _2 \varphi ( v _2 ) $.</p>
</li>
<li><p>$\varphi f ( T ) = f ( T ‘ ) \varphi $.</p>
</li>
</ol>
<p>(1)使得$\varphi $必须为一个线性映射,既然如此(2)中就可以拆开$f ( T ) $,也就变成了要求$\forall n \geq 0 $,都有$( T ‘ ) ^n \circ \varphi = \varphi \circ T ^n $.容易见到只需满足$T ‘ \varphi = \varphi T $即可数学归纳满足上面的性质.乍一看可能觉得这个等式比较奇怪,但我们可以将其写作交换图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^\varphi \ar [d ] _T & V ' \ar [d ] ^{ T '  } \\
V \ar [r ] _\varphi & V ' \\
 }</script><p>如果$\varphi $是同构,那这当然等价于$T ‘ = \varphi T \varphi ^{ - 1  } $.</p>
<p>我们现在想要做一些更深的操作,能不能干脆对所有$F [ x ] $上的模结构$( V , T ) $进行分类呢?不妨设$\dim _F V = n &lt; \infty $,既然如此就有$V \cong F ^n $.既然如此指定$T $无非是指定矩阵$F ^{ n \times n  } $,因此在同构意义下分类$F [ x ] $上的模结构等价于分类共轭的$n \times n $的矩阵.换言之分类共轭的$n \times n $的矩阵也就相当于同构意义下分类$F [ x ] $上的模结构.回忆到$F [ x ] $是PID(主理想环),而$\dim V &lt; \infty $导出$V $是有限生成的.</p>
<h4><span id="主理想环上的有限生成模">主理想环上的有限生成模</span></h4><p>考虑$R $是一个交换环,$I \subseteq R $是一个理想,考虑一个$R $上的模$M $,现在考虑定义$M [ I ] = \{ x \in M | \forall a \in I , ax = 0 \} $为$I $所零化的子模(容易检验封闭性).当$I = ( h ) = \{ hr | r \in R \} $的时候,我们记作$M [ I ] = M [ h ] $,原因是显然此时只需要$h $零化即可.进一步地,留意到$M [ I ] = \bigcap _{ h \in I  } M [ h ] $.</p>
<p>考虑当$R $是整环的时候,如果$x \in M , \exists h \in R \setminus \{ 0 \} , x \in M [ h ] $,我们称$x $是一个<strong>挠元</strong>.容易见到自由模无挠.</p>
<p>接下来考虑所有挠元组成的集合称为<strong>挠子模</strong>$M _{ tors  } $,我们下面来证明它是一个子模.</p>
<p>如若$x , y \in M _{ tors  } $,则存在$r , s \in R \setminus \{ 0 \} $,$rx = sy = 0 $,由于此时我们在看整环,所以$rs \ne 0 $.留神到:$rs ( ax + by ) = 0 , \forall a , b \in R $.于是就拿到了封闭性.</p>
<p>定义<strong>无挠商</strong>为$M _{ tf  } = M / M _{ tors  } $.下面我们来证明其中的确没有挠元.</p>
<p>考虑$\bar { x  } \in M _{ tf  } , \bar { x  } = x + M _{ tors  } $.如若$\exists r \in R \setminus \{ 0 \} $使得$r \bar { x  } = 0 $,意味着$rx + M _{ tors  } = M _{ tors  } $,这意味着$rx \in M _{ tors  } $,既如此则$\exists s \in R \setminus \{ 0 \} $使得$s ( rx ) = ( sr ) x = 0 \Rightarrow x \in M _{ tors  } $,所以我们这个的确是无挠的.</p>
<p>接下来看$R $是PID的情形,此时考虑任何一个$t $都可以被分解为$t \sim p _1 ^{ a _1  } \cdots p _m ^{ a _m  } , a _i \geq 0 $.我们下面来证明此时$M [ t ] = \bigoplus _{ i = 1  } ^m M [ p _i ^{ a _i  } ] $.</p>
<p>其实只需要证明$t = ab $,其中$a , b $互素就可以推出$M [ t ] = M [ a ] \oplus M [ b ] $就行了对吧.和我们之前证明极小多项式的结论时的策略完全一致:</p>
<p>先证明$M [ t ] = M [ a ] + M [ b ] $,考虑$x \in M [ t ] $,留意到存在$u , v $使得$au + bv = 1 $,所以$\forall x \in t $,$x = aux + bvx \in M [ b ] + M [ a ] $.</p>
<p>在证明$M [ a ] \cap M [ b ] = \{ 0 \} $,设$x \in M [ a ] \cap M [ b ] $,则$x = aux + bvx = 0 $.</p>
<p>接下来我们证明$M [ a ] \cap M [ b ] = M [ \gcd ( a , b ) ] $.裴蜀定理告诉我们存在一对$u , v $使得$\gcd ( a , b ) = au + bv $,因此$M [ \gcd ( a , b ) ] \supseteq M [ a ] \cap M [ b ] $,反之如若$x \in M [ \gcd ( a , b ) ] $,则$x \in M [ a ] , x \in M [ b ] $,这就搞定了.</p>
<p>接下来考虑$p $是PID里的一个素元,容易见到$M [ p ] \subseteq M [ p ^2 ] \cdots $,定义$M [ p ^\infty ] = \bigcup _{ i \geq 1  } M [ p ^i ] $.如果$\exists t \in R , t \ne 0 , M = M [ t ] $.此时考虑对$t $作分解,应该得到$M = \oplus M [ p _i ^{ a _i  } ] $.事实上此时我们可以直接说$M = \oplus _{ p  } M [ p ^\infty ] $,原因是考虑当$n \geq p ^{ a _p  } $时候,有$M [ p ^n ] = M [ p ^n ] \cap M [ t ] = M [ p ^{ a _p  } ] $.</p>
<p>下面干脆假设$M = R / ( t ) $,$p $是$R $中的素元,我们有以下结论:</p>
<ol>
<li><p>如果$p ^a | t $,则$( R / ( t ) ) [ p ^a ] \cong R / ( p ^a ) $.</p>
</li>
<li><p>如果$p ^a | t , p ^{ a + 1  } \nmid t $,则$( R / ( t ) ) [ p ^\infty ] \cong R / ( p ^a ) $.</p>
</li>
</ol>
<p>对于(1),如若$p ^a | t $,考虑$\bar { x  } = x + ( t ) \in R / ( t ) $,如若满足$p ^a \bar { x  } = 0 \Leftrightarrow \exists y , p ^a x = ty $,此时取$s = \frac { t  } { p ^a  } $,于是上述条件立刻等价于$x \in ( s ) $.所以$( R / ( t ) ) [ p ^a ] = ( s ) / ( t ) $.然而我们有一个满射$R \to ( s ) / ( t ) : y \mapsto sy + ( t ) $,观察其$\ker = \{ y \in R : t | sy \} = ( p ^a ) $,由同态定理知道$( R / ( t ) ) [ p ^a ] \cong R / ( p ^a ) $.</p>
<p>对于(2),我们已经说过了$M [ p ^\infty ] = M [ p ^a ] $,于是由(1)就做完了.</p>
<h5><span id="自由模与其子模">自由模与其子模</span></h5><p>回忆到Noether性质:任何一个理想链最终都会稳定.那同理可以定义一个$R $上的模$M $是有Noether性质的,当它的任何一个子模链都会趋于稳定.回忆到如果$R $是一个PID,则它当然有Noether性质,同时它作为自己的模也具有Noether性质(它的子模其实就是子理想).</p>
<p>下面我们来证明,如果一个模$M $具有Noether性质,那它是有限生成的.</p>
<p>证明非常简单,考虑反证,如果其不是有限生成的,那我们考虑任意$x _1 $,$Rx _1 $不能生成$M $,取$x _2 \in M \setminus ( Rx _1 ) $,则$Rx _1 + Rx _2 $也不能生成$M $,以此类推,这就得到了一个无穷增大的子模链,不符合Noether性质.</p>
<p>接下来引入一个引理:设$R $是一个交换环,$M $是$R $上的一个模,而且$M ‘ $是$M $的一个子模,如果$M ‘ ‘ = M / M ‘ $,那么$M $有Noether性质等价于$M ‘ $和$M ‘ ‘ $都有Noether性质.</p>
<p>先来看必要性,假设$M $有Noether性质,则其子模$M ‘ $的子模列当然也是$M $中的子模列,所以$M ‘ $必定有Noether性质.而反之$M ‘ ‘ $中的子模列当然可以取原像回到$M $中,必定也是Noetherian的.</p>
<p>再来看充分性,考虑$M $中的一列子模$M _1 \subseteq M _2 \subseteq \cdots $.取$M _i ‘ = M _i \cap M ‘ $,$M _i ‘ ‘ = ( M _i + M ‘ ) / M ‘ $.它们当然分别是$M ‘ $和$M ‘ ‘ $中的子模列,所以存在一个$i _0 , \forall i \geq i _0 $,$M _i ‘ = M _{ i + 1  } ‘ , M _i ‘ ‘ = M _{ i + 1  } ‘ ‘ $.下面我们试图证明当$i \geq i _0 $的时候此时也有$M _i = M _{ i + 1  } $,这只需证明$M _i \supseteq M _{ i + 1  } $.</p>
<p>考虑$\forall x \in M _{ i + 1  } , x + M ‘ \in M _{ i + 1  } ‘ ‘ = M _i ‘ ‘ $,从而我们知道一定存在一个$y \in M _i $使得$x + M ‘ = y + M ‘ $,意味着$x - y \in M ‘ $,而$x \in M _{ i  } \subseteq M _{ i + 1  } $,所以$x - y \in M ‘ \cap M _{ i + 1  } = M _{ i + 1  } ‘ = M _i ‘ \subseteq M _i $,由于$y \in M _i $,自然导出$x \in M _i $.从而证毕.</p>
<p>其实用第二同构定理见到$M _i ‘ ‘ \cong M _i / M _i ‘ $也就搞定了.</p>
<p>现在我们有了如上引理,我们可以得知以下推论:</p>
<ol>
<li><p>如果$M _1 , M _2 $都是Noether模,则$M _1 \oplus M _2 $也是Noether模.</p>
</li>
<li><p>作为(1)的推论,如果$R $是一个PID,$E $是一个$R $上的自由模,如果$E $是有限生成的,则$E $是Noether模.</p>
</li>
<li><p>作为(2)的推论,有限生成自由模的子模总是有限生成的.</p>
</li>
</ol>
<h5><span id="smith标准型">Smith标准型</span></h5><p>最后要做的是在模上引入矩阵符号,对于交换环$R $上的模$M $,假设$e _1 , \cdots , e _n \in M $且$x _1 , \cdots , x _m \in M $,取矩阵$A \in M _{ n \times m  } ( R ) $,此时记$( x _1 , \cdots , x _m ) = ( e _1 , \cdots , e _n ) A $,当且仅当$x _j = \sum _{ i = 1  } ^n e _i a _{ i , j  } $.容易检查以下结论:</p>
<ol>
<li><p>$( e _1 , \cdots , e _n ) AB = ( e _1 , \cdots , e _n ) ( AB ) $.</p>
</li>
<li><p>$( e _1 , \cdots , e _n ) I = ( e _1 , \cdots , e _n ) $.</p>
</li>
<li><p>如果$e _1 , \cdots , e _n $线性无关,则$A $若存在则唯一确定.</p>
</li>
</ol>
<p>同时Cramer法则告诉我们,当$\det A \in R ^\times $的时候,$A $一定存在逆矩阵$B $使得$AB = BA = I $,这也很显然是$A $存在逆矩阵的充要条件,因为$\det B = \frac { 1  } { \det A  } $.还可以检查如下结论:</p>
<ol>
<li><p>如果$( y _1 ‘ , \cdots , y _n ‘ ) = ( y _1 , \cdots , y _n ) P $,其中$P $可逆,则$\sum Ry _i = \sum R y _i ‘ $.</p>
</li>
<li><p>设$( e _1 , \cdots , e _n ) $为基,则$( e _1 ‘ , \cdots , e _n ‘ ) = ( e _1 , \cdots , e _n ) A $是另一组基,当且仅当$A $可逆.</p>
</li>
</ol>
<p>现在考虑自由模$E $,其基为$e _1 , \cdots , e _n $,其有一个子模$N $,可以被$x _1 , \cdots , x _m $生成.考虑取一个唯一的矩阵$A $满足$( x _1 , \cdots , x _m ) = ( e _1 , \cdots , e _m ) A $,此时发现如果将$A $换成$AP $,其中$P $是一个可逆矩阵,则$( x _1 , \cdots , x _m ) $会被改变.如果将$A $换成$QA $,则$( e _1 , \cdots , e _n ) $会被改变.</p>
<p>由此我们有<strong>Smith标准型</strong>:当$R $是PID的时候,对于矩阵$A \in M _{ n \times m  } $,总存在两个可逆矩阵$P , Q $,使得$d _1 | d _2 | \cdots \in R $使得$A = Q \begin{bmatrix}d _1 &amp; &amp; \ &amp; d _2 &amp; \ &amp; &amp; \ddots \end{bmatrix} P $.</p>
<p>上述结论对欧几里得整环是平凡结论,而且还可以计算.</p>
<p>那么对于PID怎么办呢?难点当然在于现在我们没有办法任意做欧几里得算法了,也许唯一的工具只有裴蜀定理.</p>
<p>考虑数学归纳,如果$A = 0 $那当然已经搞定了对吧,否则我们总可以做点初等变换使得$A $的左上角元素不为$0 $.</p>
<p>现在假设第一列第一行元素为$a \ne 0 $,第一列第二行元素为$b \ne 0 $,取$d = \gcd ( a , b ) , u = - \frac { b  } { d  } , v = \frac { a  } { d  } $,用裴蜀定理拿到$sa + tb = d $,然后用下述矩阵左乘:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
s & t & & & \\
u & v & & & \\
& & 1 & & \\
& & & \ddots & \\
& & & & 1 
\end{bmatrix}</script><p>就可以让第一列第二行的元素变成$0 $.不断做此过程,矩阵变为:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
d _1 ' & \\
& A _1 
\end{bmatrix}</script><p>其中$d _1 ‘ $是$A $的第一行第一列所有元素的$\gcd $,继续做此操作得到:</p>
<script type="math/tex; mode=display">
\begin{bmatrix}
d _1 ' & & \\
& d _2 ' & \\
& & A _1 
\end{bmatrix}</script><p>如果$d _1 ‘ \nmid d _2 ‘ $,那我们就把第二列加到第一列上,然后重复以上操作,从而使得左上角变成$\gcd ( d _1 ‘ , d _2 ‘ ) $.这样我们就搞定了.</p>
<h5><span id="结构定理">结构定理</span></h5><p>扔出一个<strong>结构定理</strong>:$R $是一个PID,$M $是一个$R $模,我们都可以将$M $拆成:</p>
<script type="math/tex; mode=display">
M \cong ( R / I _1 ) \oplus \cdots \oplus ( R / I _k ) \oplus E</script><p>其中$I _1 \supseteq \cdots \supseteq I _k \ne \{ 0 \} $是$R $上的一列真理想,而$E $是一个$R $上的自由模.</p>
<p>并且上述拆法是有唯一性的,也就是如果还存在另一组拆法:</p>
<script type="math/tex; mode=display">
M \cong ( R / J _1 ) \oplus \cdots \oplus ( R / J _{ k '  } ) \oplus E '</script><p>则$k = k ‘ , I _1 = J _1 , \cdots , I _k = J _{ k ‘  } , E \cong E ‘ $.</p>
<p>回忆到$E $既然是整环上的有限生成自由模,那它可以同构于$R ^{ rk ( E )  } $.因此我们可以在上述一列理想后面补$\mathrm { rk  } ( E ) $个$\{ 0 \} $.这样就可以简写作:</p>
<script type="math/tex; mode=display">
M \cong ( R / I _1 ) \oplus \cdots \oplus ( R / I _k )</script><p>这组$I _1 \supseteq \cdots \supseteq I _k \supseteq \{ 0 \} \cdots $被称为$M $的一组<strong>不变因子</strong>.</p>
<p>此时我们回忆到PID中的自由模不能有挠元,而前面商掉的部分全是挠元,因此结构定理会给出$( R / I _1 ) \oplus \cdots \oplus ( R / I _k ) \cong M _{ tors  } = M [ I _k ] = M [ f _k ] $.</p>
<p>其实这也可以写成结构定理的第二种形式:</p>
<script type="math/tex; mode=display">
M _{ tors  } \cong \bigoplus _p M _{ tors  } [ p ^\infty ] \cong \bigoplus _{ p | f _k , p \in \mathrm { prime  }  } \bigoplus _i R / ( p ^{ b _i ( p )  } )</script><p>其中$\forall p , 0 \leq b _1 ( p ) \leq \cdots \leq b _k ( p ) $.我们将这一列称为<strong>初等因子</strong>.</p>
<p>现在我们着手证明结构定理,首先给出如下引理:</p>
<p>设$E $为主理想环$R $上的自由模,秩为$n $,而$N $是其子模,我们下面证明存在$E $的一组基$f _1 , \cdots , f _n $以及$R $的一列元素$d _1 | \cdots | d _n $,令$r = \max \{ i | d _i \ne 0 \} $,则$d _1 f _1 , \cdots , d _r f _r $构成$N $的基.</p>
<p>回忆到自由模的子模一定是有限生成的而且秩不超过$n $,此时取$x _1 , \cdots , x _m $是$N $的一组生成元,则存在一个唯一的$A $使得$( x _1 , \cdots , x _m ) = ( e _1 , \cdots , e _n ) A $,由Smith标准型,式子变成:</p>
<script type="math/tex; mode=display">
( x _1 , \cdots , x _m ) P ^{ - 1  } = ( e _1 , \cdots , e _n ) Q \begin{bmatrix}
d _1 & & \\
& d _2 & \\
& & \ddots 
\end{bmatrix}</script><p>此时观察左侧的确给出了一组$N $的一组生成元,而右侧的$( e _1 , \cdots , e _n ) Q $给出了另一组基$( f _1 , \cdots , f _n ) $.这就完事了.</p>
<p>此时我们有了如上引理,来证明结构定理的存在性.对于有限生成模$M $,由定义知道存在一组元素$\langle x _1 , \cdots , x _n \rangle = M $.既然如此考虑取$E = R ^{ \otimes n  } $,考虑模同态$E \to M , ( r _i ) _{ i = 1  } ^n \mapsto \sum _{ i = 1  } ^n r _i x _i $,容易见到这显然是个满同态,因此取其$\ker = N $,自然有$M \cong E / N $.根据引理,可以拿到$N $的一组基$d _1 f _1 , \cdots , d _r f _r $,此时见到:</p>
<script type="math/tex; mode=display">
M \cong \cfrac { Rf _1 \oplus \cdots \oplus R f _n  } { Rd _1 f _1 \oplus \cdots Rd _r f _r  }</script><p>然而对于单个的$f _n $来说,自然有$Rf _n \cong R $,而且如果$N _1 $是$M _1 $的子模,$N _2 $是$M _2 $的子模,并且$M _1 \cap M _2 = \{ 0 \} $,容易检验$( M _1 \oplus M _2 ) / ( N _1 \oplus N _2 ) \cong ( M _1 / N _1 ) \oplus ( M _2 / N _2 ) $,而$( Rf _i ) / ( Rd _i f _i ) \cong R / ( d _i ) $,这就搞定了存在性的部分.</p>
<p>接下来来证明唯一性,假设:</p>
<script type="math/tex; mode=display">
M \cong ( R / I _1 ) \oplus \cdots \oplus ( R / I _k ) \oplus E \cong ( R / J _1 ) \oplus \cdots \oplus ( R / J _{ k '  } ) \oplus E '</script><p>然而我们已经知道$E \cong M _{ tf  } $而且$E ‘ \cong M _{ tf  } $,因此有$E \cong E ‘ $.因此我们将问题化约到没有自由部分的特例.于此使用初等因子形式的证明,考虑$M [ p ^\infty ] $自然是其中所有的$R / ( p ^j ) $结构,因此必然只涉及它们的部分会同构,此时化约到已知为:</p>
<script type="math/tex; mode=display">
R / ( p ^{ b _1  } ) \oplus \cdots \oplus R / ( p ^{ b _k  } ) \cong R / ( p ^{ b _1 '  } ) \oplus \cdots \oplus R / ( p ^{ b _{ k '  } '  } )</script><p>为证明这些项对应相同,需要将这些东西等同于某种空间上的结构,我们先来着手证明$k = k ‘ $.回忆到$M [ p ] = \bigoplus _{ i  } ( R / ( p ^{ b _i  } ) ) [ p ] = \bigoplus _{ i  } R / ( p ) $,此时见到$M [ p ] $实际上也可以表示为$R / ( p ) $上的向量空间(回忆到主理想环商掉素理想后得到了一个域),而且$\dim _{ R / ( p )  } M [ p ] = k $,因此必然有$k = k ‘ $.</p>
<p>类似上面,考虑对于一个固定的$a \geq 1 $,考察$p ^c M = \bigoplus _{ i , b _i &gt; c  } p ^c R / p ^{ b _i  } R = \bigoplus _{ i , b _i &gt; c  } R / p ^{ b _i - c  } R $,此时观察$( p ^c M ) [ p ] $,它的维度就是满足$b _i &gt; c $的$i $的个数,即可继续见到两遍逐个相同.</p>
<h5><span id="有限生成交换群的分类">有限生成交换群的分类</span></h5><p>我们先将交换群$A $等同于$\mathbb { Z  } $上的模.下述用加法群,则上面有自然的倍数运算$\mathbb { Z  } \times A \to A : na \mapsto a + a + \cdots + a $.因此交换群立刻等价于$\mathbb { Z  } $模.</p>
<p>然而模上的结构定理立刻给出:</p>
<script type="math/tex; mode=display">
A \cong \mathbb { Z  } / d _1 \mathbb { Z  } \oplus \cdots \oplus \mathbb { Z  } / d _k \mathbb { Z  } \oplus \mathbb { Z  } ^{ \oplus m  }</script><p>其中$d _1 | \cdots | d _k $,这就搞定.</p>
<h4><span id="有理标准型">有理标准型</span></h4><p>取定$R = F [ x ] $,我们可以将一个真理想写作$I _i = ( f _i ) $,其中$f _i \in F [ x ] \setminus F $,并且如果进一步要求其首项为一则$f _i $唯一.</p>
<p>现在来看对于一个固定的多项式$f $,此时$F [ x ] / ( f ) $必然也是一个$F [ x ] $模,那在上面的$x $必然也对应了一个矩阵,设$\deg f = n , f = x ^n + c _{ n - 1  } x ^{ n - 1  } + \cdots + c _0 $,取其有序基为$\{ 1 + ( f ) , x + ( f ) , \cdots , x ^{ n - 1  } + ( f ) \} $.容易见到$x $对应的矩阵应该形如:</p>
<script type="math/tex; mode=display">
C _f = \begin{bmatrix}
0 & 0 & \cdots & 0 & - c _0 \\
1 & 0 & \cdots & 0 & - c _1 \\
0 & 1 & \cdots & 0 & - c _2 \\
\vdots & & \ddots & & \vdots \\
0 & 0 & \cdots & 1 & - c _{ n - 1  } \\

\end{bmatrix}</script><p>这个被称为<strong>友矩阵</strong>.按照最后一列展开见到其特征多项式就是$f $.</p>
<p>结构定理告诉我们,对于上述的一个模(我们之前说过可以唯一对应一个矩阵$A $),可以找到唯一的一组首项为一的多项式$f _1 | \cdots | f _k , k \geq 1 $,其中$\sum \deg f _i = n $,则$A $可以对应于它们所对应的友矩阵所构成的分块对角矩阵,称为<strong>有理标准型</strong>.</p>
<p>上述的具体细节是次数相关的讨论.对于$A $对应的$F [ x ] $上的模$M $,我们之前已经用结构定理搞定说:</p>
<script type="math/tex; mode=display">
M \cong F [ x ] / ( f _1 ) \oplus \cdots \oplus F [ x ] / ( f _k ) \oplus E</script><p>然而回忆到$\dim _F M = n , \dim _F F [ x ] = + \infty $,所以必然有$E = \{ 0 \} $.既然如此$\sum \dim _F ( F [ x ] / ( f _i ) ) = \sum \deg f _i = n $.</p>
<p>有理标准型的强大之处在于蕴含了我们之前讲过的很多事情,并且给出了更加简单的描述:我们下面证明:</p>
<ol>
<li><p>极小多项式有$\mathrm { Min  } _A = f _k $.</p>
</li>
<li><p>特征多项式有$\mathrm { Char  } _A = \prod _{ i = 1  } ^k f _i $.</p>
</li>
</ol>
<p>先证明(1):如果多项式$h $满足$h ( A ) = 0 $,由于我们此时已经将$A $的作用等价于$x $的作用,因此$h ( x ) $必然作用于每个商模上都是$0 $,那就必然意味着$\forall i , f _i | h \Leftrightarrow f _k | h $.</p>
<p>再证明(2):首先我们知道友矩阵的特征多项式满足$\mathrm { Char  } _{ C _f  } = f $,此时发现证完了,因为直和直接就是每一分模的特征多项式乘积.</p>
<p>回忆到结构定理存在第二种表示方法,我们考虑将$\mathrm { Min  } _A = f _k = p _1 ^{ a _1  } \cdots p _k ^{ a _k  } $,那我们就可以将$A $同构于若干分块对角矩阵$A _1 , \cdots , A _m $组成的分块对角矩阵,其中每一个$A _i $亦然可以分解为若干友矩阵$C _{ p _j ^{ b  }  } $之类的东西.</p>
<p>接下来看如何计算一个有理标准型,考虑$V $是一个$F $向量空间,而$T \in \mathrm { End  } ( V ) $,从而使得$V $从一个$F $向量空间升级为一个$F [ x ] $模.</p>
<p>如果我们能拿到一个满射$\varphi : F [ x ] ^{ \oplus n  } \to V $,那考虑$\ker \varphi $当然是$F [ x ] ^{ \oplus n  } $的一个子模,既然如此,存在$F [ x ] ^{ \oplus n  } $的一组基$f _1 , \cdots , f _n $,以及一组非零多项式$d _1 | \cdots | d _n $,使得$\ker \varphi = \bigoplus _i F [ x ] d _i f _i $,从而使得$V \cong \bigoplus _i F [ x ] / ( d _i ) $.</p>
<p>策略当然是简单的,考虑$F [ x ] ^{ \oplus n  } $的一组基$e _1 , \cdots , e _n $,以及$V $作为向量空间的一组基$v _1 , \cdots , v _n $,我们要求$\varphi ( e _i ) = v _i , \varphi ( x ) = T $,从而$\varphi ( \sum _i r _i e _i ) = \sum _i r _i ( T ) v _i $,立刻见到这的确是满射,疑问只在于如何求其$\ker $.</p>
<p>定义$y _j = xe _j - \sum _{ i = 1  } ^n a _{ i , j  } e _i $.取$N = \sum _{ j = 1  } ^n F [ x ] y _j $,其中$a _{ i , j  } $是$T $再这组基下对应的矩阵元素.此时立刻见到$\varphi ( y _j ) = Tv _j - \sum _{ i  } a _{ i , j  } v _i = 0 $,因此$\ker \varphi \supseteq N $.</p>
<p>反之,观察到$xe _j = \sum _i a _{ i , j  } e _i + y _j \in \sum _i a _{ i , j  } e _i + N $,反复做此操作,得知$\forall w \in F [ x ] ^{ \bigoplus n  } , w \in \sum _{ i  } c _i e _i + N $,于此做$\varphi $得到$\varphi ( w ) = 0 \Leftrightarrow \sum _i c _i v _i = 0 $,从而得知所有的$c _i = 0 $.这就证明了$\ker \varphi = N $.</p>
<p>观察到$( x _1 , \cdots , x _n ) = ( e _1 , \cdots , e _n ) ( xI - A ) $,而$( xI - A ) $的确是一个定义在$F [ x ] $上的矩阵,对此用Smith标准型得到$( e _1 , \cdots , e _n ) Q \begin{bmatrix}d _1 &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; d _n \end{bmatrix} P $,这就搞定了.</p>
<h6><span id="example1">Example1</span></h6><p>考虑$V = F ^3 $,$T = A = \begin{bmatrix}- 1 &amp; - 2 &amp; 6 \ - 1 &amp; 0 &amp; 3 \ - 1 &amp; - 1 &amp; 4 \end{bmatrix} $.</p>
<p>首先要做的是计算$xI - A $,对此:</p>
<script type="math/tex; mode=display">
\begin{aligned}
xI - A & = \begin{bmatrix}
x + 1 & 2 & - 6 \\
1 & x & - 3 \\
1 & 1 & x - 4 
\end{bmatrix} \\
\to \begin{bmatrix}
0 & - x + 1 & - x ^2 + 3 x - 2 \\
0 & x - 1 & - x + 1 \\
1 & 1 & x - 4 
\end{bmatrix} \\
\to \begin{bmatrix}
1 & 1 & x - 4 \\
0 & x - 1 & - x + 1 \\
0 & - x + 1 & - ( x - 1 ) ( x - 2 ) 
\end{bmatrix} \\
\to \begin{bmatrix}
1 & 0 & 0 \\
0 & x - 1 & - x + 1 \\
0 & - x + 1 & - ( x - 1 ) ( x - 2 ) 
\end{bmatrix} \\
\to \begin{bmatrix}
1 & 0 & 0 \\
0 & x - 1 & - x + 1 \\
0 & 0 & - ( x - 1 ) ^2 
\end{bmatrix} \\
\to \begin{bmatrix}
1 & 0 & 0 \\
0 & x - 1 & 0 \\
0 & 0 & - ( x - 1 ) ^2 
\end{bmatrix} \\

\end{aligned}</script><p>这样我们就得到了不变因子,得到$T \sim \begin{bmatrix}1 &amp; &amp; \ &amp; 0 &amp; - 1 \ &amp; 1 &amp; 2 \end{bmatrix} $.</p>
<h4><span id="jordan标准型">Jordan标准型</span></h4><p>对环上元素$r \in R $,如果$\exists d \geq 1 , r ^d = 0 $,我们称它是<strong>幂零的</strong>.而最小的$d \geq 1 $满足$r ^d $称为$r $的<strong>幂零指数</strong>.回忆到我们定义过广义特征子空间$V _{ [ \lambda ]  } = \ker ( T - \lambda ) ^\infty $.回忆到$\mathrm { End  } ( V ) $是一个环,$T \in \mathrm { End  } ( V ) $是其中的一个元素,我们说以下命题等价:</p>
<ol>
<li><p>$T \in \mathrm { End  } ( V ) $是幂零的.</p>
</li>
<li><p>$\exists k , \mathrm { Min  } _T = x ^k $.</p>
</li>
<li><p>$\mathrm { Char  } _T = x ^n $.</p>
</li>
<li><p>$V = V _{ [ 0 ]  } $.</p>
</li>
</ol>
<p>(1)$\Rightarrow $(2)只需考虑如果$T ^k = 0 $,则$\mathrm { Min  } _T | x ^k $.</p>
<p>(2)$\Rightarrow $(3)是显然的,因为极小多项式和特征多项式共根.</p>
<p>(3)$\Rightarrow $(4)直接是定义.</p>
<p>(4)$\Rightarrow $(1),考虑$V _{ [ 0 ]  } $作为子空间,扩张一定是有限次的,所以也就搞定.</p>
<p>接下来我们定义上三角块$J _d ( \lambda ) = \begin{bmatrix}\lambda &amp; 1 &amp; &amp; \ &amp; \ddots &amp; \ddots &amp; \ &amp; &amp; \lambda &amp; 1 \ &amp; &amp; &amp; \lambda \end{bmatrix} $以及下三角块$( J _d ) ^t ( \lambda ) $.容易见到$J _d ( \lambda ) = \lambda I + J _d ( 0 ) $,我们还可以发现下三角块$( J _d ) ^t ( 0 ) $恰好是多项式$x ^d $的友矩阵.并且容易见到对于$( J _d ) ^t ( \lambda ) $而言,其$\mathrm { Min  } = \mathrm { Char  } = ( x - \lambda ) ^d $.同理取其转置可以知道$J _d ( \lambda ) $亦然有$\mathrm { Min  } = \mathrm { Char  } = ( x - \lambda ) ^d $.</p>
<p>接下来我们证明,如果$A $幂零,则存在唯一的正整数列$1 \leq b _1 \leq \cdots \leq b _r $使得$\sum _{ i = 1  } ^r b _i = n $而$A $共轭于分块对角矩阵$\begin{bmatrix}J _{ b _1  } ( 0 ) &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; J _{ b _r  } ( 0 ) \end{bmatrix} $,并且如果上述陈述中的$J _{ b _i  } $全换成下三角$( J _{ b _i  } ) ^t $,结论亦然成立.</p>
<p>这个其实是显然的,因为此时直接取其有理标准型满足$f _1 | \cdots | f _r $,并且$f _r = x ^d $,设$f _i = x ^{ b _i  } $,自然得到下三角的结论,转置后得到上三角的结论.</p>
<p>接下来假设特征多项式在$F $上分裂(这当然是必要的,因为Jordan标准型是上三角矩阵,而一个矩阵可上三角化的充要条件是特征多项式在$F $上分裂),我们设其相异根为$\lambda _1 , \cdots , \lambda _m \in F $,存在$V $的有序基,使得$T $表为分块对角矩阵$diag ( A _1 , \cdots , A _m ) $,其中$A _j = \begin{bmatrix}J _{ b _1 , j  } ( \lambda _j ) &amp; &amp; \ &amp; \ddots &amp; \ &amp; &amp; J _{ b _{ r _j  } , j  } ( \lambda _j ) \end{bmatrix} $.而且每个$j $对应地正整数数列由$T $唯一确定,上述矩阵被称为$T $的Jordan标准型.</p>
<p>证法呼之欲出,取对$T $的广义特征子空间分解$V = V _{ [ \lambda _1 ]  } \oplus \cdots \oplus V _{ [ \lambda _m ]  } $,限制在$V _{ \lambda _j  } $上,$T _j - \lambda _j $幂零,根据上面的结论就做完了.</p>
<p>现在的问题可能在于如何计算Jordan标准型,一种方法是途径有理标准型,另一种方法是依赖于秩的计算.让我们依旧从幂零情形入手,假设$T $幂零,我们断言:</p>
<ol>
<li><p>在$T $的Jordan标准型中,Jordan块的总数为$n - \mathrm { rk  } ( T ) $个.</p>
</li>
<li><p>对于每个$d \geq 1 $,标准型中的$d \times d $Jordan块的个数$N ( d ) $满足:$N ( d ) = \mathrm { rk  } ( T ^{ d + 1  } ) + \mathrm { rk  } ( T ^{ d - 1  } ) - 2 \mathrm { rk  } ( T ^d ) $.</p>
</li>
</ol>
<p>(1)是显然的,因为一个$d \times d $的Jordan块的秩为$d - 1 $.</p>
<p>而容易见到$\mathrm { rk  } ( J _b ( 0 ) ^k ) = \max ( 0 , b - k ) $,从而:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\mathrm { rk  } ( T ^{ d + 1  } ) - \mathrm { rk  } ( T ^d ) & = \sum _{ j : b _j \geq d + 1  } ( - 1 ) \\
\mathrm { rk  } ( T ^{ d  } ) - \mathrm { rk  } ( T ^{ d - 1  } ) & = \sum _{ j : b _j \geq d  } ( - 1 ) \\

\end{aligned}</script><p>两式相减即可得到答案.</p>
<p>至于对其余情形,只需观察到当$\lambda _i \ne \lambda _j $的时候,$A _i - \lambda _j I $肯定可逆,因此:</p>
<script type="math/tex; mode=display">
N _j ( d ) = \mathrm { rk  } ( T - \lambda _j I ) ^{ d + 1  } + \mathrm { rk  } ( T - \lambda _j I ) ^{ d - 1  } - 2 \mathrm { rk  } ( T - \lambda _j I ) ^d</script><p>便数平凡.</p>
<p>可以见到Jordan标准型的每一个块,如果特征值为$0 $,实际上是把基向前挪动.</p>
<h5><span id="加性jordan-chevalley分解">加性Jordan-Chevalley分解</span></h5><p>由上述可以见到,对于一个特征多项式可分裂的矩阵$T $,存在唯一一个可对角化矩阵$S $和一个幂零矩阵$N $使得$T = S + N $而且$SN = NS $.</p>
<p>由Jordan标准型知道的确存在解(因为每一个分块对角上的对角矩阵都是$\lambda I $的形式),现在问题在于唯一性.</p>
<p>既然$S $可对角化,我们取其相异的特征值$\mu _1 , \cdots , \mu _l $.对其做特征子空间分解$V = V _{ \mu _1  } \oplus \cdots \oplus V _{ \mu _l  } $,回忆到$NS = SN $导出$ST = TS $,这意味着每一个特征子空间都是$T $不变的.</p>
<p>此时观察$T | _{ V _j  } $,观察到此时$( T - \mu _j I ) | _{ V _j  } = N | _{ V _j  } $是幂零的,所以$V _j $被包含于$T $的广义特征子空间$V ‘ [ \mu _j ] $,然而广义特征子空间必然也给出了一个空间的分解,因此它们也不可能再往外扩张了,这必然意味着$S $的特征空间$V _j $恰好就是$T $的广义特征子空间$V ‘ [ \mu _j ] $.所以$S $限定在$V ‘ [ \mu _j ] $上就是$\mu _j I $,这就保证了$S $是唯一的,从而$N $也就唯一.</p>
<p>此外,我们还可以证明存在多项式$f , g $使得$S = f ( T ) , N = g ( T ) $.首先可以取$g = x - f $,下面来搞定$f $是如何取定的.</p>
<p>考虑用中国剩余定理拿到一个$f $满足$f \equiv \mu _i \pmod { ( x - \mu _i ) ^n  } $,留神到$f ( T ) | _{ V _j  } = \mu _j $,原因是$( T - \mu _j ) ^n | _{ V _j  } = 0 $,那按照我们刚才对唯一性的论证,这必然说明了$f ( T ) = S $.</p>
<h5><span id="乘性jordan-chevalley分解">乘性Jordan-Chevalley分解</span></h5><p>对于一个特征多项式可分裂的可逆(等价于特征多项式无零根)的$T \in \mathrm { End  } ( V ) $,则存在唯一一对可逆的$S , U $使得:</p>
<ol>
<li><p>$S $可对角化.</p>
</li>
<li><p>$U - I $幂零.</p>
</li>
<li><p>$SU = T = US $.</p>
</li>
<li><p>存在多项式$f , g $,$S = f ( T ) , U = g ( T ) $.</p>
</li>
</ol>
<p>对于存在性,取道加性分解,设$T = S + N = S ( I + S ^{ - 1  } N ) $,直接取$U = I + S ^{ - 1  } N $,由于$SN = NS $,则$U - I = S ^{ - 1  } N $因为$N $幂零而幂零,同时$SU = T = US $也满足了.</p>
<p>对于唯一性,假设存在$T = SU = S + S ( U - I ) $,由于$SU = US $,所以$S ( U - I ) $幂零,这就给出了一个加性分解,从而导出了唯一性.</p>
<p>最后来看如何取多项式.加性版本给出了$S = f ( T ) $.要求出$g $的话需要满足$g ( T ) f ( T ) = T $.</p>
<p>于此考虑证明$f $和$\mathrm { char  } _T $是互素的,原因是反证法:如果不互素,则存在$T $的特征值$\lambda $使得$( x - \lambda ) | f $,则对于对应的特征向量$\vec { v  } $总有$S \vec { v  } = f ( T ) \vec { v  } = 0 $,可是$S $可对角化而且特征值无$0 $,这就矛盾了.</p>
<p>既然如此,用裴蜀定理立刻拿到一对$g , h \in F [ x ] $使得$gf + h \mathrm { char  } _T = x $,带入$T $得到$g ( T ) f ( T ) = T $,这个$g ( T ) = TS ^{ - 1  } = U $.</p>
<h3><span id="张量积">张量积</span></h3><p>给定两个$F $上的向量空间$V , W $,我们想要通过它们构造新的向量空间$V \otimes W $(这里并非直积,只是用这个符号).我们希望这个配对满足:</p>
<ol>
<li><p>$V \times W \to V \otimes W $是双线性的.</p>
</li>
<li><p>构造应该是自然的:不依赖基的选取.</p>
</li>
</ol>
<p>此外,我们希望其满足一些更好的泛性质,考虑资料$( L , B ) $,其中$L $是一个向量空间,$B $是一个$V \times W \to L $的一个双线性映射,我们希望有一个尽可能泛的资料$( L _{ \mathrm { univ  }  } , B _{ \mathrm { univ  }  } ) $,使得对于任何满足条件的$( L , B ) $,存在唯一的$\varphi $以下图表交换:</p>
<script type="math/tex; mode=display">
\xymatrix { V \times W \ar [r ] ^{ B _{ \mathrm { univ  }  }  } \ar [dr ] _B & L _{ \mathrm { univ  }  } \ar [d ] ^\varphi \\
& L  }</script><p>此外我们还希望上述资料$( L _{ \mathrm { univ  }  } , B _{ \mathrm { univ  }  } ) $是唯一的,我们希望将其记作$V \otimes W $.</p>
<p>我们可以先尝试构造一下,用最粗暴的方法,干脆定义$E = F ^{ \oplus ( V \times W )  } $,其元素表为有限线性组合$\sum _i c _i ( v _i , w _i ) $,考虑以下元素生成的子空间$N $:</p>
<ol>
<li><p>$( v + v ‘ , w ) - ( v , w ) - ( v ‘ , w ) $.</p>
</li>
<li><p>$( v , w + w ‘ ) - ( v , w ) - ( v , w ‘ ) $.</p>
</li>
<li><p>$( tv , w ) - t ( v , w ) $.</p>
</li>
<li><p>$( v , tw ) - t ( v , w ) $.</p>
</li>
</ol>
<p>接下来取$L _{ \mathrm { univ  }  } = E / N $,连同映射$B _{ \mathrm { univ  }  } : ( v , w ) \mapsto ( v , w ) + N $,容易见到我们的确强行定义了双线性形式的性质.</p>
<p>接下来考虑其泛性质,对双线性映射$B : V \times W \to L $,其可以确定唯一的线性映射$\Phi : E \to L , \sum _i c _i ( v _i , w _i ) \mapsto \sum _i c _i B ( v _i , w _i ) $.</p>
<p>然而由于$B $的双线性性,立刻得到$B ( N ) = \{ 0 \} $,从而可以导出唯一的$\varphi : L _{ \mathrm { univ  }  } \to L , x + N \mapsto \Phi ( x ) $.这立刻得到了$\varphi $的唯一性,原因是$\varphi ( ( v , w ) + N ) = B ( v , w ) $是总有的.</p>
<p>唯一性应当是显然的,只需见到如果有两个$L _{ \mathrm { univ  }  } $和$L _{ \mathrm { univ  }  } ‘ $,则应当有:</p>
<script type="math/tex; mode=display">
\xymatrix { & L _{ \mathrm { univ  }  } \ar [d ] ^\varphi \\
V \times W \ar [ru ] ^{ B _{ \mathrm { univ  }  }  } \ar [r ] ^{ B _{ \mathrm { univ  }  } '  } \ar [dr ] _{ B _{ \mathrm { univ  }  }  } & L _{ \mathrm { univ  }  } ' \ar [d ] ^\psi \\
& L _{ \mathrm { univ  }  }  }</script><p>外圈当然也是交换的,然而取$id $也必然导出外圈交换,由图表唯一性立刻得到$\varphi \psi = id $,对称性得出$\psi \varphi = id $,这就搞定了$L _{ \mathrm { univ  }  } \cong L _{ \mathrm { univ  }  } ‘ $.</p>
<p>容易见到上述性质保证了同构:$\mathrm { Hom  } ( V \otimes W , L ) \cong \mathrm { Bil  } ( V , W ; L ) , \varphi \mapsto \varphi B _{ \mathrm { univ  }  } $.</p>
<p>容易将上述结论推广到多重线性映射的情形.还可以将张量积的符号推广到线性映射上,我们断言总存在唯一的$\varphi $使得下图交换:</p>
<script type="math/tex; mode=display">
\xymatrix { V _1 \times \cdots \times V _n \ar [r ] ^{ ( f _1 , \cdots , f _n )  } \ar [d ] & W _1 \times \cdots \times W _n \ar [d ] \\
V _1 \otimes \cdots \otimes V _n \ar [r ] _{ \varphi  } & W _1 \otimes \cdots \otimes W _n \\
 }</script><p>从而可以自然地将$\varphi $记作$f _1 \otimes \cdots \otimes f _n $.</p>
<p>于此只需考虑上半部分,我们知道$( v _1 , \cdots , v _n ) \mapsto f _1 ( v _1 ) \otimes \cdots \otimes f _n ( v _n ) $是一个多重线性映射,所以当然存在唯一一个映射打过来.从而得到:</p>
<script type="math/tex; mode=display">
( f _1 \otimes \cdots \otimes f _n ) ( v _1 \otimes \cdots \otimes v _n ) = f _1 ( v _1 ) \otimes \cdots \otimes f _n ( v _n )</script><p>其实我们上面证明的就是下面这个同构$\bigotimes _{ i = 1  } ^n \mathrm { Hom  } ( V _i , W _i ) \cong \mathrm { Hom  } ( \bigotimes _i V _i , \bigotimes _i W _i ) $,好吧起码这个有限维情况下是同构,无穷维的话lww好像也有点不确定.</p>
<p>有以下性质自然成立(另一种看法是,线性映射也在一个线性空间里,所以上面也会自带一种张量积,恰为这个):</p>
<ol>
<li><p>$id _{ V _1  } \otimes \cdots \otimes id _{ V _n  } = id _{ V _1 \otimes \cdots \otimes V _n  } $.</p>
</li>
<li><p>$( f _1 \otimes \cdots \otimes f _n ) ( g _1 \otimes \cdots \otimes g _n ) = f _1 g _1 \otimes \cdots \otimes f _n g _n $.</p>
</li>
<li><p>$( ( \alpha f _1 + \alpha ‘ f _1 ‘ ) \otimes \cdots \otimes f _n ) = \alpha ( f _1 \otimes \cdots \otimes f _n ) + \alpha ‘ ( f _1 ‘ \otimes \cdots \otimes f _n ) $.</p>
</li>
</ol>
<p>而考虑多重线性映射的$\mathrm { Mul  } ( V _1 , \cdots , V _n ; M ) $,如果$V _1 , \cdots , V _n $中任意一个是零空间,那由于多重线性性质,立刻导出这个映射只有零映射(原因是此时$a = a + a $),从而使得$\mathrm { Hom  } ( V _1 \otimes \cdots \otimes V _n ; M ) $中只有零映射(对所有$M $),那其$id $映射也是零映射,自然意味着$V _1 \otimes \cdots \otimes V _n $是零空间.</p>
<p>于此之外,如果想要跳过张量积的构造而直接探究张量积的性质,可能需要先判断$\{ v _1 \otimes \cdots \otimes v _n \} $集合是否的确生成了$V _1 \otimes \cdots \otimes V _n $.于此只需要取$K = \langle v _1 \otimes \cdots \otimes v _n | \forall v _i \in V _i \rangle $,然后判断$M = ( V _1 \otimes \cdots \otimes V _n ) / K $是否为零空间即可.此时$\forall \varphi $作为商映射,当然都有$\varphi ( v _1 \otimes \cdots \otimes v _n ) = 0 $,我们想说明$\varphi $的确是零映射,这首先需要保证即使只有$v _1 \otimes \cdots \otimes v _n $上的限制也可以有类似外延公理的结论.</p>
<p>换言之,如果两个在$V _1 \otimes \cdots \otimes V _n $映射$f , g $满足$\forall v _i , f ( v _1 \otimes \cdots \otimes v _n ) = g ( v _1 \otimes \cdots \otimes v _n ) $则$f \equiv g $,只需回忆到这上面的映射与多重线性映射一一对应,而多重线性映射上用外延公理就搞定了.</p>
<p>这就看到,用与多重线性映射一一对应的性质同样是张量积的某种泛性质.</p>
<p>我们还可以看到,如果$f _1 , \cdots , f _n $都是满的,则$f _1 \otimes \cdots \otimes f _n $亦然,这是显然的.</p>
<p>可能稍不显然的是如果$f _1 , \cdots , f _n $都是单的,则$f _1 \otimes \cdots \otimes f _n $也是单的.此时$W _i $可以分解出一个与$V _i $同构的$\mathrm { im  } f _i $部分,干脆记作$W _i \cong V _i \oplus V _i ‘ $,并假设$f _i : V _i \to W _i $是自然的嵌入映射.回忆到张量积在同构下有交换律和对直和的分配律(下面会证),见到$W _1 \otimes \cdots \otimes W _n \cong ( V _1 \otimes \cdots \otimes V _n ) \oplus V ‘ $,此时$f _1 \otimes \cdots \otimes f _n $就是自然的嵌入映射.你可能会想欸,不对啊,$V ‘ $里也会有一些$V _i $项啊.可是,回忆到如果某一分量为零,则其在张量积中拿到的结果就是$0 $,所以$f _1 \otimes \cdots \otimes f _n $只会对前面有意义.</p>
<h4><span id="张量积与直和">张量积与直和</span></h4><p>接下来考虑证明以下结论:</p>
<ol>
<li><p>结合律:$V _1 \otimes ( V _2 \otimes V _3 ) \cong V _1 \otimes V _2 \otimes V _3 \cong ( V _1 \otimes V _2 ) \otimes V _3 $.</p>
</li>
<li><p>幺元:$F \otimes V \cong V \cong V \otimes F $.</p>
</li>
<li><p>交换律:$V \otimes W \cong W \otimes V $.</p>
</li>
<li><p>零元:$\{ 0 \} \otimes V \cong \{ 0 \} \cong V \otimes \{ 0 \} $.</p>
</li>
<li><p>分配律:设$V $带有直和分解$V = \bigoplus _{ i \in I  } V _i $,则$V \otimes W \cong \bigoplus _{ i \in I  } ( V _i \otimes W ) $.</p>
</li>
</ol>
<p>考虑(1),下面证明$V _1 \otimes ( V _2 \otimes V _3 ) \cong V _1 \otimes V _2 \otimes V _3 $,其关键是构造以下线性映射:</p>
<script type="math/tex; mode=display">
\xymatrix { V _1 \otimes ( V _2 \otimes V _3 ) \ar [r ] ^{ \alpha  } & V _1 \otimes V _2 \otimes V _3 \ar [r ] ^{ \beta  } & V _1 \otimes ( V _2 \otimes V _3 ) \\
v _1 \otimes ( v _2 \otimes v _3 ) \ar @{|->} [r ] & v _1 \otimes v _2 \otimes v _3 \ar @{|->} [r ] & v _1 \otimes ( v _2 \otimes v _3 )  }</script><p>如果我们的确造出了这个映射,由于我们有外延公理,这必然意味着$\alpha \circ \beta = id $,从而导出$V _1 \otimes ( V _2 \otimes V _3 ) \cong V _1 \otimes V _2 \otimes V _3 $.</p>
<p>对于$\beta $,立刻就能看出$V _1 \times V _2 \times V _3 \to V _1 \otimes ( V _2 \otimes V _3 ) $是三重线性的.因此泛性质诱导出$\beta $映射.</p>
<p>至于$\alpha $映射,只需先做$V _1 \times ( V _2 \times V _3 ) \cong V _1 \times V _2 \times V _3 $就行.</p>
<p>考虑(2),和(1)一样,我们想要搞一个映射链$V \to F \otimes V \to V $,对于前者只需要取映射$\lambda _V : F \otimes V \to V , t \otimes v \mapsto tv $,对于后者只需要取$\tau _V : V \to F \otimes V , v \mapsto 1 \otimes v $.回忆到$1 \otimes tv = t \otimes v $,因此上述映射均是合理的,而且复合之后是$id $.</p>
<p>考虑(3),我想答案呼之欲出:$V \otimes W $和$W \otimes V $都是$V \times W $诱导出来的,而$V \times W \cong W \times V $.</p>
<p>(4)我们之前已经证明了.</p>
<p>考虑(5),回忆到如果$V = \bigoplus _{ i \in I  } V _i $,则$V ^\vee = \prod _{ i \in I  } ( V _i ) ^\vee $.同理应该能拿到$\mathrm { Hom  } ( V , L ) = \prod _{ i \in I  } \mathrm { Hom  } ( V _i , L ) $,进一步地有:</p>
<script type="math/tex; mode=display">
\mathrm { Bil  } ( V , W ; L ) \cong \prod _{ i \in I  } \mathrm { Bil  } ( V _i , W ; L ) \cong \prod _{ i \in I  } \mathrm { Hom  } ( V _i \otimes W , L ) \cong \mathrm { Hom  } \left ( \bigoplus _{ i \in I  } ( V _i \otimes W ) , L \right )</script><p>从而可以使我们诱导出原本的同构.</p>
<p>基于(5),我们可以知道如果$V $有基$( v _i ) _{ i \in I  } $而$W $有基$( w _j ) _{ j \in J  } $,则$( v _i \otimes w _j ) _{ ( i , j ) \in I \times J  } $也是$V \otimes W $的基,从而得到$\dim ( V \otimes W ) = ( \dim V ) \times ( \dim W ) $.这给出了张量积的Kronecker基形式.</p>
<p>最后我们还可以引入张量幂$V ^{ \otimes n  } $,从上面的讨论我们可以知道$( V ^{ \otimes a  } ) ^{ \otimes b  } \cong V ^{ \otimes ab  } $以及$V ^{ \otimes a  } \otimes V ^{ \otimes b  } \cong V ^{ \otimes ( a + b )  } $.</p>
<h4><span id="kronecker积">Kronecker积</span></h4><p>对于矩阵$X \in F ^{ n \times m  } , Y \in F ^{ p \times q  } $,我们定义它们的克罗内多积为:</p>
<script type="math/tex; mode=display">
X \otimes Y = \begin{bmatrix}
x _{ 1 , 1  } Y & x _{ 1 , 2  } Y & \cdots & x _{ 1 , m  } Y \\
x _{ 2 , 1  } Y & x _{ 2 , 2  } Y & \cdots & x _{ 2 , m  } Y \\
\vdots & \vdots & \ddots & \vdots \\
x _{ n , 1  } Y & x _{ n , 2  } Y & \cdots & x _{ n , m  } Y 
\end{bmatrix} \in F ^{ ( np ) \times ( mq )  }</script><p>克罗内多积显然不满足交换律.</p>
<p>事实上,设$X , Y , Z $在下列运算中有意义,克罗内多积满足以下性质:</p>
<ol>
<li><p>结合律:$X \otimes Y \otimes Z = X \otimes ( Y \otimes Z ) $.</p>
</li>
<li><p>左分配律:$X \otimes ( Y + Z ) = X \otimes Y + X \otimes Z $.</p>
</li>
<li><p>右分配律:$( X + Y ) \otimes Z = X \otimes Z + Y \otimes Z $.</p>
</li>
<li><p>$( X \otimes Y ) ^T = X ^T \otimes Y ^T $.</p>
</li>
<li><p>$( X \otimes Y ) ( U \otimes V ) = ( XU ) \otimes ( YV ) $.</p>
</li>
<li><p>$X ^{ - 1  } \otimes Y ^{ - 1  } = ( X \otimes Y ) ^{ - 1  } $.</p>
</li>
<li><p>$\det ( X \otimes Y ) = \det ( X ) ^m \det ( Y ) ^n , X \in F ^{ n \times n  } , Y \in F ^{ m \times m  } $.</p>
</li>
<li><p>$rank ( X \otimes Y ) = rank ( X ) \times rank ( Y ) $.</p>
</li>
</ol>
<p>上述命题稍不显然的是(4),我们将在下面讨论对偶空间的时候得出它.</p>
<p>克罗内多积的性质有一个很有用的特例是:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A \otimes B \otimes C & = ( A \otimes I _n \otimes I _n ) ( I _n \otimes B \otimes I _n ) ( I _n \otimes I _n \otimes C ) \\
A , B , C \in F ^{ n \times n  } 
\end{aligned}</script><h4><span id="张量积与对偶空间">张量积与对偶空间</span></h4><p>回忆到典范配对,如今我们可以用张量积将其表示为线性映射$V ^\vee \otimes V \to F , \lambda \otimes v \mapsto \langle \lambda , v \rangle = \lambda ( v ) $,这被称为<strong>缩并</strong>映射.</p>
<p>考虑映射$\Theta : V ^\vee \otimes W \to \mathrm { Hom  } ( V , W ) , \sum _i \lambda _i \otimes w _i \mapsto \sum _i \langle \lambda _i , _ \rangle w _i $.这个映射总是单射,当维数是有限维的时候则是满的.</p>
<p>也许还该简单验证此结论,首先检查$V ^\vee \times W \to \mathrm { Hom  } ( V , W ) $,这的确是一个双线性映射,于是由泛性质立刻诱导出映射$V ^\vee \otimes W \to \mathrm { Hom  } ( V , W ) $.</p>
<p>接下来证明其是单射,只需要证明其$\ker = \{ 0 \} $即可.而其$\ker $中的元素总形如$\sum _{ i = 1  } ^k \lambda _i \otimes w _i $,不妨假设$w _1 , \cdots , w _k $是线性无关的(可以把相关的项整理到$\lambda _i $里面).</p>
<p>此时由于其在$\ker $里,所以$\forall v \in V $,总有$\sum _{ i = 1  } ^k \langle \lambda _i , v \rangle w _i = 0 $,然而$w _i $线性无关,所以$\langle \lambda _i , v \rangle \equiv 0 $,可是$v $是任取的,这必然意味着$\lambda _i \equiv 0 $.</p>
<p>接下来考虑证明当$V , W $其一是有限维的时候上述映射是满的,容易发现$\Theta $的像总是有限维的(因为左边是有限求和).当$V , W $其一是有限维的,$T \in \mathrm { Hom  } ( V , W ) $就是有限秩的,此时就可以取其像的基$w _1 , \cdots , w _n $,对所有$v \in V $,$T ( v ) $都可以唯一表述为$c _1 w _1 + \cdots + c _n w _n $,然而这里面每一个$c _i $对$v $都是线性的,从而它们都可以表示为$V ^\vee $中的元素而与$v $的选取无关,这就搞定了.</p>
<p>万事俱备,再看$\mathrm { End  } ( V ) $上,既然$V ^\vee \otimes V $带有一个典范的缩并映射,在有限维的情况下,那与之同构的$\mathrm { End  } ( V ) $也该带有一个到$F $的映射.我们断言这个映射就是$\mathrm { Tr  } $映射.有下述图表:</p>
<script type="math/tex; mode=display">
\xymatrix { V ^\vee \otimes V \ar [rd ] _{ \text { contraction  }  } \ar [rr ] ^{ \sim  } & & \mathrm { End ( V )  } \ar [ld ] ^\mathrm { Trace  } \\
& F &  }</script><p>如何检验这个结论,我们之前刻画Trace的办法只有取对偶基$\check { v  } _1 , \cdots , \check { v  } _n $,然后将$v = \sum c _i v _i $和$\lambda = d _i \check { v  } _i $,那典范配对$\Theta ( \lambda \otimes v ) = \sum _{ i , j  } \langle \check { v  } _i , _ \rangle v _j $,也就是说其将基向量$v _i $映射到了$\sum _j c _j d _i $,从而见到其$\mathrm { Tr  } = \sum _i c _i d _i = \langle \lambda , v \rangle $.</p>
<p>如果写成矩阵形式的话,$\lambda \in V ^\vee $可以写成一个$1 \times n $的矩阵,$w \in W $可以写成一个$m \times 1 $的矩阵,那其实$\Theta ( \lambda \otimes w ) $就是$w \lambda $这个$m \times n $的矩阵.</p>
<p>最后来看曾经想要拿到的那个结论,下面我们引入一个典范的同构$\Psi : V _1 ^\vee \otimes \cdots \otimes V _n ^\vee \to ( V _1 \otimes \cdots \otimes V _n ) ^\vee $,策略是观察$V _1 ^\vee \times \cdots \times V _n ^\vee \to ( V _1 \otimes \cdots \otimes V _n ) ^\vee $自然是一个线性映射,其映射自然是:</p>
<script type="math/tex; mode=display">
( \check { v  } _1 , \cdots , \check { v  } _n ) \mapsto \left [ v _1 \otimes \cdots \otimes v _n \mapsto \prod _{ i = 1  } ^n \langle \check { v  } _i , v _i \rangle \right ]</script><p>我们希望当每个$V _i $都是有限维的时候,上述映射是同构.由于两遍维数相同,所以单性蕴含着满性.而其单性只要取左侧$V _1 ^\vee \otimes \cdots \otimes V _n ^\vee $的基$\check { v _{ 1 , i _1  }  } \otimes \cdots \otimes \check { v _{ n , i _n  }  } $,将每个$\lambda $按照这组基展开,$\psi ( \lambda ) $在$v _{ 1 , i _1  } \otimes \cdots \otimes v _{ n , i _n  } $处的值就是该基在$\lambda $中的系数.因此$\ker = \{ 0 \} $导出单性.</p>
<h4><span id="张量代数">张量代数</span></h4><p>设$F $是一个域,一个$F $上的<strong>代数</strong>需要以下资料:</p>
<ol>
<li><p>一个环$A $,其需要带有$F $向量空间的结构,使得环的加法等价于向量空间的加法.</p>
</li>
<li><p>环的乘法$A \times A \to A $需要是双线性的.</p>
</li>
</ol>
<p>请沿之前引入代数结构的常规讨论把代数的结构一块搞定,其实大部分在环那里已经做完了,代数结构更强,因此只需要限定同态必须也态射到代数就行.也许还需要检验理想对标量乘法封闭,只需要观察到$tI = ( t 1 _A ) I \subseteq I $就行.</p>
<p>对于$F $向量空间$V $,下面定义$T ( V ) = \bigoplus _{ n \geq 0  } V ^{ \otimes n  } $,其自然带有向量空间的结构,只需加上双线性乘法就能构成一个代数,策略是:</p>
<script type="math/tex; mode=display">
\begin{gathered}
V ^{ \otimes a  } \otimes V ^{ \otimes b  } \to V ^{ \otimes ( a + b )  } \\
( v _1 \otimes \cdots \otimes v _a ) \otimes ( v _1 ' \otimes \cdots \otimes v _b ' ) \mapsto v _1 \otimes \cdots \otimes v _a \otimes v _1 ' \otimes \cdots \otimes v _b ' 
\end{gathered}</script><p>它的幺元自然选作$1 \in F = V ^{ \otimes 0  } $.我们还可以自然地在上面定义$\psi ^{ \otimes a  } $之类的结构,不再赘述.</p>
<p>来进入对称代数与外代数,考虑$C \in \mathrm { Mul  } ( V , \cdots , V ; M ) $,任意置换$\sigma $,定义:</p>
<ol>
<li><p>如果$C ( \cdots , x , y , \cdots ) = C ( \cdots , y , x , \cdots ) $,则称其为<strong>对称的</strong>.对称性等价于说$C ( v _1 , \cdots , v _n ) = C ( v _{ \sigma ( 1 )  } , \cdots , v _{ \sigma ( n )  } ) $.</p>
</li>
<li><p>如果说$C ( v _1 , \cdots , v _n ) = \mathrm { sgn  } ( \sigma ) C ( v _{ \sigma ( 1 )  } , \cdots , v _{ \sigma ( n )  } ) $,则称其为<strong>反对称的</strong>.</p>
</li>
<li><p>如果$C ( \cdots , x , x , \cdots ) = 0 $,则称其为<strong>交错的</strong>.</p>
</li>
</ol>
<p>当$\mathrm { char  } F \ne 2 $的时候,交错和反对称是等价的.不然,起码交错的一定是反对称的.下面定义:</p>
<ol>
<li><p>$I _{ Sym  } $为形如$x \otimes y - y \otimes x $的元素生成的理想.</p>
</li>
<li><p>$I _{ \wedge  } $为形如$x \otimes x $生成的理想.</p>
</li>
</ol>
<p>这样就可以定义相应的<strong>对称代数</strong>$Sym ( V ) = T ( V ) / I _{ Sym  } $,<strong>外代数</strong>$\bigwedge ( V ) = T ( V ) / I _\wedge $.还可以定义$Sym ^m ( V ) = V ^{ \otimes m  } / I _{ \mathrm { sym  }  } ^m $,同理定义$\bigwedge ^m ( V ) $,容易发现$Sym ^0 ( V ) = F = \bigwedge ^0 ( V ) , Sym ^1 ( V ) = V = \bigwedge ^1 ( V ) $.</p>
<p>在其中的$\otimes $运算被自然变成了新的运算,设前者仍是通常的乘法符号,而后者符号采取$\wedge $.</p>
<p>外代数里一个重要的性质是如果$\omega \in \bigwedge ^p ( V ) , \eta \in \bigwedge ^q ( V ) $,则$\omega \eta = ( - 1 ) ^{ pq  } \eta \omega $,原因是只需要假设$\omega = x _1 \wedge \cdots \wedge x _p , \eta = y _1 \wedge \cdots \wedge y _q $,其中$x _i , y _i \in V $,而外代数的定义已经给出$x \wedge y = - y \wedge x $,这就完事了.</p>
<p>既然我们可以将一个对称代数或者外代数分成若干层,那考虑对于任意线性映射$\psi : V \to W $,我们都可以通过在各个分量上诱导从而拿到:$Sym ( \psi ) : Sym ( V ) \to Sym ( W ) , x _1 \cdots x _m \mapsto \psi ( x _1 ) \cdots \psi ( x _m ) $,其中$\psi ( x _m ) $是限制在$V ^{ \otimes m  } $上的.这应该是平凡的.</p>
<p>最后我们想要说明对称代数与外代数确实对应着我们的多重线性映射.也就是$\mathrm { Hom  } ( Sym ^m , M ) $同构于所有的对称$m $重线性映射.外代数类似.而这些依照理想的定义的确如此.</p>
<p>接下来来展现二者的结构,不妨设$\dim V = n $,取其一组基$v _1 , \cdots v _n $,我们说:</p>
<ol>
<li><p>当$m &gt; n $的时候,$\bigwedge ^m ( V ) = \{ 0 \} $.</p>
</li>
<li><p>当$0 \leq m \leq n $的时候,$\dim \bigwedge ^m ( V ) = \binom { n  } { m  } $.更确切地说,任意一组下标$1 \leq i _1 &lt; \cdots &lt; i _m \leq n $,$v _{ i _1  } \wedge \cdots \wedge v _{ i _m  } $构成$\bigwedge ^m ( V ) $的基.</p>
</li>
<li><p>作为(2)的推论,$\dim \bigwedge ( V ) = 2 ^n $.</p>
</li>
</ol>
<p>(1)比较显然,因为当$m &gt; n $的时候,任何一个元素被生成的方式$v ‘ _{ 1  } \wedge \cdots \wedge v ‘ _{ m  } $一定线性相关,所以自然为$0 $.</p>
<p>接下来看(2),我们早在行列式的讨论处就证明过了当$m = n $的时候,交错形式是一维的,那当然导出$\dim ( \bigwedge ^n ( V ) ) = 1 $.而且若$\psi \in \mathrm { End  } ( V ) $,则当然有$\bigwedge ^n ( \psi ) = det ( \psi ) \mathrm { id  } _{ \wedge ^n ( V )  } $.</p>
<p>而由之前张量积的结论,$v _{ i _1  } \wedge \cdots \wedge v _{ i _m  } $这些元素肯定构成了一组生成元,只需要证明它们的确线性无关即可.只需证明:</p>
<script type="math/tex; mode=display">
\sum _{ 1 \leq j _1 < \cdots < j _m \leq n  } c _{ j _1 , \cdots , j _m  } ( v _{ j _1  } \wedge \cdots \wedge v _{ j _m  } ) = 0 \Rightarrow c _{ j _1 , \cdots , j _m  } \equiv 0</script><p>做法呼之欲出,取$V ‘ = \langle v _{ i _1 ,  } , \cdots , v _{ i _m  } \rangle $,定义$\psi : V \to V ‘ $,方法是$\psi ( v _j ) = \begin{cases}v _j &amp; j \in \{ i _1 , \cdots , i _m \} \ 0 &amp; \text { otherwise  } \end{cases} $.此时其诱导出了$\bigwedge ^m ( \psi ) : \bigwedge ^m ( V ) \to \bigwedge ^m ( V ‘ ) $.然后两边做映射.如果$\{ j _1 , \cdots , j _m \} \ne \{ i _1 , \cdots , i _m \} $那就会变成零,最后就会导出$c _{ i _1 , \cdots , i _m  } ( v _{ i _1  } \wedge \cdots \wedge v _{ i _m  } ) = 0 $,然而左边是在$\bigwedge ^m ( V ‘ ) $这个$\dim = 1 $的空间中,所以一定能导出$c _{ i _1 , \cdots , i _m  } = 0 $.</p>
<p>上述是外代数的结构,我们还可以刻画对称代数的结构,可以证明如果$\dim V = n $,取定$V $的基$v _1 , \cdots , v _n $,可以将$Sym ( V ) \cong F [ X _1 , \cdots , X _n ] $.其实就是二次型理论对吧,应该比较简单.</p>
<p>最后我们可以来定义交错矩阵:$A \in M _{ n \times n  } ( R ) $,若$a _{ i , j  } = - a _{ j , i  } $而且$a _{ i , i  } = 0 $.在$2 \in R ^\times $的交换环上,这等价于$A ^t = - A $.</p>
<p>可以证明当$A \in M _{ n \times n  } ( F ) $,对应了双线性形式$B \in \mathrm { Bil  } ( F ^n , F ^n ; F ) $为$B ( \vec { x  } , \vec { y  } ) = ( \vec { x  } ) ^t A \vec { y  } $.则$B $是交错形式当且仅当$A $是交错矩阵.必要性很显然,只需带入$a _{ i , j  } = ( \vec { e  } _i ) ^t A \vec { e  } _j = B ( \vec { e  } _i , \vec { e  } _j ) $;充分性也很显然,考察$B ( \vec { x  } , \vec { x  } ) = ( \vec { x  } ) ^t A \vec { x  } = 0 $即可.</p>
<p>最后来看特征多项式如何表为外代数形式.考虑$V $是域$F $上的$n $维向量空间,$T \in \mathrm { End  } ( V ) $,则我们断言:</p>
<script type="math/tex; mode=display">
\det ( \lambda I - T ) = \sum _{ k = 0  } ^n ( - 1 ) ^k \mathrm { Tr  } ( \bigwedge _k T ) \lambda ^{ n - k  }</script><p>我们之前已经解释过了:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det ( \lambda I - T ) e _1 \wedge \cdots \wedge e _n \\
& = ( \lambda I - T ) e _1 \wedge \cdots \wedge ( \lambda I - T ) e _n \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^k \lambda ^{ n - k  } \sum _{ | I | = k  } e _1 \wedge \cdots Te _{ i _1  } \cdots \wedge e _n 
\end{aligned}</script><p>也就是设只有$i _k \in I $这个指标集选到了$Te $而其它的还是$e $,不妨设$J = \{ 1 , \cdots , n \} \setminus I $.现在考虑$\{ e _{ i _1  } \wedge \cdots \wedge e _{ i _k  } \} _{ I  } $会构成$\bigwedge ^k ( V ) $的一组基,$T $施加到上面得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \bigwedge ^k T ) ( e _{ i _1  } \wedge \cdots \wedge e _{ i _k  } ) & = Te _{ i _1  } \wedge \cdots \wedge T e _{ i _k  } \\

\end{aligned}</script><p>对上面这个式子两边做$\wedge ( e _{ j _1  } \wedge \cdots \wedge e _{ j _{ n - k  }  } ) $,现在看右侧,如果$Te _{ i _1  } $变出了一些带有$e _{ j  } $的项,就会变成$0 $.因此右边最后剩下来的只会是形如$a _I ( e _{ i _1  } \wedge \cdots \wedge e _{ i _k  } ) \wedge ( e _{ j _1  } \wedge \cdots \wedge e _{ j _{ n - k  }  } ) $的东西.两边再换回去,得到:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\det ( \lambda I - T ) e _1 \wedge \cdots \wedge e _n \\
& = \sum _{ k = 0  } ^n ( - 1 ) ^k \lambda ^{ n - k  } \sum _{ | I | = k  } a _I 
\end{aligned}</script><p>而最后那个东西恰好是$\mathrm { Tr  } ( \bigwedge ^k T ) $.</p>
<h5><span id="另一种构造">另一种构造</span></h5><p>当$\mathrm { char  } ( F ) = 0 $的时候,我们可以脱离商空间的结构,而直接将对称代数与外代数定义在$T ( V ) $的子空间上.</p>
<p>对称代数与外代数(此时已经等价于反对称代数)都依赖于交换导出的结果,因此首要要做的就是让置换群$S _n $作用域$V ^{ \otimes n  } $,为了保证左作用,下面的设计可能略有一些不合理,但好在我们后面也不会涉及具体的运算.假设$\sigma \in S _n $,保持:</p>
<ol>
<li><p>$\sigma ( ax + by ) = a ( \sigma x ) + b ( \sigma y ) $.</p>
</li>
<li><p>$\sigma ( v _1 \otimes \cdots \otimes v _n ) = v _{ \sigma ^{ - 1  } ( 1 )  } \otimes \cdots \otimes v _{ \sigma ^{ - 1  } ( n )  } $.</p>
</li>
<li><p>$( \sigma \tau ) ( x ) = \sigma ( \tau x ) $.</p>
</li>
</ol>
<p>(2)的奇异设计是为了让(3)合理.这个时候你肯定要问:wcnmd,这个为啥不对啊.你别急,我们设$w _i = v _{ \tau _{ - 1  } ( i )  } $,则最后得到的结果是$w _{ \sigma ^{ - 1  } ( i )  } = w _{ \tau ^{ - 1  } \sigma ^{ - 1  } ( i )  } = w _{ ( \sigma \tau ) ^{ - 1  } ( i )  } $.</p>
<p>原因很简单,因为对于$v _i $这个东西,我们想要把它送到$v _{ \sigma ( i )  } $那里去,这样看就合理了.</p>
<p>现在我们着手取子空间,拿出$V _{ Sym  } ^{ \otimes n  } = \{ x \in V ^{ \otimes n  } | \forall \sigma \in S _n , \sigma x = x \} $以及$V _{ \wedge  } ^{ \otimes n  } = \{ x \in V ^{ \otimes n  } | \forall \sigma \in S _n , \sigma x = \mathrm { sgn  } ( \sigma ) x \} $.同理可以施加$\bigoplus _n $从而拿到$T ( V ) $的子空间$V _{ Sym  } $和$V _\wedge $.</p>
<p>回忆到我们之前定义过商映射$q _{ \mathrm { sym  }  } : T ( V ) \to Sym ( V ) $和$q _\wedge : T ( V ) \to \bigwedge ( V ) $.我们下面断言,如果$n ! \in F ^\times $(当$\mathrm { char  } F = 0 $的时候自动满足),则上述映射限制在子空间上变为同构$( V ^{ \otimes n  } ) _{ Sym  } \cong Sym ^n ( V ) $和$( V ^{ \otimes n  } ) _{ \wedge  } \cong \bigwedge ^n ( V ) $.</p>
<p>上述两条类似,我们下面只证明$Sym $的情形.定义映射$Avg \in \mathrm { End  } ( V ^{ \otimes n  } ) , x \mapsto \frac { 1  } { n !  } \sum _{ \sigma \in S _n  } \sigma x $.留神到$Avg | _{ V _{ \mathrm { sym  }  } ^{ \otimes n  }  } = id $,而$\mathrm { im  } ( Avg ) = V _{ \mathrm { sym  }  } ^{ \otimes n  } $.从而我们知道$Avg $事实上给出了一个$V ^{ \otimes n  } \to V _{ \mathrm { sym  }  } ^{ \otimes n  } $的映射,有同构$V ^{ \otimes n  } / \ker ( Avg ) \cong V _{ \mathrm { sym  }  } ^{ \otimes n  } $.</p>
<p>来考虑$q _{ \mathrm { sym  }  } ^n $限制在$V _{ \mathrm { sym  }  } ^{ \otimes n  } $上的结果,记作$\pi $.如果我们想证明$\pi $是满射,其实就是要证明$\ker Avg \subseteq \ker q _{ \mathrm { sym  }  } ^n $.可是$q _{ \mathrm { sym  }  } ^n $的定义保证了$q _{ \mathrm { sym  }  } ^n ( \sigma x ) = q _{ \mathrm { sym  }  } ^n ( x ) $,因此$q _{ \mathrm { sym  }  } ^n \circ Avg = q _{ \mathrm { sym  }  } ^n $,导出$\ker Avg \subseteq \ker q _{ \mathrm { sym  }  } ^n $.</p>
<p>要证明单射则只需要证明$V _{ Sym  } ^{ \otimes n  } \cap \ker q _{ \mathrm { sym  }  } ^n = \{ 0 \} $.我想这应该是显然的,假设它们的交不为$0 $,取出其中之一,由于其在$\ker q _{ \mathrm { sym  }  } ^n $中,所以它必然可以写成若干个$\cdots ( x \otimes y ) - ( y \otimes x ) \cdots $的组合,而这些都会在$Avg $作用下变成$0 $.从而我们证明了上述结论.</p>
<p>不过还没有完,我们想要刻画它的代数结构,还差一个乘法.</p>
<p>考虑取上述映射的逆映射,定义$p _\mathrm { sym  } ^n : Sym ^n ( V ) \cong V $,我们想要研究一下乘法,断言当$( a + b ) ! \in F ^\times $的时候,对所有$x \in ( V ^{ \otimes a  } ) _\mathrm { sym  } , y \in ( V ^{ \otimes b  } ) _\mathrm { sym  } $:</p>
<script type="math/tex; mode=display">
p _\mathrm { sym  } ^{ a + b  } ( q _\mathrm { sym  } ^{ a  } ( x ) q _\mathrm { sym  } ^{ b  } ( y ) ) = \frac { a ! b !  } { ( a + b ) !  } \sum _{ \sigma \in S _{ a + b  } / ( S _a \times S _b )  } \sigma ( x \otimes y )</script><p>对于$\bigwedge $有类似的版本,有:</p>
<script type="math/tex; mode=display">
p _{ \wedge  } ^{ a + b  } ( q _{ \wedge  } ^{ a  } ( x ) q _{ \wedge  } ^{ b  } ( y ) ) = \frac { a ! b !  } { ( a + b ) !  } \sum _{ \sigma \in S _{ a + b  } / ( S _a \times S _b )  } \mathrm { sgn  } ( \sigma ) \sigma ( x \wedge y )</script><p>考虑上述断言的证明,选取$\bigwedge $版本进行证明,首先应该有:</p>
<script type="math/tex; mode=display">
\begin{aligned}
q _{ \wedge  } ^{ a  } ( x ) q _{ \wedge  } ^{ b  } ( y ) & = q _{ \wedge  } ^{ ab  } ( x \wedge y ) \\
& = q _{ \wedge  } ^{ ab  } \left ( \frac { 1  } { ( a + b ) !  } \sum _{ \sigma \in S _{ a + b  }  } \mathrm { sgn  } ( \sigma ) \sigma ( x \wedge y ) \right ) 
\end{aligned}</script><p>考虑$\sigma ( x \wedge y ) $,其对于$( \tau , \eta ) \in S _a \times S _b $的时候,考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( \tau , \eta ) ( x \wedge y ) & = \tau ( x ) \wedge \eta ( y ) \\
& = \mathrm { sgn  } ( \tau ) \mathrm { sgn  } ( \eta ) x \wedge y \\
& = \mathrm { sgn  } ( ( \tau , \eta ) ) ( x \wedge y ) 
\end{aligned}</script><p>这就会和前面抵消.所以$S _a \times S _b $可以被商掉,这些元素的数量是$a ! b ! $个,从而我们确实知道了它的乘法结构.</p>
<p>至于$S _{ a + b  } / ( S _a \times S _b ) $,其实就是选出$a + b $中的$a $个元素扔到前面,把剩下的$b $个元素扔到后面,而且不在意它们的顺序.这就是为什么它的大小为$\binom { a + b  } { a  } $.</p>
<h5><span id="又看对偶空间">又看对偶空间</span></h5><p>假设$\dim V = n &lt; \infty $,$n ! \in F ^\times $.我们断言有以下典范(从左到右)同构成立:</p>
<ol>
<li><p>$\mathrm { Sym  } ^n ( V ^\vee ) \cong \mathrm { Sym  } ^n ( V ) ^\vee $.</p>
</li>
<li><p>${ \bigwedge  } ^n ( V ^\vee ) \cong { \bigwedge  } ^n ( V ) ^\vee $.</p>
</li>
</ol>
<p>原因是以下同构:</p>
<script type="math/tex; mode=display">
\xymatrix { ( V ^\vee ) ^{ \otimes n  } \ar [r ] ^{ \cong  } _{ \Psi  } & ( V ^{ \otimes n  } ) ^\vee \ar [r ] ^{ \cong  } _{ \Phi  } & \mathrm { Mul  } ( V , \cdots , V ; F ) \\
\lambda _1 \otimes \cdots \otimes \lambda _n \ar @{|->} [rr ] & & [ C ( x _1 , \cdots , x _n ) = \prod _{ i = 1  } ^n \langle \lambda _i , x _i \rangle ]  }</script><p>如果我们在左侧施加$\sigma $后,右侧会如何改变呢?当然是会变成$C ( x _{ \sigma ( 1 )  } , \cdots , x _{ \sigma ( n )  } ) $.如果左侧是$( V ^\vee ) ^{ \otimes n  } _\mathrm { sym  } $,那右侧就会对应到$\mathrm { Mul  } _\mathrm { sym  } ( V , \cdots , V ; F ) = ( V ^{ \otimes n  } ) ^\vee _\mathrm { sym  } $.</p>
<h6><span id="example1">Example1</span></h6><p>设$U , W $分别是$V $的$p $维子空间,$U $有基$x _1 , \cdots , x _p $,$V $有基$y _1 , \cdots , y _p $,求证:$U = V $当且仅当$x _1 \wedge \cdots \wedge x _p $和$y _1 \wedge \cdots \wedge y _p $成比例.</p>
<p>必要性显然,只需要把其中一组基用令一组基表示即可.</p>
<p>对于充分性,考虑反证,如果$U \ne W $,取$w \in U \setminus V $,两边对$\wedge w $操作.则$x _1 \wedge \cdots \wedge x _p $会变成$0 $可$y _1 \wedge \cdots \wedge y _p $不会,这就矛盾了.</p>
<h6><span id="example2">Example2</span></h6><p>对于$\omega \in \bigwedge ^p ( V ) \setminus \{ 0 \} $,我们定义如果存在$v _1 , \cdots , v _p \in V $,使得$\omega = v _1 \wedge \cdots , \wedge v _p $,则称$\omega $可<strong>分解</strong>.这当然是我们关注的一个重点,下面我们尝试去推导出关于可分解的部分结论.</p>
<p>设$\omega \in \bigwedge ^p ( V ) \setminus \{ 0 \} $,其中$p \leq n = \dim V $.</p>
<p>考虑如果$\omega \wedge v = 0 $,我们断言$\omega $一定可以写作$v \wedge \eta $的形式.策略是将$\{ v \} $扩展成一组基$e _1 = v , e _2 \cdots , e _n $.此时$\omega = \sum _{ | I | = p  } a _I e _{ i _1  } \wedge \cdots \wedge e _{ i _k  } $.如果$\omega \wedge v = 0 $,必然意味着如果$1 \notin I \Rightarrow a _I = 0 $.从而导出上述结论.</p>
<p>定义$\mathrm { ann  } ( \omega ) = \{ v \in V | \omega \wedge v = 0 \} $,容易发现这的确是$V $的一个子空间.以数学归纳的策略可以证明其$r = \dim \leq p $,策略是取其一组基$e _1 , \cdots , e _r $.必然有$\omega \wedge e _1 = 0 $,从而导出$\exists \eta \in \bigwedge ^{ p - 1  } ( V ) \setminus \{ 0 \} $,$\omega = e _1 \wedge \eta $.从而导出$e _1 \wedge e _2 \wedge \eta = 0 $.因为$e _1 \wedge \eta \ne 0 $并且$e _1 \wedge e _2 \ne 0 $,这意味着$e _2 \wedge \eta = 0 , \cdots e _n \wedge \eta = 0 $,从而可以数学归纳.</p>
<p>现在我们尝试断言:$\omega $可分解的充要条件是$\dim \mathrm { ann  } ( \omega ) = p $.</p>
<p>先来看必要性,如果$\omega = x _1 \wedge \cdots \wedge x _p $,因为$\omega \ne 0 $,所以$x _1 , \cdots , x _p $线性无关.显然$\langle x _1 , \cdots , x _p \rangle \subseteq \mathrm { ann  } ( \omega ) $,然而左侧维数是$p $,右侧维数$\leq p $.比较维数知道两边相等.</p>
<p>再看充分性,假设$\mathrm { ann  } ( \omega ) $的基是$e _1 , \cdots , e _r $,我们已经断言过存在$\eta \in \bigwedge ^{ p - r  } ( V ) $使得$\omega = t ( e _1 \wedge \cdots \wedge e _r \wedge \eta ) $,当$p = r $的时候得到$\omega $可分解.</p>
<p>还可以证明以下两个结论:</p>
<ol>
<li><p>所有的$\omega \in \bigwedge ^{ n - 1  } ( V ) $都是可分解的.</p>
</li>
<li><p>设$\mathrm { char  } ( F ) \ne 2 , n \geq 2 $,则$\omega \in \bigwedge ^2 ( V ) $可分解当且仅当$\omega \wedge \omega = 0 $.</p>
</li>
</ol>
<p>对于(1),考虑选取一组基$v _1 , \cdots , v _n $,则$\omega \wedge v = c ( v ) v _1 \wedge \cdots \wedge v _n $,其中$c : V \to F $显然是线性映射.既然如此,$\dim \ker c = n - 1 $,从而导出$\mathrm { ann  } ( \omega ) = \ker c $的维数也是$n - 1 $,这就搞定了.</p>
<p>对于(2),首先必要性显然.对于充分性,一个朴素的证明是基于归纳法的:</p>
<p>对$\dim V $的大小进行归纳,取一组基$e _1 , \cdots e _n $,令$V _1 = \langle e _2 , \cdots , e _n \rangle $则$\omega = e _1 \wedge v + \eta $的形式,其中$v \in V _1 , \eta \in \bigwedge ^2 ( V _1 ) $,根据归纳假设其可分解,设$\eta = x \wedge y $.</p>
<p>考虑:</p>
<script type="math/tex; mode=display">
\begin{aligned}
0 & = \omega \wedge \omega \\
0 & = ( e _1 \wedge v + x \wedge y ) \wedge ( e _1 \wedge v + x \wedge y ) \\
0 & = e _1 \wedge v \wedge x \wedge y \\
0 & = v \wedge x \wedge y \\

\end{aligned}</script><p>既然如此,说明$v , x , y $线性相关.如果$x = 0 $或者$y = 0 $当然就做完了,反之必有$v = ax + by $.那么:</p>
<script type="math/tex; mode=display">
\begin{aligned}
\omega & = e _1 \wedge ( ax + by ) + x \wedge y \\
& = ( x + be _1 ) \wedge ( y - ae _1 ) 
\end{aligned}</script><p>另一个策略是考虑$\bigwedge ^2 ( V ) \cong \mathrm { Bil  } ( V ^\vee , V ^\vee ; F ) $,而且右侧是反对称的.然而我们对辛形式早有研究,回忆到取基使得$B ( p _i , q _i ) = 1 $而当$i \ne j $的时候$B ( p _i , q _j ) = 0 $.用辛形式的分类得知存在一组基$u _1 , \cdots , u _r , v _1 , \cdots v _r $,其中$2 r \leq n $使得$\omega = \sum _{ i = 1  } ^r u _i \wedge v _i $.立刻见到$\omega \wedge \omega = 0 \Rightarrow r \in \{ 0 , 1 \} $.</p>
<h5><span id="简单应用">简单应用</span></h5><p>对于外代数来说,其最显然的应用是考虑$V = \mathbb { R  } ^3 $的情形,此时$\bigwedge ^2 ( V ) $有$\vec { e  } _1 \wedge \vec { e  } _2 , \vec { e  } _1 \wedge \vec { e  } _3 , \vec { e  } _2 \wedge \vec { e  } _3 $三个基,并且:</p>
<script type="math/tex; mode=display">
\begin{aligned}
( x \vec { e  } _1 + y \vec { e  } _2 + z \vec { e  } _3 ) \wedge ( x ' \vec { e  } _1 + y ' \vec { e  } _2 + z ' \vec { e  } _3 ) \\
& = ( xy ' - x ' y ) ( \vec { e  } _1 \wedge \vec { e  } _2 ) + ( yz ' - y ' z ) ( \vec { e  } _2 \wedge \vec { e  } _3 ) + ( zx ' - z ' x ) ( \vec { e  } _3 \wedge \vec { e  } _1 ) 
\end{aligned}</script><p>这其实就是叉积对吧.</p>
<h4><span id="域的变换">域的变换</span></h4><p>对于域$F \subseteq E $,如果我们有一个定义在$F $上的向量空间$V $,我们想要一种策略将其典范地推广到$E $上的向量空间$V _E $.</p>
<p>将$E $视作一个$F $向量空间.乘法映射$E \times E \to E $当然是双线性映射,从而诱导出$E \otimes E \to E , x \otimes y \mapsto xy $的映射.</p>
<p>考虑一个$F $向量空间$V $,考虑下述线性映射:</p>
<script type="math/tex; mode=display">
\begin{gathered}
E \times ( E \otimes _F V ) \to E \otimes _F ( E \otimes _F V ) \cong ( E \otimes _F E ) \otimes _F V \to E \otimes _F V \\
( x , y \otimes _F v ) \mapsto x \otimes _F ( y \otimes v ) \mapsto ( x \otimes _F y ) \otimes _F v \mapsto ( xy ) \otimes _F v 
\end{gathered}</script><p>于是$E \otimes _F V $成为了一个$E $线性空间.</p>
<p>另一个重要的是检验如果$V , W $都是$F $向量空间,则上述拓展后$\mathrm { Hom  } ( V _E , W _E ) $亦然构成$E $向量空间.而且我们还要检验如果原本的$f : V \cong W $,则$f _E : V _E \cong W _E $.</p>
<p>取$V $的一组基$\{ v _i \} _{ i \in I  } $,则:</p>
<script type="math/tex; mode=display">
V _E = E \otimes _F ( \bigoplus _{ i \in I  } F v _i ) \cong \bigoplus _{ i \in I  } ( E \otimes _F F ) \cong E ^{ \oplus I  }</script><p>从而我们知道$V _E $有一组基:$\{ \tilde { v  } _i = 1 _E \otimes v _i \} _{ i \in I  } $,推论是$\dim _F V = \dim _E V _E $.</p>
<p>接下来将$\mathrm { Hom  } _F ( F ^n , F ^m ) $等同于矩阵$A \in M _{ m \times n  } ( F ) $,我们下面验证$A _E = 1 _E \otimes A $.只需发现:</p>
<script type="math/tex; mode=display">
\begin{aligned}
A _E ( \tilde { e  } _i ) & = ( 1 _E \otimes A ) ( 1 _E \otimes e _i ) \\
& = 1 _E \otimes ( Ae _i ) \\
& = 1 _e \otimes ( \sum _{ k = 1  } ^n a _{ k , i  } e _k ) \\
& = \sum _{ k = 1  } ^n a _{ k , i  } ( 1 _E \otimes e _k ) \\
& = \sum _{ k = 1  } ^n a _{ k , i  } \tilde { e _k  } 
\end{aligned}</script><p>考虑$i : V \to V _E , v \mapsto 1 _E \otimes v $可以作为一个$F $线性映射,方法是将$V _E $限制成一个$F $向量空间.这显然是一个单射.</p>
<p>下面假设$V $是一个$F $向量空间,$\tilde { V  } $是一个$E $向量空间,则我们下面来证明最后的结论:</p>
<script type="math/tex; mode=display">
\begin{gathered}
\mathrm { Hom  } _E ( V _E , \tilde { V  } ) \cong \mathrm { Hom  } _F ( V , \tilde { V  } ) \\
\tilde { f  } \mapsto \tilde { f  } \circ i 
\end{gathered}</script><p>先证明这的确是一个单射,考虑:</p>
<script type="math/tex; mode=display">
\tilde { f  } ( t \otimes v ) = \tilde { f  } ( t \cdot i ( v ) ) = t \cdot ( \tilde { f  } \circ i ) ( v )</script><p>由于$i $是一个单射,所以这里如果非单,则存在两个$\tilde { f  } _1 , \tilde { f _2  } $满足$\forall v $,$( \tilde { f  } _1 \circ i ) ( v ) = ( \tilde { f  } _2 \circ i ) ( v ) $,必然导出$\forall t \otimes v , \tilde { f  } _1 ( t \otimes v ) = \tilde { f  } _2 ( t \otimes v ) $.</p>
<p>接下来考虑其满射,对于$f \in \mathrm { Hom  } _F ( V , \tilde { V  } ) $,考虑$E \times V \to \tilde { V  } , ( t , v ) \mapsto t f ( v ) $当然是一个$F $上的双线性映射,其对应了一个$\tilde { f  } : E \otimes _F V \to \tilde { V  } , t \otimes v \mapsto tf ( v ) $.这就论证了满性.</p>
<p>好吧,我们上面论证的一切都太过无趣,但请来总结,我们实际上是想要这么做:假设我有$F $上的向量空间$V $,$E $上的向量空间$\tilde { V  } $以及它们之间的$F $线性映射$f $.关于这个$f $的看法,如果我们将$\tilde { V  } $拉到$F $上当然是可以的对吧,那能不能将$V $升上$E $呢?我们想要一个资料$( \tilde { V  } _{ \mathrm { univ  }  } , f _{ \mathrm { univ  }  } ) $使得下述图表交换:</p>
<script type="math/tex; mode=display">
\xymatrix { V \ar [r ] ^{ f _{ \mathrm { univ  }  }  } \ar [rd ] _{ f  } & \tilde { V  } _{ \mathrm { univ  }  } \ar [d ] ^{ \tilde { f  }  } \\
& \tilde { V  }  }</script><p>我们上面所证明的就是这个资料$( \tilde { V  } _{ \mathrm { univ  }  } , f _{ \mathrm { univ  }  } ) $可以取作$( E \otimes _F V , i ) $.</p>
]]></content>
      <categories>
        <category>大学课程</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>我多想说再见啊</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E6%88%91%E5%A4%9A%E6%83%B3%E8%AF%B4%E5%86%8D%E8%A7%81%E5%95%8A/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<blockquote>
<p>试着掬一把星辰在手心</p>
<p>却遮住迷恋遥远的眼睛</p>
<p>窗外传来记忆的声音</p>
<p>在半夜迷失，在房间消失</p>
<p>去幻想着夜晚之前的一种逃离</p>
<p>——柯立可《我多想说再见啊》</p>
</blockquote>
<hr>
<blockquote>
<p>那时我突然开始想，为什么要这么拼呢？说到底，对北大的执念可能是一部分，另一部分，可能是一种复杂而扭曲的情绪。我一直抵触将自己标榜为一个过于注重功利的人，一直试图掩饰自己过强的好胜心，但我的内心是极其争强的。我见过的几乎所有的老师都有一种固有的观念，那就是成功者不聪明，失败者不努力。每次有什么讲座或者所谓优生交流之类的事情，都会有老师在上面说诸如谁谁谁并不如你们聪明，谁谁谁是我见过最聪明的学生此类话。我印象很深的是刚开学的时候竞赛生训话，说到我时说我是所有人中最聪明的，但可能会成为最后的“无冕之王”。当我真正取得成绩后，我又成为了所有人中最努力的，最“听老师话的”，其他人代替了我的位置成为了这个老师口中的“最聪明但存在问题”的学生。没人会喜欢平凡的人的故事，人们称赞成功者，惋惜失败者，并试图从他们身上找到一些经验教训，为此他们不惜强说因果，因为没人会选择去从那些玄而又玄的命运或者天赋中汲取经验。</p>
<p>而我听过了太多的反面教材，于是也害怕自己成为别人口中的反面教材。</p>
<p>所以也许我一直都在怕，一直怕别人对我的评价，怕别人说我如此聪明却又不努力，怕别人说我因为一时的恋爱而影响了一辈子，怕别人说我钻研难题而导致基础知识失误。尤其是那些我在意的人。</p>
<p>——《离弦》（写于2023.08.13）</p>
<p>我们上个周的作文题是要对这样一句话引出议论：“人生的路程就是这样，用大把的时间迷茫，在几个瞬间成长。”</p>
<p>我写作文的时候对这句话嗤之以鼻，我认为你“迷茫”的时候，也同时是你“成长”的时候。而最终完美的“成长”是不存在的，从生下来的第一天，到死亡的前一天，哪一个瞬间不是在成长呢？</p>
<p>话是这么说，我怕是以前心中却不是这么想的。我经常喊“自己与过去切割了”。逐渐地，我切割的时间点离我越来越近，昨天做的事，道歉之后，今天就切割。我现在觉得，也许这样对也不对，切割意味着你从过去学到了什么而成长了，但切割也意味着你无法接受自己的过去。但过去的事情总在过去，未来的事情总在到来。</p>
<p>我想明天的我大概也与今天的我不一样。</p>
<p>我希望每天的我都在向着那个心目中理想的人前进。</p>
<p>——《枷》（写于2023.09.21）</p>
</blockquote>
<hr>
<p>大学报到也有一段时间了，在校园里待的这几天竟然无比适应，既没有在高中的那种被支配全部生活的禁锢，也没有假期在家里那种一天天无所事事的颓废。总之我愿意说——我希望过几个月、过几年后的我看到这句话不要哑然失笑——我现在真的开始向往着无限可能的未来。</p>
<p>关于我高中的回忆录是我一直想写却写不出的东西。我甚至想过要不要采取另一种荒诞的写法，于是拉来了一大堆人陪我攥写《烟台二中俗世奇人》。当然这个企划最后以一篇稿子都没结稿的蛇头蛇尾的成绩收场了。但我总之真的想写点东西，回忆回忆过去、嘲笑嘲笑校领导、称赞称赞老师、分享分享自己的经验（如果有的话）、以及写写她。</p>
<p>在我写到这段话的前不久我刚刚和高中的几个关系还好的朋友一起出去玩了一趟，当时我们在奶茶店等着奶茶，等着等着我突然说了一句：“欸原来我高考完都一个月多了。”其实你现在要让我回忆高三的生活，我几乎都无法理解当时的自己。为什么我如此脆弱又如此顽强，为什么我真的做到了这一切呢？</p>
<p>但即使从最功利的角度来讲，高三让我上到了理想的大学，让我认识了一些关系很好的朋友，甚至说它还让我有了足够的悲叹的苦难作为创作的源泉。我初中的时候很喜欢一句话，后来我才知道这句话出自陀思妥耶夫斯基，这句话是这么说的：“我担心的事情只有一件：就是我配不上自己经历过的苦难。”直到如今我仍然对这句话感触颇深。我不愿意歌颂苦难本身，但我愿意花大篇幅歌颂经历着苦难的人。我高一的时候有一段失败的恋爱经历，但我后来甚至逐渐对此产生了感激之情——我在经历过那样的痛苦后，竟然反而能因此而读懂不少曾经看不懂的诗歌。</p>
<p>所以我其实还是想要动笔。当然这篇写出来估计要写不少私密性的故事，也要写不少攻击力极强的故事（笑），希望我别被突然询问其中不愿意提起的私密细节，也别被一个电话打过来强制我删稿。</p>
<p><strong>注意：本篇虽然以第一人称写成，但完全是虚构小说，发生背景在一座叫做“亚特尔泽”的学校，和现实无关。如有雷同，纯属巧合！！！！！</strong></p>
<p><strong>注意：本篇虽然以第一人称写成，但完全是虚构小说，发生背景在一座叫做“亚特尔泽”的学校，和现实无关。如有雷同，纯属巧合！！！！！</strong></p>
<p><strong>注意：本篇虽然以第一人称写成，但完全是虚构小说，发生背景在一座叫做“亚特尔泽”的学校，和现实无关。如有雷同，纯属巧合！！！！！</strong></p>
<hr>
<p>我觉得我高三可能被分成了差不多两个部分，分界线大概是《逃》创作的时间左右。第一个部分的主要矛盾是我与腐朽的规章制度之间的冲突，第二个部分的主要矛盾则是我日益增长的美好生活需要和我个人极端性格之间的矛盾。</p>
<p>当然，即使这么说，我对亚特尔泽也仍然是有感情的。这份感情主要来自于我的老师们，我对我高中遇到的教过我的每一个老师都给予极高的评价，我认为他们无论是从师德还是从能力来讲都无比顶尖。其中有一些老师我更是几乎视为人生导师一样的人物。比如高考前几天我情绪崩溃的时候，我的生物、化学、英语、数学老师轮番上阵给我做心理辅导，甚至隔壁班的班主任也来找我聊天，而且这种聊天甚至都没太有身份，我完全在把老师当成哥们在那里聊天。我这么说你可能没太理解我在说啥，我就这么说吧，我们聊天的内容大概分为以下几个部分：首先我发泄一顿高考前的压力；然后老师半开玩笑吐槽我已经很牛逼了就别在这凡尔赛了；然后开始给我讲他们过去教过的很多学生，有一些是很成功很成功的，也有一些是高考没那么成功，但最后总是在发光发热的学生；再之后开始数我比较好的地方，顺便说几个我不好的地方（比如我性格很极端）；然后开始闲聊，我开始问他们上了大学怎么找女朋友，不同老师给出了不同的建议，比如化学老师建议我大一适应一年大二找学妹、英语老师给我讲了点追女生的技巧、隔壁班班主任直接说我高考后看上哪个了她去给我说媒、生物老师更是直接跟我约定高考后给我找个女朋友；最后甚至还会扯一点家常话题。</p>
<p>还有一些很感人的小细节，比如说年级主任经常和我聊很多话题聊到很晚，我的班主任高考前送了我一个刻着“一举夺魁”的木质手链，我的化学老师几乎每场都出现在红毯边上和我击掌，生物老师高考后还经常和我聊家常（内含不少感情问题）。总之我在亚特尔泽这里体会到了相当多的<strong>来自一线教师</strong>的人文关怀。</p>
<p>不过我当然要在这篇文章里大肆夸赞学校的规章制度，如果不写这段我估计可能很多人也懒得看我碎碎念。我前段时间发了个动态是这么说的：</p>
<blockquote>
<p>亚特尔泽学生应该报考猪大的五个理由：</p>
<ol>
<li>食堂的蛋挞是温的</li>
<li>洗手间有无限量的洗手液</li>
<li>椅子上可以随便放东西，地上也可以</li>
<li>有什么东西坏了最多第二天就会有人来修</li>
<li>椅子是完整的</li>
</ol>
</blockquote>
<p>我觉得可能有的校领导看到这段话估计要破防，但我对自己的幽默感自鸣得意。亚特尔泽有很多传奇性的故事，<del>比如我至今为止都没见到第二个中学出现老师和学生联合起来的奇观</del>，其中甚至包含了大量不能碰的滑梯，不过即使是我日常中碰到的小细节也足够让我在这里狠狠发泄一波了。</p>
<p>比如几乎已经成为我知名脱口秀包袱的若干条规章制度，例如椅子上不让放衣服，椅子上不让放书包（地上也不让），水杯不让带到教室里（要在教室外面排排站摆成一排），原则上不推荐学生背双肩包（升旗时多次强调），听说还尝试推行过桌子上不让放笔袋（传言，不知真假，如果是假的我立刻删除并发表《我的忏悔》）。至于什么垃圾桶里不让有垃圾，这个我们倒是没有，因为我们不搞那些形式主义的东西，我们的宿舍和教室里压根没垃圾桶（乐）。至于宿舍里的被子是摆设，这个纯属尬黑，它放在那上面还会占大家睡觉的地方呢，根本就不是摆设。退一步讲，亚特尔泽也曾经试图消灭学生中的形式主义，比如强制要求“叠被神器”无法加分。但后来发现收效甚微，所以又改回来了。</p>
<p>至于亚特尔泽最为人津津乐道的，当然是其认为对学生提高成绩极其重要的三板斧：培优、讲座和班会。</p>
<p>其实关于这个培优我想吐槽的也挺多。但防止有人说我成绩好就高高在上，所以我还是不说话比较安全。</p>
<p>至于这个讲座可以说的就很多了。首先要声明啊，这个讲座办了十几场，肯定是有特别好的讲座的。比如曾经请过一位王老师来给大家讲语文讲座，这也是我唯一一场一点都没摸鱼，甚至有点想哭地听完了整场讲座。讲座拖了一会导致晚放学了，外面甚至还下着大雨。但大家几乎没有人抱怨，甚至连平时最推崇应试教育的那几位优等学生也没有吐槽过一句。反而正是因为外面有雨声，使得里面的讲座格外动人。</p>
<p>写到这我又按捺不住想多写写和这个讲座有关的事。理论上来说，这个讲座应该给我们讲如何写作文，但其实他真正在讲的远远不止作文。</p>
<p>王老师来了后首先给大家讲了一个故事，说他曾经有个文笔特别好的学生（发表了好像是十几篇文章？我记不清数字了），有一次拿了篇作文过来给他看，他一看怎么才$41 $分。仔细一看，认为是这位学生没有开门见山亮明观点，导致阅卷老师错误评估。然后他就劝这位学生说，人在屋檐下不得不低头，低头过去了，后面大片的广阔天地等着你去发展呢。他说这位学生当时用一种近乎悲悯的表情看着他，说王老师你不懂，我是有自己风格的人。</p>
<p>这个故事对我感触颇深，它和我的生物老师LL老师后来某次对我的劝导一起成为了我高中总结的最大的人生经验之一——如果你认为一个事情从任何角度来说都完全不合理，但你又完全没有办法反抗它，你不妨将它视作你人生中逃无可逃也没有原因的一次苦难。我后来某一次给学弟作报告也是这么说的：高三只有一年，再阴暗再苦难也只有一年，撑下来、熬过去。</p>
<p>王老师还讲了些别的，有一些很符合我的文学观点，比如说努力去写一些干净的句子（我忘了他举的那个例子是啥了，可能是这句：“在那个下着雪的冬天，李老师来到了我们的班上。”），还有去写一些冲击力很强的句子（他举了个例子是他让他们班学生写《祝福》读后感的时候，其他同学的第一段全是什么“鲁迅先生生平概括，《祝福》创作背景”，只有一个同学第一段只写了一句话：“太不公平了！”）；还有一些对我产生了很深的影响，比如说他建议少与人交流自己的作品（他举了个例子是如果让你想象一个场景：“最后一堂音乐课，当老师宣布下课的时候，同学们突然起立鼓掌，然后一起合唱了一首歌。”如果不与别人交流，只是在脑中想象，那每个人想象的场景的刻画，班级座位的排布，甚至有几个同学的面孔，以及唱的那首歌到底是什么都是不同的。但如果真交流起来就会趋于同质化）。</p>
<p>还有一些他自己的人生哲学。比如有一句印象特别深的话是：“当你们过个几十年再回忆起自己的高中，也许还包括王老师给你们的这个讲座，可能会有很多不一样的体会。比如你后来带着孙子走在街上，突然发现一个看上去很普通的老太太是你的高中同学。你可能会跟你的孙子这么说：‘看到那个老太太了么，她以前写的诗都美死人呢。’”当然原句我已经记不清了，这个句子是我背在这里的，我毫不怀疑自己的背诵误差导致这句话失去了太多原有的感人的遣词，但原句真的让我当时悚然一颤。</p>
<p>我至今仍然对这位老师，或者说这位长者心怀敬意。</p>
<p>好像说着说着跑题了，那么其它的讲座是不是像这场一样这么好呢？</p>
<p>当然不是，比如请了衡水中学的老师来讲了两次，我印象特别深的是其中一位老师把一位同学当成正面典型来给大家介绍，说这位同学有两个理论：一个叫做光宗耀祖理论，简单来说就是他认为自己的姓氏非常稀少，认为自己应该扛起家族振兴的使命；另一个我忘了叫啥了，好像叫做分流理论么，简单来说就是这位同学觉得自己从小到大跨越了许多阶层，小时候很多玩伴已经远远到达不了自己的等级了，以后他也要尽力地去冲向最高等级，而不是被分流。</p>
<p>我当时立即对这俩理论嗤之以鼻，并且难得地写了一篇议论文发在空间里对这位同学这位老师这个学校大肆批判。我觉得这完全就是社达主义下放到高中教育阶段的活生生的例子。我也给这俩理论起了俩别的名字，一个叫做“过度繁殖理论”，另一个叫作“自然选择理论”。</p>
<p>还请了个xx师范大学的教授来作了个讲座，这个讲座连我们班主任也绷不住了，回来跟我们大喷这个教授就是个骗子。这个教授也有很多抽象的言论，比如认为“高考范文”全是垃圾，这个我小部分认同；还有认为高中语文老师绝绝大部分都是垃圾，这个我当时真没绷住。</p>
<p>其他的基本就是浪费时间的讲座了，连让我喷的资格都没有。</p>
<p>值得一提的是后来还发明了学生讲座，简单来说就是每天晚三找个学生去年级广播给大家灌鸡汤，后来有个牛逼老哥在灌鸡汤的时候脏话频出，遂取消。</p>
<p>至于这个班会，由于我几乎班会全程都在摸鱼，倒是没什么可说的。</p>
<p>当然啊，虽然我们这是一篇架空世界虚构文章，但是卡夫卡曾经说过：“越是虚构的故事，细节处越要真实。”所以我们也可以提很多真实的小细节，用来揭露不能碰的滑梯的一角。</p>
<p>比如当我高考完回校的时候，遇到门口有两个穿得人模狗样的校领导（估计也不是什么很大的官，因为我甚至没见过）在背着手巡视，突然经过了一个遗落在地上的篮球，校领导当时就在这个篮球不到三步远的距离，然后他伸手招呼来了几十米开外的保安，让他来把这个篮球捡起来了。</p>
<p>还有高三的时候突然宣称要“开源节流”然后不让老师给同学印答案了，引起了所有人的一致质疑，后来好像是取消了。</p>
<p>至于什么校领导来听课结果听课本上写了几段字就开始玩手机（甚至在教室外面高分贝打电话）、高考前两个周高三厕所水龙头坏了一直拖到高考都没修、任课老师在课上吐槽校领导不会教书瞎指挥这些事情更是老生常谈，蓝的盆。</p>
<hr>
<p>我们亚特尔泽还有一对“双子星”，俩人为亚特尔泽的风评一起做出了突出贡献。</p>
<p>一位老师，我们不妨称其为花沫兮老师，被我们称作压在学生身上的三座大山（其实不止三座）之一。这位老师以一名一线教师的身份（甚至都没教过我），跻身进我专门为校领导著书立专的故事中，可见他的传奇性。首先我不得不在这里高度赞扬花老师的教学水平，不仅在课上错误频出，还经常自信地认为自己的方法比学生的方法简单。当然作为一名老师来说，这点小事根本瑕不掩瑜。花老师是一位坚定的进步主义者、禁步主义者、紧捕主义者。比如原本我们学校的早读时间仅仅是$6 : 25 $，这个时间不仅一点都不吉利，更是体现不出我们学校制度的优越性和进步性。王安石曾经说过：“度义而后动，是而不见可悔故也。”于是花老师秉持着“苦一苦学生，骂名班主任来背”的想法，敢冒天下之大不韪，毅然决然将早读时间提前到了$6 : 20 $。这一举动立即得到了领导的赏识，从而引起了对其他保守而不愿改革的班主任的思想教育，并且逼迫他们去对学生进行同样的思想教育。这一举动自然引起了部分不理解领导苦心的学生们的无耻辱骂，人们不感谢花老师，花老师如同一位悲剧英雄一般百遭辱骂，令人不禁潸然泪下。但花老师以为，“至于怨诽之多，则固前知其如此也。人习于苟且非一日。”因此，人们的反对没有阻碍其进步的脚步，其更是进一步将他自己的班级的早读时间提前到了$6 : 18 $。而且还觉得不够进步，将早饭时间从$30 $分钟缩短到了$23 $分钟，将午饭晚饭时间从$30 $分钟缩短到了$25 $分钟。说到这里连我都感动地热泪涟涟，这些正确无比的决定甚至只能在他自己的班级实行，而不被广大的群众所接受，如此正确的政策竟然被同学们自己拒绝了。在我心中，花老师的形象更是如同乾隆帝一般伟大。甚至于花老师的班级在级部中也享有盛誉，当其他班级的同学看到他们班的学生来回奔波在教学楼和食堂之间、挥洒着青春的气息的时候，无不鼓掌脱帽致敬。</p>
<p>花老师对他的学生们更是展现了父亲一样的关爱，包括但不限于：翻学生书包以文明其精神、在临冬（还没下雪）的时候要求大课间出去溜达的同学在门外站着（最后自然是感冒了）以野蛮其体魄。</p>
<p>另一位老师，我们不妨称其为舒昂建莎老师。舒老师几乎可以称得上是亚特尔泽的标志性人物，之前我们提到的若干条规章制度几乎全是他一手操办的，可谓亚特尔泽真正的九千岁。我在这里引用一个故事来给大家展现舒老师的传奇性：</p>
<blockquote>
<p>在亚特兰大地区大会上，领导强调：有的同学在双肩包里放课外书，老师们应该加强管理。<br>亚特原泽的同学们懵了，他们不知道什么是课外书。<br>亚特撒泽的同学们懵了，他们不知道什么是老师。<br>亚特尔泽的同学们懵了，他们不知道什么是双肩包。</p>
</blockquote>
<p>舒老师的身影无处不在，作为亚特尔泽的九千岁，他如同一个幽灵一般徘徊在学生身旁。他和花老师如同亚特尔泽的萧何和韩信一般，为亚特尔泽的长足发展做出了卓越的贡献。</p>
<hr>
<p>然后可能无法避免要谈到的一个事是“献给蔷薇系列”的创作。</p>
<p><del>不过笔者写到这里已经很晚了，中午发烧了而且明天要早起，所以先中断一下，有时间再补。</del></p>
<p>“蔷薇系列”的创作背景正是上面以一种很欢乐的方式讲的传奇故事。我现在讲起来很乐，大家听起来也很乐，但在当时对我来说实在是乐不起来。我首先就无法理解这些逼规则，对大家的学习助力完全是负的（虽然其实从各种角度来说都促进了班级同学的团结，甚至是同学和老师的团结），所以从开学我就跳反了，装上诸葛连弩，给所有校领导套上铁索连环就开始扔酒火杀。结果自然是被约谈了无数次。这个时候我才明白了这些规则得以推行的背后原理：如果你遵守这些规则对你的学习帮助可能是负一，你不遵守这些规则可能对你的学习帮助可能是正一，这样学生们自然不会遵守规则，校领导怎么能满意呢！所以他们就有了一个天才般的想法，那就是只要你不遵守规则，就通过不断约谈的方式给你施加一个负十的惩罚值，这样遵守规则就是最优解了。我们班的想法更天才，那就是分小组后采用量化连坐制度，彻底堵死有些人决心反抗到底的最后意愿。</p>
<p>还有一个背景是，我也许始终没有从高一的失败感情经历中走出来。这导致我几乎无法和其他同学正常交流，努力将自己封闭起来。我在这个过程中的思考后来写成了《白鸟》这篇小说。</p>
<p>在这几个背景下，小说《谶》就此诞生。</p>
<blockquote>
<p>那仅仅一句话就彻底改变了我所有的生活习惯，将我生命中所有的亮色夺走。我想要反抗这一切，反抗这个世界强加给我的一切，反抗这生命，以及这生命强加给我的一切。我被无缘无故抛到了这个世界上，从生下来就被迫被社会所塑形。他们先是给我讲这个或那个圣人，然后讲这个或那个圣徒，最后讲这个或那个死刑犯，以此击破我妄图在世界中保持自我的私心。他们逼迫我沦落为常人，逼迫我脱离自己的存在，逼迫我混入世界之中被他们物化，原因只是因为他们认为这样做是对的，先前所有人都是这样做的。他们不会在意你的做法有没有道理，再正确的做法也可以挑出二十个缺点。他们忽略你自身的独特，用一个个更加偶然的例子来激励你，然后对那些不符合他们思考的例子则视之为“幸运”的特例，然后置之不理。</p>
<p>——《谶》（写于2023.11.13）</p>
</blockquote>
<p>虽然小说中的主角从此破除了枷锁，但现实中的人没有。我在写完小说后虽然一直以小说主角为偶像，但其实到最终也没做到那样。原因很简单：我只是一个人。</p>
<p>的确，几乎所有的学生都痛恨这样的制度，但我怎么能像小说中的“言”一样找到那个属于她的“贺”呢？我完全没有任何援助，只能眼睁睁看着自己原定的计划被一次又一次约谈打破。</p>
<p>那段时间晚上回家之后基本就是躺在床上躺尸，因为我太累了、太累了，我那段时间经常躺在床上，一边痛恨自己的颓废一边又没有意志力能支撑我爬起来完成自己的目标，脑子里经常回绕的是海子的那句诗“面对大河我无限惭愧，我年华虚度，空有一身疲惫。”但同时我又深深沉溺于这种痛苦所带来的副作用，我在反抗中感受到了自己在朝着自己的理想的模样前进并为此深深自豪。这种生活提供了《逃》《眼》《刺杀》的背景。</p>
<blockquote>
<p>我喜欢幻想自己的未来，也喜欢回忆自己的过去。</p>
<p>我当然这样是不对的，我在逃避现实，可我能怎么样呢？</p>
<p>我那天嘲笑自己，觉得自己幻想过的未来好像一个都未曾来过。所有的重要的事都在意料之外。</p>
<p>我还嘲笑自己，自己回忆过的过去，幸福的美好的记忆我回不去，痛苦的悲惨的记忆我改不了。</p>
<p>我有的时候觉得自己的未来一片光明，阳光太过迷幻。</p>
<p>可有的时候又觉得毫无希望，不如死了算了。</p>
<p>我很羡慕高一的我，意气风发，自命不凡，觉得只要自己足够努力，只要自己的感情足够真挚，自己什么都可以做到。觉得自己一定在走向幸福。</p>
<p>现在的我却是瞻前顾后，考虑一切现实的因素。</p>
<p>——《你有想去的地方吗》（写于2024.06.01）</p>
</blockquote>
<p>我真正没有想到的是，在这种情况下，竟然会出现一个女孩。</p>
<p>我后来想到这个事的时候有的时候都觉得是神迹，像是老天爷为了救我而降下的神恩。但这么说其实非常高高在上，搞得自己像是天命之选，并且模糊了她自己的独立人格，很不公平。</p>
<p>具体细节我还是不讲了吧，你可以想象在这种情况下的我，甚至已经打算几乎断绝自己和别人的社交的时候，突然遇到一个很温柔主动帮助我的女生，这对我来说还是一个挺大的奇迹的（笑）。当我在一个如此阴暗潮湿的环境下，甚至班里同学大概只能认识三分之一，能和个位数同学聊上天的前提下，突然有了这么一个人。即使我一开始没有动容，后来每次跑操或者什么别的活动看到她了，一想，哦，她是那个对我很温柔的女生；当自己哪天非常绝望的时候，一想（虽然感觉是郭楠幻想）也许还有一个人愿意对我好，这种日积月累的情感是很恐怖的。</p>
<p>最终我干了一件很不理性的事，我为她写了一篇小说《逃》。</p>
<blockquote>
<p>可能很多人都觉得我执念太深，其实我自己也是这么认为的。在经历过种种后，这执念本身甚至加上了许多理性的束缚。我觉得自己一直都是一个追求幸福的人，哪种选择可能走向幸福，我就去走哪条路。但真正选到死路之后，我才发现原来世界没有那么简单，不是真的，只要有理想和爱，就什么都可以做到。</p>
<p>起码，我改变不了别人。我做不到让一个不爱我的人爱我，做不到让不理解我的人理解我，做不到改变顽固不灵的人的想法——或者我自己也是一个顽固不灵的人。我也不可能，不可能像所有童话故事一样，等到救赎自己的精灵，等到一股强大的外力将我现在的所有囚笼击破，等到一位天使将我救赎。</p>
<p>……</p>
<p>我有的时候自嘲，说自己每次想要改变的时候，可悲的事情就会一件接着一件纷至沓来，仿佛是命运逼迫我成为行尸走肉一样。</p>
<p>好像总有人在充当命运的刽子手，一刀一刀将我活剐成一具骷髅。</p>
<p>我有的时候甚至以为，救赎是一个标志，是命运终于允许我拥抱幸福的标志。只有有了这种允许，我才能抬起头来生活，将自己从无尽的悲哀中拽起来，看看太阳。</p>
<p>这个标志是什么呢？也许是一次巨大的成功，是时来运转的惊喜，是一个爱着你的人，无微不至体贴你的所有。</p>
<p>但后来我明白了，原来救赎其实是，你坠到沼泽中，全身都被脏泥淹没的时候，好像听见有人在叫你。你突然睁开眼睛，看了看太阳。</p>
<p>原来太阳是那么耀眼，原来周围的叶子也可以反射太阳的光，原来空气中的尘埃都在光影中浮动着，绽开着。</p>
<p>你想看看是谁在喊你，可你无法动弹。</p>
<p>你拼了命向上爬，即使口鼻中全是污泥和脏血，即使四肢被厚重的泥土压到畸形。原来还有人在叫你，原来还有人爱着你，原来这个世界如此美丽。</p>
<p>你用尽自己全部的力气，像是生出了额外的羽翼，你从此不甘心被活埋，被忘记，被裹挟在地下沉睡成百上千年后化成黑水。</p>
<p>你向上爬去，终于会爬出沼泽，会带着一身的伤痕站在地上，四处望着是谁在呼唤你。</p>
<p>至于到底有没有人，至于你愿不愿意相信刚才这里存在过一个人，至于你愿意相信她是谁，这完全取决于你。</p>
<p>——《逃：后记》（写于2024.04.30）</p>
</blockquote>
<p>等我写完《逃》第二天看到她的时候，我突然感到一阵悸动。我在想，她知不知道我为她写了一篇小说呢。</p>
<p>我想我大概是喜欢上她了吧。</p>
<p>这是很致命的。就如我上面所说，我一直都可以意识到自己是一个性格很极端的人，她没有任何可能喜欢上我这样的人。我当然清楚她表现出来的友善大概只是礼貌，但我深陷其中，完全如同将要溺死的人试图抓住稻草。</p>
<p>我明白这感情没有结果、甚至还会影响高考，但又深深陷在这个光影飘散的水晶迷宫中走不出来。我真的从未有过如此狼狈。</p>
<p>但也正是这种情况下，她那天突然开了个玩笑。</p>
<p>现在看可能觉得那句话只是玩笑，但我当时真的将其视作灯塔的曙光。我终于可以有一条救赎的道路，终于有人指出了一道宽阔的大门。</p>
<p>我终于将要得救了。</p>
<blockquote>
<p>终于我闭上了眼流出了泪放下了手，我站起身迎着窗外。她的面容浮现了出来，朝我轻轻地笑。</p>
<p>她真的好美。</p>
<p>我睁开了眼。玻璃上仍然是我的倒影。</p>
<p>我真的很丑。</p>
<p>可这个世界真的好美。</p>
<p>——《眼》（写于2024.06.10）</p>
</blockquote>
<p>但后来证实了，这一切真的只是我的幻想。</p>
<p>所以就有了《青蛙王子》和《刺杀》这两篇小说。</p>
<blockquote>
<p>他以为自己是受了诅咒的王子，但在她眼中它只是只戴着金冠的青蛙。</p>
<p>——《青蛙王子》（写于2024.06.17）</p>
<p>等人们发现你的时候，你扑在蔷薇花丛里。人们把你救出来，你的全身被二十三朵蔷薇花刺穿，其中一朵刺穿了心脏。</p>
<p>——《刺杀》（写于2024.06.21）</p>
</blockquote>
<p>我后悔吗？</p>
<p>我一直都笃信一个事，那就是人不应当压抑自己的情绪。我一直很不喜欢别人劝我、甚至是要求我去乐观开朗向上，我觉得一个人的情感是属于自己的，我应该在我想哭的时候哭，想笑的时候笑。</p>
<blockquote>
<p>也狂欢着 也狂笑着 青春是官能的王国</p>
<p>也淋漓着 也耽溺着 血液中蒸沸快乐</p>
<p>——Kevinz《猜火车》</p>
</blockquote>
<p>我当然不后悔。</p>
<p>这段略显幼稚肉麻而且夹带郭楠幻想的故事可能放在这里会被很多人吐槽吧（笑），甚至有可能当作梗广泛流传，以后也许有许多人都一边玩着梗一边魔改着其中的某一句话一边嘲笑我的失败，也许我过不久就会把这段话从这篇文章里删掉。</p>
<p>但我真的不后悔。即使我们以后的人生大概再无交集。</p>
<hr>
<p>也许过几年我会忘记很多事，但高考前那个夜晚，我突然回忆起了我高三的故事，我想起了过去的痛苦，我也畅享着未来的美好，我终于鼓起了全部勇气冲向了现在。因为我真的有想去的地方，因为我真的有想见到的人。</p>
<p>高考前感冒还有点低烧，但是我反而一点都不害怕了。</p>
<blockquote>
<p>确实，有时最离奇古怪的念头，看来根本难以置信的想法一旦牢牢地占据了你的脑海，最终，你就会认为这种想法是可以实现的⋯⋯此外，如果这种想法与强烈的、疯狂的愿望结合在一起，那么，有的时候，你最终会把这种想法看作是命中注定、无可避免的事情，认为它是不可能不存在、不可能不发生的了！也许，这里还包含着别的什么，包含着许多预感、非凡的意志力，对自己想入非非的沉迷或者别的东西——我不知道。但是，这天晚上（这个夜晚我终生不会忘记）在我身上产生了奇迹。虽然这个奇迹可以用算术知识加以诠释，但是，对我而言，它至今仍然是一个奇迹。当时，为什么这种自信会深深地、牢牢地印在我的心中，而且早就如此？究竟是什么原因？确实，我再重复一遍，我没有把它看作那种可能发生、因而也可能不会发生的偶然，我认定它是那种无论如何都不可能不发生的必然！</p>
<p>——陀思妥耶夫斯基《赌徒》</p>
</blockquote>
<p>高三的时候把<a href="https://music.163.com/song?id=2058806421&amp;uct2=U2FsdGVkX1/Cbeq60Q5irnrpFBmGevhxb3gkBGECxVw=">《猜火车》</a>听了好多好多遍。直到现在我的qq签名还是里面的那句“而唇瓣风干锈死之际，谁先一步释怀。”</p>
<p>我当然不知道未来会发生什么，我现在也仍然是坐在轨道旁猜火车的少年。</p>
<p>但我仍然想要记录过去。如果过去的故事不够圆满、充满遗憾，那我希望起码以此文来为过去画上一个圆圆的句号。</p>
<blockquote>
<p>……</p>
<p>欲念和浓烈狂热 身体内一并痉挛厮磨</p>
<p>血管过电生枝杈 镶嵌在皮肤和骨骼</p>
<p>世界不关己事 我只需选择全都不选择</p>
<p>啡肽与荒草里 猜远处不停脚的列车</p>
<p>爱是反叛 是瘟疫 是革命 是疯魔成活</p>
<p>每名少年都周身赤裸 借由本能作则</p>
<p>洁持中跌堕 潮林里纵火</p>
<p>阳光越迷幻 你越深熔化进我</p>
<p>……</p>
<p>最坏也最好的年代 未来即是永不到来</p>
<p>开一窗逼仄屋室 蓦然涌起滂沱火海</p>
<p>我们在迷离眼光中 反复读懂每个现在</p>
<p>而唇瓣风干锈死之际 谁先一步释怀</p>
<p>生命是违逆 是服从 是有预谋的意外</p>
<p>每名少年都试图 一边告别 一边告白</p>
<p>洞察与窥猜 胡乱生青苔</p>
<p>阳光太迷幻 以至我脚步加快</p>
<p>……</p>
<p>我们终将归于沉寂 令一切都失去意义</p>
<p>反叛着反叛 接受没道理的 不无道理</p>
<p>于是这世界突然美好 突然通透而瑰丽</p>
<p>甚至令人忘记开篇 何其宏伟的命题</p>
<p>——Kevinz《猜火车》</p>
</blockquote>
<p>（写于2024.08.26）</p>
<p>（谨以此文纪念我的高三生涯）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>离弦</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E7%A6%BB%E5%BC%A6/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<blockquote>
<p>破碎尘埃在掌心堆叠</p>
<p>太相似的岁月</p>
<p>连泪水炽热，都被抛却</p>
<p>我想我是在等，某个微小瞬间</p>
<p>一阵不经意的风，就颤动某列和弦</p>
<p>唤醒过往誓言，再度闪烁于指尖</p>
<p>编织起音节</p>
<p>牵引我去比遥远，更远的天</p>
<p>（初繁言《离弦》）</p>
</blockquote>
<hr>
<blockquote>
<p>所以看上去，故事已经临近尾声。</p>
<p>但我想，故事大概永远不会结束。</p>
<p>这几天经常想：如果我联赛考砸怎么办？如果我省选失利怎么办？如果我国赛出错怎么办？</p>
<p>如果我没能考上北大怎么办？</p>
<p>所有人都在问我这一个问题。</p>
<p>所有人都等着我作出回答。</p>
<p>他们告诉我：一旦我输了，我就全完了。</p>
<p>他们跟我说：一旦我失败了，我将永远翻不了身。</p>
<p>他们是谁呢？</p>
<p>（写于2022.10.08，国庆集训后）</p>
<p>考前跟同学说，我特别讨厌自己不能掌控的局面。那些即使我拼尽全力也无法改变的局面，我是难以面对的。结果还真是一语成谶，现在我的命运脱离于我手中了。</p>
<p>每次听歌，听到《猜火车》的时候总是有别样的感觉：那种青年的迷茫，所谓“未来即是永不到来”的迷茫。我记得曾读过的句子：“对自己命运掌控权的过度追求，是妄图以微弱的天赋和丝毫的努力，挑战造物主的疯狂。”想来大抵如此。</p>
<p>好吧，我不知道故事会不会就此结束。故事开始的时候没有人会一下就注意到，故事结束的时候没有人会相信这已经是终页。造物主的笔永不停歇，没有人会永远是主角。</p>
<p>（写于2022.11.29，联赛后）</p>
<p>我是个懦夫，所以我不敢回看过去了。</p>
<p>我也是个勇士，因为我要看向未来了。</p>
<p>（写于2022.12.18，省选前停课）</p>
</blockquote>
<hr>
<p>删删改改过好多次，最后还是打算写完这么一篇文章作为OI生涯结束的标志。已经好久好久没去写一篇这样的随想了，所以感觉自己根本写不出来什么主题明确的东西，只能写一些不知所云的碎碎念。</p>
<p>但想到Anlin老师也经常写这种碎碎念，于是我又登时充满信心了。而写了两句就发现自己文笔远远比不上Anlin老师，连一个明确的主题都写不出来。然而既然已经写完了，姑且认作我的说说合集篇看吧。</p>
<p><a href="https://www.bilibili.com/video/BV1Wu411h7t6/">本文的bgm</a>。</p>
<hr>
<p>退役后这两个周一直浑浑噩噩，白天几乎学不进去任何东西，到了晚上觉得这一天不能就这么过去了，于是一直学到两三点，然后第二天睡到中午再起床，于是下午继续浑浑噩噩。</p>
<p>我记得我高一高二省选后补课都不是这样的。</p>
<p>高一省选后已经确知自己进不了队了，拼了命地补课，当时和她还在一起。记得当时补课压力特别大，因为补一个周的课就要去考月考了。有一天晚上精神崩溃了，很晚很晚的时候给她发了好长一段话，我知道的是她平时睡得很早，没猜到的是她却迅速回复我了。我们那天晚上聊了好多好多。</p>
<p>最后的结果就是一个周过去了，除了生物以外所有课全部补完了，而生物在只补了三分之一左右的情况下去考试考到了大实验平均分，最后赋分到了总分年级第十。她是班级第一，我比她低了$0 . 5 $分。</p>
<p>我一直认为自己其实是一个很狂妄的人，但我想一直到现在我说过的最狂的话，还是月考成绩出来后，我说，级部第十不重要，重要的是排在她的后面。</p>
<p>现在当时的种种已经是难以回忆的故事了。前不久看过一个视频，讲的是人在失去什么后，会应激性忘记大部分不开心的事，然后只留下那些美好的回忆，于是越发不舍。我想我的大脑可能比我聪明得多也理智得多，它选择放弃了几乎全部的记忆。</p>
<hr>
<p>高二补课的时候是极其不甘的，联赛挂分挂了$65 $分，省选第一天明明拍过了出来也对过思路了，本来都充满希望地认为自己将拿到$248 $的标准分，结果挂分，最后无从得知是否能进入省队。</p>
<p>那时我突然开始想，为什么要这么拼呢？说到底，对北大的执念可能是一部分，另一部分，可能是一种复杂而扭曲的情绪。我一直抵触将自己标榜为一个过于注重功利的人，一直试图掩饰自己过强的好胜心，但我的内心是极其争强的。我见过的几乎所有的老师都有一种固有的观念，那就是成功者不聪明，失败者不努力。每次有什么讲座或者所谓优生交流之类的事情，都会有老师在上面说诸如谁谁谁并不如你们聪明，谁谁谁是我见过最聪明的学生此类话。我印象很深的是刚开学的时候竞赛生训话，说到我时说我是所有人中最聪明的，但可能会成为最后的“无冕之王”。当我真正取得成绩后，我又成为了所有人中最努力的，最“听老师话的”，其他人代替了我的位置成为了这个老师口中的“最聪明但存在问题”的学生。没人会喜欢平凡的人的故事，人们称赞成功者，惋惜失败者，并试图从他们身上找到一些经验教训，为此他们不惜强说因果，因为没人会选择去从那些玄而又玄的命运或者天赋中汲取经验。</p>
<p>而我听过了太多的反面教材，于是也害怕自己成为别人口中的反面教材。</p>
<p>所以也许我一直都在怕，一直怕别人对我的评价，怕别人说我如此聪明却又不努力，怕别人说我因为一时的恋爱而影响了一辈子，怕别人说我钻研难题而导致基础知识失误。尤其是那些我在意的人。我曾经也许真的有那么一段时间，不顾别人对我的看法，只是按照自己的方式活着。但她走了之后，我发现原来那些我所珍视的人，原来他们对我的评价足以超脱一切相处的记忆。甚至一件事，只是一件事就足以掩盖曾经相处的种种。</p>
<hr>
<p>我至今清晰地记得我们班主任来通知我进队时的情景，我补课补得差不多了，在教室里等着准备接下来要跟着班级上课了。那节课大概是体育课或是别的什么，反正教室里只有几个人。低头写着作业的时候发现我们班主任进来找我，他问我，我自己觉得能考第几名。我愣了一下知道省选成绩出了，我说老师你先告诉我进没进队。他说那肯定进了，但是你猜猜第几名。我说第九第十左右吧，他说，第五名。</p>
<p>我记得我当时从椅子上跳起来了。然后跟着他在上课的时候满教学楼乱窜，最后到了我们学校竞赛总教练，也是我们级部主任的办公室。</p>
<p>级部主任看到我后笑着对我说，你怎么跟范进一样。于是我在办公室里喊了一声“噫，好了，我中了！”</p>
<p>他们不知道的是我昨天和wmy打赌，我说，如果我进了A队，我就在宿舍里唱大风的《范进中举》。</p>
<p>所有人都不知道的是，进队后高喊一声“噫，好了，我中了”这件事，从一年之前，我就开始幻想了。</p>
<hr>
<blockquote>
<p>好想就这么一直下去，好想自己就在这里上学，虽然很累但是每天可以学自己喜欢的也可以和兴趣相投的朋友一起玩永远不要回去面对文化课和文化课同学。</p>
<p>但只是想想罢了。</p>
<p>（写于2023.04.22，省队一轮集训）</p>
</blockquote>
<p>后来自然而然地参加了一轮省集，然后去了平邑一中集训。在我OI的将近六年的生涯中，在平邑一中的这两个月是我印象最深的两个月。每天有教练安排的任务，有一起聊天、一起训练、一起打羽毛球的朋友。很后悔去年这个时候没有来到平邑一中，如果那个时候来了或许现在的OI水平会强上不少。</p>
<p>二轮省集的时候阳了，本来都让父母不要来，然后父母瞒着我买了车票到济南了，然后拉着我回烟台了。然后是SDCPC。我的OI生涯中掺杂了大概四五场正式的ACM比赛，印象最深的一个是美团杯的队伍伞兵队，那次和lrg、qhr熟悉了起来；另一个就是SDCPC的队伍BAD队，和dwt、qyc熟悉了起来。</p>
<p>又想起省选之前问学长们问题，学长们对我的问题除去一些确实过难的问题，几乎是有问必答。有的时候一天会在问问题上用上三四个小时，也耽误了学长们三四个小时的时间。</p>
<p>有的时候惊叹于自己的运气，能遇上如此好的大家。无论是平邑一中或者说泰安OI的大家、亦或者两次ACM的队友，再或者是烟台二中的2020级和2019级的学长们，遇上大家是我的幸运。有的时候真的会想，如果自己低谷的时候没有大家来安慰我、瓶颈期的时候没有大家来解答我的问题，我应该是绝无可能走到现在的。</p>
<hr>
<p>NOI的过程没什么可说的，考前说自己不擅长拼包的话真是一语成谶。</p>
<p>最后倒是没挂分，也无分可挂。平平淡淡地考完了NOI，拿到了一块低分Ag。</p>
<p>前段时间那个“爽滑慢舔”很火，所以去听了一下原歌。听到“偏偏雀落人间”这句词的时候一愣。再一看歌词，发现是“翩翩雀落人间”，一时不知道说什么好。</p>
<p>也许我一直自命不凡吧，一直觉得自己是天命之选。</p>
<p>最后发现落幕的时候倒也没有英雄的悲哀，只是突然意识到自己也没有那么特别，一个有些天赋、有些努力的普通人而已。</p>
<p>我想这大概是我现在消沉的原因。</p>
<hr>
<p>前不久，我从歌单里翻出了《少年月光》这首歌，听到双目含泪。</p>
<p>哪来那么多天命啊，哪来那么多平凡与不平凡的论调，又哪来那么多反面教材。</p>
<p>我在怕些什么呢？我在担心些什么呢？</p>
<p>我已经走到这里了啊，这还不能反驳别人口中对我的诋毁，对我未来的诅咒么？</p>
<p>这还不能反驳我自己对自己的贬低么？</p>
<blockquote>
<p>这一路走了很久很久</p>
<p>走到少年老，走到年轮旧</p>
<p>梦结束在街口，或绽放枝头</p>
<p>星月还在，只有云悠悠</p>
<p>（瞳荧《在人间》）</p>
</blockquote>
<p>有的时候会想如果我不学竞赛，或者学到一半放弃了会怎样。这想象如此之困难，以至于我无法想象出任何一种可能性。</p>
<p>很喜欢一句话：“在人生的某些时刻，你只能把它归结于命运。”我有的时候会恐惧，如果这命运走偏一点会怎样。总是觉得，偏离一步、走错一点都不会走到现在。</p>
<p>但最终我走完了这一切。</p>
<p>也许没有走错不走错之说，因为没有正确的道路之说。我NOIP后对挂分惋惜不已，省选结果出来后突然觉得，如果NOIP没挂分，我省选前大概也不可能如此拼命地准备。即使竞赛这条路最后没有走到NOI的考场，也许我的人生也仍然没有failed。</p>
<p>NOI Ag意味着我在准备高考的时候可以轻松一些，但毕竟也不是大道坦途。至于以后，我希望自己能沿着曾经梦想过的道路走下去。</p>
<p>现在我走到了这里，不清楚我和运气谁的功劳更大一些，我感谢我自己，也感谢运气。</p>
<blockquote>
<p>这一路好像没走太久</p>
<p>情感没腐朽，回忆没生锈</p>
<p>距意气斥方遒，没几个春秋</p>
<p>怎么能走到厌倦以后</p>
<p>（瞳荧《在人间》）</p>
</blockquote>
<hr>
<p>一开始听到《离弦》这首歌，其实第一反应是箭的“离弦”，觉得讲的是那种一往无前的勇气。</p>
<p>后来才知道原来“离弦”可以指代离别时候演奏的歌曲，那偷来当我的OI回忆录的题目吧。</p>
<p>虽然很不愿意承认，但我的竞赛生涯也确实到这里结束了。大学不确定会不会打ACM，至少OI与我的关联应该是顶多出去讲两节课了出两套题了。</p>
<p>看到这里的读者，我不清楚你是谁，也许是完全不熟的陌生人，也许是一面之缘、点头之交，也许是关系极好的朋友，但我都要感谢你看到这里。感谢你听完我的这些碎碎念，也感谢你来看过了我OI生涯的最后所留下的残篇。愿你有一个灿烂的前程，愿你幸福，愿你的一切如愿以偿。</p>
<blockquote>
<p>你在人间走一走</p>
<p>有温暖也有寒流</p>
<p>为何奔波为何停留</p>
<p>是生活亦是所求</p>
<p>熬过苦累悲痛，迷茫不必再深究</p>
<p>你的存在你的意义</p>
<p>因爱或被爱而不朽</p>
<p>在人间走一走</p>
<p>从婴提走到白头</p>
<p>理想与梦是烂借口</p>
<p>一直前行便足够</p>
<p>（瞳荧《在人间》）</p>
</blockquote>
<p>最后的最后，如果让我对我的OI生涯做一个总结的话，我想化用瓶子的那句话：</p>
<blockquote>
<p>当我回忆我的OI生涯，你要问我觉得成功吗，那其实没有很成功。但你问过程精彩吗，那我觉得真他妈的是相当精彩啊！</p>
</blockquote>
<hr>
<p>2023.08.12</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>昔巷旧梦</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E6%98%94%E5%B7%B7%E6%97%A7%E6%A2%A6/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>题目是后来加的，是一首我挺喜欢的歌的名字，原本题目是日记的日期。</p>
<p>下面是原文。</p>
<p>昨晚将自己关在房间里哭了一夜，最后下了决心：请一下午的假。</p>
<p>下车前接过母亲递来的硬币，以备需要自己乘公交车回家的情况。</p>
<p>到教室里，教室里是不一的读书声，我听见一句“风急天高猿啸哀”，听见一句“古来万事东流水”，我拿出语文书也想读，喉头一痒，词语就都改成了咳嗽。我几乎带着期望去看手心里有没有血丝，血倒是没有，泪倒是不止。</p>
<p>我攥紧硬币，压着咳嗽，读下去。</p>
<p>早晨又是愤怒的，我几乎带着莫大的敌意针对每一个人，却又在片刻后宁静下来报以歉意和冷静的语气。第一节课是语文，原本以为老师不来，拿出生物卷子想做，却又放下了。拿出语文书，重新读史铁生的《我与地坛》。</p>
<p>再后来的课几乎没听进去，我害怕班主任不准假，于是脑中只充满无助的愤怒，想着想着泪又留下来，低着头掩饰着，即使我明明知道，这样的事并没有发生。</p>
<p>上数学公开课也是低垂着头，忍耐咳嗽时的声音像是啜泣，同桌时常看我，我不知道该怎么跟他说，索性不说，谁过来搭话也不说。</p>
<p>然后是去找班主任要假条，再然后回班级收拾东西。我尽力让自己看起来兴奋一点，健康一点，然后少有的从前门进了教室，我看见地上的那个蓝绿色箱子，我突然感觉又有了活力。却也只是突然。我最后还是拎着两个袋子来到座位上收拾东西，然后是带子断裂的声音。</p>
<p>我几乎要哭出声来，我带着哀求的目光往那个方向看，只有一张空空的桌子。</p>
<p>到了家，带着手机，攥着硬币出门去。</p>
<p>我大概两三年没有走过家门前的这条路了，再往前的那条路应该已经有五六年没涉足了，一开始倒害怕自己走错，可明明是小时候天天走过的路。</p>
<p>当时还是泥土地上的石板路，现在是全改成鲜红的柏油路了。总疑心路边的白桦林换过，因为树干很细，不像是过去了五六年，而且树干都斜着，压向小路。</p>
<p>我还能回忆起小时候陪父母在这条路上散步，他们走在前面，我走在后面。倒不是因为关系不好或是别的什么原因，只是我喜欢在散步的时候想故事。我已经记不起来多少故事了，只觉得当时编了好多，都是那种孩子最喜欢的故事。有的时候还会特意构思一个悲剧结尾以体现自己的审美水平。于是又感叹，命运不是和我一样的拙劣的写手，不然它大抵会让我在昨晚下定决心后在睡梦中死去，或是让我在今天早晨出车祸，但也不一定，因为它还有机会，前面还有几个路口。</p>
<p>我遇见一段残存的石板路，从柏油路延伸出去，伸入几棵小松树，然后消失在拐角。我想到了小学时校园里也有几棵松树，玩松针、松油的故事记不清了，但又总记得。只是之前听说，那几棵树已经被砍倒了。我几乎确信我曾经踩过这几块石板，但突然又谨慎起来了，说不定换过石板。或许几年后的我经过这里，再看到这几块石板也会有一样的感觉。或许看不到了，或许不会再经过这里了。</p>
<p>前面是绿灯，但我不想急。到了路口就转为红灯了。于是四处望望，早已经不是熟悉的景象了。恍惚中看见对面有人穿过马路，再一定神，绿灯闪着，又变成了红灯。</p>
<p>我来到商场，多了很多新开的门店，但很多旧的也还在。我又想，如果命运不肯和我开大一点的玩笑，或许可以最后开个恶作剧，让我走到那里的时候看到那家店关门待转让的告示。可它没有这么无聊，我沿着记忆中的路，走到了那里。</p>
<p>这时候已经下午两点，来之前担心这里只有我一个人，多少会有些尴尬，但进来后看见零散的几张桌子坐着零散的人，于是便放下心来，走到角落坐下。</p>
<p>角落里还有一个女人，在那里静静地吃着饭，我过来的时候她抬头看了我一眼，然后低头继续吃。吃得很慢，我开始好奇她的故事。人总是奇怪的生物，明明知道有些人和自己一辈子只有那么一面两面的交集，却还是好奇对方的故事。</p>
<p>但在一生结束之前，谁又能确定只有一两面的交集？我曾经以为会很快变得陌生，很快淡忘掉的人，有多少一辈子刻在了我心里？我曾经确信会一直相交的人，有多少后来证明，只是生命中的过客？</p>
<p>我低下头，打开手机，看史铁生的《我与地坛》。</p>
<p>我的饭来了，醋加多了，但刚刚好。我想起小的时候觉得好玩，会故意多加很多醋。结果最后自己吃不了，就全给父亲吃了。不知道他这几年替我吃了多少醋，又不知道他这几年替我吃了多少苦。</p>
<p>我想起曾经自己不愿意来这里吃，连尝试都不愿意。后来有个阿姨带我来，推脱不过，尝试了一下，于是便成了常客。那个阿姨很讨厌，我不喜欢她，但想起她来总没多少厌恶的感情，不知道与这有没有关系。</p>
<p>以前和父母来的时候，母亲总会在第二碗的时候把鸡柳挑给我，在第三碗的时候把牛肉挑给我。所以我吃了几口，约莫到一碗了，就咬下鸡柳，约莫第二碗吃完了就挑出牛肉。但总是少了那种感觉，我吃的也很慢。到最后有些饱了，但还是接着吃，因为不知道下次什么时候来。我想起以前，我总会吃的很慢，最后父母都起身了，我还是要贪恋一口汤再走。于是想着喝一口汤就走，但又不想起身，坐在椅子上，把手里的文章看完。</p>
<p>回去的路上，车流多了起来，不知道为什么。</p>
<p>我发现小区门口的洗车的地方换了足球场，想起之前和父母来这里的情景，有点不知道说什么好。但随即发现只是换了个地方，不过生意看起来冷清了许多。很快我就找到了冷清的原因：前面有了一家新的汽车保养店。</p>
<p>那家包子铺还在开着，我已经记不清什么时候第一次来这里了。</p>
<p>许多新店开了，许多老店还在。</p>
<p>走进小区，我看到原本幼儿园前的几张木椅已经破损地不像样了，里面的钢丝漏了出来，原来竟是假的，可我小时从没怀疑过。幼儿园里空荡荡的，想来孩子们都在室内。往回走的时候听到后面的响声，以为是孩子们出来玩了，回头一看，还是没有人。有一条人工河，上面有一条刻成弯曲木头形状的桥。我想起来曾经经常在上面玩，熟悉每一道花纹。</p>
<p>人工河以前是有生机的，还有很多水。以前是有青蛙的，我记得我来这里抓过蝌蚪，可现在大部分都干涸了，露出了光秃的地面。仅剩的水在今天也结着冰。</p>
<p>曾经那边有一家面包店，我经常在那里买十块钱一袋的肉松面包当作零食。</p>
<p>曾经那边有一家菜店，我有时会替母亲去那里买菜。</p>
<p>曾经小区里是有桃树的，小时候摘过桃子，后来可能摘得人多了，桃树再也见不到了。</p>
<p>曾经小区里有条管道放着水，母亲经常去那里洗衣服，我就坐在她旁边看书。</p>
<p>我张开手，拿出攥着的硬币。我原本想将它抛到河里，但又改了主意。我记得我小时候捡到一元钱是很开心的，我可以买两袋零食吃，同学也会都来分着要。</p>
<p>所以，我望着前面结冰的河，把硬币放在拇指上。</p>
<p>希望以后，不必回望过去，不必妄想将来，只活在当下，做好自己。</p>
<p>希望以后，不必因为别人而惩罚自己，不必在意别人的评价，不必在意别人的性格。</p>
<p>希望以后，只为自己而活，不必将生命托付给谁，只为了所有的记忆与情感而活。</p>
<p>我抛出硬币。</p>
<p>我想起来月考后，我拿着橡皮和自己打赌。“三次正面就去”，我扔了两正一反。但又不甘心，于是又来：“五次正面就去”，这次倒是扔了五次正面，但我又不放心了，再扔一次，是反面。</p>
<p>所以我转身，我听见硬币落在地上，滚动着，然后停下。</p>
<p>去他妈的命运。</p>
<p>（写于2022.01.07）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>其实悲伤早已死去</title>
    <url>/2025/06/22/%E9%9A%8F%E7%AC%94-%E5%85%B6%E5%AE%9E%E6%82%B2%E4%BC%A4%E6%97%A9%E5%B7%B2%E6%AD%BB%E5%8E%BB/</url>
    <content><![CDATA[<!-- toc -->
<!-- tocstop -->
<span id="more"></span>
<p>我想我大概永远都不会忘记2024这一年吧。</p>
<p>其实现在都是期末周了，但现在同时也是年末了。2024这一年，我毫不怀疑它拦腰斩断了我的人生。在这之前与从此之后的我被短短的一年甚至短短的四天阻隔开来，我不明白为什么这么短的时间会起到如此大的作用。</p>
<p>我总是梦见NOI，梦见NOIP，梦见高考前的模拟考，却几乎一次也没有梦见过高考。而且我在梦见的时候总是清楚明了的知道自己的结局了，我在梦中清楚知道我未来已经在p大了。可我在梦里还是恐惧，还是惊慌，考后会回忆自己考场上是否做错了题，出成绩会痛苦懊悔不已乱发脾气。所以我总是怀疑，我曾经的那些痛苦是否其实并不只是来自于升学的压力。</p>
<p>我高考出分的当天早上做了个特别特别清晰的梦，我从未如此详细地记住一个梦的每一个细节。我梦见我被父母叫醒，他们告诉我高考成绩已经出了，他们告诉我我的分数，一个从现在看来会被恰好卡掉破格强基的分数。我记得我在梦里歇斯底里，记得我冲到茶几前，拿起水果刀狠狠地划自己的手腕，可却怎么也划不开。然后我醒了，我说不出来我醒来的那一刻看着房间的天花板是什么感受，也许是恍如隔世。</p>
<p>我至今仍清楚地记得梦中的那个高考成绩，比我真实的高考成绩恰好低了$23 $分。现在看来我的这一整年都充满了这个诡异的数字，这个我从2020年听说的典故在四年之后诡异地一次又一次出现。我总怀疑我真正的高考成绩是不是应该是梦里那个，只是命运心软开恩让我有了从梦中惊醒的机会。</p>
<p>上次去理发店的时候店员问我，走到这一步靠的是天赋还是努力。我很想回答他我靠的是运气。因为连我自己也不知道，我走到这一步究竟是不是命运无由的馈赠。我走到如今靠的到底是什么，是一次次起死回生的运气作祟，是我从出生带来的天赋，还是我长久以来自鸣得意的努力。我不知道，也大概再也无从得知。</p>
<p>总之这一年就这么过去了。我不知道该窃喜还是该怀念。</p>
<hr>
<p>标题是周存的《向内生长》的歌词。其实坦白而言，我这一年也没有太多值得悲伤的事。我只不过失去了两样也许本就不属于我的东西。可我总是，无论是嘴上说还是实际做，我总是笃信着人应该放纵情绪，总是认为自己应该去追求，应该有执念，应该笑，也应该哭。我心里有一个完美的我永远都在追求的人，他（她）应该是偏执的，应该是骄傲的，应该是温和的，也应该是痛苦的。从这个形象被我用剪刀从我见到的人、读过的所有书中剪下来又拿胶带一点一点拼凑起来的那一刻，她就始终在影响着我的一举一动。我疯了一般朝她靠近，我毫不怀疑只要我离她靠得足够近我就能获得我心心念念梦寐以求的幸福。<strong>我心心念念，梦寐以求的幸福。</strong></p>
<p>我之前去过一次文学社的社团活动，坦白而言我的体验很差，一方面是因为那个活动其实人数很少，所以搞了个很小的房间导致我社恐发作；另一方面是我总是怀疑他们在讲的时候带有一种学院派的盛气凌人的风格。那次活动讲的是布朗肖的《文学如何可能》，里面有一个我到现在仍然深以为然的观点，里面有这么一段话：</p>
<blockquote>
<p>使用这样的语言（陈词滥调）只是因为它过于陈腐以至于无法引起注意并阻碍了它必须转述的意义。陈词滥调注定不会引起注意。意象、词语不再重要了。语言从中勾勒了一具不可见的缺席的身体。</p>
<p>——布朗肖《文学如何可能》</p>
</blockquote>
<p>我对此的理解是，有一些词被人使用得太多太多了，导致人们终于忘记了这个词原本的含义，而只是将其强加一个“某某场合可以使用的特定搭配”。主讲人举了个很有意思的例子，他说当我们在讨论爱情的时候，我们会想起玫瑰。但很少人会去仔细想玫瑰的艳丽强香，而只是想起玫瑰。当我们在讨论玫瑰的时候，我们其实并不很清楚我们究竟在讨论什么。</p>
<p>我觉得这句话相当有道理，并且终于迟钝地在某一天吃饭的路上想到，当我们在讨论梦想的时候，我们究竟在讨论什么。</p>
<p>我想一个中文的初学者见到梦想这个词一定会被惊艳到的，这个词的构成太过飘渺，太过轻灵，然而这些漂亮的地方全都被掩盖在日常的滥用之下了。</p>
<p>所以在我心中，到底什么事情能配得上“梦想”这个词的分量呢？</p>
<hr>
<p>开学的时候哪个老师给我们放了个短片，大概是叫了几个同学到讲台上来，让他们按照自己认为的大学中未来可能的成绩排一下名。然后那个老师问排在第一名的那个同学他为什么如此自信地站在那里，我对他的回答至今记忆犹新，他说：“因为我想要改变这个世界。”</p>
<p>我至今仍然会想起高三遇到的那个女孩，有的时候会愧疚高考后打扰到了她的生活，但更多的时候我总是回忆着当时的一个又一个细节，即使我现在连她长什么样子也记不起来了，却总是会忽然忍不住嘴角上扬，然后忽然被巨大的遗憾和痛苦掩埋。坦白而言，我在那之后的种种心情到底有多少是因为我对她的感情，有多少是对她的感激。还是说更多的部分是我自己幻想的破灭：我一直一直都在憧憬的那个幸福的未来，终究没有到来。</p>
<p>我后来写了《刺杀》，将这种幻想自嘲是溺在月光里。</p>
<blockquote>
<p>月光将那条路撒上一层银光，一层诡异的银光，你伸出手想抓住空中的流银，可你什么都抓不住。但你要是站着不动，那些无边的流银又会一点一点覆盖在你的身上，你被一点一点包裹住，你会有一种错觉，觉得自己在化茧。可并不是这样，你一点一点忘记了呼吸，跪倒在地上抬头看着月亮，感受着自己身上一层又一层地镀上白银，然后它们一点一点一点收紧，你的胸腔被一层一层包裹住缠绕住，心脏跳动着击打在胸口发出挣扎。你无法呼吸。</p>
<p>（2024.06.21）</p>
</blockquote>
<p>可我又如此清晰地记着高考前我坐在楼下，我想着我还有想去的地方，我想着我还有想要见到的人的那个时刻。我为什么那么清楚地记得我在走向高考考场的时候，鼓起全部的勇气回过头来朝着她的方向大喊一声“高考加油”。我为什么那么清楚地怀念着我幻想了无数次的我与她站在蔷薇丛中的对话，即使那段对话其实在现实里一个字也没有发生。</p>
<p>高考后我逼自己去准备图选。我当然清晰地意识到自己实力不足，但我总是想，如果我真进了图，她在看到喜报的那一瞬间会想些什么呢。我也总是回想，如果我在明天死去，她得知我的死讯的时候会想些什么呢？说到底，我后来的种种行径是不是，是不是到底来说是一种卑劣幼稚委屈的情绪，我明明知道她已经下定了决心，却总希望着她哪一天哪一瞬间会忽然动摇，所以我其实一切的所作所为都是在努力去博得她一瞬间的后悔，去赌她会像达洛维夫人一样想：“如果我嫁给了他，这种快乐将会整天伴随着我哩！”</p>
<p>我在这里将这段话写在这里以自嘲我的卑劣，我或许心中始终以一种丑陋到极致的观点看待着我自己追求的幸福。我一直宣扬自己与过去自己的各种行为切割，但其实我骨子里仍然是曾经的那个卑劣的我，其实所有我拼命养成的道德感也许都没有抹掉这个事实。</p>
<p>后来我笔试的确答得极好，却也的确没进得了图。</p>
<hr>
<p>我后来读《罪与罚》，被其中的“索尼娅”深深吸引。再后来英语课上读了《欲望号街车》，说实话，一开始我对白兰奇其实异常鄙视，但最终却渐渐感同身受，以至于我选择了这部戏剧的续写作为我的英语大作业：</p>
<blockquote>
<p>MITCH: If we … get married, I swear that you won’t be on the edge of lunacy.</p>
<p>BLANCHE [<em>sobbing</em>]: I will. I’m too vulnerable and the world is … always too harsh. [<em>There is a pause.</em>] It’s getting late. Maybe the bright morning star has risen.</p>
<p>MITCH: But …</p>
<p>BLANCHE [<em>cutting him off, keeping sobbing</em>]: Will you attend my funeral in the future? I have no idea when it will be held. But I know it will come soon.</p>
<p>MITCH: Don’t say that.</p>
<p>BLANCHE: It’s a pity I can’t attend my own funeral. But I could imagine it. It will be quiet and stainless, with pretty flowers … right?</p>
<p>MITCH [<em>hesitantly</em>]: Yes.</p>
<p>BLANCHE: Will I be buried at sea at noon in the summer?</p>
<p>MITCH [<em>sobbing</em>]: Yes.</p>
<p>BLANCHE: I wonder if you will cry for me that day. But don’t … don’t answer me. Let it be a mystery, a fantastic mystery, just like the end of a fairy tale. I had read so many fairy tales when I was young and I always imagined that I’m a princess living in a palace, in a magic palace, waiting for my prince and then having a happy ending. Everyone believes that the protagonists of stories will have a happy ending, and I’ll also believe it. Do you know the French story <em>La Porte étroite</em>?</p>
<p>MITCH: You know, I read few books.</p>
<p>BLANCHE: It’s my mother’s favorite novel. Do you believe that at the end of the story, the hero and the heroine get married and have a happy ending?</p>
<p>MITCH [<em>sobbing</em>]: I believe it.</p>
<p>BLANCHE [<em>smiled palely</em>]: Why are you so sad? Oh, don’t cry. Tears are so precious that you should save them for more precious people.</p>
<p>​    [<em>Mitch covers his face with his hands. Blanche wants to wipe away his tears at first, but then she hesitates and turns back.</em>]</p>
<p>BLANCHE: God shall wipe away all tears from our eyes, for the former things are passed away.</p>
</blockquote>
<p>也许我自己也是如此积重难返，无论别人怎么说，我自己都能体会到自己性格中最为肮脏丑陋的一面。</p>
<p>可，是不是只是今年的我如此认为呢。我毫不怀疑现在的我拥有了高一的我所梦寐以求的一切，毫不怀疑他看到他的未来的时候会欢欣鼓舞，明白他所经历的一切都是值得的。我也好想在未来对小时候的我说，他最后终于成了一位发明家（虽然可能发明的东西会与他想象的略有不同？（笑））今年我的网易云年度歌曲是孙燕姿的《遇见》。我太爱这首歌了，我也太爱其中的那句歌词：</p>
<blockquote>
<p>我遇见谁，会有怎样的对白</p>
<p>我等的人，他在多远的未来</p>
<p>——孙燕姿《遇见》</p>
</blockquote>
<p>说来也好玩，我是在冬天听到的这首歌，而这首歌的开头第一句就是“听见冬天的离开”。我想也许冬天也的确该离开了，只不过还有不到两个月的时间。也许不止两个月，那就三个月，但总之它是一定要离开的。</p>
<p>上了大学后我写高三回忆录的时候写了这么一段话：</p>
<blockquote>
<p>大学报到也有一段时间了，在校园里待的这几天竟然无比适应，既没有在高中的那种被支配全部生活的禁锢，也没有假期在家里那种一天天无所事事的颓废。总之我愿意说——我希望过几个月、过几年后的我看到这句话不要哑然失笑——我现在真的开始向往着无限可能的未来。</p>
<p>（2024.08.26）</p>
</blockquote>
<p>我现在看到它其实已经哑然失笑了。我知道自己的未来其实并没有无限可能，有太多的事情是我无论如何也做不到的了。</p>
<p>可也许我一直渴望着的那些事情，我一直向往着的未来，我无数个夜晚辗转反侧的时候脑海中幻想的一切，我走在路上忽然入迷直到差点撞到人才清醒过来的幻梦，我一次次写在笔下，一次次自嘲，一次次又在笔下抹去的幸福，也许，也许还会来。</p>
<p>可我难道不是总是这么希冀的吗，我难道不是每次都在幻想之后发现自己所幻想的事情一件也没有到来吗？我曾在脑海中描摹的一切最终证明只不过是虚无的清梦，如同一个赌徒将筹码堆上牌桌前幻想的他赢下所有的场面。我读过无数次“远离颠倒梦想，究竟涅槃”，也自嘲过自己是心想事不成的超能力者。</p>
<p>可是梦是如此美好，美好到我仍然愿意执迷不悟。</p>
<blockquote>
<p>不，他说得不对！如果我谈到波丽娜和德·格里的那番话是愚蠢而尖刻的话，那么他对俄国人的讲法则是尖刻而无礼了。关于我自己，我没有什么话要说。不过……不过……这一切都不是这么一回事。这一切都是空话、废话、扯淡，而需要的是事实！现在最要紧的是去瑞士！明天，哦，如果可能的话，明天就动身！重新振作精神，重新做人。应当向他们证明……让波丽娜知道，我还能够成为一个人。只消……不过，现在……已经晚了，但是明天……啊，我有预感，事已如此，已经无可挽回了！现在我身上有十五个金路易，而过去我曾经从十五个盾开始！假如小心谨慎地开始……况且，难道，难道我是个小孩吗？未必我不知道自己是个堕落的人？但是，——我为什么又不能重新做人呢？行的！一生中只消一次（哪怕只有一次）我谨慎而耐心的话，就一切都妥了！只消有一次坚持到底，我就能在一个小时之内改变我自己的命运！要紧的是坚持到底。只要回想一下，七个月前我在鲁列津堡彻底输光之前也曾发生过的类似情况。哦，那真是坚毅果断的极好的例证：我当时输得山穷水尽……从游乐宫出来，一瞧，背心袋里还有一个盾，“呀，那么，吃饭的钱有了！”我心里想，但是走了百来步，转念一想，又折回去。我把这个盾押在小数上（这次是押小数），真的，当你独自一人，置身异国，远离祖国，远离朋友，不知道今天是否有饭可吃，却把最后一个盾，真正最后一个盾拿去下注，这时候是有一种特殊的感觉的！我赢了，二十分钟后我从游乐宫出来，口袋里有了一百七十盾。这可是事实！有时候最后一个盾就可能意味着柳暗花明！如果我当初灰心泄气呢？如果我不敢下决心呢？……</p>
<p>明天，明天一切都将见分晓！</p>
<p>——陀思妥耶夫斯基《赌徒》</p>
</blockquote>
<p>新年快乐！</p>
<p>（写于2024.12.28）</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>刺杀</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E5%88%BA%E6%9D%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f474ec06a635b0b5e4b63f3f1ed6d85283f4a2c32da88462a9d744190ed99dd0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>一半</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E4%B8%80%E5%8D%8A/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5fb0319561981e973b8a62e0682c2f2993e2aa630bb3a8b156680113da550545"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E6%A0%91/</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><a href="#零">零</a></li>
<li><a href="#一">一</a></li>
<li><a href="#二">二</a></li>
<li><a href="#三">三</a></li>
<li><a href="#四">四</a></li>
<li><a href="#五">五</a></li>
<li><a href="#六">六</a></li>
<li><a href="#七">七</a></li>
<li><a href="#后记">后记</a></li>
<li><a href="#后后记">后后记</a></li>
<li><a href="#后后后记">后后后记</a></li>
</ul>
<!-- tocstop -->
<span id="more"></span>
<h3><span id="零">零</span></h3><p>村子西边的高地上有一棵古树，没人知道它在那里已经多久了。</p>
<p>有一位游历四方的医生曾经到过我们村子，并对它产生了浓厚的兴趣。为了搞清楚树的来历，他挨家挨户拜访村里的老人，向他们询问这棵树的年龄。可那些老人有的回答几百年，有的说上千年，总之没有什么确切的答案——这棵树在他们很小的时候就已经在这里了。而且据他们回忆，那时的树似乎也与现在一样的粗壮。</p>
<p>后来医生向村长要来了村里仅存的几本古籍，其中的一本可以追溯到一千多年以前，那个时候的树竟也是一样的在这里，据描述也是一样的粗壮。</p>
<p>医生取消了去另一个村子的计划，把自己关在房间里日夜研究。可每当他似乎寻到了一点线索，接下来的研究又会逐渐将他之前的猜想全部否定掉。如此过去了十七年，十七年后他终于把村民召集起来，宣称自己已经找到了答案。面对着议论纷纷的村民们，医生先是展示了自己手上厚厚的一叠资料，然后呵呵一笑，说：“这棵树，是一颗从远方飘来的种子长出来的。”</p>
<p>众人哗然，哄笑声与咒骂声不绝于耳。医生看着他们，眼神却越发坚定起来。他挥舞着手上的资料，看着下方逐渐散去的人群，高声重复了一遍自己的话：</p>
<p>“这棵树，是一颗从远方飘来的种子长出来的！”</p>
<p>然而已经没人在听他的话了。</p>
<p>几天后他在家中去世，没能留下遗言。这一年我七岁。</p>
<h3><span id="一">一</span></h3><p>树上曾经是有一架秋千的，用带有毛刺的粗麻绳挂在横生的一根树枝上。村里的老人给孩子们讲故事的时候，会说这秋千是几百年前全国手艺最好的木匠的杰作——他曾经进过宫给皇上做过龙椅呢。</p>
<p>比起虚无缥缈的传说，秋千于我而言承载着更加美好真实的回忆。小的时候，我总喜欢在黄昏的时候一个人坐上秋千。因为这个时候孩子们都在村里，秋千这里往往只有我一个。我背对着坠落的夕阳，望着眼前簇拥的房屋和上面在光下灿然的瓦片的场景。我可以看见孩子们在村里的道路上嬉戏，一个把另一个推倒，一个把另一个拉到角落里耳语，还有几个一起在光下翻着石头堆，试图找到几块稍带光泽的石头（他们一度坚信那些光泽是细小的金粒）……而等到孩子的父母从屋里出来，轻呼一声，立刻有一个孩子浑身是泥地跑向自己的家的方向。日日如此。</p>
<p>但十岁那年的一个黄昏，当我像往常一样来到树前，却看到一个陌生的女孩正坐在树下。</p>
<p>我疑心我从未在村里见过她，村里的这个年龄的女孩子早已经下地劳作过两三年了，脸上时常还会挂着被杂草划伤的痕迹，皮肤往往已经被泥土染成麦色。但她却是一头短发，有着皎白的皮肤，正在树下用纤细的手指翻着一本小说。我忽然有了一种——我不知道该将其称作预感或是幻想。但总之，我忽然觉得她于我来说十分熟悉。有那么一瞬我感觉自己呆站在原地不动了，直直望着她，拼命回忆我们过去是否在哪里见过……而这时她抬起头来了，冲我轻轻一笑，我登时脸颊发红，撇过头去，快步走到秋千前坐下，却又忍不住偷偷回头看她。她则是背靠着树，面向西边的落日，借着光只顾着看她的小说。我们如此背对着一言不发，直到太阳完全落下，各自起身回家。</p>
<p>如此又过去了三四天，直到她某一天翻过了书的终页，站起身来，望着她面前的黄昏，忽然开口轻念：“唯黄昏华美而无上……”</p>
<p>我很惊讶，转过头去看她。她也注意到了我，用左手扶着树绕过来……她猛然蹙眉，抬起左手凑到眼前，她的左手食指刚被树上的倒钩划伤了。她把食指放到嘴里吮吸，也不扶着树了，缓缓走到我面前。黄昏的残光映在她黑色的眸子里。</p>
<p>我问她刚才念的是什么，她却笑着不回答。</p>
<p>后来我才知道，她是隔壁村子中的一个没落家族的独生女。她的家族曾经在某处显赫一时，但到了她的某个祖先的时候，却卖光了所有家产田产，捐了个小官，携妻带子远赴千里来当我们这的县令。她没有提过她的这位祖先当县令当得怎么样，只说他在任上暴死了。</p>
<p>到了她父亲这一辈，家里早就很不景气了。可即使这样，她的父母从小也仍把她当作富家千金来宠爱。每天的这个时候，按她的父母的规划，应该是要让她在家里的书斋——一个在厨房旁划出的隔间里面读书。我们相遇的那天，也是她十二岁生日的那天，她的父母却开始想要让她学些女红一类的事。她因此赌气跑了出来，因为早听说过古树的传说，于是一路来到了我们这里。</p>
<p>这意料之外的出逃当然让她的父母焦急得要命。她晚上回到家时发现父母都不在房间里，来到祠堂才看见他们正跪在祖先列牌前。她的父亲双膝跪地，双手合十，闭着眼虔诚祈祷；母亲跪在旁边，弯着腰捂着脸抽泣。当看到站在门口的拿着书吮着手指不知所措的女儿时，她的父亲立刻起身跑过去，然后被门槛绊倒摔在了地上，爬起来一边哎呦着一边哭着笑着把女儿搂进了怀里。母亲随后也扑过来放声痛哭，一边拍着她指责她四处乱跑，一边又仔细打量着看她有没有哪里受伤。</p>
<p>那之后她的父母再也不逼她学女红了，但她还是天天来树旁。</p>
<p>八年后，有一个孩子从秋千上摔了下来，摔断了腿。他的母亲因此暴跳如雷，来到树旁，先是拿起斧头砍断了麻绳，又举起斧头准备将秋千板劈成两半，但劈下去的瞬间却听见了巨大的金属碰撞的声音。她一开始吓得扔掉了斧头，两腿一软跪了下去，以为触怒了树神。但旁边围观的人围上来后，却发现是她的斧头砍到了秋千板里的钢筋。</p>
<h3><span id="二">二</span></h3><p>从那一天起，我们每天黄昏都会在树下相逢，这似乎成了一个无言的约定。</p>
<p>她从小读过各式各样的书，比我又大了两岁，见识比我广得多。有次她问我读没读过李商隐的《锦瑟》，我只说学校要求背过。她又问我觉得这首诗好在哪里。我想了半天想不到什么东西，只能把学校老师教的那一套名词一股脑说出来。她忍着笑听我讲完了这些，然后说，她觉得这首诗好，就好在即使你不知道它在谈些什么，也说不清楚意象之间的关联又是什么，但只要你一读，你仍能感受到字里行间藏着的悲伤。</p>
<p>如此的对话，在树下的这几年时有发生。从《堂吉诃德》中的蒙德西诺斯地洞，到《奥赛罗》中的天鹅，她总是有着独到的见解，像是一个偶像似的人物，如此完美，完美到不像凡世的人。</p>
<p>在她的十八岁生日那晚，她深夜跑来我家，向我哭诉她的父母想为她和一个她从未见过的男人订婚，于是她又像六年之前一样跑了出来。她扑在我怀里，把头埋在我肩膀上哭，这是我第一次见到她哭，也是我们第一次相拥在一起。我一时不知所措起来，只能轻拍着她的肩膀。过了一会，我看她情绪平复了一些。</p>
<p>我问她，那个男生怎么样呢？</p>
<p>她回答，家境很殷实，听说为人也很不错。</p>
<p>我又问，那为什么你不同意呢？</p>
<p>她从我怀里挣出来，扭过头去，然后又发疯似地将桌子上的书一本一本扔向我，鞋都没穿好就跑了出去。我望着她的背影，在那一刻第一次清晰地认识到我们之间的感情。</p>
<p>于是我追了上去。我们一路跑过村庄里那条土路。那个时候的天空还能看见星星，满天的星月仿佛都在陪着我们一起向前奔跑，奔跑，奔跑……她一直跑上西边的高地，跑到树下，然后站住转身面对着我，头发在月光下似乎变得透明起来。可能是因为含着泪水的原因，她的双眼似乎也变得透明起来。她歇斯底里地喊着要我离开，语气从愤怒辗转到央求。我看着她痛苦的神情，看着她嘴唇微张着，昂着头，眼泪从眼角落到下颌。</p>
<p>我伸出手去握她的手，她一开始想挣开，但我紧紧握住不肯放手，将她的手用力包在手心里。她的手好暖和，手上有些汗。我们如此四目相对，直到她放声大哭起来，将手抽出我的手心，然后紧紧抱住我。我也伸开双臂将她拥在怀里，将头倚在她的头上。我看见月光散在下方房子的瓦片上，但看不清模样。几间屋子里微亮着光……可有一家怎么却骤然熄了灯，灯光挣扎着闪动一下后缓缓暗淡。我悚然一惊，手一软，几乎要把她放开，但缓过神后我立即将她抱的更紧，更紧。</p>
<p>我开口向她求婚。</p>
<p>后来我们在她十九岁生日当天结婚。那一年我十七岁。</p>
<h3><span id="三">三</span></h3><p>再后来我和她去了同一所大学，报了同一个专业，又在学校外租了一间房子同居，课程安排也选了几乎一样的时间：这样我们就真可以形影不离了。</p>
<p>婚后的生活与我们过去的相处模式几乎没有区别，除了我们几乎放弃了各自所有的自由时间，每一年、一个月、一天，我们无时无刻不在一起。即使是因为差了两岁而导致的一些安排上的差异，我们也一定会定下一个地点和时间，等到各自的事情处理完了之后来到那里，然后一路聊着各自的见闻，相挽着回家或者去吃饭。</p>
<p>我们共享着彼此的社交账号的密码，用着同一张银行卡，每天晚上十指相握着一起入睡。连我们读的书也完全一致，因为我们总是依偎在一起读同一本书。她比我读的快一些，在等我读完这一页的时间内就侧着头看我。我们甚至讨论过要不要以后只买中性的衣服，这样连衣服都可以混穿。不过这个想法最后没来得及实施。</p>
<p>离她的生日还有二十一天的时候，她受邀参加一个文学研讨会，而我在同时报名去听了一个哲学讲座。我们暂时分开，约好上午九点四十五分在学校的图书馆北门前见面。讲座刚刚结束，我就收拾东西往图书馆赶去。到了那里，我抬头张望，发现她也正往我这里跑来，冲着我张开双臂，阳光倾洒在她的短发上，直到一辆跑车将她撞飞出去。</p>
<h3><span id="四">四</span></h3><p>跑车的主人是学校的一位教授，他与他的女伴一起随我们来到了医院。在抢救室外面，他静静地听我哭着说完我与我的妻子之间的故事。他听我讲我们的相遇，我们的相爱，我们的相处模式。他感到不可理喻。</p>
<p>手术并不顺利，医生通知我，我的妻子的内脏受到了不可逆的伤害，大概三个周后就会死去。</p>
<p>第一个周，我的妻子还在昏迷。我原本想在她的床旁边铺毯子打地铺，可这样我睡觉时就没有办法握着她的手。所以最终我搬了张椅子到她的旁边，每夜靠在椅子上，握着她的手入睡。</p>
<p>第二个周，我的妻子醒了过来，刚恢复神智，就拉着我谈那场文学研讨会的内容。我紧紧握着她的手，含着泪静静听她说完。然后我也开始细细跟她讲我去的那次讲座的内容。我正讲着的时候却发现她走神了，本想停下来，但犹豫一会，还是用手在她面前晃了晃，然后用略带委屈的眼神望着她。她捎带歉意和俏皮地朝我笑了笑，然后打起精神继续听我讲。</p>
<p>她的精力恢复得很快，这一个周，我们从我们第一次相遇谈起，再到第一次对话、第一次牵手。再往后谈，谈到订婚、结婚、相处。她谈到兴起的时候会从床上坐起来，我一开始还想劝她坐下好好休息，但终于没有劝她。她总是提到那棵树，提到她坐在树下看书的时候抬头看到的黄昏，提到那架已经不在的秋千。她回忆起西面的树干上有一处倒刺，她当时被它划伤过。她回忆起那天晚上她站在我面前，我身后是清冷的月光。</p>
<p>第三个周，她甚至可以下地行走了。第三周的第二天早上，我醒来后发现床头放着我们正在读的那本《达洛维夫人》。她笑着跟我说，她今天感觉恢复得很好，所以自己扶着栏杆下了床，走到外面请护士帮我们回家取来了这本书。接下来的五天，我们逐字逐句仔细看完了整本小说。这次她读的没有我快了，轮到我读完后侧着脸看着她了。当她察觉到我在看着她的时候忽然脸红了，撅着嘴看了我一眼。</p>
<p>第七天，她躺在床上，我知道她要死了。</p>
<p>我伸出手去握她的手，她侧着头看着我，忽然笑着说：</p>
<p>“你向我求婚的那天晚上，也是这么握着我的手。”</p>
<p>我看着她，嘴唇张开又闭上了，只是嗯了一声。我们就如此四目相对，她突然挣开了我的手，把头别过去了。借着阳光在她眼角的反射，我知道她哭了。这是我第二次看到她哭。</p>
<p>她问我，她走了，我还怎么活呢？</p>
<p>我说，我会陪你一起走的。</p>
<p>她没有看我，但是轻笑了一声。过了一会又摇了摇头，说不行，你要活下去。</p>
<p>我问她，我还能为了什么而活呢？</p>
<p>她闭上眼，似乎在思考。</p>
<p>她没有再睁开眼。</p>
<p>那个教授承担了全部的医疗费用。谈起赔偿的时候，我没要他的钱，但是要来了那辆跑车。一开始教授甚至有些不情愿，因为那辆跑车太贵了，但最终他还是没有拒绝我的请求。</p>
<p>这一天是她的二十二岁生日，是我们第一次相遇的日子，是我们的结婚纪念日。她曾经跟我说她觉得死去的最好时间就是生日那天，当时我笑着跟她说那我们两个总有一个不能在最好的那天死去了。</p>
<p>现在她如愿以偿了。</p>
<h3><span id="五">五</span></h3><p>处理完她的后事，我开始看我们之前留下来的随笔、照片、录像，去学习她的一言一行。我买了一支录音笔，每天去刻意模仿她的声音，并录下来反复比对。除此之外，我还养成了写日记的习惯，每天要花两到三个小时事无巨细地写一天遇到的几乎每一件事，睡觉前在蜡烛上烧掉，之后吹灭蜡烛平躺在床上逼迫自己立刻进入梦乡（可为什么，为什么我却从来没有梦见过她）。我唯一不会在日记中写的是，我有的时候会自己一个人待在那辆跑车里，待好久好久。</p>
<p>如此过去了接近两年，我知道不能再这样下去了。</p>
<p>我带着录音笔，开着跑车回到了乡下的村庄。离她的二十四岁生日还有两天。</p>
<h3><span id="六">六</span></h3><p>如今这村子已经没有几户人家了，大部分居民早就迁走了。我走在村子内的老路上，漫无目的地四处走着，最终兜兜转转来到了树前。村庄里的人走后，连树好像都透出了些憔悴，但仍然和记忆中一样的粗壮。我把跑车开到了树的东面。</p>
<p>我在树下睡了一夜。醒来后，我望着那棵树，拿出录音笔，打开录音，喃喃说着“我爱你。”然后播放录音。我一次又一次地对着录音笔说着不同的话，从我对她的思念到她对我的不舍，然后一遍又一遍播放，几乎分辨不出是谁的声音。如此挨到了黄昏，我坐上了跑车，盯着挡风玻璃发愣。我开始想，在那天的九点四十五分，当跑车开到她面前的时候，从这面挡风玻璃看出去会是什么景象呢？是不是一个漂亮活泼的短发女生正跑着迎向她的所爱，却在被撞上的那一刻……我不敢再想下去了，闭上双眼，用脚摸索到了油门，向树加速冲过去。</p>
<p>车子离树越来越近，越来越近，一开始我觉得自己会撞断这棵古树，但随即又觉得自己会在车中与车一起在撞树的同时死去。耳边的风声越来越大，树叶的沙沙声同样也越来越大。我耳边却好像缓缓传来一个人的声音，是她的声音吗？是她的声音吗！是不是她其实并没有死去，是不是她正在树下呼唤着我，呼唤着我，呼唤着我！我睁开双眼，将手从方向盘上挪开，两只手合力打开了车门，在车与树相撞之前跳下了车。身后传来巨大的金属碰撞声。我转过身，看到车身已经变得扭曲，像是死尸上暴起的青筋。而那棵树仍在那里，毫发无损，与从前一千年一样粗壮。我走近树，转到树的西面，伸出了手去轻轻抚摸过树干。手指突然传来一阵疼痛，我凑近一看，右手食指正挂在一个倒刺上，往外缓缓渗出血来。</p>
<p>我转过身来，靠在树上，抬头看着夕阳。我以前总是不喜欢在黄昏望着太阳，总觉得那样太落寞，所以我一直都只往东看，只看被染上阳光的村庄。现在我忽然明白她看向夕阳的时候看到的是怎样美的景象，我忽然明白她当时给我讲的那首海子的诗……那首诗怎么写的来着？我闭上眼，尝试学着她的语气开口轻念那首诗：</p>
<blockquote>
<p>火焰的顶端</p>
<p>落日的脚下</p>
<p>茫茫黄昏 华美而无上</p>
<p>在秋天的悲哀中成熟</p>
<p>日落大地 大火熊熊 燃红地平线滚滚而来</p>
<p>使人壮烈 使人光荣与寿同在 分割黄昏的灯</p>
<p>百姓一万倍痛感黑夜的来临</p>
<p>在心上滚动万寿无疆的言语</p>
<p>时间的尘土 抱着我</p>
<p>在火红的山冈上跳跃</p>
<p>没有谁来应允我</p>
<p>万寿无疆或早夭襁褓</p>
<p>相反的是 这个黄昏无限的痛苦</p>
<p>无限漫长 令人痛不欲生</p>
<p>切开血管</p>
<p>落日殷红</p>
<p>愿有情人终成眷属</p>
<p>愿爱情保持一生</p>
<p>……</p>
</blockquote>
<p>下一句是什么来着，是什么来着……</p>
<h3><span id="七">七</span></h3><p>再醒来的时候已经是第二天了。我起身站起来，发现树下没了车的尸体。转过头去，我看见树上挂着一架秋千，我的妻子坐在上面，清晨的阳光照亮了半面树冠，也照亮了她的头发。</p>
<p>恍惚中我觉得这是梦，直到我看到了手上还未结痂的伤口。</p>
<p>（写于2023.09.17）</p>
<p>（2024.10.19修改）</p>
<p>（2024.10.29再改）</p>
<h3><span id="后记">后记</span></h3><p>那天偶然想到了这样一个故事，但是一连等了三个周才写完，主要还是最近太忙，抽不出时间。</p>
<p>对于故事情节，我其实想声明一点：</p>
<p>文章中除了“我”以外，所有的人在现实中都没有对应的原型！“教书先生”与“教授”原本是有的，但后来改掉了。可即使是他们，也只是对应了早已去世的两位名人。作者无意以这样一篇故事写任何现实中发生在作者周围的故事，希望读者不要妄加揣测。这篇故事在现实中的原型，也取自作者本人的脑海中的思考。</p>
<h3><span id="后后记">后后记</span></h3><p>在参加魔怔杯的时候，这篇本是我一时兴起所写的小说受到了许多认识的或者不认识的人的热爱和称赞，再次非常感谢大家。作者并非专业写手或是文科生，语文成绩也并不突出，能获得大家如此的赞扬是作者的荣幸。</p>
<p>另外，也时常有人希望作者能解释一下小说中的一些情节。由于这篇小说在写作过程中<strong>两次</strong>更换主旨，导致其实主题是并不明确的，因此连作者自己对同一种意象都可能会有不同的理解方式。作者仍然鼓励大家自己去感受这篇文章，如同文中所提到的《锦瑟》，不去理解它，而去感受它。</p>
<h3><span id="后后后记">后后后记</span></h3><p>上了大学后，我忽然动了重新改这篇小说的欲望，并最终修改了大量的细节，甚至将“黄昏”的意象提升到和“树”几乎相等的地位。</p>
<p>我很难说在修改的时候我还有没有抱着之前的什么哲学观点或者思考深度，很难说。我似乎只是凭着心里的感觉去改。这是我第一篇发表在公开博客上的小说，我当时写它的时候是什么样的人呢？现在我又是怎么样的人呢？我在这段时间经历了多少才会让我挥笔对此进行如此大的改动呢？我不知道，也懒得去想。</p>
<p>后来本来想把这篇小说投到文学社公众号，但是疑似被拒了。其实再读一遍也确实觉得当时文笔还是不行，改过了后也仍然不行。但我心里还是相当喜欢这篇小说。可能因为这是我创作的真正意义上的开始。</p>
]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>谶</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E8%B0%B6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="69814eefad2cb4303353533a986e6e713f9359c7ea7999c23e58de2555f6a76c">adba944712a73720e1f31df1fce537445ad57ceab1752f19987867e0d977d72e7aa3c5a6384741e6edec61be5e2ce4effd178440d2739930d957ae61218fd26817887255090ac4a40336c354788a2bae2e43639273481fb3190c449df4e30a028fc485dab6b463c4f46b54d8a179b329bf99861183942714b77ff24c5ae09a419bf96f8d57b01828163b56d4e18e3f4969b90e6ad4e1472b9420049be7825fbab5210a66e9cb846ece5f8bbb16a60d523066da4b5e77b19827bbd31c173d5288e1ad81d2aa0de1357f6dac71985f16e5a9bff9e91c3de1cd71934706148e9cae98c40cd67ebce972518cceb3d3dcaa90e03db4c338d33fc3269daebf61ccbda07ee40a4564813c4ad0cb536530effcbf12433de0a61933b6fa8f01b43ef4529414f29c24d9a49e319df12191b1bcf69f51e29abf32a4ac3d6aa226869d70fb800d231bcc3815bff73b3834f8e48ad9cd1d7db5d910cf6e8e3a9a9e89f9adb1eb8701298e7e00fd43354bf673ed690a3e7fe0d633e540cd081cebffb482336163885cdfadf82a5c7e7c5f6b24daafc93d7025b8913708f2476e781c3e11bfd0722f90e1c7dc2a5fe547c8b527e9edd0822fc0b563c367c1a0604ffc0b360eea4b4a46783fa23aa8749222c67104c77e5736ab92e1fd44d0212baf370ed6ee98e9045125c55a6dd5dd9b25b2906c4ef4ca2ac9f653b34bb42337ce83f998d350117f1282f9dd744f01b40141db62265c874613417c4025942cb19eb4c48b8ea44315f96555aff416ef45e2e090abe49ce437e138ddaa0832986e3cb445e56f01631a278d0e6c608123fb3de028f1d173ee546d88b85a6954247a864570aded4b9892f53a37a96334e501ec23932062820d5d6fe3ee27a9a1ae291196bd48607898dc8c5a3d9307b8a28d419ef6df01ed1eb34e99bccff452be91c2a4ad7ea85086a6349aa62a60a36268086f1ab8e604b38d417b822d07deddb317a187e9a2866c76b8818abc0aec7261490cd164445514e0350ee31fcab389fa158e46295146bfa47b9671eec2138909b6d15d92b8aac4adeec6d5c8c04c588a72db774572911be3b16edcaa791d2b69d1e915902a0d521adbd99edfe551b3bf3d058d93752c8f195b633823725a9e760d2ba8d14bf889f08953148eeb52a33f42933a56225dcc5e9b1eaffa1ee2f86ff243c56e7aa13dbe0792c63e009ea8c0a55289201ecaf9315950f5d80bca35af11e5163158f57beefb603c6b8be9a06d6af40b45cc66186026bcf0a94b0bf7793ccf8b0e6ea3485e82184d8e4266f3b8d00823a19b2069eeeb29dca8324cf87e78249296b08a5d2f4b79830f4fc34ba56d41bbec6ffc823f77496f0f452260c35abf655bb059378b200b2eee5fa58c06003d959f7c313e67a016125379f9ecc29557418f46e94b8d9d18d8ffd6b3a1d092c124baf8a39225cf9144bc917ccecc60e585192ad97417f1b9e5a40cb93e6af37b774e7905bf05748babfc521c0299f4fb22785319c0ab7e633e6bd00874b1a5d10ff597e8e69c6a8d98bd2db12d83d527b7f4440a7c922e50c6c4cc27a66d437e3d86e55fb059c4f20f2566240f7a8d63adbbcf5d4e0fe18c33be96c48e7f28dfcba4c007ae0d2365aef8e15d1bfee49630e73548d68f15336d0835c1ab9ae576f77de83b94461177f92f5ee889fb67e40e82bba0c9e0ed949bf9a6e7474d53ed03e685f6e6004c3e4fa43e61d4470cb5b429605f59adde59ec4cfe87eebde7f6aa29ad7266062f5c99e7f6ddb9d48ed29dfb8106efdfaa3450b74460e78633e6f862e6386c14ef43cdc29b39ec67fb69c9fc14c98b70371bf66a33e636c9fbb5df356a9b01e3b4ac1509c7e7821f212b6c0e2ffdb7b4b6eac11b7e06bf6e7cf98d947c724f6397408f4c2ca065e063c985dc743539021dc8e839e041aac36d9066155410c5efbf4fe68e33caabebdb3a2f22c080d085920c4facfabc9ad28255e616618bfbae0ab818f8e47069713156038e52c72a93efd0dc1ff2e3fe968b116bd42e38286f3eba838b6aec313b68818b092e18464b0eeb3e451a40bd99f4c94f3c9a06cb119c838cce8f17ba90f42f3751dabd5417034b858329632e2c47f9a7606b20a8ee3571f1e7bce6f7267577417e88fd842a027f3e45592881413dd34cf39126b4cdf1556f18c4b15182ffe5c871c3c0484b293a7f944ebbcfc078b791adf41542bab0df62515a39d43b3358f8d8a3ee5744a53729ee0be90cfe0be3ee2d38fcb191021f67006671bedc18908a16d2e773feb1853008fda9c21f94bf7aa8780f30949666ac4049fb691ffd41669235d5057d6d252ace444ea438e93762569f8d74d9d317a2be677f475ab2b6153c31f9bb20255a82ccc2081725cfe7173469de3e86891abd9f83233290d614cde0b4e4de013095ace4390012a8217f5f61f8891658e544de42deebdf4d7c75478b1d94bebce352be66f82226e83f176b40f9b7ada2bfdfa8ae16a71de4dc9057f37f790a257afc974ed28bc67de76c3e91aac409b0b2c514cc4cfe19b83ec7f603220c3155345d0732fea17e025c397f49010cc8c1fc47f54aede08584e45669b6058e176bc2c56896eeea9fea9a499c097c5d8ef8304d13fe9a80a1a43227295799f81e1de8b985f8ece42346344e322e596fd1a0e380b15785dcea63facfe33dcd5414f8cd8ed15ebaa9c295ba49987625545c91a555615f6b87bcfeefb21675d341b7ad6dbcbf376c991297286d5dfb9fc1676247e82ab2ba4d5419d9112ba21b146a1775bdc1561f8cbbfac1c3bd11959c0dae96b3b5801598147c5d4e73cd4407685785030b537096234020345eab30e1d5c6cb547d1079f873e7b9e133a4c9ba1ada0df68dcb5c951e24dfcfa9082574b829dc8e86f2097855756797d58bdf4c9ef9a160babc71954a8794ecbb237b731d71b6327ef1893cd1e5fef29aa492628c3433fa1f4933ade473796f413ea3b8d1a1fb383c48e16aebd2ab8e1f384011cc096df007a773ef8cc0fb47898ad7a0da49ce9a8785f8f52673e13cc43949c59c896b8c512ab84474c6d88665e90799441c2022b4a828d1ebb68a7ab69170c47af1397baf931c3750d4abff0805916b73d1102dc727a122eb1156af99bede7131315751119d7e20a060b71b2f58608dd50b1510e1cc368b0b0e0767565e0fc5ca58cec5463407aa356a40c7e65b771f4cc1951526fa4ec6daf46024a48d12a2b35ea624f328325655a05c2d37d2b8549f6f8af998c4d228575d6297d9cecd90298cc3ca1298bf1f3d75e05758e0a474535ba9745c893f3814adee0961f28eec98eae159fa843a3573e70722a8cd9efd6170bfb88ee7ad21761d17c0a967c382c976b190071aecf19035876189f4d65303a27e3785b279b3db6ae7b0dcacb5a7a30b67b47eb1c0c34e974f7c8a9ebb193f3a7b055679ac09620a034168665d255dd428d5ecb553da31befe60d982bf3b844f032da9b535c6213edf76b5d5003a184a9f7f2c92ea305dfb31b665554f0edcfda11b792748c58645c0ec0bd794fa11d0bf6beee25d6217d98d3ad2963804ea1817b00192c5e888ad4b21f8e318db713df06f7c16149e58d4e187634ea661564741a0da34411b621833beae222b56d327d4096330e6e4db3ce035050f9d919ee7707c59d67a15ccd82b307bed8bf4e877368b0ed9b6b1f8a687a94272495167a653d843691aec69599efb67ae39d59c71e023fd4ba89bb52b30bc58d82e2f62896354ca830aa66130c7cd0b36a109db4008bed64d28312fa0970be2ab3141d3c0b4836ac6f335450018ae32a649ddb3ffdf8ce053a2d631654f5b8e841258785e00b9fd926b69c2ced8c6333419c17bdcb3cf406b6a5d4f4a7005d8265ae5667aca993974df87ecd717f6b8adf6c3d8c519e511499df848a12dc77e441bb94aaf06941d04aa10e3fa8adcaa9ff5020b15f048dd8c78a2cd1911375e984c2e387e8f3070cf44d03ab4f2ad7279fe7cca2e1d18519d23dfc31d4acc806b973b05129f0bea9bb9eb6478a40f27920cd544b395af7c7326c41b070014f47f294acdac5fff5587855f4463781200e21077a76c64385a7d42a19933ef78964efb9d558cb739d8614df8d268c2f15b0b21de5096ce41fa27bed36d59faef673d5ca3c864673ebd92fd94af1e38ae1ad30f09598913ccd7ed8d86cd38dd6c3da21ace457311f688d9cbe951123ab01842be58375f8c054cebd4f5188510eb4cc99ec7fa9db2e43ceb37f9a8205cb9168626d9170abac8864a2d9c9a4c60e599f147d74ce039b5c4c6a4976be0fcdf89a2755c621ba9414310d3cf11be9b0deeb03d80c0b937ad45b913dbe55b11c1a8b1691ef129237ffaaa8d9078cf9af17f596263448b57f104701d51dd3dd52dc7f964fc1a7ccdd5186b7ff193eec6092b4f5fb884c47d6986e8d8fed32241840516becb9f01ca0bef5d02077e4c05fbd02cc9b9a3deee26adb954e0292b9ee580641e19f22fdadb827bb1badf873d4ace2a6541a32c474253760d01bdbd44dacfcc214abf83e7057716957ea9e030bd449171f1092f0169e38fe9fc47602ef613fb429e284811df64bee059033504f2fc37b4cd112a8683185e3577b2168797e8b62dc151c731ca58beb46e3d72fb56ab17d47b480a3f3a4f5e4012ba3be18d1ac15d53c5ee821596ed7f6e6d22b834c099abd791d163775d4eee2befbd3facd140c3acc7f224d68864a09f91ddacaaae123b84071fa6674261b06c313ce0f6faa5220c78cf7b0543977c01a787e92b0e007caa558a5e7bdfe9a40da48ba2636668efbe843b2aef4f628c57865544cee54d8ce4c1387b0d6fdd91ba183aff00d91bc8f0f9f7123d2c1517127d43e3d564e3ff8ce08035091d5555bc1580ea2da03d9c4dfbfd4744cca8e7979715b0402994abaf678f08abea5186f07e1ef2f29d500cda876223ddde27bfbebd5abf0fe2e363cbe0f8325add02eb1b701d42903abae046582753ada701b96b5022c328f06998df9e6b6703f6778e6f5ee83eed4d93e61e0366b38e65c2ddba1262a40f688389d87d9655f3b51a2a09acb6de91c4b7f2e73c5efab0bfa1bd2c6a467d93ec47c5316d3f308de0064b3cf5acaaff528581ccd573cd4ff2cc1e83943a90b7cba78a75f02982f58ac98d2855c97fb3f8a32e8066d2d66150fc254544b2176ea167e2a1b259749e92f11ca2dcb76976fb669ba192a7a7d32c4ee2c618a2eb4be41cf3ac46fe7f78cd19bacbecbcdab3bb793f3bf66acb559207f2d8c015c4d72ff8478f1e2d5d84690ebf3ed55d5c7eca152078e1d0c50e0967f8f7fcec92fcbcec9b0c62b71e4f9d6bf0fd0f0bb48e9e9a28e9cadf771f3181d45e9506879ece417708b8ac2948d4b0db611028b7bca85f4346a9356bca259ee30cd4eb63226104026aac5ba84e1acacf02b1e066f899506733bd78b88b0bf9540794a0cd79af3e596dca82fb2c58ab7247e85ab538cb421a2b9ad4eac37ac65020fe7f1e913d3990a9673b8f40448d6110538318ac89f944c5b294b312cc3a38216707d232db6b29af7d2581dde51b4efa327467dd2069e1c3bf4e03a053bdfa0f3158af35788a0a647df877eaf83f52d1fbd299994bea852cabc08a70c147cf8bce62899cdc6d7201e22100a10c84dfb16ab0ef1e16c691b630eb72e3709f612b8056ea77c6dd49512f1355eceabe8430f7ae49a631a903997dc84b2c46b81e569094022fe2dc2c8458749fdb9d7948640de37cfdbb6534fb3d37087138edc19da64c6f359d32d4e67d5f0e0b94365d28b64e32ba856685d73b7775d1d633b9ad69b519ac43b59bb14496fb14354be578cbe244eb3882a117b09d8c4c9e7fe26e2ee5a7594978676060688c0e64c837d70559fa5dbe5d81951ca82275aca5df2c7d501cbe1f9938471cc250f984df82e5bf601df3b1ff17d3ab1ad110f3add50375f4b0d1eac0f11f251b27e7a4803f43fc2562e0ae08869e9d8eb7c86a2b38eb0856ea96f3c26327b09c1b9f9a327a25a44109f343559100cdd42e26ae8c4505c0d5ae8702893ec96f47447fbb07bfdcdb6902a62d642654faad2ad6635302c333d2f7d87593f2267cc05fdd44e702c61f4d8d9c91b22ffb7eb20ae9665db37b827eb7854d3535b07403dbb8b871b19986a9237325a3b10a4b37ae2962a643fb2462a4ad9c6c5867865f6f770ef984d64c612bf939e8832cf65bdc134d97b26923338ead314c59c8381c1accb061c330ea06113dbf51bd016995f2c2d8970a4913eccb23d3e774b3020f933a2f501f25550d8d2426d6804bb99439381feae34b79264d40247cc4efc944b6cc893d2e9ae37cf33732b0f1403b952f150fed7b1c90cbe24dbc9cc820a97e7c332c3649d7a77dc0be46273511eceb66366ca8efe0ad66120ef1b32998313c3b9accbd97ae5685e55a43e47d28f962ca8729d305793499c931df89731f977df7043e4ae11089bc51590cdb5a2e8cc986db0e6397692f1949e36154098e879c1e2f35539419fa84d33cd1fc7aba05427ca97f8b8f085d1caf245fddf5b99df4ea511655b66de9ca36e54f979adf56817b8a76e674900ff451ed266a6c8cb1ec2a19d1ac4da18d67cc907b59a6847bcb7cf37a947abd30857c5afe6efbbbb40b8ea4913512f25911455169bef033d04c72dd97f1782f922bbd58dd2ceb7516077df2597f80d3fe87d25196a054f3df0443701239ec5acb379f0297e3afbdc51e218ab710b37311cd5e74eded69392bb6ef128968d792d250506bef6b513807b1e04925a5f614c6e5d1bbfb19ca5460ba63a4471dac5797490ea11df5c28ff99160e375bd75b4c6e33b8c4b902f0987985354a74a4e65ce212e39b13a818f863f7604bffb5294711b0760dd700be32677d319c7be5ac789c7b23a17dd84105034615b3a2d1a51e6d39d4a6e29b56edf76d4cc9f4c09c65776b3a5cdb8f12e4c336dedbd107f202dd22d115dfc0bd79c0de749e3e9b40bb818eb8b4170368198a016920fac9b2177b32ccd4a5c2967f822ca2fd9d00127c608ea64628e16b5ddb5e8384a5cc1230b48a3b9d2710c55ff49af62e979ea1f3d3b5a8c78042a4d1f89754c60cf946be37f116fad50c244489da57f126d4b933c77eafff8b14182a5adefbbe674c85da96173d1733f6c4fdb53d8748afc276c50342a6b4a16fb198ba5f249e824be6430e3ca7712c0723fbbcdd46ffc03402ece6d15f79a97d5d0316d2366d42938435efea4cc3e21a7c1c7b01ab113c2d3c4c90ec7ee43d0578525ade8aa0a3281ef053f51ed2dcb512517d5052f243e58478f441da3003bcc1984a37baa7857edaf2e8dc383be23424ae318406f496ab56d020646900721ac7cd07f8bf79a0e15d93ab5cd24a13ef8fc896ed21c2992a33f88835d7efc2b8abd252ec2e23f9c931ecd8a6004cba8ba05f4a822a23d4eee34969f4573810fa1a29ef2aed8708630a3d85b14dcd35542f436e0bf1d548a9c0aa03beece63cdaffb934cd92ca529812dfbeeaa70cee3cfa73f09b72229a6533c45f1372336df80e693c168e4e81113c9406314fa89d4f95229f61f95c615ff8b246acad709bf260203f9b4886721239a6327bea1c2a6a13d0246a113be10955975bc87c8ad5f8e651392c5d80ca2df68def51fd3244ee31d46cb4cbc6bed1fbf91d4440d32a206d9e5ee76de6a00351bbb04df23b7286efb710c48b675ed45104d10a7c62421f9804b4685c57e4dd84fd4b0e94789a6cb54203065a7f808babb13150c5a84bc4edca29ff6728d259d17b93bdd84ffbef58fbf8c1ee164fe2d0853d14c326d243a592744f992047138395c760b69e163fae137be643404911ad09221797d77d3b22290fc55f43402083c35539b14647639e6039fcd0e0a50202cc9d0d147dc1d57b5c74191bd019a611f44a021b863a35c7a70c0a5c2946bf4a3ac70c518c54d5ced890ae95ab31c79572d0f5d45b83726d94c9777dbbff07ee43baf67b714e6d284aca3c709684c8f30fa559a1af36edda701f52ba9e4b6ca20972a9bfaca6b2a594864788db4924ea44079492222aabda1bb5f3b0ffad465d557b13becab059557b26c7148cf2010d4410f57d26fe1c3ceaba7e9f78d6694aa409cf3f3d9040690d565572ac7c0a625a1e5e000c0d7f8e82f3ace54c418646360c28ab53ae40b097320031aba7078cd399b383fa7d832e439dd29b7e4985283fca3f0674b4964897145b315e287818fc1a32f87378864fbd02fd4c8a66be2e5fafa3db01e4a94ec47b54464afda2003b90b13c82e4a449d087b4905d01e3292f96e56f831b376bee768030788d57a844b8b4cd9a2e32204c88f5cb9a8c6af880e8b9321aa0eae50fb07be6346b86e3944fcc542d46bd37da4e9f18e0b07551e6192c488f8df728e6739c00ab5e3660a16d4f7e6f6a6908b19da2267fe99ceb456755873786167f204e040d46f4721c4ca0ebbd929f0ce7d8a597c2d91dd7dbda43560e2bda5a5294785bc6eff5ffc217d26444d2d9a427a422aa6e934baf3f6e5433b05dd89f067b6f1cbf5aa7ffbc7694741ebb85a4d465e7a912842ba0a6173edaa4f73b4ee540e8fe65bc063733c80a143032ffbe9b347161dce5b983d3c5bf5171bc154b18d2d8afb2b4933b042f548e2f72f7c6953e01e43323dea4b895e2bdc28c7947fd759ccb7e4fe8b7b9ef7ec030f0e99b56beeb422e896d31071ceb1fe54c92fa14770c09c3d3934fb229c8ab0b4925dd25714ba6cee30a5fa02afdce6c8e573eb104cf72d765707b358a9b526b51fac470e8c29497257aea3154098fdea934fb5f3e9e39ac56d34fe7939dcae6203fbdcd129508d75fde44a6396311b1c55b495c4d333a61769e5984e17f4ac14ee7fa2927b57771092fba00c6460d3da9a64cbf83bf350c97c6dab2ad9c8d54fad0bd5ba6ae32cf76aa391c3f3d373d7f69138fa5a620ad66417da7e2e7b0b71a76eb4ccdad4fcfe65eb469b8e5ef7b040a23067c11f7bb92a0f72e2504f3d79d90625a7dddc1ab2f46b44c21296a3f443204a49b93067ed26e5d0187170c6c48444b7fbddaddc272aeba155772220febe58daa8949a346f10a37ee52258b65186f8819b759f0eb1fe5900b2b07a3b8c9c59097ad854d8e2b76e9a4e655a6b707dade7c1ac257f8b9d2a04f4fdc9c8b9c22944c246b656dfb89382834d50164170d2f19c24f3f92a09baedd1a3edd30d61408eb0342d58b0e31d1c20834c3f745ce3db1c27940c129b0dee0c20f428328cf8c3b4e5e993dcba3df93f01d51fc96979e0cada5fbdc3b1b7656581ea529a8af7628d984dd39ba01368fa83a20c23f14075f407ce24d034bc4be6f35d26e7bbfcdc490cb2c25c26d5ea8bf4f82a516ada0627cb039a96b436c0d9336586b35d0fe99e0b6c213894ed3257f4079db77ce97c94a187699d7e4a5b215691d503bd46b241c9f6ac649359e290688c66dd3a4fee95d103319dc53744c7afda662a2010af6230a57d2ed3cb8d84ae79e858ec2164f6cf3bf9679ea6bf0b45fb5d981e388767a5059e42795397d3564a23925469089772a46747bf8f3d20db39d0fa0ae2939faf6c4e8d9434e25586402e07b1fc3e21d65df419f526cf9e204986abe3626c0ac4594bb1751aa3b4fdd6bce69d3c425b3c15455c1906fba3af4b1d339216d22ac973f44f1875179a45fc706004b84383c084caf02ae93c94837e62add8e011be95cb01477615d523c66527093a92b5923a10f287d214478e042c1eb9dce0a58a46cde6332c96e45e7132769d47cb257f34375c850eaf399f7e491c6b66bec666d9092888f73188e343652bd33d52d1db9fceeaedebc935ba98d6e75e5d50dec4e533891d3eed711458098353a67d2f103d2ba340efbe36a51677defcc4265986374110b85f1f9057e4d8df43d31765d512df5d06488582623c651b5346b033e4c0bcfb5e5c275f40296817f4428772cc0351e97802667a901c768117ef8bfeff45f0e9950474d0f45498e621c792e7e39b90a6a21e190cb506c2fd1f43043079d3421967689115e2aaf7c454cc219b262f682f851ae7597ec491a45975a2fab7ceec1adde352dbc5177f573be23f6e35c28a05f39121f90e82e9cb44662a7a6ee7d64c50d30aeba888257fc71f1bd14d50083bc244ed106bb6487f40ad0601b7a5d8dd10466f721f34faaadbb1763abfe6624dfa686330adb74a5d71d8b39e9cd05acef34db47200e695681867faebc3ba36684a2a73bd40cfa2626eb7bb3a8acbdf23a2f841c54de7c22248316b26616ea90a234e2262aa140d45d61c83b87232bee5612ef51106304daacc50822a016fc4afac5d44b22280c03cb0546db3e4d2ea8b1c3c6af91d8f5bc2b99394451b5fe5f2ecec6e4b506eeba0718e08d9cfa1d218165c8c66e0f1764c0bf3ac815ea997f8950f594b0df02392328889c614e85e499508c3938b0025ded8037fc6b6c820c7275635bb83f238e63407258748dfda02c88ec8e0fa836a5721a4d1c155493dee63bf48354c835335e8cee78eb1ea8dceff3789f582ec4be9f31eb9be1271f6d479885e5d7473ad333929547783333c18e17ac1bfeca4d1ccc541782e124407623604e49e7075433445f582ef72ad431068ac8eec73344e9410a746494165ac39ae3f5fa1e257d8907266474890f16a43ae4251d6e97984347f9f15bc960dcdb61af5f4cb11e2856f6ff91a814fa0ed1b8804da2fe7fd63da0a6f8387e6db9ecc316a84bef264091ad513a383ef06daf19dc26f304e5c0e5ff8d9e2e9ef2e3aa4e7ae7850994e19f739d6b2586ccb31b9f2280037d98dec2b71924cdfb153a490fdf2b18c00c99bc228f421badb31de67e351aa8111416fa1fde262dbabd768e7b1988f767271157b05cde896d082bf41dc0d96a54cd78c0116e6810bcfaa0aa4752ec229991b7bdbe8ec619beddb244ca284dee4de1d15bdebb5b1cb022eab725db1122850d56c9b98e41a1ad02d11d42ed6bcdb69691d5343dc243868f93ec8d958f9e5d5d02256fa917a6790fcc70911e969f67fe0e5c49e9e20bf3161802cf68b09337ab0e7308bf6684b7b5d6a46aa69724bb40f90c15c8565f793faac27ee28a35e63951633bc4240889859c8783ac5797abd6ea5c5de452ef98b4a5a35d08ea8467cbf5f6bee0e50f78a9d1896bae7bace353ea89946bbd4b2e0ab97a03c3df353aaf95174c8a9a56022a5526cf5adaec974bab5726d024da14b3f627adbe0fa337a6a117f770224f23337e287ee7bca74caf233e30c9a07e582bb2803c56fc6bf3101fa116140a52003e0af8f2587b5d7f0f61185358eca42b3df8f40102985d6b4c7555478d36da069c321a4d9cc0dd4996ec085b831b72226b6e6dda061eb7b38d95f379be6a7ac56982b9ef60abe178671693b4b96a48a61f13341f6fbc24f5c71c2402b1fa632e74a31d7e1fcfdbe82a420413e650662d708fa8a029a3eb155b031794ab5ca46663780c267fc5c990866b9768d13901d55cd79baeed38d0291481dd06bffc5c38b42ed37b9834dc55d1f5423de04cca99dedffc7b80826806f44fc44a763046e969342cfe278ad5c20432d80bef48130338b22e437ca898ac795f292215ebbc01b054252989b3aeea6faaf8ae7b729de2fb8e51b4f544d5ca9f6db3f93a266a84262b9d7ad034b2ca9f27c99212f8be6d8c30cd6ac125741b654f614ec4f89a16979f0bdc5298cf6aa8960668963f378b99ddd0950401c3e021321bac32db122dcdb4ad7d8e81049d18d453ab7fb29bc0f9d16b045b996b637bcebb5de03590aff3ff40dd180b7debda4386db7b904e626d32d21d3bb2cba3c2f0353a561138aae150d330d24f82f52e8fd81f9867b6a810531402a532193e696de7e947e967b5db1f83546c5dfcab9682c85db7efefaf353b44ba98b235f31ad1866c4ecf573bb0173bc3e9abeb14e1610b329a1155ffa8f60e59e6c6cf25626032db551c66ae8456daeb33812dde381d1be806e4dcf18188943853fa698992af3fef0327cb2449db0ea1d58caf07b11e2596bc5b6c1d0179b2190bc2f88643c3f3ccbde16954582f033f08b706efe95cae40527220eb215aa8dfbda833f4bc91bbce1d8d6cf831bf692334dd77c1f8450a93e2c2d923d38e5b8b173a2a6bc7059aa6f18b943934cfe4c082382bb8da9c411290ed673f55c5205c9f3e8366bd0e4d0a5cb9d59aa1711f957c245af9f930f4ba50d51c3ccac73d32d9d6aa4ad3ad6407f5e76eb466f929a01b913f578ed41a6ac64be63ee1c6a08ed8ab001d5c477a95d8d13eb871188d0bd4cb02338e78dab359a4cba472e09d73243c6c128d07d951536c019bbf65a87e2b83bfd3bc7eeff4bb3bc04393b3625ef46289e0d028c19c9c3b1d56f4b552d867b5adcbbd0c47551ec5c653cc7ee30f06cf8e9807ed233c78e4bb8a299dc237a3d3eb426e1eeefdb7755387ad70b15c9320dee1870a7246b0d4b2bb28de0dda6f059f84c87129555524ac96d6bbbfaa3d2a532e1d1fd86212fc82c5bc60dc05e9f8333855a7cd4bc6d06b26611839923a2ce67990066128d34678d9254475e6db74ad462f8900351c9ddbb364e928c02cc7811aac1c4d0bbd1c5b25513ac649d40933a3830f83b88cea26bd4da72e471ff28f297b480a99c125b299b159896a72ba1d95d4decc3649b9f0a7df1d190c3d3ad9a1ab900f72197198b7082f0be75982f67c2a9b55af4e50d4d55cbb889a1b541913dc3f8a3a8a649fc1e8d4d7bc22085b72998cf9409b0d89e88d3d6ed591b4bc0be1c6ba06796b0c3e8373a3f81fde273a761eed274546688c9cdb7dd7bfebc772be392ed31788a12671872680a4a0d4624f35cfaf7b2799b6dcbde96e20c24152a32860dc983fd7220899beff5e76218c90f8e09bd6d91942abd545b67155a1449bbc23476363126f7d9f5996f0c7e5ebb675857f86c82debfddcaaf02045d709abc1683a819a8d1cdf981f15b7499dfcfdd6cf76461f187da0db2e98379b5c127cb3bbe0bc6fec3026eb15ee075e9dd50a61116b446de62b85004b002506cc432916f54b2ebe0e58b98770f993c4020120c3c5962a7ad17983f9a112fe1ed7ee97d592457bdbe15a14b3c3b7af9a5beb86c838c55cf6248bb3bd7a8331d7211ebc52b064140262972a2ffce921a64ee91ec11a24fb8a104767d48fc47b8433b31e87d834cadc7692f03369ed3721c2a269682986d788dfdb15664ac8c46bc1a453d83d3cdf07e4302daa844baaf1719f077ce39562238026c37bc95dea23840e564107679983f259ffcad9e2da16431177bb9ff1fd40cba0a7595d93edcd382bb3f4d42e747ab3ec128c30f4bc162f1d2b935dbb2e8aef4ec508007ff633e2ce7c3c6691c2c255f5a27eefb021eaa804ae73263445d24d2d8858428e97a3289a37d959a1f58143a3a5911a33b9644959ab033dc783b292d5cfd3513ccbfcffc0247ca5775662ab55069ecb86f72c3afb01cd14d72f8bc59bdb7398df67bdaf4a421d012531ac6c822009cb19aa5044b45362680700b50bf121c5c3a6f0b96f12e6c63aa0049ea33c9a8edf41336c69538a9bdb0b7acc8adced37d4ac32ac2796314119bfe29a917831e980676757cd032f63f42b4fb7bf5af43959ed31221d584e1eee42681bb28c06c551f4d06311d77b7bcfceb3524825c30dc92f60e9e59f9077707a48ec14102d00f42cbd70d5c0e3488722170b934ab8628d522cc402a92862b0b9e38e39769c048fb88aac32986e84f880a7f6413142e5c8709ca37f6cdb9bebdd772fe58aec4423990eebb9c5d97e30609696f9f533fbbde8544131626dbb467369ef61acb7a58d8e6021024e95edd3344fcbcc4ca99b1d7f80e92c3fc6fbdd97fa1b96fab1011809f66303b5fc883abf3eec845e93a62613bf0771a124a7b500d62a1acb9a10291aeb37fe3375134efb734c86eec5d8992f311b67de0b5785daae10b5cb267d8b0a78f43eba2023cf70d865576430f96aaf721e2a7a1d245ab2735137a4c040be9fe809369b765374f031f3d60e7533e621498fc4442a05f37c58e4356945be30ddc3259e1c47810e86d33fb9ac2aa0fa860a18a9641f8ee3e0466c91fe13644ab2a6d9de74adf8d7a6bbfdca47126a276dbf6a03e6e94efd708e1b7ac85557922a5205b5d9192115cf578669225eff9515b887aeefd7ece8b724aff872157f9ef3d130ac8cde93114866e321e3dc5ca2a66a9e014bf1576886c60744813b4f63a024ed97103b0657efaf495f28476f5f998f34bec78ed349e6f1a02ecd0d0883f98a0ef5ac6169fc56db6448f5c992a8939859085acd96992aac455b11f7ce197e4faa4dcf151f6f22699755216e1b0882fbe4e9e64cb8566e605c19cba5d8433c188daec6bdacabc0640bfa72de7e0f1edcf81ef79e5d1b06aff061cb8b2e5cb2543d3dfa98ebde23d35d0465c93a9211c4016f00593632e19007024641c7db065413d50ce70d7bddd4d3dcc5da07d1cc3c0693610ee069e6645c6ce9c46d8baf88e1fa02899770cbe58e54011b3997e6de4e8d7c278e40e97681d4d4cc3bff1497a570f48e60b4200512818de8f12be34c6e9ca0278de7ff67ce83d47c2d9b470d493bcd88b3bcee64344eb9becbf3db2cdb4bb438421151d4f44ed99d2adee027dfb25ad0de6e84b1a7c7de7ef83f5ca89308ad4239e5cf30aeda70cb8c36eafbbb676dd456969aadb86d20d76fd13ed2e67144936f84fb2020afa46b4a52c3fa2f743e03a2b06245b3da0be15cf641a3c5daddba6d47757e05860b6fbad449d0a758cb716155e5764b41ae74239c170655b82b98ab869c962c57d60201c690868653ddd8d9a6c938508114215b962b32f404594c5413017eee50ad9bf5a4ff81b3c274201b807305cc8f67ef77c6bf5c1bee4d74e22bd6a77896757083b0d6413ef9f6ff26283a70e0d18520f2df0add8326bac289486e49014d5699e9df9f8d1c5027cf790c09a6ea5248adb15080e4b1a2c0e88a82012557419ed1aa156a5165eee2771289bbf740976c5d44920bbfc1492e59d83d2e7a4feb873900b90ea02103f8cad098bb7eb4cad177033407d027e701a88b22d9d2f3f2605bb8aed9743d14b71d825476923ae8ce7bff6b3f67cdd3c90cc46f17390af3893b93c6affced7f3252c22ec00b5270c7344fdb1ecbc735babfbf1f7fc984a5dfc3347e5736ac16145ff5da1bf18628fe7b0ef05113769a3905290eb11d4abe09d76811a99d6eac4afb69cc2c6c92f079953497f1f1153be912ada56b5a5a91b4c3e07ee13d1dacc0132fec3dc4435dc2330976e26395e1b40088d38bfbdb78df90d907c46c3594622864fc7500febc2eab608285984864cf1d73ffb98566c20b07a177f915d666b9e7cc226a3aa83e6fc31eb0f35640dc5656b2c4dc98f3e3b23f2b8be8e3f0e779b9afc727572a35992a8c0ea5fac4e2f503710be8f812b81071fe1cf301762a2403ddcf8bd24067d10f38d163ba9eb3ed7803fe93cd4f5d56b85fac27ed9536e9ba9d8191a02acfd3a88d73b01951d3a895f68e12005b6d4d0c7d64f66888260207cfb31044df79b6e02422fd4b3a277d448e28ded99cfd89c145a49dbd14f29c9b5ec916160d9bc22c62b829935494a6782a5863c4fd394bd46d4f156197659842aebae1965a9de3cc9c1b49fa0dc31c79c1a049023e7059706bd98fb9f72bf2729afb51859367900dcdbeff57f09088c178195c458bb9546ac810fc701753d71617ac0c8e7a38510b71aedf6ab111ff61fe3970a48994ff57a04b936b6eb4b993cfdd8e7f67254a7ac5e5dd7bffb5370a84d3fca80bb4cfb68434c948e885f417dfeac481e246f0a4cc1b47630459c12faf05debc6d82a2e665cd2c85ad57bb0c359ee5c4b9eb2dab29e1c769db057be7ccdfc7ef7d4c7d5198d7465f5f361072fdbfdc6febfaa85ee9fd24697bb402254bf60ced669a1af6e4fc03b7269962bedb6d1cce88f95375bffd2628128194d4cac6db06e8e380a8b4f058297ec933e5adafae4509ce8e25142ee7ffad75bf241c90bdac95111088e8fb6884ad3e2e65eb1d500f42aae97574b6985ba357666e9c0c646c54c08ff2769d50a7687bc1d9117a15cf266ec9f4bd7fcaf10a9074dbbb9f5d8b35e88db6e6024891e168b314fdef2133011864f14662426a53082c9a1b90b604a494953d7a94c9608700e2abedffd8814109058a42bad73d8839628e497d34010d9afcf6fe5803f4f4845864732863ca09d4e764a31631c2c94a28a2af5fe0f64a768aff4cc31b2c76387ea535517173a8a0e9a66fbaf6b6987e952e9328cb0924e4bb54b373b70bc744441dbb851754e13afbe6916632a0c719df5837743982eb88a6dd6d0302554c09c55b813b7b13805175626e77f44fd8b2d85b92abd06f1104fc79a630cf91809a9d4f5180b2e32bdaef8a217f0e8837a38e41e9b0e20afb955371544dd33a547d3a9614b277033240de13a1d4be95a6b87f7e754c587ed8fa732e2d1d75863ca8b2eab0722dd3d61a045d3976d117a868201cb010ca9bcd71b9963c8688687829ee3e860192191b302a0638a2991f9cbb26e6deeb88b71e320298760eef731b36f3ca21a65013ed6a2d718b17a4510e9ca7559b6a297b338d473f00a975f7574b3d99469e3d627ea56db5f17c89569f9603a650715d4f5eeaed5ae3866d717812a02f95bb9ed0769bfb6ca03c05be04d220826d198a29e3d186b93ea515f1d9b06f071aedd9fb18cd4cfcd64629f9847c9bf39b26e0f07ac296dfd8da297af6f5e9fc87ba8713838482faca3331641a00dffc046f71c9fd5069e31e66ed46f9f0413e5ae0cf019785974ff982a3721b4d6720715c30058b53d80d6f224b0792e8fb12c9671da71da5394c849428fd1a5d36c02d7cd650c7341a03755b655dbcab195d3e8a9fe307d606653325684786fcea980d9cde0166f91d4126f4fb147f9f2141c2de1af2a879c24499a5abc1b0824aa4837a812d7bef1bda8e22031a11695932b57681797c0d1b5faa96b23da10188b1c232ad9de816bb6f8a6622bc61963d948da4e256d2e22f744ba01576f86d44fcee4b033390604d1511612736d12bae482e5dfa921ca74a4fa51cbdb7128f91de821e20bcb95c45de85613d423a2c612512034aa8f4f2cadcdfbffdd9cee9a3a31da8929c71ef00a0bbc6fe6d0ab54bcdcab8c916ac87b35bb2dc9aecabea4862665dd15ac31c892288ef125f54a190f7ebe7ea1a21cc3569b18fec00ab1018ac531cea6671b5d24c5407057135deb3f91c40a5ba058c12395e10b5713f5155b8bb87d4705a408af40470c43599cef47ec90cec13e2a4148af84465075c31310c0f433063f3763c20c6855ac7ba5fcb2b047c3139cd106a039e4db8497473a66dd48930eb8aac6bddd8ade11cc5aba88f0f9507bc2996f598518606a8c82a7b48c83d251b9267c924097e930a5c82f6abbcf7a8ef20bbff375c5e88180c125dccc15b2e5c91c606eaac322c6a1eb39ac7827ef8ee6881feddafc01a65dc6352b05b6a3c8c7663580ea8182485a96d239dda1241e54a1b9a7fa3ea08096cc7491a949231a92121ebe616640d3ffee82c10ee738ee05d58120939c317aa2ad88420732883a5be78a754a23f24e98553a968d513ff2b3b4e80c48302a9441bae38abff51ac3fd67dc48a997c3284824cfd991118dc298b59a0ff380cd3272732a2697805acc5f9ab5158fb0abebe96cf408482fd8dc5881857d15389717401ce8a4392cd7286e70eee2665a3973eaa73662eec0b1dddf6527809bd196fd3114f694888e7ebba27e5e607b850978eb351ba70773b623943d4a61e451defd4f55ae2cd70ca1527ec22b6a913dd423ba075f27b25f0e2c22923e3373205b4db85fab3e3620e3d44f907346ad8e215c155e9030fca283951bfbc3d6f998e361e6d80428039223f9cfffbff006142034a821ece2ad70ecc70854c8d5d36d720aa2d5da0a15580103f3414273b8572017d610030de8019c7406e48932ef90d783ee88198420f917600c2ecd640b3c993280ec0cb358eff85aa17e5c482fcc6d4d9d13a5dc8e4c05b41c6159aa41ab5c806069e09cb1c62206b7f3d3bb2958cf1b4a814943d0cec02466b70c40671bec7a7ea581268d4c1bf6261e791ed0f834df4ca6ba520ce58158691b30042c1b91d5b027a351f8d72735858b429edef333a0c26102f8b91e787606867f22ad8b748c885ff57f6fba8e7e99afdbaef35f635facd48c52dfc9ca2c9473c87c7740278f36fbf4d6e96f12213f8badd7514e4fa5fd40ab8ffa7aa97bfa201f584e6f214dce0260330fe133dbea98de4feb6a0f9219b17542677ca2acc77b8472fdf21b0051cbea190f714fb1f2afc178077c028aabc58a82eec96f3d659fd5b8559b41fe2e920674bcbfdec42140ef4720f9bcc3148bafababe5f5208aa29d9f1ae5f7492f11e755e1467622bc33f8c7d421f146b8418a2a309267da9dcdea51f86d8215a09bc527aeda42bad6945a47a43448d171818a0bfc4af4891d854aecee8a032ca40b32ccfab3c8136422599be1c0352e90589cff4fceacf34890134d78e47527f59c2dc185bc82484fd468837ccc341c6e1d299d29e1df4b463477e9e8a0efc5887acf5f35bff6d09818dbaf8e1c58bcb4c2be8167ae5480425500d1e5db0fa36c94db99e7d592307731ff8228c20d118da84e4e67d921508aea9acb3de0a8f64262d4048d22d81162f546eb0670127c9e49249bd1c8a1b95be5b65a0727189a6a2c975328221644148155405d82d458bd864752bf969aeda56ba50e7830dfebfd8972bef723052e967d550c90d3eb447ac3d5bce779653e7008b411633cea9f4dfe200fbfb037dda8777e1c88b15c5be29a6c383e0e766310dcb9473cc3b6883d0912776b29a49e2b55b479391940471e239aff2677e02b4b4592106c3eec1b0041c7f7fed9a63b8db9343f177b5ef70707a8369f0ed1a8e097fb027bfdc2af9afae9b87b630ae908826bfda41e92ef288402ee26b54e1b9f1ae36f7851122dd5cae7b7f83e7619172140ca7a08cb2babcceec449a96e78254954ad979e8402e34c8e2685d5b931d1d065f79e53c474a90e267151b4f074e1d4bf56f282acda0e44f5178bc18e3dba6a8b92dfe0d4e3cc79cb8037a42c6001c17dba9d57355ff9169c30dd08ec841795a706140100a3d16d1a105baf6ad15a89e02cf5538a37d67fa60cc8f07658ceb1d0072f393c83a5a2b80ab1a422c87f1c7c1dd2b57c4d4621a970b0dca73c3059858ca72aba07f9cce17d10c4e9fe633e9490cd977c898fc593f5e46226050210391b99163feae48ed8cd81ee8195061d9c2136839f5fc9bbeb2a434a16ab820c44d2955e594edab09f531eab0f96e567e36f13f667f38c0f5007d5034145db0080cbb49359109f9137649435838258c54b35d256179462f4c19f9605ba1b61a87f936c720ba18b710946932d9144aae69d4b15454d27312de5af07610e81dbd8ace9b69ee65ebdeea5ad4d1016cdbe5a797ffc61254a9090fb9ffa36aca59396f76eebbc50248cc9074786eec48a0dc99627c60d6e4497dd8052c3c92e2de5facbd5ab21ba20cd1f922bc5eabae049bc21a067b76226bddd1f366d6a0fb33bf152e05c30503b42a960f366742583fe57b75165299470da76ab30fe118e6b8f242e53d464390c99c394843ceb406d87b3bd58f773031b20a6dc3347268b5b7ed3b26bb4896a7d11dcbf13b296b76cc5093076ed179e929c7a6dc97ba5b46aef3092a73b0537c962a3fb111ec3f81e7b23d9b099b518b02a8612476bcd9641e436899dd932cae5008f5e2e31874cafaacc9c18d07813a232eecf1a9c8ca3d80704a9db77936ab389c9ab262cc72575e8713d861d3144bd9416caf4ad5ebc3c4cdacbe699f92c69ab7fdd756899a38a7e330680585da52f504a7fb4c048c9c6a27244179f6a736583718439cf1238a313944cafb4770b44166e30351612ee43ed3ea082aeceaccafa170b1e1f81b94599f15fd4160527e5b3e0237a63fbed4e773c5c20c048094800f55ee53912688e60ee98ad0c04dde52ae80034beafe83942407fb7cdea393e7bba93f470ab03d71ee6742d63387d04982c58cb575f591f4d63ed5fa476f87c187238698482cbcd4236977850855f12ee2f0298da46561ed02b98198f87824bfda5eae98187345123c460e7234cf86cf695820e736170933606a1153a32bc2f96542de9fd487f58c4579afb8927f5a9ae458f9a074ab2b456b87e58191f9ca60329c8923bcad02d724e995fb5f2b287634079d564022261fa002ab547cc146ab5d58ca02ad6bc3e51db3a7cf3c41f5aa3401f97103ac03649c16163f9c1246887d9f09099da4f4b3b1b799c3239b1424ab5f2a877f0265f30e6d789e99b1c78888d04bfbf4bb9d68b6c253042bfcd5aa451b7b7d3ced1d60dc76253ae352d282a2ca28e109654ca67216ea9a42c3bb2b91e8222417a65209c1a1e3566c9a78c6f63c11eb1e08b8ced8ec932763a1efb1d97e514f9e9966c018edbd631a7f8a62436e0fe2958acc7b5537d1330a3a536135997606fad91be29f3774fa7b0741f5f2f93e9c722ea973597059cead191ae40c6fd62d236fa5f8c7947483afe6f290bafef6dbf169517d530a6188e6d0a1b143cf582f95fc17d16c43bf13879aa48e2adcb5c74f1cbd672b130487364aa8bc7a2d8040e606d76ee5a5569e958080baa16029af4f6a98cc0941c1fc78ac72c53d47833defd40d179d1c5366d211a4e096f4051f025cd6413348eb94d608bb8a0335488ba2b1aa9a9eaf9024ad023f425a6692cea6849b1b7ce631e255f63f7b3aea1e752eb3f51e96aad60c48bae2df51ff9232d44601e8e647feab51fda78bd98e3d36cf3a5e1b872c16c56db99df984ff5258d263e1e73a89b2d41736edf9ecf7cc3c548327068ad22ee3f433476efc37b85a3a2f0fd0eb2ada8ff7ed89e30d1b313dd23f55e7df04ac05899d2334a23e290f7f5d66e0decedd46fe356098bfc2d8205f1fd8545788ca01500d21f8ab21f59ddb2764eea7db140048a0e98e1f41ee2f8cd0fa73e31a480d2494dec5f6549f76ded4b129415dd8974a617d64e756ea301c61202ce6f0e2b280847269e640797a06aca90b5d848a1d22019d314a357fee8b4071e872c59235775cc7a8a9366840882c2efbe1a1a7bc38c85fbc7b8703f7b96cd83c2e2c9146167994b350c4fe431604bb281bb752a119fed4e1a99b25bab0f4f3fa77fa73047a81c3094402e5b4b697628936fb6710e4a88e7e5b79aa70436900d3fb499770ee00c6b355a56645d4f4c270436d1d5ae753d0f6527ad0dad5570d9c76ec67fee3da2f79dac58f74eba2fe40f1035f7184ede8a41407babd63ed9e0c1bf3948495e7eaf460ecb5c1ad4947cebb88b7e076c287178301e21412d16a89f606c680b872847d99fbd7a384ec7f0b59963fb2c9c48d41e572a8a153793d174913ca1aa5cbc8d10b6f06d0fedd9bc43fbd4461a3bc2d25b0d7204370f8d2a195b4e390c712191608fe6263a5cd0252c52ffb3093d8d120d114a5ba6108d798d05e84a9a94efb7368ceaea8b1739f1bd267df8c5d10c2f7e5475b874f42591fde40ca405991e52b0a43325e40c425760020ab92309154c7d85dc76defc9cb54b208f07a80390255a9362f6ee70580231d02ee95dd32108241e7d2bb22d5e2657c070cf524b79ffeefc4197674f31d6094c8e70af3f13413bf80bae0c0040c0785e926f9f0ba1816cde374bee779a4afeaae8f63d9417e61ccbf06c0cb85fc7fb5a60dc645f160da3af244a4f0c85d372e86ebaf1d191456c2bfecdb5fdb1611f7057510bf31edaef04ad56f17a79ea9c23602c22de979f8c5b0f5e101e8981cc13fa16c13389d1d644fcb331aa412d2e2e95b32065433485b985023d9d02b7c950a8f58fe9d06bb42676ef8bd6cbdc8d81be38727c3d1346052b876ffc2a7894df6014cffb8765baf505b148c413ce67da42e5a545184e81cf89d0a7077b5928519b4cd368b8cdc3b36d40fe56ef46f91948f219a37bc5481ae108a87ce0d49a3103372b2238d7fadeefc59079bdbc13bd008dcf17cf277ac5649fe6b2c99c82a40d9ed04c254fc0741d016bf489951ace271abf2325f03490a2d98d98706123000c948212d24773bf6aaf6f5c174cb57dc11bcb0eb280aefe42c2cfbfff00b1080729e5abcf0f68a7564226136a993f2ebcbd490015f735c89c3da583a40b01393eea9cd7f445e88474ce6637358e22f888ca43f3d8b4a7c9112af8ec38f0f6d82e3c2f33a09c22b9bc59bae9e1bc62af9a198b6faf614b1f00b162b3d024257383e62b6ea33ee47b9552f611e2dd688edd5a70f0d1f1ae6cb7feaf80538a12e497df5cae57082dfc455583e0e10cd42d9538f701dc288c7278026db7bcbd22522253a16627d9fa8eb6704bedc818e384cbfa989ce8bb9363c30b18fa8dc8146b52e3c8082aefd94d1759c7b6e8e009b6c8657315ee436b73d147d28ef7ab457cb0e440e53b1c1c3ac1b859f7b9bbeacaf4f021ab31adc89ee806a6100145ac7aee9939a3c4e88bdd89894bbaa54339ffad2de4471c6de87ce227fbf4e1fc28f38b4bbbdab128ed53c041f715cd9aed5566eed229d9397c36d2826b1aa329ea6ba35021d983fd4ec11ed19c70cb0f59955c0bd808a9ec61bea979efc27722b2994c1be087fb81ebdd0002094bf40c443cc75ea865d9ccdb7b5173a4cbb6eaf9e49f61c8a30c50dacc9d4853277c88dc09d914427e8c72d61bd7729370b5249a5fe9813e28e3dca896ab912b4c6f8bf41635bafd07cb2f24c7d558bd88dcf4ceae4f8b464d044725926393e8101513506e0863625b95f1eb00aa573738a267562bfcae822ed5976dea494633fd5ac1c372c7413812da959fdb14d92628ff3b4bd64009a44c6141f70023c57ef25c00a12f08a91222aa1a1a4e5793de94ec6d3712521a22a694694ce5fe24c86f94385dfa07fc4ba3f3cde5e79c9880d35cbf8f046452ffa785d4a327356d335ce1342f6e96c2341cfd547816c10430fc5d825b841699dd25755d91aa3bb6f1b665200fcb11423dc24b12164008e5f59712368b23cac6b7526ce0ffc9b46a3562c4e7d1236d12d922bcf9b420b3a5dd2179fcaae4d948ef4c947074a270e823eeb5d65a5d1dd71681f280068696d1821773267377a1816d4bc651052c9a7b77c444bb3e45d15e4203423367ae83c8703e84531a43faa8e8713b43e20378bcc8e9f06403e01660848862d8273cbe5633589f49bc4a9692becfd187ede5e1ae1c14992aa70ee89a12e6bdad4a561eae6a205185e2777a21e2f18c679eb36998ce1fae7d2eccf3c74bfa9866f873630f87a41869d49f25c432a748e6701f7e4478150f649f5092621cfe09905f36e7af54bf0a68137d37f43fd1b9acf8073c50104ab289f28251ab47d1df0fa54c640fc2ed53cb573d6adff94abd64a2b6c415507447b06f708546ceab5c66cd1c4fd35678fcbad98e00cff9c13ff56fd843ee4cfa1528d3de69b2256a1d95a5eef9dfaec1e53bb3fbd31aedbeb07b3a56c82f91e7bf19f10ffb26a071b0f3ae7f01ae448d5b8b1a2b90fa070f48e3325c0da14b6c2e02e97b809987a6e7936539b59f4bda44b018e63d3ae651b38e69babbe3c33db24002f18d35841e0524d187c329cf3cd17c8620b045ae40ed5aa4ecef3629fdf5d6985fe4df2b80ab9ff4ed3672bb3cbcb4f9b6f24470e6127f341accfd5f4ff955e03e5d6e8996991bcb41f979b8427d6aa7395d0facd9a053b760626ed4f3f4073f4f95bd87a7781a70efc837067adc8dd9c61f12e324b87fd9424ecc9f13623ac55fe34426833a8c4bf1340deaee3216e0c5079cb246af6412671e6b028dc4f928a5097fc1f4924700a54cf5d03ad447b00ac42442922c7067baf047c5220284c4d33bfaa89e00ff10924a946d6dfb088669706ce007204472ff152bfffa3a0df58ad2de8989360efc6c52d53294bb5ba84eb5ccde221ab96a1bda7ee51a9692e5f992ca94007c6bd53e11f09a90a4f42621d6e907f50ed7f1c3eddb83ccbc0536be97c6a81a4138f54dab155ba71f10b0f228f172d1b17553e799ba043122e71ff7e6db1e328ca6f9a94764c138e6e2f32aab798c815f749223d8bf09708852e41be4a01667b32ee0c998de899c2d146647addb42c4ad233edc78c3c544a8b9a919dfc395605dd7d368722f2983a2e1e77974b7f3ecaeedc913091909d9dd73506daddcff342f7fffd483a50eee4f8227ec541e27879e2808cdbe122e7c85c7d815f7f27c678b4283343fe2f6feb4811ae7b522ad6408de60ab268b8717f973a8a43773ecf29d7d08dd3d35d716fd0197c2438564a2e70e836e7e10bb169df1a58d075b09c76d74bf2841f8ca42e5edbfd7bbf11957649f311cb95d20608b3fc527cc03ac836ef5386c74baf03f1a1eb0fbbbedf43927e2fbb3431d6fc8b0351f05ae92c3b8d9fb464417aba491ef05e89e9df4599f79a357d4100b43b7d0f4d05af9cbabba106677d6ef51412a30dc14b9eedb8425f38af54bb19235796de312d02dd87d717e5fd7f3c4671ddf10ba1e9b867ffbc439a8bf49b74dd2c8e1f66c60e50befb19d3771c9969c6c5fbdd127572da9a7c27a69cc46a89a4443af2d4d11a7bace14af1d841cac1883afa830d37c9da7b2354bfc900b8789f473e17c9a7509ea28c66caf3e9b3e0981a3bdeebbd4b6875284b63b351e29bbbfc158c6a268e37e6ef721031816568133300f09cf7979db99d3c460b3b146ed264fcdbcd1211fd80b75464ad24e611851a47d1675c20e511b40cd5b4e9a21afaf18a142a5dc4f84e860f756e7f1e752e8893bbd189b189fd2ebd12ea4b2cddf74d366346de4552a09b691dc79cbfb9b3efd8ad8a626db3b346dc9ac927cf156b45828c89fe316bc96c90b19c1da5b6a63ee8688993f6cab84ef0b4ad42a2646b161f9c940b4cad0dd72edbf3e566905570e4b722fd09c9edf1766740becaa28f838fc0093a37b59abf047588df8967e81e112187f25a5663b865c4dfa8c1e1f60343ef31d9dfb8edc3e393517017d6741f7f1d69e7a7cf8e7b319c5bd5665f03bcb5de676865f72043b09ea6a617cbf4275c0edb15ba72699a13a80ccb62a0a9c0c65f3a070b5b427c5894aba6d602d5170b51e56b750472e5a4a0985e65e6ff996e0e36d88909e531d122f7c4be85f7e053ccc14f1dd907d21712d42ba3e0916189b109af772c71868705549cd64b4ea20c317ae009a76199bbe71c7ecafeb4bd0d05c6bfeff33236314d6c198c58418866cd757eada3fe395fe6d716e4dce56d029f0c4ee762cd676486028873310e6a65dbbb7d1a2d5b251812d3c1971a6391480264a142f817907515de271d19938ae9d3a798b2a17dc18bd976c2f2a41915cb7147eabce0d0e6c8012fb289136883c3e4a30f2c47b8a88764d8d57923b2bd794512f2f320b891abc9b5d66e337ef544dee573c2beabfe4579d737f7245c977d3140c7b14ddda79e70ffe55febb312f13f16f09049b3360026dd2b7d141e3bb26aee914b50f817e4f421a14b67715894e780b93eb918346d680366d77475b4d6f47720e66bf61c09834535575ac215cbdbf52c4c198570acf35fc6660162c5ad6543d54961b5157b859c2cbfb140bb7706d1462c699391f4f688a0f03df15b2584d7dbec0eea0e4f4c4313772fee1ee3756ea70c5207f6f1ce59b460c151e8e5e3f7b900d9be8213dda1c73843d26e1418fee27fa8c372f28c237d2cab3c887884a91d2b2e3d0d2cc31cc86c1795b85c64bb87039b641d049639543b96032eb0d706047d3f8ad3fa981ad8e883d58822396ba47bde4fcf163b34de6f3aaecc5be92a571dc66dc84025ee93d4753bc8df8b05e452b33c41e24318dd51128d2b7e6bac7a766f48641c06d18a976a8c12f9ec6ec24af61cda9e120beabe2846a6d32c23efec88a817debb2d73c9977d06054d87ef0b44a685bf4c01ae1decafbb7b2176224f31b86f018052c802642e0f4db79d77b8ec49e7ec91fedcd95c1cbcc007f2c8e3391d51d35e3c0a6fb0e53f88e9972b8fd67b7827c96dda9b20fafd38d05ec4ad2cf2827fa62e1567ae3b81518c9065c58d9e9bf95c94b05e883092d70f501797bf26e03ec5a06b6a0ec71c039020ca9d27359152a54efa9ca0a1dadc5a637c968434acf9c567f24e6567bd218e53a58c40b52971c7748e57dd0af1034f0dcf2b32f9943d631238cd9cf822b1441cd62fcd7ed2a5e6f0eb36b525c8871ece81e1ee428a8975c6e7c8c2f723d296772fb18bc208698ee6a288d71e82521232b8eeb23afa76c8a0969ff5c03a4254b3479e4d413e40067dffea005cc041e1cb96c299b03a34603816dee8ef15ea63383391b3187091107e5652827bc88dfaed424e41ddbfd2ee1611b75aedb9a7d3c0d6f84167553ad9ba889aaebc21534a5deb764551c921122c1f6f5220b045ac39afc6be8cae35cc87e5429ef88860204d19ee9d30c6a36e72817b8ee2ae8709f864bed39e3e496152f80233c2361c42e09bde684f7dc771dc9be56906c1a56ef943584c9b922a889c2dd8d832e2351fe3848fd52734584d6e1ec1f5ca17b9e710c025b21c89477219d60f5815803a021baac6d47f4e1ef406ef0b3272c38ae5fbda9c9854c827522cde9c4eab8b49d405b0f4edf8ef4420351d665f9f6f03f893adba2c8595e85647ddf6fad1a342665330886b53de880cc70adeafa53c5c9b24dfa6544a3313e339e9e337af6fccb936d5876c49dfa0d2acd5dcab790ebd74c84f9f540ddcc23902e37d02ff4ba8c09b9fa8da7370e00d0ff8fa394ae63d2d9fc570912a48ce532b7e784f4de83125162ab58074923642198d73e641e65f548d8b2e48c559b87a6f0f93e33b14e047c8ccc7c0d4e3118687c38334a8c9a955d4da47d0801462a6f067e8c515786ded39198bc4c9909ff04ff8c250e8068807f7ad4f8840233f11dae62a99c9c7ac215d860c159036944ca7cf87d5e3eb25bc7d2da8d39f69eb3bf528833ad8baef2319651077518b29fb5b5fa5dad5f64eed7d6fff5f5133c779af03b39261375be9aa041670baedef3f177be8149560c37cb73b7a1d6aee6a6936d792d0d827c6468322ab230fd7b0236489906497a902301a36ee91f2618d846cb229c675378cebeeaa84d9e8db50acf2a28bf000f14925ba9626149ab85ed64c6a45f5a974e1960962eee7adf1774bae337ab10c263852d22b4e1b8056b2575db555fc3e934282595005acaf7a547a53e74209d90277d26419178cf35f4e1c074e1c86725218ae34c0eeb814264ab91f525d7df402aeb37a15c6f49dc6136e6635463b90c4131a947523bc12ed158165861d3919355ab6e373938b8dd53416297d4b8d0a2785547317e8aa9ac51b8aa6ab21e52afd8db9d05c101ebcd387b55431e73d3f814ed50a42bfb0fde3e2517db75d3cacbfd879666dcc675b36735da78b37d2b985207db4106f7abbb245352350c870e3d8efd676b91a91abd77fc511dfb4f0ec70fb708376747009a191df71f3b77c44f2e6ac77d4b18f6aeb0945c7abfce92448d1ed53a57bd6161c205b135365367273bdde30a302506a4de958d3af22ce403bd5202e2b79d8ce96c3207357b8942f9e6a833d6f2f13c285d0543d7097bbf2d1056220a07370b0bcda28c5a8b424211838167fd2236506d64b824bdf6c20b0a0628ace43e9bad7c5bd704b6dbfd8632b56575b27a06578a744698345d757be7d7dd0fb8ba8ec9d68aedcd681f2574a4bc7c786d85a07ed35656945e221ed2c0f4e2ca7f3e9db80a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>逃</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E9%80%83/</url>
    <content><![CDATA[<!-- toc -->
<ul>
<li><a href="#一">一</a></li>
<li><a href="#二">二</a></li>
<li><a href="#三">三</a></li>
<li><a href="#四">四</a></li>
<li><a href="#五">五</a></li>
<li><a href="#六">六</a></li>
<li><a href="#七">七</a></li>
<li><a href="#后记">后记</a></li>
</ul>
<!-- tocstop -->
<span id="more"></span>
<blockquote>
<p>你所说的曙光究竟是什么意思。</p>
<p>——海子《春天，十个海子》</p>
</blockquote>
<h3><span id="一">一</span></h3><p>等我迷迷糊糊睁开眼时，阳光已经从窗帘外透进来了。</p>
<p>我裹着被子翻过身，想不起刚刚发生了什么。今天是周几、现在是几点、为什么我在这里躺着，突然一点都想不起来了。我半睁着眼盯着天花板，看着透过窗帘撒在上面的一点点光纹——像是漆黑的世界的裂痕。</p>
<p>我刚刚做了一个什么梦呢？一定是一个特别美好而温馨的梦，因为我现在脸上还带着笑呢。梦中好像有一个女孩，我还记得我在梦的结尾向她跑过去，拉起她的手。可她长什么样子、声音如何、我与她之间发生了什么故事呢？她又到底是谁呢？我一定认识她，因为梦里我对她有一种那么熟悉的感觉，是那种久别重逢一样、并且深信命运的指引使我们相识的感觉。</p>
<p>可我为什么现在什么都想不起来了呢。</p>
<p>我起身走到卫生间，站在镜子前，我打开水龙头，捧起一把水抹到脸上，但这水为什么一点都不凉，而且缺少水的质感，我像是把某种丝绸状的东西抹在了脸上，然后它们又缓缓一点点滑落了。我忽然想起来我现在脸上应该挂着水珠。所以我抬起头，看着镜子中的我，我的脸上的确有着水珠的，它就在那里——可我怎么看不清我的脸，镜子里面只有一个人的轮廓，依稀有黑色的头发和黑色的眼睛。</p>
<p>我感到害怕了。</p>
<p>我逃出卫生间来到客厅，几乎占据整个墙壁的窗户将屋子里的一切照亮。但为什么天空上面一无所有。我只能感受到那是一片天，是光进来的地方，却什么都看不见，没有蓝色也没有云，没有一切天空的质感。</p>
<p>我转头看见屋内的东西：茶几上的水杯，书架上的奖状，小时候的玩具……我突然意识到少了好多东西，我家中远远没有这么空荡。可我想不起来少了什么，想不起来。</p>
<p>我发了疯一样跑到镜子前，拼命地盯着镜中我的模样。我忽然想到我可以盯着自己的眼睛看，这样我的脸庞会在镜子和眼睛之间来回反射，我就可以借此看清自己。</p>
<p>耳边传来闹钟的声响。我看见镜子从我的眼眶中碎裂，其中反射的千万的我立刻爬满了碎纹。</p>
<h3><span id="二">二</span></h3><p>我从梦中惊醒，伸手向旁边一下关掉了手机闹钟，仍然因刚才的噩梦而惊悚。等我稍稍定神，打开手机，今天是周二，现在是早上五点五十七分，我应该起身去洗漱，然后去上班了。像是从前无数个日子一样。</p>
<p>我坐起来下了床，不要打开第一个格子，从床头柜第二个格子中拿出袜子穿上。然后走到衣柜前，挑出前天晚上洗好的白衣服穿上。我起身走出房间，转两个弯来到厨房，从冰箱中拿出面包和番茄酱，放在盘子里简单解冻。然后走去卫生间。</p>
<p>看到镜子的时候我又一惊，有点迟疑地打开了水龙头，这次流出来的水很冷，水流很大，看来我的确彻底从梦中醒了。这是毫无疑问的。</p>
<p>等到一切收拾妥当，闹钟响起，此时是六点二十分，我该出门去坐地铁。</p>
<p>地铁站离我家三四分钟的路程，等我过了安检来到站点，闹钟再一次响了，地铁也一同进站。我从兜里掏出手机关掉闹钟，现在是六点三十分。</p>
<p>上了地铁，我带上耳机放上音乐，然后闭上眼靠在椅子上。等我昏昏沉沉将要入睡的时候，闹钟响了，随之是地铁提示到站的广播。我关掉闹钟走下地铁，现在是六点四十五分。</p>
<p>从地铁站出来会经过一条走廊，走廊上挂着康定斯基的《Picture XVI, The Great Gate of Kiev》的照片。穿过走廊就是扶梯，一年中的某些时候，我借扶梯向上攀升的时候，会看到太阳也在升起。盛夏的时候我会迎面撞上最最刺眼的阳光，以至于我不得不举起手遮住眼睛。可过一段日子当我已经养成了习惯，却会在到达地面的时候，放下手才发现日光虚弱的盈在周围，我才终于知道夏天已经过去了。</p>
<p>走出地铁站向右拐，就是我上班的公司。等我坐在自己的工位上，闹钟会在七点最后响一次。这时桌上往往已经放好了今天的工作内容细表，这是我前一天晚上早已准备好了的。</p>
<p>如此一天。等到晚上下班，闹钟响。我指定好第二天的工作计划，闹钟再响。走出门来到地铁站，再次经过康定斯基的画。买完票来到站台，坐上地铁回到家，我和地铁一起穿行，穿行在狭窄的不知何地的空间，穿行在看似无边无际的时间。</p>
<p>五点五十分闹钟会响，车会到站。</p>
<h3><span id="三">三</span></h3><p>第二天我又被闹钟吵醒。我伸手向旁边一摸，却摸了个空，一阵寒意猛然涌起，我立刻清醒了，坐了起来。手机仍在床头柜上发着声响，直到我抬手将闹钟关上。</p>
<p>起身，不要打开床头柜的第一个格子，从第二个格子中拿出袜子穿上。走到衣柜前，继续穿上昨天的衣服。起身走出房间，转两个弯来到厨房，从冰箱中拿出面包和番茄酱，放在盘子里简单解冻。然后走去卫生间，将脸浸没在冷水里……</p>
<p>吃完饭，闹钟响起，现在是六点二十分，出门去坐地铁。过了安检来到站点，闹钟响起。关掉闹钟，走上地铁，我拿出耳机，靠在椅子上闭上眼睛。</p>
<p>我迷迷糊糊回忆着自己早上做过的事：起床，穿衣，准备早饭，来到洗手间，看向镜子，曾经梦到的那个女孩长什么样子来着……</p>
<h3><span id="四">四</span></h3><p>我突然惊醒，那个女孩就在我的眼前，笑盈盈地看着我。我看向周围，地铁已经到站了，身边的人都在往外走，我拿出手机一看，现在是六点四十三分，地铁早到站了两分钟。我意识到正是这个女孩将我从沉睡中唤醒了。</p>
<p>那个女孩看我醒了，就拿起她的东西也下了车。</p>
<p>我跌跌撞撞走出地铁。她是谁？是和我一样的乘客么？我们从前认识？不，我们根本素不相识，可能这只是一个陌生人无心的善举……可陌生人又怎么会知道我要在哪一站下车呢？</p>
<p>我的闹钟突然响起，我连忙从兜里拿出手机关掉。现在是六点四十五分，我在不知所措中向旁边一瞥，看到了康定斯基的那幅画，那凄冷的太阳，以及那么温暖的月光……</p>
<p>我在那幅画前浪费了太多时间，因此我刚走进公司，闹钟就不合时宜地响了起来。一路上的同事都在抬头看我，而我只能匆匆忙忙地走到座位前坐下，关掉闹钟，现在是七点零一分。</p>
<p>今天一切好像都与往常不一样，也许正是因为我早上晚到了一分钟，我几乎没有准时完成一个任务。总之终于熬到下班，闹钟一响，我却不像往常那样制定第二天的任务表，然后再收拾东西。我关掉闹钟后坐在椅子上，闭上眼睛，一点一点向后仰去……我忽然又有一种失重感了，我知道再往后仰去我就一定会摔倒在地上，所以我连忙睁开眼睛立直了身子。可稍微靠在椅子上，应该没问题吧，没问题吧……我又闭上眼向后靠去，脑子里一片昏沉……闹钟响了，我意识到再这么下去就赶不上地铁了。</p>
<p>一路跑出办公室，跑进地铁站，路过康定斯基的画，却来不及再看一眼了。买票，等车，上车，在车上玩着手机，实际上什么都看不进去，只是一直盯着时间，直到手机上的时间显示为五点五十分，闹钟响了，车也准时到站，一切好像如常。</p>
<h3><span id="五">五</span></h3><p>我回到家里，站在洗手台前，盯着镜子中的自己，比梦中的场景清晰得多，而且我眼中也的确有一个我的倒影，因此我敢断言这一切都不是梦。但我又不明白为什么，这一天似乎经历了太多太多，而且好像完全不寻常，但我又找不出奇怪的地方。地铁到站早了两分钟，毕竟不是什么很值得惊奇的事情。再精密的机器总会有失误的一刻。我的意思是，这一刻是总要来临的。当地铁如此周而复始，在每个精准的时间到达站点的循环中，只是两分钟的早点也许就逐渐地被写在命运中了……我忽然想起之前有一天，我出门才发现我把眼镜落在了家里——那一天足足七点十分我才到了公司。那天我走进公司的门的时候几乎有些战栗，可我最后还是一步一步挪到了座位前。可后来还是什么都没发生，那天大概是——也许两年前，也许三年前。总之，这件事后的第一个周我总是胆战心惊，每天晚上睡前都仔细检查一遍闹钟，调一调音量键，并在走前仔细检查自己的随身物品。可不到一个月后我就将这一天的经历抛之脑后。事实就是这样，今天也是一样。而且今天还并没有影响什么，也许一个周后我就可以忘记这些。</p>
<p>睡前我又想起了这件事，我忽然有些虔诚起来，我想如果今天的确有些不同，也许我可以在梦中得到一些启示，一些可以被缜密的心理学分析的细节。这种信念越来越坚定，“只要睡着，我就可以在梦里得到答案。”我反复这么想着。</p>
<p>可这一夜似乎没有做梦，又可能做了，但我忘掉了。总之当第二天五点五十五的闹钟响起的时候，我什么都想不起来。意识到这后，我暗自觉得有点遗憾。</p>
<p>我坐起来，外面才刚刚有点亮光。该收拾收拾去上班了，我想，然后我打开了床头柜的第一个格子。</p>
<p>等我意识到发生了什么的时候已经太迟了。</p>
<p>格子里面是一面爬满裂纹的镜子。</p>
<p>我瘫坐在地上，突然认识到这可能是个梦。所以我又站起身来，拿出那面镜子。但它反射出的我的面容是如此的清晰。黑色的眼睛，黑色的头发。</p>
<p>我拉开床帘，外面是蒙蒙白的天空，看不见太阳，可能被楼挡住了，我看向窗外，又看向镜子，看向镜子里的自己。手一滑，镜子掉到地上彻底摔成了玻璃碎片。</p>
<p>我低下身捡起一块碎片，然后划向自己的手腕。可我什么感觉都没有，手腕上面也没有划痕，我忽然疑心是不是当我的手捏着碎片划向手腕的最后一刻向后退缩了，我忽然意识到我刚才也许正在幻想一种近乎狂热的痛苦，可这并没有发生，就如同我没有真的用玻璃碎片划开手腕。</p>
<p>然后一道裂纹在血的晕染下逐渐浮现，像是一只暗红的眼睛。一股温热的血像水一样流了出来。</p>
<h3><span id="六">六</span></h3><p>我的第一反应是，手腕很疼，很疼。但这疼不足以让我感到后悔。我想起来小学科学课的实验，将两面镜子对放在一起，它们便会无限叠加下去，放在镜子前的东西——也许是一块橡皮——就会被困进无尽的牢笼里，连同它的无数个分身一起，避无可避，逃无可逃。</p>
<p>血还在往外流，在这不亮的早上像是黑色的。</p>
<p>我艰难爬起身，扫落书架上的奖状，看向后面藏着的书——其中有很多还是全新未开封的。我把手腕尽力侧过去，怕血流到书上。我感到一阵头晕，摔倒在地上。但我还是强撑着意识爬起来，地上全是脏血和废纸。我忽然想看看太阳。</p>
<p>扶着墙，一点一点地，我向外挪着步子。走出房门，转一个弯，来到客厅。阳光刚刚好洒进来，照在空气中的上升的尘埃里。“原来现在正是盛夏”，我想。</p>
<p>我向着窗户跑去，才跑了两步就摔倒了。我抬起头向窗外看去。</p>
<p>天空是淡蓝淡蓝的颜色，太阳从高楼后面露出一个角来，小区里的树和花全被阳光照亮了。我看见天上飘着几丝细云，小区里的人工河里刚刚放上了水。不远处有位母亲正推着一个淡黄色的婴儿车。</p>
<p>我用完好的那只手撑着地面想要站起来，可我忽然眼前一黑……等我恢复了意识，我正坐倒在地上，眼前是我一路爬来留下的血迹，将地板染成一条红黑色的河。</p>
<p>地上好冷。</p>
<p>我正要闭上眼睛的时候，却听见了有人敲门的声音。</p>
<h3><span id="七">七</span></h3><p>我拼命抵抗着睡意，是谁会在此刻敲我的门呢？</p>
<p>老板、邻居，他们一个都不会来的。物业和收费的人绝不会这个时间点来。来的人一定是那个女孩。</p>
<p>对，是那个女孩。是她把我从地铁上叫醒的，当时我还在沉睡，全然不知道自己要坐过站了。当时我还没反应过来，连句谢谢都没说，她就走开了。她长什么样子来着？我突然觉得自己好可悲啊，临死之前，连一个女孩的样子都想不起来。</p>
<p>不，我要知道她长什么样子。我想要知道她叫什么，喜欢些什么，会不会也喜欢康定斯基的那幅画。我想要和她相爱，和她白头偕老，和她一起在公园里坐着，看新开的小花，新来的小孩子。</p>
<p>我撑着地，想要站起来，但我的手已经虚弱地支撑不起我的身体了。我不甘心，所以我将那支还在流着血的手也按在了地上，用力一撑，这次我感到手腕传来刺中心脏的痛了，但我总归是爬起来了。</p>
<p>我站起身来，跌跌撞撞，跌跌撞撞，向着门跑去。我以为我要到达门口了，直到我被我自己的鞋绊倒，一下子又摔在门前。这次我彻底站不起来了。</p>
<p>好吧，我想。我再也无法知道她长什么样子了，我无法得知她的爱好，无法得知她是不是爱着我，无法得知我们之后的爱情会不会一帆风顺，还是吵吵闹闹，还是终于分道扬镳。</p>
<p>好吧，我想。这一切终于要结束了。</p>
<p>可此时闹钟突然响起来了，我听着那刺耳的声在我兜里响起。我掏出手机，将它狠狠摔到墙上，它于是终于彻底不再作声了。而此时敲门声又响起来了，比第一次更清楚，更清脆，更加的近在咫尺。</p>
<p>我的手在一旁胡乱地摸着，想找点什么扶我起来。手臂在空中挥舞着，最后只抓到了自己的睡衣。我十指狠狠地扣着自己的衣服，用力站了起来。我的血全抹在我的白衣服上，形成一幅扭曲的图腾。</p>
<p>我抬起头，正好对上客厅的阳光。太阳已经从楼外完全地升起来了，一路上的扭曲的血迹被照得金红。</p>
<p>我闭上双眼，想象着自己现在的样子，黑色的头发，黑色的眼睛，站在一片腥红中间，眼前只有太阳在缓缓升起，升起，升到天上去。</p>
<p>那个女孩长什么样子呢？</p>
<p>我睁开双眼，茶几上的水杯折射着光线，柔和的尘埃在光里飘着，洋溢着整个屋子。</p>
<p>那个女孩长什么样子呢？</p>
<p>我想起曾经读过的诗歌，看过的小说，曾经见过的人，经历过的事。我的眼角渗出泪来，但我看不见，也许我的眼角渗出血来。</p>
<p>那个女孩长什么样子呢？</p>
<p>我将手按在门把手上，门外已经听不见敲门的声音了。也许她走了，也许她从没来过。</p>
<p>我突然感到恐惧而不敢开门，或者因为双手无力而按不开门。</p>
<p>最后我抬头看了看窗外，天空是蓝的，上面一无所有，但是飘着云彩。</p>
<p>我的泪落在地上，散在血迹中，在一片深红中点出几丝粉色，像是点在血液中的云彩。</p>
<p>然后我打开了门。</p>
<p><img src="https://ts1.cn.mm.bing.net/th/id/R-C.857d4adbadb26a69e5a3a68f005781f7?rik=jQ8XQX9xF%2bRDUQ&amp;pid=ImgRaw&amp;r=0" alt></p>
<p>（写于2024.04.30）</p>
<p>（2024.05.18修改）</p>
<p>（2025.04.21再改）</p>
<h3><span id="后记">后记</span></h3><p>马上高考了，先祝大家和我高考顺利！</p>
<p>《逃》这篇小说企划了很久，又是中途易辙的一篇。原本想写的故事是从学校逃走，其实那个故事扣题会更好一点，最后的割腕也会更自然一点，下面贴一下之前写的片段：</p>
<blockquote>
<p>我好想逃。</p>
<p>我们班的老师正站在讲台上，或者说站在比地面高二十厘米左右的台子上，拿着粉笔在黑板上拉着，头顶是刺白色的灯光。白炽灯下闪着在空中乱旋的粉笔灰。</p>
<p>我坐在人群中，坐在桌子下，双腿稍一移动就要碰到桌子腿——我试过用力地将腿向两边舒展，可这样并不能将桌子下的空间撑的更大一些，而且还要碰到旁边同学挂书的袋子。我的桌子上摆满了一会儿下课之后要复习的资料，它们在左边堆成高高的一摞。又有几张这节课要用的卷子铺在面前，它们占据了桌子上最后一点位置，让整张桌子终于被黑色的字和白色的纸所填满。可是桌面的空间狭小到不能展开一张卷子，甚至卷子的下端要悬在空中一段，在头顶不知道混杂了多少尘埃的白光下，我可以看清它粗糙的边缘。</p>
<p>我的笔袋放在桌子前方，如果我挪动卷子，那么它现在立刻就会被碰掉到地上，里面藏着的刻了几行小字的笔，藏着的留作留念的纸条，藏着的朋友对自己的祝福就会杂着笔袋中混入的橡皮屑，叮当一声散落在地上。全班原本的沉寂变成安静，所有人都盯着我。然后我站起身来，穿过自己的厚重的挂书袋，走到桌子前，蹲下身来收拾自己散落的东西。会有好心的同学来帮我，然后我对他们说声谢谢，站起身来拿着笔袋，再次穿过挂书袋，回到自己的位置上。</p>
<p>我想逃，想现在就冲出教室。但我怕冲出去后同学异样的眼光，怕老师在身后严厉地呵斥，更怕我一听到那呵斥，于是就两腿发软了，爬回教室，用双手在地上撑着走回自己的座位。</p>
<p>终于有一天我决定行动起来，那一天晚上我花了半个小时的时间收拾自己的东西，我清理好了桌面，整理了一大摞卷子，将所有的教科书分门别类地摆放在了角落里。可第二天，当新的卷子发下来，我又手忙脚乱不知道该把它们放在哪里了，因为哪里都是满的。当老师忽然又要从好久好久前讲过的卷子中翻出一张来讲时，我又不知道该从哪里找到它了。而当我晚自习收拾出比头还要高的今晚要完成的作业，下课时却总共做了几页的时候，我还是不愿意把它们收拾起来，而是仍然堆在桌子的角落上，知道某一刻我终于认清自己是没有时间完成它们了。时间日复一日的过去，我原本所整理好的就又归了混乱。</p>
<p>发卷子的时候，我喜欢用两根手指捏住所有卷子，然后从最上面抽出一张，纸张会和手指摩擦出轻微的声响。直到有一天，我的虎口略微向前了一点，纸张仍然发着轻轻的响声，伴随着虎口上刀割的疼痛。</p>
<p>我抬起眼，举起手，看着上面的伤口，那是纸的带刺的边缘在我手上锯开的，像是木匠锯开一根死了的柴火。锯开地方的皮略微舒张，露出下面粉色的肉，看不见血，可能是因为伤口浅了一些。我试着轻轻挤压伤口，然后伤口破开了。顺着那道狭长的口子，一点血渗了出来。我怀疑这图案我在哪里见过，随即意识到我小的时候画人的眼睛就是这么画的：一条长长的向上弯的弧线，再加上一条长长的向下弯的弧线。</p>
<p>这时我突然意识到自己不能再这么细致地观察一个小伤口了，时间宝贵。所以我把卷子传给后面的同学，并在心中对他们略感了一点歉意。然后我低下头看上面的题。做完第一面，当我想要翻页的时候，大拇指略微外展，于是原本可能已经愈合的伤口再次撕裂，我又感受到了那轻微的疼痛了，而且仿佛听到了那轻微的声响。</p>
</blockquote>
<p>原本的故事后面，会转学来一个女孩，会与主角相知相爱，直到他们的爱情被发现，女孩因为反抗而被开除，可这时的男孩却懦弱地什么都不敢做，也什么都做不了。当他在家里想起女孩时，他痛苦地选择了割腕。在他将死之时，他想起了他和女孩之间的点点滴滴，女孩在这时敲响了他的门。</p>
<p>这个故事我也尝试写过，甚至一度接近写完了，但最后还是放弃了。原因有很多，其中一个原因是，我突然开始构思另一种可能的剧情。</p>
<p>原本我想写的故事，是一个神启式的救赎故事。一个近乎天使般的人拯救了一个懦弱的可悲的人。我其实在现实中也许也是这样一个懦弱的可悲的人，什么都做不了，只能一次次反抗又一次次被迫臣服。所以说到底，原本的《逃》只是一个幻想，一个希望。</p>
<p>但后来我越发想，幻想的越多，越来越觉得这种救赎是飘渺的。也许真会有这么一位善良的骄傲的女孩，但绝不会爱上一位懦弱的可悲的男孩。总之，男孩首先要做的，是<strong>自己救赎自己</strong>。</p>
<p>在本文中，“我”有着无法逃脱的宿命（闹钟/时间），有着不堪回首的过去和几乎崩溃的精神（碎镜）。这一切看上去，这种禁锢是无法被打破的，就像文中说的那样，这座囚笼逃无可逃。</p>
<p>一次救赎，一次他人给的救赎，会像是一滴血落进一杯白水里，瞬间绽开奇美的色彩。但等血扩散完了，就还是只会留下一杯红水。同样的平淡，毫无生机。</p>
<p>文中的“我”非常清楚这一点，他认为宿命是无可逃避的，即使一时将它改变，也只不过从一条道路走到另一条道路上。其实他到最后也仍然是这么认为的，其实我现在也仍然是这么认为的。</p>
<p>但，走到另一条路，会意味着更多的希望，会意味着见到从前从未见过的风景。也许人在跳脱当前宿命的时候，也可以尝试选择自己的宿命。</p>
<p>这就是最终的结局的寓意：一次重生，一次新的开始。门外当然不可能是女孩，但总之，男主会被送到医院，会得到救助，会迎来新生。他也许会去找到那个女孩，也许会表明心意，也许会在一起，也许会白头偕老；也许那个女孩从此和他再无关系，他将自己的爱投入生命之中，直到遇到真正的那个，能和他永不离分的人。</p>
<p>总之，比起困在当前的命中，他此时拥有无限的未来。</p>
<hr>
<p>我其实一直想为自己的高考写一篇小说，你可以把它当作我高考前冲锋的号角。</p>
<p>可能很多人都觉得我执念太深，其实我自己也是这么认为的。在经历过种种后，这执念本身甚至加上了许多理性的束缚。我觉得自己一直都是一个追求幸福的人，哪种选择可能走向幸福，我就去走哪条路。但真正选到死路之后，我才发现原来世界没有那么简单，不是真的，只要有理想和爱，就什么都可以做到。</p>
<p>起码，我改变不了别人。我做不到让一个不爱我的人爱我，做不到让不理解我的人理解我，做不到改变顽固不灵的人的想法——或者我自己也是一个顽固不灵的人。我也不可能，不可能像所有童话故事一样，等到救赎自己的精灵，等到一股强大的外力将我现在的所有囚笼击破，等到一位天使将我救赎。</p>
<p>我很喜欢霸王别姬的一个镜头，并且几乎天天引用这个片段：那就是当小豆子和小癞子看京剧名角的表演的时候，小癞子放声大哭：“他们怎么成的角儿啊，挨了多少打啊，我什么时候才能成角儿啊？”</p>
<p>后来小癞子自杀了。师父对小豆子说：“人呐，得自个儿成全自个儿。”</p>
<p>所以其实，也许从来就没有什么天使，没有地铁上叫醒你的人，没有帮你打破闹钟的人，只有你自己，抓着自己的衣服，在血泊里爬起来，向外张望撒进来的阳光，逃离这所囚笼。</p>
<hr>
<p>我有的时候自嘲，说自己每次想要改变的时候，可悲的事情就会一件接着一件纷至沓来，仿佛是命运逼迫我成为行尸走肉一样。</p>
<p>好像总有人在充当命运的刽子手，一刀一刀将我活剐成一具骷髅。</p>
<p>我有的时候甚至以为，救赎是一个标志，是命运终于允许我拥抱幸福的标志。只有有了这种允许，我才能抬起头来生活，将自己从无尽的悲哀中拽起来，看看太阳。</p>
<p>这个标志是什么呢？也许是一次巨大的成功，是时来运转的惊喜，是一个爱着你的人，无微不至体贴你的所有。</p>
<p>但后来我明白了，原来救赎其实是，你坠到沼泽中，全身都被脏泥淹没的时候，好像听见有人在叫你。你突然睁开眼睛，看了看太阳。</p>
<p>原来太阳是那么耀眼，原来周围的叶子也可以反射太阳的光，原来空气中的尘埃都在光影中浮动着，绽开着。</p>
<p>你想看看是谁在喊你，可你无法动弹。</p>
<p>你拼了命向上爬，即使口鼻中全是污泥和脏血，即使四肢被厚重的泥土压到畸形。原来还有人在叫你，原来还有人爱着你，原来这个世界如此美丽。</p>
<p>你用尽自己全部的力气，像是生出了额外的羽翼，你从此不甘心被活埋，被忘记，被裹挟在地下沉睡成百上千年后化成黑水。</p>
<p>你向上爬去，终于会爬出沼泽，会带着一身的伤痕站在地上，四处望着是谁在呼唤你。</p>
<p>至于到底有没有人，至于你愿不愿意相信刚才这里存在过一个人，至于你愿意相信她是谁，这完全取决于你。</p>
]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
  <entry>
    <title>眼</title>
    <url>/2025/06/22/%E9%B2%9C%E8%8A%B1-%E7%9C%BC/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="439dfe845f5a6c2e9a5f65ff3571f19ffe8cb9e3b100fbcdb9a8bd7793c87bf4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>鲜花</category>
      </categories>
      <tags>
        <tag>乱想</tag>
      </tags>
  </entry>
</search>
